SAT Encodings of State-Space Reachability Problems in Numeric Domains

J¨org Hoffmann
DERI Innsbruck
Innsbruck, Austria

joerg.hoffmann@deri.org

Carla Gomes & Bart Selman

Cornell University
Ithaca, NY, USA

gomes|selman@cs.cornell.edu

Henry Kautz

University of Rochester

Rochester, NY, USA
kautz@cs.rochester.edu

Abstract

Translation to Boolean satisﬁability is an impor-
tant approach for solving state-space reachability
problems that arise in planning and veriﬁcation.
Many important problems, however, involve nu-
meric variables; for example, C programs or plan-
ning with resources. Focussing on planning, we
propose a method for translating such problems
into propositional SAT, based on an approximation
of reachable variable domains. We compare to a
more direct translation into “SAT modulo theory”
(SMT), that is, SAT extended with numeric vari-
ables and arithmetic constraints. Though transla-
tion to SAT generates much larger formulas, we
show that it typically outperforms translation to
SMT almost up to the point where the formulas
don’t ﬁt into memory any longer. We also show
that, even though our planner is optimal, it tends
to outperform state-of-the-art sub-optimal heuris-
tic planners in domains with tightly constrained re-
sources. Finally we present encouraging initial re-
sults on applying the approach to model checking.

Introduction

1
Satisﬁability testing is a signiﬁcant method for solving state-
space reachability problems. In 2004 and 2006, the winners
of the track for optimal planners at the international planning
competition translated bounded-length planning to SAT test-
ing. In model checking, determining by SAT testing if or if
not error states are reachable in a ﬁxed number of steps often
succeeds where BDD methods fail [Clarke et al., 2001].

Many important planning and veriﬁcation problems, how-
ever, naturally involve numeric variables and constraints. For
example, C programs, or planning with operators that con-
sume resources. The question arises as to how to best gener-
alize the “encode as SAT” approach to numeric problems. So
far, two different methods have been pursued:
(A) Interprete numbers as bitstrings, and numeric operations
as bitwise operations. “Implement” these operations in
a propositional CNF.

(B) Translate not to Boolean satisﬁability but to “SAT mod-
ulo theory” (SMT), that is, SAT extended with numeric
variables and arithmetic constraints.

In software veriﬁcation, both method (A) and method (B)
have been explored, for example by Clarke et al [2004] and
Ganzinger et al [2004], respectively. In planning, so far only
method (B) has been explored, namely in LPSAT [Wolfman
and Weld, 1999] and TM-LPSAT [Shin and Davis, 2005].

The disadvantage of method (A) is that it involves the cum-
bersome implementation of bitwise operations in a CNF. The
disadvantage of method (B) is that the expressivity of SMT
languages comes at a price: the solvers are much more com-
plex than SAT solvers, and do generally not scale as well.
Herein, we explore a third option:
(C) Approximate the reachable variable domains, i.e., de-
termine sets Dt(v) so that, for every variable v, every
value that v can have after t transitions is contained in
Dt(v). These ﬁnite domains can then serve as the basis
for a Boolean encoding, where atoms represent numeric
variables taking on particular values.

Of course, this method will only work if the sets Dt(v) do
not grow too large. The underlying intuition is that the actual
number of distinct values a numeric variable can achieve in
a bounded-length problem is often quite small. Our experi-
mental results conﬁrm this.1

We focus on planning. We approximate reachable variable
domains by constructing a “numeric relaxed planning graph”
(NRPG) inspired from work on generating heuristic functions
[Hoffmann, 2003; Kupferschmid et al., 2006]. We add some
more intelligence in order to obtain smaller Dt(v). Based on
the NRPG we obtain propositional CNFs in a manner inspired
by Kautz and Selman [1999]. The CNFs are handed over to
the state-of-the-art SAT solver MiniSat [Een and S¨orensson,
2003]. The plan length bound starts at 1 and is incremented
until the ﬁrst satisﬁable formula is found – this way, the gen-
erated plans are optimal (have minimal length). We call the
resulting planning system NumReach/SAT.

We run large-scale experiments on a broad variety of plan-
ning problems. We could not compare to the existing plan-
ning systems using method (B) since LPSAT is outdated and
TM-LPSAT is not available (see also Section 4). So, for this
comparison, we implemented such a system ourselves, called

1There is related work [Seshia and Bryant, 2004] using a notion
of relevant variable domains in solving Presburger formulas. The
context and techniques are quite different from ours; e.g., the vari-
able domains arise through an iterated interaction with a SAT solver.

IJCAI07

1918

NumReach/SMT.2 This is identical to NumReach/SAT ex-
cept for the encoding of numeric variables. The SMT formu-
las are handed over to the state-of-the-art SMT solver Math-
Sat [Bozzano et al., 2006]. NumReach/SAT consistently out-
performs NumReach/SMT almost up to the point at which the
(larger) SAT encodings no longer ﬁt into memory.

We also compare our planners to the “sub-optimal heuris-
tic planner” family, namely to Metric-FF [Hoffmann, 2003],
LPG [Gerevini et al., 2003], and SGPlan [Chen et al., 2006].
These planners are fast (they respectively won the competi-
tions 2000–2006) but are usually not compared to optimal
planners since such a comparison is unfair. However, we ﬁnd
that, in contrast to the usual competition results, in our con-
text optimal planners are quite competitive. NumReach/SAT
outperforms all the heuristic planners in a basic domain with
tightly constrained resources. This is an important result for
the planning community, suggesting to seriously reconsider
numeric planning.3 We ﬁnally present initial, encouraging
results on using our approach in model-checking domains.

2 Approximating Variable Domains
To spell out the algorithm building the NRPG, we need some
notations. I, V , and A respectively denote the initial state, set
of numeric variables, and action set of the planning task. The
initial state is a set of propositions – those that are initially
true; also, it assigns a value to every variable v ∈ V . A nu-
meric constraint has the form exp1[X] (cid:2)(cid:3) exp2[Y ] where (cid:2)(cid:3)∈
{<,≤,=,≥, >,(cid:5)=}, and exp1, exp2 are expresssions made of
constants, operators in {+,−,∗, /}, and variables X ⊆ V re-
spectively Y ⊆ V . Each action a ∈ A consists of its precon-
dition prea, and a set Ea of effects. Each effect e ∈ Ea con-
sists of its condition cone, its adds adde, and its deletes dele.
Additionally e is annotated with a set of numeric effects of
the form v := exp. Adds and deletes are, as usual, proposi-
tion sets. Preconditions prea and effect conditions cone are
conjunctions of propositions and numeric constraints. The
semantics are deﬁned in the obvious standard way.
t := 0, P0 := I, for all v ∈ V : D0(v) := {I(v)}

At := {a | a ∈ A,(Pt ,Dt|X) |= prea[X]}
Et := {e | ∃a ∈ At : e ∈ Ea,(Pt ,Dt|X) |= cone[X]}
Pt+1 := Pt ∪{p | ∃e ∈ Et : p ∈ adde}
for all v ∈ V : Dt+1(v) := Dt(v)∪{c |
∃a ∈ At ,e ∈ Ea ∩ Et ,(v := exp[X]) ∈ e, ¯c ∈ Dt|X∪Y :
c = exp( ¯c|X),(Pt , ¯c|Y ) |= (pre(a)∧ con(e))[Y ]}

1.
2. while t < b do
3.
4.
5.
6.
7.
8.
9. endwhile
Figure 1: The numeric relaxed planning graph (NRPG) algo-
rithm, approximating reachable variable domains.

Pseudo code for the NRPG is shown in Figure 1. The al-
gorithm keeps track of sets Pt of reached propositions, and of
sets Dt(x) of reached values (the reached variable domains),
at time steps t. Note the slight abuse of notation for I in line

2Implementing and evaluating a planner using method (A) is fu-

ture work.

3The heuristic planners employ very greedy searches, which do

not work well when resources are tight. More in Section 4.

1. By b (line 2), we denote the plan length bound we are
currently considering. By writing φ[Y ] for a conjuntion φ of
propositions and numeric constraints (lines 3, 4, 8), we mean
that Y ⊆ X is the set of all variables mentioned by the numeric
constraints in φ. By Dt (lines 3, 4, 7), we denote the cross-
product of the Dt(v) for v∈V , i.e., Dt := Dt(v1)×. . .×Dt(vn)
where V = {v1, . . . ,vn}. For a set C of value vectors, or for
a single value vector ¯c, by C|X respectively ¯c|X (lines 3, 4,
7, 8) we denote the vector (set) restricted to the variables X.
For a set P of propositions P, a set C of value vectors, and
a conjunction φ[X] of propositions and numeric constraints,
we say that (P,C|X) |= φ (lines 3, 4, 8) iff φ’s propositions
are a subset of P, and there exists ¯c ∈ C so that ¯c|X satisﬁes
φ’s numeric constraints. By exp( ¯c) (line 8) for an expression
and value vector, we mean the outcome of inserting the values
into the expression.

In words, the NRPG is built as follows. The reached propo-
sitions and variable domains are ﬁrst set to the initial values.
Then one iterates over time steps t until the desired bound is
reached. In each step, the action set At is the set of all ac-
tions whose precondition can be satisﬁed at t. The same is
done for the effect set Et. The propositions reached at t + 1
are those that are either reached at t, or added by an effect
at t. The reached variable values at t + 1 are those that are
either reached at t, or that are the result of an effect at t and
a value vector reached at t that satisﬁes the conjunction of
the precondition and condition of the respective action and
effect – intuitively, this means that the insertion of new values
is “guarded” by the corresponding conditions.
Example 1. Consider a task with a single variable v, which is
initially 4, and a single action whose only effect has the condi-
tion v ≥ 2 and the effect v := v−2. We will have D0(v) = {4},
D1(v) = {4,2}, and D2(v) = {4,2,0}. Then the algorithm
will stop – since the effect v := v− 2 is guarded by the condi-
tion v ≥ 2, the value v = −2 is not inserted into D3(v).
The NRPG is admissible, i.e., every value reachable for
a variable v within t steps is guaranteed to be contained in
Dt(v). However, the algorithm is exponential in the arity –
the number of variables mentioned by – conjunctions of pre-
conditions, effect conditions, and effect expressions: if the
maximum such arity is k, and the largest involved variable do-
main has size m, then the number of vectors to be considered
is bounded only by mk. Hoffmann [2003] avoids this blow-
up by keeping only the max and min value of each Dt(v),
and accordingly approximating the satisfaction of (linear) nu-
meric constraints. Kupferschmid et al [2006] largely avoid
the blow-up by treating every numeric constraint in separate
rather than addressing conjunctions, thus potentially decreas-
ing the above k a lot.4 Our rationale here is that: 1. In dif-
ference to these works we need to compute the NRPG only
once, rather than in every state of a forward search. 2. The
arity of numeric constraints, and even conjunctions of them,
tends to be small in many planning domains – e.g., express-
ing constraints on resource availability usually involves only

4Another difference to both Hoffmann [2003]’s and Kupfer-
schmid et al [2006]’s algorithms lies in the “guarding” of value in-
sertions as described above: this is a new technique.

IJCAI07

1919

a single variable. Indeed, in our experiments we did not ﬁnd
a single domain where this potential blow-up was a problem.
Another potential blow-up turned out to be more severe:
the size of the domain of a variable v grows exponentially in
t if every sequence of actions results in a different value for
v. This happens in one of our test domains, where v is a re-
source, and every action using the resource has a random ﬂoat
cost. A remedy to this would be to give up on admissibility
of the NRPG (and, with that, give up plan optimality), and
try greedy approximations of variable domains instead. One
could, for example, build a non-numeric planning graph ﬁrst
and then build the variable domains only for a seemingly rel-
evant subset of the actions (e.g., a relaxed plan). We leave
this topic open for future work. Herein we show that, in 5 out
of 6 numeric domains from the international planning com-
petition, the problem does not occur: if the granularity of nu-
meric effects is less than that of random ﬂoats, many action
sequences result in the same value.

We ﬁnally remark that one could also insert more intelli-
gence into the NRPG, to prune non-reachable variable val-
ues. For example, an extension of Graphplan mutex reason-
ing [Blum and Furst, 1997] might turn out to be beneﬁcial in
some domains. We leave this open for future work.

3 SAT and SMT Encodings
We ﬁrst describe the SMT encoding underlying Num-
Reach/SMT, since that encoding is simpler. We then ex-
plain how to obtain the SAT encoding underlying Num-
Reach/SAT. The SMT encoding makes use of decision vari-
ables for propositions, numeric variables, actions, and effects,
at time steps. Precisely, there are the decision variables: pt
for all 0 ≤ t ≤ b and p ∈ Pt; vt for all 0 ≤ t ≤ b and v ∈ V ;
at for all 0 ≤ t < b and a ∈ At; and et for all 0 ≤ t < b and
e ∈ Et. All variables except the xt are Boolean. There are the
following clauses (illustrated with Example 1):
• Initial state: Specify the initial values of propositions
and numeric variables. For example, {v0 = 4}.
• Conditions: An action at t implies its preconditions at t.
An effect at t implies its conditions at t. For example,
{¬et ,vt ≥ 2}.
• Actions and effects: An effect at t implies the corre-
sponding action at t. An action at t implies, for each
effect e, that either e occurs or one of e’s conditions is
false. For example, {¬at ,¬vt ≥ 2,et}.
• Effect state change: An effect at t implies its adds and
(negated) deletes at t +1, and implies its numeric effects
between t and t + 1. For example, {−et ,vt+1 = vt − 2}.
• Frame axioms: Any proposition that is true at t stays
true at t + 1 unless it is deleted. Any proposition that
is false at t stays false at t + 1 unless it is added. Any
numeric variable has the same value at t and t + 1 unless
it is affected. For example, {vt+1 = vt ,et}.
• Goal: the goal condition is true at time b.
• Mutex: Interfering actions and effects do not occur in the
same step. Actions/effects interfere if they harm each
other’s preconditions/conditions/adds, or if they affect
the same numeric variable.

Note here that this speciﬁcation makes use of the NRPG,
in the deﬁnition of the set of decision variables. This corre-
sponds to our current implementation. However, since one
could easily deﬁne an SMT encoding that does not use the
NRPG, the runtime for building the NRPG is not included
into the NumReach/SMT runtimes in our experiments.

For NumReach/SAT, the NRPG is essential (and its run-
time is, of course, included). The encoding is identical to the
above, except for the treatment of numeric variables. Pre-
cisely, instead of the vt variables, we now have one separate
(Boolean) decision variable (v = c)t for all t, v, and c ∈ Dt(v).
We further have, for all t, one decision variable cstrt for every
numeric constraint (every different cstr = (exp1 (cid:2)(cid:3) exp2)) oc-
curing in the task. Finally we have, for all t, one decision vari-
able cstr- ¯ct for every cstr[X] and every value tuple ¯c ∈ Dt|X
that satisﬁes cstr. The intended behavior is that cstr- ¯ct is true
iff the values it speciﬁes are true, and that cstrt is true iff one
of its value tuples is true. We ensure this behavior with the
following additional clauses:
• Constraints: For cstr[X], cstrt is equivalent to the dis-
junction of all cstr- ¯ct where ¯c ∈ Dt|X satisﬁes cstr.
• Value tuples: For cstr[X], each ctr- ¯ct is equivalent to
the conjunction of (x1 = c1)t , . . . ,(xk = ck)t, where X =
{x1, . . . ,xk} and ¯c = (c1, . . . ,ck).

With this, the “conditions” clauses and the “actions and ef-
fects” clauses translate effortlessly, since we have a decision
variable for every numeric constraint occuring in a precon-
dition or an effect condition. We can use these variables
just like the variables for propositions. Similarly, the frame
clauses for numeric values now look almost like those for
propositions, for example {et ,¬(v = 4)t ,(v = 4)t+1} – if e
is not applied, and v = 4 at t, then v = 4 at t + 1. The only as-
pect that becomes somewhat complicated are the “effect state
change” clauses for numeric variables. What we say is, for
every numeric effect v := exp[X] of effect e ∈ E(a), and for
every tuple (x1 = c1, . . . ,xk = ck) in X that complies with at
least one tuple in Dt satisfying pre(a)∧con(e), either e is not
applied, or one of (xi = ci)t is false, or (x = exp( ¯c))t+1 is true.
For example, {¬et ,¬(v = 4)t ,(v = 2)t+1}.
4 Experimental Results
The experiments were run on a cluster of machines, each with
2GByte main memory, running two Pentium III processors at
1GHz. We applied a memory cutoff of 1GByte in each run.
Time-out was either 10000 seconds or 1000 seconds. Num-
Reach/SAT and NumReach/SMT are implemented in C. We
compare to Metric-FF, LPG, and SGPlan. We do not com-
pare to the SMT-based planners LPSAT and TM-LPSAT. LP-
SAT is outdated; in particular, it does not parse PDDL and we
would have to translate all our instances into its input format.
We do not compare to TM-LPSAT since, though contacting
the authors, we did not manage to obtain an executable.
4.1 Competition Examples
We ﬁrst consider numeric domains run in the international
planning competition. Precisely, we consider the numeric do-
mains run in the 2002 competition. The reason why we do
not run domains from 2004 or 2006 is that, since 2002, the

IJCAI07

1920

Instance
Depots 10
Depots 13
Depots 14
Depots 16
Depots 17
Settlers 1
Settlers 2
Settlers 3
Settlers 4
Settlers 5
Settlers 6
Settlers 7
Zeno 8
Zeno 9
Zeno 10
Zeno 11
Zeno 12
Rovers 8
Rovers 9
Rovers 10
Rovers 11
Rovers 12
Rovers 13
Rovers 14
Rovers 15
Rovers 16
Rovers 17
Rovers 18
Rovers 19
Rovers 20

SAT
87.8
35.6
1083.7
30.0
81.1
18.6
1.6
–
22.6
1480.7
–
–
8.5
18.1
126.1
85.7
480.7
3.7
156.9
70.9
43.0
1.9
503.5
20.3
104.7
352.7
809.9
77.9
MEM
MEM

SMT
672.2
245.0
–
470.9
–
2042.8
53.5
–
775.2
–
–
–
26.0
299.3
1397.8
120.2
6585.8
59.2
–
455.4
981.4
33.5
–
402.7
2860.3
–
–
–
–
–

FF
0.1
0.1
0.5
0.2
1.1
8.5
0.1
59.3
163.4
1.1
19.2
–
0.0
0.0
0.1
0.1
0.1
0.1
–
0.1
6.6
0.1
–
–
–
–
–
–
–
–

SGPlan
0.1
0.1
0.5
0.2
1.1
0.4
0.4
0.5
0.7
1.0
0.8
1.4
0.0
0.0
0.1
0.1
0.1
442.7
–
0.1
6.3
0.1
1945.7
–
0.1
1222.5
–
–
–
–

LPG
0.2
0.3
0.7
0.3
0.9
6.5
0.4
1.3
0.7
1.5
2.3
33.7
0.0
0.1
0.1
0.1
0.10
0.0
0.2
0.1
0.3
0.3
1.2
0.7
63.3
10.8
126.8
14.3
0.8
–

Table 1: Runtime results in seconds,
in four of the six
2002 competition domains (see text). Dashes mean time-out
(10000 seconds), MEM out of memory (1GByte). Some do-
main and planner names abbreviated as obvious.

focus of the competition has shifted away from numeric plan-
ning (though as we will see that is far from being “solved”).
The 2002 numeric domains are thus still the main benchmark
for this context. They are named Depots, Driverlog, Rovers,
Satellite, Settlers, and Zenotravel. Depots is a combination
of logistics and blocksworld (with, e.g., numeric restrictions
on the load status of trucks). Driverlog has trucks that need
drivers; the numeric variables (distances walked and driven)
are mentioned only in the optimization metric. Rovers is
about gathering rock/soil samples and images, with energy
usage and a recharge operator that can be applied only in
“sunny spots”. Satellite is about gathering images, also with
energy usage (no recharge). Zenotravel is a simple logistics-
type problem with fuel usage and a refuel operator that can
be applied anywhere anytime. Table 1 shows our data.

Driverlog is left out of Table 1 since all tested planners
ignore the optimization metric – and with it the numeric vari-
ables – anyway. Satellite is left out of the table because in this
domain our approach is trivially nonsense: any “satellite” can
turn between any two “directions”; doing so costs the respec-
tive “slew time” in energy; in the competition instances, the
slew times are assigned basically as random ﬂoats. Because
of the latter, every sequence of turning actions has a differ-
rent summed up cost, yielding a different possible numeric
value. So the reachable variable domains grow exponentially
in the depth of the NRPG, which exhausts memory even in the
smallest instance of the competition suite. We ﬁnd it doubt-
ful whether such a scenario (random ﬂoat costs) makes much
sense – why would one need to distinguish between arbitrar-

ily many different action costs? To explore this topic further,
in Section 4.2 we run an experiment explicitly scaling the size
of the set of numbers from which action costs are drawn.

Each competition test suit contains 20 instances; every in-
stance solved by NumReach/SMT was also solved by Num-
Reach/SAT. For Depots and Zenotravel, Table 1 shows data
for the 5 largest instances solved by NumReach/SAT. For
Settlers, we show the 7 smallest instances, which contain
everything solved by NumReach/SAT and Metric-FF (even
the small Settlers instances are comparatively large, requir-
ing plans with several dozen steps). For Rovers, since we
consider that particularly interesting, we show all instances
except the smallest ones. From a quick glance, one sees that
NumReach/SAT convincingly outperforms NumReach/SMT in
all these domains. This underlines the merits of our approach
quite impressively. For the sub-optimal planners, neither of
Depots, Settlers, and Zenotravel constitutes much of a prob-
lem. The single exception is Metric-FF in Settlers, which is
only marginally faster than NumReach/SAT. In Rovers, how-
ever, NumReach/SAT outperforms not only NumReach/SMT
but also Metric-FF and SGPlan, being beat only by LPG.5
This is due to the nature of energy consumption and recharge
in this domain: to recharge, one has to ﬁrst reach a sunny spot.
Metric-FF and SGPlan presumably spend excessive time in
large dead ends where there is not even enough energy left
to reach such a spot. LPG’s search has a more stochastic re-
starting nature, which is less affected by this. In the next sec-
tion we run an experiment explicitly scaling the constrained-
ness of resources.
4.2 Transport
We constructed a simple transportation domain, called Trans-
port, to run some targeted experiments. A truck moves in a
weighted graph. A set of packages must be transported be-
tween nodes. Actions move along edges, and load/unload
packages. Each edge costs its weight in fuel. There is no
refuelling, so once the truck ran out of fuel it’s “game over”.6
While this domain is simplistic, we believe it serves well as
an abstract model of the relevant issues in planning with re-
sources. In particular, we can scale the instances on variable
domain size and on resource constrainedness, as follows. Our
instance generator takes the parameters N, P, M, and C. First
a random connected (undirected) graph with N nodes is cre-
ated. Then P packages are added, with random origins and
destinations. The edge weights are uniformly drawn from the
set {1,2, . . . ,M}. Then a domain-speciﬁc branch-and-bound
procedure, which we developed especially for this purpose,
computes the minimum amount of fuel, min f uel, needed to
solve the task. The initial fuel supply of the truck is set
to (cid:12)C ∗ min f uel(cid:13). This way, the size of the reachable vari-
able domains can be controlled by M, and the resource con-
strainedness can be controlled by how close C is to 1.0.

5In instances 19 and 20, NumReach/SAT’s CNFs become too

large to ﬁt into memory (see also the next section).

6We consider a single truck rather than multiple trucks for the
sake of simplicity. Note that this puts our own SAT-based approach
at a disadvantage vs. the heuristic planners: SAT-based planners are
well known to work much better when there is a lot of parallelism,
reducing the number of time steps that must be considered.

IJCAI07

1921

 250

 200

)
.
c
e
s
(
 

e
m

i
t

n
u
r

 150

 100

 50

 0

 5 10

 25

 50

 75

 100
M

 125

 150

 175

 200

Figure 2: Scaling variable domain size.

)
.
c
e
s
(
 

e
m

i
t

n
u
r

 10000

 1000

 100

 10

 1

 0.1

 1

NumReach/SAT
FF
LPG
SGPlan
FF-solved
LPG-solved
SGPlan-solved

 1.1

 1.2

 1.3

 1.4

 1.5
C

 100

 90

 80

 70

 60

 50

 40

 30

 20

 10

 1.6

 1.7

 1.8

 1.9

 0

 2

Figure 3: Scaling resource constrainedness.

 

%
d
e
v
o
s

l

In our ﬁrst experiment, we aim to see how variable domain
size affects the planners, so we scale M. We keep N and P
ﬁxed to 7, which is challenging but feasible. We ﬁx C = 1.1,
which is relevant since, as we shall see, in this region the
SAT-based approach is more efﬁcient than all state-of-the-art
heuristic planners. Runtime plots for NumReach/SAT and
NumReach/SMT are in Figure 2; each data point is the mean
value of 100 instances. We see that NumReach/SAT has a
strong advantage with low M; as expected it gets worse with
growing M, while NumReach/SMT reacts only very slightly
to the value of M.

We ran another experiment where we scaled M further,
over M = 300, . . . ,1000. As expected, NumReach/SMT’s
behavior does not change much, while NumReach/SAT de-
grades further. With a time-out of 1000 seconds, Num-
Reach/SAT’s solution percentage as we increase M in steps of
100 is 94, 81, 50, 48, 30, 23, 18, 10. We remark that the lim-
iting factor here is neither NRPG building nor CNF building
nor even SAT reasoning: the size of the CNFs is what makes
the solution rate drop. As a rule of thumb, until around 6
million clauses NumReach/SAT beats NumReach/SMT, be-
tween 6 and 10 million clauses NumReach/SMT beats Num-
Reach/SAT, and after that, which in our experiment here hap-
pens starting with M = 300, the propositional CNFs don’t ﬁt
into 1GByte memory any longer. Note that this provides a
simple rule to automatically choose between NumReach/SAT
and NumReach/SMT: just compute the number of clauses in
the propositional CNF, and apply a threshhold.

We emphasize that in the competition domains,Table 1, the
advantage of NumReach/SAT over NumReach/SMT is much
larger than even for M = 5 in Figure 2. Presumably, Num-
Reach/SMT has more trouble than NumReach/SAT with the
mix of planning aspects in these domains – remember that
Transport is very basic.

The experiment shown in Figure 3 scales C between 1.0
and 2.0. N and P are ﬁxed to 8, M is ﬁxed to 25. The left
hand side y axis is log-scaled runtime. Each data point is the
average over 100 instances, where time-out is 10000 seconds,
which is inserted into the average computation in unsolved
cases. To complement this, the right hand side y axis shows
the percentage of solved instances. NumReach/SAT’s curve
is the horizontal line; all instances are solved, so no solution
percentage is shown. Note that the seemingly linear nature of

the heuristic planners’ runtime curves, as we move towards
C = 1.0, is just an artefact of the runtime cutoff. The sharp
drops in solution percentage more reliably reveal the main
message of Figure 3: heuristic planners are efﬁcient when re-
sources are plenty, but they tend to fail when resources are
scarce. Ours is the ﬁrst experiment making this important
point absolutely clear. Even though NumReach/SAT is opti-
mal, it outperforms the heuristic planners. This inverts (al-
most) every result of the planning competitions since 2000.
Note that Transport is not an awkward artiﬁcial problem, but
a natural and relevant application of planning.
4.3
In the Jugs-and-Water domain, one has a set of jugs of varying
sizes, and one wants to achieve a given ﬁll status for all the
jugs. Actions ﬁll or empty a jug, or pour the content of one
jug into another one. Thus, in this domain, numeric variables
(ﬁll status of jugs) are not resources but constitute highly in-
teracting phenomena, perhaps similar to Rubic’s Cube or so,
from the “point of view” of a general purpose solver. We
obtained random instances with N jugs and M maximum jug
size by choosing jug size uniformly from {1,2, . . . ,M}, and
then using a repeated greatest common divisor computation
to obtain solvable goals.

Jugs-and-Water

In some way, M here corresponds to the M parameter of
transport: it scales the possible variable value ranges. How-
ever, very much unlike Transport, in Jugs-and-Water M has a
huge effect on instance hardness. The larger M is, the longer
will the plan typically be, making it much harder to ﬁnd. Ta-
ble 2 shows results scaling N and M simultaneously. For
readability, we only show the solution rates. We could not
run LPG since that cannot handle conditional effects (of the
action pouring the content of one jug into another). Num-
Reach/SAT vastly outperforms NumReach/SMT. The same
goes for Metric-FF, giving another example of the unusual
dominance of an optimal over a sub-optimal planner.
It is
unclear to us what the reason for SGPlan’s efﬁciency is.
4.4 Model Checking
To point out that our new method might make sense in some
cases of model checking as well, we have run a few prelim-
inary experiments. We modelled some model checking toy
examples in PDDL. Many of those examples make use of

IJCAI07

1922

N \ M

3
6
9
12
15

3
6
9
12
15

3
6
9
12
15

3
6
9
12
15

4

100
100
100
100
96

98
98
96
86
60

100
100
100
100
100

100
100
100
100
100

8

100
100
100
98
96

12
NumReach/SAT
98
100
100
96
78
NumReach/SMT
86
92
70
28
12

92
92
92
58
44

Metric-FF
100
100
96
82
70
SGPlan
100
100
100
100
100

100
100
60
34
12

100
100
100
98
100

16

100
100
100
94
66

78
82
62
20
10

100
100
60
34
12

100
100
100
100
96

20

96
92
78
62
62

62
72
42
8
2

100
100
54
24
6

100
100
98
92
92

Table 2: Solution rate for the Jugs-and-Water domain. 100
instances per data point, time-out 1000 seconds.
arrays, with arithmetics on the array indices. This is very
awkward to model in PDDL, without an explicit notion of ar-
rays. After some exploration of the relevant literature, we
ended up using variants of the “Fischer Protocol for Mu-
tual Exclusion” and the “Bakery Protocol for Mutual Exclu-
sion” (the latter has an array, but no arithmetics on the in-
dices). In both cases, there are N processes, at most one of
which should be in a “critical region” at any point in time.
In both cases, versions with bugs are mentioned in the lit-
erature; these versions we mapped into PDDL.7 Planning in
these domains is about ﬁnding sequences of transitions end-
ing in a state where at least two processes are in the critical
region. For the “Fischer” domain, we obtained very good
scaling. With N = 10,20,30,40,50,100 processes, Num-
Reach/SAT | NumReach/SMT runtime is 0.2|1.8, 0.4|6.4,
0.7|12.4, 2.5|20.9, 1.9|33.6, 13.4|118.4, showing a consis-
tent advantage for NumReach/SAT. In the Bakery domain,
we obtained much worse scaling. For NumReach/SAT, this
is due to an awkward encoding we needed for a max op-
eration, making the NRPG grow rather quickly. For Num-
Reach/SMT, excessive time is taken in satisﬁability test-
ing. Concretely, for N = 2,3, . . . ,10 the data we get is the
following, showing SAT time for NumReach/SAT | NRPG
time for NumReach/SAT | SMT time for NumReach/SMT:
0.0|0.0|0.2, 0.0|0.0|0.5, 0.0|0.0|1.0, 0.0|0.0|2.2, 0.0|0.2|6.5,
0.1|0.9|15.8, 0.1|4.3|32.5, 0.2|47.3| > 1000. The advantage
for NumReach/SAT in terms of SAT solving time is dramatic.

5 Conclusions and Further Directions
We have developed a third technique for the application of
satisﬁability testing to solving state-space reachability prob-
7The “Fischer” domain is originally formulated for Timed Au-
tomata, with continuous-valued clocks. Since we cannot handle con-
tinuous updates, we made a straightforward modiﬁcation using just
integers with discrete updates (“counting” time units).

lems in numeric domains. Our empirical results suggest that,
at least in planning, the technique is very competitive.

We recommend to the planning community to reconsider
numeric planning. Our results in resource-constrained trans-
portation indicate that the relevant issues there may be quite
different from what we have got used to elsewhere.

In the future, we intend to explore the two lines of re-
search modifying our current NRPG technique, outlined in
Section 2: 1. Try to make the NRPG more intelligent by ad-
ditional reasoning. 2. Try to avoid any blow-ups altogether by
a more greedy approximation of variable domains. We also
consider it interesting to explore how method (A) – encoding
numbers as bitvectors – will work in numeric planning.

References
[Blum and Furst, 1997] A. Blum and M. Furst.

Fast planning

through planning graph analysis. AI, 90(1-2):279–298, 1997.

[Bozzano et al., 2006] M. Bozzano, R. Bruttomesso, A. Cimatti,
T. Junttila, P. van Rossum, S. Schulz, and R. Sebastiani. A tight
integration of SAT and mathematical decision procedures. JAR,
2006.

[Chen et al., 2006] Y. Chen, B. Wah, and C. Hsu. Temporal plan-
ning using subgoal partitioning and resolution in SGPlan. JAIR,
2006.

[Clarke et al., 2001] E. Clarke, A. Biere, R. Raimi, and Y. Zhu.
Bounded model checking using satisﬁability solving. FMSD,
19(1):7–34, 2001.

[Clarke et al., 2004] E. Clarke, D.Kroening, and F. Lerda. A tool
for checking ANSI-C programs. In Proc. TACAS’04, pages 168–
176, 2004.

[Een and S¨orensson, 2003] N. Een and N. S¨orensson. An extensible

SAT solver. In Proc. SAT’03, 2003.

[Ganzinger et al., 2004] H. Ganzinger, G. Hagen, R. Nieuwenhuis,
A. Oliveras, and C. Tinelli. DPLL(T): Fast decision procedures.
In Proc. CAV’04, pages 175–188, 2004.

[Gerevini et al., 2003] A. Gerevini, A. Saetti, and I. Serina. Plan-
ning through stochastic local search and temporal action graphs.
JAIR, 20:239–290, 2003.

[Hoffmann, 2003] J. Hoffmann. The Metric-FF planning system:
Translating “ignoring delete lists” to numeric state variables.
JAIR, 20:291–341, 2003.

[Kautz and Selman, 1999] H. Kautz and B. Selman. Unifying SAT-
based and graph-based planning. In Proc. IJCAI’99, pages 318–
325, 1999.

[Kupferschmid et al., 2006] S. Kupferschmid,

J. Hoffmann,
H. Dierks, and G. Behrmann. Adapting an AI planning heuristic
In Proc. SPIN’06, pages 35–52,
for directed model checking.
2006.

[Seshia and Bryant, 2004] S. Seshia and R. Bryant. Deciding
quantiﬁer-free presburger formulas using parameterized solution
bounds. In Proc. LICS’04, 2004.

[Shin and Davis, 2005] J. Shin and E. Davis. Processes and contin-

uous change in a SAT-based planner. AI, 166:194–253, 2005.

[Wolfman and Weld, 1999] S. Wolfman and D. Weld. The LPSAT
engine & its application to resource planning. In Proc. IJCAI’99,
pages 310–316, 1999.

IJCAI07

1923

