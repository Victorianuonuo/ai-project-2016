Computational ontologies of parthood, componenthood, and containment∗

Thomas Bittner1

,

2

,

3 and Maureen Donnelly1

,

3

1Department of Philosophy, 2Department of Geography

3New York State Center of Excellence in Bioinformatics and Life Sciences

University at Buffalo, 135 Park Hall, Buffalo, NY 14260

Abstract

Parthood, componenthood, and containment rela-
tions are commonly assumed in biomedical ontolo-
gies and terminology systems, but are not usually
clearly distinguished from another. This paper con-
tributes towards a uniﬁed theory of parthood, com-
ponenthood, and containment relations. Our goal in
this is to clarify distinctions between these relations
as well as principles governing their interrelations.
We ﬁrst develop a theory of these relations in ﬁrst
order predicate logic and then discuss how descrip-
tion logics can be used to capture some important
aspects of the ﬁrst order theory.

1 Introduction
My car has components, for example, its engine, its oil pump,
its wheels, etc. (See Figure 1.) Roughly, a component of an
object is a proper part of that object which has a complete
bona ﬁde boundary (i.e., boundary that correspond disconti-
nuities in reality) and a distinct function. Thus all compo-
nents of my car are parts of my car, but my car has also parts
that are not components. For example, the left side my car has
neither a complete bona ﬁde boundary nor a distinct function.
My car is also a container. It contains the driver in the seat
area and a tool box and a spare-tire in its trunk. Containment
is here understood as a relation which holds between disjoint
material objects when one object (the containee) is located
within a space partly or wholly enclosed by the container.
In this paper, we study formal properties of proper parthood,
componenthood, and containment relations and demonstrate
how they can be represented and distinguished from one other
in formal ontologies expressed in languages of different ex-
pressive power.

At ﬁrst sight, these three relations seem to have quite sim-
ilar properties. All three are transitive and asymmetric. The
screw-driver is contained in my tool box and the tool box is
contained in the trunk of my car, therefore the screw-driver
is contained in the trunk of my car. And if an object (e.g., a

∗This work has been supported by the Wolfgang Paul Program
of the Alexander von Humboldt Foundation, the EU Network of Ex-
cellence in Semantic Datamining, and the Volkswagen Foundation
Project ”Forms of Life”.

tool box) is contained in the trunk of my car, then the trunk
of my car is not contained in that object. It is easy to see
that the componenthood (See Figure 1) and proper parthood
relations are also asymmetric and transitive. Due to their sim-
ilarities these relations are not always clearly distinguished in
ontologies such as, e.g., GALEN [Rogers and Rector, 2000]
or SNOMED [Spackman, 2001].

However, there are important differences between these re-
lations. There can be a container with a single containee (e.g.,
the screw-driver is the only tool in my tool box) but no object
can have single proper part. Also the components of complex
artifacts form tree-structures. Thus, two components share
a component only when one is a sub-component of the other.
(It is because components form tree structures that tree graphs
of component structures can be given in assembly manuals.)
The parthood relation does not have this property: The left
half of my car and the bottom half of my car share the bottom
left part of my car but they are not proper parts of each other.
Ontologies are tools for making explicit the semantics of
terminology systems [Guarino, 1998]. In this paper we de-
velop ontologies which explicate the distinct properties of
proper parthood, componenthood and containment relations.
These ontologies can be used to specify the meaning of terms
such as ‘proper-part-of’, ‘component-of’, and ‘contained-in’.
We start by characterising important properties of binary re-
lations and then study how these properties can be expressed
both in ontological theories formulated in ﬁrst order logic and
in ontologies formulated in a description logic.

my Car

Body

Engine

Drivetrain

...

Engine Heater

Valves

Oil pump

...

Transmission

Axle

...

Figure 1: Car components

2 Binary relations
In this section, we deﬁne properties of binary relation struc-
tures that will be useful for distinguishing proper parthood,
component-of, and containment relations.

2.1 R-structures
A R-structure is a pair, (∆, R), that consists of a non-empty
domain ∆ and a binary relation ∅ 6= R ⊆ ∆ × ∆. We write
R(x, y) to say that the binary relation R holds between the
individuals x, y ∈ ∆, i.e., (x, y) ∈ R. We can deﬁne the
following relations on ∆ in terms of R:

DR= R=(x, y) =df R(x, y) or x = y
DRO RO(x, y) =df ∃z ∈ ∆ : R=(z, x) & R=(z, y)
DRi Ri(x, y) =df R(x, y)&(¬∃z ∈ ∆ : R(x, z) & R(z, y))

For a given R-structure, the deﬁned relations R=, RO, or Ri
may be empty or identical to R. For example, if R is the
identity relation on ∆, i.e., R = {(x, x) | x ∈ ∆}, then
R= = R = RO and Ri = ∅.

2.2 Properties of binary relations
An R-structure (∆, R) may have or lack the properties listed
in Table 1. For example, for any ∆ the identity relation on
∆ is reﬂexive, symmetric and transitive. Moreover, for any
(∆, R), RO is symmetric, Ri is intransitive, and R= is reﬂex-
ive. As pointed out above, on their respective domains proper
parthood, componenthood, and containment are asymmetric
and transitive.

property
reﬂexive
irreﬂexive
symmetric
asymmetric
transitive
intransitive
up-discrete

dn-discrete

discrete
dense

WSP

NPO

NSIP

SIS

description
∀x ∈ ∆ : R(x, x)
∀x ∈ ∆: not R(x, x)
∀x, y ∈ ∆: if R(x, y) then R(y, x)
∀x, y ∈ ∆: if R(x, y) then not R(y, x)
∀x, y, z ∈ ∆: if R(x, y) and R(y, z) then R(x, z)
∀x, y ∈ ∆: if R(x, y) and R(y, z) then not R(x, z)
∀x, y ∈ ∆: if R(x, y) then Ri(x, y) or

∃z ∈ ∆: R(x, z) and Ri(z, y)

∀x, y ∈ ∆: if R(x, y) then Ri(x, y) or

∃z ∈ ∆: Ri(x, z) and R(z, y)

up-discrete & dn-discrete
∀x, y ∈ ∆: if R(x, y) then

∃z ∈ ∆: R(x, z) and R(z, y)

∀x, y ∈ ∆: if R(x, y) then

∃z ∈ ∆: R(z, y) & not RO(z, x)

∀x, y ∈ ∆: if RO(x, y) then

x = y or R(x, y) or R(y, x)

∀x, y ∈ ∆: if Ri(x, y) then

∃z ∈ ∆: Ri(z, y) & not x = z

∀x, y, z ∈ ∆: if Ri(x, y) and Ri(x, z) then y = z

Table 1: Properties of binary relations

We say (∆, R) has the weak supplementation property
(WSP) if and only if for all x, y ∈ ∆ if R(x, y) then there
is a z ∈ ∆ such that R(z, y) but NOT RO(z, x). As an ex-
ample of a relation that has the weak supplementation prop-
erty, consider the proper parthood relation on the domain ∆S
of spatial objects, (∆S, proper-part-of).
In this structure
proper-part-ofO is the overlap relation. WSP tells us that
if x is a proper part of y then there exists a proper part z of
y that does not overlap x. For example, since the left side of
my car is a proper part of my car there is some proper part of
my car (e.g., the right side of my car) which is discrete from
the left side of my car.

Another example of a structure that has the weak
supplementation property is the componenthood relation
on the domain of artifacts, (∆A, component-of). Here
component-ofO is the relation of sharing a component. WSP
tells us that if x is a component of y then there exists a com-
ponent z of y such that z and x do not have a common compo-
nent. For example, since the engine of my car is a component
of my car there is some component of my car (e.g., the body
of my car) which does not have a component in common with
the engine. (See Figure 1.)

C3

C4

B2

C2

B1

C1

Figure 2: Nested containers

Consider the structure (∆C , contained-in) with ∆C =
{C1, C2, C3, C4, B1, B2} as depicted in Figure 2. The block
B1 is immediately contained in the container C2 which in
turn is immediately contained in the container C1. B1 is
contained, but not immediately contained,
in C1. Note
that contained-in does NOT have the weak-supplementation
property: B1 is the only entity contained in C2. Thus, every
entity contained in C2 stands in the contained-inO relation
to B1.

We say (R, ∆) has the no-partial-overlap property (NPO)
if and only if for all x, y ∈ ∆: if RO(x, y) then x = y or
R(x, y) or R(y, x). The structure (∆A, component-of) has
the NPO property. As a representative example consider the
substructure of (∆A, component-of) depicted in Figure 1:
Two distinct car components share a component only if one
is a subcomponent of the other.

The structure (∆S , proper-part-of), on the other hand,
does not have the no-partial-overlap property. As pointed out
earlier, the left half of my car and the lower half of my car
overlap partially. Note also that containment structures (do-
mains with a containment relation) often do not have the NPO
property: Consider the tool box in the trunk of my car. It is
also contained in my car. My car and the trunk of my car
share a containee (the tool box), i.e., contained-inO holds,
but my car is not contained in the trunk of my car nor is the
trunk contained in the car.

Containment structures are discrete.

For example
(∆C , contained-in) is up- and dn-discrete: if x is contained
in y then either x is an immediately contained in y or (a) there
exists a z such that x is an immediately contained in z and z
is contained in y , and (b) there exists a z such that x is con-
tained in z and z is immediately contained in y. Similarly,
the structure (∆A, component-of) is discrete. If x is a com-
ponent of y then either x is a immediate component of y or
(a) there exists a z such that x is a immediate component of z
and z is a component of y , and (b) there exists a z such that
x is a component z and z is an immediate component of y.
Again, Figure 1 is a representative example.

The structure (∆S, proper-part-of), is dense due to the ex-
istence of ﬁat parts (parts which lack a complete bona ﬁde

boundary) [Smith, 2001]. Consider my car and its proper
parts. My car does not have an immediate proper part – What-
ever proper part x we chose, there exists another slightly big-
ger proper part of my car that has x as a proper part.

(R, ∆) has the single-immediate-successor property (SIS)
if and only if no x ∈ ∆ can stand in the Ri relation to two
distinct members of ∆. Again, a representative example is the
component-of structure depicted in Figure 1. In the structure
(∆S , proper-part-of) SIS trivially holds since this structure
has the density property and no immediate proper parts exist.
But note that containment structures often do not have the SIS
property: Consider again the tool box in the trunk of my car.
It is also contained in my car. My car and the trunk of my car
are distinct immediate containers for my tool box.

(R, ∆) has the no-single-immediate-predecessor property
(NSIP) if and only if for all x, y ∈ ∆: if Ri(x, y) then there
exists a z ∈ ∆ such that Ri(z, y) and not x = z. Again,
the componenthood structure depicted in Figure 1 is a repre-
sentative example for a structure that has the NSIP property.
Again, in the structure (∆S , proper-part-of) NSIP is trivially
true since no immediate proper parts exist. But containment
structures like (∆C , contained-in) lack the NSIP property.

Given the properties in Table 1 we can classify R-
structures according to the properties of the relation R. In
Table 2 we list classes of R-structures that will be useful
for modelling proper parthood, componenthood, and contain-
ment relations.

R-structure
partial ordering (PO)
discrete PO
parthood structure
component-of structure

properties
asymmetric, transitive
PO + discrete
PO + WSP + dense
PO + WSP, NPO, discrete

Table 2: Classes of R-structures

Finally, note the following facts about R structures: (F1)
If (∆, R) has the no-partial-overlap property then it has the
single-immediate-successor property; (F2) If (∆, R) is ﬁnite
and has the single-immediate-successor property then it has
the no-partial-overlap property; (F3) If (∆, R) is up-discrete
and has also the no-partial-overlap property, then (∆, R) has
the weak-supplementation property if and only if it has the
no-single-immediate-predecessor property; (F4) If (∆, R) is
reﬂexive, then Ri = ∅.

2.3 Parthood-containment-component structures
The relations that we are interested in do not exist in sep-
aration but form complex structures involving more than
one relation. The structure (∆, PP, CntIn, CmpOf) is
a parthood-containment-component structure if and only if:
(i) the substructure (∆, PP) is a parthood structure; (ii)
(∆, CntIn) is a discrete partial ordering; (iii) (∆, CmpOf )
is a component-of structure; and addition the following con-
ditions hold:
(iv) If CntIn(x, y) and PP(y, z) then CntIn(x, z);
(v) If PP(x, y) and CntIn(y, z) then CntIn(x, z);
(vi) If CmpOf (x, y) then PP(x, y);

As an example of a parthood-containment-component struc-
ture consider the set ∆ formed by all parts of my car and
everything that is contained in my car. The substructure
(∆, CmpOf ) is depicted partly in Figure 1.

(iv) ensures that parts are contained in the container of the
whole, e.g., my head is part of my body and my body is con-
tained in my car, so my head must also be contained in my car.
(v) ensures that if a part of some whole contains something
then so does the whole, e.g., since my tool box is contained
in the trunk of my car and the trunk is part of my car, my tool
box is also contained in my car. (vi) tells us that component-
hood is a special case of parthood, e.g., since the engine is a
component of my car, it is also a proper part of my car.

3 A formal ontology of parthood,

containment, and componenthood

The formal theory developed in this section is presented in
standard ﬁrst-order predicate logic with identity. We use x, y,
and z for variables. Leading universal quantiﬁers are gener-
ally omitted. Names of axioms begin with the capital letter
‘A’, names of deﬁnitions begin with the capital letter ‘D’, and
names of theorems begin with the capital letter ‘T’.

We include the primitive relation symbols PP, CntIn, and
CmpOf in the language of our theory. The intended interpre-
tations are the relations PP, CntIn, and CmpOf respec-
tively of parthood-containment-component structures.

3.1 Axioms for PP
We introduce the symbols PP=, PPO, and deﬁne that PP= xy
holds if and only if either PP xy or x and y are identical
(DPP=); PPO xy holds iff x and y share a common part or
are identical (DPPO ).

DPP= PP= xy ≡ PP xy ∨ x = y
DPPO PPO xy ≡ (∃z)(PP= zx ∧ PP= zy)

We then include the axioms of asymmetry and transitivity
(APP1-APP2) as well as an axiom (APP3) that ensures that
interpretations of PP have the weak supplementation property
(WSP).

AP P 1 PP xy → ¬PP yx
AP P 2
AP P 3 PP xy → (∃z)(PP zy ∧ ¬PPO zx)

(PP xy ∧ PP yz) → PP xz

(WSP)

The theory that includes APP1-3 as axioms is known as basic
mereology [Simons, 1987]. Finally we add a density axiom
to include ﬁat parts into our domain (APP4).

AP P 4 PP xy → (∃z)(PP xz ∧ PP zy)

Models the the theory that includes APP1-4 as axioms are
parthood structures as deﬁned in Table 2.

3.2 Axioms for CmpOf
We introduce the symbols CmpOf= and CmpOfO and add the
respective deﬁnitions (DCmpOf=

and DCmpOfO ).

DCmpOf=
DCmpOfO CmpOfO xy ≡ (∃z)(CmpOf= zx ∧ CmpOf= zy)

CmpOf= xy ≡ CmpOf xy ∨ x = y

We then include an axiom of transitivity (ACP1).

ACP 1

(CmpOf xy ∧ CmpOf yz) → CmpOf xz

Corresponding to (vi) we add an axiom that ensures that
CmpOf xy implies PP xy (ACP2) and can then prove that
CmpOf is asymmetric (TCP1).

ACP 2 CmpOf xy → PP xy
T CP 1 CmpOf xy → ¬CmpOf yx

We introduce the symbol CmpOfi and deﬁne CmpOfi xy to
hold iff CmpOfi xy and there is no z such that CmpOfi xz and
CmpOfi zy (DCmpOfi). We then add an axiom that enforces
that interpretations of CmpOf have the discreteness property
(ACP3).

DCmpOfi CmpOfi xy ≡ CmpOf xy ∧

¬(∃z)(CmpOf xz ∧ CmpOf zy)

ACP 3

CmpOf xy → (CmpOfi xy ∨

((∃z)(CmpOfi xz ∧ CmpOf zy)
∧ (∃z)(CmpOf xz ∧ CmpOfi zy)))

From DCmpOfi we can prove immediately that CmpOfi is in-
transitive (TCP2).

T CP 2 CmpOfi xy ∧ CmpOfi yz → ¬CmpOfi xz

We then add axioms that require that CmpOf has the no-
partial-overlap property (ACP4) and that CmpOf has the no-
single-immediate-predecessor property (ACP5).

ACP 4 CmpOfOxy → (CmpOf= xy ∨ CmpOf zx)
ACP 5 CmpOfi xy → (∃z)(CmpOfi zy ∧ ¬z = x)

We now can prove that the the weak-supplementation princi-
ple holds (TCP3) and that nothing has two distinct immediate
successors (TCP4).

T CP 3 CmpOf xy → (∃z)(CmpOf zy ∧ ¬CmpOfO zx)
T CP 4 CmpOfi xz1 ∧ CmpOfi xz2 → z1 = z2

3.3 Axioms for CntIn
We introduce the symbols CntIn=, CntInO, and CntIni and
add the respective deﬁnitions (DCntIn=, DCntInO , and DCntIni).

DCntIn= CntIn= xy ≡ CntIn xy ∨ x = y
DCntInO CntInO xy ≡ (∃z)(CntIn= zx ∧ CntIn= zy)
DCntIni

CntIni xy ≡ CntIn xy ∧

¬(∃z)(CntIn xz ∧ CntIn zy)

We then include axioms of asymmetry, transitivity, and dis-
creteness (ACT1-3).

ACT 1 CntIn xy → ¬CntIn yx
ACT 2 (CntIn xy ∧ CntIn yz) → CntIn xz
ACT 3 CntIn xy → (CntIni xy ∨

((∃z)(CntIni xz ∧ CntIn zy)
∧ (∃z)(CntIn xz ∧ CntIni zy)))

We add axioms, corresponding to (iv) and (v), parts are con-
tained in the container of the whole (ACT4) and that if a part
contains something then so does the whole (ACT5).
PP xy ∧ CntIn yz → CntIn xz
CntIn xy ∧ PP yz → CntIn xz

ACT 4
ACT 5

We call the theory consisting of the axioms APP1-4, ACP1-
5 and ACT1-5 FO-PCC. Parthood-composition-containment
structures are models of this theory.

4 Representation in a description logic
Description Logics (DLs) are a family of logical formalisms
which are signiﬁcantly less powerful than ﬁrst order logic but
which are (relatively) easily implemented on the computer
[Baader et al., 2002]. The task of this section is to investi-
gate to what extent and how FO-PCC can be approximated
by a theory expressed in a description logic. For this task,
we consider DLs with different expressive capabilities, some
of which are better suited than others for formulating proper-
ties of parthood, componenthood and containment relations.
Notice, that it is not the purpose of this paper to provide a
complexity analysis for these DLs.

4.1 The syntax and semantics of description logics
Basic expressions in description logics are concept and role
descriptions. Concepts are interpreted as sets. Roles are in-
terpreted as binary relations. General rules for forming con-
cept and role descriptions (based on [Baader et al., 2002]) are
given below. Note, however, that speciﬁc DLs typically al-
low for the formulation of some, but not all, of the complex
concept and role descriptions listed.

Every concept name is a concept description (atomic con-
cept), > is the top-concept. ⊥ is the bottom-concept. If C and
D are concept descriptions then C u D (concept-intersection),
C t D (concept-union), ∼ C (concept-complement) are also
concept descriptions. Every role name, R, is a role descrip-
tion (an atomic role). If S and T are role descriptions, then
S u T (role-intersection), S t T (role-union), ∼ S (role-
complement), S ◦ T (role-composition), and R− (role-inverse)
are also role descriptions. Id is the name of the identity role.
If C is a concept description and R is a role name then (∃R.C),
(∀R.C), and (= 1R) are concept descriptions. The semantics
of the various constructors is given in Table 3.
A terminology is a set of terminological axioms of the form
= D and S .
C .
= T (called equalities) or C v D and S v T
(called inclusions), where C and D are concept descriptions
and S and T are role descriptions. An interpretation I satisﬁes
an inclusion C v D iff C I ⊆ DI and S v T iff S I ⊆ T I.
.
(See [Baader et al., 2002].) It satisﬁes an equality C
= D iff
C I = DI and S

.
= T iff S I = T I.

(ia − b)
(iia − c)

(iii)
(iv)
(v)
(via − c)

(vii)

(viii)
(ix)

>I = ∆, ⊥I = ∅;
(C u D)I = C I ∩ DI , (C t D)I = C I ∪ DI ,
(∼ C)I = ∆ \ C I;
(∃R.C)I = {a ∈ ∆ | (∃b)((a, b) ∈ RI ∧ b ∈ C I)}
(∀R.C)I = {a ∈ ∆ | (b)((a, b) ∈ RI → b ∈ C I)}
(= 1R)I = {a ∈ ∆ | |{b | (a, b) ∈ RI}| = 1}
(S u T )I = S I ∩ T I, (S t T )I = S I ∪ T I,
(∼ S)I = ∆ × ∆ \ S I ;
(S ◦ T )I = {(a, c) ∈ ∆ × ∆ |

(∃b)((a, b) ∈ S I ∧ (b, c) ∈ T I)}

IdI = {(a, a) | a ∈ ∆}
(R−)I = {(b, a) ∈ ∆ × ∆ | (a, b) ∈ RI}

Table 3: Concept and role constructors with their semantics.
I is the interpretation function and ∆ is the domain of indi-
viduals.

4.2 Stating ontological principles
Let LWSP be a language that includes at least the constructors
(ia, iia, iii, via-c, vii, viii, ix [Table 3]). In this language we
can state a DL-version of FO-PCC. In particular, if R is the
name of a relation R then we are able to state in this language
that R has the WSP property, we are able to deﬁne the relation
Ri in terms of R, and we are able to state that R is a discrete
(or dense) relation:

(WSP)
(def-i)
(discrete)
(dense)

.
= R u ∼ (R ◦ R)

R− v R−◦ ∼ ((R− t Id) ◦ (R t Id))
Ri
R v Ri t (R ◦ Ri u Ri ◦ R)
R v R ◦ R

But since LWSP is undecidable [Schmidt-Schauß, 1989], it is
important to identify less complex sub-languages of LWSP that
are still sufﬁcient to state axioms distinguishing parthood,
componenthood, and containment relations. Otherwise the
DL version of FO-PCC would have no computational advan-
tages over the ﬁrst order theory.

Let L be the DL which includes only the constructors (ia-b,
iia, iii, vii, ix, and v [Table 3]) and in which the role compo-
sition operator (vii) only occurs in acyclic role terminologies
with inclusion axioms of the form R ◦ R v R, S ◦ R v R, and
R ◦ S v R. Unlike LWSP the DL L is decidable [Horrocks and
Sattler, 2004].

If R is the name of the relation R then we are able to state
in L that R is transitive (R ◦ R v R). Moreover, in L we can
very naturally represent DL-versions of the axioms ACP2 and
ACT4-5. Unfortunately, in L we are not able to state either
that R asymmetric, that R has the WSP property, or that R
has the NPO property. Also we cannot state a DL-version of
the deﬁnition of Ri in terms of R (as in def-i).

Let Ri be an undeﬁned relation name interpreted as Ri in
the R-structure (∆, R) (e.g., as contained-ini in a contain-
ment structure). In L we are able to use this additional prim-
itive to say that R has the no-single-immediate-predecessor
property (NSIP) and the single-immediate-successor property
(SIS).

(SIS)
(NSIP)

∃Ri.> v (= 1)Ri.>
(= 1)R−

i .> v ⊥

Notice however that, since we introduced Ri as an undeﬁned
relation name we do not know that the interpretation of Ri
is an intransitive subrelation of R unless additional axioms
are included in the theory.
In L we can state that Ri is a
subrelation of R but we cannot not say that Ri is intransi-
tive. Notice also, that in L, we cannot say that R is irreﬂexive
(R ◦ Id v ⊥) since L does not include a constructor for the
identity relation.

Let L∼Idt be the DL obtained by extending L with the
identity relation (viii), negation restricted to relation names
(a restricted version of vic), and role union (vib). In this DL
we can say that Ri is intransitive, that R is asymmetric, and
that R has the NPO property.

(intrans)
(asym)
(NPO)

Ri ◦ Ri v (∼ Ri)
R− v (∼ R)
(R− ◦ R) v R t Id t R−

Unfortunately, including role negation into a DL-language
signiﬁcantly increases the complexity of the underlying rea-
soning [Lutz and Sattler, 2000]. Though L∼Idt is less ex-
pressive than LWSP (we cannot state WSP or discreteness ax-
ioms or deﬁne Ri) it is an open question whether L∼Idt is
decidable. (It is known though that ALC-DLs that include
axioms of the form R ◦ S v T1 t . . . t Tn are undecidable
[Wessel, 2001].)

4.3 Describing parthood-composition-containment

structures in L

We chose L as the DL to formulate an approximation of FO-
PCC because L is decidable and does include the compo-
sition operator which is important for expressing interrela-
tions between relation and for reasoning (particularly in bio-
medical ontologies) [Spackman, 2001; Rogers and Rector,
2000; Horrocks and Sattler, 2004].

We add the symbols CP, PP and CT as well as CPi, PPi
and CTi to L. The intended interpretations of these symbols
are the relations CmpOf, PP, CntIn, CmpOf i, PPi,
and CntIni of parthood-composition-containment struc-
tures. We then include the following axioms for CP and PP:

component-of
(A1) CPi v CP
(A2) CP ◦ CP v CP
(A3)
(A4) ∃CPi.> v (= 1)CPi.>

(= 1)CP−

i .> v ⊥

proper-part-of
(A5) PPi v PP
(A6) PP ◦ PP v PP
(A7)

(= 1)PP−
−

i .> v ⊥

For CT we include a subrelation axiom and a transitivity ax-
iom:

A8 CTi v CT

A9 CT ◦ CT v CT

We include also axioms A10-12 corresponding to (iv-vi) in
Section 2.3.

A10 CP v PP A11 PP ◦ CT v CT A12 CT ◦ PP v CT

We call the theory formed by A1-12 DL-PCC. The sub-theory
formed by A1-4 is similar to the theories proposed in [Sattler,
2000] and [Lambrix and Padgham, 2000].

But, as discussed in the previous subsection, we are not
able to add to DL-PCC the following axioms and deﬁni-
tions that are needed to constrain the models to parthood-
composition-containment structures: (1) We are not able to
state that CP, PP, and CT are asymmetric and irreﬂexive; (2)
We are not able to state a discreteness axiom for CP or CT or
a density axiom for PP; (3) We are not able to deﬁne CPi,
PPi, and CTi in terms of CP, PP, and CT respectively; (4)
We are not able to state the weak supplementation principle
(WSP) for interpretations of PP.

Consider (1). Since DL-PCC lacks asymmetry axioms it
admits models in which CP, PP, and CT are interpreted as
reﬂexive relations. In those models CPi, PPi, and CTi are
all interpreted as the empty relation (making the axioms A3,
A4, and A7 trivially true). (See also F4 in Section 2.2.) For
example the structure (∆C , identical-to) is a model of DL-
PCC (but not of FO-PCC) if we interpret CP, PP, and CT as
identical-to and CPi, PPi, and CTi as ∅. Clearly, this model
is not a parthood-component-containment structure.

Consider (3). We included CPi, PPi, and CTi as unde-
ﬁned primitives in DL-PCC and added axioms (A1, A5, and

A8) that require their interpretations to be sub-relations of
the interpretations of CP, PP, and CT. Unfortunately, DL-
PCC admits models in which PPi and PP are the same re-
lation (similarly for CP and CPi or CT and CTi). Con-
sider Figure 2 and interpret CP and CPi as the relation
icr = {(C2, C1), (C3, C1)} (immediately-contained-in-the-
root-container), and PP, PPi, CT, CTi all as contained-in.
Then (∆C , contained-in, icr) is a model of DL-PCC (but not
of FO-PCC). This particular kind of unintended interpreta-
tions of PPi and CTi can be avoided by requiring that the
interpretation of these relations are intransitive. However in
L we are not able to require that a given relation is intransi-
tive.

Consider (4). The closest we can get to requiring that the
interpretation of PP has the WSP property is to require that
the NSIP property holds (axiom 7). However the NSIP prop-
erty is strictly weaker than the WSP property.1 Consequently,
DL-PCC admits models that would have been rejected by a
theory including an axiom that requires WSP for interpreta-
tions of PP (e.g. FO-PCC). Similar comments apply to (2).

These are strong limitations if the purpose of the presented
theory is to serve as an ontology that speciﬁes the meaning
of the terms ‘proper part of’, ‘component of’ and ‘contained
in’ rather than to support automatic reasoning in some spe-
ciﬁc and possibly ﬁnite domain.2 If the DL L∼Idt is decid-
able we can get a better DL approximation of FO-PCC that
is computationally tractable. But even a L∼Idt version of
FO-PCC will fall short of FO-PCC in expressivity since we
cannot state WSP for PP.

5 Conclusions
We studied formal properties of parthood, componenthood
and containment relations. Since it is the purpose of an on-
tology to make explicit the semantics of terminology sys-
tems, it is important to explicitly distinguish relations such
as proper parthood, componenthood, and containment. We
demonstrated that ﬁrst order logic has the expressive power
required to distinguish important properties of these relations.
In description logics like L several important properties of
these relations cannot be speciﬁed.

DLs are best used as reasoning tools for speciﬁc tasks
in speciﬁc domains (as suggested in [Sattler, 1995; 2000;
Lambrix and Padgham, 2000]). DLs are not appropriate for
formulating complex interrelations between relations. Thus
we need to understand a computational ontology as consist-
ing of two complementary components: (1) a DL based ontol-
ogy that enables automatic reasoning and constrains meaning
as much as possible and (2) a ﬁrst order ontology that serves
as meta-data and makes explicit properties of relations that
cannot be expressed in computationally efﬁcient description
logics. The ﬁrst order theory then can be used by a human

1NSIP entails WSP only in conjunction with discreteness and
NPO. We cannot require that interpretations of PP are discrete or
have the NPO property since then the proper parthood relation on
the domain of spatial objects could not be an interpretation for PP.
2If we constrain our models to ﬁnite domains then, for example,
it is indeed sufﬁcient to include (A3) and (A4) as axioms to require
the WSP and the NPO properties for CP (F1-3).

being to decide whether or not the DL-ontology in question
is applicable to her domain. Moreover, meta-data can also
be used to write special-purpose programs that phrase knowl-
edge bases and enforce the usage of relations in accordance
to the meta-data.

References
[Baader et al., 2002] F. Baader, D. Calvanese, D.L. McGuin-
ness, D. Nardi, and P.F. Patel-Schneider, editors. The De-
scription Logic Handbook. Cambridge University Press,
2002.

[Guarino, 1998] N. Guarino. Formal ontology and informa-
tion systems. In Nicola Guarino, editor, Formal Ontology
and Information Systems, (FOIS’98). IOS Press, 1998.

[Horrocks and Sattler, 2004] I. Horrocks and U. Sattler. De-
cidability of SHIQ with complex role inclusion axioms.
Artiﬁcial Intelligence, 120(1-2):79–104, 2004.

[Lambrix and Padgham, 2000] P. Lambrix and L. Padgham.
Conceptual modelling in a document management en-
vironment using part-of reasoning in description logics.
Data and Knowledge Engineering, 32(1):51–86, 2000.

[Lutz and Sattler, 2000] C. Lutz and U. Sattler. Mary likes
all cats. In F. Baader and U. Sattler, editors, International
Workshop in Description Logics (DL2000), number 33 in
CEUR-WS, pages 213–226.

[Rogers and Rector, 2000] J. Rogers

and A. Rector.
GALEN’s model of parts and wholes: experience and
comparisons. In AMIA Symp 2000, pages 714–8, 2000.

[Sattler, 1995] Ulrike Sattler. A concept language for an
engineering application with part-whole relations.
In
A. Borgida, M. Lenzerini, D. Nardi, and B. Nebel, edi-
tors, International Workshop on Description Logics, pages
119–123, Rome, 1995.

[Sattler, 2000] U. Sattler. Description logics for the repre-
sentation of aggregated objects. In W. Horn, editor, 14th
European Conference on Artiﬁcial Intelligence. IOS Press,
Amsterdam, 2000.

[Schmidt-Schauß, 1989] Manfred Schmidt-Schauß.

Sub-
sumption in KL-ONE is undecidable. In 1st International
Conference on Principles of Knowledge Representation
and Reasoning (KR89), pages 421–431, 1989.

[Simons, 1987] P. Simons. Parts, A Study in Ontology.

Clarendon Press, Oxford, 1987.

[Smith, 2001] B. Smith. Fiat objects. Topoi, 20(2):131–48,

2001.

[Spackman, 2001] K.A. Spackman.

Normal forms for
description logic expressions of clinical concepts in
SNOMED RT. Journal of the American Medical Informat-
ics Association, pages 627–631, 2001. Symposium Sup-
plement.

[Wessel, 2001] M. Wessel. Obstacles on the way to qualita-
tive spatial reasoning with description logics: Some unde-
cidability results. In International Workshop in Descrip-
tion Logics 2001, 2001.

