A Parametric Hierarchical Planner for Experimenting Abstraction Techniques 

Giuliano Armano, Giancarlo Cherchi, Eloisa Vargiu 
Department of Electrical and Electronical Engineering 

University of Cagliari 
1-09123, Cagliari, Italy 

armano, cherchi, vargiu @diee.unica.it 

Abstract 

This paper presents a parametric system, devised 
and  implemented  to  perform  hierarchical  plan(cid:173)
ning by delegating the actual search to an exter(cid:173)
nal planner (the "parameter") at any level of ab(cid:173)
straction,  including  the  ground  one.  Aimed  at 
giving a better insight of whether or not the ex(cid:173)
ploitation  of  abstract  spaces  can  be  used  for 
solving  complex  planning  problems,  compari(cid:173)
sons  have  been  made  between  instances  of the 
hierarchical  planner  and  their  non  hierarchical 
counterparts.  To  improve the  significance of the 
results,  three  different  planners  have  been  se(cid:173)
lected  and  used  while  performing  experiments. 
To  facilitate  the  setting  of  experimental  envi(cid:173)
ronments,  a  novel  semi-automatic  technique, 
used  to  generate  abstraction  hierarchies  starting 
from  ground-level  domain  descriptions,  is  also 
described. 

Introduction 

1 
There  is  experimental  evidence  that  humans  repeatedly 
use  abstractions  while  solving  different  kinds  of  prob(cid:173)
lems  [Stillings  et ai,  1987],  thus justifying  the  research 
in the field of automated hierarchical planning. 

It  is  apparent  that  abstraction  is  usually  not  effective 
on  simple  problems,  due  to  the  overhead  introduced by 
the  need  of going  back  and  forth  across  abstract  spaces 
while  performing  the  search.  In  other  words,  enforcing 
abstraction  on  simple  problems  may  end  up  by  wasting 
computational  resources.  Yet,  under certain assumptions 
abstraction can significantly reduce the search time when 
applied to complex problems [Knoblock, 1991]. 

In  order  to  investigate  the 

impact  of  abstraction 
mechanisms  on  the  search  complexity,  we  devised  and 
implemented a hierarchical wrapper able to embody any 
domain-independent  planner  provided  that  a  compliance 
with  the  STRIPS  subset  of PDDL  1.2  standard  [McDer-
mott  et  al,  1998]  is  ensured.  The  embodied  planner  is 
exploited  at any  level  of the hierarchy,  each  level being 
characterized by  its  own  definitions.  A  suitable decoup(cid:173)
ling  between  levels  is  guaranteed  by  using  domain-
specific  rules  that  establish  the  correspondence  between 

entities belonging to a level and its superior. Translation 
rules are given in a PDDL-like format, explicitly defined 
to support abstractions. 

Experiments  have  been  performed  on  some  classical 
planning domains, widely acknowledged by the planning 
community  -although  not  specifically  tailored  for  ab(cid:173)
straction. To better assess the significance of the results, 
three different planners have been used while performing 
experiments. 

The  remainder  of this  paper  is  organized  as  follows: 
first, some  relevant  work  on  planning  by  abstraction  is 
briefly  recalled,  to give  the reader a better insight of the 
issues deemed relevant.  Then, the overall architecture of 
the  system  is  illustrated,  including  the  semi-automatic 
technique  we  developed  for  generating  abstract  spaces. 
Subsequently,  experiments  are  described and results  are 
discussed.  Finally,  conclusions  are  drawn  and  future 
work is outlined. 

2  Related Work 
Building an ordered set of abstractions for controlling the 
search has proven to be an effective approach for dealing 
with  the  complexity  of  planning  tasks.  This  technique 
requires the original search space to be mapped into cor(cid:173)
responding abstract spaces, in which irrelevant details are 
disregarded at different levels of granularity. 

Two  main  abstraction  mechanisms  have  been  studied 
in  the  literature:  action-  and  state-based.  The  former 
combines  a  group  of  actions  to  form  macro-operators 
[Korf,  1987].  The  latter  exploits  representations  of  the 
domain given at a lower level of detail;  its most signifi(cid:173)
cant forms rely on (i) relaxed models, obtained by drop(cid:173)
ping  operators'  applicability  conditions 
[Sacerdoti, 
1974],  and  on  (ii)  reduced  models,  obtained  by  com(cid:173)
pletely  removing  certain  conditions  from  the  problem 
space  [Knoblock,  1994].  Both  models,  while preserving 
the provability of plans that hold at the ground level, per(cid:173)
form a  "weakening" of the original  problem space,  thus 
suffering from the drawback of introducing "false" solu(cid:173)
tions  at  the  abstract  levels  [Giunchiglia  and  Walsh, 
1990]. 

As for Knoblock's abstraction hierarchies, each predi(cid:173)
cate  is  associated  with  a  unique  level  of abstraction  -

936 

PLANNING 

according  to  the  constraints  imposed  by  the  ordered 
monotonicity property  [Knoblock,  1994]. Any such hier(cid:173)
archy can be obtained by progressively removing certain 
predicates from the domain (or problem) space. 

From a general perspective, let us assume that abstrac(cid:173)
tions  might  occur  on  types,  predicates,  and  operators. 
Relaxed models are a typical example of predicate-based 
abstraction,  whereas  macro-operators  are an  example  of 
operator-based abstraction. 
3  System Architecture 
The system has been called HWQ, standing for (paramet(cid:173)
ric) Hierarchical Wrapper. Note that square brackets are 
part of the name,  indicating  the  ability  to  embed  an  ex(cid:173)
ternal  planner;  being  P  any  such  planner,  the  notation 
HW[P] shall be used to denote an instance of HW[] able 
to exploit the planning capabilities of P. 

Figure  1  illustrates the architecture of the system,  fo(cid:173)
cusing  on  its  main  components,  i.e.,  an  engine  and  the 
embedded planner.  The  former is  devoted to controlling 
the communication between adjacent levels, whereas the 
latter is exploited to perform planning at any given level 
of abstraction. 

Any  domain-independent  planner  can  be  embodied 
within  the  system,  provided  that  compliance  with  the 
STRIPS subset of the PDDL  1.2 standard is ensured. 

Figure 1. The architecture of the system. 

Although  the  system  supports  a  multiple-level  hierar(cid:173)
chy,  for  the  sake  of simplicity,  in  the  following  we  as(cid:173)
sume that only one abstract level exists, giving rise to a 
two-level (i.e., ground and abstract) hierarchical descrip(cid:173)
tion. 
3.1  The  Planning  Algorithm 
Once  instantiated  with  an  external  planner  P,  HW[P] 
takes as inputs a ground-level problem and a structured 
description of the corresponding domain, including a set 
of rules  to  be  used  while  mapping  ground  into  abstract 
states and vice-versa. In fact, to perform planning at dif(cid:173)
ferent levels of abstraction,  the  engine of HW[] must op(cid:173)
erate  bi-directional  translations  (upwards  and  down(cid:173)
wards) to permit communication between adjacent levels. 
To find a solution of a given problem, first the engine 
of HW[P]  translates  the  init  and  goal  sections  from  the 
ground to the abstract level. P is then  invoked to search 
for an abstract solution.  Subsequently, each abstract op(cid:173)
erator  is  refined  by  repeatedly  invoking  P.  The  refine(cid:173)
ment of an abstract operator is performed by activating P, 

at the ground  level,  on  the  goal  obtained by  translating 
downward  its  effects.  Note  that  the  initial  state  of each 
refinement  depends  on  the  previous  refinement;  hence, 
refinements  must  be  performed  according  to  the  order 
specified by the abstract plan.  To avoid incidental dele(cid:173)
tion  of subgoals  already  attained  during previous  refine(cid:173)
ments,  they are added  to  the  list  of subgoals  that results 
from  translating downward the effects  of the current ab(cid:173)
stract operator to be refined. 

When the attempt to refine the current abstract solution 
fails  P  is  invoked  to  find  the  next  abstract  solution,  ] 
unless  the  number of abstract  solutions  found  so  far ex(cid:173)
ceeds a given threshold 
If no abstract  solution could 
be successfully refined, to ensure the completeness of the 
algorithm,  an overall search  is performed at the ground 
level. The whole process ends when a ground solution is 
found or the overall search fails. 
3.2  Extending  PDDL  for  Dealing  with 

Abstraction 

A problem and its corresponding domain are described in 
accordance with the standard PDDL 1.2 syntax, using the 
'''define problem"  and  "define  domain"  statements,  re(cid:173)
spectively.  To  describe  how  bi-directional  communica(cid:173)
tion  occurs  between  adjacent  levels  an  extension  to  the 
standard PDDL has been devised and adopted. 

More precisely, the syntactic construct "define hierar(cid:173)
chy" has been introduced. It encapsulates an ordered set 
of domains,  together  with  a  corresponding  set  of map(cid:173)
pings  between  adjacent  levels  of abstraction.  Since  the 
mappings  are given  in  term  of types,  predicates  and  op(cid:173)
erators, 
three  subfields  have  been  introduced  (i.e., 
: types,  : predicates, and  : actions), to represent the 
abstraction  over  such  dimensions.  The  general  form  of 
the construct is: 

(define 

(hierarchy  <name>) 
(:domains  <domain-name>*) 
(imapping 
[:types  <types-def>] 
[:predicates  <predicates-def>] 
[tactions  <actions-def>]) *) 

(<src-domam>  <dst-domain>) 

The following notation is adopted in the  : types field 

to represent a clause for mapping types: 

( a b s t r a c t - t y pe  ground-type) 

It 

specifies 

becomes 
abstract-type  while  performing  upward  translations. 
To disregard a type, the following notation must be used: 

ground-type 

that 

Due to the limitations of most of the existing planners, the 
process of incrementally querying for another solution may be 
simulated by preliminarily querying for m abstract solutions, 
to be released incrementally on demand. 

PLANNING 

937 

Tabic 1. Heuristics for pruning the operators1 graph. 

( n il  ground-type) 

Moreover,  the  following  notation  is  adopted  in  the 
:predicates  field  to  represent  a  clause  for  mapping 
predicates: 

It  specifies  that  ground-predicate  must  be  pre(cid:173)
served  while  going  upward  and  vice-versa.  Note  that,  if 
no differences exist in mapping a predicate between adja(cid:173)
cent levels, the corresponding clause can be omitted. 

To  disregard  a  predicate  while  performing  upward 

translations, the following notation is used: 

( n il 
(ground-predicate 

?pl2 

t l2  ?p22  - 

t22 

...)  ) 

It  specifies  that  ground-predicate  is not translated 

into any abstract-level predicate. 

In  addition,  abstract-predicate  can  be  expressed 
as a logical combination of some ground-level predicates. 
To  describe  how  to  build  the  set  of operators  for  the 
field,  four  kinds  of 

abstract  domain,  in  the  -.actions 
mapping can be expressed: 

-  an action remains unchanged or some of its parame(cid:173)

ters are disregarded; 
- an action is removed; 
-  an  action  is  expressed  as  a  combination  of actions 

belonging to the ground domain; 

-  a new operator is defined from scratch. 

3.3  Generating  Abstractions 
To facilitate the setting of abstract spaces, as an alterna(cid:173)
tive  to  the  hand-coded  approach  used  in  [Armano et ai, 
2003],  a  novel  semi-automatic  technique  for  generating 
abstraction hierarchies starting from ground-level domain 
descriptions has been devised and adopted. 

From  our  particular  perspective,  performing  abstrac(cid:173)
tion basically involves executing two steps:  (i) searching 
for macro-operator schemata through a priori or a poste(cid:173)
riori  analysis,  (ii)  selecting  some  of  the  schemata  evi(cid:173)
denced so far and translating them into abstract operators. 
In  this subsection,  we concentrate on the task of find(cid:173)
ing  macro-operator  schemata 
throughout  an  a-priori 
analysis  performed  on  the  given  domain  and  problem, 
rather than adopting the a-posteriori technique illustrated 
in  [Armano and Vargiu, 2001],  aimed at finding macro-
operator  schemata  according  to  a  post-mortem  analysis 
performed on plan "chunks". 

938 

PLANNING 

Step (i) is performed by an algorithm for building and 
then  pruning  a  directed  graph,  whose  nodes  represent 
operators  and  whose  edges  represent  relations  between 
effects of the source node and preconditions of the desti(cid:173)
nation node. In particular, for each source node A and for 
each  destination  node  B,  representing  operators  defined 
in  the  given  domain,  the  corresponding  edge  is  labeled 
with a pair of non-negative numbers, denoted by 
The pair accounts for how many predicates A can estab(cid:173)
lish 
that are also preconditions of B.  It 
is worth noting that source and destination node may co(cid:173)
incide, thus giving rise to a self-reference. 
to 

the  domain-
independent heuristics reported in Table  1. Note that the 
pruned graph does not contain edges labeled 
the 
corresponding operators being completely independent. 

is  performed  according 

At  this  point,  the  most  promising  macro-operator 
schemata can be easily extracted from the pruned graph, 
each path being related with a candidate macro-operator. 

and negate 

Pruning 

<0 1> 

Figure 2. The directed graph (before pruning), representing static 
relations between operators of the blocks-world domain. 

As an example, let us consider the well-known blocks-
world domain, encompassing four operators: stack, pick(cid:173)
up, unstack, put-down. The corresponding graph is shown 
in  Figure  2.  Bearing  in  mind  that  the  same  mechanism 
has been applied to all operators' pairs, let us concentrate 
-for  instance-  on  the  relation  that  holds  between  stack 
(source node) and pick-up (destination node). 

Considering that the effects of the stack operator are: 

(holding  ?x)) 
(clear  ?y)) 

(not 
(not 
(clear  ?x) 
(handempty) 
(on  ?x  ?y) 

and that the preconditions of the pick-up operator are: 

(clear  ?x) 
(ontable  ?x) 
(handempty) 

we label the corresponding edge with the pair 
It is 
apparent  that  stack  establishes  two  preconditions  for 
pick-up, while negating another. 

As for the pruning activity, Figure 3 shows the result(cid:173)

ing  graph  for  the  blocks-world  domain.2  The  resulting 
macro-operator schemata are (";" being used for concate(cid:173)
nation):  pick-up;stack,  unstack;put-down,  pick-up  ;put-
down, and stack;unstack. 

Figure 3. The directed graph (after pruning), representing static 
relations between operators of the blocks-world domain. 

Step  (ii)  is performed by  selecting  a subset of the  re(cid:173)
sulting macro-operator schemata, and by translating them 
into  abstract  operators.  In  principle,  generating  an  ab(cid:173)
stract operator is not a deterministic task;  for this reason 
in  the  current  implementation  of the  system  this  mecha(cid:173)
nism  has  not  yet  been  completely  automated.  Neverthe(cid:173)
less,  the simplest way of generating an  abstract operator 
consists  of deleting  from  the abstract  level  all predicates 
that  do  not  occur  among  preconditions  or  effects  of any 
selected macro-operator.  This process  influences  (and  is 
influenced  by)  the  translation  rules  that  apply  to  both 
types  and  predicates.  For  instance,  the  absence  of  a 
predicate  as  a precondition  or effect of any  induced ab(cid:173)
stract operator entails its deletion from the abstract level. 
As  for the  blocks-world  example,  two  macro-operator 
schemata have been disregarded (i.e., stack.unstack and 
pick-up;put-down),  as  they  do  not  alter  the  state  of the 
domain (the resulting set of effects being empty). In fact, 
it  is  apparent  that  they  are  composed  of complementary 
actions. 

It  is  worth  pointing  out  that  the  approach  described 
above  can  be  used  also  for  generating  abstractions  tai(cid:173)
lored  to  a  given  problem,  by  simply  adding  a  dummy 
operator  representing  the  goal(s)  of  the  problem  itself. 
This  "goal"  operator  has  only  preconditions  (its  set  of 
effects  being  empty),  representing  a  logic  conjunct  of 
predicates that characterize the goal of the input problem. 
In  this  way,  all  sequences  deemed  relevant  to  solve  the 
problem are easily put into evidence (as they end with the 
"goal" operator). 
4  Experimental  Results 
The  current  prototype  of  the  system  has  been  imple(cid:173)
mented  in  C++.  Experiments  have  been  performed  with 
three  planners:  GRAPHPLAN  [Blum  and  Furst,  1997], 
BLACKBOX [Kautz and Selman,  1998], and LPG  [Ger-
evini  and  Serina,  2002].  In the following, GP,  BB,  and 
LPG  shall  be  used 
the  GRAPHPLAN, 
BLACKBOX,  and  LPG  algorithms,  whereas  HW[GP], 

to  denote 

Since we are interested in finding macro-operators, we do 
not take into account self-references. 

PLANNING 

939 

HW[BB],  and  HW[LPG]  shall  be  used  to  denote  their 
hierarchical counterparts. 

To assess  the  capability  of abstraction  to  improve  the 
search,  we performed some tests on five domains  taken 
from the  1998, 2000, and 2002 MPS planning competi(cid:173)
tions [Long, 1998; Bacchus, 2000; Long, 2002]: elevator, 
logistics, blocks-world, gripper, and zeno-travel. Experi(cid:173)
ments were conducted on a machine powered by an Intel 
Celeron  CPU,  working at  1200  Mhz and  equipped with 
256Mb of RAM. A time bound of 1000 CPU seconds has 
also been adopted. 

# 

GP 

1-4 
3-1 
4-1 
4-4 
5-1 

1  0.01 
0.23 
1.96 
10.11 
364.7 

4-2 
5-2 
7-0 
8-1 
10-0 
15-0 

1  0.68 
0.08 
~ 
-
-
-

4-0 
6-0 
8-0 
10-0 
11-0 
14-0 
15-0 
17-0 
20-0 
22-0 1 
25-0 

0.34 
3.04 
31.61 
-
--
-
~ 
~ 
-
-
-

/GP/ 

0.06 
0 36 
0.83 
0.84 
2.03 

1.22 
0.16 
10.93 
16.26 
43.43 
203.4 

0.32 
1.82 
11.13 
--
--
-

--

--
~ 
-
~ 

1 
8 
9 
11 
13 
14 

0.02 
-
-
~ 
-
-

0.52 
42.55 

-
-

--

BB HW 

0.33 
1.20 
1.74 
1.79 
2.54 
3.89 

elevator 
0.1 
1.34 
1.03 
311.5 
180.8 
- 
logistics 
0.27 
0.15 
4.49 
2.90 
8.27 
10.91 
blocks-world 

0.46 
0.46 
2.17 
3.02 
3.76 
6.33 

0.67 
1.68 
2.46 
5.00 
4.25 
9.84 

0.16 
0.26 
0.92 
6.82 
16.23 

.. 
--
-
-

--

--

zeno-travel 
0.22 
0.94 
0.34 
11.20 
62.99 

0.36 
2.36 
3.37 
2.78 
20.52 
20.04  | 

LPG 

0.01 
0.02 
0.02 
0.02 
0.02 
0.03 

17.93 
0.02 
2.12 
1.55 
2.17 
0.15 

0.02 
0.05 
0.36 
0.62 
4.23 
5.00 
7.49 
33.93 
66,78 
183.16 
668.98 

0.02 
0.14 
0.13 
0.16 
0.42 
3.90 

HW 
LPG 

0,11 
0.15 
0.16 
0.16 
0.18 
0.29 

-
" 
"" 
-
-

0.08 
0.23 
0.31 
0.67 
0.83 
1.91 
2.07 
3.49 
7.88 
12.21 
24.94 

0.03 
0.49 
1.08 
1.06 
2.47 
21.93 

2  1 
3 
4 
5 
6 
9 

| 

4.72 
7.91 
18.32 
57.21 
--
-

0.56 
1.73 
2.63 
4.38 
7.97 
24.29  | 

gripper 
0.42 
5.22 
268.7 
421.1 
586.4 

0.63 
1.20 
1.55 
1.54 
2.26 
3.63 

0.02 
0.02 
0.02 
0.03 
0.03 
0.05 

0.07 
0.12 
0.14 
0.15 
0.17 
0.36 

Table 2. Performance comparison of BB, GP, and LPG with 
their hierarchical counterparts. 

compares  the  CPU  time  of each  planner  over  the  set  of 
problems  taken  from  the  AIPS  planning  competitions. 
Dashes show problem instances that could not be solved 
by  the  corresponding  system  within  the  adopted  time-
bound. 

Elevator. Experiments show that -for GP and BB- the 
CPU  time  increases  very  rapidly  while  trying  to  solve 
problems  of  increasing  length,  whereas  HW[GP]  and 
HW[BB]  keep  solving  problems  with  greater  regularity 
(although the relation between number of steps and CPU 
time  remains  exponential).  LPG  is  able  to  solve  long 
plans in a very short time, thus doing away with the need 
to resort to HW[LPG]. 

Figure 4. CPU time comparisons in the blocks-world domain. 

Logistics. In this domain GP easily solves problems up 
to  a  certain  length,  but  it  is  unable  to  solve  problems 
within the imposed time limits if a given threshold is ex(cid:173)
ceeded. On the other hand, HW[GP] succeeds in solving 
problems  of  increasing  length  without  encountering  the 
above  difficulties.  BB  performs  better  than  HW[BB]  for 
small  problems,  whereas  HW[BBJ  outperforms  BB  on 
more complex problems. LPG is able to solve long plans 
in a few seconds at the most. For unknown reasons LPG 
was not able to refine any abstract operator when invoked 
by the engine of HW [LPG]. 

Blocks-world. Tests performed on this domain reveal a 
similar  trend  for  GP  and  HW[GP],  although  the  latter 
performs  slightly  better  than  the  former.  BB  performs 
better  than  HW  [BB]  for  simple  problems,  whereas 
HW[BB]  outperforms  BB  on  problems  of medium  com(cid:173)
plexity.  LPG  is  able  to  solve  problems  whose  solution 
length is limited to  100 steps.  In this domain, HW[LPG] 
clearly outperforms LPG on more complex problems. 

All  domains  have  been  structured  according  to  a 
ground and an abstract level, the latter having been gen(cid:173)
erated  following  the  approach  described  in the previous 
subsection. For each domain, several tests have been per(cid:173)
formed -characterized by increasing complexity. Table 2 

Figure 5. CPU time comparisons in the blocks-world domain. 

Zeno-travel. Unfortunately, in this domain, neither GP 
nor HW[GP]  are  able  to  successfully  tackle  most  of the 
problems  of  this  domain.  An  improvement  of HW[BB] 

940 

PLANNING 

over BB  can  be  observed,  similar  to  the  one  shown  for 
the blocks-world domain. LPG is able to solve long plans 
in a few seconds at the most,  thus avoiding the need  to 
resort to HWfLPGJ. 

Gripper.  For  the  gripper  domain,  both  HW[GP]  and 
HW[BB]  clearly  outperform  their  non-hierarchical  coun(cid:173)
terparts.  LPG  is able to solve long plans in a very short 
time. 

For the sake of brevity, only two plots (i.e., Figures 4-
5  concerning  the  blocks-world  domain)  of relative  per(cid:173)
formances  -i.e.  non  hierarchical  vs.  hierarchical-  are 
reported. 
5  Conclusions  and Future Work 
In  this  paper  a  parametric  system  has  been  presented, 
devised  to  perform  hierarchical  planning  by  delegating 
the actual  search  to an external planner (the parameter). 
Aimed  at  giving  a  better  insight  of whether  or  not  the 
exploitation  of abstract  spaces  can  be  useful  for  solving 
complex  planning  problems,  comparisons  have  been 
made  between  any  instances  of the  hierarchical  planner 
and its non-hierarchical counterpart. 

To  better  investigate  the  significance  of  the  results, 
three different  planners  have been  used  to make experi(cid:173)
ments.  To  facilitate  the  setting  of experiments,  a  novel 
semi-automatic  technique  for  generating  abstract  spaces 
has been devised and adopted. Experimental results high(cid:173)
light that abstraction is useful for classical planners, such 
as GP and BB. On the contrary, the usefulness of resort(cid:173)
ing  to  hierarchical  planning  for  the  latest-generation 
planner used for experiments (i.e.,  LPG) clearly emerges 
only in the blocks-world domain. 

As  for  future  work,  we  are  currently  addressing  the 

problem of automatically generating abstract operators. 
References 
[Armano and Vargiu, 2001] Giuliano Armano and Eloisa 
Vargiu.  An Adaptive Approach  for Planning in Dynamic 
Environments.  Proceedings of the International Confer(cid:173)
ence on Artificial Intelligence  (1C-AI2001), Special Ses(cid:173)
sion  on  Learning  and  Adapting  in  Al  Planning,  pages 
987-993, Las Vegas, Nevada, June 2001. 

[Armano et al,  2003]  Giuliano Armano,  Giancarlo Cher-
chi,  and  Eloisa  Vargiu.  Experimenting  the  Performance 
of Abstraction  Mechanisms  through a Parametric Hierar(cid:173)
chical  Planner.  Proceedings  of 1ASTED  International 
Conference  on  Artificial  Intelligence  and  Applications 
(A1A '2003), Innsbruck, Austria, Febbraio 2003. 

[Bacchus,  2000]  Fahiem  Bacchus.  Results  of the  AIPS 
2000 Planning Competition, 2000. 
t
U

L: h

R

p

t

[Gerevini  and  Serina,  2002]  Alfonso  Gerevini  and  Ivan 
Serina. LPG: A Planner Based on Local Search for Plan(cid:173)
ning Graphs. Proceedings of the 6th International Confer(cid:173)
ence on Al Planning and Scheduling, AAAI Press, Menlo 
Park, 2000. 

[Giunchiglia  and  Walsh,  1990]  Fausto  Giunchiglia  and 
Toby  Walsh.  A  theory  of Abstraction,  Technical  Report 
9001-14, IRST, Trento, Italy, 1990. 

[Kautz and Selman,  1998] Henry Kautz and Bart Selman. 
BLACKBOX:  A  New  Approach  to  the  Application  of 
Theorem Proving to Problem Solving. In  Working notes 
of the Workshop on Planning as Combinatorial Search, 
AIPS-98, pages 58-60, Pittsburg, PA, 1998. 

[Korf, 1987] Rich E. Korf. Planning as Search: A Quanti(cid:173)
tative  Approach.  Artificial  Intelligence,  33(1 ):65—88, 
1987. 

[Knoblock,  1991]  Craig  A.  Knoblock.  Search Reduction 
in Hierarchical Problem Solving. Proceedings of the  9th 
National  Conference  on  Artificial  Intelligence,  pages 
686-691, Anaheim, CA,  1991.* 

[Knoblock,  1994]  Craig  A.  Knoblock.  Automatically 
Generating  Abstractions  for  Planning.  Artificial  Intelli(cid:173)
gence, 6S(2):243~302, 1994. 

[Long,  2002]  Derek  Long.  Results  of  the  AIPS  2002 
Planning Competition, 2000. 
URL: http://www.dur.ac.Uk/d.p.long/competition.html. 

[Long,  1998] Derek Long.  The AIPS-98 Planning Com(cid:173)
petition. Al Magazine, 21(2): 13-33, 1998. 

[McDermott et al.,  1998] Drew McDermott, Malik Ghal-
lab,  Adele  Howe,  Craig  Knoblock,  Anshwin  Ram, 
Manuela  Veloso,  Daniel  Weld,  and  David  Wilkins. 
PDDL  -  The  Planning  Domain  Definition  Language, 
Technical Report CVC TR-98-003 / DCS TR-1165, Yale 
Center for Communicational Vision and Control, October 
1998. 

[Sacerdoti,  1974] Earl D. Sacerdoti. Planning in a hierar(cid:173)
chy  of abstraction  spaces.  Artificial Intelligence,  5:115— 
135,1974, 

[Stillings  et al.,  1987]  Neil  A.  Stillings,  Christopher  H. 
Chase,  Mark  H.  Feinstein,  Jay  L.  Garfield,  Edwina  L. 
Rissland,  and  Steven  E.Weisler.  Cognitive Science: An 
Introduction.  MIT  Press,  Cambridge,  Massachusetts, 
1987. 
w

w

w

:

/

/

.

[Blum  and  Furst,  1997]  Avrim  L.  Blum  and  Marrick  L. 
Furst.  Fast  Planning  through  Planning  Graph  Analysis. 
Artificial Intelligence,  90(l-2):279-298,  1997. 

PLANNING 

941 

