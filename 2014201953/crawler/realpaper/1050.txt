Progression of Situation Calculus Action Theories with Incomplete Information

Stavros Vassos and Hector Levesque

Department of Computer Science

University of Toronto

Toronto, ON, CANADA

{stavros,hector}@cs.toronto.edu

Abstract

In this paper, we propose a new progression mecha-
nism for a restricted form of incomplete knowledge
formulated as a basic action theory in the situation
calculus. Speciﬁcally, we focus on functional ﬂu-
ents and deal directly with the possible values these
ﬂuents may have and how these values are affected
by both physical and sensing actions. The method
we propose is logically complete and can be cal-
culated efﬁciently using database techniques under
certain reasonable assumptions.

1 Introduction

This paper deals with the problem of getting a robot or agent
to reason efﬁciently about action and change under the fol-
lowing three conditions:

1. the agent has incomplete knowledge about certain chang-

ing values in the world (ﬂuents);

2. the agent has both physical (world-changing) and sens-

ing (knowledge-producing) actions at its disposal;

3. the agent is long-lived and may have performed thou-

sands or even millions of actions to date.

These conditions are typical of robots or agents that must op-
erate autonomously over long periods of time, such as the
agents found in role-playing games. For example, an agent
may not know the relative locations of other agents or impor-
tant objects, but may be able to move and to sense what agents
and objects are nearby. The challenge is to reason efﬁciently
about the overall state of the world in this setting, taking into
account what has been done and what has been sensed, as a
large number of such actions are performed.

There is a signiﬁcant body of work on logical formalisms
for dynamic domains that are appropriate here, such as the
situation calculus [McCarthy and Hayes, 1969], the event
calculus [Kowalski and Sergot, 1986], and the ﬂuent calcu-
lus [Thielscher, 1999]. In logical terms, we seek an efﬁcient
solution to the projection problem [Reiter, 2001]: given an
action theory that speciﬁes the preconditions and effects of
actions (including sensing), and a knowledge base about the
initial state of the world, determine whether or not some con-
dition holds after a given sequence of actions has been per-

formed. This is a fundamental reasoning problem and a nec-
essary prerequisite to other forms of reasoning in dynamic
domains such as planning and high-level program execution.
While the projection problem can be solved by regression or
by progression [Lin, 2007], it is generally agreed that regres-
sion alone is impractical when the number of actions is large
[Lakemeyer and Levesque, 2007].

While formalisms based on logic can represent a general
form of incomplete knowledge in a straightforward way, they
would then require systems based on some form of theorem-
proving. It is quite typical of the practical implementations
of these formalisms to forego this generality and either insist
on complete knowledge or to employ an inference mecha-
nism that is logically incomplete. For the situation calculus,
the former approach was taken in the practical implementa-
tions of the GOLOG agent programming language [Levesque
et al., 1997; De Giacomo and Levesque, 1999]; the latter was
taken by Liu and Levesque [2005] where incomplete knowl-
edge was dealt with using a logically incomplete form of pro-
gression. In the FLUX implementation of the ﬂuent calculus
[Thielscher, 2004] incomplete knowledge is dealt with using
constraint rules and a logically incomplete constraint solver.
In this paper, we propose a new progression mechanism
for a restricted form of incomplete knowledge formulated as
a basic action theory in the situation calculus. Speciﬁcally,
we focus on functional ﬂuents and deal directly with the pos-
sible values these ﬂuents may have and how these values are
affected by both physical and sensing actions. Our approach
handles a restricted form of (functional) local-effect action
theories but generalizes the Liu and Levesque account where
progression is logically complete only for action theories that
are context complete, that is, where there is complete knowl-
edge about the context of any context-dependent successor
state axioms. Our method can be calculated efﬁciently using
database techniques (related to those of [Antova et al., 2007])
under certain reasonable assumptions. To our knowledge, no
other logical formalism handles progression (and therefore
the projection task) in a way that is both logically complete
and practical under the three conditions listed above.

The rest of the paper is organized as follows.

In Sec-
tion 2, we review the situation calculus notation, as well as
the deﬁnitions of projection and progression. In Section 3,
we discuss the notion of a possible value and deﬁne the local-
effect and bounded action theories. In Section 4, we present a

IJCAI-07

2029

progression mechanism for local-effect and bounded theories
and in Section 5, we discuss the complexity of the approach.
In Section 6, we discuss related work. Finally, in Section 7,
we draw conclusions and discuss future work.

2 Situation calculus theories and progression

The situation calculus [McCarthy and Hayes, 1969] is a
ﬁrst-order language with some limited second-order features
speciﬁcally designed for representing dynamically changing
worlds. The language has disjoint sorts for actions, situations,
and objects (everything else).

A situation represents a world history as a sequence of ac-
tions. The constant S0 is used to denote the initial situation
where no actions have been performed. Sequences of actions
are built using the function symbol do, such that do(a, s) de-
notes the successor situation resulting from performing ac-
tion a in situation s. A ﬂuent is a predicate or function whose
last argument is a situation, and thus whose value can change
from situation to situation. Actions need not be executable in
all situations, and the predicate P oss(a, s) states that action
a is executable in situation s. Actions have sensing results,
and the function sr(a, s) denotes the sensing result of action
a when executed in situation s [Scherl and Levesque, 2003].
Here, we restrict our attention to a situation calculus lan-
guage L that includes only the function symbols do, sr, S0
as described above, the predicate symbol P oss, a ﬁnite num-
ber of functional1 ﬂuent symbols F , a ﬁnite number of action
function symbols A whose arguments are of sort object, and
a ﬁnite number of constant symbols C of sort object.

Within L, we can formulate action theories that describe
how the world changes as the result of the available actions.
We focus on a variant of the basic action theories [Reiter,
2001]. An action theory D has the following form:2

D = Dap ∪ Dss ∪ Dsr ∪ Duna ∪ D0 ∪ Df nd ∪ E

1. Dap is a set of action precondition axioms, one per ac-
tion symbol A, of the form P oss(A((cid:2)y), s) ≡ ΠA((cid:2)y, s).
2. Dss is a set of successor state axioms (SSAs), one for
each ﬂuent symbol f , of the form f ((cid:2)x, do(a, s)) = v ≡
Φf ((cid:2)x, a, v, s). SSAs characterize the conditions under
which the ﬂuent has a speciﬁc value at situation do(a, s)
as a function of situation s.

3. Dsr is a set of sensing-result axioms (SRAs), one for
each action symbol A, of the form sr(A((cid:2)y), s) = r ≡
ΘA((cid:2)y, r, s). SRAs relate sensing outcomes with ﬂuents.
4. Duna is the set of unique-names axioms for actions:

A((cid:2)x) (cid:4)= A(cid:2)((cid:2)y), and A((cid:2)x) = A((cid:2)y) ⊃ (cid:2)x = (cid:2)y.

5. D0 is a set of axioms describing the initial situation S0.
6. Df nd consists of the axioms for equality and a set of do-
main independent foundational axioms which formally
deﬁne legal situations.

1Relational ﬂuents can be represented by functional ﬂuents that
are forced to take only values true/false. Non-ﬂuent functions and
predicates can be formalized as unchanging ﬂuents [Reiter, 2001].

2We will be omitting leading universal quantiﬁers.

7. E is a set of unique-names axioms for constants along

with a domain closure axiom for sort object.

To describe actions along with their sensing results, we use
terminology as in [De Giacomo et al., 2001]. A history h is
a sequence (a1, r1) · . . . · (an, rn), where each ai is a ground
action term and ri is a constant that represents the action’s
sensing outcome. We assume that non-sensing actions always
return the ﬁxed result c. We use end(h) as an abbreviation
for the ground situation term that corresponds to h. This is
deﬁned as follows: end(h) is S0 for the empty history, and
end(h · (a, r)) is do(a, end(h)). Similarly, S(h) is the set
of atoms that describe the sensing results in h. S(h) is an
abbreviation for {sr(ai, end(hi)) = ri | 1 ≤ i ≤ n}, where
hi is the sub-history up to action ai, (a1, r1)·. . .·(ai−1, ri−1).
A situation-suppressed expression is a formula in the lan-
guage without P oss and sr, and with all situation arguments
suppressed. φ[σ] denotes the situation calculus formula ob-
tained from φ by restoring the situation argument σ into all
ﬂuents in φ. We use a, b, c, d, e to range over C and f, g
to range over F . A primitive ﬂuent term is a ground term
that mentions at most one ﬂuent symbol, e.g. f (c, S0), and
a primitive atom is one that mentions at most one primitive
ﬂuent term, e.g. f (c, S0) = d, f (c, S0) = x. A primitive for-
mula (sentence) is a formula (sentence) that mentions only
primitive atoms. Note that quantiﬁcation is allowed in prim-
itive formulas but not when the variable appears as an argu-
ment of a ﬂuent. Finally, we use τ, u to denote a situation-
suppressed primitive ﬂuent term.

In this notation, the projection task [Reiter, 2001] is the fol-
lowing: given a history h and a situation-suppressed sentence
φ, determine whether or not D ∪ S(h) |= φ[end(h)]. We pro-
pose to solve it for certain restricted action theories using a
form of progression, which we deﬁne along the lines of [Lin
and Reiter, 1997] and [Liu and Levesque, 2005]. Let I be a
standard model iff I satisﬁes E .
I (cid:2)
Deﬁnition 1. Let I be a standard model of D0.
is a successor model of I wrt a world-changing ac-
tion A((cid:2)e)
is a standard model and for any
primitive ﬂuent atom f ((cid:2)c) = d[S0], I (cid:2) |= f ((cid:2)c) = d[S0] iff
I |= Φf ((cid:2)c, A((cid:2)e), d)[S0]. For a sensing action A((cid:2)e) with
result b, I (cid:2)
is a stan-
dard model, and I (cid:2) |= f ((cid:2)c) = d[S0] iff I |= f ((cid:2)c) = d[S0]
and I |= ΘA((cid:2)e, b)[S0].
Deﬁnition 2. D(cid:2)
standard models of D(cid:2)
D0 wrt (A((cid:2)e), b).
One step of progression is a solution to one step of projection
in the sense that if h = (a, r) and D ∪ S(h) is consistent, then
D ∪ S(h) |= φ[end(h)] iff D(cid:2)

0 is a progression of D0 wrt (A((cid:2)e), b) iff the
0 are exactly the successor models of

0 |= φ[S0].

iff I (cid:2)

is a successor model of I iff I (cid:2)

3 Possible values and bounded action theories

Although we are assuming that every ﬂuent is functional, and
thus has a single value, we do not assume that this value is
known. For example, to say that the value of the ﬂuent age
in situation S0 might be 19, 20 or 21, D may contain the fol-
lowing disjunction: (age = 19 ∨ age = 20 ∨ age = 21)[S0].
Thus, we say that 19, 20 and 21 are the possible values that

IJCAI-07

2030

the ﬂuent age can take.3 As another example, suppose that
we have the following sentence in D:

(f = 1 ∨ f = 0) ∧ (g = 1 ∨ g = 0) ∧ (f (cid:4)= g)[S0].

In this case, the ﬂuents f and g each have two possible val-
ues. But because of the constraint between them, we should
consider the pair (cid:9)f, g(cid:10) which has two (rather than four) pos-
sible values: (cid:9)1, 0(cid:10) and (cid:9)0, 1(cid:10). More generally, we have the
following deﬁnition:

n

(cid:2)

Deﬁnition 3. Let (cid:2)τ be a tuple of distinct situation-suppressed
primitive ﬂuent terms. A ﬁnite set of constant tuples V =
{ (cid:2)c1, . . . , (cid:2)cn}, each of the same length as (cid:2)τ is the set of possi-
ble values for (cid:2)τ at history h iff V is the smallest set such that
i=1 (cid:2)τ = (cid:2)ci)[end(h)]. Each element of V is a
D ∪ S(h) |= (
possible value of (cid:2)τ at h.
Note that V is the empty set only if D ∪ S(h) is inconsistent.
When we say that a sentence is possibly true, we mean
that it is entailed for some possible value of the ﬂuents in
the sentence, taking into account that some ﬂuents may be
grouped with others because of constraints.

Deﬁnition 4. Let h be a history and let φ be a situation-
suppressed primitive sentence. Let T = { (cid:2)τ1, . . . , (cid:2)τk} be a set
of tuples of situation-suppressed primitive ﬂuent terms such
that every primitive ﬂuent term in φ appears in exactly one (cid:2)τi.
We say that φ is possibly true at history h wrt T iff E |= φ(cid:2),
where φ(cid:2) is φ with each (cid:2)τ ∈ T replaced by one of its possible
values at h. (A tuple (cid:9)τ1, . . . , τn(cid:10) is replaced by (cid:9)c1, . . . , cn(cid:10)
by replacing each term τi by the corresponding ci.)

We say that φ is known to be true at h wrt T iff ¬φ is not

possibly true at h wrt T .

It is not hard to see that a sentence φ is known to be true at
h iff for every possible value of the ﬂuents at h, the substituted
φ(cid:2) obtained is indeed entailed. But this is not the same thing
as saying that φ[end(h)] itself is entailed by D ∪ S(h). This
depends on how we group the ﬂuent terms into tuples.
Example 1. Consider a theory D containing the above sen-
tence about f and g. Let h be the empty history and let φ be
(f (cid:4)= g). Then we have the following:

1. D ∪ S(h) |= φ[end(h)];
2. φ is not known to be true at h wrt {f, g};
3. φ is known to be true at h wrt {(cid:9)f, g(cid:10)}.

What is going on here is that for T = {f, g} we look at
the possible values of f and g independently, including cases
where f = g. For T = {(cid:9)f, g(cid:10)} on the other hand, we only
look at the two possible values for (cid:9)f, g(cid:10), and so rule out the
cases where f = g.

This idea of ﬂuent terms taking values independently is
very much related to the weak disjunctive knowledge prop-
erty deﬁned in [Petrick and Levesque, 2002; Petrick, 2006]
for an epistemic setting of the situation calculus. Our account
here generalizes this idea by allowing tuples of ﬂuent terms.
What we will be proposing in this paper, is a method of
computing progression under incomplete knowledge that uses

3Note that this notion of possibility has an epistemic ﬂavor and
is distinct from the physical possibility of action execution, as char-
acterized by P oss.

the possible values of ﬂuent terms as above. To ensure that
we get a T that correctly captures any constraints among the
ﬂuents, we will restrict the form of the basic action theory.
The main idea behind what we call a bounded action theory
is that D0 will explicitly list the initial possible values of the
ﬂuents according to some grouping T, and that the bodies of
the successor state and sensing-result axioms will be suitable
for specifying a new grouping T (cid:2) such that what is known
about the ﬂuents after some action is performed is accurately
captured by the new grouping T (cid:2).
Deﬁnition 5. Let T = { (cid:2)τ1, . . . , (cid:2)τk} be a set of tuples of
situation-suppressed primitive ﬂuent terms such that every
primitive ﬂuent term appears in exactly one (cid:2)τi. We say that D
is local-effect and bounded by T iff the following all hold:

1. D0 = {α1[S0], . . . , αk[S0]}, where for each i, there is a

(cid:2)

set C of constant tuples such that αi is

(cid:2)c∈C (cid:2)τi = (cid:2)c.

2. Each successor state axiom in Dss has the form
f ((cid:2)x, do(a, s)) = v ≡ γf ((cid:2)x, a, v)[s] ∨

f ((cid:2)x, s) = v ∧ (¬∃v(cid:2))γf ((cid:2)x, a, v(cid:2))[s],

where γf ((cid:2)x, a, v) is a disjunction of formulas γi
((cid:2)x, a, v)
of the form ∃(cid:2)z(a = A((cid:2)y) ∧ ψ((cid:2)y)), (cid:2)y contains (cid:2)x ∪ {v},
(cid:2)z is the remaining variables of (cid:2)y, and ψ is a primitive
formula that is called the context of γi
f

((cid:2)x, a, v).

f

3. Each sensing result axiom in Dsr has the form
sr(A((cid:2)y), s) = r ≡ ΘA((cid:2)y, r)[s], where ΘA((cid:2)y, r) is a
primitive formula.

4. Each precondition axiom in Dap has

the form
P oss(A((cid:2)y), s) ≡ ΠA((cid:2)y)[s], where ΠA((cid:2)y) is a primitive
formula.

5. Each action symbol A is either a sensing action or a
world-changing action and appears exclusively in ex-
actly one SRA or in some SSAs, respectively.

6. If action symbol A appears in γf then it cannot appear

in γg for any ﬂuent g that appears in γf .

Local-effect and bounded action theories have the property
that for any pair of ground action term A((cid:2)e) and sensing re-
sult b, both ΘA((cid:2)e, b) and ΠA((cid:2)e) are primitive sentences and
((cid:2)x, A((cid:2)e), v) is logically equivalent to ((cid:2)x = (cid:2)c ∧ v = d ∧ φ),
γi
f
where (cid:2)c, d are contained in (cid:2)e and φ is a primitive sentence.
These theories are restricted in that if an action A((cid:2)e) changes
the value of a ﬂuent term f ((cid:2)c), then (cid:2)c is contained in the ar-
guments of the action.

4 Progression using databases
Given an action theory D that is local-effect and bounded by
T, we will use a database to represent the possible values for
each τ in T, as a way to capture the models of D0. Then we
will deﬁne a procedure PROG that transforms this database
into one that represents a progression of D0.

We ﬁrst review some basic notions of relational database
theory. Let L be a ﬁrst-order language with a ﬁnite number
of predicate symbols and a ﬁnite number of constant symbols
C. A database instance for the language L is a ﬁrst-order
structure I such that the domain of I is C, = is interpreted

IJCAI-07

2031

φ := DBQ(ΘA((cid:2)e, b))
(cid:2)τ := (cid:2)τ1 · (cid:2)τ2 · · · · · (cid:2)τk,

where R(cid:2)τ1 , . . . , R(cid:2)τk are the relation names in φ

T := T − {(cid:2)τ1, . . . , (cid:2)τk} + {(cid:2)τ }
I0 := I0 − {R(cid:2)τ1 , . . . , R(cid:2)τk

} + {R(cid:2)τ

},

where the extension of R(cid:2)τ is φ(I0)

Figure 1: Progress I0 wrt sensing action A((cid:2)e) and b

as identity, and each constant is interpreted as itself. Let (cid:2)x, (cid:2)y
be tuples of variables. An (cid:2)x-relation over I is a ﬁnite set of
mappings ζ from (cid:2)x into C, which we write as {ζ : [(cid:2)x → C]}.
Let φ be a formula with free variables (cid:2)x = (cid:9)x1, . . . , xn(cid:10). The
answer to φ wrt I is the (cid:2)x-relation

φ(I) = {ζ : [(cid:2)x → C] | I |= φ(ζ(x1), . . . , ζ(xn))}.

Deﬁnition 6. Let L0 be the language that has the constants
in C, and for each (cid:2)τ ∈ T the relation name R(cid:2)τ with arity
|(cid:2)τ |. We deﬁne I0, the database that represents D0, as the
database instance for language L0 such that the interpretation
of each R(cid:2)τ is the set of constant tuples C that appear in the
corresponding α[S0] ∈ D0, in item 1 of Deﬁnition 5.

The following deﬁnition shows how to transform a primi-
tive situation calculus formula φ into a query DBQ(φ) of L0.
We will need to use a set of new variables, and we assume
that there is a mapping ξ from primitive ﬂuent terms to these
variables such that each term is mapped to a distinct variable.

Deﬁnition 7. Let φ be a situation-suppressed primitive for-
mula. Let φ(cid:2) be φ with each primitive ﬂuent term replaced by
the corresponding variable wrt the mapping ξ. Let T (cid:2) ⊆ T
be the smallest set such that (cid:2)τ ∈ T (cid:2) if some element of (cid:2)τ
appears in φ. We deﬁne DBQ(φ) as the formula

(cid:3)

R(cid:2)τ

(ξ((cid:2)τ )) ∧ φ

(cid:2)

(cid:2)τ ∈T (cid:2)

Now, on to progression. Here is how PROG[I0, A((cid:2)e), b]
works when A is a sensing action: The ﬂuents that are af-
fected are those that appear in ΘA((cid:2)e, b). We use the concate-
nation of all the (cid:2)τi ∈ T that mention these ﬂuent terms to
construct a new relation. The tuples in this relation will be
the answers to the query DBQ(ΘA((cid:2)e, b)). The progression
for a world-changing action is more complex. For each ﬂuent
term f ((cid:2)c) that is potentially given value d by action A((cid:2)e) ac-
cording γf , we collect all the (cid:2)τi ∈ T that contain either f ((cid:2)c)
or a ﬂuent term in the context, and we concatenate them to-
gether to make a new (cid:2)τ . We then assign R(cid:2)τ to be the tuple of
all possible values for these terms, using both the new value
d for f ((cid:2)c) when the context is true and the previous values
when the context is false.
Deﬁnition 8. Let I0 be a database, A((cid:2)e) be a ground ac-
tion term, and b be a sensing result. Then the procedure
PROG[I0, A((cid:2)e), b] is deﬁned as follows:

1. if A is a sensing action, then do as in Figure 1;
2. if A is a world-changing action, then use Figure 2.

Now we are ready to present our main result:
Theorem 1 (Progression). Let D be a local-effect action the-
ory that is bounded by T and (A((cid:2)e), b) be an action-sensing

for each f ∈ F do

for each γi
f

((cid:2)x, a, v) in γf ((cid:2)x, a, v) that mentions A do

(cid:2)c := the subset of (cid:2)e that corresponds to (cid:2)x
d := the element of (cid:2)e that corresponds to v
(cid:2)u := the element of T that mentions f ((cid:2)c)
φ+:= R(cid:2)u
((cid:2)x, A((cid:2)e), v))
φ−:= same as φ+ but with context formula negated
Q+ := φ+(I0) but with the column corresponding
to ξ(f ((cid:2)c)) replaced by the value d in all rows

(ξ((cid:2)u)) ∧ DBQ(γi
f

Q− := φ−(I0)
(cid:2)τ := (cid:2)τ1 · (cid:2)τ2 · · · · · (cid:2)τk,

where R(cid:2)τ1 , . . . , R(cid:2)τk are the relation names in φ+

T := T − {(cid:2)τ1, . . . , (cid:2)τk} + {(cid:2)τ }
I0 := I0 − {R(cid:2)τ1 , . . . , R(cid:2)τk

} + {R(cid:2)τ

},

where the extension of R(cid:2)τ is Q+∪ Q−

end for

end for
Figure 2: Progress I0 wrt world-changing action A((cid:2)e)

result pair such that D ∪ S((A((cid:2)e), b)) is consistent. Let I0
be the database that represents D0. Then PROG[I0, A((cid:2)e), b]
represents a progression of D0 wrt (A((cid:2)e), b).

The proof of Theorem 1 follows from the following lemma
and the property of bounded theories listed in item 6 of Def-
inition 5 which implies that the processing of ﬂuents in the
main loop of Figure 2 can be done in any order.

Lemma 2. Let φ be a situation-suppressed primitive sen-
tence. Then, φ is possibly true at the empty history wrt to
T iff there exists a standard model of D0 that satisﬁes φ[S0]
iff DBQ(φ)(I0) is non-empty.

We conclude this section with an example.

Example 2. Consider the following scenario where an agent
lives in a fantasy world of some role playing game. The agent
is trapped inside a dungeon and in order to get out she has
to unlock the main door and climb out. Unfortunately, the
main door can only be unlocked by casting a magical spell.
In particular, the agent has to cast the spell while being in the
same room with a magical orb that is hidden somewhere in
the dungeon, otherwise the spell has no effect. Finally, even
though the agent cannot ﬁnd the magical orb, she knows that
it is hidden somewhere in rooms R1 or R2 of the dungeon.

For simplicity we use three (functional) ﬂuents to represent
this scenario: hero, orb, door which hold the location of the
agent, the location of the orb, and the state of the door respec-
tively. We use two actions: go(y), the agent moves to room
y; cast(y), the agent casts a spell that magically instructs the
door to change to state y. Also, we use the constants Cl, Op
to represent the state of the door (closed, open) and R1, R2
for the two rooms.

Let D be an action theory such that D0 consists of the
sentences door = Cl[S0], (orb = R1 ∨ orb = R2)[S0], and
hero = R1[S0]; Dap consists of precondition axioms such that
Πgo and Πcast are always true; and Dss consists of the SSAs
such that γhero(a, v)[s] is a = go(v), γorb(a, v)[s] is f alse,
and γdoor(a, v)[s] is a = cast(v) ∧ ∃z(hero = z ∧ orb = z).
D is local-effect and bounded by T = {agent, orb, door},
but it is not context-complete. The following ﬁgure shows

IJCAI-07

2032

the database that represents D0 and the transformed database
after applying PROG once for action cast(Op), and after
applying PROG two more times for go(R2) and cast(Op).

hero
R1

door

Cl

orb
R1
R2

hero orb door
R1 R1 Op
R1 R2 Cl

hero orb door
R2 R1 Op
R2 R2 Op

Note that after the three steps of progression the ﬂuent door
has exactly one possible value, Op, as intended.

Finally, to justify concerns about why this approach is bet-
ter than just calculating all the possible worlds, the reader
should imagine there being a large number of ﬂuents with
unknown value (e.g. other doors, objects) for which the data-
base remains unchanged. A more detailed discussion follows.

5 Complexity analysis

We ﬁrst review some results about the complexity of database
queries of a certain form. The guarded fragment GF is the
smallest set of formulas such that any existentially quantiﬁed
sub-formula φ is conjoined with a guard, i.e. an atom contain-
ing all the free variables of φ [Andr´eka et al., 1998]. In [Gott-
lob et al., 2003] GF was extended to the k-guarded fragment
GFk where up to k atoms may jointly act as a guard. When I
is a database of size n such that the domain and all relations
are sorted, and φ ∈ GFk is a formula of size l, then φ(I) can
be computed in time O(lnk) (see [Liu and Levesque, 2003]).
The complexity of PROG(I0, A((cid:2)e), b) is dominated by the
evaluation of database queries of the form DBQ(φ). By
Deﬁnition 7, it follows that DBQ(φ) is a k-guarded for-
mula, where k is the number of relation names that appear
in DBQ(φ). For any theory D, we let the width of D be the
maximum k and the depth of D be the maximum length over
((cid:2)x, a, v) and ΘA((cid:2)y, r) in D. By Deﬁni-
all of the formulas γi
f
tion 8, we get the following:
Theorem 3. Let D be a local-effect action theory that is
bounded by T and (A((cid:2)e), b) be an action-sensing result pair.
Let I0 be the database that represents D0. Then, the complex-
ity of PROG[I0, A((cid:2)e), b] is O(lnk+1), where l is the depth
and k is the width of D, and n is the size of I0.

The tractability of the approach relies on the assumption
that the width of D is often a small constant K. (Note that the
width of D is bounded by what we are calling the depth of D.)
There is also one more issue: As we saw in Example 2, after a
progression step is performed some of the relations in I0 may
be joined together in the updated database and eventually this
can lead to an exponential blow-up of the size of the database.
Nevertheless, we expect that in real-world domains there is
a small upper-bound on the number of primitive ﬂuent terms
that are both unknown and mutually constrained at any his-
tory, and thus need to appear in the same relation in I0. Also
assuming that there is a constant upper-bound for the number
of possible values that a single ﬂuent may have at any history
then the size of the largest relation in I0 is always bounded
by a large constant N .

With the current deﬁnition of PROG, the size of the re-
lations in I0 may not be optimal because ﬂuents that are
known to be true may not be stored in a separate relation,

such as hero in Example 2. This can be avoided by aug-
menting PROG to check, as a ﬁnal step, whether some of the
updated ﬂuents have only one possible value and should be
stored separately. Finally, following the proof of the com-
plexity result about GFk in [Liu and Levesque, 2003], note
that n is the size of the largest relation in I0. Hence, under
the stated assumptions the complexity of PROG[I0, A((cid:2)e), b]
is O(lN K+1), where l is the depth of D, and K, N as above.

6 Related Work

One of the main differences between our approach and most
of the related work in the literature is that we work with
functional ﬂuents. Our intuition is that when it comes to
restricted forms of incomplete knowledge, functional ﬂuents
with possible values are an attractive alternative.
In a for-
malism with relational ﬂuents (such as [Son and Baral, 2001;
Liu and Levesque, 2005]) it is not clear how to handle infor-
mation of the form (age = 19 ∨ age = 20 ∨ age = 21)
without using a general method for unrestricted disjunctions,
which will have computational problems of its own. Our way
of handling the disjunctions by using a database of possible
values is similar to ideas in [Antova et al., 2007] (where, how-
ever, actions and progression are not handled).

One serious limitation of our approach is that we are forced
to represent all the primitive ﬂuent terms in the language.
Also, the theories we are dealing with are essentially propo-
sitional and we insist that an action does not affect both a
ﬂuent and its context. The approach of [Liu and Levesque,
2005] does not suffer from these limitations. Nevertheless,
our progression mechanism is always logically correct, un-
like the weak progression mechanism that is employed by
Liu and Levesque which is logically complete only for the-
ories that are context-complete. An example of the theories
that we can handle better is illustrated at the end of Section 4.
One approach that is very similar in spirit to our own is that
of the FLUX system for implementing ﬂuent calculus theo-
ries [Thielscher, 2004]. FLUX can express incomplete knowl-
edge in the form of ﬁnite domain arithmetic constraints that
are handled by constraint handling rules [Fr¨uhwirth, 1998].
When incomplete knowledge is progressed in FLUX, new
constraints that represent the progression are appended to the
constraint store. When ﬂuents remain unknown and are con-
stantly progressed, the “chain” of stored constraints becomes
larger which, apart from affecting the efﬁciency of reasoning,
can lead to failure due to lack of memory resources. So while
FLUX can be more efﬁcient in computing the progression of a
state after an action has been executed, appending constraints
can be problematic for long-lived agents.

Another similar approach is that of [Funge, 1998], deal-
ing with real-valued functional ﬂuents. Unlike our approach
though, Funge’s does not provide a mechanism for joining
ﬂuents together whenever they are related with some con-
straint. Other related approaches for doing approximate pro-
gression of action theories include (approximate) logical ﬁl-
tering [Amir and Russell, 2003], and the 0-approximation se-
mantics for an extension of the action language A [Son and
Baral, 2001]. Finally, the idea of reasoning with possible val-
ues has been applied in an iterative planner [Levesque, 2005]

IJCAI-07

2033

and in a variant of GOLOG [Sardina and Vassos, 2005].

7 Conclusion

In this paper, we have proposed a new progression mecha-
nism for a restricted form of situation calculus basic action
theories that feature incomplete knowledge and sensing. Our
approach handles theories which are essentially the functional
version of the local-effect action theories [Liu and Levesque,
2005], further restricted so that they are also bounded by a
set of groupings for ﬂuents. We use a large database in or-
der to represent the models of a theory by dealing directly
with the possible values that these groupings of ﬂuents may
have. Our progression mechanism updates the database ac-
cording to how the possible values are affected by both world-
changing and sensing actions. The method we propose is
logically complete and can be calculated efﬁciently using
database techniques under certain reasonable assumptions.

Our current and future work focuses on some of the limi-
tations of our approach. We are investigating alternative for-
malisms for representing D0 so that we avoid listing all prim-
itive ﬂuent terms in the language as well as all the possible
values for each ﬂuent. In particular, we consider the incorpo-
ration of intervals as a way to concisely represent large lists
of possible values and the use of quantiﬁed axioms in D0.
Furthermore, we believe that the local-effect requirement can
be lifted with a small additional cost in the progression mech-
anism. Finally, we want to extend our approach so that it can
handle the evaluation of unrestricted quantiﬁed formulas.

References

[Amir and Russell, 2003] E. Amir and S. Russell. Logical ﬁltering.

In Proc. IJCAI-03, pages 75–82, 2003.

[Andr´eka et al., 1998] H. Andr´eka, J. van Benthem, and I. N´emeti.
Modal languages and bounded fragments of predicate logic.
Journal of Philosophical Logic, 27(3):217–274, 1998.

[Antova et al., 2007] L. Antova, C. Koch, and D. Olteanu. 1010
worlds and beyond: Efﬁcient representation and processing of in-
complete information. In Proc. ICDE-07, Istanbul, Turkey, April
2007. (To appear).

6

[De Giacomo and Levesque, 1999] G. De Giacomo and H. J.
Levesque. An incremental interpreter for high-level programs
with sensing. Logical Foundations for Cognitive Agents: Contri-
butions in Honor of Ray Reiter, pages 86–102, 1999.

[De Giacomo et al., 2001] G. De Giacomo, H. J. Levesque, and
Incremental execution of guarded theories. Com-

S. Sardina.
putational Logic, 2(4):495–525, 2001.

[Fr¨uhwirth, 1998] T. Fr¨uhwirth. Theory and practice of constraint
handling rules. Journal of Logic Programming, Special Issue on
Constraint Logic Programming, 37(1-3):95–138, October 1998.

[Kowalski and Sergot, 1986] R. Kowalski and M. Sergot. A logic-
based calculus of events. New Generation Computing, 4(1):67–
95, 1986.

[Lakemeyer and Levesque, 2007] G. Lakemeyer

J.
Levesque.
In V. Lifschitz,
F. van Harmelen, and F. Porter, editors, Handbook of Knowledge
Representation. Elsevier, 2007. (Forthcoming).

Chapter: Cognitive robotics.

and H.

[Levesque et al., 1997] H. J. Levesque, R. Reiter, Y. Lesp´erance,
F. Lin, and R. B. Scherl. Golog: A logic programming lan-
guage for dynamic domains. Journal of Logic Programming,
31(1-3):59–83, 1997.

[Levesque, 2005] H. J. Levesque. Planning with loops.

In Proc.

IJCAI-05, Edinburgh, Scotland, August 2005.

[Lin and Reiter, 1997] F. Lin and R. Reiter. How to progress a

database. Artiﬁcial Intelligence, 92(1-2):131–167, 1997.

[Lin, 2007] F. Lin. Chapter: Situation calculus.

In V. Lifschitz,
F. van Harmelen, and F. Porter, editors, Handbook of Knowledge
Representation. Elsevier, 2007. (Forthcoming).

[Liu and Levesque, 2003] Y. Liu and H. J. Levesque. A tractabil-
ity result for reasoning with incomplete ﬁrst-order knowledge
bases. In Proc. IJCAI-03, pages 83–88, Acapulco, Mexico, Au-
gust 2003.

[Liu and Levesque, 2005] Y. Liu and H. J. Levesque. Tractable rea-
soning with incomplete ﬁrst-order knowledge in dynamic sys-
tems with context-dependent actions. In Proc. IJCAI-05, Edin-
burgh, Scotland, August 2005.

[McCarthy and Hayes, 1969] J. McCarthy and P. J. Hayes. Some
philosophical problems from the standpoint of artiﬁcial intelli-
gence. Machine Intelligence, 4:463–502, 1969.

[Petrick and Levesque, 2002] R. Petrick and H.

Knowledge equivalence in combined action theories.
KR-02, Toulouse, France, April 2002.

J. Levesque.
In Proc.

[Petrick, 2006] R. Petrick. A knowledge-based representation for
effective acting, sensing, and planning. PhD thesis, University of
Toronto, 2006.

[Reiter, 2001] R. Reiter. Knowledge in Action. Logical Foundations
for Specifying and Implementing Dynamical Systems. MIT Press,
2001.

[Sardina and Vassos, 2005] S. Sardina and S. Vassos. The Wumpus
World in IndiGolog: A Preliminary Report. In Proc. NRAC-05,
pages 90–95, Edinburgh, Scottland, 2005.

[Scherl and Levesque, 2003] R. Scherl and H. J. Levesque. Knowl-
edge, action, and the frame problem. Artiﬁcial Intelligence,
144(1–2):1–39, 2003.

[Son and Baral, 2001] T. C. Son and C. Baral. Formalizing sensing
actions a transition function based approach. Artiﬁcial Intelli-
gence, 125(1-2):19–91, 2001.

[Thielscher, 1999] M. Thielscher. From situation calculus to ﬂu-
ent calculus: State update axioms as a solution to the inferential
frame problem. Artiﬁcial Intelligence, 111(1-2):277–299, July
1999.

[Funge, 1998] J. Funge. Cognitive modeling for computer games.
In AAAI Fall Symposium on Cognitive Robotics, pages 44–51,
Orlando, FL., October 1998.

[Thielscher, 2004] M. Thielscher. FLUX: A logic programming
method for reasoning agents. Theory and Practice of Logic Pro-
graming, 5(4-5):533–565, 2004.

[Gottlob et al., 2003] G. Gottlob, N. Leone, and F. Scarcello. Rob-
bers, marshals, and guards: Game theoretic and logical charac-
terizations of hypertree width. Journal of Computer and System
Sciences, 66(4):775–808, June 2003.

IJCAI-07

2034

