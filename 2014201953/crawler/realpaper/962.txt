Multi-Winner Elections: Complexity of Manipulation,

Control, and Winner-Determination

Ariel D. Procaccia and Jeffrey S. Rosenschein and Aviv Zohar

School of Engineering and Computer Science

The Hebrew University of Jerusalem
{arielpro,jeff,avivz}@cs.huji.ac.il

Abstract

Although recent years have seen a surge of inter-
est in the computational aspects of social choice,
no attention has previously been devoted to elec-
tions with multiple winners, e.g., elections of an
assembly or committee.
In this paper, we fully
characterize the worst-case complexity of manip-
ulation and control in the context of four promi-
nent multi-winner voting systems. Additionally, we
show that several tailor-made multi-winner voting
schemes are impractical, as it is N P-hard to select
the winners in these schemes.

1 Introduction

Computational aspects of voting have been the focus of much
interest, in a variety of ﬁelds. In multiagent systems, the at-
tention has been motivated by applications of well-studied
voting systems1 as a method of preference aggregation. For
instance, Ghosh et al. [1999] designed an automated movie
recommendation system, in which the conﬂicting preferences
a user may have about movies were represented as agents,
and movies to be suggested were selected according to a vot-
ing scheme (in this example there are multiple winners, as
several movies are recommended to the user). In general, the
candidates in a virtual election can be entities such as beliefs
or joint plans [Ephrati and Rosenschein, 1997].

Different aspects of voting rules have been explored
by computer scientists. An issue that has been particu-
larly well-studied is manipulation. The celebrated Gibbard-
Satterthwaite Theorem implies that under any reasonable vot-
ing scheme, there always exist elections in which a voter can
improve its utility by lying about its true preferences. Nev-
ertheless, it has been suggested that bounded-rational agents
may ﬁnd it hard to determine exactly which lie to use, and
thus may give up on manipulations altogether. The ﬁrst to
address this point were Bartholdi, Tovey and Trick [1989a];
Bartholdi and Orlin [1991] later showed that manipulating
Single Transferable Vote (STV) is an N P-complete problem.
Conitzer, Lang and Sandholm [2003] studied a setting where
there is an entire coalition of manipulators. In this setting, the

problem of manipulation by the coalition is N P-complete in
a variety of protocols, even when the number of candidates is
constant.

Another related issue that has received some attention is
the computational difﬁculty of controlling an election. Here,
the authority that conducts the elections attempts to achieve
strategic results by adding or removing registered voters or
candidates. Bartholdi, Tovey and Trick [1992] analyzed the
computational complexity of these (and other) methods of
controlling an election in the Plurality and Condorcet pro-
tocols.

The above discussion implies that computational complex-
ity should be considered when contemplating voting systems
that are seemingly susceptible to manipulation or control. On
the other hand, taking into account computational costs can
also lead to negative results. Some sophisticated voting sys-
tems, designed to satisfy theoretical desiderata, may be too
difﬁcult to use in real-world settings. In other words, there
are voting systems where even determining who won the elec-
tion is an N P-complete problem. Previously known exam-
ples include voting schemes designed by Charles Dodgson2
and Kemeny [Bartholdi et al., 1989b].

Settings where there are multiple winners are inherently
different from their single-winner counterparts. A major con-
cern when electing an assembly, for example, might be pro-
portional representation:
the proportional support enjoyed
by different factions should be accurately represented in the
structure of the assembly. In practice, this usually means that
the percentage of votes secured by a party is roughly propor-
tional to the number of seats it is awarded.

Some simple multi-winner rules do not guarantee propor-
tional results; these rules include Single Non-Transferable
Vote (SNTV), Bloc voting, Approval, and Cumulative vot-
ing. More recently, intriguing theoretical voting schemes
have been devised with the goal of guaranteeing proportional
representation. Two such schemes that have received atten-
tion were proposed, respectively, by Monroe [1995], and by
Chamberlin and Courant [1983].

In this paper, we augment the classical problems of ma-
nipulation and control by introducing multiple winners, and
study these problems with respect to four simple but impor-

1We use the terms “voting schemes”, “voting rules”, “voting sys-

2Better known as Lewis Carroll, author of “Alice’s Adventures

tems”, and “voting protocols” interchangeably.

in Wonderland”.

IJCAI-07

1476

tant multi-winner voting schemes: SNTV, Bloc voting, Ap-
proval, and Cumulative voting; we ﬁnd that Cumulative vot-
ing is computationally resistant to both manipulation and con-
trol. In addition, we characterize the computational complex-
ity of winner determination in some of the intriguing voting
schemes that have been suggested in recent years by political
scientists.

2 Multi-Winner Voting Schemes
In this section we discuss several multi-winner voting sys-
tems of signiﬁcance. Although the paper is self-contained,
interested readers can ﬁnd more details in [Brams and Fish-
burn, 2002].

Let the set of voters be V = {v1, v2, . . . vn}; let the set
of candidates be C = {c1, c2, . . . cm}. Furthermore, assume
that k ∈ N candidates are to be elected.

We ﬁrst present four simple voting schemes; in all four, the
candidates are given points by the voters, and the k candidates
with the most points win the election. The schemes differ in
the way points are awarded to candidates.

• Single Non-Transferable Vote (SNTV): each voter gives

one point to a favorite candidate.

• Bloc voting: each voter gives one point to each of k can-

didates.

• Approval voting: each voter can approve or disapprove
any candidate; an approved candidate is awarded one
point, and there is no limit to the number of candidates
a voter can approve.

• Cumulative voting: allows voters to express intensities
of preferences, by asking them to distribute a ﬁxed num-
ber of points among the candidates. Cumulative vot-
ing is especially interesting, since it encourages minority
representation and maximizes social welfare [Brams and
Fishburn, 2002].

2.1 Fully Proportional Representation
We now describe two theoretical voting schemes that attempt
to achieve the ideal of fully proportional representation.

We begin by specifying Monroe’s pure scheme [Monroe,
1995]. For each voter v and candidate c, a misrepresentation
value μvc is known;3 this value characterizes the degree to
which candidate c misrepresents voter v.

Let S = {S ⊆ C : |S| = k}, the set of all possible subsets
of k winners. Let S ∈ S, and let fS : V → S be a function
that assigns voters to candidates in S. The misrepresentation
score of voter v under fS is μvfS (v). The total misrepresenta-
tion of assignment fS is

(cid:2)
v∈V μvfS (v).

Monroe requires that fS be restricted so that a similar num-
ber of voters be assigned to each candidate in S.
In other
words, each candidate in S must be assigned at least (cid:5)n/k(cid:6)
voters. We say that such an assignment is balanced. The mis-
representation score of S is the misrepresentation score of fS,

3The misrepresentation values μvc may be naturally derived
from ballots cast by the electorate, but we do not go into details as
to exactly how this can be done. In any case, it is logical to assume
that μvc ∈ {0, 1, . . . , m}, and we make this assumption throughout
the paper.

where fS : V → S is the assignment with the minimal mis-
representation, subject to the above restriction. The k winners
are the set S ∈ S with the lowest misrepresentation score.

Chamberlin and Courant [1983] adopt a similar approach;
as before, one considers sets S ∈ S and assignments fS.
However, Chamberlin and Courant impose no restrictions on
the assignments. Therefore, each set S is associated with the
assignment fS : V → S that minimizes misrepresentation
among all possible assignments. To maintain proportional-
ity, Chamberlin and Courant compensate by using weighted
voting in the assembly.

3 Manipulation

A voter is considered to be a manipulator, or is said to vote
strategically, if the voter reveals false preferences in an at-
tempt to improve its outcome in the election. Settings where
manipulation is possible are to be avoided, as many voting
protocols are designed to maximize social welfare, under
the assumption that voters reveal their intentions truthfully.
Therefore, computational resistance to manipulation is con-
sidered an advantage.

In the classical formalization of the manipulation prob-
lem [Bartholdi et al., 1989a], we are given a set C of candi-
dates, a set V of voters, and a distinguished candidate p ∈ C.
We also have full knowledge of the voters’ votes. We are
asked whether it is possible to cast an additional vote, the
manipulator’s ballot, in a way that makes p win the election.
When generalizing this problem for the k-winner case, sev-
eral formulations are possible. For example, one can ask
whether some candidate can be one of the k-winners, or
whether it is possible to ensure that a complete set of k win-
ners be elected. We adopt a more general formulation.

(cid:2)

Deﬁnition 1. In the MANIPULATION problem, we are given
a set C of candidates, a set V of voters that have already cast
their vote, the number of winners k ∈ N, a utility function
u : C → Z, and an integer t ∈ N. We are asked whether
the manipulator can cast its vote such that in the resulting
c∈W u(c) ≥ t, where W is the set of winners,
election:
|W | = k.
Remark 1. We make the standard assumption that tie-
breaking is adversarial to the manipulator [Conitzer and
Sandholm, 2002; Conitzer et al., 2003], i.e., if there are sev-
eral candidates that perform equally well in the election, the
ones with the lower utility will be elected.

Proposition 1. MANIPULATION in SNTV, Bloc voting, and
Approval is in P.

Proof. Simple and efﬁcient algorithms exist for MANIPU-
LATION in these three protocols; omitted due to lack of
space.

Proposition 2. MANIPULATION in Cumulative voting is
N P-complete.

The proof relies on a reduction from one of the most well-

known N P-complete problems, the KNAPSACK problem.
Deﬁnition 2. In the KNAPSACK problem, we are given a
set of items A = {a1, . . . , an}, for each a ∈ A a weight

IJCAI-07

1477

w(a) ∈ N and a value υ(a), a capacity b ∈ N, and t ∈ N.
(cid:2)
We are asked whether there is a subset A(cid:3) ⊆ A such that

(cid:2)
a∈A(cid:2) w(a) ≤ b.

a∈A(cid:2) υ(a) ≥ t while

Proof of Proposition 2. The problem is clearly in N P.

To see that MANIPULATION in cumulative voting is N P-
hard, we prove that KNAPSACK reduces to this problem. We
are given an input (cid:9)A, w, υ, b, t(cid:10) of KNAPSACK, and construct
an instance of MANIPULATION in Cumulative voting as fol-
lows.

Let n=|A|. There are 2n voters: V = {v1, . . . , v2n}, 3n
candidates: C = {c1, . . . , c3n}, and n winners. In addition,
each voter may distribute b points among the candidates. We
want the voters in V to cast their votes in a way that the fol-
lowing three conditions are satisﬁed:

1. For j = 1, . . . , n, cj has b − w(aj ) + 1 points.
2. For j = n + 1, . . . , 2n, cj has at most b points.
3. For j = 2n + 1, . . . , 3n, cj has exactly b points.
This can easily be done. Indeed, for i = 1, . . . , n, voter
vi awards b − w(ai) + 1 points to candidate ci, and awards
its remaining w(ai) − 1 points to candidate cn+i. Now, for
i = 1, . . . , n, voter n + i awards all its b points to candidate
2n + i.

We deﬁne the utility u of candidates as follows:

(cid:3)

u(cj) =

υ(aj)
0

j = 1, . . . , n
j = n + 1, . . . , 3n

The transformation is clearly polynomial, so it only re-
mains to verify that it is a reduction. Assume that there is
a subset A(cid:3) ⊆ A with total weight at most b and total value
at least t. Let C = {cj : aj ∈ A(cid:3)}. The manipulator awards
w(aj ) points to each candidate c ∈ C (cid:3), raising the total score
of these candidates to b+1. Since initially all candidates have
at most b points, all candidates c ∈ C (cid:3) are among the n win-
(cid:2)
(cid:2)
ners of the election. The total utility of these candidates is:
a∈A(cid:2) υ(a) ≥ t (since for all j = 1, . . . , n,
c∈C (cid:2) u(c) =
u(cj) = υ(aj)).

In the other direction, assume that the manipulator is able
to distribute b points in a way that the winners of the elec-
tion have total utility at least t. Recall that there are initially
at least n candidates with b points and utility 0, and that ties
are broken adversarially to the manipulator. Therefore, there
must be a subset C (cid:3) ⊆ C of candidates that ultimately have
a score of at least b + 1, such that their total utility is at least
t. Let A(cid:3) be the corresponding items in the KNAPSACK in-
stance, i.e., aj ∈ A(cid:3) iff cj ∈ C (cid:3). The total weight of items
in A(cid:3) is at most b, as only b points were distributed among
the candidates in C (cid:3) by the manipulator, and each cj ∈ C (cid:3)
initially has b − w(aj ) + 1 points. It also holds that the to-
tal utility of the items in A(cid:3) is exactly the total utility of the
candidates in C (cid:3), namely at least t.

4 Control

Some voting protocols can be controlled by the authority
conducting the election, which we refer to as the chairman,
in the sense that the chairman can change the election’s re-
sults. Some types of control available to the chairman are

adding “spoiler” candidates, disqualifying candidates, regis-
tering new voters, or removing voters that were already reg-
istered. A study of these issues in the context of two well-
known voting protocols was reported by Bartholdi, Tovey and
Trick [1992], who found that control by adding and deleting
candidates is N P-hard even in the simple Plurality4 protocol.
Moreover, in most cases the complexity of deleting voters is
identical to that of adding voters. Therefore, we focus here-
inafter on control by adding voters.

The following formulation of the control (by adding voters)
problem appeared in [Bartholdi et al., 1992]: we are given a
set C of candidates and a distinguished candidate p ∈ C; a
set V of registered voters, and a set V (cid:3) of voters that could
register in time for the election. We are also given r ∈ N,
and have full knowledge of the voters’ votes. We are asked
whether it is possible to register at most r voters from V (cid:3) in a
way that makes p win the election.

As in the case of manipulation, we generalize this deﬁni-

tion for our multi-winner setting:
Deﬁnition 3. In the CONTROL problem, we are given a set C
of candidates, a set V of registered voters, a set V (cid:3) of unregis-
tered voters, the number of winners k ∈ N, a utility function
u : C → Z, the number of winners we are allowed to reg-
ister r ∈ N, and an integer t ∈ N. We are asked whether it
is possible to register at most r voters from V (cid:3) such that in
c∈W u(c) ≥ t, where W is the set of
the resulting election,
winners, |W | = k.
Remark 2. Again, we assume that ties are broken adversari-
ally to the chairman.

(cid:2)

Proposition 3. CONTROL in Bloc voting, Approval, and Cu-
mulative voting is N P-complete.

Proof. By reduction from MAX k-COVER;5 omitted due to
lack of space.

Proposition 4. CONTROL in SNTV is in P.

Proof. We describe an algorithm, CONTROL-SNTV, that ef-
ﬁciently decides CONTROL in SNTV. Informally, the algo-
rithm works as follows. It ﬁrst calculates the number of points
awarded to candidates by voters in V . Then, at each stage,
the algorithm analyzes an election where the l top winners
in the original election remain winners, and attempts to se-
lect the other k − l winners in a way that maximizes utility.
This is done by setting the threshold to be one point above the
score of the (l + 1)-highest candidate; the algorithm pushes
the scores of potential winners to this threshold.

A formal description of CONTROL-SNTV is given as Al-
gorithm 1. The procedure PUSH works as follows: its ﬁrst
parameter is the threshold thr, and its second parameter is
the number of candidates to be pushed, pushN um. The pro-
cedure also has implicit access to the input of CONTROL-
SNTV, namely the parameters of the given CONTROL in-
stance. PUSH returns a subset V (cid:3)(cid:3) ⊆ V (cid:3) to be registered. We
say that the procedure pushes a candidate c to the threshold

4The Plurality protocol is identical to SNTV, when there is a sin-

gle winner.

5See [Feige, 1998] for a deﬁnition and analysis of this problem.

IJCAI-07

1478

Algorithm 1 Decides the CONTROL problem in SNTV.
1: procedure CONTROL-SNTV(C, V, V (cid:3), k, u, r, t)
2:
3:

s[c] ← |{v ∈ V : v votes for candidate c}|
Sort candidates by descending score (cid:3) Break ties by

ascending utility

Let the sorted candidates be {ci1 , . . . , cim
for l = 0, . . . , k do

}

V (cid:3)(cid:3) ←PUSH(s[cl+1] + 1, k − l)

(cid:3) Fix l top winners
(cid:3) Select other

4:
5:
6:

7:

winners; see details below

ul ← utility from election where V (cid:3)(cid:3) are regis-

tered

end for
if maxl ul ≥ t then return true
else

8:
9:
10:
11:
12:
13: end procedure

end if

return false

if exactly thr − s[c] voters v ∈ V (cid:3) that vote for c are regis-
tered. In other words, the procedure registers enough voters
from V (cid:3) in order to ensure that c’s score reaches the thresh-
(cid:2)
old. PUSH ﬁnds a subset C (cid:3) of candidates of size at most
c∈C u(c), under the restriction
pushN um that maximizes
that all candidates in C (cid:3) can be simultaneously pushed to the
threshold by registering a subset V (cid:3)(cid:3) ⊆ V (cid:3) s.t. V (cid:3)(cid:3) ≤ r. The
procedure returns this subset V (cid:3)(cid:3).

Now, assume we have a procedure PUSH that is always
correct (in maximizing the utility of at most k − l candidates
it is able to push to the threshold s[cl+1] + 1, while regis-
tering no more than r voters) and runs in polynomial time.
Clearly, CONTROL-SNTV also runs in polynomial time. Fur-
thermore:

Lemma 1. CONTROL-SNTV correctly decides the CON-
TROL problem in SNTV.

, . . . , c∗
jk

} be the k winners of the elec-
Proof. Let W = {cj1, . . . , cjk
tion that does not take into account the votes of voters in
V (cid:3) (the original election), sorted by descending score, and
for candidates with identical score, by ascending utility. Let
W ∗ = {c∗
} be the candidates that won the con-
j1
trolled election with the highest utility, sorted by descending
score, then by ascending utility; let s∗[c] be the ﬁnal score of
candidate c in the optimal election. Let min be the smallest
/∈ W ∗ (w.l.o.g. min exists). It holds
index such that cjmin
that for all candidates c ∈ W ∗, s∗[c] ≥ s[cjmin
]. Now, we
can assume w.l.o.g. that if c ∈ W ∗ and s∗[c] = s[cjmin
] then
c ∈ W (and consequently, c = cjq for some q < min). In-
deed, it must hold that u[c] ≤ u[cjmin
] (as tie-breaking is ad-
versarial to the chairman), and if indeed c /∈ W even though
c ∈ W ∗, then the chairman must have registered voters that
vote for c, although this can only lower the total utility.

It is sufﬁcient to show that one of the elections that is con-
sidered by the algorithm has a set of winners with utility at
least that of W ∗. Indeed, let W (cid:3) = {cj1, . . . , cjmin−1} ⊆ W ;
all other k − min + 1 candidates c ∈ W ∗ \ W (cid:3) have
s[c] ≥ s[cjmin
] + 1. The algorithm considers the election
where the ﬁrst min − 1 winners, namely W (cid:3), remain ﬁxed,

and the threshold is s[cjmin
] + 1. Surely, it is possible to push
all the candidates in W ∗ \ W (cid:3) to the threshold, and in such
an election, the winners would be W ∗. Since PUSH maxi-
mizes the utility of the k − min + 1 candidates it pushes to
the threshold, the utility returned by PUSH for l = min − 1 is
at least as large as the total utility of the winners in W ∗.

and b2

It remains to explain why the procedure PUSH can be im-
plemented to run in polynomial time. Recall the KNAPSACK
problem; a more general formulation of the problem is when
there are two resource types. Each item has two weight mea-
sures, w1(ai) and w2(ai), and the knapsack has two capaci-
ties: b1
. The requirement is that the total resources of
the ﬁrst type used do not exceed b1
, and the total resources
of the second type do not exceed b2
. This problem, which
often has more than two dimensions, is called MULTIDIMEN-
SIONAL KNAPSACK. PUSH essentially solves a special case
of the two-dimensional knapsack problem, where the capaci-
ties are b1 = r (the number of voters the chairman is allowed
to register), and b2 = pushN um (the number of candidates
to be pushed). If the threshold is thr, for each candidate cj
that is supported by at least thr − s[cj] voters in V (cid:3), we set
w1(aj) = thr − s[cj], w2(aj) = 1, and υ(aj) = u(cj). The
MULTIDIMENSIONAL KNAPSACK problem can be solved in
time that is polynomial in the number of items and the ca-
pacities of the knapsack [Kellerer et al., 2004] (via dynamic
programming, for example). Since in our case the capacities
are bounded by m and |V (cid:3)|, PUSH can be designed to run in
polynomial time.

5 Winner Determination

Some complex voting schemes are designed to be theoret-
ically appealing in the sense that they satisfy some strict
desiderata. Unfortunately, it might be the case that an attrac-
tive voting scheme is so complicated that even identifying the
winners is an N P-hard problem. This is a major issue, espe-
cially when one considers using such a protocol for real-life
elections, as elections of this kind might always need to be re-
solved within a reasonable time frame.6 Notice that in SNTV,
Bloc Voting, Approval, and Cumulative Voting, it is clearly
easy to tell who the winners are. In this section, however, we
focus on the complex schemes introduced in Section 2.1.

Deﬁnition 4. In the WINNER-DETERMINATION problem,
we are given the set of voters V , the set of candidates C,
the number of winners k ∈ N, misrepresentation values
μvc ∈ {0, 1, . . . , m}, and t ∈ N. We are asked whether there
exists a subset S ⊆ C such that |S| = k, with misrepresenta-
tion at most t.

Remark 3. Determining the set of winners is clearly harder
than the above decision problem, as the set of winners mini-
mizes misrepresentation.

6Thus the negative repercussions of a winner determination
scheme being N P-hard are even more pronounced than the positive
repercussions of manipulation being N P-hard; in the latter case a
voting scheme might, unacceptably, still be susceptible to manipu-
lation in the average case [Procaccia and Rosenschein, 2006].

IJCAI-07

1479

Remark 4. For ease of exposition, we shall assume that n/k
is an integer. This does not limit the generality of our results,
as otherwise it is possible to pad the electorate with voters v
such that μvc = 0 for all c ∈ C.
Theorem 5. The WINNER-DETERMINATION problem in
Monroe’s scheme and in the Chamberlin-Courant scheme is
N P-complete, even when the misrepresentation values are
binary.

Proof. By reduction from MAX k-COVER; omitted due to
lack of space.

Our hardness results relied on the implicit assumption
that the number of winners k is not constant (in the pre-
In the context of the WINNER-
vious sections as well).
DETERMINATION problem, we are also interested in a setting
where the number of winners is constant, as this is sometimes
the case in real-life elections: the electorate grows, but the
size of the parliament remains ﬁxed.
Proposition 6. When the number of winners satisﬁes k =
O(1), the WINNER-DETERMINATION problem in Monroe’s
scheme and in the Chamberlin-Courant scheme is in P.

Proof. Clearly the WINNER-DETERMINATION problem in
the Chamberlin-Courant scheme can be solved efﬁciently
when k = O(1), as the size of the set S, the set of subsets
of candidates with size k, is polynomial in m. For a given
S ∈ S, ﬁnding the assignment fS that minimizes misrepre-
sentation in this scheme is simple: each voter v is assigned to
argminc∈Cμvc.

In Monroe’s scheme, by a similar consideration, it is suf-
ﬁcient to produce a procedure that efﬁciently computes the
misrepresentation score of every S ∈ S, i.e., ﬁnds a balanced
assignment that minimizes misrepresentation in polynomial
time.

We analyze a procedure that maintains at each stage a bal-
anced assignment, and iteratively decreases misrepresenta-
tion.7 Changes in the assignment are introduced by cycli-
cally right-shifting (c.r.s.) sets of voters: each voter in a set
} is shifted to the candidate that is as-
A = {vi1 , vi2 , . . . , vil
signed to its successor; the assignment remains balanced as
the last voter is assigned to the ﬁrst candidate. In more detail,
if the current assignment is fS, the algorithm singles out a
}, l ≤ k, and modiﬁes the
set of voters A = {vi1 , vi2 , . . . , vil
assignment by deﬁning the next assignment f (cid:3)

S as follows:

)

vi = vid
vi /∈ A

∈ A

(1)

(cid:3)
fS(vid+1(mod l)
fS(vi)

S(vi) =
f (cid:3)

The procedure is formally described in Algorithm 2.

It
terminates after at most nm repetitions of the iterative step:
at each iteration, the total misrepresentation decreases by at
least 1, since the μvc are integers. On the other hand, the
total misrepresentation cannot decrease below 0, and is ini-
tially at most n · maxv,c μvc ≤ nm. Moreover, the iterative
step of the algorithm can be calculated efﬁciently: since k is

7It is also possible to derive an efﬁcient algorithm by applying bi-
partite matching algorithms to an appropriate graph, but the solution
given here is self-contained.

Algorithm 2 Finds a balanced assignment that minimizes
misrepresentation.
1: procedure ASSIGN(S)
2:

fS ← arbitrary assignment of n/k voters to each can-

didate in S

3:
4:

5:

loop

if ∃A ⊆ V s.t. |A| ≤ k ∧ c.r.s. A strictly de-

creases misrepresentation then

update fS by performing the shift

(cid:3)

According to Equation (1)

return fS

else

6:
7:
8:
9:
10: end procedure

end if
end loop

constant, the number of possible cycles of length at most k is
polynomial in n. We have that the complexity of WINNER-
SELECTION in Monroe’s scheme is polynomial — provided
we are able to show that the procedure works!

Lemma 2. ASSIGN returns an optimal assignment.

Proof. Consider a scenario where the procedure reaches the
iterative step, but the current assignment is not optimal. We
must show that the algorithm does not terminate at this point.
S : V → S be a ﬁxed optimal assignment. We
Indeed, let f ∗
consider the voters v such that fS(v) = f ∗
S(v) to be placed,
and the other voters to be misplaced. Assume without loss of
generality that f ∗
S minimizes the number of misplaced voters
among all optimal assignments.

We claim that there is a set of l ≤ k voters that can be
cyclically right-shifted in a way that places all l voters. Let
vi1 be a misplaced voter.
In order to place it, it has to be
S(vi1 ). Thus, one of the voters that
assigned to the candidate f ∗
fS assigns to f ∗
S(vi1 ) must be misplaced, otherwise fS is not
balanced; call this voter vi2 . vi2 can be placed by uprooting
a voter vi3 assigned to f ∗
S(vi2 ). Iteratively repeating this line
of reasoning, there must at some stage be a voter vid(cid:2) , d(cid:3) ≤ k,
) for some d < d(cid:3); this is true,
such that f ∗
since there are only k distinct candidates in S. Hence, the
} can be cyclically right-shifted in
voters {vid
a way that places all d(cid:3) − d + 1 = l ≤ k voters.

) = fS(vid

, . . . , vid(cid:2)

S(vid(cid:2)

, vid+1

For any set of voters that can be placed by cyclic right-
shifting, the shift must strictly decrease misrepresentation.
Otherwise, by cyclically left-shifting the same set in f ∗
S, we
can obtain a new optimal and balanced assignment, in which
more voters are placed compared to f ∗
S; this is a contradiction
to our assumption that f ∗
S minimizes the number of misplaced
voters.

It follows that there must be a set of at most k voters such
that cyclically right-shifting the set strictly decreases the mis-
representation. Therefore, the procedure does not terminate
prematurely.

The proof of Proposition 6 is completed.

IJCAI-07

1480

In...
SNTV
Bloc
Approval
Cumulative

MANIPULATION CONTROL

P
P
P

N P-c

P

N P-c
N P-c
N P-c

Table 1: The computational difﬁculty of Manipulation and
Control in multi-winner protocols.

6 Conclusions

Table 1 summarizes the complexity of manipulation and con-
trol,8 with respect to four protocols: SNTV, Bloc voting, Ap-
proval voting, and Cumulative voting. Of the four protocols,
the only one that is computationally resistant to both manip-
ulation and control is Cumulative voting. This protocol also
has other advantages: it allows voters to express the intensi-
ties of their preferences, and encourages proportional results
(albeit, without guaranteeing them). Therefore, Cumulative
voting seems especially suitable as a method to aggregate
agents’ preferences.

One must remember in this context that N P-hardness may
not be a good enough guarantee of resistance to manipulation
or control: an N P-hard problem has an inﬁnite number of
hard instances, but it may have many more easy instances. In-
deed, Procaccia and Rosenschein [2006] show that a speciﬁc
family of voting protocols is susceptible to coalitional ma-
nipulation in the average-case, although the problem is hard
in the worst-case. Nevertheless, N P-hardness of manipula-
tion or control should certainly be a consideration in favor of
adopting some voting protocol.

While high complexity of manipulation or control in a
voting scheme is interpreted positively, high complexity of
winner determination is a major consideration against the
scheme, and may in fact preclude its use in real-life set-
tings. Winner determination is N P-complete with respect
to the theoretical voting schemes proposed by Monroe, and
by Chamberlin and Courant. Monroe’s scheme has received
some attention in recent years.
In particular, it has been
shown that an election can be resolved with integer program-
ming [Potthoff and Brams, 1998]. Unfortunately, solving an
integer program is still difﬁcult; this formulation does not
even guarantee an efﬁcient solution when the number of win-
ners is constant. Such a solution is, however, given by Propo-
sition 6. This implies that it is perhaps possible to use the
scheme in settings where the size of the assembly is very
small compared to the size of the electorate.

7 Acknowledgment

This work was partially supported by grant #039-7582 from
the Israel Science Foundation.

References
[Bartholdi and Orlin, 1991] J. Bartholdi and J. Orlin. Single
transferable vote resists strategic voting. Social Choice
and Welfare, 8:341–354, 1991.

8Speciﬁcally, control by adding voters.

[Bartholdi et al., 1989a] J. Bartholdi, C. A. Tovey, and M. A.
Trick. The computational difﬁculty of manipulating an
election. Social Choice and Welfare, 6:227–241, 1989.

[Bartholdi et al., 1989b] J. Bartholdi, C. A. Tovey, and M. A.
Trick. Voting schemes for which it can be difﬁcult to tell
who won the election. Social Choice and Welfare, 6:157–
165, 1989.

[Bartholdi et al., 1992] J. Bartholdi, C. A. Tovey, and M. A.
Trick. How hard is it to control an election. Mathematical
and Computer Modelling, 16:27–40, 1992.

[Brams and Fishburn, 2002] S. J. Brams and P. C. Fishburn.
Voting procedures. In K. J. Arrow, A. K. Sen, and K. Suzu-
mura, editors, Handbook of Social Choice and Welfare,
chapter 4. North-Holland, 2002.

[Chamberlin and Courant, 1983] J. R. Chamberlin and P. N.
Courant. Representative deliberations and representative
decisions: Proportional representation and the Borda rule.
American Political Science Review, 77(3):718–733, 1983.

[Conitzer and Sandholm, 2002] V. Conitzer and T. Sand-
holm. Complexity of manipulating elections with few can-
didates. In Proceedings of the National Conference on Ar-
tiﬁcial Intelligence, pages 314–319, Edmonton, Canada,
July 2002.

[Conitzer et al., 2003] V. Conitzer, J. Lang, and T. Sand-
holm. How many candidates are needed to make elec-
tions hard to manipulate?
In Proceedings of the Inter-
national Conference on Theoretical Aspects of Reasoning
about Knowledge, pages 201–214, Bloomington, Indiana,
2003.

[Ephrati and Rosenschein, 1997] Eithan Ephrati and Jef-
frey S. Rosenschein. A heuristic technique for multia-
gent planning. Annals of Mathematics and Artiﬁcial In-
telligence, 20:13–67, Spring 1997.

[Feige, 1998] U. Feige. A threshold of lnn for approximating

set cover. Journal of the ACM, 45(4):634–652, 1998.

[Ghosh et al., 1999] S. Ghosh, M. Mundhe, K. Hernandez,
and S. Sen. Voting for movies: the anatomy of a recom-
mender system. In Proceedings of the Third Annual Con-
ference on Autonomous Agents, pages 434–435, 1999.

[Kellerer et al., 2004] H. Kellerer, U. Pferschy,

and

D. Pisinger. Knapsack Problems. Springer, 2004.

[Monroe, 1995] B. L. Monroe. Fully proportional represen-
tation. American Political Science Review, 89(4):925–940,
1995.

[Potthoff and Brams, 1998] R. F. Potthoff and S. J. Brams.
Proportional representation: Broadening the options.
Journal of Theoretical Politics, 10(2), 1998.

[Procaccia and Rosenschein, 2006] A. D. Procaccia and J. S.
Rosenschein.
Junta distributions and the average-case
complexity of manipulating elections. In Proceedings of
the Fifth International Joint Conference on Autonomous
Agents and Multi-Agent Systems, pages 497–504, 2006.

IJCAI-07

1481

