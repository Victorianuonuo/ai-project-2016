Exploiting Independence in a Decentralised and

Incremental Approach of Diagnosis

Marie-Odile Cordier

University of Rennes1 / Irisa

Rennes – France
cordier@irisa.fr

Alban Grastien∗

National ICT Australia
Canberra – Australia

alban.grastien@nicta.com.au

Abstract

It is well-known that the size of the model is
a bottleneck when using model-based approaches
to diagnose complex systems. To answer this
problem, decentralised/distributed approaches have
been proposed. Another problem, which is far less
considered, is the size of the diagnosis itself. How-
ever, it can be huge enough, especially in the case
of on-line monitoring and when dealing with un-
certain observations. We deﬁne two independence
properties (state and transition-independence) and
show their relevance to get a tractable represen-
tation of diagnosis in the context of both decen-
tralised and incremental approaches. To illustrate
the impact of these properties on the diagnosis size,
experimental results on a toy example are given.

1 Introduction
We are concerned with the diagnosis of discrete-event sys-
tems [Cassandras and Lafortune, 1999] where the system be-
haviour is modeled by automata. This domain is very active
since the seminal work by [Sampath et al., 1996]. Its aim is to
ﬁnd what happened to the system from existing observations.
A classical formal way of representing the diagnosis prob-
lem is to express it as the synchronised product of the system
model automaton and an observation automaton. This formal
deﬁnition hides the real problem which is to ensure an efﬁ-
cient computation of the diagnosis when both the system is
complex and the observations possibly uncertain.

It is now well-known that the size of the system model
is a bottleneck when using model-based approaches to di-
agnose complex systems. To answer this problem, decen-
tralised/distributed approaches have been proposed [Pencol´e
and Cordier, 2005; Lamperti and Zanella, 2003; Benveniste
et al., 2005; Jiroveanu and Bo¨el, 2005]. Instead of being ex-
plicitly given, the system model is described through its com-
ponent models in a decentralised way. The global diagnosis
is computed by merging local diagnoses in order to take into
account the synchronisation events which express the depen-
dency relation which may exist between the components.

∗This work was mainly made when the author was Ph.D student

at University of Rennes1/Irisa, Rennes, France.

A problem, which is far less considered, is the size of
the diagnosis itself. However, it can also be a problem, es-
pecially when dealing with a long-lasting ﬂow of uncertain
observations as remarked in [Lamperti and Zanella, 2003].
We deﬁne in this paper two independence properties (state-
independence and transition-independence) and show that
they make it possible to get a decentralised representation of
the diagnosis without any loss of information. When the di-
agnosis is performed on a long-lasting temporal window, the
transition independence property, which expresses the con-
currence between subsystems, has little chance of being satis-
ﬁed. The idea then is to slice the diagnosis period into smaller
periods and to compute the diagnosis in an incremental way.
The problem which appears is that the slicing generally re-
moves the state-independence property. The solution we ﬁ-
nally propose is to enrich the representation with an abstract
description of the diagnosis trajectories and show that it al-
lows us to keep the beneﬁts of the transition-independence
based decentralised representation.

After preliminaries in Section 2, two independence prop-
erties (state and transition-independence) on automata are
deﬁned in Section 3.
In Section 4, the decentralised ap-
proach is proposed and the decisive role played by the state-
independence property in the diagnosis computation is high-
lighted. Then it is shown how to take advantage of the
transition-independence property to get an efﬁcient represen-
tation of the diagnoses. The incremental computation and the
use of an abstract representation is considered in Section 5.
To illustrate the impact of our proposal on the diagnosis size,
experimental results on a toy example are given in Section 6.

2 Preliminaries
We suppose in this paper that the behavioural models are de-
scribed by automata. We thus begin by giving some deﬁni-
tions concerning automata (see [Cassandras and Lafortune,
1999]). Then, we recall the diagnosis deﬁnitions and state
some hypotheses.

2.1 Automata, synchronisation and restriction
An automaton is a tuple (Q, E, T, I, F ) where Q is the set
of states, E the set of events, T the set of transitions (q, l, q(cid:2))
with l ⊆ E, and I and F the sets of initial and ﬁnal states.
For each state q ∈ Q, (q, ∅, q) ∈ T .

IJCAI-07

292

A trajectory is a path in the automaton joining an initial
state to a ﬁnal state. The set of trajectories of an automaton
A is denoted Traj(A).
In the following, we consider trim
automata. The trim operation transforms an automaton by
removing the states that do not belong to any trajectory.
Example: Let us consider the ﬁrst trim automaton in Fig-
ure 1. The initial states are represented by an arrow with no
origin state, and the ﬁnal states by a double circle. Then,
1

{c3}−→ 4 ∅−→ 4 is a trajectory.

{a2,c1}−→ 3

{a1}−→ 3

A1

c1

1(cid:2)

b2

1

2

3(cid:2)

2(cid:2)

a2, c1
a1

3

c2

b1

c2

5(cid:2)

4(cid:2)

c2

c3

5

4

c2

6(cid:2)

a1

6

A2

a2, c1

33(cid:3)

b1

35(cid:3)

A1 ⊗ A2

11(cid:3)

a1

31(cid:3)

b2

a1, b2

b2

12(cid:3)

a1

32(cid:3)

c2

a1

54(cid:3)

c2

a1

56(cid:3)

66(cid:3)

64(cid:3)

Figure 1: Two automata and their synchronisation

The synchronisation operation on two automata A1 and
A2 builds the trim automaton where all the trajectories of
both automata which cannot be synchronised according to
the synchronisation events (i.e E1 ∩ E2) are removed. For-
mally, given two automata A1 = (Q1, E1, T1, I1, F1) and
A2 = (Q2, E2, T2, I2, F2), the synchronisation of A1 and
A2, denoted A1 ⊗ A2, is the trim automaton A = Trim(A(cid:2))
with A(cid:2) = (Q1 ×Q2, E1 ∪E2, T (cid:2), I1 ×I2, F1 ×F2) such that:
T (cid:2) = {((q1, q2), l, (q(cid:2)
1) ∈ T1∧
(q2, l2, q(cid:2)
2) ∈ T2 ∧ (l1 ∩ (E1 ∩ E2) = l2 ∩ (E1 ∩ E2)) ∧
l = l1 ∪ l2}. When E1 ∩ E2 = ∅ (no synchronising events),
the synchronisation results in the concurrent behavior of A1
and A2, often called the shufﬂe of A1 and A2. The number of
states of the shufﬂe is the product of the number of states of
A1 and A2 and no trajectory is removed.
Example: Figure 1 gives an example of synchronisation. The
synchronising events are the ci events.

2)) | ∃l1, l2 : (q1, l1, q(cid:2)

1, q(cid:2)

The restriction operation of an automaton removes from I
all the initial states which are not in the speciﬁed set of states.
Due to the trim operation, all the states and transitions which
are no longer accessible are removed from Q. Formally, given
an automaton A = (Q, E, T, I, F ), the restriction of A by the
states of I (cid:2), denoted A[I (cid:2)], is the automaton Trim(A(cid:2)) with
A(cid:2) = (Q, E, T, I ∩ I (cid:2), F ).
2.2 Diagnosis
Let us recall now the deﬁnitions used in the domain of
discrete-event systems diagnosis where the model of the sys-

tem is represented by an automaton. t0 corresponds to the
starting time and tn to the ending time of diagnosis. More de-
tails can be found for instance in [Pencol´e and Cordier, 2005].
Deﬁnition 1 (Model).
The model of the system, denoted Mod, is an automaton.

The model of the system describes its behaviour and the
trajectories of Mod represent the evolutions of the system.
The set of initial states IMod is the set of possible states at
t0. We suppose as usual that F Mod = QMod (all the states
of the system may be ﬁnal). The set of observable events is
denoted EMod
Obs

⊆ EMod.

Let us turn to observations which can be uncertain and are
represented by an automaton, where the transition labels are
observable events of EMod
Obs .
Deﬁnition 2 (Observation automaton).
The observation automaton, denoted Obs, is an automaton
describing the observations possibly emitted by the system
during the period [t0, tn].

The diagnosis of a discrete-event system can be seen as the
computation of all the trajectories of the model that are con-
sistent with the observations sent by the system during the
period [t0, tn]. The automaton deﬁned as the synchronisation
of the model and the observations represents all these trajec-
tories.
Deﬁnition 3 (Diagnosis).
The diagnosis, denoted Δ, is a trim automaton such that
Δ = Mod ⊗ Obs.

3 Independence properties
In this section, we present two independence properties that
enable a decentralised (compact yet sufﬁcient) representation
of the diagnosis presented in the next section.

Let us ﬁrst deﬁne the state-independence property which
concerns the decomposition of an automaton A into two au-
tomata A1 and A2.
Deﬁnition 4 (Decomposition of A).
Two automata A1 and A2 are said to be a decomposition of
an automaton A iff A = (A1 ⊗ A2)[I] where I are the initial
states of A.

Let A(cid:2) = A1 ⊗ A2. Note that we do not require that A =
A(cid:2), but that A(cid:2) is a super-automaton (i.e an automaton that
contains all the trajectories of A and possibly more). The
reason is that, when decomposing A into A1 and A2, the links
existing between the initial states of A1 and A2 can be lost.
We thus have Q ⊆ Q(cid:2), I ⊆ I (cid:2), and F ⊆ F (cid:2) where A(cid:2) =
(Q(cid:2), E(cid:2), T (cid:2), I (cid:2), F (cid:2)) and A = (Q, E, T, I, F ).

The state-independence property is a property of a decom-

position A1 and A2 which ensures that A = A(cid:2).
Deﬁnition 5 (State-independence decomposition wrt A).
Two automata A1 and A2 are said to be a state-independent
decomposition wrt A iff A = A1 ⊗ A2.
Property 1: If A1 and A2 have both a unique initial state,
and if they are a decomposition of A, then A1 and A2 are a
state-independent decomposition wrt A.

IJCAI-07

293

Let us turn now to the transition-independence property
which states that two (or more) automata do not have any
transition labeled with common synchronisation events.
Deﬁnition 6 (Transition-independence).
A1 = (Q1, E1, T1, I1, F1) and A2 = (Q2, E2, T2, I2, F2)
are transition-independent (TI) iff every label l on a transition
of T1 or T2 is such that l ∩ (E1 ∩ E2) = ∅.

Two transition-independent automata are concurrent au-
tomata and their synchronisation is equivalent to a shufﬂe op-
eration (see Section 2). Moreover, we have :
Property 2: Let A1 and A2 be two transition-independent
automata and state-independent automata wrt A. The states
initial states, ﬁnal states) of A correspond exactly to
(resp.
the Cartesian product of the states (resp. initial states, ﬁnal
states) of A1 and A2.

4 Improving diagnosis representation in a

decentralised approach

In this section, we ﬁrst highlight
the role of state-
independence property when computing diagnoses in a de-
centralised way. We propose then an efﬁcient diagnosis rep-
resentation based on transition-independence property.
4.1 The decentralised approach and the role of

state-independence

The global model of a real-world system is too large to
be explicitly built. To answer this problem, decentralised /
distributed approaches have been proposed [Lamperti and
Zanella, 2003; Pencol´e and Cordier, 2005; Benveniste et al.,
2005; Jiroveanu and Bo¨el, 2005]. In this article, we consider
the decentralised approach of [Pencol´e and Cordier, 2005].

The idea (see Figure 2) is to describe the system behaviour
in a decomposed way by the set of its subsystems mod-
els. The so-called decentralised model is thus dMod =
{Mod1, . . . , Modn} where Modi is the behavioural model of
the subsystem (possibly a component) si. The decentralised
model is designed as a decomposition of the global model
Mod.
It is generally assumed that the global model has a
unique initial state and that the subsystems models also have a
unique initial state. They are thus a state-independent decom-
position wrt Mod and the global model can thus be retrieved,
if needed, by Mod = Mod1 ⊗ . . . ⊗ Modn.

The observations Obs can be decentralised as follows:
dObs = {Obs1, . . . , Obsn} such that Obsi contains the ob-
servations from the subsystem si and such that: Obs =
Obs1 ⊗ . . . ⊗ Obsn.

Given the local subsystem model Modi and the local sub-
system observations Obsi, it is possible to compute the lo-
= Modi ⊗ Obsi. These diagnoses rep-
cal diagnosis Δsi
resent the local subsystem behaviours that are consistent
with the local observations. It was shown in [Pencol´e and
Cordier, 2005] that the set of local diagnoses is a decom-
position of Δ. As they all have a unique initial state, it
is also a state-independent decomposition of Δ.
It is then
possible to directly compute the global diagnosis of the sys-
tem by synchronizing the subsystem diagnoses as follows:
⊗ . . . ⊗ Δsn . This synchronisation operation of
Δ = Δs1
subsystem diagnoses is often also called a merging operation.

{Mod1, . . . , Modn}

synchronisation

local diagnosis

{Δs1

, . . . , Δsn

}

Mod

diagnosis

merging

Δ

Figure 2: Principle of the decentralised diagnosis approach

It is clear that, rather than directly merging all the subsys-
tems diagnoses together, it is possible to compute the global
diagnosis by successive synchronisation operations. Let s1
and s2 be two disjoint subsystems (possibly being compo-
nents) and let s12 = s1 (cid:11) s2 be the subsystem that contains
exactly s1 and s2. The subsystem diagnosis Δs12 can be com-
⊗ Δs2. The diagnosis of the system is
puted as Δs12
⊗ Δs2 by Δs12. We
equivalently obtained by replacing Δs1
have Δ = Δs12

⊗ . . . ⊗ Δsn .

= Δs1

⊗ Δs3

Algorithm 1 computes the system diagnosis by starting
from the component local diagnoses and merging them until
ExitLoopCondition is satisﬁed. In this case, ExitLoopCondi-
tion checks that all pairs of diagnoses have been merged.

Algorithm 1 Computing diagnoses in a decentralised way

input: local diagnoses {Δs1
dΔ = {Δs1
while ¬ ExitLoopCondition do

, . . . , Δsn

}

, . . . , Δsn

}

∈ dΔ

, Δs2

Choose Δs1
s = s1 (cid:11) s2
⊗ Δs2
Δs = Δs1
dΔ = (dΔ \ {Δs1

, Δs2

}) ∪ {Δs}

end while
return: dΔ

4.2 An efﬁcient diagnosis representation based on

transition-independence

The diagnosis Δ built with a decentralised approach is equal
to the synchronisation Mod ⊗ Obs. It can be expected Obs
sufﬁciently contraints the behaviours of the system to signif-
icantly reduce the size of the Δ compared to Mod. However
Δ can still be large, especially because merging concurrent
diagnoses corresponds to computing the shufﬂe of these diag-
noses. It is why we propose to avoid these expensive shufﬂes
by representing the system diagnosis as a set of transition-
independent subsystem diagnoses.
Deﬁnition 7 (Decentralised diagnosis).
A decentralised diagnosis dΔ is a set of subsystem diagnoses
} such that Δsi is the diagnosis of the sub-
{Δs1
system si, {s1, . . . , sk} is a partition of the system Γ, and
∀i, j ∈ {1, . . . , k}, i (cid:13)= j ⇒ Δsi and Δsj are transition-
independent.
a decentralised diagnosis dΔ =
As
{Δs1
a
state-independent decomposition
of the global diagnosis. We get an economical represen-
tation of the global diagnosis which can be computed, if
needed, by synchronising all the subsystem diagnoses, by

seen before,
, . . . , Δsk

, . . . , Δsk

} is

IJCAI-07

294

⊗ . . . ⊗ Δsk , which, due to Property 2, corresponds
Δ = Δs1
to a shufﬂe operation. Its ﬁnal states can be obtained by a
simple Cartesian product on the ﬁnal states of all Δsi (see
Property 2).

Algorithm 1 can be used to compute the decentralised di-
agnosis from the local (component) diagnoses by changing
∈ dΔ, Δs1 and Δs2
ExitLoopCondition into ∀Δs1
are transition-independent. Until all pairs of diagnoses are
transition-independent, the algorithm chooses two transition-
dependent diagnoses and merges them.

, Δs2

An important point to remark is the decisive role of the
state-independence property of the decomposition which,
combined to the transition-independence property, allows us
to get an efﬁcient representation of the system diagnosis. The
state-independence property comes directly from the unique
initial state property of the system and subsystems models.

5 Improving diagnosis representation in a
decentralised and incremental approach

In this section, we propose to build the diagnosis on succes-
sive temporal windows, to beneﬁt from the short duration
independences. We then show that the state-independence
is generally no longer satisﬁed, and present in the last part
the abstraction operation that enables us to deal with state-
dependent subsystems.

Incremental diagnosis

5.1
In the previous section, we assumed that the diagnosis was
computed on a unique period. This means that the obser-
vation automaton represents the observations emitted dur-
ing [t0, tn]. The problem of this approach is that long pe-
riods transition-independent behaviours are infrequent, be-
cause each component eventually interacts with most of its
neighbours. Thus, all the local diagnoses will eventually be
merged in a huge global diagnosis. For this reason, it can be
interesting to divide the diagnosis period into temporal win-
dows as presented in [Pencol´e and Cordier, 2005], to beneﬁt
from short duration independent behaviours.

Let us consider that the diagnosis Δi−1 of [t0, ti−1] was
built and that the set of ﬁnal states of this diagnosis is
F i−1
Δ . Given the observations Obsi of the temporal window
[ti−1, ti], it is possible to compute the diagnosis of this tem-
poral window by: Δi = (Mod− ⊗ Obsi)[F i−1
Δ ] where Mod−
is the system model Mod where all the states are considered
as initial states. The trajectories consistent with the observa-
tions for the period [t0, ti] (i.e the trajectories of Δi if this
automaton were built) can be retrieved by the concatenation
of the trajectories from Δi−1 and the trajectories of Δi. It can
also be proved that the ﬁnal states of Δi are the ﬁnal states of
Δi. It is thus possible to incrementally add the observations
of [ti, ti+1] and compute the diagnosis.

5.2 Loss of the state-independence property
Our goal is to use a decentralised computation based on a de-
centralised model and to represent the diagnosis of the tempo-
ral window W i = [ti−1, ti] by a set of transition-independent

subsystem diagnoses similar to Section 4. However, con-
trary to Section 4, the unique initial state hypothesis can no
longer be made and thus the state-independence decomposi-
tion property can no longer be considered as satisﬁed.

Let I i be the set of initial states on the system for the tem-
poral window W i. Given I i, the set of initial states of a sub-
system s is called the projection of I i on s and denoted I i ↓ s.
Let us remark that (I i ↓ s) × (I i ↓ s(cid:2)) ⊇ I i ↓ (s (cid:11) s(cid:2)). Al-
gorithm 1 can be modiﬁed as presented in Algorithm 2 to
compute a set dΔi of transition-independent subsystems di-
agnoses.

Algorithm 2 Computing transition-independent diagnoses in
case of non state-independence
input: local diagnoses {Δs1
states I i
dΔ = {Δs1
while ∃s1, s2
independent. do

: Δs1 and Δs2 are not

} + the set of initial

, . . . , Δsn

, . . . , Δsn

transition-

}

s = s1 (cid:11) s2
⊗ Δs2
Δs = (Δs1
dΔ = (dΔ \ {Δs1

)[I i ↓ s]
, Δs2

}) ∪ {Δs}

end while
return: dΔ

Let us now consider the transition-independent diagnoses
of dΔi and more precisely their ﬁnal states F i
. The prob-
lem is that, due to the loss of the state-independence property,
F i is only a subset of FΔi
. Let us illustrate the
problem on an example (Figure 3).

× . . . × FΔi
sk

Δsj

s1

OO(cid:3)

f1

OF (cid:3)

f2

F O(cid:3)

O

F

O(cid:3)

F (cid:3)

Figure 3: Example of loss of information in a naive decen-
tralised representation of the incremental diagnosis

Example Figure 3 deals with the diagnosis of two compo-
nents which can be either in a Ok state or a F aulty state.
The ﬁgure presents a two-windows diagnosis, each in a box.
During the ﬁrst window (Figure 3, left), one of the two com-
ponents failed but it is not possible to determine which com-
ponent did. The initial states of each component at the be-
ginning of the second window are obtained by projecting the
ﬁnal states of the ﬁrst window and they are O and F for one
component and O(cid:2) and F (cid:2) for the other one. Nothing hap-
pened during the second window. Since the local diagnoses
are transition-independent, the algorithm proposes the two lo-
cal diagnoses (top and bottom in Figure 3, right) but it can be
seen that the links between the initial states were lost during
the projection. The decomposition of the global diagnosis is

IJCAI-07

295

not state-independent. We have F 2 ⊂ {O, F } × {O(cid:2), F (cid:2)}.
To get the exact ﬁnal states F 2, one solution would be to syn-
chronise the local diagnoses in conjunction with the restric-
tion operation on the set of ﬁnal states of the ﬁrst window as
argument, which we want to avoid.

5.3 TI + abstract representation
To obtain the ﬁnal states F i we propose, instead of merg-
ing the state-dependent diagnoses of dΔi, to merge their ab-
stract representations, which is much more efﬁcient. We thus
propose to enrich the set of transition-independent diagnoses
with the abstract representation of the state- and transition-
independent diagnoses.

The information required relies on the initial and ﬁnal states
only. Thus, we deﬁne an abstraction that keeps only the in-
formation that there exists a trajectory between an initial state
and a ﬁnal state.
Deﬁnition 8 (Abstraction).
Let A = (Q, E, T, I, F ) be a trim automaton. The abstrac-
tion of A, denoted Abst(A), is the (trim) automaton A(cid:2) =
(I ∪ F, {e}, T (cid:2), I, F ) where T (cid:2) = {(q, {e}, q(cid:2)) | ∃traj =
ln−→ qn ∈ Traj(A) ∧ q0 = q ∧ qn = q(cid:2)}.
q0
The following two properties can be easily proved.
Property 3: Let A1 and A2 be two transition-independent
automata. Then, Abst(A1) ⊗ Abst(A2) = Abst(A1 ⊗ A2).
Property 4: Let A1 and A2 be two transition-independent
automata and let I be a set of states. Then, (Abst(A1) ⊗
Abst(A2))[I] = Abst((A1 ⊗ A2)[I]).

l1−→ . . .

It is now possible to merge the abstract representations of
the state-dependent, transition-independent diagnoses as pre-
sented in Algorithm 3 until getting a set of state- and transi-
tion independent diagnoses. This result is called the abstract
decentralised diagnosis, and denoted adΔi. Given the prop-
erties 3 and 4, we have the following result:
Proposition 1.
The set of ﬁnal states F i is the set of ﬁnal states of adΔi,
i.e ΠΔ∈adΔi FΔ.
Let us deﬁne an extended decentralised diagnosis as follows :
Deﬁnition 9 (Extended decentralised diagnosis).
An extended decentralised diagnosis on W i
(dΔi, adΔi) such that

is a pair

• dΔi is the decentralised diagnosis of the system on W i,
• adΔi is the abstract decentralised diagnosis on W i.
The transition-independent diagnoses dΔi provide the set
of trajectories during the temporal window W i and the ab-
stract representation of state- and transition-independent di-
agnoses adΔi provides the set of ﬁnal states of the temporal
window W i. It is thus a safe representation of the diagno-
sis on W i. It can be used as shown in 5.1 to compute the
diagnosis on the whole period in an incremental way.

6 Experiments
We present the experimental results on a simpliﬁed case in-
spired by a real application on telecommunication networks.

Algorithm 3 Computation of the abstract decentralised diag-
nosis adΔi

local transition-independent diagnoses dΔi =

input:
{Δi
, . . . , Δi
sk
s1
adΔi = {aΔi
sj
while ∃aΔi
, aΔi
s2
s1
not state-independent wrt (aΔi
s1

} + the set I i of initial states
| ∃Δi
sj
∈ adΔi such that aΔi

∈ dΔi : aΔi
sj

⊗ aΔi
s2

= Abst(Δi
sj

)}
s1 and aΔi

s2 are
)[I i ↓ s1 (cid:11) s2] do

s = s1 (cid:11) s2
⊗ aΔi
aΔi
s = (aΔi
s2
s1
adΔi = (adΔi \ {aΔi
s1

)[I i ↓ s]

, aΔi
s2

}) ∪ {aΔi

s}

end while
return: adΔ

6.1 System
The system to diagnose is a network of 14 interconnected
components as presented in Figure 4.

1

2

3

4

5

6

7

8

9

10

12

11

13

14

Figure 4: Topology of the network

Each component has the same behaviour: when a fault oc-
curs, it reboots, sends a IRebooti observation and forces its
neighbours to reboot by sending them a reboot! message. A
component can also be asked to reboot by one of its neigh-
bours. In this case, it enters into a waiting state W before
rebooting and sends the IRebooti observation. In this state,
it can be asked to reboot by another component (and sends
then the IRebooti observation). When the reboot is ﬁnished,
the component sends the observation IAmBacki and reen-
ters the state O.

The model is presented in Figure 5. The reboot! message
indicates that reboot is sent to all the neighbours, and the re-
boot? message indicates that a neighbour has sent the reboot
message to the component. So, for example, on component 1,
there are three transitions from state O to state W correspond-
ing to a reboot? message received respectively from one of
its three neighbours 2, 3 and 14. They are respectively la-
beled by {reboot2→1, IReboot1}, {reboot3→1, IReboot1} and
{reboot14→1,IReboot1}.

fault,reboot!,IReboot

end,IAmBack

F

O
reboot?,
IReboot

end,IAmBack

W

start-reboot

reboot?
R

reboot?, IReboot

reboot?

Figure 5: Model of a component

Let us remark that the decentralised modeling contains ex-

IJCAI-07

296

actly 4 × 14 states, while the global model would contain
nearly 414

(cid:2) 250 000 000 states.

6.2 Results
The algorithms were programmed in Java, and run on a Linux
machine with a 1.73 GHz Intel processor. We deal with 45
observations. The experiments results are given Table 1.

The ﬁrst experiment was made with a unique temporal win-
dow as presented in section 4. The computation was more
than 26 mn and produced 4 automata, one of which contains
9 085 states and 557 836 transitions.
It can be noted that
taking into account the transition-independence property of
diagnoses in the decentralised representation is interesting as
four independent subsystems are identiﬁed. It saves us from
computing the shufﬂe for these subsystem diagnoses, which
is certainly very beneﬁcial. However, due to the length of the
window, one of the automata is still very large.
Using the method described in section 5, the observations are
now sliced into 4 temporal windows. The diagnosis was com-
puted in less that 1 second, producing 39 small automata. The
number of states (479) is 5% of the number of states used in
the previous automaton, and the number of transitions (4 038)
is less than 1% of the transitions of the previous automaton.
It conﬁrms that slicing observations is beneﬁcial in that it in-
creases the number of independent subsystems, and thus di-
agnoses.

nb states
nb trans
nb auto
time

no slicing

9 088

557 836

4

26mn 55s

1st slicing

479
4 038

39
< 1s

2nd s.
589
5 382

51
10 s

3rd s.
3 375

142 517

26

3mn 5s

Table 1: Results of the experimentations

Let us stress now the importance of the slicing on the good
results of the method. In a third experiment, the ﬁrst temporal
window of the previous experiment was sliced into two. The
number of states of the diagnosis increased by about 20%
and the number of transitions by 30%. Moreover, the com-
putation time increased to 10 seconds. The reason is that
you sometimes need to have enough observations on a sub-
system to conclude that this subsystem did not communicate
with another subsystem.
In a fourth experiment, two tem-
poral windows of the ﬁrst slicing are merged into a unique
window. The corresponding computation time is then about 3
minutes and the number of states and transitions exploded. It
conﬁrms that the slicing operation is a critical operation and
that deciding what is the best slicing is an interesting area for
further works.

7 Conclusion
In this paper, we consider the diagnosis of discrete-event sys-
tems modeled by automata. To avoid the state-explosion
problem that appears when dealing with large systems, we
use a decentralised computation of the diagnosis. We show
that the global diagnosis can be safely and economically rep-
resented by the set of diagnoses of its transition-independent

subsystems. An important point is that this decentralised rep-
resentation relies on the state-independency property.

When the period of observation is important, independent
subsystems occur infrequently, since each component even-
tually interacts with most of its neighbours. A solution is
to slice the diagnosis period into temporal windows, in or-
der to get, on these windows, transition-independent subsys-
tems. The problem is that the state-independency property
does not hold anymore. It is then impossible to get the ex-
act ﬁnal states, at least in an economical way. On the one
hand, such a set of diagnoses for transition- but not state-
independent subsystems gives us only a superset of the global
diagnosis, which is not satisfying. On the other hand, com-
puting the set of transition-independent and state-independent
subsystem diagnoses would be too expensive.

We propose in this paper to keep the decentralised diag-
nosis representation (a set of transition-independent subsys-
tem diagnoses), and to add an abstract representation of both
state- and transition-independent diagnoses, which produces
the ﬁnal states in an economic and efﬁcient way. We show
that we get a safe and efﬁcient representation of the global
diagnosis.

This work opens at least two interesting prospects. As can
be seen in Algorithm 3, it is necessary to have an efﬁcient
way to check whether two abstract diagnoses are or are not
state-independent, and we are currently working on this point.
Another concern is about the slicing. As shown in section 6,
a bad slicing can lead to a very little beneﬁt. An interesting
prospect would be to automatically ﬁnd the best slicing to
obtain a diagnosis represented as efﬁciently as possible.

Acknowledgements
A. Grastien is currently supported by National ICT Australia
(NICTA) in the framework of the SuperCom project. NICTA is
funded through the Australian Government’s Backing Australia’s
Ability initiative, in part through the Australian National Research
Council.

References
[Benveniste et al., 2005] A. Benveniste, S. Haar, E. Fabre, and
Cl. Jard. Distributed monitoring of concurrent and asynchronous
systems. Discrete Event Dynamic Systems, 15(1):33–84, 2005.

[Cassandras and Lafortune, 1999] C. Cassandras and S. Lafortune.
Introduction to Discrete Event Systems. Kluwer Academic Pub-
lishers, 1999.

[Jiroveanu and Bo¨el, 2005] G. Jiroveanu and R. Bo¨el. Petri net
model-based distributed diagnosis for large interacting systems.
In Sixteenth International Workshop on Principles of Diagnosis
(DX-05), pages 25–30, 2005.

[Lamperti and Zanella, 2003] G. Lamperti and M. Zanella. Diag-

nosis of Active Systems. Kluwer Academic Publishers, 2003.

[Pencol´e and Cordier, 2005] Y. Pencol´e and M.-O. Cordier. A for-
mal framework for the decentralised diagnosis of large scale dis-
crete event systems and its application to telecommunication net-
works. Artiﬁcial Intelligence Journal, 164(1-2):121–170, 2005.
[Sampath et al., 1996] M. Sampath, R. Sengupta, S. Lafortune,
K. Sinnamohideen, and D. Teneketzis. Failure diagnosis using
discrete-event models. Control Systems Technology, 4(2):105–
124, 1996.

IJCAI-07

297

