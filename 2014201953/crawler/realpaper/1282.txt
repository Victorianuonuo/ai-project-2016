Session  6  Theorem  Proving  and 
Logic: 

II 

DOING  ARITHMETIC  WITH  DIAGRAMS 

by 

Alan  Bundy 

Department  of  Computational  Logic, 

University  of  Edinburgh, 
Scotland. 
Edinburgh, 

ABSTRACT â€¢ 

in  described 

' i d e al  i n t e g e r s ', 

The  nodes  of  t h is  network 
i . e.  objects  which  have  a ll 

A  theorem  prover  f or  part  of  arithmetic 
which  proves  theorems  by  representing  them  in  the  form 
of  a  diagram  or  network. 
represent 
the  properties  of  integers,  without  being  any  p a r t i(cid:173)
cular  intoger. 
The  links  in  the  network  represent 
relationships  between  ' i d e al  i n t e g e r s '. 
ures  which  draw  these  diagrams  make  elementary  deduct(cid:173)
ions  based  on  t h e ir  b u i l t - in  knowledge  of  the  functions 
and  predicates  of  arithmetic. 
This  theorem  prover  is 
intended  as  a  model  of  some  kinds  of  human  problem-
solving  behaviour. 

The  proced(cid:173)

DESCRIPTIVE  TERMS. 

Theorem  Proving,  Heuristic  Method,  Representation, 
Psychological  Modelling,  Semantic  Network,  Arithmetic, 
Ideal  Integer,  Logic,  Semantic:  Tableaux. 

0.  MOTIVATION. 

The  objective  of  t h is  work  is  to  investigate  human 
problem-solving  behaviour  by  t r y i ng  to  simulate  it  on  a 
machine. 
The  main  source  of  information  about  human 
behaviour  is  s t i ll  self-observation  and  so  the  author 
has  deliberately  chosen  a  domain  in  which  he  has  some 
experience,  arithmetic  (see 
additional  advantage  that  as  one  of  the  oldest  branches 
of  mathematics 
easily  stated  but  d i f f i c u lt  theorems  ( e . g.  Format's 
Last  Theorem). 
prover  is  l i k e ly  to 
Correctness  Proof3. 

Also  an  e f f i c i e nt  arithmetic  theorem 

is  r i ch  in  proof  techniques  and 

1).  Arithmetic  hus  the 

find  applications 

in  Program 

it 

1.  INTRODUCTION. 

Instead 

SUMS  does 

It  describes 

is  a  report  of  work  in  progress. 

This 
what  i s,  to  the  best  of  the  author's  knowledge,  a  new 
kind  of  automatic  theorem  prover,  called  SUMS  (a  System 
which  Understands  Mathematical  Symbols). 
not  e x p l i c i t ly  use  axioms  or  rules  of  inference  to 
prove  theorems. 
theorem  as  a  network  (or  diagram) 
are  the  property  l i s ts  of  arithmetic  terms  and  the 
links  describe  relationships  ( e . g.  =  <, 
|)  between 
them. 
proved  by  accessing  the  diagram. 
arithmetic 
diagram  so  that  when  links  are  added  to  i t,  elementary 
deductions  are  made  (and  more  l i n ks  added)  automat(cid:173)
i c a l l y. 

it  represents  the  candidate 
in  which  the  nodes 

Statements  are  asserted  by  adding  new  l i n ks  and 

the  procedures 

Knowledge  about 

that  draw  the 

is  b u i lt 

into 

The  domain  of  SUMS 
Numbers  ( i . e. 
integers). 
of  terms  and 

is  the  Elementary  Theory  of  Natural 

the  arithmetic  of  the  non-negative 
At  present  it  can  only  handle  the  classes 
formulae  defined  below; 

(a)  An  a r b i t r a ry  skolem  constant  or  natural 

number  is  a  term. 

(b) 

If  A  and  B  are 

terms  then  SUC(A)  ;  Pre(A); 

A  +  B;  A  -  B  and  A  x.  B  are  terms. 

130 

F i g.  7. 

means  that  A  =  B. 
example  but  are  included  for  completeness. 
because  asserting  B  <  A  involves  asserting  both  B  < A 
and  B  /  A. 

These  links  are  not  needed  in  t h is 
They  occur 

"" 

3.  THE  REPRESENTATION  OF  THE  DIAGRAM. 

The  diagrams  are  represented  using  l i s ts  and  POF-2 
records.  We  find  records  convenient,  but  they  could, 
if  necessary,  be  replaced  by  L i s ts  or  arrays. 

Each  diagram  is  a  record  with  6  components  (or  slots) 
in  which  information 
called  and  contain: 

These  slots  are 

is  recorded. 

(a)  T i t l e: 

a  formula  in  l i st  notation  which  says 

which  case  the  diagram  represents,  e.g. 

[LESS  A  B ]. 

(b)  Contra:  a  1  or  0  according  as  the  diagram 

has  or  has  not  been  found  contradictor;'. 

(c)  Network: 

a 

l i st  of  the  entries  (defined 

below) 

in  the  diagram. 

(d)  Nought  and  Unity: 

2  redundant  slots  pointing 

to  the,  frequently  used,  entries  f or  0  and  1 
respectively. 

(e)  F i l e: 

a  l i st  of  terms  which  were  not 

represented  in  the  diagram  when  wanted,  but  which  SUMS 
may  decide 

to  represent  l a t e r. 

Every  term  is  represented, 
record  with  3  s l o t s,  called  an  entry. 
are  called  and  contain: 

in  the  diagram,  by  a  unique 

These  s l o ts 

(a)  Label:  The  name  of  the  term  being  represented 

in  l i st  notation,  e . g.  [ADD  A  [DIFF  B  A]] 

(b)  P r o p l i s t:  A  record  of  type 

'node'  which 

' p r o p l i s t' 

(property  l i s t) 

is  put 

into  the 

Thus  equal  terms  share 

' p r o p l i s t ',  which  then  replaces  the  f i r st 

contains  a ll  the  links  to  the  other  e n t r i e s.  When  two 
terms  are  made  equal  a ll  the  information  from  the  f i r st 
term's 
second  term's 
wherever  it  appears. 
which  j u s t i f i es  the  adoption  of  the  name 
' p r o p l i s t'  rather  than  the  e n t r i e s. 
dealing  with  equality  is  more 
equality  l i n k s,  because: 
equality  more  e f f i c i e nt  (the  ' p r o p l i s t s'  must  be  EQ)  ; 
the  equality  axioms  are  automatically  incorporated, 
and  a ll  the 
one  place. 

information  about  a  single  node  is  kept  in 

This  method  of 
than  using 

it  makes  checking  for 

convenient 

'nodes' 

' p r o p l i s t s' 
f or  the 

(c)  Replace:  A  slot  used  in  the  copying  of 

diagrams. 

131 

F i g.  5. 

Each  node  is  a  record  with  6  slots  called  and  cont(cid:173)
aining: 

(a)  Smaller:  A 

l i st  of  pairs  of  e n t r i e s. 

The 

f r o nt  of  each  p a ir  represents  a  term  smaller  than  the 
present  one; 
them. 

the  back  represents  the  distance  between 

(b)  Bigger:  Similar  to  (a)  except 

that  the  front 

of  each  pair  is  the  entry  of  a  term  bigger  than  the 
present  one. 

{c)  Unequal:  A  l i st  of  entries  representing  terms 

known  to  be  unequal  to  the  present  one. 

(d)  Factor:  Similar  to  (a)  except 

thnt  the  front 

of  each  pair  is  the  entry  of  a  term  which  exactly 
divides  the  present  one,  and  the  back  is  the  entry 
representing  the  quotient  produced. 

(e)  M u l t i p l e:  Similar  to  (d)  except 

that  the  front 

of  each  p a ir  is  the  entry  of  a  term  which  the  present 
term  exactly  divides. 

( f)  Mark;  A  slot  used  f or  markers  when  measure(cid:173)

ments  are  being  made  in  the  diagram. 

4.  THE  PROGRAM. 

In  order  to  distinguish  functions  in  SUMS  from 
functions  in  Arithmetic,  we  w i ll  c a ll  the  former 
procedures. 

There  arc  four  classes  of  top  level  procedures 
arranged  roughly  in  a  hierarchy. 

They  are: 

(a)  Logical  Procedures:  which  analyse  the 

o r i g i n al  formula  and  decide  which  atomic  formulae  to 
assert  and  which  to  prove. 

(b)  Drawing  Procedures:  which  analyse  the  terms 
in  the  formulae,  draw  them  in  the  diagram  and  assert 
relationships  between  them. 

(c)  Asserting  Procedures:  which  make  relationships 

between  terms  hold  in  the  diagram  by  adding  l i n k s. 

(d) 

Interrogating  Procedures:  which  discover 

whether  relationships  between  terms  hold  by  accessing 
the  diagram. 

( i)  The  Logical  Procedures. 

After  the  i n i t i al  diagram  has  been  created  a ll 
negations  are  eliminated  from  the  candidate  tliooreni  by 
passing  them  down  to,  and  absorbing  them  .into, 
atomic  formulae. 
-S(x1,...xn) 
candidate,  P, 
whose  description  follows. 

the 
i . e.  each  negated  atomic  formula 

then  passed  to  the  procedure 

is  replaced  by 
is 

The 
'Prove' 

#(x1 

xn) . 

To  prove  P: 

(a) 

If  P  is  a  conjunction  of  atomic 

i ts 
in  the  diagram,  which  is  then  i n t e r r o-

formulae, 

terms  are  drawn 
gated 

to  see  if  P  is 

true. 

(b) 

If  P  is  of  the  form  Q  &  R  then  a  copy  of  the 
Q  is  proved  in  the  f i r st  diagram 

diagram  is  made. 
and  R  in  the  second. 

(c)  If  P  is  of  the  form  Q  v  R  (or  Q  -  E) 

assert  -Q  (Q) 

in  the  diagram  and  prove  R. 

then  we 

(d) 

If  P 

is  of  the 

form  QR 

then  a  copy  of  the 

diagram  is  made. 
and  R  is  proved; 

In  the  f i r st  diagram,  Q  is  asserted 

in  the  second  R  is  asserted  and  ft 

proved. 

To  assert  a  formula  in  the  diagram  the  following 
procedure 

is  c a l l e d. 

To  assert  P: 

(a) 

If  P  is  already  true  in  the  diagram  then 

the 

procedure 

is  exited. 

(b) 

If  P  is  already  false  the  diagram  is  closed, 
by  making  it  contradictory,  and  the  procedure  exited. 

(c) 

If  F  is  atomic, 

i ts  subterms  are  drawn,  and 
it  i-.  made  true  in  the  diagram  by  c a l l i ng  an  approp(cid:173)
r i a te  asserting  procedure. 

(d) 

If  P  is  of  the  form  Q  &  R  then  both  Q  and  R 

are  asserted. 

(e) 

If  P  is  of  the  form  Q  v  R,  (Q  -  R) 

then: 

If  Q  is  false  (Q  is  true),  R  is  asserted; 
If  R  is 

false,  Q  is  asserted 

[-Q 

is  asserted); 

Otherwise  a  copy  of  the  diagram  is  made  and  Q  is 
asserted  (-  Q  is  averted) 
in  the  second, 

in  the  f i r st  diagram  and  R 

(f) 

If  P  is  of  the  form  Q  <-->  R  then: 

If  Q  is 
If  R 
is 
]f  Q  is 
If  R 
is 

true,  R  is  asserted; 
true,  Q  is  asserted; 
false,  -  R  is  asserted; 
false,  -  Q  is  asserted; 

Otherwise  a  copy  of  the  diagram  is  made  and  Q  and  R 
are  asserted 
asserted 

first  diagram  and  -Q  and  -R  am 

in  the  second. 

the 

in 

The  referee  has  pointed  out  the  s i m i l a r i ty  of  these 
procedures 
main  difference;;  are  that: 

to  Beth's  Semantic  Tab]eaux  (see  '). 

The 

(a)  SUMS  cannot  yet  handle  a r b i t r a ry  q u a n t i f i(cid:173)
Semantic  Tableaux  provides  some  valuable 

cation. 
clues  as  to  how  to  correct 

this  defect. 

(b) 

in  SUMS 

the  l e ft  (valid)  and  r i g ht  ( i n v a l i d) 

columns  of  Beth's  tableaux  have  been  combined 
in  u 
single  diagram,  making  a  neater  and  more  powerful 
procedure. 

(c)  At  present  SUMS  does  not  assert  the  negation 

of  the  theorem  to  be  proved,  a  practice  which  would 
certainly  lead 

increase  in  power. 

to  an 

(d)  Before  dividing  into  2  cases  SUMS  checks  the 
present  diagram  to  see  if  either  of  the  new  diagrams 
would  be  contradictory  (see  the  checks  in  (e)  and  ( f) 
above,  and  in  the  drawing  procedure  f or  -  below). 
This  l i m i ts  the  number  of  cases  to  be  considered,  but 
is  not  perfect,  and  unnecessary  cases  are  sometimes 
considered. 

(e)  Most  importantly, 

the  assertion  of  an  atomic 
formula, 
just  the  passive  addition  of 
the  formula  to  a  l i s t,  but  an  act  which  may  have  wide 
repercussions  within  the  diagram. 

in  SUMS, 

is  not 

(ii)  The  Drawing  Proceduren. 

Between  them  the  drawing  and  asserting  procedures  are 
mainly  responsible  for  drawing  the  diagram. 
Their 
general  philosophy 
is  to  l i m it  the  number  of  nodes 
the  diagram  to  those  representing  terms  mentioned 
the  candidate  theorem,  but  to  draw  as  many  l i n ks 

in 
in 

133 

between  these  nodes  as  possible. 
Thus  the  diagram  is 
prevented  from  exploding,  since  only  a  f i n i te  number  of 
l i n ks  is  possible  between  a  f i n i te  number  of  nodes,  but 
quite  sophisticated  relationships  are  deduced  between 
the  nodes  that  are  represented. 
s t ic 
advice  to  students  proving  theorems 
geometry,  to  deduce  as  much  as  possible  about  a  diagram 
without  constructing  any  further  points  (ef.  3 ), 
only  exceptions  to  t h is  rule  are; 

in  mathematics  f or  instance  as 

This  kind  of  h e u r i(cid:173)

is  quite  common 

in  Euclidean 

The 

(a) 

the  creation  of  nodes  f or  0  and  1,  often 
needed  because  they  are  the  i d e n t i ty  elements  for 
addition  and  m u l t i p l i c a t i o n. 

(b) 

the 

links  between  existing  nodes,  e.g. 
the  premises  of  the  candidate  theorem  and  b  -  a 
already  represented, 

limited  creation  of  nodes  needed  to  label 
b  is  one  of 
is  not 

then  we  represent  i t. 

if  a  

(c) 

the  creation  of  new  nodes  as  part  of  a  proof 

strategy  (sec  Section  6 ). 

(d) 

the  suppression  of  those  clauses  of  links 

which  do  not  appear  to  be  necessary  to  prove  the 
theorem,  e.g.  m u l t i p l i c a t i ve  links  in  a  theorem  only 
involving  addition. 

This  has  not  yet  been  implemented. 

(a)  and  (b)  only  produce  a  s t r i c t ly  limited  number  of 
extra  nodes. 

A  formula  is  drawn  in  the  diagram  by 

We  now  turn  to  a  description  of  the  procedures  them(cid:173)
selves. 
creating  entries  f or  each  of  i ts  subterms  which  do  not 
already  have  them,  from  the  bottom  up,  and  then  passing 
these  entries  to  procedures  which  extract  information 
from  the  term's  function  symbols. 
these  drawing  procedures  for  each  arithmetic  function 
symbol,  and  the  procedure  receives  every  term  beginning 
with  t h is  symbol. 
ments  have  already  been  represented. 
can  use 
state  of  the  diagram  before  using  i ts  knowledge  of 
arithmetic 
procedures. 

the  interrogation  procedures  to  discover  the 

to  assert  relationships  w i th  the  asserting 

It  assumes  that  the  term's  argu(cid:173)

There  is  one  of 

If  necessary  it 

As  an  example  we  describe  the  procedure  for  terms  of 
the  form  A  -  B: 

These  drawing  procedures  are  s u f f i c i e n t ly  close  to  the 
o r i g i n al  function  d e f i n i t i o ns  to  make  one  feel  optim(cid:173)
i s t ic  about  having  the  machine 
'learn'  a  new  function 
by  constructing  i ts  drawing  procedure  from  i ts 
d e f i n i t i o n. 
involves  constructing  a  new  entry, 
in  i ts 
s l ot  and  adding  t h is  entry  to  the  diagram's 
s l o t. 
information  as  possible. 

'network' 
The  property  l i st  is  then  f i l l ed  with  as  much 

The  creation  of  an  entry  for  a  term 

' l a b e l'  s l ot  and  a  new  node  in  i ts 

For  instance,  a ll  terms  are 

i n s e r t i ng  the  term 

' p r o p l i s t' 

In  addition  if 

the  normal  l i m i t a t i o n s, 

term  is  a  natural  number  we  compute  and  record, 

made  bigger  than  0  and  d i v i s i b le  by  1. 
the 
subject  to 
a ll  previously  created  natural  numbers. 
made  bigger  than  1  by  an  amount  1  and  unequal  to  0  and 
1  etc. 
nodes  is  s t r i c t ly  controlled,  and  ensures  that  a ll 
nodes  relevant  in  a  particular  situation  can  be 
conveniently  recovered. 

This  is  s t i ll  non-explosive  if  the  number  of 

i ts  relationships  to 

e . g.  2  is 

( i i i)  The  Assorting  Procedures. 

Before  and  after  these  links  are  created 

These  procedures  update  the  property  l i s ts  of 

There  is  an  asserting  procedure  for  each  predicate 
symbol. 
the  entries  in  the  diagram  thus  creating  new 
the  network. 
various  'antecedent'  procedures  ( c f.  4)  are  called, 
which  examine  the  local  state  of  the  diagram  to  see 
whether  any  further  facts  can  be  deduced. 
cular  a  contradiction  may  be  detected  in  some  diagram 
and  then  registered  by  assigning  1 
'contra'  s l o t. 

to  the  diagram's 

In  p a r t i-

links  in 

is  b u i lt  into  the  theorem 
They  are  constantly  evolving  as  new  i n f o r(cid:173)

These  antecedent  procedures  contain  a  pood  deal  of  the 
arithmetic  knowledge  which 
prover. 
mation  is  included  or  neater  ways.  of  achieving  the 
same  effect  are  discovered,  und  so  it.  would  be  mis(cid:173)
leading  to  over-emphasise  t h e ir  present  state  by 
describing  one  in  d e t a i l. 
examples  of  t h e ir  action. 

However,  wo  can  give  some 

Suppose  that  an  asserting  procedure  is  making  A  divide 
C  with  quotient  B  ( i . e.  A  x  B  =  C). 
Let  A,  B  and  C 
be  represented  in  the  diagram  by  the  entries  Ae,  Be 
if  X  is  a  term, 
and  Ce  respectively,  and  in  general 
l et  Xe  be  the  entry  representing  i t.  Before  adding  any 
new  links  between  Ae,  Be  and  Cc,  SUMS  compares,for 
instance,  Ce  and  Be  with  each  of  the  pairs,  (Ee.I)e)  ,  in 
the  ' m u l t i p l e'  slot  of  Ae.  We  i l l u s t r a te  t h is  s i t u(cid:173)
ation  in  the  following  diagram, 
in  which  the  double 
arrows  indicate  that  the  links  are  m u l t i p l i c a t i v e. 

The  redundancy  of  this  method  of  link  storage 
j u s t i f i ed  by  the  convenience  of  having  a ll  the 
information  about  a  p a r t i c u l ar  node  stored 
node. 

ia 

in  that 

After  the  links  have  been  added,  f or  instance,  Ce  and 
Be  are  again  compared  with  each  of  the  pairs  (Ee.De) 
is  known  to 
in  the 
be  unequal  to  0  and  C  exactly  divides  E  with  quotient 
P.. then  B  is  made  to  divide  D  exactly  with  quotient  F. 
Because: 

' m u l t i p l e'  s l ot  of  Ae. 

I f,  say,  A 

135 

Again  i f,  say,  B  ia  smaller  than  D  by  an  amount  P  and 
there  ia  a  term,  G,  equal  to  A  x  F  represented 
in  the 
diagram  then  D  is  made  less  than  E  by  an  amount  C. 
Because: 

Formulae  l i ke  ( 3 ),  (4)  and  (5)  are  the  mainstay  of  the 
antecedent  procedures. 
they  often  have  a  simple  geometric  i n t e r p r e t a t i on  and 
t u rn  out  to  be  surprisingly  powerful  in  antecedent 
mode. 
edures  f a ll 

In  general  the  asserting  and  antecedent  proc(cid:173)

i n to  the  f o l l o w i ng  pattern: 

Although  apparently  a r b i t r a r y, 

(a)  Check  whether  the  r e l a t i o n s h ip  already  holds. 

If  so,  exit  without  adding  any  more 

l i n k s. 

(b)  Check  whether  the  opposite  relationship  already 

holds. 

If  so,  declare  a  contradiction  and  e x i t. 

(c)  Otherwise  add  a ll  new  l i n k s. 

(d)  Now  do  a  l ot  of  very  cheap  ( in  time  and  space) 

checks  to  discover  the  current  l o c al  state  of  the 
diagram. 
Deduce  and  assert  as  many  new  facts  as 
possible  without  creating  any  new  nodes  in  the  diagram. 

( i v)  The  Interrogating  Procedures. 

to  do  very 

they  do  t h i3  by 

l i t t le  searching. 

Because  they  are  used  so 

There  is  an  i n t e r r o g a t i ng  procedure  for  each  predicate 
symbol. 
They  are  used  to  s e t t le  a ll  questions  about 
the  relationships  between  terms  and 
accessing  the  diagram. 
frequently  the  present  procedures  are  designed, 
e f f i c i e n c y, 
the  procedure  which  asks  whether  A  is  equal  to  B 
returns  true  if  and  only  if  A  and  B  have  the  same  node 
stored  in  t h e ir  ' p r o p l i s t s '. 
The  procedure  which  asks 
whether  A  is  less  than  B  starts  at  A  and  climbs  up 
through  the 
e i t h er  it  comes 
a ll  p o s s i b i l i t i es  and  returns  f a l s e. 
possible  to  design  procedures  which  t r i ed  a  l ot  harder 
than  t h i s,  but  t h e ir  use  would  have  to  be  s e l e c t i v e. 

'bigger'  s l o t s,  marking  i ts  passage,  u n t il 

true  or  it  exhausts 

to  B  and  returns 

It  would  be 

For  instance, 

f or 

There  is  a  subclass  of  the  interrogating  procedures, 
called  the  measuring  procedures,  and  there  are  measuring 
procedures corresponding  to  most  of  the  function  symbols. 
For  instance, 
the  measuring  procedure  for  +  takes  as 
arguments  two  e n t r i e s,  Ae  and  Be,  (say)  representing 
the  terms,  A  and  B,  and  returns  true  if  and  only  if  it 
in  which 
finds  an  entry  for  a  term  equal  to  A  +  B, 
It  does 
case  it  also  returns 
t h is  by 
looking  in  the 
for  a  pair  whose 
back  is  equal  to  Be  and returns the  corresponding  f r o nt 
if  successful. 
This  procedure  may  well  succeed  even 
if  A  +  B  is  not  represented. 
represented  or  in  a  diagram  where  a  
B  is  b  -  a  we  may  return  the  entry  f or  b. 
procedure  does  not  succeed  the  term  A  +  B  is  stored  in 
the  diagram's 
l a t er  date  as  grounds  f or  constructing  a  node  f or  A  +  B. 

b,  A  is  a  and 
the 

it  may  be  used  at  a 

'bigger'  slot  of  Ae 

e . g.  B  +  A  may  be 

' f i l e'  s l ot  where 

t h is  entry. 

If 

t h e se 

t he  Peano  axioms  of  a r i t h m e t i c. 

theorems  a re  q u i te  d i f f i c u lt 
F or 
two 

to  prove 
i n s t a n c e, 
i n d u c t i on 
A l t h o u gh  n o r m a l i z a t i on  a l g o r i t h ms  might  be 

Most  of 
from 
the  normal  p r o of  of  number  1 
s t e p s. 
used 
to  see  how  such  a  method  would  d e al  w i th  number  4, 
number  7  or  number  12. 

is  e x t r e m e ly  d i f f i c u lt 

to  prove  some  of 

i n v o l v es 

them, 

it 

6.  GOALS. 

In  o r d er  to  p r o ve 
r e q u i r es  a b i l i t i es  o u t s i de 
f or  adding  some  of 
and  o n ly  a w a it 
the 

i m p l e m e n t a t i o n; 
A  d e s c r i p t i on  of 

f u t u r e. 

the  r e m a i n i ng  636 

,  SUMS 
P l a ns 
t h e se  a b i l i t i es  are  w e ll  advanced 

theorems 
i ts  p r e s e nt  s c o p e. 

in 

o t h e rs  are 
t h e se  plans 

f u r t h er 
f o l l o w s. 

in 

( i)  F u r t h er  A r i t h m e t i c. 

to 

to  be  a b le 

to  d e al  w i th 

t a c k le  more  s o p h i s t i c a t ed  a r i t h m e t ic 
the 

In  o r d er 
f o r m u l a e,  SUMS  needs 
q u o t i e n t; 
r e m a i n d e r; 
g r e a t e st  common  d i v i s o r; 
and  p r e d i c a t e s. 
p r o c e d u re  f or  each  new  f u n c t i o n,  an  a s s e r t i ng  and  an 
i n t e r r o g a t i ng  procedure 
n e g a t i o n,  and  new  s l o ts 
w i ll  be  added  s o o n. 

f or  each  new  p r e d i c a te  and 
in 

n th  odd  p r i m e; 
and  o t h er 

e x p o n e n t i a l; 
i s - a - p r i me 

the  p r o p e r ty 

these  a b i l i t i es  r e q u i re  a  d r a w i ng 

i ts 
These 

l i s t s. 

A ll 

f u n c t i o ns 

5.  RESULTS. 

(  i i)  Q u a n t i f i c a t i o n. 

,  which  contains  about  700  formal 

The  remaining  12  were  invented  to  test  SUMS' 

74  of  the  86  theorems  which  have  been  attempted  so  f ar 
were  drawn  from 
theorems. 
a b i l i ty  to  deal  with  p a r t i c u l ar  numbers  (see  numbers 
14  15  and  20  below). 
with  times  ranging  from  0.125  sees,  of  C.P.U. 
(number  13) 
There  follows  a  selection  of  15  of  these  64  successfully 

SUMS  can  now  prove  64  of  them 

to  45.94  secs.  of  C.P.U. 

time  (number  12). 

time 

136 

is  n ot  capable  of  d e a l i ng  w i th  any 
t h at  w o u ld  c o n t a in  e x i s t e n t i al  q u a n t i f i e rs 

At  p r e s e nt  SUMS 
f o r m u la 
it  were  w r i t t en 
Semantic  T a b l e a u x2  and  R o b i n s o n 's  R e s o l u t i o n5  b o th 
p r o v i de  v a l u a b le  c l u es  as 
d e f i c i e n c y. 

t h is 
f o l l o ws  a  proposed  s o l u t i o n. 

in  Prenex  normal 

to  c o r r e ct 

to  how 

B e t h 's 

There 

f o r m. 

if 

F i r s t l y, 
d e s c r i b ed 

r e p l a ce  any  c a ll  of 

t he  procedure 

in  S e c t i on  4,  by  a  c a ll  of 

' To  a s s e rt 

'To  p r o ve  P1, 
- P'  and 

then  the  theorem  is  proved  when  a ll  the  diagrams 
become  contradictory. 
be  used  to  suggest  counter-examples  or  w i ll  be  candi(cid:173)
dates  f or  more  strenuous  proof  strategies  (see  next 
sub-section). 

Non-contradictory  diagrams  w i ll 

Secondly,  update  the  ' to  assert  P'  procedure  by 
adding: 

(g) 

If  P  is  of  the  form  V  x  Q(x) 

then  an  entry  of 

type  ' v a r i a b l e' 
local  variable  l i st  'vars'  and  Q.(x) 

is  created  f or  x. 

x  is  added 
is  asserted. 

to  a 

If  P 

(h) 
'skolem  f u n c t i o n1 

is  of  the  form 3x  Q(x) 

type 
dependent  on  a ll  the  variables  :in  the  current  value 
of  ' v a r s'  and  Q(x) 

is  created  f or  x. 

is  asserted. 

then  an  entry  of 
x  is  made 

This  involves  making  a  copy  of 

for  a  variable  x,  any  term  A,  which  is 

T h i r d l y,  during  the  course  of  the  proof  we  may 
' s u b s t i t u t e1 
not  dependent  on  x. 
any  entry  containing  x,  replacing  each  occurrence  of  x 
in  each  copy  by  the  term  A  and  making  equal  any  terms 
with  the  same  l a b e l. 
The  a b i l i ty  to  substitute  needs 
to  be  handled  with  the  same  circumspection  as  the 
other  proof  strategies  mentioned  in  the  next  sub(cid:173)
s e c t i o n. 

( i i i)  Proof  Strategies. 

it  performs  no  search  and  always  terminates 

With  the  additions  mentioned  above,  SUMS  should  be  able 
to  prove  a  wide  class  of  straightforward  theorems. 
However, 
wit!)  or  without  a  s o l u t i on  a f t er  it  has  represented 
the  candidate  theorem. 
theorems  SUMS  needs  to  have  and  to  know  how  to  use,  a 
store  of  proof  strategies  (PLANNER  consequent 
theorems4). 

To  prove  more  sophisticated 

is 

to  make  a 

to  use  some 

it  may  decide 

to  t ry  mathematical 

to  divide  i n to  cases, 

A ll  these  a b i l i t i es  are 

to  implement  t h is  stage 

to  use  and  how  is  d i f f i c u l t. 

For  instance, 
induction,  to  construct  some  new  terms, 
s u b s t i t u t i o n, 
previously  proved  theorem  or  to  set  up  some  i n t e r(cid:173)
mediate  sub-goals. 
r e l a t i v e ly  straightforward  to  apply  once  a  decision 
about  how  to  use  them  has  been  made,  but  deciding  on 
what 
therefore, 
The  f i r st  task  w i ll  be  to  make  SUMS  i n t e r a c t i v e. 
Procedures  w i ll  be  w r i t t en  to  correspond  to  the 
mathematical  use  of  such  instructions  as:  Try 
induction  o n . . .;  Consider  the  t e r m . . .;  S u b s t i t u t e . .. 
f o r . . .;  Consider  the  c a s e s . . .;  U s e . . .;  F i r st 
p r o v e . . .:  e t c. 
proofs  of  some  moderate]y  d i f f i c u lt 
Number  Theory. 
experience 
candidate  theorems  and  selecting  and  applying 
suitable  proof  s t r a t e g i e s. 

in 
The  second  task  is  to  use  t h is 
to  evolve  a  language  f or  c l a s s i f y i ng 

Then  SUMS  w i ll  be  led  through  the 

Our  i n t e n t i o n, 
in  two  parts. 

theorems 

If 

f or  help  in 

f a i ls  to  prove  a  theorem  it  asks 

For  instance,  a f t er  representing 
-Â»  a +c  <  b +d  (number  16  in 

' f i l e'  s l ot  as  evidence. 
to  construct  some  terms  before  continuing 

Some  progress  has  now  been  made  on  the  f i r st  task. 
SUMS 
constructing  new  terms  and  offers  the  contents  of  the 
diagram's 
The  user  may  then 
t e ll  SUMS 
with  the  proof. 
c  <  d 
a  <  b  & 
Section  5) 
in  the  diagram,  and  f a i l i ng  to  prove  i t, 
SUMS  asks  f or  help  and  suggests  the  constructions: 
a  +  d; 
If  the  user  orders  a  +  d  or 
a  proof  is  immediate. 
(d  -  c)  +  b  or 
On  the  i n i t i al  t r i al  run  through  the  22  previous 
f a i l u r es  (see  Section  5 ),  16  were  proved  using  t h is 
method  -  7  on  the  basis  of  the  proffered  evidence 
alone. 

Of  the  remaining  6  theorems  3  were  abandoned 

(b  -  a)  +  d,  help  is  requested  again. 

(d  -  c)  +  b  and  (b  -  a)  +  d. 

c  +  b  to  be  constructed 

If  instead  he  chooses 

c  +  b; 

and  3  produced  stack  overflow  because  the  length  of 
deductions  got  too  deep. 

7.  CONCLUSION. 

In  the  t r a d i t i o n al  representations  of  mathe(cid:173)

This  theorem  prover  uses  an  analogical  representation 
of  arithmetic  and  l e ts  t h is  representation  do  a ll  the 
work. 
matical  theories,  e . g.  a  set  of  axioms  in  a  resolution 
theorem  prover, 
to  assert  a  contra(cid:173)
dictory  set  of  formulae  without  t h is  s i t u a t i on  being 
readily 
assertions  once  made  are  r e a d i ly  accessible  and  any 
new  assertion  causes  a ll  sorts  of  conclusions  to  be 
drawn  and  asserted  so  that  contradictions  are  usually 
Spotted  q u i c k l y. 

In  the  present  representation 

is  quite  easy 

detected. 

it 

His 

those  sub-goals, 

a  syntactic  one  f or  proving  theorems 

r e j e c t i ng 
The  diagram 
to  prove  c e r t a in  very  basic  sub-goals 

In  3  Gelernter  achieved  a  s i m i l ar  effect  by  usi.ng  two 
representations: 
with  rules  and  axioms,  and  a  diagram  to  guide  t h is 
proof. 
'syntax  computer'  discovered  groups  of 
sub-goals  which  would  imply  the  present  g o a l,  and  his 
'diagram  computer'  vetted 
those  that  were  false  in  the  diagram. 
was  also  used 
{see  3  p.  42  No.  7)  but  t h is  is  a  risky  process, 
because  although  precautions  were  taken  to  prevent 
spurious  coincidences  entering  i n to  the  diagram, 
were  s t i ll  statements, 
provable  from  the  hypothesis  of  the  candidate  theorem. 
The  analogue  of  Celernter's  diagrams  in  arithmetic 
would  be  to  substitute  p a r t i c u l ar  numbers  f or  the 
variables  in  some  subgoal,  and  then  compute  the  t r u th 
or 

f a l s i ty  of  the  r e s u l t i ng  formula. 

true  in  the  diagram,  hut  not 

there 

typical) 

f a i r ly  common  among  mathematicians  (see 

SUMS  arose  from  an  attempt  to  represent  in  the  machine 
the  concept, 
f or  instance  2)  ,  of  an  ' i d e al  (or 
i n t e g e r ', 
i . e.  an  object  with  a ll  the  properties  of  an  integer 
( e . g.  being  equal  t o,  less 
divisor  of  some  other  interer)  but  which  is  not  any 
p a r t i c u l ar  integer  ( e . g.  3,  13  or  53). 
composed  of 
a r i s e,  so  that  anything  true 
from  the  hypothesis  of  the 
is  not  provable. 
used  f or  r e j e c t i ng  and  proving  sub-goals. 
something  may  be  neither  true  nor  false  in  the  diagram. 

theorem  and  anything  false 
So  t h is  diagram  can  be  l e g i t i m a t e ly 
Of  course 

In  a  'diagram' 
' i d e al  integers'  no  spurious  coincidences 

in  the  diagram  is  provable 

than,  not  equal  to  or  a 

6). 

in  a 

Nor,  of 

it  exhaustively 

l o g i c al  system,  but  neither  does 

theorems  or  does  it  check  t h e ir 
It  c e r t a i n ly  does  not  produce  proofs 

Does  SUMS  prove 
v a l i d i t y? 
formal 
test  the  candidate  theorem  in  some  model. 
course,  does  the  p r a c t i s i ng  mathematician  confine  him(cid:173)
s e lf  to  c i t h er  of  these  techniques. 
prepared  to  use  a  v a r i e ty  of  methods  to  achieve  his 
ends  (sec 
soundness  of  his  f i n al  proof,  he  produces  a  p r o t o c o l. 
Formal  l o g i c al  systems  were  introduced 
to  analyse  and 
j u s t i fy  t h is  procedure,  and  not  to  replace  it  as  a 
method  of  discovery. 
behaviour  of  mathematicians. 
proof  it 
t h e ir  truth)  and  records  these  as 
produces  a  protocol  which 
others  of  t h e ir  t r u th  ( i . e.  a  p r o o f ). 

During  the  course  of  a 
i t s e lf  of 

'proves'  many  facts  ( i . e.  convinces 

To  convince  himself,  and  others,  of  the 

SUMS  is  designed  to  simulate  the 

is  intended  to  convince 

Rather  he  is 

it  also 

t r u e; 

is 

just 

that 

the  author's  hope 

to  arithmetic,  but 

the  method  of  theorem 

It 
proving  outlined  in  t h is  paper  w i ll  prove  applicable 
not 
theories,  especially  c l a s s i c al  systems  w i th  a  single 
standard  model, 
In  fact  s i m i l ar  systems 
now  being  b u i lt  by  Aaron  Sloman  and  Mike  Liardet 
respectively. 

l i ke  analysis,  geometry  and  set  theory. 
theory  are 

f or  geometry  and  set 

to  a ll  mathematical 

The  author  also  hopes  that 

t h is  representation  may  make 

137 

some  c o n t r i b u t i on 
M o d e l l i n g. 
on 
use 

them 

to 

In  p a r t i c u l a r,  maybe 

the  s t u dy  of  P s y c h o l o g i c al 
it  sheds  some 

l i g ht 

t he  c u r i o us  b l a c k b o a rd  diaerams  which  m a t h e m a t i c i a ns 
to  h e lp 

' u n d e r s t a n d'  p r o b l e m s. 

ACKNOWLEDGEMENTS. 

to 

t he  M . I . T.  P r o g r e ss  R e p o rt  w i ll  be 
Not  q u i te  as  o b v i o u s,  b ut  e q u a l ly  i m p o r t a n t, 

My  debt 
o b v i o u s. 
a re 
Sloman,  Bo'b  B o y e r,  J  Moore,  Mike  L i a r d et  and  numerous 
o t h e r s. 

the  c o n v e r s a t i o ns  w i th  my  c o l l e a g u es  -  Aaron 

7 

REFERENCES. 

Bundy,  A. 

' T he  M e t a t h e o ry  of 

t he  E l e m e n t a ry 

E q u a t i on  C a l c u l u s '. 
of  L e i c e s t e r,  E n g l a n d.  1 9 7 1. 

P h . D.  T h e s i s.  U n i v e r s i ty 

B e t h,  E . S. 

'Semantic  E n t a i l m e nt  and  F o r m al 

D e r i v a b i l i t y'  .  Mededelingen 
A k a d.  v.  Wet.  New  S e r i e s,  V o l.  18  N o.  13, 
Amsterdam,  1955. 

der  R o n.  Med. 

G e l e r n t e r,  H. 

'A  Geometry  Theorem  P r o v i ng  M a c h i n e ', 

Computers  and  Thought  p p.  1 3 4 - 5 2,  McGraw  H i l l, 
1963. 

H e w i t t,  C. 

'PLANNER: 

A  Language 

f or  M a n i p u l a t i ng 

Models  and  P r o v i ng  Theorems 
P r o c e e d i n gs  of  1st 

I J C A I.  Washington  D . C .,  1969. 

in  a  R o b o t '. 

R o b i n s o n,  J . A. 

'A  Machine  O r i e n t ed  L o g ic  based 

t he  R e s o l u t i on  P r i n c i p l e1. 

on 
Mach.  12.  p p.  2 3 - 4 1,  1965. 

J . A s s o c . C o m p u t. 

Sloman,  A. 

' I n t e r a c t i o ns  between  P h i l o s o p hy  and 
I n t e l l i g e n c er 

A r t i f i c i al 
I n t u i t i on  and  N o n - L o g i c al  Reasoning 
I n t e l l i g e n c e '. 
P r o c e e d i n gs  of  2nd  I J C A I,  p p. 
2 7 0 - 6,  The  B r i t i sh  Computer  S o c i e t y,  1971,  also 
A r t i f i c i al 
H o l l a nd  P u b l i s h i ng  C o .,  1 9 7 1. 

I n t e l l i g e n ce  2,  p p.  209-25*  N o r th 

The  Role  of 

in 

M i n s k y,  M.  and  P a p e r t,  S. 

' P r o j e ct  M.A.C.  P r o c e ss 

R e p o r t ',  p p.  129-244,  M . I . T .,  1 9 7 1. 

138 

