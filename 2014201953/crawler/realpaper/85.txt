Aspects of Distributed and Modular Ontology Reasoning

Luciano Seraﬁni

ITC-IRST

Via Sommarive 18
38050 Trento, Italy

Alex Borgida

Andrei Tamilin

Department of Computer Science

DIT - University of Trento

Rutgers University

Piscataway, NJ 08855, USA

Via Sommarive 14
38050 Trento, Italy

serafini@itc.it

borgida@cs.rutgers.edu

tamilin@dit.unitn.it

Abstract

We investigate a formalism for reasoning with mul-
tiple local ontologies, connected by directional se-
mantic mappings. We propose:
(1) a relatively
small change of semantics which localizes incon-
sistency (thereby making unnecessary global sat-
isﬁability checks), and preserves directionality of
“knowledge import”; (2) a characterization of infer-
ences using a ﬁxed-point operator, which can form
the basis of a cache-based implementation for lo-
cal reasoners; (3) a truly distributed tableaux algo-
rithm for cases when the local reasoners use subsets
of SHIQ. Throughout, we indicate the applica-
bility of the results to several recent proposals for
knowledge representation and reasoning that sup-
port modularity, scalability and distributed reason-
ing.

1 Introduction
In applications ranging from information and service inte-
gration to the semantic web, it is expected that ontologies
will be fragmented and distributed, rather than monolithic.
Moreover, there are well-known advantages to breaking up
a large ontology into modules (e.g., see [9]). Recently,
there have been a number of proposals for systems sup-
porting modularized ontologies, where one can have a lo-
calized view either by “importing” speciﬁc information [9;
3] or by distributing reasoning [8; 4; 10].

Distributed Description Logics (DDLs) [2] are a particular
formalization of the notion of distributed ontology and rea-
soning, which starts from local T-boxes, and expresses se-
mantic connections between them as “bridge rules” between
pairs of connects. This paper contributes to the study of
DDLs, with the hope of shedding light both on the semantic
and the implementation aspects of all similar mechanisms.

In particular, the claimed contributions of the paper are
three-fold. First, on the semantic front, we propose a new
semantics for DDLs, which better captures the properties of
localized inconsistency and directionality. According to the
directionality property, semantic mappings have a direction
from a source ontology to a target ontology, and support
knowledge propagation only in such a direction. According

to localized inconsistency, the inconsistency in one compo-
nent T-box, or in some subgroup of connected components,
should not automatically render the entire system inconsis-
tent. These properties are desirable for all multi-module on-
tologies, and we discuss how our results apply to other pro-
posals, such as [9; 3; 8].

Second, we examine an approach which views the bridge
rules connecting two local ontologies as describing an oper-
ator that propagates knowledge in the form of DL subsump-
tion axioms. This is used as the basis of a characterization of
distributed DL reasoning using a ﬁxed point operator, which
does forward-propagation of axioms. In addition to its intrin-
sic interest, as part of a syntactic characterization of the DDL
consequence relation, this result can be used to extend the
caching technique described in [9] to a sound and complete
one.

The third contribution is a sound and complete distributed
tableaux algorithm that determines the satisﬁability of a
SHIQ concept in the context of the local axioms of an on-
tology and the extra knowledge imparted by the bridge rules.
This algorithm is the basis of a peer-to-peer implementation
of a proof mechanism for checking concept subsumption in a
distributed manner.

The rest of the paper is organized as follows. In Section 2
we review the formal framework of DDLs.
In Section 3
we introduce the notion of inconsistent local interpretation
that allows us to model partially inconsistent distributed on-
tologies, and show exactly how the new and old entailments
are related. The new semantics is also used in Section 4
to characterize the knowledge ﬂow induced by bridge rules,
and in Section 5 to present a sound and complete distributed
tableaux algorithm that computes satisﬁability/subsumption.

2 Distributed Description Logics
We brieﬂy recall the deﬁnition of DDL as given by Borgida
and Seraﬁni [2].

Syntax Given a non-empty set I of indexes, used to enumer-
ate local ontologies, let {DLi}i∈I be a collection of descrip-
tion logics.1 For each i ∈ I, let us denote a T-box of DL i as

1We assume the reader is familiar with description logics and

related reasoning systems, as described in [1].

following are examples of bridge rules from SWRC to SHOE:

SWRC : Publication

≡−→ SHOE : Publication

SWRC : InProceedings

SWRC : InBook

(cid:4)−→ SHOE : BookArticle

(cid:3)−→ SHOE : ConferencePaper (cid:8) WorkshopPaper

(1)

(2)

(3)

(cid:3)

(cid:2)

ΔIi,·Ii

(cid:4)
d∈D rij(d).

Semantics DDL semantics is a customization of the Local
Models Semantics for Multi Context Systems [5; 6]. Each
ontology Ti is locally interpreted by a standard DL interpre-
tation Ii =
. Since local domains may be hetero-
geneous (e.g., time may be represented by Rationals and In-
tegers in two ontologies), we need relations that model se-
mantic correspondences between heterogeneous domains. A
domain relation rij from ΔIi to ΔIj is a subset of ΔIi×ΔIj .
For example, if ΔI1 and ΔI2 are the Rationals and the Natu-
rals, then r12 could be the round-off function. We use r ij(d)
to denote {d(cid:9) ∈ ΔIj | (cid:5)d, d(cid:9)(cid:6) ∈ rij}; for D ⊆ ΔIi, we use
rij(D) for
A distributed interpretation I = (cid:5){Ii}i∈I,{rij}i(cid:6)=j∈I(cid:6) of
a DTBox T therefore combines the above two notions and is
said to satisfy (written I (cid:2)d) the elements of T if
1. Ii (cid:2)d A (cid:3) B for all A (cid:3) B in Ti
2. I (cid:2)d i : x
3. I (cid:2)d i : x
4. I (cid:2)d T, if for every i, j ∈ I, I (cid:2)d Ti and I (cid:2)d Bij
Finally, T (cid:2)d i : C (cid:3) D (read as “T d-entails i : C (cid:3) D”)
if for every I, I (cid:2)d T implies I (cid:2)d i : C (cid:3) D. We say T is
satisﬁable if there exists a I such that I (cid:2)d T. Concept i : C
is satisﬁable with respect to T if there is a I such that I (cid:2)d T
and CIi (cid:9)= ∅.

(cid:3)−→ j : y, if rij(xIi) ⊆ yIj
(cid:4)−→ j : y, if rij(xIi) ⊇ yIj

On injective domain correspondences A key novelty of
the semantic mappings in DDL is support for multiple lev-
els of granularity and perspective: allowing individuals to be
related using arbitrary binary relations rather than just bijec-
tion. For example, while it is traditional to state correspon-
dences such as “Wife in Ontology 1 corresponds to Moglie in
Ontology 2”, DDLs support domain correspondences that are
general binary relations, so that one can say that “Husband
and Wife in ontology 1 correspond to Couple in Ontol-
ogy 2”, which can be formalized by using onto-bridge rules
(cid:4)−→ 2 : Couple}.
{1 : Wife
In [4], DDLs are faulted because the collection of bridge rules
(cid:4)−→ 2 : Penguin} do
{1 : Bird
not render Penguin unsatiﬁable even if Bird is subsumed by
Fly in Ontology 1. As the example involving Couple shows,
the general formal pattern is correct in some cases, so this is
actually a problem of incomplete modeling.

(cid:4)−→ 2 : Couple, 1 : Husband
(cid:4)−→ 2 : Penguin, 1 : ¬Fly

In the case of Penguins, the extra information is that the
domain relation is one-to-one. In such cases, one should also
have added bridge rules stating that non-birds and ﬂying ob-
(cid:3)−→ 2 : ¬Penguin, 1 :
jects are non-penguins: {1 : ¬Bird
(cid:3)−→ 2 : ¬Penguin}. This would indeed lead to the con-
Fly
clusion T |=d 2 : Penguin (cid:3) ⊥.

Since the property that the domain relation is one-one over
some concept B arises quite frequently, we might consider

Figure 1: Extracts of the class hierarchies

Ti.2 To make every description D distinct, we will preﬁx it
with the index of ontology it belongs to, as in i : C. We use
i : C (cid:3) D to say that C (cid:3) D is being considered in the i-th
ontology.

Semantic mappings between different ontologies are ex-
pressed via bridge rules. A bridge rule from i to j is an ex-
pression, which in this paper is restricted to being one of the
following two forms:

i : x
i : x

(cid:3)−→ j : y — an into-bridge rule
(cid:4)−→ j : y — an onto-bridge rule

≡−→
where x and y are concepts. The derived bridge rule i : x
j : y can be deﬁned as the conjunction the corresponding into
and onto bridge rule.

Bridge rules from i to j express relations between i and j
viewed from the subjective point of view of the j-th ontology.
(cid:3)−→ j : D intuitively
For example, the into-bridge rule i : C
says that, from the j-th point of view, the individuals in con-
cept C in i correspond (via an approximation introduced by
an implicit semantic domain relation) to a subset of the indi-
viduals in its local concept D. Therefore, bridge rules from
i to j provide the possibility of translating into j’s ontology
some of the concepts of a foreign ontology i.
A distributed T-box (DTBox) T = (cid:5){Ti}i∈I , B(cid:6) therefore
consists of a collection of T-boxes {Ti}i∈I, and a collection
of bridge rules B = {Bij}i(cid:6)=j∈I between them.
Example 2.1 Figure 1 shows fragments of class hierarchies
from two ontologies, SWRC3 and SHOE4, available from the
DAML on-line library. These can be viewed as local T-boxes.
For the sake of demonstrating the value of mappings, we con-
sidered oversimpliﬁed SHOE ontology without imports. The

2We assume that a T-box will contain all the information neces-
sary to deﬁne the terminology of a domain, including not just con-
cept and role deﬁnitions, but also general axioms relating descrip-
tions, as well as declarations such as the transitivity of certain roles.
This is in keeping with the intent of the original paper introducing
the terms T-box and A-box.

3www.semanticweb.org/ontologies/swrc-onto-2000-09-10.daml
4www.cs.umd.edu/projects/plus/DAML/onts/univ1.0.daml

adding a new kind of bridge rule to express it, writing some-
≤1−→ Penguin. Interestingly, it can be proven that in
thing like
the context of DDLs, such rules can be eliminated by syntac-
≤1−→ G and
tically manipulating the DTBox, so that whenever
(cid:3)−→ ¬(H (cid:12) G)
A
is added. The tableaux technique in Section 5 could however
use such rules more efﬁciently without the encoding.

(cid:4)−→ H are present, a new bridge rule ¬A

Properties and Desiderata for DDL We ﬁrst give some
basic ways in which subsumption and a combination of
onto- and into-bridge rules allows to propagate subsumptions
across ontologies.
(cid:3)−→
Lemma 2.1 If Bij contains i : A
j : H, then T |=d i : A (cid:3) B =⇒ T |=d j : G (cid:3) H
the subsumption SHOE :
Thus,
BookArticle (cid:3) Publication can be inferred in DDL through
bridge rules (1) and (3), and the subsumption InBook (cid:3)
Publication contained in TSW RC .

(cid:4)−→ j : G and i : B

in Example 2.1,

If the local languages support disjunction as a concept con-
structor then a more general form of propagation can occur:
(cid:3)−→
Lemma 2.2 If Bij contains i : A
T |=d i : A (cid:3) (cid:5)n
j : Hk for 1 ≤ k ≤ n (with n ≥ 0), then

k=1 Bk =⇒ T |=d j : G (cid:3) (cid:5)n

(cid:4)−→ j : G and i : Bk
k=1 Hk

Additional properties would be desirable for DDL entail-
ment. In particular, since the intended meaning is that bridge
rules Bij constitute a semantic channel which allows ontol-
ogy j to access and import knowledge from ontology i, we
want information ﬂow to be “directional” in some sense. To
express this, we ﬁrst introduce the notion of bridge graph.
Deﬁnition 2.1 The bridge graph GT of a DTBox T is a di-
rected graph with an arc from i to j exactly when the set of
bridge rules Bij is non-empty.

We can then state the main property we are looking for as:
Directionality desideratum If in GT there is no path from i
to j, then T |=d j : A (cid:3) B if and only if T(cid:9) |=d j :
is obtained by removing Ti, Bki, and
A (cid:3) B, where T(cid:9)
Bik from T.

This says that knowledge is propagated only through bridge
rules, so that if there are no bridge rules that go from i towards
j, then j is not affected by i. The following two isolation
properties are special cases of this:
Isolation 1 A T-box without incoming bridge rules is not af-
fected by other T-boxes. (Formally, if B ki = ∅ for all
k (cid:9)= i ∈ I, then T |=d i : A (cid:3) B =⇒ Ti (cid:2) A (cid:3) B)

Isolation 2 A T-box without outgoing bridge rules does not

affect the other T-boxes.

Unfortunately, property Isolation 1 does not always hold,
because of onto-rules. Indeed, in the presence of onto-rule
(cid:4)−→ 2 : G from T-box T1 to T2, if T2 entails (cid:16) (cid:3) G,
1 : A
then 1 : A cannot be empty according to DDL semantics, and
so, for example, an inconsistency would be generated if T 1
entails A (cid:3) ⊥. This is despite the fact that the bridge rules
are toward T2.

Property Isolation 2 may also not hold. Indeed, if T 1 is
unsatisﬁable, then T2 |=d 2 : X (cid:3) Y for every X, Y , even if
there are no bridge rules connecting T 1 with T2, because there
are no satisfying distributed interpretations at all. Note that
in a DDL, inconsistency may arise in a connected group of T-
boxes even if each T-box is locally consistent; e.g., consider
the case in the hypothesis of Lemma 2.1, when T j |= (cid:16) (cid:3) G
and Tj |= H (cid:3) ⊥.

This is a signiﬁcant problem, because a localized inconsis-
tency spreads and contaminates reasoning in all other local
ontologies, even in the absence of connections to them, be-
cause there will be no satisfying distributed interpretation,
and hence every statement about them is true, as usual in
logic. This problem plagues all modular and distributed rep-
resentation systems.

In the following section we propose an extension of the

initial semantics in order to ﬁx this problem.

3 Inconsistency in DDL
There are a number of possible approaches to handle the
problem of inconsistency propagation.

(1) Deﬁne d-entailment in a 2-step manner, ﬁrst eliminat-
ing local T-boxes that are inconsistent, and then using the
standard deﬁnition. The problem with this approach is that
it is non-monotonic, and it does not deal with cases where the
inconsistency arises due to several connected local sources.

(2) Use some variant of a multi-modal epistemic seman-
tics, which allows for models of even inconsistent knowledge
in the case when the set of accessible worlds is empty. Such
an approach was used in [6] for Distributed First Order Log-
ics, but its computational complexity/decidability aspects are
quite worrisome, and the precise impact of such non-standard
semantics on logical consequences is hard to explain in an
intuitive manner to users.

(3) Introduce some special interpretation, called a “hole” in
[2], whose role is to interpret even inconsistent local T-boxes.
We pursue this latter option.
Deﬁnition 3.1 A hole for a T-box T is an interpretation I  =
(cid:5)∅,·(cid:6), where the domain is empty.
Of course, the important property of holes is that I  |= X (cid:3)
Y for every X and Y , since both sides are interpreted as the
empty set.5 We will however continue to refer to T-boxes as
“inconsistent/unsatisﬁable” in case there are no interpreta-
tions other than I  which satisfy all the axioms in it.
Let us extend the notion of d-entailment |= d, obtaining the
|= relation, by also allowing holes as interpretations for local
T-boxes. Note that now even if some local T-box T i is incon-
sistent, we still have an interpretation for the whole DTBox:
one that uses I  to satisfy Ti.

Properties of the semantics with holes First, the new se-
mantics does the intended job:
Theorem 3.1 The earlier-stated “directionality desidera-
tum” holds for |=.

5We are indebted to XXX for pointing out an earlier error, and to

YYY referee for suggesting the empty domain.

Non-standard semantics (such as multivalued logics) can
however distort the meaning of the original semantics in un-
predictable ways. The following results should be reassuring
in this respect.
For any T and any i ∈ I, let T(i) (the distributed T-box
with the i-th local T-box viewed as inconsistent) be obtained
by removing Ti, Bij and Bji form T, and by extending each
(cid:4)−→ j : G ∈ Bij}.
Tj with the set of axioms {G (cid:3) ⊥|i : A
For any ﬁnite set J = {i1, . . . , in}, such that J ⊂ I, let T(J)
be T(i1) . . . (in). (If J is empty T(J) = T.) The following
then precisely characterizes the relationship of |= d and |=:
Proposition 3.1 T |= i : X (cid:3) Y if and only if for every
subset J ⊆ I not containing i, T(J) |=d i : X (cid:3) Y .

≡−→ j : Ci and i : ¬C

≡−→ j : ¬Ci.
bridge rules i : C
Our semantics then provides for directionality and locality,
and the next section provides a distributed satisﬁability test-
ing algorithm for the semantics with holes.

Finally, the C-OWL [3] proposal for contextualized ontolo-
gies, uses a similar model theory as DDL. The only differ-
ence concerns the deﬁnition of hole, which, in C-OWL was
deﬁned on a non empty set. Those notion of hole supports
directionality in all the cases except the case of presence of
i : ⊥ (cid:4)−→ j : ⊥ rule, which allows to propagate back incon-
sistency. The particular version of “holes” given in this paper
gives to C-OWL the directionality property, in addition to the
localized inconsistency it already had.

Moreover, in acyclic cases the relationship is even clearer:
Proposition 3.2 Let T = (cid:5)T1,T2, B12(cid:6) be a DTBox. Then
(i) if T1 is consistent, then for j ∈ {1, 2}, T |= j : X (cid:3) Y
(ii) if T1 is inconsistent, then T |= 2 : X (cid:3) Y if and only if

if and only if T |=d j : X (cid:3) Y .

T2 ∪ {G (cid:3) ⊥ | 1 : A

(cid:4)−→ 2 : G ∈ B12} |= X (cid:3) Y

Application to Other Frameworks As noted earlier, the
problem of local inconsistency polluting the inferences of all
the modules in a modular representation is quite general. We
examine how the approach presented here can be applied to
two previously proposed schemes.

[9] proposes an elegant notion of modular ontology which
starts from the semantic framework of DDLs, but restricts
bridge rules to “identities” deﬁning new local names j : N
using concepts i : C from T-box i, modulo a semantic do-
main correspondence exactly like r ij for DDLs.6 This can be
modeled by replacing every deﬁnition i : C ≡ j : N by the
≡−→ j : N , Therefore the seman-
composed bridge rule i : C
tics involving holes introduced in the previous section can be
applied to this approach, in order to localize inconsistencies
in modules.

The Somewhere Peer Data Management System [8] con-
sists of a collection of peers which maintain local ontologies,
including repositories of “extensional data”. Peers are ac-
quainted with neighbors, whose concepts they can use, and
query processing involves intensional distributed reasoning
for query rewriting. Since this reasoning is (semantically)
based on a single global interpretation, it is subject to the
above mentioned difﬁculties due to inconsistency.
In fact,
for completeness, a global consistency check, involving even
unconnected peers, would be required. We would suggest
adopting a distributed semantics with holes, such as that of
DDL. In particular, current peer links in Somewhere can be
reduced to subsumption expressions like 1 : C (cid:12) 3 : D (cid:3) 2 :
E. A DDL can be constructed from this by replacing occur-
rences of i : C in peer j by new, local symbol C i, and adding

6Although [9] originally deﬁnes imported names using conjunc-
tive queries over concepts and roles in T-box j, it then says that these
can be “rolled up” into descriptions. Although this may in fact not
always be doable, we will deal here with exactly those deﬁnitions
for which this roll-up holds.

4 Fixed-point semantics of bridge rules
As we saw earlier, combinations of bridge rules allow the
propagation of subsumptions across T-boxes. To better under-
stand how this propagation happens, we will associate with a
set Bij of bridge rules an operator of the same name, which
extends the j-th T-box with a set of subsumption axioms that
are the transformation via bridge rules of subsumptions in the
i-th T-box.

(cid:6)

(cid:2)

, where:

ΔJ ,·J(cid:3)

ΔI ,·I(cid:3)
(cid:2)

and
of the same language L, the disjoint union of

Before proceeding further, we need to introduce the con-
cept of disjoint union for interpretations. To begin with, we
deﬁne as usual the disjoint union of two, possibly overlapping
sets S and T as S (cid:20) T = (S × {#}) ∪ (T × {@}), where
the values are distinguished by tupling with two discriminant
symbols — # and @, in this case. This is generalized to the
i∈K Si of a collection of sets {Si}i∈K in-
disjoint union
dexed with (possibly inﬁnite) K, by using the indeces i as the
discriminants.
Deﬁnition 4.1 Given two interpretations I =
ΔI(cid:11)J ,·I(cid:11)J(cid:3)
J =
I and J , denoted by I (cid:20) J , is
1. ΔI(cid:11)J = ΔI × {#} ∪ ΔJ × {@}
2. for concept A, (A)I(cid:11)J = AI × {#} ∪ AJ × {@}
3. for role R, RI(cid:11)J = {(cid:5)(x, #), (y, #)(cid:6) | (cid:5)x, y(cid:6) ∈ RI} ∪
{(cid:5)(w, @), (z, @)(cid:6) | (cid:5)w, z(cid:6) ∈ RJ }
(cid:6)
k∈K Ik can similarly be
Disjoint union for interpretations
generalized to the case of a sets. Intuitively the interpreta-
tion I (cid:20)J is interpretation that is composed of two unrelated
subparts one is isomorphic to I and the other to J .
(cid:6)
Deﬁnition 4.2 A description logic family DL has the disjoint
k∈K EIk holds for
union satisﬁability property if EI(cid:5) =
all concepts and roles E over DL, and for all interpretations
I(cid:9) =
Lemma 4.1 SHIQ, and its sub-languages, have the dis-
tributed union satisﬁability property.
On the other hand, languages that support nominals (such as
OWL), or A-boxes do not have this property.

k∈K Ik.

(cid:2)

(cid:6)

The bridge operator The bridge operator essentially ap-
plies generalized subsumption propagation Lemma 2.2, to
ﬁnd new subsumptions:

B12(T1) =

Deﬁnition 4.3 Given a set of bridge rules B12 from DL1 to
DL2, the bridge operator B12(·), taking as input a T-box in
DL1 and producing a T-box in DL 2, is deﬁned as follows:

(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)

T1 |= A (cid:3) (cid:5)n

⎧⎪⎪⎨
⎪⎪⎩G (cid:3) n(cid:11)
1 : A
1 : Bk
for 1 ≤ k ≤ n, n ≥ 0
(cid:5)0
k=1 Dk denotes ⊥.)

(cid:4)−→ 2 : G ∈ B12,
(cid:3)−→ 2 : Hk ∈ B12,

k=1 Bk,

Hk

k=1

⎫⎪⎪⎬
⎪⎪⎭

(Notationally,
It is remarkable that these are essentially all the inferences
that one can get, if we use the semantics with holes:
Theorem 4.1 Let T12 = (cid:5)T1,T2, B12(cid:6) be a distributed T-
box. If DL1 and DL2 have the distributed union satisﬁability
property then:

T12 |= 2 : X (cid:3) Y ⇐⇒ T2 ∪ B12(T1) |= X (cid:3) Y
For any family B = {Bij}i,j∈I of bridge rules, we can
combine these into a new operator B on a family of T-boxes
as follows:

B({Ti}i∈I) =

⎧⎨
⎩Ti ∪

(cid:16)
j(cid:6)=i

⎫⎬
⎭
Bji(Tj)

i∈I

If I is ﬁnite and each Bij is ﬁnite, then there is a positive
integer b such that for every family of T-boxes T, B b(T) =
Bb+1(T). Let us then deﬁne B∗(T) as Bb(T), where b is
the ﬁrst positive integer such that Bb(T) = Bb+1(T). Fur-
thermore let Bb+1(T)i, be the i-th T-box in Bb+1(T).
Theorem 4.2 For every T = (cid:5)T, B(cid:6), T |= j : X (cid:3) Y if
and only if the j-th T-box of B∗(T) entails X (cid:3) Y .
Applications to Caching A number of researchers have
considered the idea of caching locally the necessary infor-
mation from the imported ontology T other , since this is as-
sumed to be both more efﬁcient (there is no need to interrupt
local reasoning, while waiting for answers from the other on-
tology), and more prespicuous from the point of view of the
local user: in order to understand an imported concept F , it
is not necessary to understand all of T other , only the locally
cached part, which is presumed to be much smaller. (This
idea is also known as “subsetting”, and there is considerable
research on this topic in the ontology community .)

Theorem 4.2 above indicates that it is possible to ﬁnitely
pre-compile in a sound and complete manner the subsump-
tion information imported into a local ontology T j by the
bridge rules in a DTBox T: compute and store it.
In a similar vein, [9] takes the set of imported concept
deﬁnitions {Nk ≡ other : Dk | k = 1, . . . , n}, and
then computes and caches the subsumption hierarchy of the
{Nk}. Since we have explained in Section 3 that the mod-
ule mechanism in [9] can be represented as a DDL, Lemma
2.2 indicates that if the language contains at least ALC, and
if if it is possible to ask subsumption queries about com-
plex concepts composed using the imported deﬁnitions, then
it is not sufﬁcient to cache only subsumptions of the form
Dk1 (cid:3) Dk2, since there may be additional subsumptions en-
tailed, involving disjunctions. On the other hand, by Theo-
rem 4.2 it is sufﬁcient to cache all subsumptions of the form

Nk (cid:3) Nk1 (cid:22) . . . (cid:22) Nkm, whose deﬁnitions satisfy the condi-
tion7 Tother |= Dk (cid:3) Dk1 (cid:22) . . . (cid:22) Dkm.

5 A distributed tableaux algorithm for DDL
In this section we describe a tableaux-based decision proce-
dure for T |= i : X (cid:3) Y , for DTBoxes whose bridge graph
GT is acyclic. The cyclic case is left for future work, pending
the identiﬁcation of a loop blocking strategy that preserves
the independence of the local proofs.
To simplify the description, we suppose that local ontolo-
gies are expressed in (a subset of) the SHIQ language —
one of the most widely known DLs. Also, we will assume
that the consequences of bridge rules are atomic names. (This
condition can easily be achieved by introducing, through def-
initions, names for the consequent concepts.). We need the
usual notion of axiom internalization, as in [7]: given a T-box
Ti, the concept CTi is deﬁned as CTi =
¬E (cid:22) D;
also, the role hierarchy RTi contains the role axioms of Ti,
plus additional axioms P (cid:3) U , for each role P of T i, with U
some fresh role.
The algorithm for testing j-satisﬁability of a concept ex-
pression X (i.e., checking T (cid:9)|= j : X (cid:3) ⊥) builds, as
usual, a ﬁnite representation of a distributed interpretation I,
by running local autonomous SHIQ tableaux procedures to
ﬁnd each local interpretation Ii of I.
Deﬁnition 5.1 For each j ∈ I,
the function DTab j
takes as input a concept X and tries to build a rep-
(cid:9)= ∅ (called a completion
resentation of Ij with XIj
tree [7]) for the concept X (cid:12) CTj (cid:12) ∀U.CTj , using the
SHIQ expansion rules, w.r.t.
the role hierarchy RTj ,
plus the following additional “bridge” expansion rules

E(cid:3)D∈Ti

(cid:2)

Unsat-Bij-rule

2. IsSati(A (cid:4) ¬(cid:5)
if 1. G ∈ L(x), i : A
then L(x) −→ L(x) ∪ {(cid:5)

H(cid:3)}

(cid:2)−→ j : G ∈ Bij, and
B(cid:3)) = False, for some H(cid:3) (cid:5)⊆ L(x),

New-Bij-rule

(cid:2)−→ j : G ∈ Bij, and
(cid:4)−→ j : H ∈ Bij}, and

if 1. G ∈ L(x), i : A
3. for no B(cid:3) ⊆ B is IsSati(A (cid:4) ¬(cid:5)
2. B ⊆ {B|i : B
4. for no B(cid:3) ⊇ B is IsSati(A (cid:4) ¬(cid:5)
then if DTabi(A (cid:4) ¬(cid:5)
then IsSati(A (cid:4) ¬(cid:5)
else IsSati(A (cid:4) ¬(cid:5)

B) = True
B) = False

B) = Satisﬁable

B(cid:3)) = False, and
B(cid:3)) = True ,

The idea, inspired by bridge operator B ij(·), is that whenever
DTabj encounters a node x that contains a label G which is
a consequence of an onto-bridge rule, then if G (cid:3) (cid:22)H is en-
H, is added to x. To
tailed by the bridge rules, the label
determine if G (cid:3) (cid:22)H is entailed by bridge rules B ij, DTabj
invokes DTabi on the satisﬁability of the concept A(cid:12)¬((cid:22)B).
DTabi will build (independently from DTab j) an interpreta-
tion Ii, as illustrated in Figure 2. To avoid redundant calls,
DTabj caches the calls to DTabi in a data structure IsSati,

(cid:5)

7There is no need to iterate if we assume that imported names
cannot be used in additional axioms of the local ontology – only for
labeling information on the semantic web, for example.

DTabi(A (cid:3) ¬(B1 (cid:2) B2))

L(z) = {A (cid:3) ¬(B1 (cid:2) B2)}
z
..........
..........
..........
..........
..........
..........
...........
..........

......................................................................................................................................................................................................................
...............................................................................................................................................................................................................................................................................

.....................................

............................

DTabj(X)

.....................................
..........
..........
..........
Bij
..........
..........
..........
..........
..........
..........
..........
..........
..........
..........

......................................................................................................................................................................................................................................................................................................................................

x L(x) = {X}
..........
..........
..........

......................................................................................................................................................................................................................................................................................................................................

SHIQ expansion rules
..........
..........
..........
............................
y L(y) = {G, . . .}
..
L(y) = {G, . . . , H1 (cid:2) H2}

......................................................................

Figure 2: Subsumption propagation forced by bridge rules
i : A

(cid:3)−→ j : H1 and i : B2

(cid:4)−→ j : G, i : B1

(cid:3)−→ j : H2

which caches the subsumption propagations that have been
computed so far. Speciﬁcally, for every C, IsSat i(C) will be
set to True/False whenever T (cid:9)|= i : C (cid:3) ⊥ is determined.
Theorem 5.1 (Termination) For any acyclic DTBox T and
for any SHIQ concept X, DTabj(X) terminates.
Theorem 5.2 (Soundness and completeness) j : X is satis-
ﬁable in T if and only if DTabj(X) can generate a complete
and clash-free completion tree.

Note that the construction of the distributed interpretation
can be parallelized, as each local tableau procedure can run
independently from the others, without checking for blocking
conditions with nodes generated by the other local tableaux.
The distributed tableaux proposed above has been imple-
mented in a peer-to-peer setting, and is available for down-
load. Some preliminary experiments have been done to see
how distributed algorithm performs w.r.t. a global tableaux
algorithm based on the encoding described in [2].
Example 5.1 To clarify how DTabj works, Table 1 reports
the trace of DTabshoe invokation for satisﬁability test of
SHOE : BookArticle (cid:12) ¬Publication from Example 2.1.
Notice that at step (3) DTabshoe applies the new-Bij-rule
and invokes DTabswrc, using the bridge rules (1) and (3).
DTabshoe(BookArticle (cid:13) ¬Publication)
Step
(1)

tree
x

rule

(2)
∗
(3

)

(4)

(5)

x

x

x

x

labeling and IsSat
L(x) = {BookArticle (cid:13) ¬Publication}
IsSat = {}
L(x) = {BookArticle, ¬Publication}
IsSat = {}
L(x) = {BookArticle, ¬Publication}
(cid:17)
(cid:18)
IsSat = {InBook (cid:13) ¬Publication = False}
BookArticle, ¬Publication
L(x) =
Publication
IsSat = {InBook (cid:13) ¬Publication = False}
L(x) = {Clash}
IsSat = {InBook (cid:13) ¬Publication = False}

initial node
(cid:13)-rule

new-Bij -rule

Unsat-Bij -rule

Clash-rule

rule

initial node
SHIQ-rules
Clash-rule

DTabswrc(InBook (cid:13) ¬Publication)
labeling and IsSat
Step
L(x) = {InBook (cid:13) ¬Publication}
(1)
IsSat = {}

tree
x

.
.
.

L(x) = {Clash}

(n)

x

Table 1: Trace of DTabshoe invokation

6 Conclusions
This paper has focused on the properties of a KR&R for-
malism that supports multiple, local knowledge bases con-
nected by semantic mappings. It has proposed a minor mod-
iﬁcation to the semantics of DDL, which has the salutary
effect of localizing inconsistency to the connected compo-
nent of a distributed reasoner in which it occurs, and of
making “knowledge import” be directional. This resolves
a problem left open in [2]. Not only is the new seman-
tics easy to explain, but so are its effect on the inferences
that continue to be valid. We believe that these features
are desirable for all distributed and modular KR&R for-
malisms, and we provide several such applications [9; 3;
8]. We note here that although the e-connections formalism,
and its perspectival restriction [4], can simulate DDLs, their
fundamental goal is to obtain hybrid logics, and in such situ-
ations there is no motivation for localizing inconsistency.

The same semantics forms the foundation of a ﬁxed-point
characterization of the formulas entailed by DDL, which can
be used as the basis of a sound and complete cache-based
solution to the problem of distributed reasoning. It is also
the standard with respect to which one can prove the com-
pleteness (as well as, of course, soundness) of a distributed
tableaux reasoner which we have implemented in a peer-to-
peer setting.

References
[1] F. Baader, D. Calvanese, D. McGuinness, D. Nardi, P.F.
Patel-Schneider, editors. The Description Logic Hand-
book, Cambridge University Press, 2003.

[2] A. Borgida and L. Seraﬁni. “Distributed description log-
ics: Assimilating information from peer sources”, J. of
Data Semantics 1(1), pp.153–184, 2003.

[3] P. Bouquet, F. Giunchiglia, F. van Harmelen, L. Seraﬁni,
and H. Stuckenschmidt. “Contextualizing ontologies”, J.
of Web Semantics 1(4), 2004.

[4] B. Cuenca Grau, B. Parsia, E. Sirin. “Working with Mul-
tiple Ontologies on the Semantic Web”, Proc. ISWC’04,
LNCS vol.3298, pp.620–634. 2004.

[5] C. Ghidini and F. Giunchiglia. “Local model semantics,
or contextual reasoning = locality + compatibility”, Artiﬁ-
cial Intelligence, 127(2):221–259, 2001.

[6] C. Ghidini and L. Seraﬁni. “Distributed ﬁrst order log-
ics”, Proc. Frontiers of Combining Systems, pp.121–139,
2000.

[7] I. Horrocks, U. Sattler, and S. Tobies. A description
logic with transitive and converse roles, role hierarchies
and qualifying number restriction. Technical Report 99-
08, Technische Universit¨at Dresden, LTCS, 1999.

[8] M-C. Rousset. “Small can be beautiful in the Semantic

Web”, Proc. ISWC’04, LNCS vol.3298, pp.6–16, 2004.

[9] H. Stuckenschmidt and M. Klein. “Integrity and change

in modular ontologies”, IJCAI’03, pp.900-908, 2003.

[10] D. Calvanese, G. De Giacomo, M. Lenzerini, R. Rosati.
”Logical foundations of peer-to-peer data integration”,
PODS’04, pp.241-251, 2004.

