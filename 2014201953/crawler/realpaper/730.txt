The Logic behind Weighted CSP

∗

Carlos Ans´otegui

DIEI, UdL

Mar´ıa Luisa Bonet

Jordi Levy and Felip Many`a

LSI, UPC

IIIA, CSIC

Jaume II 69, Lleida, Spain

Barcelona, Spain

Campus UAB, Bellaterra, Spain

Abstract

We deﬁne a translation from Weighted CSP to
signed Max-SAT, and a complete resolution-style
calculus for solving signed Max-SAT. Based on
these results, we then describe an original exact al-
gorithm for solving Weighted CSP. Finally, we de-
ﬁne several derived rules and prove that they en-
force the main soft arc consistency deﬁned in the
literature when applied to Weighted CSP instances.

1 Introduction

The Weighted Constraint Satisfaction Problem (WCSP) is a
well known soft constraint framework for modelling over-
constrained problems with practical applications in domains
such as resource allocation, combinatorial auctions and bioin-
formatics. WCSP is an optimization version of the CSP
framework in which constraints are extended by associating
costs to tuples. Solving a WCSP instance, which is NP-hard,
consists in ﬁnding a complete assignment of minimal cost.

Global consistency WCSP algorithms such as Bucket
Elimination [Dechter, 1999] solve WCSP instances without
search. They obtain an optimal solution by applying, to
the original instance, transformations that preserve cost dis-
tributions. On the other hand, WCSP Branch and Bound
(BnB) based algorithms such as PFC [Freuder and Wallace,
1992], PFC-MRDAC [Larrosa and Meseguer, 1996], Rus-
∗ [Larrosa
sian Doll Search [Verfaillie et al., 1996], MAC
∗ [Larrosa and Schiex, 2003] and
and Schiex, 2004], MFDAC
∗ [de Givry et al., 2005] perform a systematic search
MEDAC
in the space of all possible assignments. They differ in the
method of computing a lower bound at each node of the proof
tree to prune some parts of the search space. Modern al-
∗
enforce
gorithms such as MAC
some extension of Arc Consistency (AC) to WCSP —Soft
∗
) or Existential Di-
AC (AC
∗
)— when computing that lower bound.
rectional AC (EDAC
In this paper we relate ideas from three different re-
search communities —Multiple-Valued Logic, Satisﬁability
and Constraint Processing— with the aim of describing the

∗
), Full Directional AC (FDAC

∗
, MFDAC

∗
and MEDAC

∗This research was founded by the MEC research projects
iDEAS (TIN2004-04343), Mulog (TIN2004-07933-C03-01/03) and
SofSAT (TIC2003-00950), and the program Ram´on y Cajal.

underlying logic of WCSP. First, we deﬁne an encoding,
called signed encoding, that transforms any WCSP instance
to a Signed Max-SAT instance, where Signed Max-SAT is
the Max-SAT problem of the multiple-valued clausal forms
known as Signed CNF formulas (see [Ans´otegui and Many`a,
2003] and references therein). Second, we deﬁne a complete
resolution calculus for solving Signed Max-SAT. Third, we
devise an exact algorithm for solving WCSP from the com-
pleteness proof of the resolution calculus. Fourth, we deﬁne
several sound inference rules for Signed Max-SAT that en-
force some known arc consistency properties when applied to
the signed encoding of any binary WCSP instance.

The structure of the paper is as follows. Section 2 contains
preliminary deﬁnitions and the signed encoding. Section 3
deﬁnes the inference rule for signed Max-SAT and proves its
soundness and completeness. Section 4 describes an exact
algorithm for solving Weighted CSP. Section 5 deﬁnes four
derived rules that enforce soft local consistency properties.
Finally, Section 6 presents the conclusions of our work.

2 Preliminaries
Deﬁnition 1 A truth value set, or domain, N is a non-empty
ﬁnite set {i1, i2, . . . , in} where n denotes its cardinality. A
sign is a subset S ⊆ N of truth values. A signed literal is
an expression of the form S :p, where S is a sign and p is a
propositional variable. The complement of a signed literal l
of the form S :p, denoted by l, is S :p = (N \ S):p. A signed
clause is a disjunction of signed literals. A signed CNF for-
mula is a multiset of signed clauses.

Deﬁnition 2 An assignment for a signed CNF formula is a
mapping that assigns to every propositional variable an ele-
ment of the truth value set. An assignment I satisﬁes a signed
literal S :p iff I(p) ∈ S, satisﬁes a signed clause C iff it sat-
isﬁes at least one of the signed literals in C, and satisﬁes a
signed CNF formula Γ iff it satisﬁes all clauses in Γ. A signed
CNF formula is satisﬁable iff it is satisﬁed by at least one as-
signment; otherwise it is unsatisﬁable.

Deﬁnition 3 The Signed Max-SAT problem for a signed
CNF formula consists in ﬁnding an assignment that mini-
mizes the number of falsiﬁed signed clauses.

Deﬁnition 4 A constraint satisfaction problem (CSP) in-
stance is deﬁned as a triple (cid:5)X, D, C(cid:6), where X =

IJCAI-07

32

{x1, . . . , xn} is a set of variables, D = {d(x1), . . . , d(xn)}
is a set of domains containing the values the variables may
take, and C = {C1, . . . , Cm} is a set of constraints. Each
constraint Ci = (cid:5)Si, Ri(cid:6) is deﬁned as a relation Ri over a
subset of variables Si = {xi1
}, called the constraint
scope. The relation Ri may be represented extensionally as a
subset of the Cartesian product d(xi1
Deﬁnition 5 An assignment v for a CSP instance (cid:5)X, D, C(cid:6)
is a mapping that assigns to every variable xi ∈ X an ele-
ment v(xi) ∈ d(xi). An assignment v satisﬁes a constraint
(cid:5){xi1

}, Ri(cid:6) ∈ C iff (cid:5)v(xi1

) × · · · × d(xik

), . . . , v(xik

)(cid:6) ∈ Ri.

, . . . , xik

, . . . , xik

).

Deﬁnition 6 A Weighted CSP (WCSP) instance is deﬁned as
a triple (cid:5)X, D, C(cid:6), where X and D are variables and do-
mains as in CSP. A constraint Ci is now deﬁned as a pair
(cid:5)Si, fi(cid:6), where Si = {xi1
} is the constraint scope
) → N is a cost function. The
and fi : d(xi1
cost of a constraint Ci induced by an assignment v in which
the variables of Si = {xi1
, . . . , bik
is fi(bi1
). An optimal solution to a WCSP instance
is a complete assignment in which the sum of the costs of the
constraints is minimal.

} take values bi1

) × · · · × d(xik

, . . . , xik

, . . . , xik

, . . . , bik

Deﬁnition 7 The Weighted Constraint Satisfaction Problem
(WCSP) for a WCSP instance consists in ﬁnding an optimal
solution for that instance.

(cid:2)

Deﬁnition 8 The signed encoding of a WCSP instance
(cid:5)X, D, C(cid:6) is the signed CNF formula over the domain
xi∈D d(xi) that contains for every possible tu-
N =
ple (cid:5)bi1
) of every con-
straint (cid:5){xi1
) copies of
the signed clause:

}, fi(cid:6) ∈ C, fi(bi1

) × . . . × d(xik

(cid:6) ∈ d(xi1

, . . . , xik

, . . . , bik

, . . . , bik

{bi1

}:xi1

∨ · · · ∨ {bik

}:xik

.

An alternative encoding is to consider signed clauses with
weights instead of allowing multiple copies of a clause. For
the sake of clarity we use unweighted clauses. Neverthe-
less, any efﬁcient implementation of the algorithms proposed
should deal with weighted clauses. The extension of our the-
oretical results to weighted clauses is straightforward.
Proposition 9 Solving a WCSP instance P is equivalent to
solving the Signed Max-SAT problem of its signed encoding;
i.e., the optimal cost of P coincides with the minimal number
of unsatisﬁed signed clauses of the signed encoding of P .

PROOF: For every combination of values to the variables of
the scope of a constraint Ci = (cid:5)Si, fi(cid:6) , the signed encod-
ing contains as many clauses as the cost associated with that
combination.
If an assignment of the signed encoding re-
stricted to the variables of Si coincides with a combination
of Ci with cost 0, then all the clauses of the signed encoding
introduced by Ci are satisﬁed because there is no clause for-
bidding that combination. If an assignment of the signed en-
coding restricted to the variables of Si coincides with a com-
(cid:6) of Ci with cost u, where u > 0, then,
bination (cid:5)bi1
by construction of the signed encoding, only the u clauses of
the form {bi1
}:xik are falsiﬁed among the
clauses introduced by Ci.

∨ · · · ∨ {bik

, . . . , bik

}:xi1

x2

0

0

0

a

b

c

x1

2

2

1

a

b

c

1

2

1

1

1
x3

0

0

0

a

b

c

1 :
2 :
3 :
4 :
5 :
6 :
7 :
8 :
9 :
10 :
11 :

{a}:x1
{a}:x1
{b}:x1
{b}:x1
{c}:x1
{c}:x1 ∨ {a}:x2
{c}:x1 ∨ {b}:x2
{a}:x3 ∨ {c}:x2
{b}:x3 ∨ {c}:x2
{b}:x3 ∨ {c}:x2
{c}:x3 ∨ {c}:x2

Figure 1: A WCSP instance and its signed encoding

Example 10 Figure 1 shows a WCSP instance (cid:5)X, D, C(cid:6)
and its signed encoding. The WCSP has the set of variables
X = {x1, x2, x3} with domains d(x1) = d(x2) = d(x3) =
{a, b, c}. There is a binary constraint between variables x1
and x2, a binary constraint between variables x2 and x3, and
a unary constraint for every variable. Unary costs are de-
picted inside small circles. Binary costs are depicted as la-
beled edges connecting the corresponding pair of values. The
label of each edge is the corresponding cost. If two values
are not connected, the binary cost between them is 0. In this
instance, the optimal cost is 2.

3 The Inference Rule. Soundness and

Completeness

We deﬁne a resolution rule for solving signed Max-SAT,
called Signed Max-SAT Resolution, and prove its soundness
and completeness. This rule was inspired by previous works
[Larrosa and Heras, 2005; Bonet et al., 2006] for Max-SAT.
The completeness proof for signed CNF formulas is techni-
cally more involved than the proof for Boolean CNF formu-
las.

Deﬁnition 11 The Signed Max-SAT Resolution rule is de-
ﬁned as follows

S :x ∨ a1 ∨ . . . ∨ as
S(cid:4) :x ∨ b1 ∨ . . . ∨ bt
S ∩ S(cid:4) :x ∨ a1 ∨ . . . ∨ as ∨ b1 ∨ . . . ∨ bt
S ∪ S(cid:4) :x ∨ a1 ∨ . . . ∨ as ∨ b1 ∨ . . . ∨ bt
S :x ∨ a1 ∨ . . . ∨ as ∨ b1
S :x ∨ a1 ∨ . . . ∨ as ∨ b1 ∨ b2
· · ·
S :x ∨ a1 ∨ . . . ∨ as ∨ b1 ∨ . . . ∨ bt−1 ∨ bt
S(cid:4) :x ∨ b1 ∨ . . . ∨ bt ∨ a1
S(cid:4) :x ∨ b1 ∨ . . . ∨ bt ∨ a1 ∨ a2
· · ·
S(cid:4) :x ∨ b1 ∨ . . . ∨ bt ∨ a1 ∨ . . . ∨ as−1 ∨ as

This inference rule is applied to multisets of clauses, and re-
places the premises of the rule by its conclusions.
We say that the rule resolves the variable x.

IJCAI-07

33

The tautologies concluded by the rule like N :x ∨ A are re-
moved from the resulting multiset. Also we substitute clauses
like S :x∨S(cid:4) :x∨A by (S ∪ S(cid:4)):x∨A, and clauses like ∅:x∨A
by A.

We would like to emphasize that the rule does not add the
It replaces the clauses in the

conclusions to the premises.
premises by the clauses in the conclusions.
Deﬁnition 12 We write C (cid:12) D when the multiset of clauses D
can be obtained from the multiset C applying the rule ﬁnitely
many times. We write C (cid:12)x C(cid:4)
when this sequence of appli-
cations only resolves the variable x.

In the context of Max-SAT problems, an inference rule is
sound iff the number of falsiﬁed clauses in the premises is
equal to the number of falsiﬁed clauses in the conclusions for
any assignment.

Theorem 13 (Soundness) The signed Max-SAT resolution
rule is sound.

PROOF: Let I be an arbitrary assignment. There are four
cases:
1. If I falsiﬁes the two premises, then I also falsiﬁes the ﬁrst
two conclusions, and only them.
2. If I satisﬁes the two premises, then it also trivially satisﬁes
the last s+t clauses of the conclusion, because they are either
implied by one or the other premise. The second clause of the
conclusion is implied by each one of the premises. Therefore,
it is also satisﬁed by I.

The ﬁrst clause of the conclusion is not implied by the
premises. However, if both premises are satisﬁed then we
have two cases. If S :x and S(cid:4) :x are both satisﬁed, then so
it is (S ∩ S(cid:4)):x. Otherwise, either some ai’s or some bj’s is
satisﬁed, thus also the ﬁrst clause of the conclusion.
3. If I satisﬁes the ﬁrst premise, but not the second one, then
the second clause of the conclusion as well as the t following
clauses are satisﬁed, because all them are implied by the ﬁrst
premise.

For the rest of conclusions, there are two cases: If some
of the ai’s is satisﬁed, then let i be the index of such a. The
assignment will satisfy the ﬁrst clause of the conclusion and
the last s conclusions, except S(cid:4):x ∨ b1 ∨ . . . ∨ bt ∨ a1 ∨
. . . ∨ ai−1 ∨ ai that is falsiﬁed. Otherwise none of the ai’s
is satisﬁed, and therefore, S :x is satisﬁed. Hence, the ﬁrst
conclusion is falsiﬁed, and the last s conclusions are satisﬁed.
4. If I satisﬁes the second premise, but not the ﬁrst one, the
situation is analogous to previous case.

Deﬁnition 14 A multiset of clauses C is said to be saturated
w.r.t. x if, for every pair of clauses C1 = S :x ∨ A and C2 =
S(cid:4) :x ∨ B of C,
i) there are literals S1 :y in A and S2 :y in B such that S1 ∪
S2 = N , or
ii) S ∩ S(cid:4) = S or S ∩ S(cid:4) = S(cid:4)
A multiset of clauses C(cid:4)
saturated w.r.t. x and C (cid:12)x C(cid:4)
applying the inference rule resolving x ﬁnitely many times.

is
can be obtained from C

is a saturation of C w.r.t. x if C(cid:4)

.

, i.e. C(cid:4)

We assign to every clause C a score s(C) equal to the num-
ber of assignments to the variables that falsify C. The score

of a multiset of clauses is the sum of scores of the clauses
contained in it.
Lemma 15 For every multiset of clauses C and variable x,
there exists a multiset C(cid:4)
is a saturation of C
w.r.t. x.

such that C(cid:4)

PROOF: We proceed by applying nondeterministically the in-
ference rule resolving x, until we obtain a saturated multiset.
We only need to prove that this process terminates in ﬁnitely
many inference steps, i.e that there does not exist inﬁnite se-
quences C = C0 (cid:12) C1 (cid:12) . . ., where at every inference we
resolve the variable x and none of the sets Ci are saturated.
Let M be the score of C.

Let us partition the multiset C of clauses into n multisets
(n is the size of the domain), {B0, B1, . . . , Bn−1}, where Bi
contains the clauses where the cardinality of the support of
x is i. Notice that B0 is the multiset of clauses that do not
contain the variable x. Let us denote by s(Bi) the score of
the multiset Bi.

We will look at this n multisets as a word of length n and
base M +1. So our multiset will be represented by the number
s(B0) s(B1) · · · s(Bn−1), taking s(B0) as the most signiﬁ-
cant digit. Since Bi is a subset of C, for i = 0, . . . , n − 1,
s(Bi) ≤ M .

When we apply our inference rule, we take two clauses,
say one from Bi and one from Bj and substitute them by a
set of clauses that we will distribute among the different Bk’s.
Now we have a new multiset of clauses and by the soundness
of our rule the score of the new multiset is the same. But,
if we again look at the multiset as a number in base M , the
number will be different. We will argue that for each infer-
ence step, the number increases. Say that the clauses we do
inference are S :x ∨ A ∈ B|S| and S(cid:4):x ∨ B ∈ B|S (cid:2)|. By the
inference step we remove these clauses and add some clause
in B|S∩S (cid:2)|, and maybe also some clauses in B|S|, B|S (cid:2)| and
B|S∪S (cid:2)|. Since, by deﬁnition of saturation S ∩ S(cid:4) (cid:14)= S and
S ∩ S(cid:4) (cid:14)= S(cid:4)
, we know that |S ∩ S(cid:4)| < |S|, |S(cid:4)| < |S ∪ S(cid:4)|,
hence the digit of B|S∩S (cid:2)| is more signiﬁcant than the dig-
its of B|S|, B|S (cid:2)| and B|S∪S (cid:2)|. We have to conclude that the
new M-base number after the inference step is larger than be-
fore. Since the largest possible number we can obtain is the
one represented as s(B0)s(B1) · · · s(Bn−1) = M 0 · · · 0 the
saturation procedure for x has to ﬁnish before M n

steps.

Lemma 16 Let E be a saturated multiset of clauses w.r.t. x.
Let E (cid:4)
be the subset of clauses of E not containing x. Then,
any assignment I satisfying E (cid:4)
(and not assigning x) can be
extended to an assignment satisfying E.

PROOF: We have to extend I to satisfy the whole E. In fact
we only need to set the value of x. Let us partition the multiset
(E − E (cid:4)
) (multiset of clauses that contain the variable x) into
two multisets: (E − E (cid:4))T the multiset already satisﬁed by I,
and (E − E (cid:4))F the multiset such that the partial assignment
I doesn’t satisfy any of the clauses. Our aim is to show that
the intersection of all the supports of x in (E − E (cid:4))F is non-
empty. This way we will extend I by assigning x to a value
in the intersection of all the supports.

IJCAI-07

34

Since E is saturated, for every pair of clauses C1 = S :x∨A
and C2 = S(cid:4) :x ∨ B in (E − E (cid:4))F either condition i) or ii) of
the deﬁnition happens. Condition i) cannot happen because
C1 and C2 cannot both be in (E − E (cid:4))F . Therefore, for ev-
ery pair of clauses, C1 = S :x ∨ A and C2 = S(cid:4):x ∨ B in
(E − E (cid:4))F , S ∩ S(cid:4) = S or S ∩ S(cid:4) = S(cid:4)
. Now, we order all the
supports of x appearing in (E − E (cid:4))F in decreasing order of
their cardinality. It is straightforward to see that every support
is contained or equal to its predecessor. Particularly, the last
support is equal to the intersection of all the supports, and it
is non-empty.

Theorem 17 (Completeness) For any multiset of clauses C,
we have

C (cid:12)

, D

(cid:6)

(cid:3)

, . . . ,
(cid:4)(cid:5)
m

where D is a satisﬁable multiset of clauses, and m is the min-
imum number of unsatisﬁed clauses of C.

PROOF: Let x1, . . . , xn be any list of the variables of C.
We construct two sequences of multisets C0, . . . , Cn and
D1, . . . , Dn such that

1. C = C0,
2. for i = 1, . . . , n, Ci ∪ Di is a saturation of Ci−1 w.r.t. xi,

and

3. for i = 1, . . . , n, Ci is a multiset of clauses not contain-
ing x1, . . . , xi, and Di is a multiset of clauses containing
the variable xi.

By lemma 15, this sequences can effectively be computed:
for i = 1, . . . , n, we saturate Ci−1 w.r.t. xi, and then we
partition the resulting multiset into a subset Di containing xi,
and another Ci not containing this variable.

Notice that, since Cn does not contain any variable, it is
either the empty multiset ∅, or it only contains (some) empty
clauses { , . . . ,

Now we are going to prove that the multiset D =

i=1 Di
is satisﬁable by constructing an assignment satisfying it. For
i = 1, . . . , n, let Ei = Di ∪ . . . ∪ Dn, and let En+1 = ∅.
Notice that, for i = 1, . . . , n,

(cid:2)n

}.

1. the multiset Ei only contains the variables {xi, . . . , xn},
2. Ei is saturated w.r.t. xi, and
3. Ei decomposes as Ei = Di ∪ Ei+1, where all the clauses

of Di contain xi and none of Ei+1 contains xi.

a

of

sequence

construct

Now, we

assignments
I1, . . . , In+1, where In+1 is the empty assignment, hence
satisﬁes En+1 = ∅. Now, Ii is constructed from Ii+1 as
follows. Assume by induction hypothesis that Ii+1 satisﬁes
Ei+1. Since Ei is saturated w.r.t. xi, and decomposes into
Di and Ei+1, by lemma 16, we can extend Ii+1 with an
assignment for xi to obtain Ii satisfy Ei. Iterating, we get
that I1 satisﬁes E1 = D =

i=1 Di.

(cid:2)n

Concluding, since by the soundness of the rule (The-
orem 13) the inference preserves the number of falsiﬁed
clauses for every assignment, m = |Cn| is the minimum num-
ber of unsatisﬁed clauses of C.

4 Global Consistency in WCSP

From the proof of Theorem 17, we can extract the following
exact algorithm for solving WCSP.
input: A WCSP instance P
C0 := signed encoding(P )
for i := 1 to k

C := saturation(Ci−1, xi)
(cid:5)Ci, Di(cid:6) := partition(C, xi)

endfor
m := |Ck|
I := ∅
for i := k downto 1

I := I ∪ [xi (cid:15)→ extension(xi, I, Di)]

output: m, I

Given an initial WCSP instance P with k variables, this
algorithm returns the minimal cost m of P and an optimal
solution I.

The function saturation(Ci−1, xi) computes a saturation
of Ci−1 w.r.t. xi applying the resolution rule resolving x until
it gets a saturated set. Lemma 15 ensures that this process
terminates, in particular that it does not cycle. As we have
already said, the saturation of a multiset is not unique, but
the proof of Theorem 17 does not depend on which particular
saturation we take.

The function partition(C, xi) computes a partition of C,
already saturated, into the subset of clauses containing xi and
the subset of clauses not containing xi.

The function extension(xi, I, Di) computes an assign-
ment for xi extending the assignment I, to satisfy the clauses
of Di according to Lemma 16. The function ﬁlters all clauses
of Di that are not satisﬁed by I. Then it computes the inter-
section of the supports for xi of all of them, and returns one
of the values of such an intersection. It returns a value from

∩{S | S :xi ∨ A ∈ Di and I falsiﬁes A}

The argumentation of the proof of Lemma 16 ensures that this
intersection is not empty.

The order on the saturation of the variables can be freely
chosen, i.e. the sequence x1, . . . xn can be any enumeration
of the variables.

A similar approach to this algorithm was deﬁned using
bucket elimination [Dechter, 1999]. Even though both proce-
dures have the same exponential worst-case complexity, we
believe that our algorithm can give rise to a better perfor-
mance proﬁle, in the sense that our computation of the joint
operation is incremental.

5 Local Consistency in WCSP

In WCSP a number of local consistency properties have been
proposed. These local properties do not ensure the global
consistency of a set of constraints. However, they can be en-
forced very efﬁciently and used to ﬁnd a lower bound of the
cost.

In this section we focus on binary WCSP instances as
in [Larrosa and Schiex, 2003; de Givry et al., 2005]. We
assume the existence of a unary constraint for every variable
xi. If no such a constraint is deﬁned, we can always deﬁne

IJCAI-07

35

a dummy constraint as f (ak) = 0 for every ak ∈ d(xi). We
will use the standard notation for binary WCSP in the liter-
ature: Ci will denote a unary constraint over a variable xi,
and Cij will denote a binary constraint between variables xi
and xj; Ci(ak), where ak ∈ d(xi), will denote f (ak), and
Cij (ak, bl), where ak ∈ d(xi) and bl ∈ d(xj ), will denote
f (ak, bk).

Deﬁnition 18 Variable xi is node consistent if there exists a
value ak ∈ d(xi) such that Ci(ak) = 0. A WCSP is node
∗
consistent (NC

) if every variable is node consistent.

Deﬁnition 19 Given a binary constraint Cij , the value b ∈
d(xj ) is a simple support for a ∈ d(xi) if Cij (a, b) = 0, and
is a full support if Cij (a, b) + Cj (b) = 0

Deﬁnition 20 Variable xi is arc consistent if every value
a ∈ d(xi) has a simple support in every constraint Cij . A
∗
) if every variable is node and
WCSP is arc consistent (AC
arc consistent.

Deﬁnition 21 Variable xi is full arc consistent if every value
a ∈ d(xi) has a full support in every constraint Cij . A WCSP
∗
) if every variable is node and full
is full arc consistent (FAC
arc consistent.

Deﬁnition 22 Let > be a total ordering over the variables
of a WCSP. Variable xi is directional arc consistent (DAC) if
every value a ∈ d(xi) has a full support in every constraint
Cij such that xj > xi. It is full directional arc consistent
(FDAC) if, in addition, every value a ∈ d(xi) has a simple
support in every constraint Cij such that xj < xi. A WCSP
∗
) if every variable is
is full directional arc consistent (FDAC
node and full directional arc consistent.

Deﬁnition 23 Let > be a total ordering over the variables
of a WCSP. Variable xi is existential arc consistent if there is
at least one value a ∈ d(xi) such that Ci(a) = 0 and has a
full support in every constraint Cij . A WCSP is existential arc
∗
) if every variable is node and existential arc
consistent (EAC
consistent. A WCSP is existential directional arc consistent
∗
(EDAC

∗
) if it is FDAC

∗
and EAC

.

In what follows we deﬁne four sound inference rules for
a sublanguage of signed formulas. We just consider clauses
with at most two literals and whose signs are complements of
singletons. This language captures binary WCSP instances.
As we will see bellow, the rules enforce some known local
consistency properties. For lack of space we do not show
how these rules may be derived from the signed Max-SAT
resolution rule.

In the next rules we assume that N = {i1, . . . , in} =

{j1, . . . , jn} and j ∈ N .

Rule 1:

Rule 2:

{i1}:x

· · ·

{in}:x

{i1}:x ∨ {j}:y

· · ·

{in}:x ∨ {j}:y

{j}:y

Rule 3:

{i1}:x ∨ {j1}:y
· · ·
{is}:x ∨ {j1}:y
{is+1}:x
· · ·
{in}:x
{j1}:y
{is+1}:x ∨ {j2}:y
· · ·
{is+1}:x ∨ {jn}:y
· · ·
{in}:x ∨ {j2}:y
· · ·
{in}:x ∨ {jn}:y

Rule 4:

{i1}:x ∨ {j1}:y
· · ·
{is}:x ∨ {j1}:y
{is+1}:x
· · ·
{in}:x
{j2}:y
· · ·
{jn}:y

{is+1}:x ∨ {j2}:y
· · ·
{is+1}:x ∨ {jn}:y
· · ·
{in}:x ∨ {j2}:y
· · ·
{in}:x ∨ {jn}:y

Lemma 24 Star node consistency (NC*) can be enforced ap-
plying rule 1.

PROOF: Say xi is a variable of a WCSP that is not star node
consistent. Then for every j ∈ N , Ci(j) > 0. Let be
w = min{Ci(j) | j ∈ N } and k such that Ci(k) = w. This
means that in the corresponding signed encoding we have
Ci(j) copies of {j}:xi, for all j ∈ N . Rule 1 applied to
the encoding w many times will remove w copies of {j}:xi,
for all j ∈ N , hence all the copies of {k}:xi. Therefore,
the WCSP equivalent to the new encoding has the star node
consistency property of the variable xi.

Lemma 25 Arc consistency (AC*) can be enforced applying
rule 2.

PROOF: Say xi is a variable that is not arc consistent with
respect to a constraint Cij , for some variable xj . This means
that there is a value a ∈ N such that for all b ∈ N ,
Cij (a, b) > 0. Let be w = min{Cij(a, b) | b ∈ N }. The
constrain Cij will generate among others Cij (a, b) copies of
{a}:xi ∨ {b}:xj , for every b ∈ N . Applying rule 2 w many
times, we substitute these clauses by w copies of {a}:xi and
Cij (a, b) − w copies of {a}:xi ∨ {b}:xj , for every b ∈ N .
Since there is one value k such that Cij (a, k) − w = 0, this
new set of clauses indicates that now variable xi is arc con-
sistent with respect to Cij , for the value a. Arc consistency
for other values would be obtained in the same way.

The previous two lemmas where proved for domains of

size two in [Larrosa and Heras, 2005].
Lemma 26 Fixed a total ordering > on the variables, Di-
rectional Arc Consistency (DAC) can be enforced from rule 3
applied with the restriction x > y.

PROOF: Let > be a total ordering on the variables. Say
xi is a variable that is not directional arc consistent with
respect to a restriction Cij for some variable xj where

IJCAI-07

36

xj > xi. This means that there is a value a ∈ N such
that for all b ∈ N , Cij (a, b) + Cj(b) > 0. Suppose
that there is some b such that Cij (a, b) = 0, otherwise
we can use rule 2 to enforce arc consistency. W.l.o.g.
suppose that, for s ∈ {k . . . n}, Cij (a, s) = 0.
So,
for the same subdomain, Cj(s) > 0.
This ensures
that we have the following subset of clauses {{a}:xi ∨
{1}:xj , . . . , {a}:xi ∨ {k − 1}:xj , {k}:xj , . . . , {n}:xj }.
Rule 2 allows us to substitute this set of clauses by
{{a}:xi} ∪
c(cid:7)=a,b∈{1...k−1}{{c}:xi ∨ {b}:xj }. Applying
rule 3 repeatedly the values {k . . . n} of xj become the full
support for xi.

(cid:2)

∗
Rule 4 enforces DAC
∗
Rule 3 also enforces full arc consistency (FAC

∗
, since it combines DAC and NC

), but then

.

it must be applied without the limitation x > y.

∗
Existential Arc Consistency (EAC

∗
from rule 3 but with different limitations than DAC
to avoid cycles).

) can also be obtained
(in order

x2

0

0

1

a

b

c

c)

x1

a

b

c

1

1

0

C=1

1

1

x3

0

0

0

a

b

c

c)
2 : {a} : x1
4 : {b} : x1
6 : {c} : x1 ∨ {a}x2
7 : {c} : x1 ∨ {b}x2
11 :
12 : {c}x2

a)

x1

a

b

c

2

2

1

d)

x1

a

b

c

1

1

1

1

1

1

C=0

1

1

x3

0

0

0

C=1

1

1

x3

0

0

0

a

b

c

a

b

c

x2

0

0

0

x2

0

0

0

a

b

c

a

b

c

b)

x1

a

b

c

1

1

0

e)

x1

a

b

c

0

0

0

x2

0

0

0

x2

0

0

0

a

b

c

a

b

c

1

1

1

C=1

1

1

x3

0

0

0

C=2

1

1

x3

0

0

0

a

b

c

a

b

c

a)
1 : {a} : x1
2 : {a} : x1
3 : {b} : x1
4 : {b} : x1
5 : {c} : x1
6 : {c} : x1 ∨ {a}x2
7 : {c} : x1 ∨ {b}x2
8 : {a} : x3 ∨ {c}x2
9 : {b} : x3 ∨ {c}x2
10 : {c} : x3 ∨ {c}x2

d)
2 : {a} : x1
4 : {b} : x1
11 :
13 : {c} : x1
14 : {a} : x1 ∨ {c}x2
15 : {c} : x1 ∨ {c}x2

b)
2 : {a} : x1
4 : {b} : x1
6 : {c} : x1 ∨ {a}x2
7 : {c} : x1 ∨ {b}x2
8 : {a} : x3 ∨ {c}x2
9 : {b} : x3 ∨ {c}x2
10 : {c} : x3 ∨ {c}x2
11 :

e)
11 :
14 : {a} : x1 ∨ {c}x2
15 : {c} : x1 ∨ {c}x2
16 :

Figure 2: Example of the application of the rules

Example 27 Figure 2 shows a sequence of equivalent signed
Max-SAT instances obtained by applying rules 1, 2 and 3.

The sequence of transformations is: a) original formula,
b) application of rule 1 to clauses 1, 3 and 5, c) application
of rule 2 substituting clauses 8, 9 and 10 by clause 12, d) ap-
plication of rule 3 substituting clauses 6, 7 and 12 by 13, 14
and 15, and e) application of rule 1 to clauses 2, 4 and 13. The
minimal cost is 2. The corresponding sequence of WCSP in-
stances is: a) original instance, b) is NC* but not AC*, c) is
AC* but not DAC*, d) is DAC* but not NC* and e) is DAC*
and NC*.

6 Conclusions
We have proved that the logic of signed CNF formulas pro-
vides the underlying logic of WCSP. On the one hand, this
language allows a compact and natural representation of
WCSP with not only binary but n-ary constraints. On the
other hand, the inference system captures and formalizes the
algorithms for global as well as local consistency that have
been described in the WCSP community.

We are currently investigating new derived rules that could
be applied in polynomial time and enforce stronger forms of
soft local consistency.

References
[Ans´otegui and Many`a, 2003] C. Ans´otegui, and F. Many`a.
In

New logical and complexity results for Signed-SAT.
Proc. of ISMVL’03, pages 181–187, 2003.

[Bonet et al., 2006] M. L. Bonet, J. Levy, and F. Many`a. A
complete calculus for Max-SAT. In Proc. of SAT’06, pages
240–251. Springer LNCS 3569, 2006.

[de Givry et al., 2005] S. de Givry, F. Heras, J. Larrosa, and
M. Zytnicki. Existencial arc consistency: Getting closer
to full arc consistency in weighted CSPs. In Proc. of IJ-
CAI’05, pages 84–89, 2005.

[Dechter, 1999] R. Dechter. Bucket elimination: A unifying
framework for reasoning. Artiﬁcial Intelligence, 113(1–
2):41–85, 1999.

[Freuder and Wallace, 1992] E. Freuder and R. Wallace. Par-
tial constraint satisfaction. Artiﬁcial Intelligence, 58:21–
71, 1992.

[Larrosa and Heras, 2005] J. Larrosa and F. Heras. Resolu-
tion in Max-SAT and its relation to local consistency in
weighted CSPs.
In Proc. of IJCAI’05, pages 193–198,
2005.

[Larrosa and Meseguer, 1996] J. Larrosa and P. Meseguer.
Exploiting the use of DAC in Max-CSP. In Proc. of CP’96,
pages 308–322, 1996.

[Larrosa and Schiex, 2003] J. Larrosa and T. Schiex. In the
quest of the best form of local consistency for weighted
CSP. In Proc. of IJCAI’03, pages 239–244, 2003.

[Larrosa and Schiex, 2004] J. Larrosa and T. Schiex. Solving
weighted CSP by maintaining arc-consistency. Artiﬁcial
Intelligence, 159(1–2):1–26, 2004.

[Verfaillie et al., 1996] G. Verfaillie, M. Lemaitre,

and
T. Schiex. Russian doll search. In Proc. of AAAI’96, pages
181–187, 1996.

IJCAI-07

37

