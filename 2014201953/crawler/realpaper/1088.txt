Computational Aspects of Analyzing Social Network Dynamics

Chris Barrett 1 Harry B. Hunt III 2 Madhav V. Marathe 1

S. S. Ravi 2

Daniel J. Rosenkrantz 2 Richard E. Stearns 2 Mayur Thakur 3

Abstract

Motivated by applications such as the spread of epi-
demics and the propagation of inﬂuence in social
networks, we propose a formal model for analyz-
ing the dynamics of such networks. Our model
is a stochastic version of discrete dynamical sys-
tems. Using this model, we formulate and study
the computational complexity of two fundamental
problems (called reachability and predecessor ex-
istence problems) which arise in the context of so-
cial networks. We also point out the implications of
our results on other computational models such as
Hopﬁeld networks, communicating ﬁnite state ma-
chines and systolic arrays.

1 Introduction and Motivation

With the growing importance of social networks, analysis of
the dynamics of these networks is attracting the attention of
researchers. In this paper, we propose a multiagent-based for-
mal model of social network dynamics and study two funda-
mental analysis problems arising in that context. We take an
abstract view of social network dynamics. In our model, each
individual (agent) in the social network is represented by a
node in the underlying undirected graph. The edges of the
graph model dependencies among the agents. Depending on
the context, an edge in the underlying graph may denote a
“knows” relationship, a “can be infected by” relationship, a
“lives close to” relationship, a “has common interests” rela-
tionship, etc. Further, each node has a state and a stochastic
transition function that it evaluates at each time step to com-
pute the value of its state at the next time step. The inputs to
the transition function at a node are the state of the node itself
and those of its neighbors in the underlying graph.

1Network Dynamics and Simulation Science Laboratory, Vir-
ginia Bioinformatics Institute and Virginia Tech, Blacksburg, VA
24061. Email: {cbarrett, mmarathe}@vbi.vt.edu.

2Department of Computer Science, University at Albany–
Email: {hunt, ravi, djr,

SUNY, Albany, NY 12222.
res}@cs.albany.edu.

3Department of Computer Science, University of Missouri–

Rolla, Rolla, MO 65409. Email: thakurk@umr.edu.

The following two examples present the motivation for the

problems considered in this paper.

Example 1.1 Consider the contact network for the popula-
tion of a city, where the nodes represent individuals and
edges represent contact between individuals; that is, there is
an edge between two nodes if the corresponding individuals
come into contact with each other during a certain period of
time. We want to study the spread of epidemics in this popu-
lation and how to best control it. A popular method of mod-
eling the spread of epidemics is the SIR model [Eubank et al.,
2004], where the acronym stands for Susceptible-Infected-
Recovered, the three possible states for each individual. As-
sume for simplicity that the total population is ﬁxed; that is,
there are no births or deaths. At any time, a susceptible node
may become infected with a certain probability, depending
on the number of infected neighbors. At any given time step
t, let s(t) denote the fraction of susceptible individuals, i(t)
denote the fraction of infected individuals and r(t) denote the
fraction of recovered individuals. In this context, it is of in-
terest to study questions of the following form: Given positive
numbers 0 < α < 1, 0 < β < 1, 0 < p < 1, and a positive
integer τ , is the probability of the event “i(t0 + τ ) > β” con-
ditioned on the event “i(t0) < α” at least p? This question is
an example of the reachability problem for the formal model
considered in this paper.

Example 1.2 As a second example, consider the social in-
ﬂuence network, where an edge between individuals denotes
that they can exert a certain degree of inﬂuence on each other.
Suppose a company wants to market a new product using
word of mouth advertising [Kempe et al., 2005]. The com-
pany’s goal is to identify a suitable initial subset of individ-
uals to whom free samples should be sent so that with prob-
ability at least p the number of individuals to whom the idea
will propagate in t steps is at least N . (It is reasonable to
model this propagation as a stochastic process since individ-
uals may use different criteria to decide whether or not to par-
ticipate in the propagation.) This example represents a more
general form of the predecessor existence problem studied in
this paper.

Formally, we model dynamics of social networks using dis-
crete dynamical systems. We refer to our model as a Stochas-
tic Synchronous Dynamical System (SSyDS). Each SSyDS
S over a domain D is speciﬁed as a pair S = (G, F). Here,

IJCAI-07

2268

G(V, E) is an undirected graph with n nodes, with each node
having a state value from the domain D. This graph repre-
sents the topological structure of the social network. The set
F = {f1, f2, . . . , fn} is a collection of stochastic interaction
functions in the system. Here, fi denotes the stochastic local
transition function associated with node vi, 1 ≤ i ≤ n. A
conﬁguration of an SSyDS is an n-vector (b1, b2, . . . , bn),
where bi ∈ D is the value of the state of node vi (1 ≤ i ≤ n).
A single SSyDS transition from one conﬁguration to an-
other is obtained by updating the state of each node syn-
chronously using the corresponding local transition function.
For 1 ≤ i ≤ n, the inputs to the function fi are the state
values of node vi and those of the neighbors of vi. For each
combination of inputs to fi and each element θ of D, the func-
tion fi speciﬁes the probability that the next state value of vi
is θ. (For each combination of inputs, the sum of the proba-
bilities assigned by fi over the values θ ∈ D must be 1.)

To further clarify the notion of stochastic local transition
functions used here, consider a node vi and let vi1 , vi2 , . . . ,
vir represent the neighbors of vi in G. For any j and t, let
st
j denote the state of node vj at time t. The local transition
function fi at node vi satisﬁes the following equation:
Pr{st
} =

t−1
i = θ(cid:2), s

i = θ | s

= θ1

i1 , . . . , s

t−1
i1

t−1
ir

= θ1
ir

fi(θ(cid:2), θ1

i1 , . . . , θ1

ir , θ).

(1)
The generalized phase space PS of an SSyDS S is a di-
rected graph deﬁned as follows. There is a node in PS for
each conﬁguration of S. There is a directed edge from the
node representing conﬁguration C (cid:2) to that representing con-
ﬁguration C if the probability that the system will reach C
from C (cid:2) in one step is (strictly) greater than zero. More gen-
erally, the directed edge from C (cid:2) to C may be associated with
a positive number p, 0 < p ≤ 1, representing the probability
of the one-step transition. With the probability value for di-
rected each edge, the generalized phase space represents the
Markov chain for the dynamical system. Note that for a dy-
namical system over the Boolean domain with n nodes, the
number of possible conﬁgurations is 2n
. Thus, the size of the
Markov Chain is exponential in the size of the underlying dy-
namical system. For this reason, known results for Markov
chains cannot be directly used to obtain the results obtained
in this paper.

In the generalized phase space, when there is a directed
edge from C (cid:2) to C, we say that C (cid:2) is a predecessor of con-
ﬁguration C. In general, a conﬁguration in generalized phase
space may have multiple predecessors.

The goal of an analysis problem is to determine whether
a given SSyDS has a speciﬁed property. We consider two
analysis problems in the context of such dynamical systems,
namely reachability and predecessor existence. As men-
tioned earlier, a study of such analysis problems is useful
in obtaining an understanding of the dynamics of social net-
works. Deﬁnitions of the problems considered in this paper
are given below.

In the reachability problem, we are given a dynamical
system S, two conﬁgurations I and B and a probability value
p; the question is whether S starting from I can reach B with
a probability of at least p. This is an abstract and general

version of the problem mentioned in Example 1.1. We use
REACHABILITY to denote this problem. We also study a vari-
ant of this problem, called the t-REACHABILITY problem,
where an integer t is also speciﬁed as part of the problem in-
stance and the goal is to determine whether S starting from I
can reach B in at most t steps with a probability of at least p.
In the predecessor existence problem (denoted by PRE),
we are given a dynamical system S, a conﬁguration C and
a probability value p; the question is whether there is a con-
ﬁguration C (cid:2) such that the system starting from C (cid:2) can reach
C in one step with a probability of at least p. This is an ab-
stract version of the problem discussed in Example 1.2 above.
While Example 1.2 addresses t-step predecessors for some
t ≥ 1, the PRE problem is concerned with ﬁnding immediate
(i.e., 1-step) predecessors.

Sequential Dynamical Systems (SDSs) where nodes up-
date their states in a given sequential order (rather than syn-
chronously) have also been considered in the literature (see
for example [Barret et al., 2003a]). A stochastic version of
SDSs (denoted by SSDSs) can be deﬁned in a manner sim-
ilar that of SSyDSs. The results presented in this paper are
applicable to SSDSs as well.

2 Summary of Results

Reachability in SSyDSs and SSDSs
Two versions of
the reachability problem (denoted by
REACHABILITY and t-REACHABILITY) for SSyDSs were
deﬁned in the previous section. We show that both the ver-
sions are hard for the complexity class4 RSPACE(n). The re-
sult is proven by showing how a stochastic dynamical system
can efﬁciently simulate a linear space bounded probabilistic
Turing machine. Moreover, the hardness results hold even
when the underlying graph is a simple path. By a minor mod-
iﬁcation to this proof, the hardness result can also be shown
to hold for SSDSs (where nodes update their states sequen-
tially). These results point out that, unless the complexity
classes P and RSPACE(n) coincide, there is no efﬁcient way
of predicting the behavior of a stochastic dynamical system.
In contrast to stochastic dynamical systems, where reach-
ability problems are RSPACE(n)-hard, the corresponding
reachability problems for deterministic discrete dynamical
systems are complete for DSPACE(n) [Barret et al., 2003a].
It is known that RSPACE(n) ⊆ DSPACE(n3/2) [Saks and
Zhou, 1995]; however, it is not known whether the exponent
of n can be reduced to 1. Thus, under reasonable complex-
ity theoretic assumptions, reachability problems for stochas-
tic systems are harder than the corresponding problems for
deterministic systems.

Predecessor Existence in SSyDSs
We show that the predecessor existence (abbreviated as PRE)
problem for SSyDSs over any ﬁnite domain can be solved
in polynomial time when the following conditions hold: (i)
the treewidth5 and maximum node degree of the underlying

4For deﬁnitions of the complexity classes used in this paper, we

refer the reader to [Papadimitriou, 1994].

5For deﬁnitions of treewidth and related terms, we refer the

reader to [Bodlaender, 1997].

IJCAI-07

2269

graph are both bounded and (ii) the number of distinct prob-
ability values used in specifying the probability distributions
for the local transition functions is bounded. The algorithm
is based on dynamic programming. This result can also be
extended to SSDSs.

It should be noted that the PRE problem remains NP-
complete for deterministic dynamical systems, when either
the treewidth or the maximum node degree is unbounded
[Barrett et al., 2003b]. As a consequence, the problem re-
mains computationally intractable for such stochastic dynam-
ical systems as well.

Our results for reachability and predecessor existence
problems also initiate the study of stochastic discrete dynam-
ical systems on graphs of bounded treewidth.
It is known
that 1D-CA with radius R can be equivalently viewed as syn-
chronous dynamical systems on graphs with treewidth O(R)
[Barrett et al., 2003b]. Thus, SSyDSs on treewidth bounded
graphs can be viewed as generalized stochastic CA.

Applications to Other Computational Models
SSyDSs can be viewed as stochastic analogs of systolic net-
works [Kung, 1982]. Since SSyDSs are closely related to
stochastic CA [Wolfram, 1986], they also serve as a formal
model for studying problems in the context of multiagent
systems [Wooldridge, 2002]. In addition, SSyDSs are also
related to other well known computational models including
discrete recurrent Hopﬁeld networks [Orponen, 2000] which
are used in machine learning and pattern recognition and con-
current communicating ﬁnite state machines [Harel et al.,
2002] which are used to model and verify distributed sys-
tems. The hardness results for the reachability problems for
SSyDSs immediately imply analogous results for each of the
above models.

3 Complexity of Reachability for SSyDSs and

SSDSs

In this section, we show that the reachability problems
for SSyDSs and SSDSs are hard for the complexity class
RSPACE(n). Our proof also shows that the problem remains
computationally intractable even for simple SSyDSs and SS-
DSs (e.g. systems in which the underlying graph is a simple
path).

As mentioned earlier, we establish this complexity result
by showing that a given linear space bounded probabilistic
Turing Machine (TM) can be simulated by an appropriate
SSyDS. We recall a few deﬁnitions related to probabilistic
TMs.

A probabilistic Turing machine [Papadimitriou, 1994] M
is a TM consisting of a ﬁnite control and a read-write tape
which initially contains the input string. The ﬁnite control
has one accepting state, one rejecting state and a collection
of coin tossing states. A conﬁguration of the Turing ma-
chine speciﬁes the state of the ﬁnite control, description of
the contents of the tape and the position of the head on the
tape. A conﬁguration is accepting, rejecting or coin-tossing
if the state of the ﬁnite control is accepting, rejecting or coin
tossing respectively. The transition relation of the Turing ma-
chine is such that from any coin tossing conﬁguration, there
are exactly two possible next moves, each with probability

1/2. Once the machine reaches an accepting or rejecting con-
ﬁguration, it halts.

Given a probabilistic O(n)-space bounded Turing machine
M which always halts after 2O(n) moves and input string x,
we say that M accepts x if the probability of the event that
M reaches an accepting conﬁguration starting from the ini-
tial conﬁguration on input x is at least 1/2. One way to view
the computation of M on x is via a proof tree: the leaf nodes
are labeled as either accepting or rejecting conﬁgurations, the
root is the initial conﬁguration and each internal node has ex-
actly two children with the labels on the edges being 1/2, de-
noting the probability of transition to that conﬁguration. Thus
the probability of reaching a leaf node (or a terminating con-
ﬁguration) l, denoted by P r(l), is the product of weights of
the edges on the unique path from the root to the leaf. The
l∈A P r(l), where
probability of accepting an input string is
A is the set of leaves marked as accepting.

(cid:2)

Theorem 3.1 There exists a constant μ such that the t-
REACHABILITY and REACHABILITY problems for SSyDSs
and SSDSs are RSPACE(n)-hard, even when the following
restrictions hold: (i) The underlying graph is a simple path
(and thus has pathwidth and treewidth of 1); in particular, the
degree of each node is at most two. (ii) The size of the domain
of state values for each node is at most μ. (iii) The number of
distinct local transition functions is at most three.

Proof sketch: We sketch the proof for the t-REACHABILITY
problem SSyDSs. The proof for REACHABILITY is similar.
Let M = (Q, Σ, Σ(cid:2), q0, qf , F ) denote a linear space
bounded probabilistic Turing machine where Q is the (ﬁnite)
set of states, Σ is the tape alphabet, Σ(cid:2) ⊂ Σ is the input al-
phabet, q0 ∈ Q is the initial state, qf ∈ Q is the ﬁnal ac-
cepting state and F is the transition relation: given the cur-
rent state and the current symbol scanned by the (read-write)
head, F speciﬁes the next state, the symbol to be written on
the cell scanned by the head and the direction of head move-
ment (left or right by one tape cell or stay on the same cell).
The relation F speciﬁes two moves, each with probability
1/2. Let x = a1a2 . . . an be the input string given to M
with a1 = $ and an = c(cid:7) being the end markers. A con-
ﬁguration or instantaneous description (ID) of M consists of
the current state, the contents of the tape cells and the po-
sition of the head. The machine starts at q0 with its head
on the tape cell containing a1 = $. The ID at time zero is
I = (cid:8)(q0, a1), a2, . . . , an(cid:9). We may assume without loss of
generality that if M accepts x, it replaces all the symbols on
the tape cells between the end markers with the symbol (cid:10) b,
moves the head to the cell containing $, and halts in state qf .
Thus, the ﬁnal ID is B = (cid:8)(qf , $), (cid:10) b, . . . , (cid:10) b, c(cid:7)(cid:9). The ID of
M at time τ will be denoted by ID(τ ).

Given M and input string x, we create an SSyDS SMx =
(G, F) whose set of conﬁgurations include those of M . SMx
is constructed so that for any t ≥ 0, if M starting from I
reaches a conﬁguration C in t steps with probability p, then
SMx starting from I reaches conﬁguration C in 2t steps with
probability p.

The underlying graph G(V, E) of SMx is a simple path on
n nodes, where n = |x|. Node vi corresponds to the ith tape
cell, 1 ≤ i ≤ n. Node vi is adjacent only to nodes vi−1

IJCAI-07

2270

and vi+1, with the exceptions that node v1 is adjacent only to
node v2 and node vn is adjacent only to node vn−1. The state
of each node vi takes a value from the domain Σ ∪ (Q × Σ) ∪
(Q × Σ × {0, 1}).

For any τ ≥ 0, a step of M that transforms ID(τ )
into ID(τ + 1) probabilistically, can be captured by the
collection of local probabilistic transition functions F =
(cid:8)f1, f2, . . . , fn(cid:9) where fi is the function at node vi, 1 ≤ i ≤
n, as follows. The SSyDS simulates each step of M in two
steps. Let ID(τ ) = (cid:8)c1, . . . cj−1, (q, cj ), cj+1, . . . cn(cid:9). Here,
(q, cj) denotes that the current state is q, the content of tape
cell j is cj and the head is currently scanning cell j. The node
corresponding to cell j is vj. In the ﬁrst step, all nodes except
vj make a deterministic move; they copy their contents and
do not change their state. Node vj does a coin toss and mod-
iﬁes (q, cj) to (q, cj , σ) where σ denotes the outcome of coin
toss (which is either 0 or 1). Note that ID(τ + 1) is identi-
cal to ID(τ ), except possibly for cj−1, (q, cj ) and cj+1. Let
these three values be dj−1, dj and dj+1 with probability 1/2
and aj−1, aj, aj+1 with probability 1/2. Note that the aj, dj
values also encode the head location. Correspondingly, in the
next step, all nodes of the SSyDS except vj−1, vj and vj+1
again copy their state; vj goes to dj or aj, vj−1 goes to dj−1
or aj−1 and vj+1 goes to dj+1 or aj+1, depending on the coin
toss value σ. These moves again are deterministic. Thus, the
probability of reaching either of the conﬁguration is 1/2 over
the two steps.

It can be seen that SMx reaches conﬁguration B with prob-
ability at least 1/2 iff M accepts x with probability at least
1/2. The size of the domain of SMx is a constant that depends
only on Σ and Q.

It is also possible to formulate reachability problems where
a family of ﬁnal conﬁgurations is speciﬁed and the question is
whether the system can reach any of these conﬁgurations with
a given probability. An example of such a family consists of
conﬁgurations in which at least k of the nodes have the state
value 1. In the context of studying the spread of epidemics
in social networks, such a family of conﬁgurations may rep-
resent situations where a large section of the population is
infected. By slightly modifying the proof of the above theo-
rem, it is possible to show that the corresponding reachability
problem remains RSPACE(n)-hard.

4 Results on Predecessor Existence
This section develops a polynomial time algorithm for the
PRE problem for restricted forms of stochastic dynamical sys-
tems. The main result of this section is the following.

Theorem 4.1 Consider the class of SSyDSs over the Boolean
domain satisfying the following conditions: (a) The degree
of each node in the underlying graph is bounded. (b) The
treewidth of the underlying graph is bounded. (c) The num-
ber of distinct probability values used in specifying all the
stochastic node functions is bounded. The PRE problem for
such SSyDSs can be solved in polynomial time.

Our proof of the above theorem is based on a known re-
sult for a restricted class of deterministic SyDSs. In a deter-
ministic SyDS, each local transition function is determinis-
tic; that is, for each combination of inputs to the function,

the function produces only one output which becomes the
next state of the corresponding node. We use SyDS to de-
note a deterministic synchronous dynamical system. Refer-
ence [Barrett et al., 2003b] presents a polynomial time algo-
rithm for the PRE problem for SyDSs over the Boolean do-
main, where the underlying graph is treewidth bounded and
each node computes a symmetric6 function. Since our algo-
rithm relies on the approach used in [Barrett et al., 2003b],
we begin with a sketch of the algorithm from that reference.

Theorem 4.2 [Barrett et al., 2003b] The PRE problem for
SyDSs over the Boolean domain where the underlying graph
is treewidth bounded and each node computes a symmetric
function can be solved in polynomial time.

Proof sketch: Let S be the given SyDS whose underlying
graph G(V, E) has a treewidth of k. It is well known that
a tree decomposition ({Xi | i ∈ I}, T = (I, F )) of G can
be constructed in time that is a polynomial in the size of G.
Moreover, this can be done so that T is a binary tree; that is,
each node of T has at most two children [Bodlaender, 1997].
For a given node i of the tree decomposition, the SyDS
nodes in Xi are referred to as explicit nodes of i. If a given
explicit node of i is also an explicit node of the parent of i,
that node is referred to as an inherited node of i; and if it
does not occur in the parent of i, it is referred to as an orig-
inating node of i. The set of all explicit nodes occurring in
the subtree of T rooted at i that are not explicit nodes of i are
referred to as hidden nodes of i. Without loss of generality,
it can be assumed that the number of nodes of T with fewer
than two children is at most n, the number of nodes in G.

Let C be the conﬁguration speciﬁed in the given instance
of the PRE problem for S. Consider a given node i of the
tree decomposition. Suppose α is a given assignment of state
values to the explicit nodes of i and β is a given assignment
of state values to the hidden nodes of i. The combined as-
signment α ∪ β is said to be viable for i if for every hidden
node w of i, the evaluation of the local transition function
fw gives the value C(w), using the value β(w) for w and the
value (α ∪ β)(u) for every neighbor u of w. The combined
assignment α ∪ β is said to be strongly viable for i if the
above condition holds for every node w that is either a hidden
node or an originating node of i.

For a given node i of the tree decomposition, and a given
assignment β to the states of the hidden nodes of i, deﬁne
a function hβ : Xi −→ N, where N is the set of natural
numbers, as follows. For y ∈ Xi,

hβ(y) is the number of hidden nodes w of i such
that {w, y} ∈ E and β(w) = 1.

The value hβ(y) is the number of hidden nodes w of i whose
old value is an input parameter to the computation of the new
value of y, and β(w) = 1.

For a given node i of the tree decomposition, and a given
assignment α to the states of the explicit nodes of i, deﬁne
the set Hα to be the set of functions h from Xi to N such that
there exists an assignment β to the states of the hidden nodes

6A Boolean function is symmetric if its value depends only on

the number of inputs which are 1.

IJCAI-07

2271

of i satisfying the following two conditions: α ∪ β is viable
for i and h is hβ.

Let d be the maximum node degree of G. For any given
β and y ∈ Xi, the maximum possible value of hβ(y) is d.
The maximum possible value of |Xi| is k + 1 (where k is the
treewidth). So, function hβ can be represented as a table with
at most k + 1 entries, where each entry is an integer value
in the range 0 through d. Hence, an upper bound on |Hα| is
(d + 1)k+1.

The PRE problem for S can be solved by using bottom-up
dynamic programming on the decomposition tree. For each
node i of T , a table with an entry for each assignment α to the
states of the explicit nodes of i is computed. The value of the
entry for each such assignment α is the set Hα. Let Ji refer to
the entire table for node i. Since the treewidth k is a constant,
the size of the table for each node of the decomposition tree
is a polynomial in n, the number of nodes of the underlying
graph G(V, E). Using these facts, it can be shown that the
bottom-up computation of the tables for all the nodes can be
carried out in polynomial time.

To obtain the polynomial time algorithm alluded to in the
statement Theorem 4.1, we need to extend the above dynamic
programming algorithm to a more general class of symmetric
functions, namely r-symmetric functions. A Boolean func-
tion is r-symmetric if its inputs can be partitioned into at
most r classes such that the value of the function depends
only on the number of 1’s in each class. Note that every
symmetric function is 1-symmetric. Also, if the maximum
node degree of the underlying graph of a SyDS is Δ, then
each node function is (Δ + 1)-symmetric. The following
lemma shows that the result of Theorem 4.2 can be extended
to the case where each node computes an r-symmetric func-
tion. The corresponding algorithm is obtained by modifying
the dynamic programming outline given in the proof of The-
orem 4.2. (The details are omitted because of space reasons.)

Lemma 4.3 The PRE problem for SyDSs over the Boolean
domain where the underlying graph is treewidth bounded and
each node computes an r-symmetric function for some r ≥ 1
can be solved in polynomial time.

We can now state the main idea behind the proof of The-
orem 4.1: the PRE problem for SSyDSs satisfying the con-
ditions of Theorem 4.1 can be efﬁciently reduced to the PRE
problem for deterministic SyDSs over the Boolean domain
where each local transition function is r-symmetric (for some
r ≥ 1) and the underlying graph has bounded treewidth.
Since the latter problem can be solved in polynomial time
(Lemma 4.3), Theorem 4.1 would follow. We now sketch
this reduction.

Let S be an SSyDS satisfying the conditions of Theo-
rem 4.1. Let C denote the given conﬁguration for which
we need to determine whether there is a predecessor with
probability at least p. Let k and Δ (ﬁxed values) denote
the treewidth and the maximum node degree of the under-
lying graph G(V, E), with n denoting |V |. Consider any
node vi, and let Γi (also a ﬁxed value) denote the total num-
ber of probability values used to specify the stochastic lo-
cal transition function fi at vi.
(Note that if the distinct

probability values used to specify fi are ρ1, ρ2, . . . , ρt, then
Γi represents the number of distinct values in the collection
{ρ1, 1 − ρ1, ρ2, 1 − ρ2, . . . , ρt, 1 − ρt}.)

We now show how to construct a deterministic SyDS S1
over the Boolean domain from the stochastic SyDS S. The
underlying graph G1(V1, E1) of S1 is constructed as follows.
To begin with, G1 contains a copy of all the nodes and edges
of G. Next, for each node vi of G, 1 ≤ i ≤ n, we create
q
q = Γi additional nodes. Let v1
i , denote these
additional nodes, called the auxiliary nodes associated with
vi. (Thus, each auxiliary node of vi is associated with one
probability value from the speciﬁcation of the stochastic local
j
transition function fi in S.) Each of the nodes v
i , 1 ≤ j ≤ q,
is adjacent to vi; further, if vi is adjacent to vi1 , vi2 , . . ., vi(cid:2)
j
i , 1 ≤ j ≤ q, is adjacent to vi1 ,
in G, then each of the nodes v
vi2 , . . ., vi(cid:2) in G1. Finally, G1 has one more node, denoted
by X. There is an edge between X and each auxiliary node
created above.

i , . . ., v

i , v2

The local transition functions for the nodes of G1 are cho-
sen as follows. For each node vi, 1 ≤ i ≤ n, the local tran-
sition function gi is the constant function which outputs 1 for
every input. For each node vi, the local transition functions
for the auxiliary nodes of vi are chosen as follows. Let C(vi)
denote the state value of node vi in the speciﬁed (ﬁnal) con-
ﬁguration for S. For each j, 1 ≤ j ≤ q, consider the auxiliary
j
j
i , and let ρj denote the probability associated with v
node v
i .
j
j
Let N
i , except X. The
i denote the set of all neighbors of v
j
j
(deterministic) local transition function g
i at v
i outputs 1 if
and only if one of the following conditions holds.

(a) The initial value of v

j
i is 1, and for the input combina-
j
tion formed by the values assigned to the nodes in N
i and the
transition of vi to C(vi), the probability assigned by fi equals
ρj.

(b) The initial value of v

j
i is 0, and for the input combina-
j
tion formed by the values assigned to the nodes in N
i and the
transition of vi to C(vi), the probability assigned by fi does
not equal ρj.

The local transition function gX at node X is deﬁned as
follows. Let NX denote the set of neighbors of X. (By our
construction, NX is the set of all auxiliary nodes.) For any
w ∈ Nx, deﬁne the function η(w) as follows: If the state
value of w is 0, then η(w) = 1; otherwise, η(w) is the proba-
bility value associated with the auxiliary node w. The value of
the function gX is equal to 1 if and only if Πw∈Nxη(w) ≥ p,
where p is the probability threshold speciﬁed as part of the
PRE problem instance for the SSyDS S.

The ﬁnal conﬁguration C1 for S1 has the value 1 for all
the nodes of G1. This completes the reduction.
It can be
seen that the reduction can be carried out in polynomial time.
The following lemma points out some properties of the above
construction.

Lemma 4.4 (a) The graph G1 is treewidth bounded.
(b)
Each of the local transition functions of S1 is r-symmetric
for some r. (c) For the stochastic SyDS S and conﬁguration
C, there is a predecessor with probability at least p if and
only if there is a predecessor for the conﬁguration C1 for the
deterministic SyDS S1.

IJCAI-07

2272

Theorem 4.1 follows from Lemmas 4.3 and 4.4.

It can also be shown that all the polynomial time results
mentioned above hold when the underlying domain is ﬁnite
(i.e., of ﬁxed size) instead of being Boolean.

5 Related Work

Many social scientists have studied stochastic transition func-
tions similar to the ones considered in this paper; see for
example [Axelrod, 1994; Epstein and Axtell, 1996; Macy
and Willer, 2002]. Computational aspects of CA have been
studied by a number of researchers; see for example [Wol-
fram, 1986]. Much of this work addresses decidability
of properties for inﬁnite CA. A stochastic version of 1-
dimensional CA has been studied from a formal language
perspective in [Mahajan, 1992]. A comprehensive survey
by Sarkar [Sarkar, 2000] provides additional information re-
garding other known results for CA. Questions concerning
the existence of ﬁxed points and garden of Eden conﬁgura-
tions (i.e., conﬁgurations which don’t have predecessors) in
deterministic SDSs are addressed in [Barrett et al., 2003b;
Tosic and Agha, 2005].

The predecessor existence problem has been studied in the
context of CA [Sutner, 1995; Green 1987] and other com-
putational models [Orponen, 2000]. The problem also arises
naturally in other applications such as reverse engineering ﬁ-
nite discrete dynamical systems from time series data, testing
liveness properties of certain network protocols and detecting
unreachable states in distributed systems; see [Barrett et al.,
2006] and the references cited therein.

6 Future Work

There are several directions for further work. First, it will be
useful to study the complexity of reachability problems when
there are additional restrictions on the stochastic functions
computed by the nodes. Second, it is of interest to extend
the results for the immediate predecessor problem to a more
general version, namely ﬁnding t-step predecessors, for ﬁxed
t ≥ 1. A different research direction is to formulate and study
other problems that arise in the context of social network dy-
namics as problems on stochastic dynamical systems.

Acknowledgments: We thank the referees for providing
helpful suggestions.

References

[Axelrod, 1994] R. Axelrod, The Complexity of Cooperation,

Princeton University Press. Princeton, NJ, 1994.

[Barret et al., 2003a] C. Barrett, H. Hunt III, M. Marathe, S. Ravi,
D. Rosenkrantz and R. Stearns, “Reachability Problems for Se-
quential Dynamical Systems with Threshold Functions”, The-
oretical Computer Science, Vol. 295, Issues 1-3, Feb. 2003,
pp. 41–64.

[Barrett et al., 2003b] C. L. Barrett, H. B. Hunt III, M. V. Marathe,
S. S. Ravi, D. J. Rosenkrantz and R. E. Stearns, “Predecessor
and Permutation Existence Problems for Sequential Dynami-
cal Systems”, Proceedings of the International Conference on
Discrete Models for Complex Systems (DM-CS 2003), Lyon,
France, June 2003.

[Barrett et al., 2006] C. Barrett, S. Eubank and M. V. Marathe,
“Modeling and Simulation of Large-Scale Biological, Infor-
mation and Socio-Technical Systems: An Interaction Based
Approach”, in Interactive Computation: The New Paradigm,
edited by D. Goldin, S. Smolka and P. Wegner, Springer 2006.
[Bodlaender, 1997] H. Bodlaender, “Treewidth: Algorithmic Tech-
niques and Results”, Proceedings of the 22nd Symposium on
Mathematical Foundations of Computer Science, 1997, pp. 29–
36.

[Epstein and Axtell, 1996] J. Epstein and R. Axtell, Growing Ar-
tiﬁcial Societies: Social Science from the Bottom Up, Brook-
ings/MIT Press, 1996.

[Eubank et al., 2004] S. Eubank, H. Guclu, V. Anil Kumar, M. V.
Marathe, A. Srinivasan, Z. Toroczkai and N. Wang, “Moni-
toring and Mitigating SmallPox Epidemics: Strategies Drawn
from a Census Data Instantiated Virtual City”, Nature, Vol. 429,
May 2004, pp. 180–184.

[Green 1987] F. Green, “NP-Complete Problems in Cellular Au-

tomata”, Complex Systems, Vol. 1, No. 3, 1987, pp. 453–474.

[Harel et al., 2002] D. Harel, O. Kupferman, and M. Y. Vardi, “On
the complexity of verifying concurrent transition systems”, In-
formation and Computation, Vol. 173, 2002, pp. 143–161.

[Kempe et al., 2005] D. Kempe, J. Kleinberg and E. Tardos, “Inﬂu-
ential Nodes in a Diffusion Model for Social Networks”, Proc.
32nd International Colloquium on Automata, Languages and
Programming (ICALP), 2005.

[Kung, 1982] H. Kung, “Why Systolic Architectures”, IEEE Com-

puters, 15(1), 1982, pp. 37–42.

[Macy and Willer, 2002] M. W. Macy and R. Willer, “From Factors
to Actors: Computational Sociology and Agent-Based Model-
ing”, Annual Review of Sociology, Vol. 28, 2002, pp. 143–166.
[Mahajan, 1992] M. Mahajan, “Studies in Language Classes De-
ﬁned by Different Types of Time-Varying Cellular Automata”,
Ph.D. Thesis, Indian Institute of Technology, Madras, 1992.

[Nichitiu and Remila, 1998] C. Nichitiu and E. Remila, “Simula-
tions of Graph Automata”, Proc. MFCS’98 Satellite Workshop
on Cellular Automata, Brno, Czech Republic, Aug. 1998.

[Orponen, 2000] P. Orponen, “An Overview of the Computational
Power of Recurrent Neural Networks”, Proc. 9th Finnish AI
Conference STeP 2000 - Millennium of AI, H. Hyotyniemi, ed.
Espoo, Finland, 2000, pp. 89–96.

[Papadimitriou, 1994] C. Papadimitriou, Computational Complex-

ity, Addison-Wesley, Reading, MA, 1994.

[Saks and Zhou, 1995] M. Saks and S. Zhou, “RSPACE(n) is con-
3/2)”, Proc. IEEE FOCS 1995, pp. 344–

tained in DSPACE(n
353.

[Sarkar, 2000] P. Sarkar, “A Brief History of Cellular Automata”,

ACM Computing Surveys, Vol. 32, No. 1, 2000, pp. 80–107.

[Sutner, 1995] K. Sutner, “On the Computational Complexity of Fi-
nite Cellular Automata”, Journal of Computer and System Sci-
ences, Vol. 50, No. 1, Feb. 1995, pp. 87–97.

[Tosic and Agha, 2005] P. Tosic and G. Agha, “On Computational
Complexity of Counting Fixed Points in Symmetric Boolean
Graph Automata”, Proc. UC’05 - Fourth International Confer-
ence on Unconventional Computation, Sevilla, Spain, October
2005, Springer-Verlag LNCS series, Vol. 3699, pp. 191-205.

[Wolfram, 1986] S. Wolfram (Editor), Theory and Applications of

Cellular Automata, World Scientiﬁc, 1987.

[Wooldridge, 2002] M. Wooldridge, An Introduction to MultiAgent

Systems, John Wiley & Sons, Chichester, England, 2002.

IJCAI-07

2273

