A  TABLET  INPUT  FACILITY  FOR  AN  INTERACTIVE  GRAPHICS  SYSTEM 

James  E.  Curry 
Adams  Associates 
A  division  of 

Keydata  and  Adams  Associates  Incorporated 

Watertown,  Massachusetts 

Introduction 

Effective  man-machine  communication  in  an 

interactive  graphics  environment  requires  a 
natural  and  convenient  way  for  the  on-line  user 
to  input  information  and  issue  commands  to  the 
computer.  Several  applications  have  been  des(cid:173)
cribed1 1,2,3 in  which  such  an  interface  has  been 
achieved  by  allowing  the  user  to  draw  symbols  on 
a  tablet. 
In  order  to  make  this  mode  of  inter(cid:173)
action  generally  available  to  users  of  the  TX-2 
graphics  f a c i l i t y ,*  we  have  augmented  the  TX-2 
graphics  programming  language  LEAP5  with  con(cid:173)
structs  for  handling  tablet  input  and  interfacing 
with  a  user-trainable  symbol  recognizer.  These 
extensions  to  LEAP  have  made  the  incorporation  of 
a  flexible  input  technique  into  a  graphics  appli(cid:173)
cation  program  as  straightforward  for  the  program(cid:173)
mer  as  typewriter  input.  Experimentation  with 
the  man-machine  interface  has  thereby  been 
greatly  simplified,  resulting  in  the  faster  devel(cid:173)
opment  of  useful  graphics  applications.  This 
paper  illustrates  an  application  which  uses  the 
symbol  recognition  f a c i l i t y,  and  describes  the 
language  extensions  through  which  the  interactive 
aspects  of  such  an  application  are  implemented. 

Symbol  Recognition 

Since  the  symbol  recognition  f a c i l i ty  is 

intended  for  a  wide  variety  of  graphics  applica(cid:173)
tions,  it  cannot  be  limited  to  a  fixed  symbol 
vocabulary.  Therefore,  we  provide  a  recognizer 
which  can  be  trained  by  the  individual  user  to 
accept  whatever  symbols  he  finds  convenient.  The 
recognition  algorithm  is  similar  to  that  described 
by  Teitelman.6 

The  recognizer  is  called  from  a  user  program 
whenever  a  symbol  has  been  drawn.  Properties  are 
extracted  from  the  path  of  each  stroke  of  the 
drawn  symbol.  These  properties  characterize 
where  the  path  starts  with  respect  to  four  over(cid:173)
lapping  regions  of  the  rectangle  enclosing  the 
stroke,  and  how  many  times  the  path  crosses  the 
boundaries  of  these  regions.  The  relative  posi(cid:173)
tioning  of  the  strokes  composing  the  symbol  is 
also  recorded.  The  properties  extracted  from  the 
input  symbol  are  compared  to  entries  in  the  spec(cid:173)
i f i ed  user-defined  symbol  dictionary,  yielding  an 
exact  match,  a  conditional  match  (most  properties 
of  some  entry  match  but  not  a l l ),  or  no  match 
(either  there  is  no  conditional  match  or  two  or 
more  matches  are  equally  close). 
If  the  symbol 
is  recognized,  either  exactly  or  conditionally, 
the  recognizer  returns  the  character  string  asso(cid:173)

-33-

ciated  with  the  matching  dictionary  entry,  and  the 
position  and  size  of  the  symbol  drawn. 

This  scheme  has  several  deficiencies  which 
stem  from  i ts  insensitivity  to  properties  such  as 
curvature  and  occurrence  of  corners.  However,  we 
have  found  it  more  than  adequate  for  any  applica(cid:173)
tion  we  have  attempted;  we  have  used vocabularies 
of  more  than  eighty  symbols  without  d i f f i c u l t y. 

Symbol  Definition 

The  user  creates  or  modifies  a  named  symbol 

dictionary  with  a  special  interactive  training 
program.  This  program  allows  the  user  to  enter 
symbols  into  a  specified  dictionary  by • simply 
drawing  examples  of  the  symbols  and  indicating 
what  their  defining  character  strings  are  to  be. 
For  example,  in  order  to  define  a  symbol  as  'TRN' 
(for  transistor),  the  user  draws  in  the  writing 
area  of  the  training  program  display. 

The  trainer  displays  a  scaled  version  of  the 
drawn  symbol  on  the  l e ft  and  calls  the  recognizer 
to  analyze  the  symbol. 
If  no  match  is  found,  the 
message  •??•  is  displayed  below  the  writing  area. 

This  work  was  performed  under  a  subcontract  of 
M.I.T.  Lincoln  Laboratory  which  is  operated  with 
support  from  the  U.S.  Advanced  Research  Projects 
Agency. 

The  user  may  now  define  this  symbol  by  touch(cid:173)

,TKN')  on  the 

ing  one  of  the  character  strings  on  the  lower 
part  of  the  screen,  or  by  entering  a  string  (in 
this  case 
typewriter.  This  causes 
the  properties  of  the  drawn  symbol  to  be  entered 
in  the  dictionary  and  associated  with 
This  is  indicated  by  the  message 
below  the  writing  area. 

,TRN.' 

'TRN'  displayed 

The  user  may,  if  he  wishes,  define  this  to 

(However,  it  is  usually  sufficient  to 

be  a  second  version  of  the  symbol  by  touching  the 
•TRN' 
target.  From  this  point  on,  the  recognizer 
w i ll  indicate  exact  recognition  for  either  ver(cid:173)
sion. 
define  only  one  version  of  a  symbol,  since  appli(cid:173)
cation  programs  do  not  distinguish  between  exact 
and  conditional  recognition.)  The  user  could 
instead  have  defined  this  symbol  as  a  different 
string;  the  recognizer  would  then  distinguish  the 
two  symbols. 

If  the  user  now  draws  a  symbol  with  the  same 

properties,  it  w i ll  be  recognized  exactly,  and 
the  message  'TRN'  w i ll  be  shown. 

'DEL' 

The  trainer  allows  the  user  to  delete  dic(cid:173)
target  appearing 

tionary  entries  with  the 
on  the  right  of  the  screen.  He  can  also  step 
through  the  entries  for  a  given  character  string 
with  the 
'FIND'  and  'NEXT'  targets,  and  examine 
the  properties  recorded  for  each  entry.  These 
f a c i l i t i es  provide  the  user  with  the  a b i l i ty  to 
edit  a  symbol  set.  This  would  be  done,  for  exam(cid:173)
ple,  when  the  user  wishes  to  replace  the  set  of 
application-dependent  symbols  in  an  existing 
dictionary  which  contains  symbols  for  the  normal 
character  set. 

Creating  a  typical  dictionary  of  about  forty 

symbols  takes  about  one-half  hour  of  console  time. 
Users  feel  that  this  minimal  effort  is  a  small 
price  to  pay  for  the  a b i l i ty  to  communicate  with 
the  computer  in  a  way  which  is  natural  and  con(cid:173)
venient  to  them. 

An Example 

There  are  a  number  of  graphics  applications 

on  TX-2  which  use  the  symbol  input  f a c i l i ty  as 
the  primary  user  interface.  These  applications 
include  a  graphical  (two-dimensional)  programming 
language,7  a  computer-aided  logic  design  system,e 
and  a  program  to  assist  in  the  layout  of  the 
photo  masks  required  for  the  diffusion  and  etching 
processes  involved  in  the  fabrication  of  integrat(cid:173)
ed  circuits.9>10  A  description  of  the  operation 
of  the  mask  layout  program  w i ll  indicate  some  of 
the  interactive  techniques  which  users  have  found 
convenient• 

A  somewhat  different  symbol  might  be  a  con(cid:173)
In  this 

ditional  match  to  this  dictionary  entry. 
case,  the  message  'TEN?'  appears,  indicating 
conditional  recognition. 

-34 

The  mask  designer  must  f i r st  create  a  d i c(cid:173)
t i o n a ry  of  symbols 
f or  the  commands  accepted  by 
the  program.  He  decides  what  symbol  he  wants  to 
draw  to  make  a  t r a n s i s t or  appear, 
and  defines  t h is  symbol  as  the  s t r i ng 
t y p i c al  d i c t i o n a ry 
about  t h i r ty  of  these  symbols. 

f or  t h is  a p p l i c a t i on  contains 

f or  example, 

'TRN.'  The 

The  user  begins  layout  out  a  mask  w i th  the 
placement  of  components  on  the  screen.  To  place 
a  t r a n s i s t or  mask,  he  draws  h is 
'TEN'  symbol 
where  he  wishes  the  t r a n s i s t or  to  be  l o c a t e d. 

The  r e s i s t or  symbol  is  recognized,  and  a  r e s i s t or 
mask  of  the  designated  length  appears. 

The  symbol  disappears  and  a  t r a n s i s t or  mask 
appears 

in  i ts  p l a c e. 

To  attach  a  r e s i s t or  to  the  r i g ht  of  t h is  t r a n s i s(cid:173)
t o r,  he  draws  a  'RRES'  symbol  ( f or  right-handed 
r e s i s t o r ).  Resistors  are  of  v a r i a b le  l e n g t h,  so 
the  length  of  the  symbol  determines  the  length  of 
the  r e s i s t or  mask  created. 

-35-

Various  other  types  of  components  may  be  added  to 
the  p i c t u re 

in  t h is  way. 

Picture  manipulations  are  also  s p e c i f i ed  by 
drawing  symbols.  A  component  or  group  of  neigh(cid:173)
boring  components  may  be  deleted  by  drawing  a 
symbol  defined  as 
on  the  screen. 

'DEL'  at  the  appropriate  place 

Each  component  w i t h in  the  bounds  of  the  symbol  is 
marked  to 
the  next  command. 

it  w i ll  be  a f f e c t ed  by 

i n d i c a te  t h at 

When  a ll  desired  components  have  been  s e l e c t(cid:173)

ed  (which  may  require  several 
these  components  are  not  a d j a c e n t ), 
draw  a 
extent  of  a  t r a n s l a t i on  o p e r a t i o n. 

the  user  may 
,MOV'  symbol  to  i n d i c a te  the  d i r e c t i on  and 

'SEL'  symbols  if 

The  components  appearing  w i t h in  the  bounds  of  the 
symbol  disappear  w i th  the  symbol. 

An  e x i s t i ng  component  or  group  of  components  may 
be  manipulated  by  f i r st  drawing  a 
'SEL'  symbol 
over  the  components  to  select  them  f or  some  f u r(cid:173)
t h er  o p e r a t i o n. 

- 3 6-

The  selected  components  are  moved  by  the  des(cid:173)

ignated  offset. 

This  symbol  causes  the  enclosed  portion  of 
the  picture  to  be  scaled  to  f u ll  screen  size  for 
more  detailed  work. 

Other  available  move  commands  specify  move(cid:173)

ment  to  a  designated  point,  and  translation  in 
the  horizontal  or  vertical  direction  only,  either 
through  a  designated  distance  or  to  a  designated 
point.  There  are  also  commands  for  deleting  a ll 
selected  components  and  for  placing  a  copy  of  the 
selected  component  set  at  a  given  point. 

The  user  can  also  control  how  much  of  the 

mask  being  designed  appears  on  the  scope  through 
commands  for  scaling  and  translating  the  entire 
picture.  One  useful  command  in  this  class  is 
invoked  by  the  'FIT'  symbol. 

-37-

Other  commands  give  the  user  the  a b i l i ty  to 

name  the  current  circuit  and  save  it  in  his  f i l i ng 
system,  and  to  recover  and  merge  named  circuits. 
The  circuit  name  may  be  drawn  on  the  tablet  with 
alphanumeric  symbols.  However,  users  generally 
find  it  more  convenient  to  enter  the  name  on  the 
typewriter• 

It  is  often  convenient  to  have  a  symbol 

which  calls  the  trainer  from  the  application  pro(cid:173)
gram.  The  dictionary  can  be  refined  or  augmented, 
and  layout  work  then  resumed  using  the  new  symbol 
set. 

Language  Facilities 

Most  of  the  graphics  programming  on  TX-2, 

including  the  application  described  above,  is 
done  in  LEAP,5  an  ALGOL-based  language  to  which 
constructs  have  been  added  for  data  structure 
manipulation,  homogenous  matrix  operations,  dis(cid:173)
play  output,  f i le  handling,  and  other  f a c i l i t i es 
oriented  to  time-shared  graphics.  These  con(cid:173)
structs  make  the  implementation  of  picture  manip(cid:173)
ulations  such  as  those  involved  in  the  mask  lay-
out  program  straightforward  for  the  programmer. 
LEAP  has  been  further  extended  to  allow  simple 
but  powerful  language  forms  for  monitoring  inter(cid:173)
active  events  and  communicating  with  the  symbol 
recognizer. 
(LEAP  is  implemented  in  VITAL,n  a 
compiler-writing  system,  permitting  easy  exten(cid:173)
sion  of  the  language.)  The  skeletion  LEAP  pro(cid:173)
gram  below  illustrates  the  level  of  programmer 
effort  required  to  incorporate  sophisticated 
tablet  input  into  an  application  program. 
(Cer(cid:173)
tain  syntactic  liberties  have  been  taken  in  this 
example  to  make  it  more  i n t e l l i g i b le  to  the 
uninitiated  reader.) 

Declare  an  input  parameter  R  of  data  type 
name'  which  w i ll  be  typed  when  the  program  is 
c a l l e d. 

' f i le 

Store  the  f i le  name 
i n to  the  reserved  v a r i a b le 
RECOGNIZER  to  e s t a b l i sh  the  f i le  as  the  symbol 
d i c t i o n a ry  to  be  used  by  the  r e c o g n i t i on  f a c i l i t y. 

Request  the  i n t e r a c t i ve  event  monitoring  system 
to  d i s p l ay  and  b u f f er  the  pen  t r a ck  and  push  an 
event  i n to  the  input  queue  when  drawing  is  com(cid:173)
p l e t e d. 
button  pushes, 
have  been  requested.) 

(Monitoring  of  other  events  such  as 
t a r g et  h i t s,  e t c .,  might  also 

Pop  an  event  from  the  input  queue  (pausing  u n t il 
an  event  occurs  if  the  queue  is  empty)  and  set 
the  reserved  integer  v a r i a b le  CAUSE  to  the 
t i f i c a t i on  number 

f or  the  event. 

iden(cid:173)

Branch  on  the  event  number  to  the 
l a b el  of  the 
appropriate  processing  section  f or  the  event. 

A  t a b l et  a c t i on  has  been  completed.  Analyze  the 
pen  t r a ck  using  the  symbol  set  named  in  RECOG(cid:173)
NIZER.  The  reserved  s t r i ng  v a r i a b le  SYMBOL  is 
set  to  the  associated  t e xt  s t r i n g;  XCEN,  YCEN, 
WIDTH,  HIGHT  i n d i c a te  the  center  and  dimensions 
of  the  drawn  symbol. 
is  also  a v a i l a b le 
INK 
if  a d d i t i o n al 
example, 

is  needed 
the  s t a r t p o i nt  of  the  symbol). 

in  the  two  dimensional  array 
information 

The  b u f f er  of  t a b l et  points 

( f or 

Erase  the  drawn  symbol. 

Execute  the  code 
SYMBOL. 

f or  the  action  indicated  by 

The  n u l l s t r i ng  indicates  the  symbol  was  not  r e c(cid:173)
ognized.  T y p i c a l ly  a  p a t t e rn  is  flashed  on  the 
screen  or  an  audible  s i g n al  given  when  t h is 
occurs. 

Place  a  t r a n s i s t or  mask  at  XCEN,  YCEN. 

Record  and  mark  a ll  components  whose  centers  are 
w i t h in  the  rectangle  described  by  XCEN,  YCEN, 
WIDTH,  HIGHT. 

Move  a ll  selected  components  through  the  distance 
i n d i c a t ed  by  the 
f i r st  stroke  as  recorded  in  the  array  INK. 

f i r st  and  l a st  p o i n ts  of  the 

-38-

Conclusion 

We  f e el  t h at  the  techniques  described  above 

are  a  s i g n i f i c a nt  improvement  on  conventional-
i n t e r a c t i ve  i n p u t. 
In  most  instances,  only  g r a(cid:173)
p h i c al  information  is  drawn;  t e xt  and  commands 
must  be  s p e c i f i ed  through  e i t h er  targets  on  the 
screen 
(which  c l u t t er  the  p i c t u re  and  increase 
d i s p l ay  load)  or  a u x i l l i a ry  keyboards  or  push(cid:173)
button  arrays 
(which  are  d i s t r a c t i ng  and  have 
only  l i m i t ed  mnemonic  v a l u e ).  With  a  symbol 
r e c o g n i t i on  f a c i l i t y, 
c a l,  t e x t u a l,  and  command  information  w i th  a 
single  device  which  is  n a t u r al  and  convenient  to 
use. 

the  user  can  input  g r a p h i(cid:173)

The  most  b e n e f i c i al  r e s u lt  of  adding  these 
f a c i l i t i es  to  the  TX-2  graphics  system  has  been 
t h at  experimentation  w i th  the  man-machine 
i n t e r(cid:173)
face  has  been  g r e a t ly  s i m p l i f i e d.  Experience 
has  shown  t h at  a  major  obstacle  in  developing 
a p p l i c a t i o ns  programs 
to  decide  what  he  wants  to  say  to  the  computer 
and  how  he  wants  to  say  i t.  The  f l e x i b i l i ty  now 
provided 
in  t h is  area  f or  both  the  programmer  and 
the  user  has  contributed  s i g n i f i c a n t ly  to  the 
f a s t er  development  of  u s e f ul  graphics  applica(cid:173)
t i o n s. 

is  g e t t i ng  a  p o t e n t i al  user 

References 

1 Bernstein,  M. 
I .,  "An  On-Line  System  f or  U t i l(cid:173)
i z i ng  Hand-Printed  I n p u t ,"  System  Development 
Corporation,  Santa  Monica,  C a l i f o r n i a,  TM-3052, 
J u ly  1966. 

2E l l i s,  T,  0 .,  and  Sibley,  W.  L.,  "On  the  Problem 

in  Computer  Graphics,"  Emerging 
in  Computer  Graphics,  Benjamin  Press, 

of  Directness 
Concepts 
1968. 

3Anderson,  R.  A .,  "Syntax-Directed  Recognition 
of  Hand-Printed  Two-Dimensional  Mathematics," 
ACM  Symposium  on  I n t e r a c t i ve  Systems,  Washing(cid:173)
t o n,  D.  C.,  August  I967, 

S u t h e r l a n d,  W,  R.,  Forgie,  J.  W.,  and  Morello, 
M.  V .,  "Graphics  in  Time-Sharing;  A  Summary  of 
the  TX-2  Experience,"  1969  Spring  J o i nt  Compu(cid:173)
t er  Conference. 

5Rovner,  P.  D.,  and  Feldman,  J.  A ,,  "The  LEAP 
Language  and  Data  S t r u c t u r e ," 
IFIP  Congress 
I968,  Edinburgh,  Scotland,  August  1968, 

6Tietelman,  W.,  "Real-Time  Recognition  of  Hand-
Drawn  Characters,"  I964  F a ll  J o i nt  Computer 
Conference,  p.  559-575. 

Implementation  of  AMBIT/G," 

7Rovner,  P.  D.,  and  Henderson,  D.  A .,  J r .,  "On 
the 
I n t e r n a t i o n al 
Conference  on  A r t i f i c i al  I n t e l l i g e n c e,  Washing(cid:173)
t o n,  D.  C,  May  1969. 

8Horbuckle,  G.  D,,  Deiphuis,  R.,  Spann,  R.,  and 
Thomas,  E .,  "Computer-Aided  Logic  Design  on  the 
TX-2  Computer,"  6 th  Annual  Design  and  Automa(cid:173)
t i on  Workshop,  Miami  Beach,  F l o r i d a,  June  1969. 

S u t h e r l a n d,  W.  R,,  "Computer  Assistance  in  the 
Layout  of  Integrated  C i r c u it  Masks," 
I n t e r n a t i o n al  Convention  Digest  1968,  New  York, 
New  York,  March  1968. 

IEEE 

1 0Richardson,  F.  K,,  and  Oestreicher,  D.  R., 
"Computer  Assisted  C i r c u it  Photomask  Layout," 
I l l i n o is  Computer  Graphics  Symposium,  Univer(cid:173)
s i ty  of  I l l i n o i s,  Urbana, 

I l l i n o i s,  March  1969. 

nMondschein,  L.  F .,  " V i t al  Compiler-Compiler 

System  Reference  Manual,"  M.I.T.  Lincoln  Labor(cid:173)
atory  Technical  Note  1967-12,  February  1967. 

-39-

