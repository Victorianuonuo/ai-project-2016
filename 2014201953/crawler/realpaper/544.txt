Probabilistically  Survivable  MASs  * 

Sarit  Kraus 

Dept.  of  Computer  Science 

Bar-Ilan  University 

Ramat-Gan,  52900  Israel 

sarit@cs.biu.ac.il 

V.S.  Subrahmanian  and  N.  Cihan  Tas 

Dept.  of Computer  Science 

University  of  Maryland 
College  Park,  MD  20742 
(vs, etas }@cs. umd.edu 

Abstract 

Muhiagent  systems  (MAS)  can  "go  down"  for  a 
large number of reasons, ranging from system mal(cid:173)
functions  and  power failures to  malicious  attacks. 
The  placement of agents on  nodes is  called a  de(cid:173)
ployment  of  the  MAS.  We  develop  a  probabilis(cid:173)
tic  model  of survivability of a  deployed MAS  and 
provide two  algorithms to  compute the probability 
of survival  of  a  deployed  MAS.  Our probabilistic 
model  docs  not  make  independence  assumptions 
though  such  assumptions  can  be  added  if so  de(cid:173)
sired. An optimal deployment of a MAS is one that 
maximizes  its  survival  probability.  We  provide a 
mathematical answerto this question, an algorithm 
that  computes  an  exact  solution  to  this  problem, 
as well as several algorithms that quickly compute 
approximate  solutions  to  the  problem.  We  have 
implemented our algorithms  -  our implementation 
demonstrates that  computing  deployments  can  be 
done scalably. 

Introduction 

1 
As muhiagent systems (MASs)  are  increasing used for crit(cid:173)
ical  applications, the  ability of these MASs to  survive intact 
when various external events occur (e.g.  power failures, OS 
crashes, etc.) becomes increasingly important. However, one 
never knows when and  if a system will crash or be  compro(cid:173)
mised, and hence, any model of MAS survivability must take 
this uncertainty into account. 

We provide for the first time, a formal model for reasoning 
about  survivability  of  MASs  which  includes  both  a  declar(cid:173)
ative  theory  of survivability,  as  well  as  implemented  algo(cid:173)
rithms to  compute  optimal  ways of  deploying  MASs  across 
a network. 

A  MAS-deployment  specifies  a  placement  of  agents  on 
various network nodes.  Based  on  probabilistic  information 
about the survivability of a given node, we develop a formal 

"The  first tuthor is  also affiliated  with UMIACS.  This  work  was 
supported  in  part by the  Army  Research  Lab  under contract  DAAL 
0197K0135, the CTA  on Advanced Decision  Architectures, by ARO 
contract  DAAD190010484,  by NS1J grant 11S0222914  and  an  NSF 
ITR award 0205 489. 

theory describing the probability that a given deployment will 
survive.  This probability reflects the best guarantee we have 
of the MAS surviving. Our model does not assume that node 
failures  are  independent,  though  independence  information 
can be easily added if so desired.  The technical problem we 
need to grapple with is that of finding a MAS-deployment of 
the  agents having the highest probability of survival.  As  we 
do not make unrealistic independence assumptions, this prob(cid:173)
lem turns out to be intractable.  As a  consequence, heuristics 
are  required to  find  a  deployment (even if it is  sub-optimal). 
We develop algorithms for the following tasks: 

1. 

2. 

3. 

Given a MAS-deployment, how do we compute its prob(cid:173)
ability of survival? 
Find a MAS-deployment with the highest probability of 
survival  -  this  algorithm  is  infeasible  to  implement  in 
practice due to the above mentioned complexity results. 
We develop a suite of heuristic algorithms to  find (sub-
optimal)  MAS-deployments. 

We  have  conducted  detailed  experiments  with  our  algo(cid:173)
rithms -  for space reasons,  only some of them are  described 
here. The experiments show that our heuristic algorithms can 
find  deployments very fast. 

2  Preliminaries 
Agents.  The  only assumptions we make about agents is that 
they  provide one  or more  services.  We  further assume that 
all  host  computers  on  which  agents  are  located  have  a fi(cid:173)
nite  amount  of  memory  resources,  and  that  each  (copy  of 
an)  agent  a  requires  some  amount  of memory,  denoted  by 
mem(a).  A  multiagent  application  MAS  is  a  finite  set  of 
agents -  we make the  assumption that all  agents in  a multi-
agent application are needed for it to function. 
Networks.  A  network is  a  triple  (N,  edges, mem)  where 
is  a  set of called  nodes,  edges 
specifies  which 
nodes can communicate with which other nodes, and  mem  : 
specifies the total memory1  available at node n for 
use by agents situated at n.  A  network is fully connected iff 
edges  =   

Note  that the  symbol  mem  is  used  to both  denote  the memory 
requirements of an agent, as well as the memory available at a node. 
It is easy  to determine  the intended meaning  of this expression from 
context. 

MULTIAGENT SYSTEMS 

789 

Definition  2.1  Suppose  MAS  is  a  multiagent  application  and 
,  edges,  mem)  is  a  network.  A  deployment  for  MAS 
specifying  which  agents 
is  the 

on  Ne  is  a  mapping , 
are  located at  a  given  node.  (As  usual  if X  is  a  set, 
power  set  ofX). 

u  must  satisfy  the  following  condition: 

: 

that  every  agent  must  be  deployed  somewhere. 

This  condition  says 

mem 

mem(a).  This  condition 
says that  the  agents  deployed  at  a  node  cannot  use  more 
memory  than 

that  node  makes  available. 

says  that  agents  a i . a 2  are  de-

Intuitively, 
ployed  at  node  n 1. 
Example2.1  Supposed/  = 
{a.b.Cyd}. 

An  example  deployment  is  given  by: 
and 

' 
{d}.  This  example  will  be  used  throughout  this  paper. 

{n 1,n2,n3,n4 

}and  MAS  = 
— 
v  ~ 

3  Related  Work 
To  our knowledge,  there  are  no  probabilistic models  of  sur(cid:173)
vivability of a  M A S.  However,  there  are  many  works that are 
in  related areas. 

[Shehory  et  a/.,  1998]  use  agent-cloning  and  agent-
merging  techniques  to  mitigate  agent  over-loading  and  pro(cid:173)
mote system load balancing.  Fan  [Fan, 2001] proposes a  BDI 
mechanism to  formally model agent cloning to  balance  agent 
workload. 

[Fedoruk  and  Deters,  2002]  propose  transparent  agent 
replication technique - though an agentis  represented by mul(cid:173)
tiple copies, this is an internal detail hidden from other agents. 
Several other frameworks also support this kind  of agent fault 
tolerance  [Mishra,2001]. 

[Marin  et ex/., 2001 ]  develop adaptive fault tolerance tech(cid:173)
niques for  MASs.  They  use  simulations  to  assess migration 
and  replication  costs.  However,  [Marin  et  ai %  2001]  con(cid:173)
cludes  by  saying  that  they  do  not  address  the  questions  of 
which of the  agents to  replicate, how  many replicas should be 
made,  where those replicas should be  allocated.  These ques(cid:173)
tions are addressed in the currentpaper, but we do not propose 
a  mechanism to  synchronize agent replications. 

[Kumar £/ a/., 2000] focus on  the problem of broker agents 
that are  inaccessible due to  system failures.  They use the  the(cid:173)
ory  of teamwork to  specify  robust brokered  architectures that 
can  recover from broker failure.  We,  on the  other hand, con(cid:173)
sider the  possible failure  of  any  agent in  the  multi-agent  sys(cid:173)
tems. 

The  problem  of network reliability has been  studied exten(cid:173)
sively—  [Gartner*  1999] provide an  excellent survey.  In  this 
paper  we  build  on  top  of  these  studies  and  assume,  as  dis(cid:173)
cussed  below,  that  there  is  a  disconnect probability  function 
for  a  network  specifying  the  reliability  of  each  node  of  the 
network. 

The  problem  of  fault-tolerant  software  systems  has  some 
similarities  to  our  agent  survivability  problem.  An  exten(cid:173)
sive  study was  performed to  solve  this problem  using  the  X-
Version Problem (N VP) approach.  The  N VP is denned as the 
"independent  generation  of  
functionally  equivalent 
programs  from  the  same  initial  specification**  [Lyu  and  He, 
1993].  In this approach, the reliability of a software system is 

increased  by  developing  several  versions  of  special modules 
and  incorporating  them  into  a  fault-tolerant system  [Gutjahr, 
1998].  However, these works (i)  make unnecessary or unwar(cid:173)
ranted independence assumptions, (ii) provide only a measure 
of  expected survivability  rather than  guaranteed  survivability, 
(iii)  do  not  consider replication. 

edges,  mem)  is  a  mapping  dp  :  

is  the  set  of all  closed  subintervals  of'[0,1]. 

4  A  Probabilistic  Model  of Survivability 
Multiagent  applications  can  "go  down 11  because  nodes  on 
which agents are  located can  crash.  Alternatively,  agents are 
on  a  mobile node  (e.g.  a  vehicle) may  wander beyond  com(cid:173)
munications  range, thus  dropping  out  of the  network. 
Definition  4.1  A  disconnect  probability  function  for  a  net(cid:173)
work 
where 
C[0,1] 
=  [0.2,0.3],  then  this  says  that  there  is 
Intuitively,  if  dp  
a  20  -  30%  probability  that  node  N  will  get  disconnected 
from  the  network.  Note  that  this  model  supports  the  situa(cid:173)
tion  where  we  do  not  know  the  probability  of  node  n  get(cid:173)
ting  disconnected  -  in  this  case,  we  can  set  dp(A r)  =  [0.1]. 
Likewise,  if we  know  that  a  node  w i ll  get  disconnected  with 
80%  probability  with  
margin of error, then  we  can  set 
dp(n)  =  [0.77,0.83].  One possibility to  compute dp in  a  spe(cid:173)
cific setting is by collecting statistical data on  the past failures 
of each node.  This  would  give us  both  a  mean probability  of 
failure for a given node as  well as  a standard deviation which 
would jointly result in  a probability interval.  In  other applica(cid:173)
tions  (e.g.  where  statistics  are  not  available)  expert  opinions 
can be used. 

Given a network  (A/*, edges, mem)  and  a  disconnect prob(cid:173)
ability function dp,  there  is  a  space  of possible networks that 
may arise  in  the  future. 
Definition  4.2  Suppose  [J\f,  edges,  mem) 

is  a  network  and 
,  edges',  mem)  is  a  possible future  net(cid:173)
edges  and 
= 

Then 

work  where  edges' 

to  denote 

edges, mem) 

the  set  of 
We  use 
all  possible  future  networks  associated  with  a  network 
(N,  edges, mem)  and  a  disconnect  probability  function  dp. 
Note  that  we  can  infer  probabilities  of  possible  future  net(cid:173)
works  from  such  disconnect  probabilities  on  nodes.  Even 
though  many  future  networks  are  possible  at  a  given  time 
t  only  one  of  them  w i ll  in  fact  occur  at  time  t  So  at 
, edges, mem)  represents the  space  of pos(cid:173)
time 
~ 
sible  network  configurations.  Given  a  network  .  
'.  Fur(cid:173)
thermore,  since  in  this  paper  we  do  not  discuss  the  failure 
of edges,  for space  reasons,  we  will  omit them  from  the  net(cid:173)
works  in  the  rest of the  paper. 

)  edges',  mem)  we  write  

Suppose  p r ob  

future  network  Ne.  For  any  
straint: 

denotes  the  probability  of  a  possible 
we  can  write the  con(cid:173)

This  constraint  says  that  the  sum  of  the  probabilities  of  all 
future  networks  in  which  node  N  survives  must  be  between 
We take all such constraints 

790 

MULTIAGENT SYSTEMS 

(one  for each node)  and  add  a  constraint  which  says  that the 
only possible future  networks are  those  in  
mem). 
Last, but not least, w e know that the probability of each future 
network is  at least 0.  This  gives us: 

For any  Nef 

mem),  p r ob   

If 

mem),  then  CONS(dp,Ne)  denotes  the  set 
of  all  such  constraints. 2  We  can  use  CON S{dp.  Ne)  to  de(cid:173)
termine Lhe  survival probability of a  given  deployment. 

Definition  4.3  Givena  network  Ne,  a  disconnect probability 
function  dp,  and  a  deployment  fi,  we  say  that  the  probability 
ofsurvival  of // 
minimize 
subject  to   

the  following 
is a  deployment 

linear  program: 

is  given  by 

P r ob 

 

The  solutions  of  CONS(dp.Ne)  are  possible  probabilities 
of  possible  future  networks  arising.  Clearly,  any  of  these 
probability  assignments  is  possible.  The  objective  function 
above  adds  the  probabilities  of  all  possible  future  networks 
where  at  least  one  copy  of each  agent  in  MAS  survives.  This 
expression  must  be  minimized  because  different  solutions  of 
CONS(dp.Ne)  assign  different  values  to  this  sum  -  as  any 
of these  solutions is  possible, the  only  guarantee  we  can  give 
about  survivability  of  //  is  that  it  exceeds  the  minimal  such 
value. 
C o m p u t i ng  O p t i m al  Deployment  (COD)  Problem.  Given 
a  network  AY,  and  a  disconnect  probability  function  dp, 
find  a  deployment  whose  probability  of  survival  is  maxi(cid:173)
mal. 

This  is  the  key  problem  that  we  will  solve. 

5  Computing  the  Survival  Probability  of a 

Deployment 

A  naive way to  find  the  probability  of survival of a  given  /i  is 
to  solve  the  linear program  of  Definition  4.3  using  classical 
linear programming  algorithms  [Hillerand  Licberman,  1974; 
Karmarkar,  1984].  However,  the  size  of  the  linear  program 
involved  in  enormous.  Our  Compute  Deployment Probability 
(CDP)  algorithm  will  avoid  this  problem.  CDP  uses  a  func(cid:173)
tion  called hoc which takes an  agent a,  a network  (A^, mem), 
and  a  deployment /i  as  input,  and  returns the  set  of all  nodes 
as  output.  One  way  of pruning 

such  that 

the  search is to  use  the  following  results. 

Proposition  5.1  Suppose  MAS 
is  a  multiagent  application 
and  Ne  is  a  network  and  suppose  there  is  at  least  one  multi-
agent  application  deployment for  MAS  on  Ne.  Further  sup(cid:173)
.  Then  there  exists an 
pose  that for  all  agents  a,  mem 
/i  has  maximal  prob(cid:173)
optimal  multiagent 
deployment 
ability  of  survival)  such  that  for  all  agents  aj  ,32, 
the  set  of 
is  not  a  strict  subset  of 
locations  of agent  ai  according 
the  set  of locations  of agent  a2  according 

(i.e. 

to 

to 

 

2It  is  important to  note  that  if,  for example,  we  know  that  the  dis(cid:173)
connect probabilities  of ni  and  n 2  are  independent,  then  we  can  ex(cid:173)
pand  CONS(dpyNc)  to 

the  constraint  p r ob 

include 

 

further  detail. 

,  For  space  reasons,  we  do  not  go  into  this  in 

The above result says that when trying to  find an optimal mul(cid:173)
tiagent deployment /x,  we must ensure that no  agent is  located 
in  a  set of nodes that is  a  strict subset of the  set  of nodes that 
another agent is  located  in.  As  we  shall  see, this  property al(cid:173)
lows us  to  prune  our search  a  fair amount.  Before  describing 
our algorithm, we need to  introduce some  notation, 

and 

ra  
.  Ne. 

An  agent  a  is  relevant  w.r.t. 
if  there  is  no 
other agent which  is  deployed at  a  strict subset  of nodes 
at  which  a  is  deployed, 
denotes  the  set  of 
relevant agents w.r.t.  
The  necessary  nodes  of  Ne  w.r.t 

— 
.  Nodes  in 
which no  relevant agents are  deployed are not important. 
The  following theorem  says  that survivability is  unaffected  if 
we  get  rid  of unnecessary nodes. 

is 

Theorem  5.1  Suppose  MAS 

mem) 

bility  function  and  ft 
ployment  for  MAS  on  Ne. 

is  a  multiagent  application, 
is  a  network,  dp  is  a  disconnect  proba(cid:173)
is  a  feasible  multiagent  application  de(cid:173)
mem)  where 
to . 
then 

is  the  restriction  of 

surv(/i)  —  surv(/i'). 

Proof Sketch.  It  is  easy  to  see  that  it  is  enough to  show  the 
claim  for  the  case  that  only  one  node  is  removed  from  , 
when  constructing  Ne'.  Without  loss  of  generality,  let  us  as(cid:173)
sume that, 
.  We make the  following observa(cid:173)
tions: 

It  can  be  shown  that,  

is  feasible  w.r.t  

iff 

is  also feasible  w.r.t   

in 

for  each  node.  C()NS(dp.Ne')  docs  not 

consists  of n  equations, 
include 

Let 
one 
an  equation for N\  and  thus  includes  n  -  1  equations. 
We  use  p r ob  (resp.  p r ob  )  to  denote  the  probability 
(resp.  CONS(dp,Ne')). 
CONS(dp,Ne) 
function 
Consider the  equations  w.r.t. 
both  Afeand  i W, both equations have the  same left side, 
viz. 
.  The  right  side  of  the  relevant  equa(cid:173)
elements  of 
tion  in 
the  form  p r ob  
In 
CONS(dp,Ne') 
the  corresponding  equation  consists 
of 

elements  of  the  form  p r o b' 

consists  of 

For 

 

prob(N'') 

.  Thus  for  each  element in  an  equa(cid:173)
tion  of  CONS{dp :  Ne')  of  the  form  p r o b'  
there 
are  exactly  two  terms  in  the  corresponding  equation  in 
CONS{dp:Ne):  one  of  the  form 
and  the 
other of the  form  p r ob 
Similarly,  if the minimization  expression  with  respect to 
Ner  is  of  length  (i.e.  number of terms)  k,  then  the  min(cid:173)
imization  expression  with  respect to  Ne  is  2A;. 
In  par(cid:173)
ticular,  for  each  p r o b ^ A f ")  there  are  two  terms  in  the 
minimization  expression  of  the  form  probXA/ 7')  and 
prob'  

 

We  are  now  ready  to  prove  our  claim.  Suppose  the  min(cid:173)
imization  problem  is  solved  with  respect  to  Ne,  We  set 
p r o b'  
.  It  is easy 
to  see  that  based  on  our  observations  that  CONS(dp<Ne f) 

=  p r ob  

+  p r ob  

MULTIAGENT SYSTEMS 

791 

be  a  deployment w.r.t.  a  possible future  network.  This  intu(cid:173)
ition  leads  to  the  following  algorithm  CDP. 
A l g o r i t hm  5.1  (CDP(ATe,dp,MAS,  

) 

lnput:(l)A  network  Nc  = 

(,V,  mem) 

(2) a  disconnect  probability  function  dp 
(3) a  multiagent  application  MAS 
(4) a feasible  deployment  ; and 

Output;  the  survivability  of   

1. 
2. 
3. 

4.  Return  the  result of the following  linear program. 

minimize 
subject  to  Cons(dp,Ncf). 

CDP  works  by  first  focusing  on  the  necessary  nodes.  Then, 
for  each  agent  a 
MAS',  all  nodes  where  that  agent is  lo(cid:173)
cated are  identified.  It then  computes all  hitting  sets  of these 
nodes.  For any possible future network it  checks whether one 
of the hitting  sets  is  a  subset of the  nodes of the  network.  It  is 
easy  to  see that CDP is  exponential  in  the  number of the  nec(cid:173)
essary nodes.  The  following  example  illustrates the  working 
of this  algorithm. 

w i ll be  satisfied and the  values w i ll minimize the  relevant ex(cid:173)
pression. 

(ii)  We 

=  p r ob  

(i)  p r o b 'i  

to  CONS(dp,Ne): 

Suppose  the  minimization  problem 

is  solved  with  re(cid:173)
In  this  case,  we  add  the  following  equa(cid:173)

spect  to  Ne'. 
+ 
tions 
replace  each  expression  in 
p r ob  
form  prob(A/*")  -f 
the  minimization  expression  of  the 
prob(A^ ;/  U  {Ni})  by  p r o b'  
It  is  easy  to  see  that 
the minimization expression is  identical to  the  one associated 
the  constraints  of  CONS{dp,Nt)  except 
with  Ne'  and  all 
those  of  CONS(dp,Ne f)  and 
the 
first  one  are 
identical  to 
are satisfied.  Hence, it  is  left to show  that the constraint asso(cid:173)
ciated  with  N\  is  satisfied. 
is  of 

This  constraint 

1 

-  dp(JVi) 

the 

form: 

= 

The  net impact of this  theorem  is that only necessary nodes 
need  to  be  considered.  We  demonstrate  this  using  Exam-
pie  2.1. 

the  deployment  of  Example  2.1. 
E x a m p l e 5 .1  Consider 
Agent  d  is  deployed  at  nodes  {ri2,  n3,  n 4 }  and  c  is  deployed 
at  nodes  {ri2)  n3}.  Clearly,  c  is  deployed at  a  strict  subset  of 
nodes  at  which  d  is  deployed.  In  order  for  the  deployment  to 
survive  in  a  given  possible  future  networkone  of  the  nodes  on 
which  c  is  located,  n<i  or  n$  must  stay  connected.  But  then 
d  will  also  be  deployed  in  the  new  network.  However, 
if  n4 
stays  connected  in  a  future  network,  but  neither  ri2  nor  n3 
stay  connected, 
the  deployment  will  not  survive.  Thus,  based 
theorem  5.1  when  computing  the  survivability  of  the  de-
on 
ployment,  there  is  no  need  to  consider  d  and  n^. 

We  are now  ready to  use  the  above  theorem to  formulate our 
algorithm  CDP  to  compute  probability  of  survival  of  a  de(cid:173)
ployment.  Our  CDP  algorithm  will  use  the  well  known  no(cid:173)
tion  of  a  hitting  set. 

Definition 5.1  Suppose  
hitting  set for  S 
all 

is a  set  of sets.  A 
such  that: 
(1)  for 
there  is  no  strict  subset 
h  satisfying  condition  (1)  above.  HitSet(S)  denotes  the 

is  any  set 

set  of all  hitting  sets  ofS. 
H i t S et can be  implemented in  any number of standard  ways 
prevalent  in  the  literature.  We  w i ll  focus  on  the  following 
hitting sets  with  respect to  a  given network. 

Definition  5.2  Suppose  MAS 
Ne  =  (ff,  mem)  is  a  network  and, 
application  deployment for  MAS  on  Nt. 
sets  with  respect  to  MAS,  Ne  and 
HltSet(  

is  a  multiagent  application, 
is  a  feasible  multiagent 
The  set  of  hitting 
= 

is  hs 

Intuitively,  the  hitting  sets  above  describe  minimal  sets  of 
nodes  that  must  be  present  in  a  possible  future  network  in 
order for the  multiagent application to  survive.  We  will  use 
hitting  sets  to  determine  whether a  deployment w.r.t.  Ne  can 

In  example  5.2, 

Example  5.3 
there  were  no  constraints  on 
the  dependencies  of the  disconnect probabilities  of the  nodes. 
Suppose  we  know, 
that  the  probability  that  both 

in  addition, 

792 

MULTIAGENT SYSTEMS 

In 

nodes  n\,  n^  get  disconnected  is  0.05, 
= 
this  case  we  should  consider  all  possible future  net-
0.05. 
works  whose  set  of  nodes  is  not  a  superset  of 
Those 
sets  are  M2  and  N8  of example  5.2.  Thus,  the  new  constraint 
isp2  + P8  = 0 . 0 5. 

i.e.  dp 

If we  run 

the  linear program  ofexample  5.2  again  with 

the 
additional  constraint, 
/>4  =  0.05, 
PQ  =  0.05,  ;>7  =  0.65,  pi  =  0,2,p<i  =  0.05,  p 5  =  pa  =  P&  = 
0  which  yields  the  minimum  value  of  0.75  for 
the  objective 
function. 

the  results  are  as  follows: 

6  Computing  Optimal  Deployments 
We  are  now  ready  to  develop  algorithms  to  find  an  optimal 
multiagent deployment.  We first present the  C OD  algorithm 
to compute optimal deployments.  We  also prcsenttwo  heuris(cid:173)
tic  algorithms,  H A Dl  and  H A D 2,  which may  find  subopti-
mal  deployments (but do  so  very  fast). 

T he  C OD  A l g o r i t hm 

6.1 
One may wonder if  C OD can  be  solved  via  a  classical prob(cid:173)
lem  such  as  facility  location  problem  (FLP)IShmoys  et  ai, 
1997].  In  FLP, there are a  set of facility locations and  a  set of 
consumers.  The  task  is  to  determine  which  facilities  should 
be  used  and  which  customers  should  be  served  from  which 
facility  so  as  to  minimize  some  objective function  (e.g.  sum 
of travel  times  for  customers to  their  assigned  facility).  One 
may  think  that  we  can  directly  use  FLP  algorithms  to  solve 
C OD  -  unfortunately, this  is  not true. 

Theorem  6.1 
p 

is  optimal  is  NPNP-hard. 

The problem  of checking  if a  MAD-deployment 

This  theorem  says  that  even  if  we  have  a  polynomial  or(cid:173)
acle  to  solve  NP-complete  problems,  checking  if  a  M A D-
deployment  is  optimal  is  still  NP-hard  I 
In  fact,  it  is  easy 
to  reduce  the  facility  location  problem  to  that  of  finding  an 
optimal  deployment.  Even  if  we  have  an  oracle  for  facility 
location, the  MAD-deployment problem  is  still  N TP-hard. 

Computing  an  optimal  MAD-deployment  involves  two 
sources  of  complexity.  The  first  is  the  exponential  space  of 
possible  deployments.  The  second  is  that  even  if  we  have  a 
given  deployment,  finding  its  probability of survival  is  expo(cid:173)
nential. 

Thus,  to  solve  C OD  exactly,  we  do  a  state  space  search 
where the  initial  state places  all  agents in  a  multiagent appli(cid:173)
cation  MAS  on  all  nodes of the  network Ne.  If this  placement 
is a deployment, then we are done.  Otherwise, there are many 
ways of removing agents from  nodes and each such way leads 
to  a  possible  deployment.  The  value  of a  state  is  the  surviv(cid:173)
ability  of  the  state,  which  can  be  computed  using  the  CDP 
algorithm.  As  soon  as  a  deployment is  found, we  can  bound 
the  search  using  the  value  of  that  deployment.  The  reason 
is  that  given  any  state  in  the  search,  all  states  obtained  from 
that  state by  removing one  or more  agent has  a  lower surviv(cid:173)
ability  than  the  original  state.  Before  presenting  the  C OD 
algorithm, we  first  present the  SEARCH  routine used by  it. 
Algorithm  6.1  SEARCH   

lnput:(I)A  network  Ne  ==  (, 

, mem) 

(2)  a  disconnect  probability  function,  dp   

(3) 
(4) 
(5) 

(6) 

(global  variable) 

a  multiagent application,  MAS 
a  deployment,   
best deployment found so far, 
best 
best  survivability  value found  thus far, 
bestval 
The procedure changes  the  global variables 
best  and best  

(global  variable) 

Output. 

We  are now  ready to  present the  C OD  algorithm. 
A l g o r i t hm  6.2  COD(7Ve,dp,MASj 

Input: 

(I) 
(2) 
(3) 

A  network Ne  =  (A/\  mem) 
a  disconnect  probability  function  dp, 
a  multiagent  application  MAS 

Output:  an  optimal deployment 
J. 
2. 
3. 
A. 

The  correctness  of  C OD  depends  on 
the  correctness  of 
bounding  the  search  in  step  2  of  algorithm  6.1.  We  present 
the  correctness  result below. 

Theorem  6.2  Suppose  MAS 
is  a  multiagent  application, 
Ne  =  (A/\  mem)  is  a  network  and  dp  is  a  disconnect proba(cid:173)
bility function.  Then  C O D ( 7 V e,  dp.  MAS) 
returns  an  opti(cid:173)
mal  deployment  of M  AS  on  Ne. 

The  astute  reader  may  notice  that  CDP  is  computed  for 
every  placement.  Many  of these  placements  are  very  similar 
to  each  other.  Hence,  one may  wonder whether  it  is  possible 
to  use  the  results  of  computing  CDP  applied  to  a  previous 
placement to  a  placement that  is  very  similar to  the  previous 
placement.  The  two propositions below  show  that this  can be 
done. 

Proposition  6.1  Suppose  MAS 
is  a  multiagent  application, 
Ne  =  (JV/*,  mem)  is  a  network  and  dp  is  a  disconnect proba(cid:173)
bility function.  Suppose  the 
was  obtained  from 
in  step2(b)iA  of  algorithm  6.1  and  suppose 
the  placement  fi 
Ne'  = 
.  Then  the 
is  a  subset  of 
set  of  hitting  sets  with 
the  set  of  hitting  sets  with 
That  is, 
hs  

[JsP,  mem),  such  that  N*  =  nn(7Ve, 
and  Ne' 
to 

respect  to 

placement 

and  Ne. 

respect 

The  following  example demonstrate a  situation where 
hs  

MULTIAGENT SYSTEMS 

793 

{ a , 6 , c} 

A l g o r i t hm  6.4  H A Dl  (We,dp, MAS; 

Input.  As in  algorithm COD  (6.2). 
Output: a deployment 

Example6.1  Supposed  = 
and the deployment }i  is  as 

{'/*i,y*2»'*3}/  MAS  = 
follows: 
Thus,  

 

ting  sets  are,  hi  —  {ni.712},  h-z  —  { ^ 1 . ^ 3 }. 
agent  a from  node  rii, 
set. 

.  The hit(cid:173)
If we  remove 
then  the  set  I12  is  no  longer  a  hitting 

Proposition  6.2  Suppose  MAS 

is  a  multiagent  application, 
mem)  is  a  network and  dp  is  a  disconnect proba(cid:173)
Suppose  the  placement  t  was  obtained  from 
in  step2(b)iA  of algorithm  6.1  and  suppose 
Suppose 

j mem),  such  that 

bility  function 
the  placement 

such  that 

but. 

there  is 
Then,  
We  use the  above propositions to  give  a  new  version.  C D P l, 
of the  CDP  algorithm. 
Definition  6.1  Suppose  MAS 
Me  = 
supports  an  agent  a 
a  

(ftf.  mem)  and  //  is  a  deployment.  A  set 

is  a  multiagent  application, 

if  there  is  A r 

It  such  that 

MAS 

 

The  I I A D2  algorithm  is  based  on  the  intuition  that  we 
should  first  locate  agents  with  high  resource  requirements, 
and  then  deal  with  agents  with  low  resource  requirements. 
Thus,  we sort agents in  ascending orderaccording to  resource 
requirements,  place  them,  then  go  to  agents  with  the  sec(cid:173)
ond  highest  resource  requirements,  and  so  on.  If  at  the  end 
resources  are  still  available,  then  we  make  replicas  of  the 
agents. 
A l g o r i t hm  6.5  H A D 2 ( N e ; , d p , M A S) 
(*  Input  and  Output  as  in  node-based-heuristic (HADl)  *) 

5.  Assign  to  p  the  result  of  the  following  linear  program: 

minimize 
subject  to  Cons (dp,  Ne). 

6.  Return p and H; 

The  SEARCH  and  C OD  algorithms need to  be  modified in  a 
straightforward way to  use  C D Pl  -  we  do  not  go  through the 
details for  space reasons. 

H e u r i s t ic  A l g o r i t h ms 

6.2 
In  this  section,  we  describe  two  fast  heuristic  algorithms, 
H A D l,  H A D 2.  H A D1  iteratively  solves  knapsack  prob(cid:173)
lems  [Cormen  et a/.,  1990] by  trying to  pack nodes with  low 
disconnect  probability  first. 

1  Experiments 
We have implemented all  the algorithms described in this pa(cid:173)
per.  For  space  reasons,  we  only present experimental  results 
on  the  heuristics for  computing  optimal deployments. 

In  our experiments, we  varied the number of agents and the 
number of nodes.  For  each  combination  of agents and nodes, 
we  ran  several  trials. 
In  each  trial,  we  randomly  generated 
the  memory  available  on  each  node,  the  node's  disconnect 
probability,  and  the  memory  required  for  one  copy  of  each 
agent.  The  experiments were  conducted on  a  Linux  box, us(cid:173)
ing  Red  Hat 7.2  (Enigma).  In  all  the  experiments the  number 
of nodes4-  agents  varied  between  1  and  500.  We  randomly 

794 

MULTIAGENT SYSTEMS 

plications,  there  is  a  growing  need  for  guarantees  that  such 
multiagent applications w ill  survive  various kinds of catastro(cid:173)
phes.  The  scope of the  problem  is  so  vast that any one paper 
can only make a  small dent in  this  very important problem. 

In  this paper,  we have carved out such  a  small piece of the 
problem.  Specifically, we  study the problem of how  to  deploy 
multiple copies of agents in  a  M AS  on nodes so that  the prob(cid:173)
ability  of survivability of the  M AS  is maximized.  We  provide 
a  formal,  mathematical model  for probabilistic  MAS  surviv(cid:173)
ability,  and  develop  an  optimal algorithm  for  this  purpose  a* 
well as some heuristic algorithms.  We have conducted exper(cid:173)
iments showing the  effectiveness of the  approach. 
References 
[Gormen et a/,,  1990]  T.  H.  Cormen,  C.  E.  Leiserson,  and 
R.  L.  Rivest.  Introduction  to  Algorithms.  M IT  Press,  Cam(cid:173)
bridge,  M A,  1990. 

[Fan,2001]  X.  Fan.  On  splitting  and  cloning  agents,  2001. 

Turku  Center for  Computer Science, Tech.  Reports 407. 
[Fedoruk and Deters, 2002]  A.  Fedoruk  and  R.  Deters.  Im(cid:173)
proving fault-tolerance  by  replicating  agents.  In  Proceed-
ingsAAMAS-02,  pages 737-744, Bologna, Italy, 2002. 

[Gartner,  1999]  F.  C.  Gartner. 

Fundamentals  of  fault-
tolerant  distributed  computing  in  asynchronous  environ(cid:173)
ments.  A CM  Computing  Surveys,  31(1):  1-26,1999. 

[Gutjahr,  1998]  W.  J.  Gutjahr.  Reliability  optimization  of 
In  The  9th 
redundant  software  with  correlate  failures. 
fnt.  Symp.  on  Software  Reliability  Engineering,  Germany. 
1998. 

[Hillerand Lieberman,  1974]  F.  S.  Hiller  and  G.  J.  Lieber-

man.  Operations  Research.  Holden-Day,  San  Francisco. 
1974. 

[Karmarkar,  1984]  N.  Karmarkar.  A  new  polynomial-time 
algorithm  for  linear  programming.  Combinatorica,  4:373-
396,1984. 

[Kumar*/  ai,2000]  S.  Kumar,  P.R.  Cohen, 

and  H.J. 
Levesque.  The  adaptive  agent  architecture:  achieving 
In  Proc.  of 
fault-tolerance  using  persistent  broker teams. 
ICMAS.  2000. 

[ L y u a n d H e,  1993]  M.  Lyu  and  Y.  He. 

Improving  the  n-

version  programming  process  through  the  evolution  of  a 
design  paradigm.  IEEE  Trans.  Reliability,  42(2),  1993. 
[Marin et ai, 2001]  O. Marin, P.  Sens, J.  Briot, and Z. Gues-
soum.  Towards  adaptive  fault  tolerance  for  distributed 
multi-agent  systems. 

In  Proceedings  of ERSADS.  2001. 

[Mishra.2001]  S.  Mishra.  Agent fault tolerance using group 

communication. 

In  Proc.  of  PDPTA-Ol.NV,2001. 

[Shehory  et  al.,1998]  O.  Shehory,  K.  P.  Sycara,  P.  Cha-
lasani, and  S.  Jha.  Increasing resource utilization and task 
In  Proc.  of ATAL-98,  pp 
performance  by  agent  cloning. 
413-426,1998. 

[Shmoys et al., 1997]  D.  B.  Shmoys,  E.  Tardos,  and 
K.  Aardal.  Approximation  algorithms for facility  location 
problems.  In  Proc.  of STOC-97, pages  265-274,1997. 

Figure  1:  Heuristic  comparision:  Top  figurc:-Computation 
time  (in  miliseconds)  as  the  function  of the  sum  of the  num(cid:173)
ber  of  nodes  and  agents.  Bottom  figure:  survivability  as  a 
function  of the  sum  of nodes and  agents,  agents.  The  lighter 
line  and  the  darker  line  refer  to  the  nodes-based  and  agent-
based heuristics, respectively. 

generated numbers between 0  and 0.5 as the disconnect prob(cid:173)
ability  of each  node.  The  sizes  of the  agents were uniformly 
distributed between 3  and 9 (units ofmemory)and the sizes of 
the nodes were uniformly distributed between 5  and  30 (units 
of  memory). 

The  top  graph of figure  7  demonstrates the time efficiency 
of both heuristics:  they  can  find  a  deployment for 500  agents 
and sites in under a second. 

When  comparing  H A D1  and  H A D 2,  we  noticed  that 
(see bottom  graph  of  figure  7):  ( I)  as  the  sum  of the  number 
of agents and nodes increases, the  survivability decreases.  (2) 
The  node  based heuristic  almost  always  finds  better  deploy(cid:173)
ments than  the  agent-based heuristic.  In  addition,  (3)  When 
there  are  more  agents  than  nodes,  the  node  based  heuristic 
w i ll  require  less time, while  when there  are more nodes than 
agents the  agent based heuristic w i ll take  less time. 

The  intuition  behind  observation  (1)  is  as  follows.  As 
the  number of agents  increases,  it  becomes  more  difficult to 
maintain  the  feasibility of the  system,  and  thus  survivability 
decreases.  In  addition,  when the  number of nodes  increases, 
there  are  more  possible  future  networks  and  thus,  the  prob(cid:173)
ability  that  there  w i ll  be  one  network  with  a  low  probability 
increases. Since, the survivability depends on  the worst case, 
its  value decreases. 

8  Conclusions 
As  more  and  more  agents  are  deployed  in  mission  critical 
commercial, telecommunications, business, and  financial ap-

MULTIAGENT SYSTEMS 

795 

