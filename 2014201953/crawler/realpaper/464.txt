Non-Binary Constraints and Optimal Dual-Graph Representations 

Gianluigi Greco and Francesco Scarcello 

{ggreco,scarcello}@si.deis.unical.it 

DEIS - University of Calabria 

1-87036, Rende, Italy 

Abstract 

We study the relationships among structural meth-
ods for identifying and solving tractable classes of 
Constraint Satisfaction Problems (CSPs).  In partic(cid:173)
ular, we first answer a long-standing question about 
the  notion  of biconnected  components  applied  to 
an  "optimal"  reduct  of  the  dual  constraint-graph, 
by  showing that this notion  is  in fact equivalent to 
the hinge decomposition method.  Then, we give a 
precise characterization of the relationship between 
the treewidth notion applied to the hidden-variable 
encoding of a CSP and the same notion applied to 
some  optimal  reduct of the  dual  constraint-graph. 
Finally,  we  face  the  open  problem  of  computing 
such an optimal reduct.  We  provide an  algorithm 
that  outputs  an  approximation  of an  optimal  tree 
decomposition,  and  give  a  qualitative  explanation 
of the difference between this graph-based method 
and more general hypergraph-based methods. 

Introduction and summary of results 

1 
Constraint  satisfaction  is  a  central  issue  of  Al  research 
and  has  an  impressive  spectrum  of  applications  (see,  e.g., 
[Pearson  and  Jeavons,  1997]).  A  constraint 
con(cid:173)
sists  of  a  constraint  scope  Si,,  i.e.,  a  list  of  variables  and 
of  an  associated  constraint  relation 
containing  the  le(cid:173)
A  CSP  consists  of  a  set 
gal  combinations  of  values. 
of  constraints  whose  vari(cid:173)
ables  may  overlap.  A  solution  to  a  CSP  is  an  assignment 
of values  to all  variables such  that all  constraints  are  simul(cid:173)
taneously satisfied.  By solving a CSP we mean determining 
whether the problem has a solution at all  (i.e.,  checking for 
constraint satisfiability),  and,  if so,  compute one  solution. 

Constraint satisfiability  in  its  general  form  is  well-known 
to  be  NP-hard.  Much  effort  has  been  spent  to  identify 
tractable classes of CSPs,  and deep and  useful  results  have 
been  achieved.  The  various  successful  approaches  to  ob(cid:173)
tain  tractable  CSP  classes  can  be  divided  into  two  main 
groups [Pearson and Jeavons, 1997]: the techniques that iden(cid:173)
tify  tractable  classes  of CSPs  only  on  the  base  of the  struc(cid:173)
independently  of 
ture  of  the  constraint  scopes 
the  actual  constraint relations 
and  the techniques 
that identify tractable classes by exploiting particular proper(cid:173)
In  this  paper,  we 
ties  of the  constraint  relations 

will  deal  with  this  latter  group of techniques,  usually  called 
structural decomposition methods.  There  are  several  papers 
proposing polynomially tractable classes of constraints based 
on  different  structural  properties  of  constraint-scopes  inter(cid:173)
actions (see, e.g.,  [Dechter,  1992; Dechter and Pearl,  1989; 
Gyssens et al,  1994; Gottlob et al,  2000J).  Such a structure 
is best represented by the hypergraph 
ated to any CSP instance 
and  var(S)  denotes 
and 
the  set  of variables  in  the  scope  S  of the  constraint  C.  We 
often  denote  the  set of vertices by  N{H)  and the  set  of hy-
peredges by 

However,  many  interesting  techniques  for  solving  CSPs 
or  for  identifying  tractable  classes  of  CSPs  have  been  de(cid:173)
signed for binary CSPs, i.e., CSP instances where each scope 
contains  two  variables  at  most.  Therefore,  historically,  the 
first attempts to deal with general (i.e., non-binary) constraint 
problems  try  to  exploit  the  existent  methods,  by  represent(cid:173)
ing  any  CSP  instance  /  by  some  graph,  rather  than  by  the 
hypergraph H{I).  A  first  idea  is  to  use  the  primal  graph  of 
H (I), whose edges connect each pair of variables occurring 
together in  some constraint of /.  Clearly,  there is an evident 
loss  of information  in  using  the  primal  graph  instead of the 
hypergraph.  For instance, each constraint-scope of / induces 
a  clique  in  the  primal  graph,  but  if one  looks  at  the  graph 
only,  there  is  no  way  to  understand  whether  such  a  clique 
comes from a hyperedge of the  hypergraph, or by  some  in(cid:173)
tricate  interactions among  scopes.  In  fact,  in  [Gottlob et al, 
2000], a deep comparison among various structural decompo(cid:173)
sition methods showed that some technique designed for hy-
pergraphs is  more powerful than  all  the  (known) techniques 
working  on  the  primal  graphs. 
In  this  paper,  we  focus  on 
the  other two  important graph-based representations of non-
binary constraints, described in the literature, only marginally 
considered in that work: 
Dual-graph  Representation  [Dechter,  1992].  Given  a  hy(cid:173)
pergraph  H,  its  dual graph,  denoted  by  dual('H)  =  {N,E), 
is  the  graph  whose  set  of  vertices  iV  is  the  set  of  hyper-
edges 
and  whose edges connect each  pair of vertices 
(i.e.,  hyperedges)  having  some  variable  in  common,  that  is 

Hidden-variable  Representation  fSeidel,  1981;  Chekuri 
and  Rajaraman,  2000].  Given  a  hypergraph  H,  we  define 
its  incidence graph  as  the  bipartite  graph  inc(H)  =  (AT, E), 

CONSTRAINTS 

227 

only  if a  is  a node of h.  (E.g.,  Figure 2  shows a constraint 
hypergraph (a) and its incidence graph (b)). 

There  is  a great interest  in  comparing CSP  solving tech(cid:173)
niques based on these encodings of the structure [Bacchus et 
al,  2002]  and  long  standing  questions  about  their  relation(cid:173)
ships with hypergraph-based techniques, described below. 

One  of the  major difficulties  in  doing  precise  and  formal 
analysis  of  dual-graph  based  methods  is  due  to  an  impor(cid:173)
tant  feature of this  encoding:  some edges  of the  dual  graph 
can  be  safely removed from this graph,  making the evalua(cid:173)
tion  of CSPs  easier.  Indeed,  even  if  dual  (H)  appears  very 
intricate,  sometimes  is  possible  to  find  suitable  simplifica(cid:173)
tions that make it much more useful.  Such simplified graphs 
are called  reducts of dual  (H).  For instance,  if H. is  acyclic, 
there is a polynomial time algorithm for making its dual graph 
acyclic, and in fact a join tree of  H.  An example is shown in 
Figure 2.c, where the acyclic graph obtained by removing the 
dashed edges is a join tree of the given hypergraph. However, 
different removal choices may lead to different performances 
of evaluation  algorithms.  Thus,  the  efficiency  of any  tech(cid:173)
nique based on the dual graph depends crucially on the avail-
ability  of a  good  algorithm  for  simplifying  the  dual  graph. 
Note  that  finding  the  "best reduct"  is  a difficult  task  and  is 
currently not known whether it is feasible in polynomial time, 
in general. 

The first contribution of this paper is solving this question. 
First  we  formally  define,  for  each  method  D,  the  method 
y  that  is,  the  method  D  applied  to  the  best  possible 
Doptd
simplification  of the  dual  graph  with  respect  to  D.  Indeed, 
in  general,  the  notion  of best  simplification  depends on  the 
method D used for decomposing the graph.  This way, meth(cid:173)
ods applied to dual graph encodings are well-defined and can 
be compared with other methods. 

We formally prove that BIC0MPoptd is equivalent to HINGE. 
In fact, we show that any hinge decomposition corresponds to 
the  biconnected-components tree  of some  reduct of the  dual 
It  is  worthwhile  noting  that,  as  a  corollary  of this 
graph. 
result,  we  obtain  that,  for the 
method, an opti(cid:173)
mal reduction of the dual graph can be computed in polyno(cid:173)
mial  time,  since any hinge decomposition can  be computed 
in polynomial time. 

Then, we consider the powerful decomposition method for 
dealing with graphs: the tree decomposition method [Robert(cid:173)
son  and  Seymour,  1986],  which  is  equivalent  to  the  tree-
clustering method [Dechter and Pearl,  1989]. It is known that 

On  the  other hand,  the  fact that effective dual  graph  rep(cid:173)
resentations  are  not  unique  made  comparisons  among  dif(cid:173)
ferent  methods  quite  difficult.  For  instance,  Gyssens  et  al. 
[1994] compared the notion of Hinge decompositions (short: 
HINGE)  and  the  notion  of  Biconnected  components  of  the 
dual  g
a
generalization 
and thus the hinge decomposition 
technique is not worse than the biconnected components tech(cid:173)
nique. However, the precise relationship between these meth(cid:173)
ods remained an open question, because biconnected compo(cid:173)
nents can perform very bad unless "clever simplifications" of 
the dual graph are chosen. 

It  turned  out  that  HINGE  is  a 

p

h

r

any  class  of CSP  instances  such  that  the  treewidth  of their 
incidence  graph  (respectively,  of  some  reduct  of  their  dual 
graphs) is bounded by some constant k is tractable.  That is, 
all such instances may be evaluated in time 
where  n 
is the size of a CSP instance and c is a constant that depends 
crucially on the bound A: on the decomposition width. 

We  perform  a  detailed  comparison  of  the  tree  decom(cid:173)
position  method  applied  to  the  incidence  graph  of the  hy(cid:173)
pergraph  (i.e.,  on  the  hidden-variable  encoding),  denoted 
by  TREEWIDTHin,  and  the  tree  decomposition  method  ap(cid:173)
plied  to  some  optimal  reduct of the  dual  graph,  denoted  by 
TREEWIDTH0ptd. 
It  turns  out  that  every  CSP  class  that  is 
tractable according to TREEWIDTH*"  is tractable according to 
TREEWIDTHoptd, as  well.  Moreover,  there  are  CSP classes 
that  are  tractable  according  to 
but  are  not 
tractable according to TREEWIDTH,  i.e.,  their largest width 
is not bounded by any fixed number.  However, we show that 
TREEWIDTHoptd  does  not  strongly generalize TREEWIDTH"1. 
Indeed,  there  are  classes  of  CSPs  whose  incidence-graph 
treewidth  is  bounded  by  a  constant K, but the  largest  width 
of  some  optimal  reduct  of  the  dual  graph  is  much  greater. 
Thus, even if such classes are tractable, their evaluation can 
be much more efficient by using the 
method. It 
follows that either of these methods may be useful  for some 
kind of CSP instances, and hence there is no definitely better 
choice between them. 

Finally,  we  focus  on 

further  interesting  open  ques(cid:173)
tions  about 
Define  the  optimal  treewidth 
twoptd{H)  of  the  dual  graph  of  some  hypergraph  H  as  the 
minimum  treewidth  over  all  reducts  of  dual{H).  Kolaitis 
and Vardi [2000] observed that is not trivial to find a "good" 
reduct  of  the  dual  graph  and  defined  the  following  prob(cid:173)
lem  k-OPT,  for any  fixed  constant  k  >  0:  Given  a  hyper(cid:173)
graph  H,  decide  whether  the  optimal  treewidth  of  dual(H) 
is  at  most  K.  The  question  is  whether  K-OPT  is  decidable 
in  polynomial  time  or  not,  that  is  whether  there  is  an  effi(cid:173)
cient way for computing a reduct of the dual graph that have 
the  minimum treewidth.  Moreover,  even  if it  is  known that 
TREEWIDTHoptd  is strongly generalized by  the hypertree de(cid:173)
composition method [Gottlob et al, 2000], it is not clear why 
there is such a big difference between these methods. Indeed, 
at  a  first  glance  the  kind  of tree  labelling  in  these  methods 
seems rather similar. 

We  face  both  the  above  questions. 

Let  k  >  0  be 
a  fixed  constant  and  H  be  a  constraint  hypergraph.  We 
present a polynomial time algorithm k-TREE-APPROX that, 
if  the  optimal  treewidth  of  dual(H) 
is  at  most  k,  out(cid:173)
puts  a  tree  decomposition  of  width  at  most  2k  of  some 
reduct  of  dual  (H).  Thus,  k-TREE-APPROX  provides  a 
2-approximation  of 
Note  that  the  ques(cid:173)
tion whether K-OPT is decidable in polynomial time remains 
open, because k-TREE-APPROX can compute a tree decom(cid:173)
position of width at most 2k even if the optimal  treewidth k' 
of dual (H)  is  greater than 

Moreover, our algorithm is also able to compute a new kind 
of structural decomposition that allows us to shed some light 
on  the  striking  difference  between  TREEWIDTHoptd  and  the 
more general hypergraph-based notions of query decomposi(cid:173)
tion and hypertree decomposition. 

228 

CONSTRAINTS 

2  Preliminaries 
It  is  well  known  that  CSPs  with  acyclic  constraint  hyper-
graphs  are  polynomially  solvable  [Dechter,  1992].  The 
known structural properties that lead to tractable CSP classes 
are  all  (explicitly  or  implicitly)  based  on  some  generaliza(cid:173)
tion of acyclicity.  In particular, each method D defines some 
concept  of width  which  can  be  interpreted  as  a  measure  of 
cyclicity of the underlying constraint (hyper)graph such that, 
for each  fixed  width  k,  all  CSPs  of width bounded by A:  are 
solvable  in  polynomial  time.  This  (possibly  infinite)  set  of 
CSPs  is called the tractability class of D  w.r.t.  k,  and  is  de(cid:173)
noted  by  C(D, k).  Any  pair  of decomposition  methods  D\ 
and  D2  can  be  compared  according  to  their  ability  to  iden(cid:173)
tify tractable classes of CSPs.  Formally, Gottlob et al.  [2000] 
defined the following criteria: 

seems  a  good  candidate  for  solving 
Thus, 
non-binary CSP, as it strongly generalizes all the other graph-
based  methods.  However,  we  recall  that  all  the  known  al(cid:173)
gorithms  for computing  a  k-bounded  tree  decomposition  of 
a  graph  are  exponential  in  k  (even  if  they  are  polynomial 
for  any  fixed  constant  k),  while  computing  the  biconnected 
components of a graph is a linear task, independently of their 
width. This latter technique can be therefore very useful if the 
size of the structure and the bound k are large and the pow-
erfun methods like TREEWIDTH are too expensive. In the next 
section, we face the problem of computing optimal reducts of 
the dual graph w.r.t. the BICOMP method. 
3  Hinges VS Biconnected Components 
In  [Gyssens  et al,  19941,  it  has  been  shown  that  the HINGE 
method generalizes BICOMP applied to any reduct of the dual 
graph.  Anyhow, in the same paper, Gyssens et al.  observed 
that a fine comparison between the two methods is quite dif(cid:173)
ficult, as there is  no obvious way to  find  a suitable reduct of 
the dual graph to keep the biconnected width small.  Here we 
complete the picture by showing that,  in  fact,  hinge decom(cid:173)
positions correspond to such clever simplifications of the dual 
graph. 

CONSTRAINTS 

229 

4  Hidden-Variables VS Dual Graph 
It  is  well  known  that  both  the  dual  graph  and  the  hidden-
variable  (incidence-graph)  representations  may  be  used  for 
identifying  tractable  classes  of  non-binary  CSPs  according 
to  the  tree  decomposition  method  (see,  e.g.,  [Kolaitis  and 
Vardi,  2000]).  However,  it  was  not  clear  whether either  of 
these  methods  generalizes  the  other  one  or  beats  the  other 
one on  some classes  of CSPs.  In  this  section,  we precisely 
characterize  the  relationship  between  TREEWIDTH0ptd  and 
TREEWIDTHm.  First,  we  observe  that  there  is  a  CSP  class 
where  TREEWIDTH0ptd  is definitely better than TREEWIDTHin. 

Combining  the  above  lemma  and  the  results  in  [Gyssens 
et al.,  19941,  it follows that these two methods identifies the 
same classes of tractable CSPs. 

It  is worthwhile noting that,  given  any hinge decomposition 
of a hypergraph H, the proof of Lemma 3.1 provides in fact an 
algorithm for computing an  optimal reduct of  dual(H)  with 
respect to the BICOMP method.  For instance, Figure 1  shows 
a hypergraph H'  a hinge decomposition  H'  and the opti(cid:173)
mal  reduct of the dual graph obtained by applying the above 
construction,  where  dotted  edges  represent the  edges  of the 
dual  graph removed in  this simplification.  Note that the bi-
connected components of this graph correspond to the hinges 
of the  given  decomposition.  Since biconnected components 
can be computed in  linear time,  it  follows that a BIC0MPOptd 

for computing a hinge decomposition. 

which  is  the  best  known  upper  bound 

Observe that the above result, together with Theorem 2.2, 
gives us  a  new  insight of the power  of 
In(cid:173)
deed, while the tree decomposition method applied to the pri(cid:173)
mal graph is incomparable with HINGE [Gottlob et al. , 2000], 
its application to an optimal reduct of the dual graph strongly 
generalizes HINGE. 

230 

CONSTRAINTS 

elements from A'  and one the  m  subsets of m  -  1  elements 
from  Y  These  subsets  may  be  identified  by  means  of two 
integers, say a and b, ranging from 0 to m — 1. Similarly, the 
edge  contains  a  subset of variables  from  Z  identified  by  an 
integer c and functionally determined by a and b as follows: 
c —  (a + b)mod m. Thus, each edge e is simply denoted as a 
triple (a, b,c). 

Note  that  the  incidence  treewidth  of Subset(k)  is  k.  For 
instance,  Figure  3  shows  a  tree  decomposition  of the  inci(cid:173)
dence graph  of Subset(9),  where  in  —  3.  Moreover,  it can 
be proved that the dual graph  dual(Subset(k))  cannot be re(cid:173)
duced and  contains a clique of size  m2  —  (k/3)2.  It follows 
that  its  treewidth  is  (k/3)2.  D 

To  give  a  complete  picture  of  the  relationship  between 
TREEWIDTHptd 
and  TREEWIDTHin,  we  next  show  that  any 
decomposition  of the  incidence  graph  with  width  k  can  be 
modified to be a decomposition of a reduct of the dual graph 
having width at most  2k  Thus, TREEWIDTH"1  does not beat 
TREEWIDTH0ptd. 

In this section, we face the problem of computing an optimal 
reduct  of a  dual  graph  in  order  to  get  the  minimum  possi-
ble  treewidth.  We  recall  that  it  is  not  known  whether  this 
problem  is  feasible  in  polynomial  time  or not  [Kolaitis  and 
Vardi,  2000].  Moreover,  we provide  a qualitative explana(cid:173)
tion  of  the  remarkable  difference  between  TREEWIDTH0ptd 

CONSTRAINTS 

231 

this  section  shed  some 

Remark.  The  results  in 
light 
on  the  difference  between  the  "decomposition  power"  of 
TREEWIDTHoptd  and  the  strictly  more  general  methods  of 
query  and  hypertree  decompositions.  Note  that  the  crucial 
condition to be maintained in all these tree-structured decom(cid:173)
positions  is  the  connectedness  condition  for  the  constraint 
variables, and looking at Condition 3 and Condition 3' above 
we  can  make the  following observation:  while  in  the  weak 
query decompositions (and similarly in  TREEWIDTHoptd  each 
hypcredge in  the  labelling  of a  tree  node plays  an  indepen(cid:173)
dent role,  in query decompositions (and hypertree decompo(cid:173)
sitions) all such edges contribute together to maintain the con(cid:173)
nectedness condition. That is, these hypergraph based notions 
exploit  the  union  of the  hyperedges  labelling  any  tree-node, 
while the  TREEWIDTH'optd  and the weak query width methods 
exploit the power of each hyperedge separately. 
References 
[Bacchus et al.,  2002]  F. Bacchus, X. Chen, P. van Beck, and 
T.  Walsh.  Binary vs Non-Binary Constraints. Artificial In(cid:173)
telligence,  140:  (1-2),  1-37, 2002. 

[Chekuri and Rajaraman, 2000]  Ch. Chekuri and A. Rajara-
man. Conjunctive Query Containment Revisited. Theoret(cid:173)
ical Computer Science, 239(2):211-229, 2000. 

[Dechter,  1992]  R.  Dechter.  Constraint  Networks.  In  Ency(cid:173)
clopedia  of Artificial  Intelligence,  second  edition,  Wiley 
and Sons, pp. 276-285, 1992. 

Figure  5:  Algorithm k-TRLE-APPROX 

[Dechter and Pearl, 1988]  R. Dechter and J. Pearl. Network 
based heuristics for constraint satisfaction  problems. Arti(cid:173)
ficial  Intelligence,  34( 1): 1-38,  1988. 

[Dechter and Pearl,  1989]  R.  Dechter  and  J.  Pearl.  Tree 
clustering  for  constraint  networks.  Artificial  Intelligence, 
38:353-366,1989. 

[Freuder,  1985]  E.C.  Freuder.  A 

sufficient  condition 
for  backtrack-bounded  search.  Journal  of  the  ACM, 
32(4):755-761,1985. 

[Gottlob et al, 2000]  G. Gottlob, N. Leone, and F. Scarcello. 
A Comparison of Structural CSP Decomposition Methods. 
Artificial  Intelligence,  124(2):  243-282,2000. 

[Gottlob et al, 2002]  G. Gottlob, N. Leone, and F. Scarcello. 
Hypertree  decompositions  and  tractable  queries.  Journal 
of Computer and System Sciences, 64(3): 579-627, 2002. 
[Gyssens et al., 1994]  M.  Gyssens,  P.G.  Jeavons,  and  D.A. 
Cohen. Decomposing constraint satisfaction problems us(cid:173)
ing  database  techniques.  Artificial  Intelligence,  66:57-89, 
1994. 

[Kolaitis and Vardi, 2000]  Ph.  G.  Kolaitis  and  M.  Y.  Vardi. 
Conjunctive-Query Containment  and  Constraint  Satisfac(cid:173)
tion.  Journal  of Computer  and  System  Sciences,  61(2): 
302-332,2000. 

[Pearson and Jeavons,  1997]  J.  Pearson  and  P.G.  Jeavons. 
A  Survey  of Tractable  Constraint  Satisfaction  Problems, 
CSD-TR-97-15, Royal Holloway, Univ. of London, 1997. 
[Robertson and Seymour, 1986]  N. Robertson and P.D. Sey(cid:173)
mour. Graph Minors II. Algorithmic aspects of tree width. 
Journal  of  Algorithms,  7:309-322,  1986. 

[Seidel,  1981]  R.  Seidel.  A  new  method  for  solving  con(cid:173)
straint satisfaction problems. In Proc. of IJCAI'81, 1981. 

232 

CONSTRAINTS 

