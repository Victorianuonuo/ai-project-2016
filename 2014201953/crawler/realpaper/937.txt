Adaptation of Organizational Models for

Multi-Agent Systems based on Max Flow Networks

Mark Hoogendoorn

Vrije Universiteit Amsterdam, Department of Artiﬁcial Intelligence

De Boelelaan 1081a, 1081 HV Amsterdam, The Netherlands

mhoogen@cs.vu.nl

http://www.cs.vu.nl/˜mhoogen

Abstract

Organizational models within multi-agent systems
literature are of a static nature. Depending upon cir-
cumstances adaptation of the organizational model
can be essential to ensure a continuous success-
ful function of the system. This paper presents an
approach based on max ﬂow networks to dynami-
cally adapt organizational models to environmen-
tal ﬂuctuation. First, a formal mapping between
a well-known organizational modeling framework
and max ﬂow networks is presented. Having such
a mapping maintains the insightful structure of an
organizational model whereas specifying efﬁcient
adaptation algorithms based on max ﬂow networks
can be done as well. Thereafter two adaptation
mechanisms based on max ﬂow networks are in-
troduced each being appropriate for different envi-
ronmental characteristics.

1 Introduction
With the need for more complex software, arose the need
for a higher abstraction level than the concept agent. As
a result, organization modeling is becoming a practiced
stage within multi-agent system design (see e.g.[Ciancarini
and Wooldridge, 2001] and [Boissier et al., 2005]). The
organizational model poses various constraints on agents
populating the organization. Frameworks have been intro-
duced for representing such an organizational model e.g.
AGR (Agent/Group/Role) [Ferber and Gutknecht, 1998],
GAIA [Zambonelli et al., 2001] and MOISE [Hannoun et al.,
2000].

A common problem encountered with the current orga-
nizational modeling frameworks is their static nature. The
frameworks do not support the organizational model itself
to be dynamic in that it changes based on e.g. the environ-
ment. Especially when a multi-agent system participates in
a dynamic and unpredictable environment, an organizational
model might become obsolete, making dynamic adaptation
of the model essential.
Imagine a design for a negotiation
system on the Internet, in which buyer and seller agents are
present. The organizational model speciﬁes the number of
buyers and seller that should be present, based on a certain
expected input for the system. Suddenly, an increase in usage

requires much more buyer and seller agents. Such an event
requires adaptation of the current organizational model to the
new usage level, otherwise the system would no longer func-
tion correctly due to overload.

The aim of this paper is to introduce a method for capac-
ity management of organizations by dynamically adapting an
organizational model based on the environmental ﬂuctuation.
For this purpose, the AGR framework is adopted. AGR has
been chosen because the framework is closely related to graph
representations. Furthermore, extensions of the framework
with capacities for each of the elements within the organiza-
tional model are introduced. The method itself is based on
graph theory, and more speciﬁcally, on max ﬂow networks.
Specifying methods for adaptation in max ﬂow networks has
the advantage of efﬁcient algorithms being available to per-
form calculations on the network. The method can be in-
corporated into an agent maintaining such an organizational
model, attributing the agent with the capabilities to properly
adapt the organizational model. This paper however only
deals with evaluating the effectiveness of the method itself.

The paper is organized as follows: Section 2 introduces
max ﬂow networks and the terminology associated with it.
Thereafter, Section 3 discusses the existing modeling frame-
work for organizations and extends it with capacity elements.
Section 4 presents a mapping between the extended organi-
zational modeling framework and max ﬂow networks. Static
analysis methods for analyzing the current functioning of the
organizational model are presented in Section 5 whereas Sec-
tion 6 expresses adaptation rules that can be used when the
analysis shows an improper functioning. Section 7 presents
simulation results of these adaptation mechanisms, and ﬁ-
nally, Section 8 is a discussion.

2 Max Flow Networks
This Section provides a brief introduction to max ﬂow net-
works within graph theory. Max ﬂow theory (see e.g. [Ford
and Fulkerson, 1956]) is a very well known part of graph the-
ory, appreciated because of its practical applicability. A max
ﬂow network is deﬁned as follows.

Let G=(V,E) be a directed graph with a set of nodes V and a
set of edges E. Within V two special nodes are distinguished,
namely the source s ∈ V and the sink t ∈ V. The source has an
indegree of 0 and the sink an outdegree of 0. Furthermore, let
c: E → R +
be a capacity function for the edges. A network

IJCAI-07

1321

is then deﬁned as N = (V,E,s,t,c). Now let f: E → R
the ﬂow value under the following conditions:

f(x,y) ≤ c(x,y) for all (x,y) ∈ E
fin(v) = fout(v) for all v ∈ V-{s,t}

+
0 denote

Where fin(v) and fout(v), respectively the inﬂow and the out-
ﬂow of a node v, are deﬁned as follows:

(cid:2)
(cid:2)

fin(v) =
fout(v) =

x∈V f(x,v) with (x,v) ∈ E
y∈V f(v,y) with (v,y) ∈ E

For the source s and the sink t the following thus holds:

fin(s) = fout(t) = 0

The ﬂow value throughout the network is now deﬁned as fol-
lows:

|f| := fout(s) where fout(s)=fin(t)

The max ﬂow is the maximum among all ﬂows, and the max
ﬂow problem is to ﬁnd such a ﬂow. Several algorithms have
been published which can ﬁnd such a ﬂow, in 1956 Ford and
Fulkerson [Ford and Fulkerson, 1956] were the ﬁrst to pub-
lish such an algorithm where ﬁnding a minimal cut for the
graph was proven to be equal to the max ﬂow. Later efﬁ-
ciency improvements have been proposed, see e.g. [Edmunds
and Karp, 1972].

To enable a formal mapping between the organizational
modeling framework and max ﬂow network, node capacities
should be expressible. Specifying capacities for nodes can be
incorporated into the classical max ﬂow network as follows:
let cnode : V → R +
denote the capacity of such a node. Now
split up the node v with capacity cnode(v) into two nodes: v1
and v2 where node v1 inherits all incoming nodes of v whereas
v2 inherits all outgoing edges. Finally, draw an edge (v1,v2)
with the following capacity value:

c(v1,v2) = cnode(v)

3 Multi-Agent Organizational Framework

and Extensions

In this Section, the AGR approach is introduced. AGR is
used because the representation of the organizational model-
ing framework is closest to graph theory. As the purpose of
this paper is to investigate adaptations in the capacity of an
organizational model, AGR is extended with elements speci-
fying such capacity.

3.1 Agent/Group/Role approach
As a basis for representing a multi-agent organization the
AGR approach introduced by Ferber and Gutknecht [Ferber
and Gutknecht, 1998] is used. In the approach, as the name
already suggests, three main elements are used: (1) the agent
which is only speciﬁed as an active communicating entity
which plays roles within groups; (2) the group deﬁned as
atomic sets of agent behavior, and (3) the role which is an
abstract representation of an agent function, service or iden-
tiﬁcation within a group. More formally on an abstracter
level, Ferber and Gutknecht deﬁne a group structure as a tu-
ple S=(cid:5)R,G,L(cid:6). In the deﬁnition, R is a set of role identiﬁers
whereas G is an interaction graph specifying the valid inter-
actions between two roles (later referred to as role links):
G:R×R→L, where L is the interaction language. The orga-
nizational structure is deﬁned as the set of group structures
expressing the design of a multi-agent organization scheme.

It is expressed as O=(cid:5)S,Rep(cid:6), where S is a set of group struc-
tures. Rep is a representative graph specifying interactions
between role of different groups (later referred to as group
links): Rep:S×R×S×R, e.g. Rep(Sa, r1, Sb, r2) where r1∈Sa
and r2∈Sb, and Sa,Sb∈S. A contraint is that a single agent is
playing both role r1 and role r2

3.2 Agent/Group/Role Extensions
In addition to the AGR approach, it is assumed that in the
speciﬁcation of roles a certain capacity is present. This ca-
pacity places a requirement on what an agent to be allocated
to the role within the organization should be able to handle
computationally per time unit (universal for the whole orga-
nization). This capacity is denoted by RC: R → R +
. In addi-
tion, a capacity can also be set for role links: CC: R × R →
R +

and group links: SC: R × R → R +

.

One crucial aspect is however still missing, namely the in-
teraction with the environment. AGR is mainly based on in-
teraction between roles, whereas the emphasis of this paper
is to adapt to environmental ﬂuctuations. Therefore, it is as-
sumed that the environment causes a certain pressure upon
the organization. Such pressure is expressed as the amount of
processing needed by the organization to deal with the pres-
sure, it can be seen as the demand of the environment upon
the system. In the organizational model this is represented
by adding an entity called the environment (ein) and having
links from the environment to the roles receiving that stress
directly: (ein, ri) which has a particular value at a certain time
point: Ein: R → R +
. At different points in time the amount
of pressure can differ, requiring different processing capabil-
ities. Furthermore, besides receiving pressure from the en-
vironment, most roles are assumed to perform actions in the
environment (eout) as well, affecting the environment: (ri,
eout) which again has a value: Eout: R → R +
. Assumed is
that a correctly functioning multi-agent organization affects
the environment to the exact same amount as the environment
affects the organization.

4 Mapping the Organizational Framework to

Max Flow Networks

A mapping between the extended AGR model and the max
ﬂow networks as introduced in Section 2 is presented. The
translation algorithm of the extended AGR model to a max
ﬂow network can be described as follows:

• For each role ri∈O create a node vi
• For each role link G(ri, rj) create an edge (vi, vj)
• For each role link with capacity CC(ri, rj) set the capac-
ity of the edge (vi, vj) to that value: c(vi, vj)=CC(ri, rj)
• For each group link (ri, rj) where ri∈Sa, rj∈Sb and

Sa(cid:7)=Sb create an edge (vi, vj)

• For each group link with capacity SC(ri,

rj) set
to that value:

the capacity of
c(vi, vj)=SC(ri, rj)

the edge (vi, vj)

• For each role with capacity RC(ri) set the capacity of
the node vi to that value: cnode(vi)=RC(ri), reduce the
graph to a classical max ﬂow graph using the method
presented in Section 2

IJCAI-07

1322

• Add a node s to represent the environment ein and add a

node t to represent the environment eout

• For each (ein, ri) with capacity Ein(ri) create an edge

(s, vi). Set the capacity c(s, vi)=Ein(ri)

• For each (ri, ein) with capacity Eout(ri) create an edge

(vi, t). Set the capacity c(vi, t)=Eout(ri)

G1
50

40

G2
60

50

R1

60

100

R3

90

R2

60

R4

70

80

80

e in

e out

s

80

1R2

R3

2

50

R4

1

60

40

90

70

50

R2

2

100

100

R1

1

60

R1

2

R3

1

60

R4

2

80

t

(a) AGR Representation

(b) Max Flow equivalent

Figure 1: Example organizational model

Figure 1(a) shows an example AGR organization. In the ﬁg-
ure, the big ovals denote groups, whereas the smaller ovals
denote the roles. Capacities of roles are depicted as a box
with a number specifying the capacity. Furthermore, inter-
actions between roles within a group or between a role and
the environment are depicted by arrows, including a label
specifying the capacity. Finally, capacities for interactions
between groups are speciﬁed by dashed lines, including a
capacity number depicted in italics. Figure 1(b) shows the
accompanying max ﬂow network using the previously pre-
sented translation algorithm (including the translation of node
capacity to a classical max ﬂow network) with a max ﬂow of
50.

5 Analyzing an Organizational Model using

the Max Flow Equivalent

Now that an equivalent max ﬂow network can be derived from
the extended form of an AGR organizational model, this Sec-
tion shows in what way the max ﬂow network can aid in the
analysis of the organizational model. Such an analysis can
be performed in two ways: (1) checking whether the current
organizational model can meet the expected environmental
conditions (i.e. an analysis beforehand), and (2) checking at
runtime whether the organizational model can meet the actual
environmental conditions.

5.1 Analysis of the Organizational Model based on

Expected Values

Creating an organizational model is done having certain re-
quirements in mind. In this paper organizational requirements
in the form of organizational capacities are considered. Re-
quirements on capacities are in the form of pressure from the
environment (i.e.
the organization should be able to handle
x requests of a certain type). For checking whether such a
requirement can theoretically be met by a multi-agent orga-
nization, the max ﬂow equivalent can be used, enabling the
usage of tools and algorithms from graph theory. To this end
an organizational model, including capacities for the various
organization elements as introduced in the previous section,

is translated into a max ﬂow problem. Remember the nota-
tion for the ﬂow: |f| := fout(s) where fout(s)=fin(t). Now let
the maximum ﬂow be noted as follows:

|f|max(N) := fout,max(s) where fout,max(s)=fin,max(t)

The requirements posed for the organizational model can be
translated into requirements on the ﬂow. Requirements re-
garding the amount of pressure can be translated to a max
ﬂow requirement of the form

fout,max(s)≥r

where r is the requirement. Using the max ﬂow problem
algorithms from e.g. [Ford and Fulkerson, 1956],[Edmunds
and Karp, 1972] it can be determined whether the organi-
zation can theoretically fulﬁll the requirements. Note that
non-fulﬁllment of the requirements guarantees that the or-
ganization will never be able to meet the requirements when
complying to the design speciﬁcation.

5.2 Analysis of the Organizational Model based on

Observed Values

Besides performing an analysis at design time, an analysis
at runtime can also be performed.
It can be the case that
the environment in which the multi-agent system is partici-
pating is highly dynamic and hard to predict, causing an un-
known amount of pressure for the organization. Therefore,
the requirement r posed for the system is dynamic. The re-
quirement can however be observed: observing the amount
of pressure received by the multi-agent system. In case this
exceeds the maximum ﬂow in the network equivalent, the or-
ganizational model is incorrect. Note that it is still possible
that the multi-agent system is functioning correctly, since the
agents allocated to the roles within the organizational model
might have a higher capacity than required. The model how-
ever should always be updated to make sure that the system
continues to function correctly. It could for example be that
an agent can handle the pressure for a while, but after a cer-
tain duration suffers a burn out. Methods for updating such a
model are presented in the next section.

6 Adaptation of an Organizational Model

using the Max Flow equivalent

As shown in the previous Section, when participating in a
highly dynamic environment the organizational model some-
times needs to be changed in order to handle the environ-
mental ﬂuctuations appropriately. This Section proposes two
methods to perform such a change, each working under spe-
ciﬁc circumstances. These methods only concern extending
the capacity as the aim of this paper is to adapt the organi-
zational model in such a way that the environment can be
handled, which does not include decreasing the capacity.

6.1 Adapting the Bottlenecks

The ﬁrst method for improving the network equivalent of
the organizational model involves ﬁnding the path which re-
quires a minimum additional capacity, and adding capacity to
the bottleneck within the path. In other words, pinpointing
the bottleneck within the organization and improving it. Let
P = s −→ ... −→ t denote a path from the source s to the sink

IJCAI-07

1323

t in the network. In the explanation of the method, capaci-
ties of edges are assumed to be natural numbers, however this
can easily be extended to rational numbers. Given that the
environment has imposed requirement r, and the parameter η
which represents the safety margin to be taken:

• calculate the current max ﬂow of the network |f|max(N)
• if |f|max(N) < (η × r):

1. n=1
2. try

path

a
... xi −→0

the
form
ﬁnding
P = s −→+1
t where n
edges {(x1,y1),...,(xn,yn)} do not have sufﬁcient
capacity to add a ﬂow of 1 to the path. In case such
a path cannot be found: n=n+1

P
yi −→+1

of

3. set the capacity for all the edges (xi,yi) in the set

{(x1,y1),...,(xn,yn)} to c(xi,yi) = c(xi,yi) + 1

4. if the new max ﬂow |f|max(N) < (η × r) then con-

tinue at point 2, else the algorithm ends

The speciﬁcation of the algorithm draws inspiration from the
algorithms proposed for ﬁnding the max ﬂow through a net-
work. These algorithms work with ﬁnding paths from source
to sink that can be increased with a ﬂow of 1. Finding a path
which can almost be increased and extending the capacity
therefore results in an immediate increase in the max ﬂow
of the network.

6.2 Adding Organizational Elements
The capacity required for allocation of an agent to a certain
role is of course limited; agents with very high capacities
might be too expensive. Therefore, an algorithm for adding
roles and the accompanying role and group links to an orga-
nization is presented here. The algorithm as presented above
is therefore adapted to cope with addition of organizational
elements as well. The extension states the following: in case
the max ﬂow of the network can no longer be increased as
a further increase of the max ﬂow would necessarily require
exceeding of the maximum capacity set (i.e. the current ca-
pacity c(xi,yi) exceeds the maximum capacity cmax(xi,yi)):

1. For each two nodes vi1, vi2 and set of edges of the form
(vx, vi1) where x∈V and (vx, vi1)∈E, (vi1, vi2), and
(vi2, vy) where y∈V and (vi2, vy)∈E representing a role
ri and its role and group links:
If at least one of the elements has reached the max-
imum capacity:
calculate the increase of the max
ﬂow in case the nodes and edges were to be doubled
(i.e. Nnew=N∪ {vi1,2, vi2,2, (vx, vi1,2), (vi1,2, vi2,2),
(vi2,2, vy)}): |f|max(Nnew) - |f|max(N )

• If the highest increase exceeds 0, in other words the
network can be improved by copying a single role,
copy the two nodes and edges having the highest
value.

• Otherwise, copy the two nodes vi1, vi2 and ac-
companying edges (vx, vi1) where vx∈V and
(vx, vi1)∈E, (vi1, vi2), and (vi2, vy) where vy∈V
and (vi2, vy)∈E which maximize the following:
min
|{(vi2, vy)|v(i2, vy)∈E}|)

vi1)∈E}|,

vi1)|(vx,

(|{(vx,

Where {(vx, vi1)|(vx, vi1)∈E} is the set of incom-
ing edges of vi1 and {(vi2, vy)|v(i2, vy)∈E} the set
of outgoing edges of vi2. In other words, take the
node which has a maximal connection with other
nodes. Thereafter, return to 1.

The intuition behind the algorithm is to ﬁnd the nodes and
edges representing the role of which a copy would improve
the max ﬂow most. If no increase is possible, take the nodes
and edges representing the role which is most connected
within the organization to maximize the chances that an ad-
dition of a role after the copy will result in an increase of the
max ﬂow.

7 Evaluation of the Different Methods for

Improving an Organizational Model

In order to characterize the methods presented in the previ-
ous Section, this section presents an evaluation method, and
compares the results of the different methods using different
settings. First, a cost model is presented expressing the cost
function used for evaluation. Thereafter, the different meth-
ods are evaluated based on the cost model and several envi-
ronmental settings.

7.1 Cost Model

Each element within the organizational model has a certain
cost attached to it. The cost for role and group links is ex-
pressed as costlink: R × R → R +

and deﬁned as follows:

costlink(x,y) = e

CC(x,y)

α

where (x,y)∈(G∪Rep)

In other words, cost for links increase exponentially (a com-
monly used type of cost function), where the parameter α
can be varied. The same holds for the cost of a node
costrole: R → R +
costrole(r) = e

which is thus deﬁned as follows:
0.5α where r∈R

RC(r)

The factor 0.5 is arbitrarily set in the cost function because
typically interaction capacity costs are lower than agent ca-
pacity costs. In order to punish an organizational model not
being able to meet the environmental pressure, a penalty is
introduced of the form p: N × r → R +
, where r is the en-
vironmental requirement. The penalty function is deﬁned as
follows:

p(N, r) = β × (r - |f|max(N))

The parameter β speciﬁes the penalty for each requirement
unit not fulﬁlled. The network N represents the multi-agent
organization. Finally, the overall cost for the organizational
model is deﬁned as follows:
r)
costtotal
(cid:2)
(x,y)∈G∪Rep costlink(x,y)

costrole(r)

p(N,

(cid:2)

+

=

+

r∈R

7.2 Evaluation

An implementation in Java has been created of the two al-
gorithms for reorganization, and the translation procedure of
an organizational model to the accompanying network.
In
order to evaluate the performance of the two algorithms the
example organizational model shown in Figure 1 is used. As
a benchmark, no adaptation of the organizational model is

IJCAI-07

1324

t
s
o
c
 
e
g
a
r
e
v
a

400

350

300

250

200

150

100

50

0

σ= 0
σ= 5
σ= 20

0.8

0.9

1

1.1

η

1.2

1.3

1.4

1.5

t
s
o
c
 
e
g
a
r
e
v
a

400

350

300

250

200

150

100

50

0

σ= 0 ,  max
σ= 5 ,  max
σ= 20 ,  max

=
=

0.8

0.9

1

1.1

η

1.2

1.3

1.4

1.5

t
s
o
c
 
e
g
a
r
e
v
a

400

350

300

250

200

150

100

50

0

σ= 0 ,  max
σ= 5 ,  max
σ= 20 ,  max

=
=

0.8

0.9

1

1.1

η

1.2

1.3

1.4

1.5

(a) bottleneck

(b) role addition, max capacity=90

(c) role addition, max capacity=60

Figure 2: Bottleneck and role addition algorithm performance

used. Using the implementation, simulation runs are per-
formed with an environmental pressure causing a require-
ment r based on a normal distribution f(x;μ,σ). One step
within such a simulation entails: (1) generating the environ-
mental requirement r based on the normal distribution; (2)
calculating the current max ﬂow of the network: |f|max(N);
(3) calculating the cost costtotal, and (4) updating the net-
work for the next step, using one of the improvement meth-
ods. Each step is performed 100 times, and each simula-
tion is performed 10 times, generating from a different seed
each time. After the steps have been performed, the aver-
age of the costtotal per step is calculated. In order to eval-
uate the different methods, two settings for the cost model
have been used:
relatively high penalty cost compared to
agent/communication cost (e.g. a critical domain such as
incident management), and relatively low penalty cost com-
pared to agent/communication cost (a non-critical domain).
Furthermore, the environment setting μ is by default set to
the initial max ﬂow (in this case 50), whereas the ﬂuctuation
σ has been set to different values: σ={0,5,20}.

Relatively High Penalty Cost
The results of an organization in which penalty costs are rel-
atively high compared to labor cost are presented here. This
reﬂects in the cost model in which α is set to 80, meaning an
initial cost of 34 for the whole organization, whereas β is set
to 200, a penalty cost signiﬁcantly higher than the initial cost
of the whole organization.

First, the bottleneck algorithm is used. Figure 2(a) shows
the results for different setting given environmental ﬂuctua-
tion σ and varying η value (the algorithm parameter speci-
fying how much to update the capacity). As can be seen,
with no environmental ﬂuctuation, the costs stay stable for the
lower η values whereas they slightly increase for the higher
settings, as the capacities are even increased when the current
max ﬂow is identical to the requirement r. For small envi-
ronmental ﬂuctuation (σ=5) an η value of 1.2 gives the best
results, which is also the case for large environmental ﬂuc-
tuation. In both cases, having a higher η value results in the
capacity being too high (i.e. costs too high) whereas a lower
η value increases the amount of penalties.

Figure 2(b) and (c) show the results of the bottleneck al-
gorithm extended with role addition. In Figure 2(b) the max

β

σ

200
200
200
5
5
5

0
5
20
0
5
20

No
adap-
tation
max
ﬂow μ

34
370
1518
34
42
71

No
adap-
tation
max
ﬂow
2μ
199
199
210
199
199
210

Optimal
Bottle-
neck

ad-

Role
dition
max=90

ad-

Role
dition
max=60

34
42
129
34(η≤1.2)
35(η=1.0)
35(η=0.8)

34
42
141
34(η=≤1.2)
35(η=1.0)
37(η=0.7)

34
75.6
116
34(η=≤1.2)
37(η=0.9)
69(η=0.5)

Table 1: Average costs of the organizational model resulting
from the different algorithms, penalty is set to either 5 or 200

capacity has been set to 90 whereas in Figure 2(c) 60 is used.
In the case of no environmental ﬂuctuation, Figure 2(b) shows
a similar shape as the bottleneck algorithm, whereas Fig-
ure 2(c) shows a large increase above a value of η=1.2. This
is the result of roles being copied due to the low setting of
the maximum capacity. Each role in the network has already
reached the maximum capacity, resulting in a need for a copy,
which causes a severe overcapacity. In case of little environ-
mental ﬂuctuation, the setting 90 for the maximum capacity is
better since no large increase for capacity is required, whereas
with high environmental ﬂuctuation 60 is best since larger ca-
pacity increases are required.

Finally, the top part of Table 1 (the rows where β=200)
shows the comparison between the different methods, given
optimal parameter settings. As can be seen, no adaptation is
always worse compared to the other algorithms, even when an
overcapacity is initially present. Furthermore, in case of small
environmental ﬂuctuation adding capacity to the current roles
is best (despite the exponential cost function) whereas for
larger ﬂuctuation, adding roles immediately is the best option
due to the exponential cost function.

Relatively Low Penalty Cost
Table 1 also shows the result when the penalty is set to a rel-
atively low value (the rows where β=5). Still the algorithms
are better than no adaptation, however the value for η needs
to be set to a lower value as having too much capacity is rela-
tively expensive compared to the penalty for not meeting the
requirements. Therefore, the role addition algorithm with a
maximum capacity 60 performs worse than the one with 90.

IJCAI-07

1325

8 Discussion

This paper has presented an approach to adapt an organiza-
tional model to ﬂuctuations within the environment. Such an
approach can be incorporated into an agent responsible for
maintaining the organizational model. In a highly dynamic
and unpredictable environment, such an adaptation mecha-
nism might be a necessity to guarantee successfulness of a
multi-agent system. The approach used in this paper is to
translate an organizational model to a max ﬂow network and
specify two algorithms for adaptation. Specifying analysis
constructs and reorganization algorithms for the graph repre-
sentation has as an advantage that knowledge and algorithms
from the well established graph domain can be reused (such
as calculation of the max ﬂow [Edmunds and Karp, 1972]).
The algorithm used for adaptation of bottlenecks is indeed
a known algorithm within graph theory for addition of ca-
pacity. The addition of organizational elements however re-
quires knowledge about the meaning of the elements within
the max ﬂow network (e.g. what the roles are), algorithms
from graph theory can therefore not be re-used. The algo-
rithms as proposed in this paper have been evaluated by sim-
ulation runs, and were shown to be more effective compared
to no adaptation, especially in critical domains in which the
penalty function is relatively high. Limits of the approach for
instance include the case where the environmental pressure
is at ﬁrst above the capacity of the organizational model and
thereafter steadily decreases. In such cases the organizational
model using the adaptation mechanism will adapt to the ini-
tial high pressure, and suffer from an overcapacity at the later
time points. The total sum of the penalties received in the be-
ginning by the non-adaptive organizational model might be
lower than the total cost of the overcapacity in the adaptive
case. Very rare outliers with a very high environmental pres-
sure can have the same effect.

In the ﬁeld of adaptive agents and multi-agent systems
(see e.g. [Schaal et al., 2004][Kudenko et al., 2005]) learn-
ing from the environment is an important topic. Adapting
organizational models based on the environmental conditions
is, as argued before in this paper, one of the necessities for
the new organizational paradigm. Especially with continu-
ously changing circumstances and agents leaving and arriv-
ing a well speciﬁed and up-to-date organizational model is
required to guarantee proper functioning of the organization.
When comparing the approach with other organizational
modeling approaches in multi-agent systems,
those ap-
proaches often include much more concepts than capacity
of a role. An extension of GAIA [Zambonelli et al., 2001]
for example adds the notion of organizational rules. Such
rules express relationships and constraints between roles, pro-
tocols, and roles and protocols. These relationships and
constraints can be incorporated in the approach presented
in this paper as well. When copying a role one can sim-
ply copy those relationships involving the role being copied
and adapt them to specify the relationships and constraints
of the copy of the role. MOISE [Hannoun et al., 2000] de-
ﬁnes missions for roles, which can include concepts such as
goals, plans, actions, and resources. Furthermore, authority
links between roles can also be speciﬁed. Again, as already

stated for GAIA, these concepts can be reused when copy-
ing a role. Several of these organizational models have been
extended with organizational change notions, see for exam-
ple [Hoogendoorn et al., 2006]. These extensions are how-
ever typically very generic models without going into speciﬁc
details on how to reorganize the organization whereas this pa-
per does.

Finally, for future work an interesting continuation would
be to look at the performance in other simulation settings, and
possibly compare how well different types of organizational
structures perform in changing circumstances.

Acknowledgements
The author would like to thank Catholijn Jonker, Jan Treur,
and Evert Wattel for the fruitful discussions, and the anony-
mous reviewers for their useful comments.

References
[Boissier et al., 2005] O. Boissier, V. Dignum, E. Matson,
and J. Sichman, editors. Proceedings of the First OOOP
Workshop. Utrecht, 2005.

Ciancarini

[Ciancarini and Wooldridge, 2001] P.

and
M. Wooldridge, editors.
Agent-Oriented Software
Engineering. LNCS. Spinger Verlag, 1957 edition, 2001.
[Edmunds and Karp, 1972] J. Edmunds and R.M. Karp.
Theoretical improvements in algorithmic efﬁciency for ne-
towrk ﬂow problems. Journal of the Association for Com-
puting Machinery, 19:248–264, 1972.

[Ferber and Gutknecht, 1998] J. Ferber and O. Gutknecht. A
meta-model for the analysis and design of organizations in
multiagent systems. In Proc. of ICMAS 1998, pages 128–
135. IEEE CS Press, 1998.

[Ford and Fulkerson, 1956] L.R. Ford and D.R. Fulkerson.
Maximum ﬂow though a network. Canadian Journal of
Mathematics, 8:399–404, 1956.

[Hannoun et al., 2000] M. Hannoun, O. Boissier, J. Sich-
man, and C. Sayettat. Moise: An organizational model
for multi-agent systems.
In IBERAMIA-SBIA ’00: Pro-
ceedings of the International Joint Conference, 7th Ibero-
American Conference on AI, pages 156–165. Springer-
Verlag, 2000.

[Hoogendoorn et al., 2006] M. Hoogendoorn, C.M. Jonker,
M.C. Schut, and J. Treur. Modelling centralized organisa-
tion of organisational change. Computational and Mathe-
matical Organization Theory, In Press, 2006.

[Kudenko et al., 2005] D. Kudenko, D. Kazakov,

and
E. Alonso, editors. Adaptive Agents and Multi-Agent Sys-
tems II. Springer Verlag, 2005.

[Schaal et al., 2004] S. Schaal, A.J. Ijspeert, A. Billard,
S. Vijayakumar, J. Hallam, and J.A. Meyer, editors. From
animals to animats 8. MIT Press, 2004.

[Zambonelli et al., 2001] F. Zambonelli, N. Jennings, and
M. Wooldridge. Organizational rules as an abstraction for
the analysis and design of multi-agent systems. Journal of
Software and Knowledge Engineering, 11:303–328, 2001.

IJCAI-07

1326

