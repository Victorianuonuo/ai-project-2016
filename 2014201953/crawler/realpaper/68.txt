The Range and Roots Constraints:

Specifying Counting and Occurrence Problems(cid:3)

Christian Bessiere

LIRMM-CNRS

Montpelier, France
bessiere@lirmm.fr

Emmanuel Hebrard
NICTA and UNSW
Sydney, Australia

e.hebrard@nicta.com.au

brahim@4c.ucc.ie

Brahim Hnich

Zeynep Kiziltan

Toby Walsh

4C, UCC
Ireland

DEIS

Univ. di Bologna, Italy
zkiziltan@deis.unibo.it

NICTA and UNSW
Sydney, Australia

tw@cse.unsw.edu.au

Abstract

We propose a simple declarative language for spec-
ifying a wide range of counting and occurrence
constraints. This speciﬁcation language is exe-
cutable since it immediately provides a polyno-
mial propagation algorithm. To illustrate the ca-
pabilities of this language, we specify a dozen
global constraints taken from the literature. We ob-
serve one of three outcomes: we achieve general-
ized arc-consistency; we do not achieve general-
ized arc-consistency, but achieving generalized arc-
consistency is NP-hard; we do not achieve gener-
alized arc-consistency, but specialized propagation
algorithms can do so in polynomial time. Experi-
ments demonstrate that this speciﬁcation language
is both efﬁcient and effective in practice.

1 Introduction
Global constraints are central to the success of constraint pro-
gramming. Global constraints allow users to specify patterns
that occur in many problems, and to exploit efﬁcient and ef-
fective propagation algorithms for pruning the search space.
Two common types of global constraints are counting and
occurrence constraints. Occurrence constraints place restric-
tions on the occurrences of particular values. For instance,
we may wish to ensure that no value used by one set of vari-
ables occurs in a second set. Counting constraints, on the
other hand, restrict the number of values or variables meet-
ing some condition. For example, we may want to limit the
number of distinct values assigned to a set of variables. Many
different counting and occurrences constraints have been pro-
posed to help model a wide range of problems, especially
those involving resources (see, for example, [R´egin, 1994;
Beldiceanu and Contejean, 1994; R´egin, 1996; Beldiceanu,
2001; Beldiceanu et al., 2004b]).

We will show that many such constraints can be speciﬁed
using a simple declarative language. This speciﬁcation lan-
guage is executable.
It decomposes these constraints into
some simple primitives for which there are polynomial propa-
gation algorithms. In some cases, we show that this decompo-
sition does not hinder propagation. In other cases, achieving

(cid:3)Brahim Hnich is currently supported by Science Foundation Ire-

land under Grant No. 00/PI.1/C075.

generalized arc-consistency is NP-hard and decomposition is
one method to obtain a polynomial propagation algorithm. In
the remaining cases, we show that the decomposition hinders
propagation, and there exists some specialized and polyno-
mial propagation algorithm. As not all global constraints are
implemented and integrated into every solver, our language
may still be attractive in this case. We provide a generic
means for propagating counting and occurrence constraints
in the absence of a specialized algorithm. Our experiments
demonstrate that this is an efﬁcient and effective way to rea-
son about counting and occurrence constraints in practice.

2 Formal Background
A constraint satisfaction problem consists of a set of vari-
ables, each with a ﬁnite domain of values, and a set of con-
straints specifying allowed combinations of values for subsets
of variables. We use capital letters for variables (e.g. X, Y
and S), and lower case for values (e.g. d and di). We write
D(X) for the domain of a variable X. A solution is an as-
signment of values to the variables satisfying the constraints.
A variable is ground when it is assigned a value. We consider
both integer and set variables. A constraint can be deﬁned on
only integer, or only set variables, or on both. A set variable
S can be represented by its lower bound lb(S) which con-
tains the deﬁnite elements and an upper bound ub(S) which
contains the deﬁnite and potential elements. Each set variable
is equivalent to a sequence of 0/1 variables representing the
characteristic function. A variable in such a sequence is 1 iff
the corresponding element is in the set.

Given a constraint C, a bound support on C is a tuple that
assigns to each integer variable a value between its minimum
and maximum, and to each set variable a set between its lower
and upper bounds which satisﬁes C. An hybrid support on
C is a tuple that assigns to each integer variable a value in
its domain, and to each set variable a set between its lower
and upper bounds which satisﬁes C. If C involves only inte-
ger variables, a hybrid support is a support. A constraint C
is bound consistent (BC) iff for each integer variable Xi, its
minimum and maximum values belong to a bound support,
and for each set variable Sj, the values in ub(Sj) belong to
Sj in at least one bound support and the values in lb(Sj) be-
long to Sj in all bound supports. A constraint C is hybrid
consistent (HC) iff for each integer variable Xi, every value
in D(Xi) belongs to an hybrid support, and for each set vari-

able Sj, the values in ub(Sj) belong to Sj in at least one
hybrid support, and the values in lb(Sj) belong to Sj in all
hybrid supports. A constraint C involving only integer vari-
ables is generalized arc consistent (GAC) iff for each variable
Xi, every value in D(Xi) belongs to a support.

Enforcing hybrid consistency on a constraint C is equiva-
lent to enforcing GAC if the set variables are represented by
their characteristic function.
If all variables in C are inte-
ger variables, hybrid consistency reduces to generalized arc-
consistency, and if all variables in C are set variables, hybrid
consistency reduces to bound consistency.

We will compare local consistency properties applied to
(sets of) logically equivalent constraints, c1 and c2. As in
[Debruyne and Bessi`ere, 1997], a local consistency property
(cid:8) on c1 is as strong as (cid:9) on c2 iff, given any domains, if (cid:8)
holds on c1 then (cid:9) holds on c2; (cid:8) on c1 is stronger than (cid:9) on
c2 iff (cid:8) on c1 is as strong as (cid:9) on c2 but not vice versa; (cid:8) on
c1 is equivalent to (cid:9) on c2 iff (cid:8) on c1 is as strong as (cid:9) on c2
and vice versa; (cid:8) on c1 is incomparable to (cid:9) on c2 iff (cid:8) on
c1 is not as strong as (cid:9) on c2 and vice versa.

A total function F from a set S into a set T is denoted by
F : S (cid:0)! T where S is the domain of F and T is the range
of F. The set of all elements in the domain of F that have the
same image j 2 T is F (cid:0)1(j) = fi : F(i) = jg. The image
of a set S (cid:18) S under F is F(S) = Si2S F(i), whilst the
domain of a set T (cid:18) T under F is F (cid:0)1(T ) = Sj2T F (cid:0)1(j).
Throughout, we will view a set of variables, X1 to Xn as a
function X : f1; ::; ng (cid:0)! Si=n
i=1 D(Xi). That is, X (i) is the
value of Xi.

3 Speciﬁcation Language
We propose a simple declarative language in which we can
specify many different counting and occurrence constraints.
This speciﬁcation language is executable.
It permits us to
decompose each global constraint into more primitive con-
straints, each of which has an associated polynomial prop-
agation algorithm. In some cases, this decomposition does
not hinder propagation. In other cases, enforcing local con-
sistency on the global constraint is intractable, and decom-
position is one method to obtain a polynomial propagation
algorithm. The speciﬁcation language consists of simple non-
global constraints over integer variables (like X (cid:20) m), sim-
ple non-global constraints over set variables (like S1 (cid:18) S2
or jSj = k) and two special global constraints acting on se-
quences of variables: ROOTS and RANGE.

Given a function X representing a set of variables, X1 to
Xn, the RANGE constraint holds iff a set variable, T is the
range of this function restricted to the indices belonging to a
second set variable, S.

RANGE([X1; ::; Xn]; S; T ) iff X (S) = T

The ROOTS constraint holds iff S is the set of indices which

map to an element in T .

ROOTS([X1; ::; Xn]; S; T ) iff S = X (cid:0)1(T )

ROOTS and RANGE are not exact inverses. A RANGE con-
straint can hold, but the corresponding ROOTS constraint may
not, and vice versa. For instance, RANGE([1; 1]; f1g; f1g)

holds but not ROOTS([1; 1]; f1g; f1g) since X (cid:0)1(1) =
f1; 2g, and ROOTS([1; 1; 1]; f1; 2; 3g; f1; 2g) holds but not
RANGE([1; 1; 1]; f1; 2; 3g; f1; 2g) as no Xi is assigned to 2.
In an associated report, we discuss how to propagate these
two global constraints. Enforcing HC on the RANGE con-
straint is polynomial and give an O(nd + n (cid:1) jlb(T )j3=2) al-
gorithm where d is the maximum domain size of the Xi. En-
forcing BC on the ROOTS constraint is O(nd). Unfortunately,
enforcing HC on the ROOTS constraint is NP-hard. Neverthe-
less, all the cases needed here are polynomial. For example,
if all Xi are ground, or T is ground then enforcing HC on
ROOTS([X1; ::; Xn]; S; T ) is O(nd).

4 Range Constraints
In an associated report, we present a catalog containing over
70 global constraints from [Beldiceanu, 2000] speciﬁed with
this simple language. We have room here to present just a few
of the more important constraints. In this and the subsequent
three sections, we list some global constraints which can be
speciﬁed using RANGE constraints, using ROOTS constraints,
and using both RANGE and ROOTS constraints.

4.1 All Different
The ALLDIFFERENT constraint forces a sequence of vari-
ables to take different values from each other. Such a con-
straint is useful in a wide range of problems (e.g. allocation
of activities to different slots in a timetabling problem).
It
can be propagated efﬁciently [R´egin, 1994]. It can also be
decomposed with a single RANGE constraint:

ALLDIFFERENT([X1; ::; Xn]) iff
RANGE([X1; ::; Xn]; f1; ::; ng; T ) ^ jT j = n

A special but nevertheless important case of this constraint
is the PERMUTATION constraint. This is an ALLDIFFERENT
constraint where we additionally know R, the set of values to
be taken. That is, the sequence of variables is a permutation of
the values in R where jRj = n. This also can be decomposed
using a single RANGE constraint:

PERMUTATION([X1; ::; Xn]; R) iff
RANGE([X1; ::; Xn]; f1; ::; ng; R)

Such a decomposition of the PERMUTATION constraint ob-
viously does not hinder propagation. However, decomposi-
tion of ALLDIFFERENT into a RANGE constraint does.
In
addition, HC on the RANGE decomposition is incomparable
to AC on the decomposition of ALLDIFFERENT which uses a
clique of binary inequality constraints. Thus, we may be able
to obtain more pruning by using both decompositions.
Theorem 1 GAC on PERMUTATION is equivalent to HC on
the decomposition with RANGE. GAC on ALLDIFFERENT
is stronger than HC on the decomposition with RANGE.
AC on the decomposition of ALLDIFFERENT into binary in-
equalities is incomparable to HC on the decomposition with
RANGE.
Proof:
f1; 2; 3; 4g, and f1; 2g (cid:18) T (cid:18) f1; 2; 3; 4g.

Consider X1, X2

2
Then

2

f1; 2g, X3

RANGE([X1; X2; X3]; f1; 2; 3g; T ) and jT j = 3 are both
HC, but ALLDIFFERENT([X1; X2; X3]) is not GAC. Con-
sider X1, X2 2 f1; 2g, X3 2 f1; 2; 3g, and T = f1; 2; 3g.
Then X1 6= X2, X1 6= X3 and X2 6= X3 are AC but
RANGE([X1; X2; X3]; f1; 2; 3g; T ) is not HC. Consider X1,
X2 2 f1; 2; 3; 4g, X3 2 f2g, and f2g (cid:18) T (cid:18) f1; 2; 3; 4g.
Then RANGE([X1; X2; X3]; f1; 2; 3g; T ) and jT j = 3 are
HC. But X1 6= X3 and X2 6= X3 are not AC. The other
result holds immediately.
2

4.2 Number of Values
The NVALUE constraint is useful in a wide range of problems
involving resources since it counts the number of distinct val-
ues used by a sequence of variables [Pachet and Roy, 1999].
NVALUE([X1; ::; Xn]; N ) holds iff N = jfXi j 1 (cid:20) i (cid:20)
ngj. The ALLDIFFERENT constraint is a special case of the
NVALUE constraint in which N = n. Unfortunately, it is
NP-hard in general to enforce GAC on a NVALUE constraint
[Bessiere et al., 2004]. However, there is an O(n log(n))
algorithm to enforce a level of consistency similar to BC
[Beldiceanu, 2001]. An alternative and even simpler way to
implement this constraint is with a RANGE constraint:

NVALUE([X1; ::; Xn]; N ) iff
RANGE([X1; ::; Xn]; f1; ::; ng; T ) ^ jT j = N

HC on this decomposition is incomparable to BC on the

NVALUE constraint.
Theorem 2 BC on NVALUE is incomparable to HC on the
decomposition.
Proof: Consider X1; X2 2 f1; 2g, X3 2 f1; 2; 3; 4g,
N 2 f3g and fg (cid:18) T (cid:18) f1; 2; 3; 4g.
Then
RANGE([X1; X2; X3]; f1; 2; 3g; T ) and jT j = N are both
HC. However, enforcing BC on NVALUE([X1; X2; X3]; N )
prunes 1 and 2 from X3.

Consider X1; X2; X3 2 f1; 3g and N 2 f3g. Then
NVALUE([X1; X2; X3]; N ) is BC. However, enforcing HC
on RANGE([X1; X2; X3]; f1; 2; 3g; T ) makes fg (cid:18) T (cid:18)
f1; 3g which will cause jT j = 3 to fail.
2

4.3 Uses
In [Beldiceanu et al., 2004b], propagation algorithms achiev-
ing GAC and BC are proposed for the USEDBY constraint.
USEDBY([X1; ::; Xn]; [Y1; ::; Ym]) holds iff the multiset of
values assigned to Y1; ::; Ym is a subset of the multiset of
values assigned to X1; ::; Xn. We now introduce a vari-
ant of the USEDBY constraint called the USES constraint.
USES([X1; ::; Xn]; [Y1; ::; Ym]) holds iff the set of values as-
signed to Y1; ::; Ym is a subset of the set of values assigned
to X1; ::; Xn. That is, USEDBY takes into account the num-
ber of times a value is used while USES does not. Unlike the
USEDBY constraint, enforcing GAC on USES is NP-hard.
Theorem 3 Enforcing GAC on USES is NP-hard.
Proof: We reduce 3-SAT to the problem of deciding if a
USES constraint has a solution. Finding support is therefore
NP-hard. Consider a formula ’ with n Boolean variables and
m clauses. For each Boolean variable i, we introduce a vari-
able Xi 2 fi; (cid:0)ig. For each clause cj = x _ :y _ z, we

introduce Yj 2 fx; (cid:0)y; zg. Then ’ has a model iff the USES
constraint has a satisfying assignment, and i is true iff Xi = i.
2
One way to propagate a USES constraint is to decompose

it using RANGE constraints:

USES([X1; ::; Xn]; [Y1; ::; Ym]) iff
RANGE([X1; ::; Xn]; f1; ::; ng; T ) ^
RANGE([Y1; ::; Ym]; f1; ::; mg; T 0) ^ T 0 (cid:18) T

Enforcing HC on this decomposition is polynomial. Not
surprisingly, this hinders propagation (otherwise we would
have a polynomial algorithm for a NP-hard problem).
Theorem 4 GAC on USES is stronger than HC on the de-
composition.
Proof: Consider X1 2 f1; 2; 3; 4g, X2 2 f1; 2; 3; 5g,
X3; X4 2 f4; 5; 6g, Y1 2 f1; 2g, Y2 2 f1; 3g, and Y3 2
f2; 3g. The decomposition is HC while GAC on USES prunes
4 from the domain of X1 and 5 from the domain of X2. 2
Thus, decomposition is a simple method to obtain a poly-

nomial propagation algorithm.

5 Roots Constraints
RANGE constraints are often useful to specify constraints on
the values used by a sequence of variables. ROOTS constraint,
on the other hand, are useful to specify constraints on the
variables taking particular values.

5.1 Global Cardinality
The global cardinality constraint introduced in [R´egin, 1996]
constrains the number of times values are used. We
consider a generalization in which the number of oc-
currences of a value may itself be an integer variable.
That is, GCC([X1; ::; Xn]; [d1; ::; dm]; [O1; ::; Om]) holds iff
jfi j Xi = dj gj = Oj for all j. Such a GCC constraint can be
decomposed into a set of ROOTS constraints:

GCC([X1; ::; Xn]; [d1; ::; dm]; [O1; ::; Om]) iff
8i : ROOTS([X1; ::; Xn]; Si; fdig) ^ jSij = Oi

Enforcing HC on these ROOTS constraints is polynomial
since the sets fdig are ground. Enforcing GAC on a general-
ized GCC constraint is NP-hard, but we can enforce GAC on
the Xi and BC on the Oj in polynomial time using a special-
ized algorithm [Quimper et al., 2004]. This is more than is
achieved by the decomposition.
Theorem 5 GAC on the Xi and BC on the Oj of a GCC
constraint is stronger than HC on the decomposition using
ROOTS constraints.
Proof: Sets being represented by their bounds, HC on the
decomposition cannot prune more on the Oj than BC does
on the GCC. To show strictness, consider X1; X2 2 f1; 2g,
X3 2 f1; 2; 3g, di = i and O1; O2; O3 2 f0; 1g. The
decomposition is HC (with fg (cid:18) S1; S2 (cid:18) f1; 2; 3g and
fg (cid:18) S3 (cid:18) f3g). However, enforcing GAC on the Xi and
BC on the Oj of the GCC constraint will prune 1 and 2 from
X3 and 0 from O1, O2 and O3.
2

This example illustrates that, whilst many global con-
straints can be expressed in terms of ROOTS and RANGE,
there are some global constraints like GCC for which it is
worth developing specialized propagation algorithms. Never-
theless, ROOTS and RANGE provide a means of propagation
for such constraints in the absence of specialised algorithms.

5.2 Among
The AMONG constraint was introduced in CHIP to help
model resource allocation problems like car sequencing
[Beldiceanu and Contejean, 1994]. It counts the number of
variables using values from a given set. AMONG([X1; ::; Xn];
[d1; ::; dm]; N ) holds iff N = jfi j Xi 2 fd1; ::; dmggj.

One decomposition using the global cardinality constraint

GCC introduced in [R´egin, 1996] is as follows:

AMONG([X1; ::; Xn]; [d1; ::; dm]; N ) iff

GCC([X1; ::; Xn]; [d1; ::; dm]; [O1; ::; Om]) ^ X Oi = N
Unfortunately, this decomposition hinders propagation.

Theorem 6 GAC on AMONG is stronger than GAC on the
decomposition using GCC.
Proof: Consider X1; X2 2 f1; 2g, X3 2 f1; 2; 3g, d1 = 1,
d2 = 2, and N 2 f1; 2g. The decomposition is GAC, but en-
forcing GAC on AMONG([X1; X2; X3]; [d1; d2]; N ) prunes 1
and 2 from X3 as well as 1 from N.
2
An alternative way to propagate the AMONG constraint is

to decompose it using a ROOTS constraint:

AMONG([X1; ::; Xn]; [d1; ::; dm]; N ) iff
ROOTS([X1; ::; Xn]; S; fd1; ::; dmg) ^ jSj = N

the

decomposition

(Sketch) Suppose

It is polynomial to enforce HC on this case of the ROOTS
constraint since the target set is ground. This decomposition
also does not hinder propagation. It is therefore a potentially
attractive method to implement the AMONG constraint.
Theorem 7 GAC on AMONG is equivalent to HC on the de-
composition using ROOTS.
Proof:
into
ROOTS([X1; ::; Xn]; S; fd1; ::; dmg) and jSj = N is
HC. The variables Xi divide into three categories:
those
whose domain only contains elements from fd1; ::; dmg (at
most min(N ) such vars); those whose domain do not contain
any such elements (at most n (cid:0) max(N ) such vars); those
whose domain contains both elements from this set and from
outside. Consider any value for a variable Xi in the ﬁrst such
category. To construct support for this value, we assign the
remaining variables in the ﬁrst category with values from
fd1; ::; dmg.
If the total number of assigned values is less
than min(N ), we assign a sufﬁcient number of variables
from the second category with values from fd1; ::; dmg
to bring up the count to min(N ). We then assign all the
remaining unassigned Xj with values outside fd1; ::; dmg.
Finally, we assign min(N ) to N. Support can be constructed
for variables in the other two categories in a similar way, as
well as for any value of N between min(N ) and max(N ). 2
The ATMOST and ATLEAST constraints are closely re-
lated. The ATMOST constraint puts an upper bound on

the number of variables using a particular value, whilst the
ATLEAST puts a lower bound. Both can be decomposed us-
ing a ROOTS constraint without hindering propagation.

6 Range and Roots Constraints
Some global constraints need both ROOTS and RANGE con-
straints in their speciﬁcations.

6.1 Assign and NValues
In bin packing and knapsack problems, we may wish to
assign both a value and a bin to each item, and place
constraints on the values appearing in each bin. For in-
stance,
in the steel mill slab design problem (prob038
in CSPLib), we assign colors and slabs to orders so
that there are a limited number of colors on each slab.
ASSIGN&NVALUES([X1; ::; Xn]; [Y1; ::; Yn]; N ) holds iff
jfYi j Xi = jgj (cid:20) N for each j [Beldiceanu, 2000]. It can
be decomposed into a set of ROOTS and RANGE constraints:

ASSIGN&NVALUES([X1; ::; Xn]; [Y1; ::; Yn]; N ) iff
8j : ROOTS([X1; ::; Xn]; Sj ; fjg) ^
RANGE([Y1; ::; Yn]; Sj ; Tj) ^ jTjj (cid:20) N

Decomposition hinders propagation as it considers the val-
ues separately. However, since this constraint generalizes
NVALUE, enforcing GAC is NP-hard. Decomposition is thus
one method to obtain a polynomial propagation algorithm.

6.2 Common
A generalization of the AMONG and ALLDIFFERENT con-
straints introduced in [Beldiceanu, 2000] is the COMMON
constraint. COMMON(N; M; [X1; ::; Xn]; [Y1; ::; Ym]) en-
sures N = jfi j 9j; Xi = Yjgj and M = jfj j 9i; Xi = Yj gj.
That is, N variables in Xi take values in common with Yj and
M variables in Yj takes values in common with Xi. We prove
that we cannot expect to enforce GAC on such a constraint as
it is NP-hard to do so in general.
Theorem 8 Enforcing GAC on COMMON is NP-hard.
Proof: We again use a transformation from 3-SAT. Con-
sider a formula ’ with n Boolean variables and m clauses.
For each Boolean variable i, we introduce a variable Xi 2
fi; (cid:0)ig. For each clause cj = x _ :y _ z, we introduce
Yj 2 fx; (cid:0)y; zg. We let N 2 f0; ::; ng and M = m. ’ has
a model iff the COMMON constraint has a solution in which
the Xi take the literals true in this model.
2
One way to propagate a COMMON constraint is to decom-

pose it into RANGE and ROOTS constraints:

COMMON(N; M; [X1; ::; Xn]; [Y1; ::; Ym]) iff
RANGE([Y1; ::; Ym]; f1; ::; mg; T ) ^
ROOTS([X1; ::; Xn]; S; T ) ^ jSj = N ^
RANGE([X1; ::; Xn]; f1; ::; ng; V ) ^
ROOTS([Y1; ::; Ym]; U; V ) ^ jU j = M

Enforcing HC on this decomposition is polynomial. De-
composition thus offers a simple and promising method to
propagate a COMMON constraint. Not surprisingly, the de-
composition hinders propagation.

Theorem 9 GAC on COMMON is stronger than HC on the
decomposition.
Proof: Consider N = M = 0, X1; Y1 2 f1; 2g, X2; Y2 2
f1; 3g, Y3 2 f2; 3g. Hybrid consistency on the decomposi-
tion enforces fg (cid:18) T; V (cid:18) f1; 2; 3g, and S = U = fg but
no pruning on the Xi and Yj. However, enforcing GAC on
COMMON(N; M; [X1; X2]; [Y1; Y2; Y3]) prunes 2 from X1,
3 from X2 and 1 from both Y1 and Y2.
2
6.3 Symmetric All Different
In certain domains, we may need to ﬁnd symmetric solutions.
For example, in sports scheduling problems, if one team is
assigned to play another then the second team should also
be assigned to play the ﬁrst. SYMALLDIFF([X1; ::; Xn]) en-
sures Xi = j iff Xj = i [R´egin, 1999]. It can be decomposed
into a set of ROOTS and RANGE constraints:

SYMALLDIFF([X1; ::; Xn]) iff
RANGE([X1; ::; Xn]; f1; ::; ng; f1; ::; ng) ^
8i : ROOTS([X1; ::; Xn]; Si; fig) ^ Xi 2 Si ^ jSij = 1

It is polynomial to enforce HC on these cases of the ROOTS
constraint. However, as with the ALLDIFFERENT constraint,
it is more effective to use a specialized propagation algorithm
like that in [R´egin, 1999].
Theorem 10 GAC on SYMALLDIFF is stronger than HC on
the decomposition.
Proof: Consider X1 2 f2; 3g, X2 2 f1; 3g, X3 2 f1; 2g,
fg (cid:18) S1 (cid:18) f2; 3g, fg (cid:18) S2 (cid:18) f1; 3g, and fg (cid:18) S3 (cid:18) f1; 2g.
Then the decomposition is HC. However, enforcing GAC on
SYMALLDIFF([X1; X2; X3]) will detect unsatisﬁability. 2
To our knowledge, this constraint has not been integrated
into any constraint solver. Thus, this decomposition provides
a means of propagation for the SYMALLDIFF constraint.

7 Beyond Counting and Occurrence
The RANGE and ROOTS constraints are useful for specifying
a wide range of counting and occurence constraints. Nev-
ertheless, their expressive power permits their use to specify
many other constraints.

The ELEMENT constraint introduced in [Van Hentenryck
and Carillon, 1988] indexes into an array with a variable.
More precisely, ELEMENT(I; [X1; ::; Xn]; J) holds iff XI =
J. We can use such a constraint to look up the price of a com-
ponent included in a conﬁguration problem. The ELEMENT
constraint can be decomposed into a RANGE constraint with-
out hindering propagation:

ELEMENT(I; [X1; ::; Xn]; J) iff jSj = jT j = 1 ^
I 2 S ^ J 2 T ^ RANGE([X1; ::; Xn]; S; T )

We may wish to channel between a variable and the se-
quence of 0/1 variables representing the possible values taken
by the variable. The DOMAIN(X; [X1; ::; Xm]) constraint in-
troduced in [Refalo, 2000] ensures X = i iff Xi = 1. This
can be decomposed into a ROOTS constraint:

DOMAIN(X; [X1; ::; Xm]) iff
ROOTS([X1; ::; Xm]; S; f1g) ^ jSj = 1 ^ X 2 S

Enforcing HC on this decomposition is polynomial (f1g
is ground) and it is equivalent to enforcing GAC on the
DOMAIN constraint.

The CONTIGUITY constraint ensures that, in a sequence of
0/1 variables, those taking the value 1 appear contiguously.
This is a discrete form of convexity. The constraint was in-
troduced in [Maher, 2002] to model a hardware conﬁguration
problem. It can be decomposed into a ROOTS constraint:

CONTIGUITY([X1; ::; Xn]) iff
ROOTS([X1; ::; Xn]; S; f1g) ^
X = max(S) ^ Y = min(S) ^ jSj = X (cid:0) Y + 1

Again it is polynomial to enforce HC on this case of the
ROOTS constraint. Unfortunately, decomposition hinders
propagation. Consider X1; X3 2 f0; 1g, X2; X4 2 f1g. HC
on the decomposition will enforce f2; 4g (cid:18) S (cid:18) f1; 2; 3; 4g,
X 2 f4g, Y 2 f1; 2g and jSj to be in f3; 4g but no prun-
ing will happen on the Xi. However, enforcing GAC on
CONTIGUITY([X1; ::; Xn]) will prune 0 from X3.

Whilst ROOTS and RANGE can specify concepts quite dis-
tant from counting and occurrences like convexity and dis-
crete derivatives, it seems that we may need other algorithmic
ideas to propagate them effectively.

8 Experiments
The last three sections demonstrate that many global con-
straints can be speciﬁed in terms of ROOTS and RANGE con-
straints. We also argued that these speciﬁcations are exe-
cutable and in certain cases provide efﬁcient and effective
propagation algorithms. In this section, we support this ar-
gument by means of some experiments.

2GCC+SUM

GCC+ROOTS

Size
10
15
20
25
30
35

f
6

6475
2852
71

12472

16

t

0.02
1.56
1.37
0.22
11.87
0.44

#s
9/10
29/52
20/35
13/20
6/10
20/56

f
6

6468
2852
71

12472

14

t

0.01
1.38
0.97
0.09
6.80
0.15

#s
9/10
29/52
20/35
13/20
7/10
21/56

f

335
23
1093
2776
4279
5107

ROOTS

t

0.41
0.10
3.54
13.62
17.23
36.29

#s

10/10
52/52
32/35
19/20
9/10
49/56

Table 1: Mystery Shopper. Instance are run with a 5 minutes
time limit. #fails (f) and cpu time (t) are averaged on the
#instances solved (#s) by each method.

We used a model for the Mystery Shopper problem [Cheng
et al., 1998] due to Helmut Simonis that appears in CSPLib.
This model contains a GCC constraint and a number of
AMONG constraints. ILOG’s Solver contains the GCC but not
the AMONG constraint. We implement AMONG either with
a GCC and a SUM constraint or directly with ROOTS. This
gives us two models (2GCC+SUM and GCC+ROOTS, resp.).
We also consider the model (ROOTS) which is a variation of
GCC+ROOTS where we decompose the GCC constraint using
ROOTS. In order to generate a range of instances, we used the
following protocol. The duration in weeks as well as the num-
ber of varieties of shoppers, visits per salelady and number of
areas are all set to 4 (as in the original problem). The number
of saleladies takes its value in f10; 15; 20; 25; 30; 35g, and the

number of shoppers is the next multiple of 4 that is not con-
secutive. All the possible ways of partitioning the saleladies
into 4 areas (that do not trivially violate the constraints) are
solved. As expected, the decomposition of the AMONG con-
straint using ROOTS is more efﬁcient than the decomposition
with a GCC and a SUM constraint (see Table 1). Surprisingly,
however, the ROOTS model is the most efﬁcient strategy (see
the ’#s’ column). This is because we were able to branch on
the ’extra’ set variables, which proved to be the most effective
method. Finally, the inference using GCC (2GCC+SUM) is
faster (better ratio t/f) than using its decomposition (ROOTS).
This suggests that it will be worth investing time and effort
into optimizing this new ROOTS constraint.

9 Related Work
Beldiceanu has speciﬁed a wide range of global con-
straints using simple properties of suitably constructed graphs
[Beldiceanu, 2000]. There are several important differences
between this approach and the framework presented here. For
instance, our speciﬁcation language is executable. Given a
speciﬁcation, we immediately have a polynomial propagation
algorithm. This is not the case with Beldiceanu’s framework.
On the other hand, Beldiceanu’s framework is more general
since the ROOTS and RANGE constraints can easily be speci-
ﬁed in terms of some simple graph properties.

A number of researchers have speciﬁed global constraints
over sequences of variables using automaton. Beldiceanu et
al. use an extended polynomial sized automaton, and show
how to extract automatically a GAC propagation algorithm
[Beldiceanu et al., 2004a]. Pesant uses a deterministic ﬁnite
automaton, and develops a GAC propagation algorithm for
membership of the corresponding regular language [Pesant,
2004]. These approaches are complementary to the frame-
work presented here. For example, automaton can easily
specify constraints like the CONTIGUITY constraint and thus
provide us with a GAC propagation algorithm. This does not
seem possible with just ROOTS and RANGE constraints. On
the other hand, deterministic or extended automaton cannot
specify a simple PERMUTATION constraint.

10 Conclusions
We have proposed a simple declarative language for speci-
fying a wide range of counting and occurrence constraints.
The language uses just two global primitives:
the RANGE
constraint which computes the range of values used by a
set of variables, and the ROOTS constraint which computes
the variables in a set mapping onto particular values. This
speciﬁcation language is executable. It immediately provides
a polynomial propagation algorithm for any constraint that
can be speciﬁed. In some cases, this propagation algorithm
achieves GAC (e.g.
the PERMUTATION and AMONG con-
straints). In other cases, this propagation algorithm may not
make the constraint GAC, but achieving GAC is NP-hard (e.g.
the NVALUE and COMMON constraints). Decomposition is
then one method to obtain a polynomial algorithm. In the re-
maining cases, the propagation algorithm may not make the
constraint GAC, and specialized propagation algorithms can
do so in polynomial time (e.g. the SYMALLDIFF constraint).

Our method can still be attractive in this last case as it pro-
vides a generic means of propagation for counting and occur-
rence constraints in the absence of a specialized algorithm.
Experiments demonstrate that such propagation algorithms
can be both efﬁcient and effective in practice.

References
[Beldiceanu and Contejean, 1994] N.

and
Introducing global constraints in CHIP.

E. Contejean.
Mathl. Comput. Modelling, 20:97–123, no. 12 1994.

Beldiceanu

[Beldiceanu et al., 2004a] N. Beldiceanu, M. Carlsson, and
T. Petit. Deriving ﬁltering algorithms from constraint
checkers. In Proc. of CP’2004.

[Beldiceanu et al., 2004b] N. Beldiceanu,

I. Katriel, and
S. Thiel. Filtering algorithms for the same and usedby con-
straints. MPI Technical Report MPI-I-2004-1-001, 2004.
[Beldiceanu, 2000] N. Beldiceanu. Global constraints as
graph properties on a structured network of elementary
constraints of the same type. SICS TR T2000/01.

[Beldiceanu, 2001] N. Beldiceanu. Pruning for the minimum
constraint family and for the number of distinct values
constraint family. In Proc. of CP’2001.

[Bessiere et al., 2004] C. Bessiere, E. Hebrard, B. Hnich,
In

and T. Walsh. The complexity of global constraints.
Proc. of AAAI’2004.

[Cheng et al., 1998] B.M.W.

Cheng,

J.H.M. Lee, and J.C.K. Wu.
Propagation by Redundant Modeling:
Report. Constraints, 1998.

K.M.F.

Choi,
Increasing Constraint
an Experience

[Debruyne and Bessi`ere, 1997] R.

C. Bessi`ere.
for the constraint satisfaction problem.
IJCAI’97.

and
Some practicable ﬁltering techniques
In Proc. of

Debruyne

[Maher, 2002] M. Maher. Analysis of a global contiguity
In Proc. of the CP’2002 Workshop on Rule

constraint.
Based Constraint Reasoning and Programming, 2002.

[Pachet and Roy, 1999] F. Pachet and P. Roy. Automatic gen-

eration of music programs. In Proc. of CP’99.

[Pesant, 2004] G. Pesant. A regular language membership
In Proc. of

constraint for ﬁnite sequences of variables.
CP’2004.

[Quimper et al., 2004] C.-G. Quimper, A. Lopez-Ortiz, P.
van Beek, and A. Golynski. Improved algorithms for the
global cardinality constraint. In Proc. of CP’2004.

[Refalo, 2000] P. Refalo. Linear formulation of constraint
In Proc. of

programming models and hybrid solvers.
CP’2000.

[R´egin, 1994] J-C. R´egin. A ﬁltering algorithm for con-

straints of difference in CSPs. In Proc. of AAAI’94.

[R´egin, 1996] J-C. R´egin. Generalized arc consistency for

global cardinality constraints. In Proc. of AAAI’96.

[R´egin, 1999] J-C. R´egin. The symmetric alldiff constraint.

In Proc. of IJCAI’99. Morgan Kaufmann, 1999.

[Van Hentenryck and Carillon, 1988] P. Van Hentenryck and
J.-P. Carillon. Generality versus speciﬁcity: An experience
with AI and OR techniques. In Proc. of AAAI’88.

