Optimal Multi-Sensor based Multi Target Detection by  

Moving Sensors to the Maximal Clique in a Covering Graph 

Ganesh P Kumar and K Madhava Krishna 

International Institute of Information Technology 

Robotics Research Center 

Gachibowli, Hyderabad, India 500 032. 

ganesh@students.iiit.ac.in, mkrishna@iiit.ac.in  

Abstract

Different  methodologies  have  been  employed  to 
solve the multi-sensor multi-target detection prob-
lem in a variety of scenarios. In this paper, we de-
vise a time-step optimal algorithm for this problem 
when all but a few parameters of the sensor/target 
system are unknown.  Using the concept of cover-
ing graph, we find an optimum solution for a single 
sensor, which is extended to multiple sensors by a 
tagging operation. Both covering graph and tagging 
are novel concepts, developed in the context of the 
detection  problem  for  the  first  time,  and  bring  a 
mathematical elegance to its solution. Furthermore, 
an  implementation  of  the  resulting  algorithm  is 
found  to  perform  better  than  other  notable  ap-
proaches.  The  strong  theoretical  foundation,  com-
bined with the practical efficacy of the algorithm, 
makes it a very attractive solution to the problem. 

1. Introduction 

The problem of multi-sensor target tracking has attracted 
a significant amount of interest over the past few years. The 
papers  [Jung  and  Sukhatme,  2002]  and  Parker[2002]  are 
especially relevant in the context of this paper as representa-
tive algorithms; we appraise these in specific scenarios in a 
subsequent  section.  Other  pertinent  approaches  include  a 
scheme for delegating and withdrawing robots to and from 
targets through the ALLIANCE architecture [Parker 1999], 
a  strategy  for  maximizing  coverage  with  mobile  sensors 
[Sameera  and  Sukhatme  2004]  and  a  method  for  sensor 
management in a distributed tracking setup [Horling et. al, 
2003]. There is also a large volume of work in the context of 
using  a  network  of  static  sensors  to  guide  robots  pursuing 
invaders [Schenato et. al 2005]. A more detailed citation of 
literature is avoided here due to strict page limits.  

Our first objective in this paper is to analyze performance 
of existing solutions, and reformulate target detection as an 
optimization  problem.  Subsequently,  we  introduce  the  no-
tion of covering graph to optimize the detections of a single 

sensor.  Extending  this  technique  to  multiple  sensors  is  in 
general  nontrivial,  involving  searching  over  a  discrete 
search space, which is accomplished by a tagging operation.  
These ideas are crucial in transforming a continuous search 
space  into  a  discrete  one,  enabling  us  to  find  an  optimal 
solution from among several disparate ones. In contrast al-
most all existing solutions employ some heuristic to deter-
mine  a  good  solution  in  an  uncountable  search  space.  Fi-
nally,  we  test  our  algorithm  against  two  others  whose  pa-
rameters are tweaked by hand to perform optimally. None-
theless, our results show that our algorithm is able  to per-
form  better  than  compared approaches  across  a  number of 
test cases. 

2. Analysis of Existing Algorithms 

In this section we examine the performance of two exist-
ing  representative  algorithms,  those  of  [Parker  2002]  and 
[Sukhatme 2002].  
 2.1 Parker’s Algorithm 

Fig.1  shows  a  set  of  targets,  depicted  by  small  un-
shaded  squares,  moving  counter  clockwise  about  a  circle. 
The shaded squares represent sensors; one sensor, closest to 
the  circle,  is  repelled  away  by  the  sensor-target  repulsive 
force referred to in [Parker 2002]. Also, every target is out-
side  the  sensing  range  of  every  other  sensor.  It  is  evident 
that  optimal  detection  will  occur  if  instead  of  getting  re-
pelled away, the former sensor is attracted to the inside of 
the circle.
2.2 Sukhatme-Jung Algorithm 

Fig  2  shows  an  environment  partitioned  into  five  re-
gions by landmarks represented by the diagonal black lines. 
A  sensor  S   is  initially  stationed  in  region  1.  Targets  are 
located along each edge of the dotted square ABCD . They 
move  in  the  direction  indicated  by  the  arrows  cyclically 
with uniform velocity. The dotted circle is the FOV (field of 
vision)  region  of  a  nonexistent  sensor  placed  at  its  center 
O ; it is meant to touch the sides of the square, but  offset 
for  clarity.  It  is  clear  that  optimal  detection  takes  place  at 
O .  Due  to  the  uniform  velocity  of  sensor  motion  the  ur-

IJCAI-07

2135

gency of all regions will be the same, causing the sensor to 
either  remain  in  region  1  or  switch  continually  from  one 
region to an adjacent one.  Hence the algorithm is unable to 
find the optimal position O .

Fig.  1 A  pathological  run  of  Parker’s  algorithm.  The  shaded 
squares are the sensors, the unshaded ones are the targets moving 
in a circle. Note the repulsion of the sensor closest to the circle 

Both these algorithms perform very well in many scenar-
ios, (such as the ones cited in their sources); the pathological 
runs shown above are exceptions to the rule.  Parker’s algo-
rithm fails when target-sensor and sensor-sensor forces give 
conflicting  results,  and  Sukhatme-Jung’s  becomes  subopti-
mal  due  to  the  artificial  division  of  the  environment  area 
into  regions.  The  presence  of  these  exceptions  leads  us  to 
ask the question: Can the  performance be improved further? 
 

 

 

 

 

 

 

 
 
 
 
 
 
 
 

 
 
 

 
S
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 

 
 
 
 

 

 
 
  D  
  5   

 
  1   
  A  

 

 

 
 
 

 

 

 
 
 

 

  3   
 

 

  B 

 
 

 

 

       2 
 
 

 

 
 

 
 

 
 

  O 

              
 
 
 
 

 
 

 
 

 
 

 

 
 
  4 

 

  C 

Fig.  2  Pathological  run  of  Sukhatme-Jung  algorithm.  The 
black  lines  are  landmarks,  the  dark  circle  S  is  the  sensor, 
and the dotted lines indicate target motion paths. 

3. Problem Statement  

We introduce the following definitions: 

2.

2

f

t

(

(

2

n

),

),

A

3.

)..,

)..,

)}(

)0(S

tT
m

 square.

AA
t
)}(

tTtT
(
({
1

StS
{
1

as a set of points within  E , and 

1. E  is a bounded region in the plane, called the environ-
ment  over  which  sensors  and  targets  move.  The  precise 
shape of  E  is of little significance in what follows, hence 
will be assumed to be an 
tS
S
)(
sensors,  at time instant   . Each sensor has FOV 
tT
)(
set of targets at time instant t .
Given 

is the snapshot of the set of 
.
is likewise the snapshot of the 

 as a set 
of  points  on  the  edges  of  E .  At  every  time  instant 
t
,  every  target  moves  with  a  maximum  speed  of 
v
in  an  unknown  direction.  A  sensor  has  a  maximal 
max
speed  of  maxs
over  time  in 
such a way that the number of targets detected by at least
one sensor is maximized. If there are several possible opti-
mal solutions, we prefer those which maximize the number 
of detections by precisely one sensor. This last requirement 
minimizes redundant detections. 
3.1 Preliminaries  

.  Determine  positions  of

..3,2,1

)0(T

)(tS

If P   is  a  point  on  the  plane  and 

)
)  as  the  circle  (resp.  closed  disk)  of  radius 

,  define

(PCr

0

r

(resp. 

(PDr

)

)

)

)

)

(P

and

Hull

( iSC

( jTC

(PDr

( iSD f

iS ) and 

 is the FOV disk of 

We call the ordered pair 

 centered at 
( jTD
)

  as  the  circle  of  radius  maxs
)

r centered  at  P ;  also,  define
(PDr
.  Define 
of
)
iS (called the sensor circle of 
tered at 
cle of radius  maxv
( iSD
jT ).    Define
and target disks. Note that 
Given a set  P of points on the plane, define 
vertex set of the convex hull of  P .
),
0

  as  the  exterior 
cen-
a cir-
jT (called the target circle of 
  correspondingly  as  sensor 
)
iS .
as the 

the configuration
of the sensor-target system at time instant  0t , and any set of 
consecutive  configurations  a  configuration  sequence.  De-
fine a configuration sequence to be feasible if the following 
condition holds: For every pair of consecutive time instants  
1',' t
t
tS
for  every 
i
sensor  and 
  for  every  target;  we 
will be interested only in feasible sequences hereafter. We 
define the number of  k detections (resp.  k
detections)   of 
the configuration as the number of targets detected by pre-
cisely (resp. at least)  k sensors, and call  k  the order of de-
tection.  With these definitions, the problem seeks to maxi-
mize 1+ detections, preferring maximal 1-detections. 

  in  the  sequence, 

tS
|
i
tT
|)'(

)1'(
v

)1'(

tT

|)'(

tS
((

tT
(

max

max

))

s

0

|

j

j

IJCAI-07

2136

3.2 Solving a set of Quadratic Constraints 

T
{
k

This section develops a technique to be used later in Sec-
tion 4.2 to assign sensor positions in a multi-sensor system. 
Given  two  disjoint  sets  of  targets, 
and
T
, we are asked to determine whether 
exc
incT and none 
we can place a sensor that covers all targets in 
excT .  The  problem  reduces  to  determining  if 
of  those  in 
there exists a sensor position  P for which 

TT
,{
1

T
inc

T
,..

,..,

T
k

T
k

}

}

,1

2

2

l

||
||

TP
i
TP
i

[3.2a] 
||
[3.2b] 
||
has a solution . [3.2] has a solution if and only if the inter-

 
 
         

T
inc
T
exc

T
i
T
i

   
  

 
  

f
f

,
,

 
 

 
 

 
 

 
 

 
 

 
 

 

section

I

iTD
(
f

)

incTiT

excTiT

iTD
(

f

)

is  non-null;  in 

k

1

f

||

||

TP

this  case,  every  point  in  I is  a  solution.  Further,  suppose 
that [3.2a] has a solution, but with the additional constraint 
, it does not. This means that every cir-
that
cle of radius  f which covers 
. In such 
a case, 
; in particular, if 
1kT
,  it  is  always  dependent  on 
incT
.

is said to be dependent on 

  falls  within 

also covers 

( incTHull

1kT

1kT

incT

incT

)

4 Methodology 

4.1Single Sensor System 
Covering Graph 

0

0

d

f

)

)

(

)

d

T

),

))

'T

iT

tT
(

tS
(
1

(PC f

, where 

)1(SD f

( 1SDP

of targets, currently within 

Consider the configuration 

in one time step.   Observe 

 . We say that a 
is a covering point with respect to  1S , of a 
, iff no target 

point 
T '
set
in T can escape out of 
that  if  P is  a  covering  point  of  target 
,  then 
( iTDP
maxv
.  In the same scenario we 
'T is simultaneously cover-
say that every pair of targets in 
able. Note that two targets are simultaneously coverable iff 
the (Euclidean) distance between them is at most  d2 . De-
fine the covering graph
of the configuration 
as  a  graph  whose  nodes  are  covered  targets,  and  whose 
edges  connect  a  pair  of  simultaneously  coverable  targets. 
'T will form a clique in the covering 
From above, targets in 
graph. Further define a maximal clique in 
as
one  with  the  maximal  number  of  vertices,  noting  that  this 
could be non-unique. 

tTtSCG
(

tTtSCG
(

It  is  easy  to  see  that  moving  to  a  covering  point  of  a 
maximal clique ensures that a maximum number of targets 
will be detected at the next time instant. We formalize this 

((

((

))

))

),

),

 

N

the 

covering 

as 
SD
)1(

follows:  Define 

which  takes  a  point  in 

function
idea 
CF
  to  the 
:
number of targets that a sensor at that point will definitely 
cover in the next time step. The maximal values of the cov-
ering function will be attained at the points of intersection 
,  giving  us 
of

)1(SD

,  where 

)

)

SfDjiT
,

)1(

TfC
(
i

TfC
(

j

1

(

(

)

))

in 

( 1SD f

an algorithm to move  1S  to  a covering center of a maximal 
1S   visits  each  of  the  points  of  intersection  of  the 
clique.
form above, and moves to that which gives maximal detec-
tions; should there be no intersections, it moves to a cover-
ing  point  of  any  target  it  detects.  This  ensures  a  maximal 
number  of  detections  in  the  next  time  step,  and  the  algo-
2mO
time where m  is the number of targets. 
rithm runs in 
)
Number of Cliques 

.  A  clique 

In  this  section  we  estimate  the  maximal  number  of 
in 
cliques 
that  can  exist 
tTtSCG
has  all  its  targets  lying  within  a  circle  of 
(
(
),
1
maxv
f
d
radius 
as  a  result,  the  separation  between 
two  cliques  is  at  least  d .  Consequently,  the  number  of 
cliques  in
is  at  most  the  size  of  maximum  set  of 
points  M  that can be chosen in 
such that the dis-
tance  between  any  every  point  in  M ,  with  its  nearest 
neighbors in  M ,  is  d . Such an  M  can be constructed as 
;  draw  the  circle 
follows.  Choose  a  point
0PCC
, and mark off the vertices of a regular hexagon 
'
  Repeat  the  construction  at  every 
inscribed  in  it 
Pi
can  be 
by regular hexagons of 
found. This leads to tiling of 

until  no  more  points  within 

tSD
( 1
(

( 1SD f

( 1SD f

( 1SD f

P
0

))

1,

. 

6

)

)

)

(

)

i

d

f

)

( 1SD f
hexagons and clique centers. 

side d , leading to 

fO
((
d

2
))

4.2 Multi-sensor System 

In this section we use ideas from previous sections to 
obtain an optimal solution to tracking with  n sensors. The 
sensors  share  knowledge  of  the  targets  they  see  at  every 
time  instant,  enabling  each  to  build  the  global  covering 
graph..   
Taglists and Taglist types 

To optimize 1+ detections is a nontrivial problem in gen-
iT   is 
Ti.
.  Also,  de-
. The point of introduc-

eral.  We  assume  for  the  purpose  that  every  target 
tagged  with  a 
fine

list  of  sensors, 
)}

taglist
.

taglist
.

taglist

T

iTi
,{(

TiT

ing taglists- as claimed in Section 1- is to convert  a con-
iT is
tinuous search space into a discrete one. When we say 

IJCAI-07

2137

S

, we try to see if 

S'
iT can be covered 
tagged with a list 
'S ; if this is feasible, then sensor positions 
by the sensors in 
'S by the algorithm in Section 
can be assigned to sensors in 
3.2, or else deemed impossible by the same. We formalize 
this in the following definitions. 
, an instance of 
for 

 is said to be 
intersection 

tT
( 0
sensor 

taglist
the 

( 0tS
iff 

feasible

Given  

every 

).1

)

R
i

)

SD
(
i

T

j

T
Cover
.(

is nonempty. Here 
gets  covered  by 

D

T
(

)

j

f

taglist
S
,
)
i
Cover
T
.(

taglist

T
j
iS

,

)

D

T
(

)

j

f

T
Cover
.(

taglist
,

)

S
i

is the set of all tar-
is  a

SDP
(

)

i

iS .    We  say  that  a  point 
iS , of a set 
T '

0

,

(

)

)

T

),

iS

).1

(PC f

covering point with respect to 
of targets, 
currently detected by at least one sensor in the system, iff no 
target in T can escape out of 
in one time step.  The 
covering  graph  and  covering  function  of  a  sensor  are  de-
fined correspondingly. 

For a single sensor, optimality of detection hinged on the 
assurance that a certain number of targets would be seen the 
next time step. This assurance is  formalized by the idea of a 
proper taglist in a multi-sensor system. A feasible instance 
is said to be proper iff for every sensor 
tT
of
( 0
Cover
)(tSi
T
, targets in 
 are vertices of a clique 
.(
tT
tSCG i
in
.  It  is  difficult  to  construct  proper 
(
(
taglists  directly  ;  it  is  easier  to  take  a  shortcut  through 
taglists which satisfy  the hull property, defined next. 

taglist

taglist

tT
( 0

taglist

An instance of  

'T of targets in it. If every target in 
iS , then every target located within  

is said to satisfy the hull 
property  if  and  only  if  the  following  criterion  holds  for 
'T is tagged 
every subset 
)'(THull
is
with sensor 
also 
instance  of 
tT
is proper, it also satisfies the hull property; 
( 0
the converse need not be true. We will use this property to 
generate proper taglists and later to compute the complexity 
of the multi-sensor system.  
Finding the Optimal Solution 

tagged  with 
).1

iS .  Note 

The Findopt  routine  finds  the  sensor  assignment  that 

if  an 

taglist

that 

).1

))

0

guarantees maximal 1+ detections in the next time step. 
Findopt

tS
((

))
an 

0

0

),

tT
(
1. Generate 
( 0tT
. 
)
(1 Current

initial  proper 

taglist, Current
Compute 
and 
, which denote the number of 1+ and 

for
N
1 detections in  Current respectively.

(1 Current

N

)

)

 

2. For each proper taglist  Next  remaining do 

a.

If
N
(
(
Next
N
Current

1
(

Next
)

1

)

(

)

N
Next
Current
(
)
) 

N
1
N
1
Current
N
(
1
Next

)

)

or 

Current
(
1
and

then 

'''T  is expressible as a union 

IJCAI-07

2138

3. Assign 

sensor 

positions 

corresponding 

to 

Current using the method in Section 3.2. 

Finding all proper taglists 

It remains to specify how we find proper taglists. Note 
that only sensors with overlapping FOV regions pose a dif-
ficulty, for otherwise we run the single-sensor algorithm on 
each sensor. The brute force approach would be to generate 
all possible taglists, check whether each is proper, and pass 
it to  Findopt , at the expense of having an  
1
algorithm. This is too expensive a solution in time. Instead, 
we generate all taglists satisfying the convex hull property, 
which  in  general  takes  time  sub-exponential  in  m ,  and 
check whether each is proper. This is formalized below. 

kmO
2(

),

k

)

(

))

If

iSfD
(

jSfD

, for every pair of distinct 
sensors, the only proper taglist we generate corresponds to 
maximal  clique  detections  by  each  sensor.    If  the  sensors 
move in such a way that their FOV overlaps, we degenerate 
to the weakly overlapping case covered below. 
tS
),..,
(
k
))

)
strongly  overlapping  iff 

)}
)
0
  .  Suppose 

),
0
0
tSD
(

tS
(
2
(

tS
({
1

call 

We 

tS
('

tS
(

0

0

f

i

0

SiS

'

k

0

2

0

0

0

0

)

)

)

)

..

),

of 

1)),

set 

the 

tT
('

tQ
(

tQ
(

is 
k
.

cliques 

0tT
that
('
tT
that
(''
0
Suppose 
tSCG i
(

'S , and further 
 is detected by more than one sensor.  
of 

is the set of targets detected by 
)
)
that 
tT
('

)
0
( 0tQi
i

(
We  generate  the  space  of  proper  taglist  instances  for  
 as follows. Construct an iterator  1I  that traverses the 
0tT
)
('
tQ
space
.  At  every  point  of  the 
(
1
traversal of  1I , do the following. Tag every target that ap-
pears in one or more cliques with all sensors in whose FOV 
''T which is cur-
'''T  is that subset of 
it falls. Suppose that 
'S  . Construct 
rently detected by more than one sensor in 
2I which  goes  over  all  possible  combinations  of 
iterator
sensor  assignments  to  targets  in 
.  Each of  these 
satisfies the hull property.  Output the resulting taglist if and 
only if it is proper. 
0tS
('

weakly  overlapping  iff  for  every  
such  that 

We  call
'S
Si
iSfD
.  Following the same notation as 
(
in the previous case, we generate the space of proper taglist 
instances as follows.  1I  has the same meaning as before. It 
is 
as 
tS
,  where  sensors  in 
)
('
0
are  strongly  overlapping.  Correspondingly 
each

  there  exists  at  least  one 

possible 
t
('

write 
t
('

jSfD

)'''(THull

then 
S
t
('
0
1
)0(' t

to 
..

' tS

jS

iS

:'

S

S

S

)

)

(

)

)

)

)

i

j

 

2

0

r

0

0

r

i

1

iT
('''

t

0

)

. Construct itera-

tor

2I which  goes  over  all  possible  sensor  assignments  to 
,  the  Cartesian  product  of 

))

r

t

targets  in 

iT
('''
(

0

Hull
1

i

hulls; output the resulting taglist iff it is proper. 
Complexity Analysis

)

)

k

(

)

n

2n

2I

2I

1I  

)(tS

k 1:

  In 

 takes 

hulls for 

this  case 

A  typical  worst  case  scenario  is  one  in  which 

is 
weakly  overlapping. 
  runs  over 
fO
clique combinations, so the algorithm is exponen-
((
d
tial in the number of overlapping sensors. Suppose that there 
 to consider, and that the  i -th 
are
im targets in all, and 
hull encloses, or has on its boundary, 
im'  vertices. Suppose further that all  m targets are currently 
iterations to traverse its 
detected. Then 
space, and each iteration takes polynomial time in  m  in for 
computing the hulls, verifying hull points, and so on. Note 
 except in rare cases, so that the 
that
run-time  is  sub-exponential,  typically  polynomial,  in  the 
number of detected targets. 

'imnO

In essence while the algorithm is exponential in number 
of overlapping  sensors  it  is  typically  polynomial  in  the 
number of targets due to tags for only the targets that form 
the convex hull for a set of targets that constitute a clique. In 
steady state when sensors have diverged to maximize detec-
tions, the number of overlapping sensors is generally small, 
and this is specifically so when the area of E, is considerably 
greater  than  the  total  area  covered  by  the  sensors.  Indeed 
when  the  total  area  covered  by  sensors  is  greater  than  or 
equal  to  area  of  E  maximizing  detections  is  trivially 
achieved. 

mo
(

mo
(

m

)

)

'

i

i

5. Simulation and Results 

5.1 Implementation Specifics 

The  optimal  algorithm  above,  hereafter  called  OPT,  as 
well  as  the  representative  algorithms  of  Parker  and  Suk-
hatme-Jung,    have  been  implemented  on  an  Intel  P4  ma-
chine running Fedora Core 4 using the g++ compiler and Qt 
for graphical simulation. The specifics of each implementa-
tion are given below. 
OPT Algorithm 

This is essentially the same as the multi-sensor version 
presented in Section 4.2 with the restriction that, when OPT 
runs for 1 second, it terminates and outputs the most optimal 
solution  generated  thus  far.    This  restriction  ensures  that 
OPT takes nearly the same time to output its solution as its 
adversaries.  
Parker Algorithm 

We implemented the A-COMMT version of the Parker 
algorithm. We set the sensing range of every sensor to the 

3

2

 

do

2.1

do
1

do
dr
2

idr and

do
1
dr
1

FOV of OPT sensors during comparison; predictive tracking 
and communication ranges do not matter for simulation. In 
ido , correspond-
addition, we tweaked the values of 
ing  to  cut-off  points  for  sensor-sensor  and  sensor-target 
forces,    until  they  gave  optimal  performance.  Specifically, 
1dr  from one test case to another, ob-
1do and
we changed 
do
serving 
that 
and 
5.1
1
do
likewise  did 
  gave  best  results; 
7.2
0.2
1
dr
 . Furthermore, we scaled the weighted 
8.1
4.2
1
force vectors to an equal degree for all sensors. 
Sukhatme-Jung Algorithm 

availabili

We  partitioned  the  square  environment  into  a  cross-
shaped    topological  map.  We  tweaked  the  urgency  and 
availability thresholds from one test case to the next; in par-
  give 
ticular,
maximal detections.  The control parameter 
d was varied 
likewise across test cases till maximal detections were ob-
tained; specifically, when the FOV or the number of sensors 
was decreased,  we gave a small value to 
d ,  between 0.5 
and 0.6,  and large otherwise, between 1.5 and 1.8.  
5.2 Tabulated Results 

urgency

  and 

10

ty

4

8

4

]

]

s

50

,0[

,0[

500

500

max

]5,0[

The  environment  is  the  square 

.  Five 
sensors, each of FOV 50, are randomly placed in  E , each 
with
. Targets emanate from five sources placed 
randomly on the edges of  E every time instant. The speed 
  and  angle 
of  each  target  is  uniformly  distributed  in 
uniformly  distributed  on 
.  In  Tables  1-3,  the  rows 
indicate the order of the detection as a percentage rounded 
to  the  nearest  integer,  and  the  columns  indicate  the  algo-
rithm  whose  performance  is  noted.  Tables  2  and  3  show 
readings  of  the  form  A|B,  to  be  interpreted  as  follows.  In 
table 2, A corresponds to the case of 7 sensors, and B to that 
of 3 sensors, as indicated in its caption. Table 3 is read simi-
larly.
5.3  Performance Graphs 

]2,0[

Fig.  3a  (resp.  3b)    shows  how  the  number  of  1+  detec-
tions  varies  with  FOV(resp.  number  of  sensors)  for  each 
algorithm.  The  performance  gain  of  OPT  over  the  earlier 
ones is evident for various sensor and FOV combinations as 
it gives consistently higher 1+ detections, despite the man-
ual tweaking of its adversaries to achieve optimal perform-
ance.

Detection 

OPT 

Parker 

0 
1 
2 
3+ 

50 
49 
1 
0 

Table 1: Table of base case 

Sukhatme-
Jung 
55 
45 
0 
0 

60 
37 
3 
0 

IJCAI-07

2139

Detection 

OPT 

0 
1 
2 
3+ 

20|87 
75|14 
2|0 
1|0 

Parker  Sukhatme-
Jung 
19|85 
76|15 
5|0 
0|0 

13|80 
83|20 
5|0 
0|0 

Table 2: For cases: number of sensors increased to 7 | decreased to 
3

Detection 

0 
1 
2 
3+ 

OPT 

17|84 
75|16 
6|0 
2|0 

Parker 

33|88 
64|11 
3|1 
0|0 

Sukhatme-
Jung 
31|90 
60|10 
8|0 
1|0 

Table 3: For cases: Increasing FOV to 75|Decreasing to 25

6. Conclusions

A  novel  algorithm  for  multi-sensor  based  multi  target 
detection has been formulated and analyzed in terms of its 
computational  complexity.  Comparison  with  other  ap-
proaches  in  literature  verifies  its  efficacy  across  diverse 
scenarios. Such a multi-sensor algorithm finds applications 
in border patrol, guarding of secured areas, search and res-
cue and warehouse surveillance. 

References 
[Horling et. al, 2003] B Horling, R Miller, M Sims, and V 
Lesser, “Using and Maintaining Organization in a Large-
Scale  Distributed  Sensor  Network”,  In  Proceedings of
the  Workshop  on  Autonomy,  Delegation,  and  Control, 
(AAMAS 2003).

[Jung and Sukhatme 2002] B Jung and G.S. Sukhatme, “A 
Region-based  approach  for  Cooperative  Multi-Target 
Tracking in a Structured Environment”, Proc., Proceed-
ings  of International  Conference  on  Intelligent  Robots 
and Systems, 2002 

[Parker1999]  L  Parker,  “Cooperative  robotics  for  multi-
target  observation”,  Intelligent  Automation  and  Soft 
Computing, 5[1]:5-19, 1999 

[Parker  2002] L  Parker,  “Distributed  algorithms  for  multi-
robot  observation  of  multiple  moving  targets”, Autono-
mous Robots, 12, 3 (2002) 

 [Poduri and Sukhatme 2004] S Poduri and G S Sukhatme, 
“Constrained  Coverage  for  mobile  sensor  networks”, 
IEEE ICRA, 165-171, 2004 

[Schenato  et.  al,  2005]  L  Schenato,  S  Oh,  S  Sastry  and  P 
Bose, “Swarm Coordination for Pursuit Evasion Games 
using Sensor Networks”, IEEE ICRA, 2005 

Fig. 3a (above) and 3b(below): Variation of performance with 
(a)FOV and  (b)Number of Sensors. S-J = Sukhatme-Jung. 

IJCAI-07

2140

