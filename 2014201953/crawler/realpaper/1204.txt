TOWARD  A  PROGRAMMING  LABORATORY 

W a r r en  T e i t e l m an 

B o lt  B e r a n ek  and  Newman 

I nc 

50  M o u l t on  S t r e et 

C a m b r i d g e,  M a s s a c h u s e t ts 

A b s t r a ct 

T h is  p a p er  d i sc 

in 

t he  u s er 

and  d e s i r a b i l i ty  of 
l a b o r a t o r y" 
g r a m m l ng 
t he 
w i th 
f r e e i ng  hi 
p r o g r a m s, 
f u l ly  on 
t he  c o n c e pt 
t he  p r o b l em  he  w i s he 
w i th 
s i m i l ar  s y s t e ms 
t h at  s u ch  a 
d i c a t es 
c a n t ly 
i n c r e a se 
t he 
v i t y. 

t he 

f e a s i b i l i ty 

u s s es 
c o n s t r u c t i ng  a 
w h i ch  w o u ld  c o o p e r a te 
d e v e l o p m e nt  of  h is 

" p r o-

to  c o n c e n t r a te  more 

m 
u al  d i f f i c u l t i es  of 
s 

to  s o l v e. 

E x p e r i e n ce 

in  o t h er 

f i e l ds 

i n-

s y s t em  w o u ld  s i g n i f i-
p r o g r a m m e rfs  p r o d u c t i-

r e q u e s ts  of 

t he  u s er  and 

F or  e x a m p l e, 

The  PILOT  s y s t e m, 

PILOT  o p e r a t es  as  an 

i n t e r a c t i ve  BBN  L I SP  s y s t e m, 
t he  d i r e c t i on  of  a  p r o g r a m m i ng 

i m p l e m e n t ed  w i t h in 
is  a  s t ep 
l a b o r a(cid:173)
i n t e r f a ce  b e t(cid:173)
t he  u s er  and  h is  p r o g r a m s,  m o n i t o r i ng 
t he 
t he  o p e r(cid:173)

t he 
in 
t o r y. 
ween 
b o th 
a t i on  of  h is  p r o g r a m s. 
PILOT  d e t e c ts  an  e r r or  d u r i ng 
of  a  p r o g r a m, 
r e c t i ve  a c t i on  b a s ed  on  p r e v i o us 
i o ns 
t he  u s e r. 
c an  g i ve  d i r e c t i o ns 
o p e r a t i on  of  h is  p r o g r a m s,  e v en  w h i le 
a re 
w o rk 
e a s i ly  m o d i fy  PILOT  by 
i ts  own  o p e r a t i o n,  and 
l a n g u a ge  and  c o n v e n t i o ns 
w i th  P I L O T. 

r u n n i n g,  and  PILOT  w i ll  p e r f o rm 
r e q u i r e d. 

S i m i l a r l y, 
to  PILOT  a b o ut 

i n s t r u c t i ng 
it  a b o ut 
t h us  d e v e l op  h is  own 

t he  e x e c u t i on 
t he  a p p r o p r i a te  c o r(cid:173)

t he  u s er  c an 

In  a d d i t i o n, 

i n t e r a c t i ng 

I n s t r u c t(cid:173)

t he  u s er 

it 

t a k es 

f r om 

t h ey 

f or 

If 

t he 

t he 

S e v e r al  e x a m p l es  a re  p r e s e n t e d. 

I n t r o d u c t i on 

in 

The 

r e s e a r ch  d e s c r i b ed 

t h is  p a p er 
t he  p r o g r a m m e rf s  environment. 

f o c u s es  on 
This  term  is  meant  to  suggest  not  only  the 
usual  specifics  of  programming  system  and 
language  but  also  such  more  elusive  and 
subjective  considerations  as  ease  and  level 
of  interaction,  "forgivefulness"  of  errors, 
human  engineering,  and  system  " I n i t i a t i v e ." 
In  normal  usage,  the  word  "environment" 
refers  to  the  "aggregate  of  social  and  cul(cid:173)
tural  conditions  that  influence  the  l i fe  of 
an  individual."  The  programmer's  enivron-
ment  influences,  to  a  large  extent  deter(cid:173)
mines,  what  sort  of  problems  he  can  (and 
w i ll  want  to)  tackle,  how  far  he  can  go, 
and  how  fast. 
If  the  environment  is  "co(cid:173)
operative"  and  "helpful"  --  the  anthropomor(cid:173)
phism  is  deliberate  —  then  the  programmer 
can  be  more  ambitious  and  oroductive. 
If 

- 1-

not,  he  w i ll  spend  most  of  his  time  and 
energy  "fighting"  the  system,  which  at 
times  seems  bent  on  frustrating  his  best 
efforts. 

One  immediate  goal  to  strive  for  is  an 
environment  comparable  to  that  found  in  the 
well  designed  laboratory  of  the  physical 
sciences.  Such  a  laboratory  usually  con(cid:173)
tains  equipment  for  many  applications  as 
well  as  f a c i l i t i es  for  designing  and  build(cid:173)
ing  new  apparatus,  or  adapting  that  alreacfy 
present. 
In  a  large  (well-funded)  i n s t a l l(cid:173)
ation,  the  researcher  w i ll  also  often  have 
available  assistants  for  performing  the 
"routine"  tasks.  For  example,  a  chemist 
might  simply  request  an  analysis  of  a 
sample,  and  not  have  to  itemize  each  step 
in  the  process.  This  type  of  assistant 
and  assistance  frees  the  researcher  for 
problems  more  worthy  of  his  attention. 

Computer  based  systems  have  been  con(cid:173)

structed  that  create  this  type  of  labora(cid:173)
tory  environment  for  certain  well-defined 
areas,  e.g.,  mathematics  [ 3 , 5 , 6 ],  design 
of  electronic  circuits  [ 7 ],  and  general(cid:173)
ized  graphical  design  [ 4 , 8 ],  such  as  for 
a i r c r a f t,  automobiles,  bridges,  etc. 

These  systems  are  organized  to  allow 

the  computer  to  perform  the  routine  work 
(where  routine  is  a  function  of  the  soph(cid:173)
istication  of  the  system),  while  the  user 
guides  and  directs  the  process  at  a  rela(cid:173)
tively  high 
level.  For  example,  in  the 
mathematical  laooratory  developed  by 
Willian  Martin,  [ 5 ],  the  mathematician 
interacts  with  the  computer  by  asking 
questions  or  making  requests.  The  system 
employs  graphical  input  and  output  (lipsnt-
pen  and  display)  to  allow  the  mathematician 
to  operate  in  an  environment  that  closely 
resembles  the  pencil  and  paper  with  wnich 
he  is  already  familiar.  For  output,  the 
display  u t i l i z es  subscripts,  and  observes 
the  conventions  concerning  physical  size, 
grouping,  and  placement  of  subexpressions 
which  mathematicians  have  ado)ted  to  make 
It  easier  to  read  and  comprehend  mathemati(cid:173)
cal  formulae.  For  input,  the  mathematician 
can  communicate  directly  with  the  computer 
via  the  light  pen9  either  by  writing  new 
expressions,  or  by  pointing  to  old  ones,  or 
portions  thereof. 

it 

in 

to 

t r y­

f i nd 

the  user  has 

t he  user  might  be 

two  e q u a t i o n s,  w h i le 

r e s u l ts  a l r e a dy 
The  user  decides 

In  a  t y p i c al  case, 
i ng 
the  s o l u t i on  of  a  d i f f e r e n t i al 
e q u a t i o n.  On  the  screen  are  d i s p l a y ed  one 
or 
the  name  of  s e v e r al  o t h er  e x p r e s­
h is  head 
s t u d i ed 
sions  or  p a r t i al 
and 
to  p e r­
f i l ed  away. 
form  an  a c t i on  such  as  s u b s t i t u t i ng  a  d i s­
played  e q u a t i o n,  s o l v i ng 
f or  some  v a r i­
a b l e,  expanding  some  subexpression 
c e r t a in  way,  or  perhaps  asking 
t h i ng  e l s e.  He  makes 
combination  of 
s i g n a l s. 
to 
t i n es  compute  or  r e t r i e ve 
expressions  and 
t r a n s m it 
d i s p l ay  r o u t i n es  which 
d i s p l ay 
way, 
a 
i ng  he  d id  not  make  any  mistakes  or 
l o se 
t r a ck  of  what  he  was  d o i n g,  might  o t h e r­
wise 

few  minutes 
i n v o l v ed  a n a l y s is  w h i c h,  assum­

the  r e q u i r ed  new 
them  back 
the 

the  d e s i r ed  new  p i c t u r e. 

l i g h t - p en  and  key-board 

These  are  encoded  and 

take  him  many  hours. 

the  user  can  p e r f o rm 

the  a p p r o p r i a te  r o u­

the  request  u s i ng  a 

then  compile  and 

the  system  where 

l o ng  and 

in  a 

in  a 

t h is 

to  see  some­

to 

In 

t r a n s m i t t ed 

T h is  paper  d e s c r i b es  a  step 

in 

the 

is 

to  a l l ow 

l a b o r a t o ry 

f or  program­

d i r e c t i on  of  such  a 
the  PILOT  system. 
ming  and  programmers: 
t he 
As  w i th  the  mathematical 
to  p e r f o rm 
g o al 
t h is 
the  r o u t i ne 
case  a  programmer, 
to  concen­
t r a te  on  the  more  c r e a t i ve  aspects  of  h is 
problem,  which 
of  a  program. 

the  w r i t i ng  and  debugging 

the  computer 

t a s ks  w h i le 

l a b o r a t o r y, 

the  u s e r, 

f r ee 

l e ft 

in 

is 

is 

in 

Is 

i m­

Most  of 

to  such 

the  b a s ic 

f a c i l i t i es 

the  d e s i gn 

i n n o v a t i on  of 

the  p r e v i o us  e f f o r ts  bent  at 
the  program­

t he  environment  of 

such  as  e d i t o r s,  com­

the  emphasis  p l a c ed  on 

t r a ce  packages,  d i s p l ay  r o u t i n e s, 

I m p r o v i ng 
mer  have  c o n c e n t r a t ed  on  p r o v i d i ng  and 
p r o v i ng  packages, 
p i l e r s, 
e t c.  While  a  good  d e al  of  e f f o rt  has  been 
devoted 
of  PILOT, 
PILOT  system 
problem  of  making  changes 
reason 
changes 
cupies  most  of  a  programmers 
f o r t, 
ment  of  programs  when 
i ly  of  c o r r e c t i ng  s y n t a c t i c al  and  simple 
l o g i c al  e r r o rs 
i n d i v i d u al  s u b r o u t i n e s, 
to 
t he 
makes 
changes 
h is  program. 

time  and  e f­
the  d e v e l o p­
they  c o n s i st  p r i m a r­

f i n al  stages  when 
the 

the 
In  programs.  The 

t h at  a f f e ct  many  d i f f e r e nt  p a r ts  of 

t h at  making 
t h at  o c­
t a sk 

f or 
in  programs 

from  t he  e a r ly  stages 

t he  programmer 

t h is  emphasis 

type  of 

is 
t he 

l o g i c al  and  o r g a n i z a t i o n al 

the 

In 

in 

is 

and  problems, 
formance  of 
Puthermore,  PILOT 
m i n d,  so 
user  d u r i ng 

t h at 

In  s h o r t, 
the  system 

t a i l or 
t he  p e r­
to  s u it  h i m s e l f. 
t h is 
the 

is  designed  w i th 
it  can  cooperate  w i th 

t h is  phase  of 

the  development. 

in 

PlLOT 

ic 

Implemented 

in 

the  LISP  p r o­

The  PILOT  System 

[ 1] 

in 

the 

i n to 

t h e re 

f e a t u r es  and 

t h is  paper  were 

Is  a  PILOT  subsystem 

language  at  B o lt  Beranek  and 
I n c .,  Cambridge,  Massachusetts. 
in 
t o o ls  des­
i n c o r p o r a t ed 
the  BBN  LISP  system  once 

gramming 
Newman 
Although 
LISP,  a ll  of 
c r i b ed 
d i r e c t ly 
t h e ir  u s e f u l n e ss  was  e s t a b l i s h e d,  and  are 
the  e n t i re  community 
now 
of  LISP  u s e r s. 
thus  more  meaning­
f ul 
a  p h i l o s o p hy  of  d e s i g n. 
sophy 
t r y i ng 
hopes 
in 
s i gn  and  c o n s t r u c t i on  of  systems 
languages. 

to  view  PILOT  as  a  conceptual  system, 
t h is  p h i l o­
the 

in  g e n e r al  use  by 
is 

t h at  we  are 
t h at 

it  may  prove  u s e f ul 

the  d e­
in  o t h er 

is 
I m p a r t, 

It 
to 

( *) 

in 

It 

to 

the 

the  programmer  begin 

i n i t i al  stages 
implementa­
l a r ge  program  are  u s u a l ly  d e v o t­

i n d e­
r o u t i n e s.  Only  a f t er 

l e a st 

Automatic  E r r or  C o r r e c t i ng 
in 

the  program  and  check 

the  w r i t i ng  and  debugging  of 

The 
t i on  of  a 
ed 
pendent  component 
these  have  been  checked  o u t,  at 
s u p e r f i c i a l l y,  can 
assemble 
f or 
r o u t i ne  problems.  However,  b e f o re 
grammer  can  even  begin 
he  must 
nate 
c al  e r r o rs 
language  or  system 
i n g. 
F a c i l i t a t i ng 
l o w e s t - l e v el  e r r o rs  would 
improve 
f i c i e n cy  of  debugging  by  a l l o w i ng 
grammer 
l e v el  problems. 

to  proceed  d i r e c t ly 

those  s y n t a c t i c al  and/or  simple 
from 

t h at  cause  c o m p l a i n ts 

in  which  he 
the  c o r r e c t i on  of 

to  h i g h er 

f i r st  get 

to  r u n, 

i n t e r-
the  pro­
to  debug  a  r o u t i n e, 

l o g i­
the 
Is  o p e r a t­

the  e f­
the  p r o­

i . e .,  e l i m i­

these 

to 

it 

f or 

From 

these 

the  c o m p u t a t i o n. 

the  system  to  c o r r e ct 

t he  u s e r 's  s t a n d p o i n t,  c l e a r ly 
the  best  of  a ll  p o s s i b le  s o l u t i o ns  would 
be 
l o w-
l e v el  e r r o rs  a u t o m a t i c a l ly  and  c o n t i n ue 
w i th 
f a r-
f e t c h e d: 
of 
the 
nother  LISP  programmer  w i t h o ut  any 
mation  about 
of 

the  e r r o rs  made  by  LISP  users  are  of 

the  LISP  program  or  e x p r e s s i on 

t h at  c o u ld  be  c o r r e c t ed  by  a-

t he  purpose  or  a p p l i c a t i on 

a  s u r p r i s i n g ly 

l a r ge  percentage 

i n f o r­

T h is 

type 

not 

in 

is 

The  problem  of  making  changes 

to 

the 

i t s e lf 

is  handled  as  a  s p e c i al 

the  problem  of  making  changes 

in  g e n e r a l. 
f a c i l i t a te  making  changes 
t o o ls  and 

PILOT  system 
case  of 
programs 
signed 
to 
grams, 
i ts 
p l i ed  d i r e c t ly 
i a l ly  a  b o o t s t r a p p i ng  p r o c e s s. 
can 
i n t r o d u ce  new 
modify  e x i s t i ng  ones 

in  p r o­
t e c h n i q u es  can  be  a p­
is  e s s e n t­
The  user 

to  s u it  h is  own  methods 

t o o ls  a n d / or 

Since  PILOT 

thus  e a s i ly 

in 
is  d e­

in  what 

i t s e lf 

to 

f or 

LISP 

i m p l e­

is  e s p e c i a l ly  s u i t ed 

(*) 
menting  a  system  such  as  PILOT  because  of 
the  ease  w i th  which  LISP  programs  can  be 
T h is 
t r e a t ed  as  data  by  o t h er  programs. 
c a p a b i l i ty 
t o o ls 
which 
themselves  w i ll  c r e a te  a n d / or  modify 
programs,  an 
programming 

i n d i s p e n s i b le 
l a b o r a b o r y. 

f e a t u re  of  a 

f or  c r e a t i ng 

is  e s s e n t i al 

- 2-

If 

these 

q u e s t i o n , ( *)  e . g .,  m i s s p e l l i n g s,  c e r t a in 
t y p es  of  p a r e n t h e s is  e r r o r s,  e t c. 
c o r r e c t i o ns  were  performed  a u t o m a t i c a l ly 
by  a  program  t h at  was  c a l l ed  o n ly  when 
( a f t e r)  an  e r r or  o c c u r r ed 
of  a  LISP  p r o g r a m, 
t r a ct 
tem  w i th  debugged  programs. 
f i c i e n cy  of 
would  not  be  a  c r i t i c al 
f u l n e s s. 

t he  e f­
t he  e r r or  c o r r e c t i ng  program 
i ts  u s e­

from  t he  performance  of 

t he  e x e c u t i on 
in  no  way  d e­

t he  LISP  s y s­
Thus 

in 
it  would 

f a c t or 

in 

A  p r i m i t i ve  program  which  c o r r e c t ed 

t y p es  of  s p e l l i ng  e r r o rs  was 

i m­

to  experiment  w i th 

in  PILOT  and  users  were  e n c o u r­
it  and  comment  on 
t h is  e x p e r i­

As  a  r e s u lt  of 

t h at 

in  o r d er 

to  be 

c e r t a in 
plemented 
aged 
i ts 
e n c e,  we  d i s c o v e r ed 
a c c e p t a b le 
to  u s e r s: 
(1) 

f e a t u r e s. 

it 

The  program  must  have  a  measure  of  how 
c e r t a in 
the  n a t u re  and  c o r­
r e c t i on  of  a  m i s t a k e,  and  use 
measure 
i n t e r a c t i on  w i th 

in  d e t e r m i n i ng 

the  amount  of 

t he  u s e r. 

is  about 

t h is 

(2) 

( 3) 

( 4) 

( 5) 

between  s i g n i f i c a nt  and 

The  program  must  be  a b le 
g u i sh 
t r i v i al  c o r r e c t i o n s,  and 
c a u t i o u s, 
about  c o r r e c t i ng 

i . e .,  more 
t he 

to  be  more 

i n t e r a c t i v e, 
f o r m e r. 

to  d i s t i n­

The  u s er  must  be  a b le 
t he  p r o g r am  h is  d e g r ee  of  c o n f i d e n ce 
in 
t a k e s,  as 
i n t e r a c t i on  he  d e s i r e s. 

to  c o r r e ct  h is  m i s­

t he  amount  of 

r e f l e c t ed  by 

i ts  a b i l i ty 

to  s p e c i fy 

to 

The  u s er  must  be  a b le 
a n d / or  a b o rt  any  a t t e m p t ed  c o r r e c t i o n. 

i n t e r r u pt 

to 

The  u s er  must  be  a b le 
o v e r r u le 
if  or  w h e n e v er  he  w i s h e s. 

t he  e n t i re  c o r r e c t i ng  p r o g r am 

to  d i s a b le  or 

W i th 

t h e se  c r i t e r ia 

in  m i n d,  a  more 

i m p l e m e n t e d. 
t he  DWIM  p a c k a g e, 
The 

s o p h i s t i c a t ed  s et  of  e r r or  c o r r e c t i ng 
r o u t i n es  w e re 
make  up 
Mean. 
a t i ve  of 
of 
c e d ed  by  an  a r r ow 

t he  k i nd  of  c o r r e c t i o ns  and 
i n p ut 

i n t e r a c t i on  of  DWIM. 
(  «-)  . 

f o l l o w i ng  o u t p ut 

T h e se 

U s er 

is 

f or  D o - W h a t - I-

r e p r e s e n t-

f l a v or 
is  p r e­

r o u t i n es 

t h is  e x a m p l e, 
f u n c t i on  PACT  of  one  a r g u m e n t,  N, 

f i r st  d e­

is 

to  be  N 

t he  u s er 

In 
f i n es  a 
whose  v a l ue 
f a c t o r i a l. 
f u n c t i on  c o n t a i ns  s e v e r al  e r r o r s: 
and  FACT  h a ve  b e en  m i s s p e l l e d. 
N9  was 
b ut 
t he 
e d. 
ed 
t h e re  a re 
t he  T 
c o n d i t i o n a l, 

l e ft  p a r e n t h e s i s. 

l e ft  p a r e n t h e s is 

t h at  b e g i ns 

S i m i l a r l y, 

i n s t e ad  of 

to  be  a 

t he  8 

t wo 

t he 

to  be  a 

i n t e n d ed 
t e l e t y pe  s h i ft  k ey  was  n ot  d e p r e s s­
i n t e n d­

in  8SUB1  was 

The 
TIMES 
in 
r i g ht  p a r e n t h e s is 

The  9 

F i n a l l y, 

in 

f r o nt  of 
t he 
r e q u i r ed  o n e. 

in 

t he  s e c o nd  c l a u se 

( *)  We  c o n j e c t u re 
in  o t h er 

l a n g u a g e s. 

t h at 

t h is 

is  a l so 

t r ue 

- 3-

A f t er  d e f i n i ng 

t he 

f u n c t i on  FACT, 

t he 
Is  d e f i n i t i on  u s i nr 

to 

DWIM 

is  no 

t h e re 

S i n ce 

l o ok  at 

t he  DWIM  p r o g r am 

f u n c t i on  PRETTY-
t he  s y s t e m,  an  UNDEFINED  FUNCTION 

u s er  w i s h es 
PRETTYPRINT,  w h i ch  he  u n f o r t u n a t e ly  m i s­
s p e l l s. 
PRNT 
in 
e r r or  o c c u r s,  and 
c a l l e d. 
i n v o k es 
: e c t o r,  w h i ch  s e a r c h es 
f u n c t i o ns 
s i b le  m a t ch  a 
u s ed 
F i n d i ng  one 
e x t r e m e ly  c l o s e,  DWIM  p r o c e e ds  on 
s u m p t i on 
PRINT, 
PRETTYPRINT. 

i ts  s p e l l i ng  c o r-
f or 
t he  b e st  p o s­

t h at  PRETTYPRNT  meant  PRETTY-

t h i s,  and  c a l ls 

t h at 
is 
t he  a s­

t he  u s er  of 

t h is  u s e r ). 

f r e q u e n t ly 

i n f o r ms 

l i st  of 

( by 

is 

At 

t h is  p o i n t,  PRETTYPRINT  w o u ld 

to 

t he 

j u st 

is  n ot 

to  make 

f a c i l i ty 

r e s t r i c t ed 

DWIM  m o d i f i es  s e l e c t ed 
f u n c t i o n s,  s u ch  as  PRETTYPRINT  and 
t h em  c o o p e r a te  more  w i th 
( by  ADVISE, 

n o r m a l ly  p r i nt 
(FACCT  NOT  PRINTABLE)  and 
e x i t,  s i n ce  FACCT  h as  no  d e f i n i t i o n.  T h is 
is  n ot  a  s y s t em  e r r or  c o n d i t i o n,  b ut 
DWIM 
e r r or  c o n d i t i o n s. 
s y s t em 
DEFINEQ, 
t he  u s e r. 
to  be  d e s c r i b ed 
f u n c t i o ns  d e f i n ed  by 
t h em 
t he  s p e l l i ng 
S i m i l a r l y,  PRETTYPRINT 
when  g i v en  a 
it  c a l ls 
PRETTYPRINT  d e t e r m i n es 
to  s ee 

to  n o te  any  new 
t he  u s e r,  and  add 
l i st  of  u s er 

f u n c t i on  w i th  no  d e f i n i t i o n, 

t he  u s er  w a n ts 
f u n c t i on 

t he  s p e l l i ng  c o r r e c t o r. 

t he  d e f i n i t i on  of 

f u n c t i o n s. 
t h at 

is  m o d i f i ed  so 

is  m o d i f i ed 

DEFINEQ 

t h at 
t he 

l a t e r) 

T h u s, 

to 

PACT,  not  FACCT,  and  proceeds  accordingly. 
The  user  now  c a l ls  his  function  FACT. 
f i ve  errors  are  gener­

During  i ts  execution, 
ated,  and  DWIM  is  called  f i ve  times.  At 
each  p o i n t, 
ment  made  of  the  action  taken,  and  the  com­
putation  allowed  to  continue  as 
ror  had  occurred. 
r e c t i o n,  6, 
ed.  F i n a l l y, 
correct,  d e f i n i t i on  of  FACT. 

Following  the  last  cor­
is  p r i n t­
the  user  p r i n ts  the  new,  now 

the  error  is  corrected,  a  com­

the  value  of  FACT(3), 

if  no  er­

In  t h is  p a r t i c u l ar  example, 

the  user 
was  shown  operating  in  a  mode  which  gave 
the  DWIM  system  the  green  l i g ht  on  a ll  cor­
rections.  Had  the  user  wished  to  interact 
more  and  approve  or  disapprove  of  the  i n­
tended  corrections  at  each  stage,  he  could 
have  operated  in  a  d i f f e r e nt  mode.  Or, 
operating  as  shown  above,  he  could  have  at 
any  point  aborted  the  correction  or  s i g­
nalled  his  desire  to  see  the  results  of  a 
correction  a f t er  it  was  made  by  typing  a 
?  on  the  teletype. 

We  have  found  from  our  experience  with 

it  thinks 

DWIM  that  most  users  are  quite  w i l l i ng  to 
entrust  the  program  with  the  correction  of 
e r r o r s,  although  each  d i f f e r e nt  user  may 
want  to  operate  with  a  d i f f e r e nt  " c o n f i­
dence  f a c t o r ,"  a  parameter  which  indicates 
how  sure  DWIM  must  be  before  making  a  cor­
r e c t i on  without  approval.  Above  a  certain 
user-established  l e v e l,  DWIM  makes  the  cor­
r e c t i on  and  goes  on.  Below  another  l e v e l, 
DWIM  types  what 
is  the  problem, 
e . g .,  DOES  PRTYPNT  MEAN  PRETTYPRINT  ?,  and 
waits  for  the  user  to  respond. 
In  the  i n-
between  area,  DWIM  types  what 
it 
is  about 
to  do,  pauses  for  about  a  second,  and  if 
the  user  does  not  respond,  goes  ahead  and 
does 
important  thing  to  note  is 
that  since  an  error  has  occurred, 
the  user 
would  have  to  intervene  in  any  event,  so 
any  attempt  at  correction  is  appreciated, 
even  if  wrong,  as  long  as  the  correction 
does  not  cause  more  trouble  than  the  o r i g­
i n al  to  correct♦  Since  DWIM  can  recognize 
the  difference  between  t r i v i al  corrections, 
such  as  misspellings,  and  serious  correct­
ions,  such  as  those  involving  extensive 
e d i t i n g,  bad  mistakes  are  usually  avoided. 
When  DWIM  does  make  a  mistake,  the  user 
merely  aborts  his  computation  and  makes 
the  correction  he  would  have  to  make  any­
way. 

The 

i t. 

in  General 

Certain  types  of  errors 

Error  Handling 
that  occur  in 
the  BBN  LISP  system  cannot  be  handled  by 
the  DWIM  program,  e . g .,  NON-NUMERIC  ARG, 
an  error  generated  by  the  arithmetic 
f u n c t i o n s,  ARG  NOT  ARRAY,  from  the  p r i m i­
t i ve  array  functions,  etc.  These  are  data 

- 4-

type  e r r o r s . ( *)  Another  class  of  errors 
not  handled  by  DWIM  are  the  'panic"  errors: 
BP  FULL,  a  complaint  from  the  compiler 
meaning  it  has  run  out  of  binary  program 
space;  NONXMEM,  an  attempt  to  reference 
non-existent  memory,  usually  caused  by 
t r e a t i ng  an  array  pointer  as  a  piece  of 
l i st  s t r u c t u r e;  PDL  OVFLW  meaning  pushdown 
l i st  overflow,  which  usually 
implies  a 
looping  program,  etc.  Both  data  type  and 
panic  errors  are  not 
f i x a b l e,  but  they  are 
helpable. 

In  our  system,  whenever  an  error 

( It 

intervene  to 

f ix  the  error  that  has  occurred, 

it  causes  a  trap  to  a  user-modi­
occurs, 
is  through  t h is  pro­
f i a b le  program. 
gram  that  DWIM  works.) 
If  DWIM  has  not 
been  enabled,  or  if  the  user  aborts  an  a t­
tempted  DWIM  c o r r e c t i o n,  or  if  DWIM  can­
not 
the 
system  goes  into  a  "break"  and  allows  the 
user  to  Interact  with  the  system  W h i le 
maintaining  the  context  of  the  program  in 
which  the  error  occurred.  This  allows  the 
user  to 
problem,  or  to  salvage  what  he  can  of  the 
computation.  While  in  the  break, 
system  accepts  and  evaluates  inputs  from 
the  teletype.  Since  a ll  of  the  power  of 
the  system  Is  available  to  him, 
the  user 
can  examine  variables,  change  t h e ir  values, 
define  and  evaluate  new  functions,  and 
i n. 
even  edit 
another  error  occurs 
quested  while 
the  system 
goes  into  a  second,  lower  break,  and  so  on. 
that 
Thus 
the  results 
of  a 
occurrence  of  an  error  near  i ts  end. 

it 
lengthy  computation  are  lost  by  the 

If 
in  a  computation  r e­

in  the  break, 
the  case 

functions  he 

is  currently 

to  r e c t i fy 

is  rarely 

the 

the 

t ry 

The 

following  example 

i l l u s t r a t es 

t h is 

The  f i r st 

is  preceded  by  " :"  or 

process  (user  input 
" * " ).  The  user  is  running  a  large  account>-
lng  system,  one  of "whose  subroutines 
is  to 
perform  the  alphabetization  of  a  l i st  of 
names. 
i n d i c a t i on  of  the  pre­
sence  of  a  l o g i c al  error  in  the  system  is 
the  message  ATTEMPT  TO  CLOBBER  NIL,  mean­
ing  the  program  is  attempting  to  change 
the  value  of  NIL.  The  system  goes  into  a 
break  ( 1 ),  and  the  user  t r i es  to  determine 
where  the  error  occurred  by  performing  a 
backtrace  (2).  He  sees  that  he  is  in  the 
function  ALPHA, 
interrogates  the  value  of 
some  of  ALPHA'S  variables  ( 3 ),  and  realizes 
that  the  problem  arose  when  his  alphabeti­
zation  routine  attempted  to  compare  the 
l a st  element 
f o l l o w­
ing  i t, 
I . e.  and  end-check  problem.  While 
s t i ll  in  the  break,  he  proceeds  to  edit 
the  function  ALPHA  (4).  DWIM  corrects  his 
s p e l l i n g,  and  since  ALPHA  happens  to  be 

l i st  to  the  one 

In  the 

(*)  Sometimes  these  errors  are 
caused  by  misspellings,  but  it 
ble  to 

in  general. 

t e ll 

in  fact 
is  impossi­

i ts  de(cid:173)

the  editor  retrieves 
typing  PFOP  (5) 

compiled, 
f i n i ng  symbolic  expression  from  i ts  pro(cid:173)
perty  l i s t, 
to  c a ll  t h is 
to  the  user's  a t t e n t i o n.  Consulting  his 
l i s t i n g, 
the  user  i n s t r u c ts  the  editor  to 
f i nd  the  expression  beginning  with  COND 
that  contains  RETURN,  (6)  which  he  then 
p r e t t y p r i n ts  (7). The  expression  he  wants 
is  the  one  before  t h is  one,  so  he  backs  up 
( 8 ),  and  makes  the  appropriate  correction 
(9).He  then  recompiles  ALPHA  (10). 

ATTEMPT  TO  CLOBBER  N IL 
T E I T E L M AN 
IN  RPLACA 

(RPLACA  BROKEN) 
: BT 
RPLACA 
ALPHA 
ACC0UNTS2 
ACC0UNTS1 
ACCOUNTS 

(SOBROW  O U I L L I AN  MURPHY  B E LL 
:Y 
( A I L) 
:Z 
T E I T E L M AN 
: ( E D I TF  A L H P A) 
=ALPHA 
PROP 
E D IT 
* ( C O ND  C O N T A I N I NG  RETURN) 
PP 

(COND 

( F LG 
(T 

*BACK  PP 

(GO  L P)  ) 

(RETURN  X)  )  ) 

( N U LL 

(SETO  Y 

(CDR  Y)  )  ) 

* ( E M B ED  SETQ 
* PP 

IN  CUR) 

1 
2 

N I L) 

3 

4 

5 
6 
7 

8 

1 

( A L P H A ) )) 

10 

Now  the  user  wishes  to  proceed  with 
the  computation,  and  so  must  correct  the 
immediate  error  s i t u a t i on 
function 
RPLACA.  He  interrogates  the  value  of 
RPLACA'S  arguments  by  typing  ?=  (11),  and 
changes  the  f i r st  argument  to  the  value  of 
Y  (12).  He  then  evaluates  RPLACA  (13), 
checks  i ts  value  (14),  and  releases  the 
break  by  typing  OK  (15). 

in  the 

it 

In  terms  of  LISP, 

As  i l l u s t r a t ed  above,  when  an  error 
occurs  a  user  invariably  wants  to  "look 
back"  and  see  what  happened  e a r l i er  in  the 
computation  to  cause  the  error  s i t u a t i o n. 
In  BBN  LISP,  a ll  information  regarding  the 
is 
state  of  the  computation  in  progress 
stored  on  the  push-down  l i st  and  is  ex(cid:173)
p l i c i t ly  available  to  the  user  and  to  user 
programs. 
In  f a c t,  without  t h is  capabil(cid:173)
i t y,  DWIM  could  only  be  used  to  correct 
certain  t r i v i al  e r r o r s.  We  believe  that 
for  any  type  of  programming  laboratory 
environment, 
is  absolutely  essential 
that  programs  be  able  to  examine  the  state 
of  the  world  at  any  point 
in  the  computat(cid:173)
i o n. 
t h is  implies  being 
able  to  examine  the  sequence  of  functions 
that  have  been  c a l l e d,  and  looking  at  v a r i(cid:173)
able  bindings.  Since  the  same  variable 
may  be  bound  in  nested  function  c a l ls  a 
number  of  times,  expecially  during  a  r e(cid:173)
cursive  computation,  the  program  must  be 
able  to  specifv  which  binding  of  a  v a r i(cid:173)
able 
change  a  p a r t i c u l ar  binding 
if  necessary. 
For  example,  had  X  and  Y  been  the  name  of 
RPLACA's  arguments, 
the  user  should  s t i ll 
be  able  to  interrogate  the  value  of  X  and 
Y  in  ALPHA.  F i n a l l y,  the  program  must  be 
able  £b  cause  the  computation  to  revert 
back  to  a  specified  place  on  the  push-down 
l i st  regardless  of  the  number  and  type  of 
intervening 
A ll  of  these  c a p a b i l i t i es  are  present 
In 
our  system. 

it  is  referencing  and  be  able  to 

functions  that  have  been  called 

(CDR 

( S E TQ  Y 

(CUR  Y)  )  ) 

(QUOTE 

*OK 
( A L P H A) 
: ( C O M P I LE 
L I S T I N G? 
ST 
(OUTPUT  F I L E) 
NONE 
( A L P HA  C O M P I L I N G) 
( A L P HA  R E D E F I N E D) 
( A L P H A) 
: ?= 
U  =  N IL 
V  =  T E I T E L M AN 

: ( S E TU  u  Y) 
( N I L) 
SEVAL 
RPLACA  EVALUATED 
: V A L UE 
( T E I T E L M A N) 
:x 
(BOBROW  Q U I L L I AN  MURPHY  B E LL 
:OK 
RPLACA 

[ 2] 

is  also  d i r e c t ly 

User  Breaks 
The  capability  of  stopping  a  compu(cid:173)
t a t i on  and  maintaining  i ts  context  while 
executing  teletype 
inputs 
available  to  the  user  as  an  aid  in  debug(cid:173)
In  the 
ging  in  a  variety  of  forms. 
simplest  case, 
the  user  can  request  that 
selected  functions  be  modified  to  cause 
breaks  whenever  they  are  c a l l e d,  or  only 
when  a  certain  condition  is  s a t i s f i e d, 
e.g..  (BREAK  ALPHA  (GREATERP  (LENGTH  X)  10)) 
w i ll  cause  the  alphabetization  routine  to 
break  whenever  it 
l i st  of  length 
greater  than  10.  At  t h is  point  the  user 
can  intervene  and  examine  variables,  edit 
functions,  etc.  exactly  as  with  the  case 
when  an  error  occurs  and  the  system  causes 
a  break. 

is  given  a 

11 

12 

13 

14 

T E I T E L M A N) 

15 

- 5-

Another  way  of  u s i ng 

the  break 

f e a t u re 

f u n c t i o n. 

t h at  a 
Is  c a l l ed 

to  s p e c i fy 
it 

f u n c t i on  be  " b r o k e n" 

For  example, 
to  break  on 

from  some  p a r t i­
the  user 
the 

Is 
o n ly  when 
c u l ar 
f u n c t i on 
would  be  r e l u c t a nt 
SETQ,  since  almost  every 
i t. 
However,  he  c o u ld  (BREAK  (SETQ  IN  ALPHA)), 
which  would  only  break  on  c a l ls 
from  w i t h in  ALPHA. 
c a l l i ng 
the  e d i t or 
c a l ls 
Thus 
f e c t ed  or  degraded  when  c a l l ed 
o t h er 

to  SETQ 
is  performed  by 
f i nd  and  modify  a ll 

to  SETQ 
the  performance  of  SETQ 

Is  not  a f­
from  any 

f u n c t i on  ALPHA. 

f u n c t i on  uses 

f u n c t i o n. 

i n s i de  of 

This 

the 

to 

is 

then  c a l l ed 

t h at  breaks 
i n s i de  of 

The  e d i t or 
f u n c t i on  must  be  an 

The  user  can  a l so  request 
i n s e r t ed  at  s p e c i f i ed  p o i n ts 
f u n c t i o n. 

( in 
the 
i n t e r p r e­
i . e.  have  an  S - e x p r e s s i on  d e f i n i t­

be 
a 
t h is  case 
t ed  one, 
ion)  to 
f i nd 
t he  b r e a k. 
(BREAKIN  ALPHA  (BEFORE  (COND  CONTAINING 
RETURN))),  which  would  cause  a  break  Just 
b e f o re  e x e c u t i ng  the 
A l­
t e r n a t i v e l y,  he  can  c a ll 
u s i ng  the 
f u n c t i on  HELP. 

the  a p p r o p r i a te  p o i nt  and 
For  example, 

the  user  could 

f or  a  break  by 

i n d i c a t ed 

f o r m. 

i n s e rt 

F i n a l l y, 

f u n c t i on 

t e l e t y p e. 

is  c a l l e d,  u s u a l ly 

t he  user  can  request  a  break 
t i me  d u r i ng  a  computation  by  simply 

t i me  a 
few  m i l l i s e c o n d s,  a  break  w i ll 

at  any 
d e p r e s s i ng  a  s p e c i al  key  on  the 
The  next 
w i t h in  a 
o c c u r,  and  a g a in  t he  user  can 
examine 
These  c a p a b i l i t i es  are 
c a l i z i ng  problems 
e s p e c i a l ly  r e c u r s i ve  ones,  and  are  p o w e r f ul 
t o o ls 
t h at  complement 
p r o v i de  how 

f or 
in  complex  programs, 

those  d e s c r i b ed  below 

the  c o m p u t a t i o n,  e t c. 

to  make  changes. 

to  make  changes 

I n t e r v e ne  and 

f i n d i ng  where 

the  s t a te  of 

i n v a l u a b le 

t h at 

f or 

l o­

A d v i s i ng 

to 

the 

t h at 

those 

f o r e s ee 

t h r o u gh 

in  advance, 

In  some  cases, 

the  p r o­
i m p l i c a t i o ns  of 

PILOT  was  o r i g i n a l ly  m o t i v a t ed  by 

t he  area  of  a r t i f i c i al 
i n t e l­
These  problems  can  be  c h a r­

the 
d i f f i c u l t i es  encountered 
In  u s i ng  computers 
f or  s o l v i ng  very  hard  p r o b l e m s,  p a r t i c u l a r­
ly 
in 
l i g e n c e.  [ 9] 
a c t e r i z ed  as  b e i ng  extremely  d i f f i c u lt 
t h i nk 
I s,  away 
from  the  computer. 
grammer  cannot 
c e r t a in  d e c i s i o ns  he  must  make 
s i gn  of  t he  program. 
compare  s e v e r al  a l t e r n a t i v es  o n ly  by 
i ng  them  out  on  the  machine. 
he  g e ts  h is  program  debugged,  he  c o n t i n u es 
to  make  a l t e r a t i o ns 
Only  by  e x p e r i m e n t i ng  w i th  h is  w o r k i ng  p r o­
gram  can  he  e v a l u a te 
hope 
cannot  a c c u r a t e ly  p r e d i ct 
changes  on 
the  b e h a v i or  of 
because  of  i ts  s i ze  and  c o m p l e x i t y,  he  must 
adopt 
t ry 
must  be  able 
l a b o r a t o r y. 

i ts  performance  or 
Since  he 
the  e f f e ct  of 
t he  program 

the  more  pragmatic  p o l i cy  of  " l e t 's 

it  and  see  what  happens." 

the  computer  as  h is 

t r y­
Even  a f t er 

In  o t h e r s,  he  can 

i ts  g e n e r a l i t y. 

t h e ir  e f f e c t s. 

In  s h o r t,  he 

in  the  de­

to  extend 

to  see 

t r e at 

to 

- 6-

U n f o r t u n a t e l y,  making  changes 

in  p r o­

l a r ge  and  complex  p r o­

is  o f t en  not  a  simple  m a t t e r. 

grams,  e s p e c i a l ly 
grams, 
they  may  r e q u i re  so  much  e f f o r t,  many  ex­
i m p l e­
p e r i m e n t al  changes  are  simply  not 
mented,  w i th 
t he  programs 
t h is  r e a s o n, 
soon  become  " f r o z e n ." 
c o n s i d e r a b le  a t t e n t i on  and  e f f o rt 
the 
design  and  development  of  PILOT  has  been 
devoted 
the  problem  of  making  changes. 
One  of 
a d v i s i n g. 

to 
the  r e s u l ts 

the  concept  of 

the  r e s u lt 

t h at 
For 

in 

is 

Since 

it  a l l o ws 

i n t e r f a ce  between 

t h e m s e l v e s,  which 

l ed  e d i t i n g. 
t h at 

t he 
in  a  program,  as  opposea 
f u n c t i o ns 

The  o p e r a t i on  of  a d v i s i ng  c o n s i s ts  or 
i n d i v i d u al 
to  mod­
is 
The  advantage  of  a d v i s i ng 
the  user 

m o d i f y i ng 
f u n c t i o ns 
the 
i f y i ng 
c a l
is 
ions  of  h is  own 
as 
ions 
c o n t e n t s. 
s e lf  a  s m a ll  program,  and  m o d i f i c a t i o ns 
can  be 
to  operate  e i t h er 
b e f o re  or  a f t er 
would  be  r u n,  a d v i s i ng 
and  p o w e r f ul  concept. 

Since  each  m o d i f i c a t i on 

them  w i t h o ut  concern 

" b l a ck  b o x e s ,"  and 

( or  someone  e l s e ' s)  program 

to  make  m o d i f i c a t­

is  a  very  g e n e r al 

i n s e r t ed  so  as 

the  o r i g i n al 

t r e at  s e c t­

t h e ir 
is 

f u n c t i on 

f or 

to 

to 

it-

A d v i s i ng 

is  c a r r i ed  out 

in  LISP  by 

the  o r i g i n al 

f u n c t i on  d e f i n i t i on 

in 
f u n c t i on  d e f i n i t i on 

c r e a t i ng  a  new 
which 
the  " p i e c es 
embedded,  and  surrounded  by 
T h is  procedure 
of  a d v i c e ." 
is  completely 
g e n e r a l: 
f u n c t i on  b e i ng  advised  can  be 
a r b i t r a r i ly 
s i m p l e,  compiled  or 
f u n c t i on  or  one  of 

l a r ge  or  s m a l l,  complex  or 

i n t e r p r e t e d,  a  system 

the  u s e r 's  own. 

the 

is 

The 

i n d i v i d u al  pieces  of  a d v i ce  are 
to  are 

they 

Thus  a  p i e ce  of  a d­
t he  value  of  some 

the  o t h er  extreme, 

request 

i n c l u d i ng  perhaps 

each  LISP  e x p r e s s i o n s,  and  so 
c o m p l e t e ly  g e n e r a l. 
v i ce  may  simply  change 
v a r i a b l e,  o r,  at 
a 
c a l l i ng 
s i v e l y. 
bypass 

l e n g t hy  computation 

the  e n t i re  advised 

f u n c t i on  r e c u r­
the  e n t i re  advised 
Advice  can  a l so  be  g i v en  so  as  to 

f u n c t i o n. 

For  example, 
the  problem 

p a i r ed 
by  g i v i ng  the  a p p r o p r i a te  advice 
i n s t e ad  of  e d i t i ng  ALPHA. 
c a l l ed 
probably  want 

the  user  c o u ld  have  r e(cid:173)
In  ALPHA  shown  e a r l i er 
to  RPLACA 
Since  RPLACA 
is 
the  user  would 

to  advise  RPLACA 

f u n c t i o n s, 

IN  ALPHA: 

from  many 

ADVISE((RPLACA  IN  ALPHA) 

(SETQ  U  Y ) ) )) 

(COND  ((NULL  U) 

As  w i th  b r e a k, 
to  RPLACA 
c a ll 

t h is  would  only  modify 
from  w i t h in  ALPHA. 

the 

This  o p e r a t i on  demonstrates 

the  advan(cid:173)

to 

to  u s i ng 

It  a l l o ws 

In  a d d i t i on 

f or  c o r(cid:173)
the  user  can  p e r f o rm  modi(cid:173)
the  sake  of  e x p e r i m e n t a t i o n, 

tage  of  a d v i s i n g. 
the  user 
make  o n l i ne  m o d i f i c a t i o ns  q u i c k ly  and 
s i m p l y. 
r e c t i ng  bugs, 
f i c a t i o ns 
f or 
undo 
t ry 
out  o t h er  c o n f i g u r a t i o n s,  e t c .,  a ll  w i t h(cid:173)
out  d i s r u p t i on 
to  h is  h i g h - l e v e l,  problem 
o r i e n t ed 
u s u a l ly 
r e q u i r i ng  a 

t r a in  of 
f o l l o ws  when 

l e n g t hy  sequence  of  o p e r a t i o n s. 

implementing  changes 

the  m o d i f i c a t i o ns 

Such  d i s r u p t i on 

if  he  w i s h e s, 

t h o u g h t. 

it 

Note 

t h at  a d v i s i ng  complements 

r a t h er 

stages  of  de(cid:173)

the  user 
l o c al  phenomena 

In  the  e a r ly 
is  p r i m a r i ly  a t t e n d i ng 
in  h is  program,  and 

than  competes  w i th  e d i t i ng  as  a  way  of 
making  changes. 
b u g g i n g, 
to 
thus  may 
by  e d i t i n g. 
in 
h is  program  more 
p i e ce  does, 
r a t h er 
and  here  a d v i s i ng 
use 

terms  of  what  each 
than  how 
i t, 
t o ol  he  wants 
is 

the 
f or  making  changes. 

it  n a t u r al 
In 

to  make  changes 

l a t er  s t a g e s,  he  considers 

it  does 

f i nd 

to 

A d m i t t e d ly 

t h is  p a r t i c u l ar  p i e ce  of 
to  have  some 

the  user 

a d v i s i ng  r e q u i r es 
d e t a i l ed  knowledge  of 
PRETTYPRINT.  However, 
is 
e a s i ly  e f f e c t e d,  even  w i th  system 
where  changes  were  not  a n t i c i p a t e d. 

t h at  by  u s i ng  ADVISE,  changes  can  be 

the  workings  of 

t he 

i m p o r t a nt  p o i nt 

f u n c t i o ns 

C o n v e r s a t i o n al 

I n p ut 

PILOT"  can  be  vTewed  as  an 

i n t e r f a ce 

between  the  user  and  h is  programs. 
f o l l o w i ng  somewhat  over  s i m p l i f i ed  diagram 
i l l u s t r a t es 
f i g u r a t i o n: 

the  user-PILOT-program  con(cid:173)

The 

Most  of  the  e f f o rt 

in  PILOT  is  con(cid:173)

centrated  at  i n t e r f a ce  2  and  3.  However, 
in  order  to  be  r e a l ly  e f f e c t i v e,  a  pro(cid:173)
gramming  laboratory  should  not  only  pro(cid:173)
vide  the  means  whereby  changes  can  be  e f(cid:173)
fected  immediately,  but  also  in  a  way  that 
seems  n a t u r al  to  the  user.  Accordingly, 
we  have  been  experimenting  w i th  an  English-
to-LISP  t r a n s l a t i ng  program  that  operates 
at 
i n t e r f a ce  1,  and  translates  the  user's 
requests 
LISP  computation.  The  f o l l o w i ng  dialogue 
gives 
obtained  w i th  t h is  program.  User  input 
preceded  by  " > ." 

to  PITOT  i n to  the  appropriate 

interactions 
is 

f l a v or  of  user-PILOT 

the 

A d v i s i ng  as  a  Tool 

f or  M o d i f y i ng 
A d v i s i ng  not  o n ly  p r o v i d es 

the  System 
the  user 
f or  making  changes 

the-

t o ol 

w i th  a  convenient 
in  h is  own  programs,  but  a l so  w i th 
means 
f or  e x p e r i m e n t i ng  w i th  and 
the  system  to  h is  own  p a r t i c u l ar 
For  example,  suppose  a  user  wished 
i fy  PRETTYPRINT 
to  p r i nt  comments  along 
the  r i g ht  had  side  of  t he  page,  where  a 
comment  was 
to  be 
i on  b e g i n n i ng  w i th 
t h at  SUPERPRINT 
is 
the  work"  of  p r e t t y p r i n t i n g,  he  could 

I n d i c a t ed  as  an  e x p r e s s(cid:173)
the  atom  *. 
the 

t a i l o r i ng 
t a s t e s. 

Knowing 
t h at 

f u n c t i on 

to  n o d-

"does 

ADVISE(SUPERPRINT  (COND  ((EQ  (CAR  E) 

(QUOTE  * )) 

(RETURN  (COMMENT  E ) ) ) )) 

and  t h en  d e f i ne 
the  a p p r o p r i a te 

t he 
f o r m a t t i n g. 

(*) 

f u n c t i on  COMMENT  to  do 

f e a t u re 

The  comment 

However, 
in  p r e c i s e ly 

TD 
our  system. 
t r o d u c ed 
to  e v a l u a te 
p r o v i d es  system  designers  w i th  a  q u i ck 
means 

it  was 
t h is  way, 

i ts  u s e f u l n e s s. 

t r y i ng  out  new 

is  now  a  p a rt  of 
i n(cid:173)

f e a t u r e s. 

i n i t i a l ly 

A d v i s i ng 

in  o r d er 

f or 

thus 

I  UNDERSTAND. 
>CONTlNUi-: 

PROGRESS 

- 7-

the  p a rt  about  outnumbering. 

t h is 

t h is 

to  advise 
the  statement 

The  user 
f u n c t i on  PROGRESS  w i th 

i n s t r u c ts  PILOT 

to  e x p l a in 

to  LISP,  so 

then  attempts 

f a i r ly  e x t e n s i ve 

to  PILOT'S  already 

f or  c o n v e r t i ng  E n g l i sh  s t a t e­

This  statement  w i ll  cause  an  ad­

t h at  PILOT  w i ll  be  able 
type  en­
f u t u r e.  However,  PILOT 

the 
beginning  "TELL  PROGRESS:.11  PILOT  r e­
cognizes 
form  of  r e q u e s t,  but  does 
hot  understand 
The  user 
w i th  t he  i n p ut  b e g i n n i ng  THE  X  OUTNUMBER 
THE  Y. 
d i t i on 
c a p a b i l i ty 
ments 
to  understand  expressions  of 
countered 
cannot 
X  IN  Z 
rogates 
t h is  p o i n t, 
NUMBER,  and  then  e x p l a i ns 
phrase 
responds 
i n s t r u c ts  PILOT 
then 
it  was  d o i n g,  namely 
p l a n a t i on  of  OUTNUMBER.  When  t h is 
p l e t e d, 
t i n ue  w i th 
PILOT  now  s u c c e s s f u l ly  completes. 

i n t e r p r et  the  phrase  THE  NUMBER  OP 
in  t h is  e x p l a n a t i o n,  and  so 
the  user  at 

The  user 
to  continue  w i th  what 
t r a n s l a t i ng 

the  o r i g i n al  r e q u e s t,  which 

the  user  d e f i n es  a  new 

i n s t r u c ts  PILOT 

in  terms  of  t h is 

" u n d e r s t a n d s ." 

lower  l e v e l. 

troublesome 

i n t e r­
At 

f u n c t i o n. 

the  user 

is  com­

to  con­

the  ex­

in  the 

PILOT 

t h at 

t h is 

t h is 

the 

it 

f u n c t i on 

The  c u r r e nt  E n g l i s h - t o - L I SP 

t r a n s l a t or 

in  the  BBN  LISP  system. 

l a r ge  assortment  of  u s e f u l, 
t r a n s f o r m a t i o n al  r u l es  w r i t t en 

if 
in 
[ 1 0 ],  a  s t r i ng  processing  language 

contains  a 
ad  hoc, 
FLIP, 
embedded 
of  FLIP  r u l es  can  be  e a s i ly  expanded  or 
m o d i f i e d. 
t r a n s f o r m i ng 
above  r e s u l t ed 
expressions  of  the 
form  THE  X  OUTNUMBER 
THE  Y  ON  Z  and  f or  THE  NUMBER  OF  X  IN  Z 
being  added 

For  example, 
in  r u l es 

the  dialogue  shown 
f or 

t r a n s l a t or 

The  set 

the 

to 

In  a d d i t i on 

to 

the  FLIP  p o r t i on  of 

the 

there 

is  a  p o s t­

i n t e r m i n g l i ng  of 

t r a n s l a t i ng  program, 
processor  which  allows 
LISP  expressions  w i th  the  E n g l i s h,  as  w e ll 
as  a  s o rt  of  p i d g i n - L I SP  which 
l i ke 
LISP  w i th  the  parentheses  removed. 
t r a n s l a t or  also  c o n t a i ns  s p e c i a l i ze 
mation 
and-or  clauses. 
expressions  w i ll  be 
i n to 

f or  d e a l i ng  w i th  q u a n t i f i e rs  and 

t r a n s l a t ed  c o r r e c t ly 

the  e q u i v a l e nt  LISP 

For  example, 

The 
i n f o r­

forms. 

looks 

the 

f o l l o w i ng 

NO  MEMBER  OF  X  IS  ATOMIC  AND  NOT  NULL 
THE  FIRST  ELEMENT  OF  X  IS  GREATER  THAN  THE 

SECOND  AND  NOT  LESS  THAN  THE  THIRD 
THE  FIRST  ELEMENT  OF  SOME  MEMBER  OF  X  IS 

A  NUMBER  THAT  IS  GREATER  THAN  THE 
SECOND  ELEMENT 

The 

t a in  c o n t e x t u al 
was 
the 
f u n c t i on 

t r a n s l a t or  a l so  "remembers"  c e r­
i n f o r m a t i on  such  as  what 

l a st  o p e r a t i on  r e q u e s t e d,  what 
it 

r e f e r r ed 

to  e t c. 

For  example: 

>TELL  FOO: 

IF  ITS  FIRST  ARGUMENT  IS  ATOMIC 

THEN  RETURN  I T, 

FOO 

>WHAT  IS  ITS  SECOND  ARGUMENT? 
Y 

We  are  not  a s s e r t i ng  t h at  E n g l i sh 

is 

However, 

a  good  or  even  d e s i r a b le  programming 
language. 
if 
i ng  about  h is  programs 
p r o v i d i ng  him 
requests 
concentrate  more 
hand. 

in  E n g l i sh  w i ll  a l l ow  him 

the  user 
is 
in  E n g l i s h, 

f u l ly  on 

f a c i l i ty 

the 

to 

the  problem  at 

t h i n k­
then 

f or  expressing 

Improving  PILOT 

"PILOT 

is 

the  r e s u lt  of  an  e v o l u t i o n­

two 

t e r m i n a t e d, 

t h at 

than 

is  no  reason  to 

t h e re 
process  has 

ary  process  extending  over  more 
y e a r s.  However, 
assume 
t h is 
nor  t h at  PILOT  has  reached  some  s o rt  of 
u l t i m a te  s t a t e ." 
[ 9]  This  statement  was 
w r i t t en 
ago,  and 
goals  e s t a b l i s h ed 
a d d i t i o ns 
our  present  system. 
s t i ll 

improvements  and 
to  PILOT  have  been  r e a l i z ed 
the  statement 

in  the  elapsed 

in  my  Ph.D. 

t h r ee  years 

t r u e,  and 

t h e s is 

But 

f or 

t i m e,  many  of  the 

the  process  s t i ll  c o n t i n u e s. 

in 
is 

is 

to 

t h at 

This 

i n t e r e st 

to  express 

them,  even 

the  changes 

the  computer 

the  computer 

i ts  o u t p u t,  or 

to  perform  in  a 

One  area  of  c u r r e nt 

t h at 
Programming 
to  a l l ow 
the  o p e r a t i o ns 

in  a  data  s t r u c t u r e. 

the  program  to  accomplish. 

tasks  and  produce  programs 
if  only  e f f e c t i ve 
t a s k s,  would 

of  p r o g r a m - w r i t i ng  programs. 
languages  a r e . c u r r e n t ly  designed 
the  programmer 
he  wants 
simple  and  concise 
f a s h i o n.  However,  o f t en 
the  programmer  many  not  know  p r e c i s e ly  what 
o p e r a t i on  he  wants 
to  p e r f o r m, 
although  he  may  have  a  c l e ar  idea  of  what 
he  wants 
That 
i s,  he  may  be  able  to  g i ve  a  d e s c r i p t i on 
it  should 
of 
is  not 
make 
the  programmer  could  not  con­
say 
s t r u ct 
the  program.  However,  a  system 
which  could  accept  more  g o a l - o r i e n t ed 
d e s c r i p t i o ns  of 
to  accomplish 
f or  s i m p l e,  s u b r o u t i n e - l e v el 
i ts  users 
f u r t h er 
f r ee 
Such  a  system  would  r e q u i re 
o p e r a t i o n s. 
a 
f a ir  degree  of  problem  s o l v i ng  c a p a b i l­
i t y,  and  should  have  a  s u f f i c i e n t ly  r i ch 
s t o re  of 
it 
and  programs 
s i m i l a r i t i es 
It  should  be  able 
to  adapt  p r e v i o u s ly  w r i t t en  or  c o n s t r u c t­
ed  programs 
we  are 
can  handle  more  of 
programming, 
f r ee 
to  concern  h i m s e lf  more  w i th 
aspects  of  the  problem. 
This 
basic  philosophy  of 
l et 
the  computer  do 
of  PILOT 
it  demonstrates 
f e a s a b i l i ty  and  d e s i r a b i l i ty  of 
approach. 
in 
PILOT  c l e a r ly  shows 
to  get  computers 
cooperate  w i t h, 

i n f o r m a t i on  about  programming 
to  determine 

the  PILOT  system: 
i t. 

to  p a r t i c i p a te 
research  e f f o r ts 

to  c o n s t r u ct  a  system  t h at 

the  r o u t i ne  aspects  of 

the  human 
the  c r e a t i ve 

is  p o s s i b le 
i n,  and 

to  enable 
in 

The  s i g n i f i c a n ce 

t h is 
ths 
f o r m, 

In  other  words, 

to  a  new  t a s k. 

f or  h i g h - l e v el 

i ts  c u r r e nt 

in  order 

t a s k s. 

t r y i ng 

Even 

t h at 

t h at 

the 

to 

in 

is 

is 

it 

- 8-

programming 
Is  now  being  done. 

to  a  much  g r e a t er  e x t e nt 

than 

References 

1.  Bobrow,  D.G.,  Murphy,  D.L.  and 

T e l t e l m a n,  W.  The  BBN  LISP  System, 
A p r il  1969. 

2.  Bobrow,  D.G.  and  T e l t e l m a n,  W. 

Debugging 
LISP,  November  1967. 
and  Newman  Inc 

In  an  On-Line 

I n t e r a c t i ve 
B o lt  Beranek 

3.  Engelman,  C.  "MATHLAB  68" 

68,  pp.  B91-B95. 

IFIP  Congress 

4. 

Johnson,  T . E.  "Sketchpad  I I I:  A 
Computer  Program 
Dimensions,"  Proc.  SJCC,  Spartan  Press, 
B a l t i m o r e,  Maryland.  1963 

f or  Drawing 

In  Three 

5.  M a r t i n,  W.A.  Symbolic  Mathematical 
L a b o r a t o r y,  D o c t o r al  D i s s e r t a t i o n, 
MIT,  Cambridge,  Massachusetts, 
January  1967. 
P r o j e ct  MAC,  MIT) 

( a l so  Report  TM-36, 

6.  Maurer,  W.D. 

"Computer  Experiments 
F i n i te  A l g e b r a ,"  Comm.  ACM,  V o l.  9, 
No.  8,  August  1966,  pp.  589-603. 

in 

7.  R e i n t j e s,  J . F.  and  Dertouzos,  M.L. 

"Computer-Aided  Design  of  E l e c t r o n ic 
C i r c u i t s ,"  presented  at  WINCON  C o n f e r ., 
Los  Angeles,  C a l i f o r n i a,  February  2 - 5, 
1966. 

8.  S u t h e r l a n d, 

I . E.  "SKETCHPAD:  A  Man-

Machine  G r a p h i c al  Communication  System," 
Proc.  SJ"CC,  Spartan  Press,  B a l t i m o r e, 
Maryland.  1963 

9. 

T e l t e l m a n,  W.  PILOT:  A  Step  Toward 
Man-Computer  Symbiosis,  D o c t o r al 
D i s s e r t a t i o n,  MIT,  Cambridge,  Massachu­
s e t t s,  June  1966. 
P r o j e ct  MAC,  MIT) 

( a l so  Report  TR-32, 

10.  T e l t e l m a n,  W.  Design  and  Implementation 

of  FLIP,  A  L I sP  Format  D i r e c t ed  L i sT 
Processor,  BBN  Report  No.  1495,  J u ly 

-8 a-

