Conﬂict Directed Backjumping for Max-CSPs∗

Roie Zivan and Amnon Meisels,
Department of Computer Science,
Ben-Gurion University of the Negev,

Beer-Sheva, 84-105, Israel

Abstract

Max-CSPs are Constraint Optimization Problems
that are commonly solved using a Branch and
Bound algorithm. The B&B algorithm was en-
hanced by consistency maintenance procedures
[Wallace and Freuder, 1993; Larrosa and Meseguer,
1996; Larrosa et al., 1999; Larrosa and Schiex,
2003; 2004]. All these algorithms traverse the
search space in a chronological order and gain their
efﬁciency from the quality of the consistency main-
tenance procedure.
The present study introduces Conﬂict-directed
Backjumping (CBJ) for Branch and Bound algo-
rithms. The proposed algorithm maintains Con-
ﬂict Sets which include only assignments whose re-
placement can lead to a better solution. The algo-
rithm backtracks according to these sets. CBJ can
be added to all classes of the Branch and Bound
algorithm,
in particular to versions of Branch
& Bound that use advanced maintenance proce-
dures of local consistency levels, N C∗, AC∗ and
F DAC [Larrosa and Schiex, 2003; 2004]. The
experimental evaluation of B&B CBJ on random
Max-CSPs shows that the performance of all algo-
rithms is improved both in the number of assign-
ments and in the time for completion.

Introduction

1
In standard CSPs, when the algorithm detects that a solution
to a given problem does not exist, the algorithm reports it and
the search is terminated. In many cases, although a solution
does not exist we wish to produce the best complete assign-
ment, i.e. the assignment to the problem which includes the
smallest number of conﬂicts. Such problems form the scope
of Max-CSPs [Larrosa and Meseguer, 1996]. Max-CSPs are
a special case of the more general Weighted CSPs (WC-
SPs) [Larrosa and Schiex, 2004] in which each constraint is
assigned a weight which deﬁnes its cost if it is violated by a
solution. The cost of a solution is the sum of the weights of all

∗

The research was supported by the Lynn and William Frankel
Center for Computer Science, and by the Paul Ivanier Center for
Robotics.

constraints violated by the solution (in Max-CSPs all weights
are equal to 1). The requirement in solving WCSPs is to ﬁnd
the minimal cost (optimal) solution. WCSPs and Max-CSPs
are therefore termed Constraint Optimization Problems.

In this paper we focus for simplicity on Max-CSPs. Max-
CSP is an optimization problem with a search tree of bounded
depth. Like other such optimization problems, the common
choice for solving it is to use a Branch and Bound algo-
rithm [Dechter, 2003]. In the last decade, various algorithms
were developed for Max and Weighted CSPs [Wallace and
Freuder, 1993; Larrosa and Meseguer, 1996; Larrosa et al.,
1999; Larrosa and Schiex, 2004]. All of these algorithms
are based on standard backtracking and gain their efﬁciency
from the quality of the consistency maintenance procedure
they use. In [Larrosa and Schiex, 2004], the authors present
maintenance procedures of local consistency levels, NC* and
AC*, which improve on former versions of Node-consistency
and Arc-consistency. An improved result for Max-CSPs was
presented in [Larrosa and Schiex, 2003]. This result was
achieved by enforcing extended consistency which generates
larger lower bounds.

The present paper improves on previous results by adding
Conﬂict-directed Backjumping (CBJ) to the B&B algo-
rithms presented in [Larrosa and Schiex, 2004] and in [Lar-
rosa and Schiex, 2003]. Conﬂict-directed Backjumping
(CBJ) [Prosser, 1993] is a method which is known to improve
standard CSP algorithms [Dechter, 2003; Ginsberg, 1993;
Kondrak and van Beek, 1997; Chen and van Beek, 2001]. In
order to perform standard CBJ, the algorithm stores for each
variable the set of assignments which caused the removal of
values from its domain. When a domain empties, the algo-
rithm backtracks to the last assignment in the corresponding
conﬂict set [Chen and van Beek, 2001; Dechter, 2003].

One previous attempt at conﬂict directed B&B used rea-
soning about conﬂicts during each forward search step [Li
and Williams, 2005]. Conﬂicts were used in order to guide
the forward search away from infeasible and sub-optimal
states. This is in contrast to the use of conﬂict reasoning for
backjumping proposed in the present paper. Another attempt
to combine conﬂict directed (intelligent) backtracking with
B&B was reported for the Open-Shop problem [Gu´eret et
al., 2000]. The algorithm proposed in [Gu´eret et al., 2000]
is speciﬁc to the problem. Similarly to CBJ for standard
CSP s, explanations for the removal of values from domains

IJCAI-07

198

are recorded and used for resolving intelligently the backtrack
destination.

Performing back-jumping for Max-CSPs is more compli-
cated than for standard CSPs. In order to generate a consistent
conﬂict set, all conﬂicts that have contributed to the current
lower bound must be taken into consideration. Furthermore,
additional conﬂicts with unassigned values of equal or higher
costs must be added to the conﬂict set in order to achieve
completeness.

The required information needed for the detection of the
culprit variables that will be the targets for the algorithm
backjumps is polynomial. The maintenance of the data struc-
tures does not require additional iterations of the algorithm.
The results presented in this paper show that as reported
for standard CSP s by [Chen and van Beek, 2001], the im-
provement in run-time is dependent on the degree of the con-
sistency maintenance procedure. However, the factor of im-
provement in the number of assignments when using CBJ is
consistent and large.

Max-CSPs are presented in Section 2. A description of the
standard B&B algorithm along with the maintenance proce-
dures N C∗, AC∗ and F DAC is presented in Section 3. Sec-
tion 4 presents the CBJ algorithm for B&B with N C∗, AC∗
and F DAC. An extensive experimental evaluation, of the
contribution of conﬂict directed backjumping to B&B with
N C∗, AC∗ and F DAC, is presented in Section 5. Our con-
clusions are in Section 6.

2 Max Constraint Satisfaction Problems
A Max - Constraint Satisfaction Problem (Max-CSP) is
composed,
like standard CSP, of a set of n variables
X1, X2, ..., Xn. Each variable can be assigned a single
value from a discrete ﬁnite domain {D1, D2, ..., Dn} respec-
tively. Similarly to former studies of Max-CSPs [Larrosa and
Meseguer, 1996; Larrosa et al., 1999; Larrosa and Schiex,
2003], we assume that all constraints are binary. A binary
constraint Rij between any two variables Xj and Xi is a sub-
set of the Cartesian Product of their domains; Rij ⊆ Dj×Di.
An assignment (or a label) is a pair (cid:4)var, val(cid:5), where var
is a variable and val is a value from var’s domain that is
assigned to it. A partial solution is a set of assignments of
values to variables. The cost of a partial solution in a Max-
CSP is the number of constraints violated by it (conﬂicts).
An optimal solution to a Max-CSP is a partial solution that
includes all variables and which includes a minimal number
of unsatisﬁed constraints, i.e. a solution with a minimal cost.

3 The Branch and Bound algorithm
Optimization problems with a ﬁnite search-space are often
solved by a Branch and Bound (B&B) algorithm. Both
Weighted CSPs and Max-CSPs fall into this category.

The B&B algorithm is presented in Figure 1. The gen-
eral structure of the algorithm is different than its recursive
presentation in [Larrosa and Schiex, 2004].
In order to be
able to perform backjumping, we need an iterative formula-
tion (cf. [Prosser, 1993]). We use an array of states which
hold for each successful assignment the state of the algorithm
before it was performed. After each backtrack the current

B&B
current state ← initial state;
1.
2. CP S ← empty assignment;
i ← 0;
3.
4. while(i ≥ 0)
if(i = n)
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.

upper bound ← lower bound;
i ← i − 1;
temp state ← current state;
update state(temp state, i, a);
if(local consistent(temp state))
states[i] ← current state;
current state ← temp state;
i ← i + 1;

else foreach (a ∈ Di)

i ← ﬁnd culprit variable();
current state ← states[i];
update state(temp state, i, val)
17. add (i, val) to temp state.CP S;
18. temp state.CP S.cost ← temp state.CP S.cost + cost(i, val);
19. for j ← (i + 1) to (n − 1)
20.
21.
22.

foreach (a ∈ temp state.Dj)
if(conﬂicts((cid:5)i, val(cid:6),(cid:5)j, a(cid:6)))
cost(a, i) ← cost(a, i) + 1;

Figure 1: Standard B&B algorithm

state of the algorithm will be set to the state which was stored
before the culprit assignment was performed. The space com-
plexity stays the same as in the recursive procedure case, i.e.
larger than a single state by a factor of n. For simplicity of
presentation we use a ﬁxed order of variables and the function
ﬁnd culprit variable simply returns i − 1.
The naive and exhaustive B&B algorithm can be improved
by increasing the level of the maintained local consistency.
As a result, the value of the lower bound of a current partial
solution is increased. After each assignment, the algorithm
performs a consistency maintenance procedure that updates
the costs of potential future assignments and increases its
chance to detect early a need to backtrack. Three of the most
successful consistency check functions are described next.
3.1 Node Consistency and NC*
Node Consistency is a very standard consistency mainte-
nance method (analogous to Forward-checking in standard
CSP s) [Dechter, 2003]. The main idea is to ensure that in the
domains of each of the unassigned variables there is at least
one value which is consistent with the current partial solution
(CP S). For each value in a domain of an unassigned vari-
able, one must determine whether assigning it will increase
the lower bound beyond the limit of the upper bound. To
this end, the algorithm maintains for every value a cost which
is its number of conﬂicts with assignments in the CP S.
After each assignment, the costs of all values in domains
of unassigned variables are updated. When the sum of a
value’s cost and the cost of the CP S is higher or equal to
the upper bound, the value is eliminated from the variable’s
domain. An empty domain triggers a backtrack.

The down side of this method in Max-CSPs is that the
number of conﬂicts counted and stored as the value’s cost,
does not contribute to the global lower bound and it affects
the search only if it exceeds the upper bound. In [Larrosa

IJCAI-07

199

a.cost ← a.cost − cj;

for j ← (i + 1) to (n − 1)
cj ← min cost(Dj);
foreach (a ∈ Dj)
Cφ ← Cφ + cj;

NC*(i)
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
11. return (lower bound < upper bound);
Figure 2: Standard NC*

lower bound ← CP S.cost + Cφ;
for j ← (i + 1) to (n − 1)

foreach (a ∈ Dj)

Dj ← Dj \ a;

if(a.cost + lower bound ≥ upper bound)

and Schiex, 2004], the authors suggest an improved version
of Node Consistency they term NC*. In NC* the algorithm
maintains a global cost Cφ which is initially zero. After every
assignment, all costs of all values are updated as in standard
N C. Then, for each variable, the minimal cost of all values in
its domain, ci, is added to Cφ and all value costs are decreased
by ci. This means that after the method is completed in every
step, the domain of every unassigned variable includes one
value whose cost is zero. The global lower bound is calcu-
lated as the sum of the CP S’s cost and Cφ.

Any value whose lower bound,

the sum of the
CP S’s cost, Cφ and its own cost, exceeds the limit of the
upper bound, is removed from the variable’s domain as in
standard N C [Larrosa and Schiex, 2004].
The N C∗ consistency maintenance function is presented

i.e.

in Figure 2.

3.2 Arc Consistency and AC*
A stronger consistency maintenance procedure which is
known to be effective for CSP s is Arc Consistency
(AC) [Bessiere and Regin, 1995].

In Max-CSPs, a form of Arc-Consistency is used to project
costs of conﬂicts between unassigned variables [Larrosa and
Meseguer, 1996; Larrosa et al., 1999; Larrosa and Schiex,
2003; 2004]. AC∗ combines the advantages of AC and
N C∗. After performing AC, the updated cost of the values
are used by the N C∗ procedure to increase the global cost
Cφ. Values are removed as in N C∗ and their removal initi-
ates the rechecking of AC. The system is said to be AC∗ if
it is both AC and N C∗ (i.e. each domain has a value with a
zero cost) [Larrosa and Schiex, 2004].

3.3 Full Directed Arc Consistency
The F DAC consistency method enforces a stronger ver-
sion of Arc-Consistency than AC∗ (cf. [Larrosa and Schiex,
2003]). Consider a CSP with an order on its unassigned vari-
ables. If for each value valik of variable Vi, in every domain
of an unassigned variable Vj which is placed after Vi in the
order, a value valjs has a cost of zero and there is no binary
constraint between valik and valjs, we say that the CSP is in
a DAC state. A CSP is in a F DAC state if it is both DAC
and AC∗. 1

1The code for the AC∗ and F DAC procedures is not used in this
paper therefore the reader is referred to [Larrosa and Schiex, 2003;
2004].

For a detailed description of F DAC and demonstrations
of how F DAC increases the lower bound, the reader is re-
ferred to [Larrosa and Schiex, 2003].

4 Branch and Bound with CBJ
The use of Backjumping in standard CSP search is known
to improve the run-time performance of the search by a
large factor [Prosser, 1993; Kondrak and van Beek, 1997;
Dechter and Frost, 2002; Chen and van Beek, 2001]. Con-
ﬂict directed Backjumping (CBJ) maintains a set of conﬂicts
for each variable, which includes the assignments that caused
a removal of a value from the variable’s domain. When a
backtrack operation is performed, the variable that is selected
as the target, is the last variable in the conﬂict set of the back-
tracking variable.
In order to keep the algorithm complete
during backjumping, the conﬂict set of the target variable, is
updated with the union of its conﬂict set and the conﬂict set
of the backtracking variable [Prosser, 1993].

The data structure of conﬂict sets which was described
above for CBJ on standard CSP s can be used for the B&B
algorithm for solving Max-CSPs. However, additional as-
pects must be taken into consideration for the case of Max-
CSPs.

(GCS)

In the description of the creation and maintenance of a con-
sistent conﬂict set in a B&B algorithm the following deﬁni-
tions are used:
Deﬁnition 1 A global conf lict set
is the set
of assignments whose replacement can decrease the
lower bound.
Deﬁnition 2 The current cost of a variable is the cost of its
assigned value, in the case of an assigned variable, and the
minimal cost of a value in its current domain in the case of
an unassigned variable.
Deﬁnition 3 A conf lict list of value vij ∈ Di,
is
the ordered list of assignments of variables
in the
current partial solution, which were assigned before vari-
able i, and which conﬂict with vij .
Deﬁnition 4 The conf lict set of variable Xi with cost ci is
the union of the ﬁrst (most recent) ci assignments in each of
the conf lict lists of all values of Xi (if the conf lict list of
a value is shorter than ci then all its assignments are included
in the variables’ conf lict set).

In the case of simple B&B, the global conf lict set is the
union of all the conf lict sets of all assigned variables. Val-
ues are always assigned using the min-cost heuristic i.e. the
next value to be assigned is the value with the smallest cost
in the variable’s current domain. Before assigning a variable
the cost of each value is calculated by counting the number of
conﬂicts it has with the current partial solution. Next, the
variable’s current cost is determined to be the lowest cost
among the values in its current domain. As a result, the
variable’s conf lict set is generated. The reason for the need
to add the conﬂicts of all values to a variable’s conf lict set
and not just the conﬂicts of the assigned value, is that all the
possibilities for decreasing the minimal number of conﬂicts
of any of the variables’ values must be explored. Therefore,

IJCAI-07

200

add (i, val) to CP S;
foreach(a ∈ Di)
for 1 to val.cost

update state(i, val)
1.
2. CP S.cost ← CP S.cost + cost(i, val);
3.
4.
5.
6.
7.
8.
9.
10.
11.

for j ← (i + 1) to (n − 1)
foreach (a ∈ Dj)
if(conﬂicts((cid:5)i, val(cid:6),(cid:5)j, a(cid:6))
a.cost ← a.cost + 1;
a.conf lict list ← a.conf lict list ∪ (i, val);

GCS ← GCS ∪ f irst element in a.conf lict list;
remove f irst element from a.conf lict list

ﬁnd culprit variable(i)
12. if(GCS = φ)
return −1;
13.
14. culprit ← latest assignment in GCS;
15. GCS ← GCS \ culprit;
16. return culprit;
Figure 3: The changes in B&B required for backjumping

Figure 4: A conﬂict set of an assigned variable

the latest assignment that can be replaced, and possibly de-
crease the cost of one of the variables values to be smaller
than the variable’s current cost must be considered.

Figure 3 presents the changes needed for adding CBJ to
standard B&B. After a successful assignment is added to the
CP S, its cost is added to the cost of the CP S (lines 1,2).
Then, the added cost, val.cost is used to determine which as-
signments are added to the global conﬂict set (GCS). For
each of the values in the domain of variable i,
the ﬁrst
val.cost assignments are removed and added to the GCS
(lines 3-6). As a result, when performing a backjump, all that
is left for function ﬁnd culprit variable to do is to return the
latest assignment (the one with the highest variable index) in
the GCS (lines 14-16). In case the GCS is empty, function
ﬁnd culprit variable returns −1 and as a result, terminates
the algorithm (lines 12,13).

The space complexity of the overhead needed to perform
CBJ in B&B is simple to bound from above. For a CSP with
n variables and d values in each domain, the worst case is that
for each value the algorithm holds a list of O(n) assignments.
This bounds the space complexity of the algorithm’s state by
O(n2d). Since we hold up to n states, the overall space used
is bounded by O(n3d).

Figure 4 presents the state of three variables which are in-
cluded in the current partial solution. Variables X1, X2 and
X3 were assigned values v1, v2 and v1 respectively. All costs
of all values of variable X3 are 1. The conf lict set of vari-
able X3 includes the assignments of X1 and X2 even though
its assigned value is not in conﬂict with the assignment of X2.

Figure 5: A conﬂict set of an unassigned variable

However, replacing the current assignment of X2 can lower
the cost of value v2 of variable X3.
4.1 Node Consistency with CBJ
In order to perform CBJ in a B&B algorithm that uses node
consistency maintenance, the conf lict sets of unassigned
variables must be maintained. To achieve this goal, for every
value of a future variable a conf lict list is initialized and
maintained. The conf lict list includes all the assignments
in the CP S which conﬂict with the corresponding value. The
length of the conf lict list is equal to the cost of the value.
Whenever N C∗ adds the cost ci of the value with minimal
cost in the domain of Xi to the global cost Cφ, the ﬁrst ci
assignments in each of the conf lict lists of Xi’s values are
added to the global conﬂict set and removed from the value’s
conf lict lists. This includes all the values of Xi including
the values removed from its domain. Backtracking to the head
of their list can cause the return of removed values to the vari-
ables current domain. This means that after each run of the
N C∗ procedure, the global conﬂict set includes the union of
the conﬂict sets of all assigned and unassigned variables.
Figure 5 presents the state of an unassigned variable Xi.
The CP S includes the assignments of three variables as in
the example in Figure 4. Values v1 and v3 of variable Xi
are both in conﬂict only with the assignment of variable X1.
Value v2 of Xi is in conﬂict with the assignments of X2 and
X3. Xi’s cost is 1 since that is the minimal cost of its values.
Its conﬂict set includes the assignments of X1 since it is the
ﬁrst in the conf lict list of v1 and v3, and X2 since it is the
ﬁrst in the conf lict list of v2. After the N C∗ procedure, Cφ
will be incremented by one and the assignments of X1 and
X2 will be added to the global conﬂict set.
Figure 6 presents the changes in N C∗ that are required for
performing CBJ. For each value whose cost is decreased by
the minimal cost of the variable, cj, the ﬁrst cj assignments
in its conf lict list are removed and added to the global con-
ﬂict set (lines 5-7). Note that the revised procedure uses the
conf lict lists of removed values as well as of remaining val-
ues. For each domain Di an additional set, ˆDi is maintained,
which holds the values that were removed from Di.
4.2 AC* and FDAC with CBJ
Adding CBJ to a B&B algorithm that
includes arc-
consistency is very similar to the case of node consistency.
Whenever a minimum cost of a future variable is added to the
global cost Cφ, the preﬁxes of all of its values’ conf lict lists
are added to the global conf lict set. However, in AC∗, costs

IJCAI-07

201

GCS ← GCS∪ f irst element in a.conf lict list;
remove f irst element from a.conf lict list;

Cφ ← Cφ + cj;

for j ← (i + 1) to (n − 1)
cj ← min cost(Dj);
foreach (a ∈ (Dj ∪ ˆDj))
a.cost ← a.cost − cj;
for 1 to cj

NC* BJ(i)
1.
2.
3.
4.
5.
6.
7.
8.
9.
10. for j ← (i + 1) to (n − 1)
11.
12.
13.
14.
15. return (lower bound < upper bound);

lower bound ← CP S.cost + Cφ;

if(a.cost + lower bound ≥ upper bound)

foreach (a ∈ Dj)
ˆDj ← ˆDj ∪ a;
Dj ← Dj \ a;
Figure 6: Changes in N C∗ that enable CBJ

of values can be incremented by conﬂicts with other unas-
signed values. As a result, the cost of a variable may be larger
than the length of its conf lict list. In order to ﬁnd the right
conﬂict set in this case one must keep in mind that except
for an empty CP S, a cost of a value vk of variable Xi is in-
creased due to arc-consistency only if there was a removal of
a value which is not in conﬂict with vk, in some other unas-
signed variable Xj. This means that a removal of the last
assignment in the CP S would return the value which is not
in conﬂict with vk, to the domain of Xj. Whenever a cost of
a value is raised by arc-consistency, the last assignment in the
CP S must be added to the end of the value’s conf lict list.
This addition restores the correlation between the length of
the conf lict list and the cost of the value. The variable’s
conf lict set and the global conﬂict set can be generated in
the same way as for N C∗.
Maintaining a consistent conf lict set in F DAC is some-
what similar to AC∗. Whenever a cost of a value is ex-
tended to a binary constraint, its cost is decreased and its
conf lict list is shortened. When a binary constraint is pro-
jected on a value’s cost, the cost is increased and the last
assignment in the CP S is added to its conf lict list. Cau-
tion must be taken when performing the assignment since the
constant change in the cost of values may interfere with the
min-cost order of selecting values. A simple way to avoid
this problem is to maintain for each value a different cost
which we term priority cost. The priority cost is updated
whenever the value’s cost is updated except for updates per-
formed by the DAC procedure. When we choose the next
value to be assigned we break ties of costs using the value of
the priority cost.

5 Experimental Evaluation
The common approach in evaluating the performance of CSP
algorithms is to measure time in logic steps to eliminate im-
plementation and technical parameters from affecting the re-
sults. Two measures of performance are used by the present
evaluation. The total number of assignments and cpu-time.
This is in accordance with former work on Max-CSP algo-
rithms [Larrosa and Schiex, 2003; 2004].

Experiments were conducted on random CSPs of n vari-
ables, k values in each domain, a constraint density of p1

Figure 7: Assignments and Run-time of NC* and NC* CBJ
(p1 = 0.4)

Figure 8: Assignments and Run-time of AC* and AC* CBJ
(p1 = 0.4)

and tightness p2 (which are commonly used in experimental
evaluations of Max-CSP algorithms [Larrosa and Meseguer,
1996; Larrosa et al., 1999; Larrosa and Schiex, 2004]). In
all of the experiments the Max-CSPs included 10 variables
(n = 10) and 10 values for each variable (k = 10). Two
values of constraint density p1 = 0.4 and p1 = 0.9 were
used to generate the Max-CSPs. The tightness value p2,
was varied between 0.7 and 0.98, since the hardest instances
of Max-CSPs are for high p2 [Larrosa and Meseguer, 1996;
Larrosa et al., 1999]. For each pair of ﬁxed density and tight-
ness (p1, p2), 50 different random problems were solved by
each algorithm and the results presented are an average of
these 50 runs.

In order to evaluate the contribution of CBJ to B&B algo-
rithms using consistency maintenance procedures, the B&B
algorithm with N C∗, AC∗ and F DAC was implemented.
The results presented show the performance of these algo-
rithms with and without CBJ. The N C∗ procedure was tested
only for low density problems p1 = 0.4, since it does not
complete in a reasonable time for p1 = 0.9.

The left hand side (LHS) of Figure 7 presents the num-
ber of assignments performed by NC* and NC* CBJ. For the
hardest instances, where p2 is higher than 0.9, NC* CBJ out-
performs NC* by a factor of between 3 at p2 = 0.92 and 2
at p2 = 0.99. The right hand side (RHS) of Figure 7 shows
similar results for cpu-time.

The LHS of Figure 8 presents the number of assignments
performed by AC* and AC* CBJ. For the hardest instances,
where p2 is higher than 0.9, AC* CBJ outperforms AC* by
a factor of 2. The RHS of Figure 8 presents the result in
cpu-time which are similar but the difference is smaller than
for the number of assignments. Note that both performance
measures decrease for p2 values above 0.98 for AC* CBJ.
This demonstrates a phase transition [Larrosa and Meseguer,
1996; Larrosa and Schiex, 2004].

Figure 9 presents similar results for the AC* algorithm

IJCAI-07

202

Figure 9: Assignments and Run-time of AC* and AC* CBJ
(p1 = 0.9)

Figure 10: Assignments and Run-time of FDAC and
FDAC CBJ (p1 = 0.4)
solving high density Max-CSPs (p1 = 0.9). The factor of im-
provement is similar to the low density experiments for both
measures.

The LHS of Figure 10 presents the number of assignments
performed by FDAC and FDAC CBJ. The difference in the
number of assignments between the conﬂict-directed back-
jumping version and the standard version is much larger than
for the case of NC* and AC*. However, the difference in cpu-
time, presented on the RHS of Figure 10, is smaller than for
the previous procedures. These differences are also presented
for high density Max-CSPs in Figure 11.

The big difference between the results in number of as-
signments and in cpu-time for deeper look-ahead algorithms
can be explained by the large effort that is spent in F DAC
for detecting conﬂicts and pruning during the ﬁrst steps of
the algorithms run. For deeper look-ahead, the backjump-
ing method avoids assignment attempts which require a small
amount of computation. The main effort having been made
during the assignments of the ﬁrst variables of the CSP which
are performed similarly, in both versions.

6 Conclusions
Branch and Bound is the most common algorithm used for
solving optimization problems with a ﬁnite search space
(such as Max-CSPs). Former studies improved the results
of standard Branch and Bound algorithms by improving the
consistency maintenance procedure they used [Wallace and
Freuder, 1993; Larrosa and Meseguer, 1996; Larrosa et al.,
1999; Larrosa and Schiex, 2003; 2004]. In the present study
we adjusted conﬂict directed backjumping (CBJ), which is a
common technique for standard CSP search [Prosser, 1993;
Kondrak and van Beek, 1997], to Branch and Bound with
extended consistency maintenance procedures. The results
presented in Section 5 show that CBJ improves the perfor-
mance of all versions of the B&B algorithm. The factor of
improvement in the number of assignments when using con-
ﬂict directed backjumping is consistent and large. The factor

Figure 11: Assignments and Run-time of FDAC and
FDAC CBJ (p1 = 0.9)
of improvement in run-time is dependent on the consistency
maintenance procedure used (as reported for standard CSPs
by [Chen and van Beek, 2001]). The factor of improvement
does not decrease (and even grows) for random problems with
higher density.

References
[Bessiere and Regin, 1995] C. Bessiere and J.C. Regin. Using bidi-
rectionality to speed up arc-consistency processing. Constraint
Processing (LNCS 923), pages 157–169, 1995.

[Chen and van Beek, 2001] X. Chen and P. van Beek. Conﬂict-
directed backjumping revisited. Journal of Artiﬁcial Intelligence
Research (JAIR), 14:53–81, 2001.

[Dechter and Frost, 2002] R. Dechter and D. Frost. Backjump-
based backtracking for constraint satisfaction problems. Artiﬁcial
Intelligence, 136(2):147–188, 2002.

[Dechter, 2003] Rina Dechter. Constraints Processing. Morgan

Kaufman, 2003.

[Ginsberg, 1993] M. L. Ginsberg. Dynamic backtracking. J. of Ar-

tiﬁcial Intelligence Research, 1:25–46, 1993.

[Gu´eret et al., 2000] Christelle Gu´eret, Narendra Jussien, and
Christian Prins. Using intelligent backtracking to improve branch
and bound methods: an application to open-shop problems. Eu-
ropean Journal of Operational Research, 127(2):344–354, 2000.
[Kondrak and van Beek, 1997] G. Kondrak and P. van Beek. A the-
oretical evaluation of selected backtracking algorithms. Artiﬁcial
Intelligence, 21:365–387, 1997.

[Larrosa and Meseguer, 1996] J. Larrosa and P. Meseguer. Phase

transition in max-csp. In Proc. ECAI-96, Budapest, 1996.

[Larrosa and Schiex, 2003] J. Larrosa and T. Schiex. In the quest
of the best form of local consistency for weighted csp. In Proc.
IJCAI-2003, Acapulco, 2003.

[Larrosa and Schiex, 2004] J. Larrosa and T. Schiex.

Solving
weighted csp by maintaining arc consistency. Artiﬁcial Intelli-
gence, 159:1–26, 2004.

[Larrosa et al., 1999] J. Larrosa, P. Meseguer, and T. Schiex. Main-
Artiﬁcial Intelligence,

taining reversible dac for max-csp.
107:149–163, 1999.

[Li and Williams, 2005] H. Li and B. Williams. Generalized con-
ﬂict learning for hybrid discrete/linear optimization. In CP-2005,
pages 415–429, Sigtes (Barcelona), Spain, 2005.

[Prosser, 1993] P. Prosser. Hybrid algorithms for the constraint sat-
isfaction problem. Computational Intelligence, 9:268–299, 1993.
[Wallace and Freuder, 1993] R. J. Wallace and E. C. Freuder. Con-
junctive width heuristics for maximal constraint satisfaction. In
Proc. AAAI-93, pages 762–768, 1993.

IJCAI-07

203

