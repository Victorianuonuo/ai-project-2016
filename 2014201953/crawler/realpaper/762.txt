Completing Description Logic Knowledge Bases using Formal Concept Analysis

∗

Franz Baader,1 Bernhard Ganter,1 Barıs¸ Sertkaya,1 and Ulrike Sattler2

1TU Dresden, Germany and 2The University of Manchester, UK

Abstract

We propose an approach for extending both the ter-
minological and the assertional part of a Descrip-
tion Logic knowledge base by using information
provided by the knowledge base and by a domain
expert. The use of techniques from Formal Con-
cept Analysis ensures that, on the one hand, the
interaction with the expert is kept to a minimum,
and, on the other hand, we can show that the ex-
tended knowledge base is complete in a certain,
well-deﬁned sense.

1 Introduction
Description Logics (DLs) [Baader et al., 2003] are a suc-
cessful family of logic-based knowledge representation for-
malisms, which can be used to represent the conceptual
knowledge of an application domain in a structured and for-
mally well-understood way. They are employed in vari-
ous application domains, such as natural language process-
ing, conﬁguration, databases, and bio-medical ontologies, but
their most notable success so far is due to the fact that DLs
provide the logical underpinning of OWL, the standard ontol-
ogy language for the semantic web [Horrocks et al., 2003].
As a consequence of this standardization, several ontology
editors support OWL [Knublauch et al., 2004; Oberle et al.,
2004; Kalyanpur et al., 2006a], and ontologies written in
OWL are employed in more and more applications. As the
size of these ontologies grows, tools that support improving
their quality become more important. The tools available un-
til now use DL reasoning to detect inconsistencies and to infer
consequences, i.e., implicit knowledge that can be deduced
from the explicitly represented knowledge. There are also
promising approaches that allow to pinpoint the reasons for
inconsistencies and for certain consequences, and that help
the ontology engineer to resolve inconsistencies and to re-
move unwanted consequences [Schlobach and Cornet, 2003;
Kalyanpur et al., 2006b]. These approaches address the qual-
ity dimension of soundness of an ontology, both within it-
self (consistency) and w.r.t. the intended application domain
(no unwanted consequences). In the present paper, we are

concerned with a different quality dimension: completeness.
We provide a basis for formally well-founded techniques and
tools that support the ontology engineer in checking whether
an ontology contains all the relevant information about the
application domain, and to extend the ontology appropriately
if this is not the case.

A DL knowledge base (nowadays often called ontology)
usually consists of two parts, the terminological part (TBox),
which deﬁnes concepts and also states additional constraints
(so-called general concept inclusions, GCIs) on the interpre-
tation of these concepts, and the assertional part (ABox),
which describes individuals and their relationship to each
other and to concepts. Given an application domain and a DL
knowledge base (KB) describing it, we can ask whether the
KB contains all the relevant information1 about the domain:
• Are all the relevant constraints that hold between con-

cepts in the domain captured by the TBox?

• Are all the relevant individuals existing in the domain

represented in the ABox?

As an example, consider the OWL ontology for human pro-
tein phosphatases that has been described and used in [Wol-
stencroft et al., 2005]. This ontology was developed based
on information from peer-reviewed publications. The human
protein phosphatase family has been well characterised exper-
imentally, and detailed knowledge about different classes of
such proteins is available. This knowledge is represented in
the terminological part of the ontology. Moreover, a large set
of human phosphatases has been identiﬁed and documented
by expert biologists. These are described as individuals in the
assertional part of the ontology. One can now ask whether the
information about protein phosphatases contained in this on-
tology is complete. Are all the relationships that hold among
the introduced classes of phosphatases captured by the con-
straints in the TBox, or are there relationships that hold in the
domain, but do not follow from the TBox? Are all possible
kinds of human protein phosphatases represented by individ-
uals in the ABox, or are there phosphatases that have not yet
been included in the ontology or even not yet been identiﬁed?
Such questions cannot be answered by an automated tool
alone. Clearly, to check whether a given relationship between

∗Supported by DFG (GRK 334/3) and the EU (IST-2005-7603

FET project TONES and NoE 507505 Semantic Mining).

1The notion of “relevant information” must, of course, be formal-
ized appropriately for this problem to be addressed algorithmically.

IJCAI-07

230

concepts—which does not follow from the TBox—holds in
the domain, one needs to ask a domain expert, and the same
is true for questions regarding the existence of individuals not
described in the ABox. The rˆole of the automated tool is to
ensure that the expert is asked as few questions as possible;
in particular, she should not be asked trivial questions, i.e.,
questions that could actually be answered based on the rep-
resented knowledge. In the above example, answering a non-
trivial question regarding human protein phosphatases may
require the biologist to study the relevant literature, query
existing protein databases, or even to carry out new exper-
iments. Thus, the expert may be prompted to acquire new
biological knowledge.

Attribute exploration is an approach developed in Formal
Concept Analysis (FCA) [Ganter and Wille, 1999] that can
be used to acquire knowledge about an application domain
by querying an expert. One of the earliest applications of this
approach is described in [Wille, 1982], where the domain is
lattice theory, and the goal of the exploration process is to
ﬁnd, on the one hand, all valid relationships between prop-
erties of lattices (like being distributive), and, on the other
hand, to ﬁnd counterexamples to all the relationships that do
not hold. To answer a query whether a certain relationship
holds, the lattice theory expert must either conﬁrm the rela-
tionship (by using results from the literature or carrying out a
new proof for this fact), or give a counterexample (again, by
either ﬁnding one in the literature or constructing a new one).
Although this sounds very similar to what is needed in our
context, we cannot directly use this approach. The main rea-
son is the open-world semantics of description logic knowl-
edge bases. Consider an individual i from an ABox A and
a concept C occurring in a TBox T . If we cannot deduce
from the TBox T and A that i is an instance of C, then we
do not assume that i does not belong to C. Instead, we only
accept this as a consequence if T and A imply that i is an
instance of ¬C. Thus, our knowledge about the relationships
between individuals and concepts is incomplete: if T and A
imply neither C(i) nor ¬C(i), then we do not know the re-
lationship between i and C. In contrast, classical FCA and
attribute exploration assume that the knowledge about indi-
viduals is complete: the basic datastructure is that of a formal
context, i.e., a crosstable between individuals and properties.
A cross says that the property holds, and the absence of a
cross is interpreted as saying that the property does not hold.
There has been some work on how to extend FCA and at-
tribute exploration from complete knowledge to the case of
partial knowledge [Obiedkov, 2002; Burmeister and Holzer,
2005]. However, this work is based on assumptions that are
different from ours. In particular, it assumes that the expert
cannot answer all queries and, as a consequence, the knowl-
edge obtained after the exploration process may still be in-
complete and the relationships between concepts that are pro-
duced in the end fall into two categories: relationships that are
valid no matter how the incomplete part of the knowledge is
completed, and relationships that are valid only in some com-
pletions of the incomplete part of the knowledge. In contrast,
our intention is to complete the KB, i.e., in the end we want
to have complete knowledge about these relationships. What
may be incomplete is the description of individuals used dur-

ing the exploration process.

In the next section, we introduce our variant of FCA that
can deal with partial contexts, and describe an attribute ex-
ploration procedure that works with partial contexts. In Sec-
tion 3, we show how a DL knowledge base gives rise to a
partial context, deﬁne the notion of a completion of a knowl-
edge base w.r.t. a ﬁxed model, and show that the attribute
exploration algorithm developed in the previous section can
be used to complete a knowledge base. In Section 4 we de-
scribe ongoing and future work. This paper is accompanied
by a technical report [Baader et al., 2006] containing more
details and in particular full proofs of our results.

2 Exploring Partial Contexts
In this section, we extend the classical approach to Formal
Concept Analysis (FCA), as described in detail in [Ganter
and Wille, 1999], to the case of individuals (called objects
in FCA) that have only a partial description in the sense that,
for some properties (called attributes in FCA), it is not known
whether they are satisﬁed by the individual or not. The con-
nection between this approach and the classical approach is
explained in [Baader et al., 2006]. In the following, we as-
sume that we have a ﬁnite set M of attributes and a (possibly
inﬁnite) set of objects.

Deﬁnition 2.1 A partial object description (pod) is a tuple
(A, S) where A, S ⊆ M are such that A ∩ S = ∅. We call
such a pod a full object description (fod) if A ∪ S = M . A
set of pods is called a partial context and a set of fods a full
context.
Intuitively, the pod (A, S) says that the object it describes
satisﬁes all attributes from A and does not satisfy any attribute
from S. For the attributes not contained in A ∪ S, nothing is
known w.r.t. this object. A partial context can be extended by
either adding new pods or by extending existing pods.
Deﬁnition 2.2 We say that the pod (A(cid:2), S (cid:2)) extends the pod
(A, S), and write this as (A, S) ≤ (A(cid:2), S (cid:2)), if A ⊆ A(cid:2) and
S ⊆ S (cid:2). Similarly, we say that the partial context K(cid:2) extends
the partial context K, and write this as K ≤ K(cid:2), if every pod
in K is extended by some pod in K(cid:2). If K is a full context and
K ≤ K, then K is called a realizer of K. If (A, S) is a fod
and (A, S) ≤ (A, S), then we also say that (A, S) realizes
(A, S).

Next, we introduce the notion of an implication between
attributes which formalizes the informal notion “relationship
between properties” used in the introduction.
Deﬁnition 2.3 An implication is of the form L → R where
L, R ⊆ M . This implication is refuted by the pod (A, S) if
L ⊆ A and R ∩ S (cid:8)= ∅. It is refuted by the partial context
K if it is refuted by at least one element of K. The set of
implications that are not refuted by a given partial context K
is denoted by Imp(K). The set of all fods that do not refute a
given set of implications L is denoted by Mod (L).
For a set of implications L and a set P ⊆ M , the implica-
tional closure of P with respect to L, denoted by L(P ), is the
smallest subset Q of M such that

• P ⊆ Q, and

IJCAI-07

231

• L → R ∈ L and L ⊆ Q imply R ⊆ Q.

A set P ⊆ M is called L-closed if L(P ) = P .
Deﬁnition 2.4 The implication L → R is said to follow from
a set J of implications if R ⊆ J (L). The set of implica-
tions J is called complete for a set of implications L if every
implication in L follows from J . It is called sound for L if
every implication that follows from J is contained in L. A set
of implications J is called a base for a set of implications L
if it is both sound and complete for L, and no strict subset of
J satisﬁes this property.

The following is a trivial fact regarding the connection be-
tween partial contexts and the implications they do not refute,
but it will turn out to be crucial for our attribute exploration
algorithm.
Proposition 2.5 For a given set P ⊆ M and a partial con-
{S | (A, S) ∈ K, P ⊆ A} is the
text K, K(P ) := M \
largest subset of M such that P → K(P ) is not refuted by K.

(cid:2)

Attribute exploration with partial contexts
The classical attribute exploration algorithm of FCA assumes
that there is a domain expert that can answer questions re-
garding the validity of implications in the application do-
main. Accordingly, our approach requires an expert that
can decide whether an implication is refuted in the applica-
tion domain or not. In contrast to existing work on extend-
ing FCA to the case of partial knowledge [Obiedkov, 2002;
Burmeister and Holzer, 2005], we do not assume that the ex-
pert has only partial knowledge and thus cannot answer all
implication questions.

To be more precise, we consider the following setting. We
are given an initial (possibly empty) partial context K, an ini-
tially empty set of implications L, and a full context K that
is a realizer of K. The expert answers implication questions
“L → R?” w.r.t. the full context K. More precisely, if the
answer is “yes,” then K does not refute L → R. The im-
plication L → R is then added to L. Otherwise, the expert
extends the current context K such that the extended context
refutes L → R and still has K as a realizer. Consequently,
the following invariant will be satisﬁed by K, K, L:

K ≤ K ⊆ Mod (L).

Our aim is to enrich K and L such that eventually L is not
only sound, but also complete for Imp(K), and K refutes all
other implications (i.e., all the implications refuted by K). As
in the classical case, we want to do this by asking as few as
possible questions to the expert.
Deﬁnition 2.6 Let L be a set of implications and K a partial
context. An implication is called undecided w.r.t. K and L if
it neither follows from L nor is refuted by K. It is decided
w.r.t. K and L if it is not undecided w.r.t. K and L.
In principle, our attribute exploration algorithm tries to de-
cide each undecided implications by either adding it to L or
extending K such that it refutes the implication. If all impli-
cations are decided, then our goal is achieved.
Proposition 2.7 Assume that K ≤ K ⊆ Mod (L) and that all
implications are decided w.r.t. K and L. Then L is complete
for Imp(K) and K refutes all implications not belonging to
Imp(K).

How can we ﬁnd—and let the expert decide—all unde-
cided implications without considering all implications? The
following proposition motivates why it is sufﬁcient to con-
sider implications whose left-hand sides are L-closed.
Proposition 2.8 Let L be a set of implications and L → R
an implication. Then, L → R follows from L iff L(L) → R
follows from L.

Concerning right-hand sides, Proposition 2.5 says that the
largest right-hand side R such that L → R is not refuted
by K is R = K(L). Putting these two observations together,
we only need to consider implications of the form L → K(L)
where L is L-closed. In order to enumerate all left-hand sides,
we can thus use the well-known approach from FCA for enu-
merating closed sets in the lectic order [Ganter and Wille,
1999].
Deﬁnition 2.9 Assume that M = {m1, . . . , mn} and ﬁx
some linear order m1 < m2 < · · · mn on M . The lectic
order < is deﬁned as follows: for mi ∈ M and A, B ⊆ M
we deﬁne
A <i B iﬀ mi ∈ B \ A and

A ∩ {m1, . . . , mi−1} = B ∩ {m1, . . . , mi−1}.

The order < is the union of the orders <i.
Obviously, < extends the strict subset order, and thus ∅ is the
smallest and M the largest set w.r.t. <.
Proposition 2.10 Given a set of implications L and an L-
closed set A (cid:3) M , the next L-closed set following A in the
lectic order is L((A ∩ {m1, . . . , mj−1}) ∪ {mj}) where j is
maximal such that A <j L((A ∩ {m1, . . . , mj−1}) ∪ {mj}.

If an implication is added because the expert has stated that
it holds in K, then we can extend the current context K by
closing the ﬁrst component of every pod in K w.r.t. the new
set of implications L. In fact, L ⊆ Imp(K) makes sure that
the extended context is still realized by K. To allow for this
and possible other ways of extending the partial context, the
formulation of the algorithm just says that, in case an implica-
tion is added, the partial context can also be extended. When-
ever an implication is not accepted by the expert, K will be
extended to a context that refutes the implication and still has
K as a realizer.

Based on these considerations, our attribute exploration al-
gorithm for partial contexts is described in Algorithm 1. It
takes a partial context K0 and a set M of attributes to be
explored, and interacts with an expert who has information
about a full context K that realizes K0. It goes through the set
of implications over M in the lectic order of their left hand
sides and, in case they are undecided in the current partial
context, asks the expert to decide them. In case an implica-
tion holds in K, (a less redundant version of) it is added to
the implication base. Otherwise, the partial context is extend
with a counterexample from K provided by the expert.

The following theorem states that this algorithm always
In Section 4,

terminates, and in which sense it is correct.
we will brieﬂy remark on its complexity.
Theorem 2.11 Let M be a ﬁnite set of attributes, and K and
K0 respectively a full and a partial context over the attributes

IJCAI-07

232

Algorithm 1 Attribute exploration for partial contexts
1: Input: M = {m1, . . . , mn}, K0

{attribute set and
partial context, realized by full context K}
{initialize partial context}
{initial empty set of implications}
{lectically smallest L-closed set}

2: K := K0
3: L := ∅
4: P := ∅
5: while P (cid:8)= M do
Compute K(P )
6:
if P (cid:8)= K(P ) then {P → K(P ) is undecided}
7:
Ask the expert if P → K(P ) is refuted by K
if no then {P → K(P ) not refuted}

K := K(cid:2) where K(cid:2) is a partial context such that

K ≤ K(cid:2) ≤ K

{optionally extend K}

L := L ∪ {P → K(P ) \ P }
Pnew := L((P ∩ {m1, . . . , mj−1}) ∪ {mj})

for the max. j that satisﬁes
P <j L((P ∩ {m1, . . . , mj−1}) ∪ {mj})

else {P → K(P ) refuted}

Get a partial context K(cid:2) from the expert such that
K ≤ K(cid:2) ≤ K and P → K(P ) is refuted by K(cid:2)
K := K(cid:2)
Pnew := P

{P not changed}

8:
9:
10:

11:
12:

13:
14:

15:
16:
17:
18:
19:

Name of constructor

Syntax

¬C

negation
C (cid:10) D
conjunction
general concept inclusion C (cid:11) D
C(a)
concept assertion
r(a, b)
role assertion

Semantics
ΔI \ C I
C I ∩ DI
C I ⊆ DI
aI ∈ C I

(aI, bI) ∈ rI

Table 1: Conjunction, negation, GCIs, and ABox assertions.

ABox. The semantics of concept descriptions, TBoxes, and
ABoxes is given in terms of an interpretation I = (ΔI , ·I),
where ΔI (the domain) is a non-empty set, and ·I (the in-
terpretation function) maps each concept name A ∈ NC to a
set AI ⊆ ΔI , each role name r ∈ NR to a binary relation
rI ⊆ ΔI × ΔI , and each individual name a ∈ NI to an el-
ement aI ∈ ΔI . Concept descriptions C are also interpreted
as sets C I ⊆ ΔI, which are deﬁned inductively, as seen in
the semantics column of Table 1 for the constructors conjunc-
tion and negation. An interpretation I is a model of the TBox
T (the ABox A) if it satisﬁes all its GCIs (assertions) in the
sense shown in the semantics column of the table. In case I
is a model of both T and A, it is also called a model of the
knowledge base (T , A). If there is such a model, we call the
KB consistent.

Given a KB (T , A), concept descriptions C, D, and an in-
dividual name a, the inference problems subsumption and in-
stance are deﬁned as follows: C is subsumed by D w.r.t. T
(C (cid:11)T D) if C I ⊆ DI holds for all models I of T ; and a is
an instance of C w.r.t. T and A (T , A |= C(a)) if aI ∈ C I
holds for all models of (T , A). For most DLs, these problems
are decidable, and there exist highly optimized DL reasoners
such as FaCT, RACER, and Pellet that can solve these prob-
lems for very expressive DLs on large practical KBs.

As mentioned above, our approach for completing DL
knowledge bases applies to arbitary DLs, provided that the
description language allows at least for conjunction and nega-
tion, the TBox formalism allows for GCIs, the ABox formal-
ism allows for concept assertions, and the subsumption and
the instance problem are decidable.

DLs and partial contexts
Let (T , A) be a consistent DL knowledge base, and M be
a ﬁnite set of concept descriptions. An individual name a
occurring in A gives rise to the partial object description
pod T ,A(a, M ) := (A, S) where

A := {C ∈ M | T , A |= C(a)}
S := {C ∈ M | T , A |= ¬C(a)},

and

and the whole ABox induces the partial context

KT ,A(M ) := {pod T ,A(a, M ) | a an individual name in A}.

Note that pod T ,A(a, M ) is indeed a pod since (T , A) was
assumed to be consistent. Similarly, any element d ∈ ΔI
of an interpretation I gives rise to the full object description
fod I(d, M ) := (A, S) where

A := {C ∈ M | d ∈ C I }, S := {C ∈ M | d ∈ (¬C)I },

end if

else {trivial implication}

Pnew := L((P ∩ {m1, . . . , mj−1}) ∪ {mj})

for the max. j that satisﬁes
P <j L((P ∩ {m1, . . . , mj−1}) ∪ {mj})

end if
P := Pnew

20:
21:
22: end while

in M such that K0 ≤ K. Then Algorithm 1 terminates and,
upon termination, it outputs a partial context K and a set of
implications L such that

1. L is a base for Imp(K), and
2. K refutes every implication that is refuted by K.

3 Completing DL Knowledge Bases

In order to represent knowledge about an application domain
using Description Logics (DLs) (see [Baader et al., 2003] for
more details and references), one usually ﬁrst deﬁnes the rele-
vant concepts of this domain, and then describes relationships
between concepts and between individuals and concepts in
the knowledge base. To construct concepts, one starts with a
set NC of concept names (unary predicates) and a set NR of
role names (binary predicates), and builds complex concept
descriptions out of them by using the concept constructors
provided by the particular description language being used.
In addition, a set NI of individual names is used to refer to
domain elements. In this paper, we do not ﬁx a speciﬁc set of
constructors since our results apply to arbitrary DLs as long
as they allow for the constructors conjunction and negation
(see the upper part of Table 1). A TBox is a ﬁnite set of gen-
eral concept inclusions (GCIs), and an ABox is a ﬁnite set of
concept and role assertions (see the lower part of Table 1).
A knowledge base (KB) consists of a TBox together with an

IJCAI-07

233

and the whole interpretation induces the full context

KI(M ) := {fod I (d, M ) | d ∈ ΔI }.

Proposition 3.1 Let (T , A), (T (cid:2), A(cid:2)) be DL KBs such that
T ⊆ T (cid:2) and A ⊆ A(cid:2), M a set of concept descriptions, and
I a model of (T (cid:2), A(cid:2)). Then KT ,A(M ) ≤ KT (cid:2),A(cid:2) (M ) ≤
KI (M ).

Next, we straightforwardly transfer the notion of refutation of
an implication from partial (full) contexts to knowledge bases
(interpretations).
Deﬁnition 3.2 The implication L → R over the attributes
M is refuted by the knowledge base (T , A) if it is refuted by
KT ,A(M ), and it is refuted by the interpretation I if it is re-
futed by KI(M ). If an implication is not refuted by I, then
we say that it holds in I. In addition, we say that L → R fol-
lows from T if (cid:10)L (cid:11)T (cid:10)R, where (cid:10)L and (cid:10)R respectively
stand for the conjunctions
Obviously, the implication L → R holds in I iff ((cid:10)L)I ⊆
((cid:10)R)I . As an immediate consequence of this fact, we obtain:
Proposition 3.3 Let T be a TBox and I be a model of T . If
L → R follows from T , then it holds in I.

C∈L C and

D∈R D.

(cid:2)

(cid:2)

Completion of DL KBs: formal deﬁnition and algorithm
We are now ready to deﬁne what we mean by a completion of
a DL knowledge base. Intuitively, the knowledge base is sup-
posed to describe an intended model. For a ﬁxed set M of “in-
teresting” concepts, the knowledge base is complete if it con-
tains all the relevant knowledge about implications between
these concepts. To be more precise, if an implication holds
in the intended interpretation, then it should follow from the
TBox, and if it does not hold in the intended interpretation,
then the ABox should contain a counterexample. Based on
the notions introduced above, this is formalized as follows.
Deﬁnition 3.4 Let (T , A) be a consistent DL knowledge
base, M a ﬁnite set of concept descriptions, and I a model
of (T , A). Then (T , A) is M -complete (or complete if M
is clear from the context) w.r.t. I if the following three state-
ments are equivalent for all implications L → R over M :

1. L → R holds in I;
2. L → R follows from T ;
3. L → R is not refuted by (T , A).

Let (T0, A0) be a DL knowledge base and I a model of
(T0, A0). Then (T , A) is a completion of (T0, A0) if it is
complete and extends (T0, A0), i.e., T0 ⊆ T and A0 ⊆ A.

An adaptation of the attribute exploration algorithm for
partial contexts presented above can be used to compute a
completion of a given knowledge base (T0, A0) w.r.t. a ﬁxed
model I of this knowledge base. It is assumed that the expert
has or can obtain enough information about this model to be
able to answer questions of the form “Is L → R refuted by
I?”. If the answer is “no,” then L → R holds according to
the expert’s opinion, and is thus added to the implication base
computed by the algorithm. In addition, the GCI (cid:10)L (cid:11) (cid:10)R
is added to the TBox. Since L → R is not refuted by I, the
interpretation I is still a model of the new TBox obtained this

way. If the answer is “yes,” then the expert is asked to extend
the current ABox (by adding appropriate assertions on either
old or new individual names) such that the extended ABox
refutes L → R and I is still a model of this ABox. Because
of Proposition 3.3, before actually asking the expert whether
the implication L → R is refuted by I, we can ﬁrst check
whether (cid:10)L (cid:11) (cid:10)R already follows from the current TBox. If
this is the case, then we know that L → R cannot be refuted
by I. This completion algorithm for DL knowledge bases is
described in more detail in Algorithm 2.

Algorithm 2 Completion of DL knowledge bases
1: Input: M = {m1, . . . , mn}, (T0, A0) {attribute set and
knowledge base, with model I}

2: T := T0, A := A0
3: L := ∅
4: P := ∅
5: while P (cid:8)= M do
6:
7:

{initial empty set of implications}
{lectically smallest L-closed subset of M }

Compute KT ,A(P )
if P (cid:8)= KT ,A(P ) then {check whether the implication
follows from T }

if (cid:10)P (cid:11)T (cid:10)KT ,A(P ) then

L := L ∪ {P → KT ,A(P ) \ P }
Pnew := L((P ∩ {m1, . . . , mj−1}) ∪ {mj})

for the max. j that satisﬁes
P <j L((P ∩ {m1, . . . , mj−1}) ∪ {mj})

8:
9:
10:

11:
12:
13:
14:
15:

16:
17:
18:

19:
20:
21:
22:
23:
24:

else

Ask expert if P → KT ,A(P ) is refuted by I.
if no then {(cid:10)P (cid:11) (cid:10)KT ,A(P ) is satisﬁed in I}

L := L ∪ {P → KT ,A(P ) \ P }
Pnew := L((P ∩ {m1, . . . , mj−1}) ∪ {mj})

for the max. j that satisﬁes
P <j L((P ∩ {m1, . . . , mj−1}) ∪ {mj})

T := T ∪ {(cid:10)P (cid:11) (cid:10)(KT ,A(P ) \ P )}

else

Get an ABox A(cid:2) from the expert such that

A ⊆ A(cid:2), I is a model of A(cid:2), and
P → KT ,A(P ) is refuted by A(cid:2)

A := A(cid:2)
Pnew := P

{extend the ABox}
{P not changed}

end if

end if

else

Pnew := L((P ∩ {m1, . . . , mj−1}) ∪ {mj})

for the max. j that satisﬁes
P <j L((P ∩ {m1, . . . , mj−1}) ∪ {mj})

end if
P := Pnew

25:
26:
27: end while

Note that Algorithm 2 applied to T0, A0, M with the un-
derlying model I of (T0, A0) is an instance of Algorithm 1
(M ) with the underly-
applied to the partial context KT0,A0
ing full context KI (M ) as realizer. This shows that Theo-
rem 2.11 applies also to Algorithm 2, which implies:
Theorem 3.5 Let (T0, A0) be a consistent knowledge base,
M a ﬁnite set of concept descriptions, and I a model of
(T0, A0), and let (T , A) be the knowledge base computed by

IJCAI-07

234

Algorithm 2. Then (T , A) is a completion of (T0, A0).

4 Conclusion

We have extended the attribute exploration algorithm from
FCA to partial contexts, and have shown how the extended
algorithm can be used to complete DL knowledge bases, us-
ing both DL reasoning and answers given by a domain ex-
pert. This algorithm inherits its complexity from “classical”
attribute exploration [Ganter and Wille, 1999]: in the worst
case, which occurs if there are few or many relationships be-
tween attributes, it is exponential in the number of attributes.
Regarding the number of questions asked to the expert, it eas-
ily follows from results shown in the technical report that our
method asks the minimum number of questions with posi-
tive answers. For the questions with negative answers, the
behaviour depends on the answers given by the expert: FCA-
theory implies that there always exist counterexamples that,
if taken in each step, ensure a minimal number of questions
with negative answers. In general, however, one cannot as-
sume that the expert provides these “best” counterexamples.
Based on the results presented in the previous two sec-
tions, we have implemented a ﬁrst experimential version of
a tool for completing DL knowledge bases as an extension of
the ontology editor Swoop [Kalyanpur et al., 2006a], which
uses the system Pellet as underlying reasoner [Sirin and Par-
sia, 2004]. We have just started to evaluate our tool on the
OWL ontology for human protein phosphatases mentioned in
the introduction, with biologists as experts, and hope to get
ﬁrst signiﬁcant results on its usefulness and performance in
the near future. Unsurprisingly, we have observed that the
experts sometimes make errors when answering implication
questions. Hence we will extend the completion tool such that
it supports detecting such errors and also allows to correct er-
rors without having to restart the exploration from scratch.

From a theoretical point of view, we will also look at exten-
sions of our deﬁnition of a complete KB. As a formalization
of what “all relationships between interesting concepts” re-
ally means, we have used subsumption relationships between
conjunctions of elements of the set of interesting concepts
M . One could also consider more complex relationships by
ﬁxing a speciﬁc DL D, and then taking, as attributes, all D-
concept descriptions over the concept “names” from M . The
immediate disadvantage of this extension is that, in general,
the set of attributes becomes inﬁnite, and thus termination of
the exploration process is no longer guaranteed. An exten-
sion of classical attribute exploration (i.e., for full contexts)
in this direction is described in [Rudolph, 2004]. The main
idea to deal with the problem of an inﬁnite attribute set used
there is to restrict the attention to concept descriptions with a
bounded role depth. But even though this makes the attribute
set ﬁnite, its size is usually too large for practical purposes.
Thus, an adaptation of Rudolph’s method to our purposes not
only requires extending this method to partial contexts, but
also some new approach to reduce the number of attributes.

References
[Baader et al., 2003] F. Baader, D. Calvanese, D. McGuin-
ness, D. Nardi, and P. F. Patel-Schneider, editors. The De-

scription Logic Handbook: Theory, Implementation, and
Applications. Cambridge University Press, 2003.

[Baader et al., 2006] F. Baader, B. Ganter, U. Sattler, and
B. Sertkaya. Completing description logic knowledge
bases using formal concept analysis. LTCS Report 06-02,
Theoretical Computer Science, TU Dresden, 2006. Avail-
able at http://lat.inf.tu-dresden.de/research/reports.html

[Burmeister and Holzer, 2005] P. Burmeister and R. Holzer.
Treating incomplete knowledge in formal concept analy-
sis. In Formal Concept Analysis, volume 3626 of LNCS.
Springer, 2005.

[Ganter and Wille, 1999] B. Ganter and R. Wille. Formal
Concept Analysis: Mathematical Foundations. Springer,
1999.

[Horrocks et al., 2003] I. Horrocks, P. F. Patel-Schneider,
and F. van Harmelen. From SHIQ and RDF to OWL: The
making of a web ontology language. J. of Web Semantics,
1(1), 2003.

[Kalyanpur et al., 2006a] A. Kalyanpur, B. Parsia, E. Sirin,
B. C. Grau, and J. Hendler. Swoop: A Web ontology edit-
ing browser. J. of Web Semantics, 4(2), 2006.

[Kalyanpur et al., 2006b] A. Kalyanpur, B. Parsia, E. Sirin,
and B. C. Grau. Repairing unsatisﬁable concepts in OWL
ontologies. In Proc. of ESWC’06, volume 4011 of LNCS.
Springer, 2006.

[Knublauch et al., 2004] H. Knublauch, R. W. Fergerson,
N. F. Noy, and M. A. Musen. The Prot´eg´e OWL plugin:
An open development environment for semantic web ap-
plications. In Proc. of ISWC 2004, volume 3298 of LNCS.
Springer, 2004.

[Oberle et al., 2004] D. Oberle, R. Volz, B. Motik, and
S. Staab. An extensible ontology software environment.
Handbook on Ontologies, International Handbooks on In-
formation Systems. Springer, 2004.

[Obiedkov, 2002] S. A. Obiedkov. Modal logic for evalu-
ating formulas in incomplete contexts. In Proc. of ICCS
2002, volume 2393 of LNCS. Springer, 2002.

[Rudolph, 2004] S. Rudolph. Exploring relational structures
In Proc. of ICCS’04, volume 3127 of LNCS.

via F LE .
Springer, 2004.

[Schlobach and Cornet, 2003] S. Schlobach and R. Cornet.
Non-standard reasoning services for the debugging of de-
scription logic terminologies.
In Proc. of IJCAI 2003.
Morgan Kaufmann, 2003.

[Sirin and Parsia, 2004] E. Sirin and B. Parsia. Pellet: An

OWL DL reasoner. In Proc. of DL’04, 2004.

[Wille, 1982] R. Wille. Restructuring lattice theory: An ap-
proach based on hierarchies of concepts. In Ordered Sets.
Reidel, Dordrecht-Boston, 1982.

[Wolstencroft et al., 2005] K. Wolstencroft, A. Brass, I. Hor-
rocks, P. W. Lord, U. Sattler, D. Turi, and R. Stevens. A
little semantic web goes a long way in biology. In Proc. of
ISWC’05, volume 3729 of LNCS. Springer, 2005.

IJCAI-07

235

