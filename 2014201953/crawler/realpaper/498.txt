Inverse Circumscription 

Hubie Chen 

Department of Computer Science 

Cornell University 

Ithaca, NY 14853, USA 
hubes@cs.cornell.edu 

Abstract 

Inverse  (or  identification)  problems  involve  decid­
ing  whether  or  not  an  explicitly  given  set  of data 
points  have  an  implicit  description,  for  instance, 
in  the  form  of a  constraint  network.  Such  prob­
lems  provide  insight  into  the  relationships  among 
various  representations  of knowledge,  which  may 
have  differing computational  properties.  This  pa­
per formalizes and studies the inverse circumscrip(cid:173)
tion  problem,  which  (roughly  speaking)  is  to  de­
cide, given a set of models, if there exists a formula 
whose circumscription describes the input set. 

Introduction 

1 
The  relationship  between  implicit  and  explicit  descriptions 
of information  is  a  central  theme  in  knowledge  representa­
tion  and reasoning.  For example,  the core reasoning task of 
propositional satisfiability  is  to  decide,  given  a  propositional 
formula,  whether or not  the  explicit set of models described 
implicitly by the formula is non-empty. 

Recently,  Kavvadias and  Sideri  [1998]  studied a comple­
mentary  task,  which  they  called  inverse  satisfiability,  given 
a set of models, is there a propositional formula with exactly 
the given set as  its satisfying assignments?  Without any re­
strictions on the class of formulas considered, the question is 
trivial, since for a given set of models M, it is always possible 
to create a formula in disjunctive normal form (DNF) captur­
ing  exactly  M.  Kavvadias  and  Sideri  consider this  question 
with  respect  to  the  class  of  formulas  expressible  by  a  pre-
specified  constraint  language -  a  set  of relations  which  can 
be used  to express constraints.  Their intriguing main  result 
is that the complexity of the inverse satisfiability problem re­
flects exactly that of the classical satisfiability problem:  for a 
fixed constraint language, inverse satisfiability is intractable if 
and only if satisfiability is intractable!  For instance, INVERSE 
3-SAT is intractable, as 3-SAT is intractable; but, INVERSE 
2-SAT is tractable, as 2-SAT is tractable. 

The inverse satisfiability problem is akin to the identifica-
tion  problems  studied  by  Dechter  and  Pearl  [1992],  which 
involve  deciding  whether  or  not  explicitly  given  relational 
data  in  the  form  of tuples  has  an  implicit  description  as  a 
constraint  network  with  particular  features.  Studying  such 

inverse  or  identification  problems  is  valuable  for  a  vari­
ety  of reasons,  as  articulated  in  [Dechter  and  Pearl,  1992; 
Kavvadias and  Sideri,  1998].  First,  certain restricted forms 
of propositional  formulas,  such  as  Horn  formulas,  facilitate 
efficient reasoning.  Hence, the ability to decide when an ex­
plicitly given set of models can  be represented in  such a re­
stricted  form,  is  desirable.  Second,  model-based represen­
tations of information have been proposed as  a viable alter­
native to formula-based representations  [Kautz  et a/.,  1995; 
Khardon and Roth,  1996];  inverse problems address the rel­
ative  expressibility  of  these  two  types  of  representations. 
Third,  discovering  structure  in  empirical  data  is  a  crucial 
component of scientific  activity,  and  so  understanding when 
structure discovery is computationally feasible sheds light on 
the nature of such activity. 

In  this  paper,  we  further  investigate  the  relationship  be­
tween  implicit  and  explicit  descriptions  of  data  by  consid­
ering  the  complexity  of  inverse  circumscription,  an  analog 
of the inverse satisfiability  problem  for circumscription.  Cir­
cumscription is a well-studied non-monotonic reasoning for­
malism intended to embody common sense, and provides an 
alternative  semantics  for  propositional  formulas  [McCarthy, 
1980].  Intuitively, the models of the circumscription of a for­
mula are those models of the original formula which make as 
few "assumptions" as necessary. The inverse circumscription 
problem addresses the expressiveness of circumscription:  this 
problem involves deciding, roughly speaking, if a set of mod­
els can be described by a circumscribed formula (over some 
constraint  language).  Studying  the  complexity  of this  prob­
lem  is  natural  not only  for  the  aforementioned reasons,  but 
also because circumscribed formulas are more space-efficient 
than  uncircumscribed  formulas:  knowledge  can  be  repre­
sented  more  succinctly  with  the  former than  with  the  latter, 
in a sense made precise in [Cadoli et a/.,  1997]. 

There are at least two generalizations of the inverse satis­
fiability  problem to the context of circumscription.  One gen­
eralization is the problem of deciding, given a set of models, 
whether or not there exists  a circumscribed  formula (over a 
specified constraint language) with exactly the input set as its 
models.  A second generalization is the problem of deciding, 
given a set of models,  whether or not there exists a formula 
such that all models of the input set are models of the circum­
scribed formula - in other words, the problem is to decide the 
existence  of an  approximating  formula whose  circumscribed 

KNOWLEDGE  REPRESENTATION 

449 

models covers the input set of models. We note that the tight­
ness of the approximating formula is not what is at stake.  In 
our  formulation  of this  problem,  it  is  possible  to  efficiently 
compute a candidate formula 
such  that if there is  any  for­
mula 
also covers 
the input set and  has fewer models than  ,  (that is, the model 
set  of 

covering the  input set of models, then 

is a subset of the model set  of 

As  we  will  show,  the  complexity  of the  first  generaliza­
tion, for almost all constraint languages, can be characterized 
fairly easily  using previous results.  Consequently, the  focus 
of this  paper is  on  the complexity of the  second generaliza­
tion, which we call the inverse circumscription problem. Our 
main  result  is  a dichotomy theorem  in  the complexity of in­
verse circumscription, which states that for all constraint lan­
guages,  inverse  circumscription  is  either  in  P,  or  is  co-NP-
complete. 

Complexity  dichotomy  theorems  arc  important  because 
they  demonstrate  a  full  understanding  of the  complexity  of 
a  problem,  with  respect  to  a  particular form  of problem  re­
striction (in our case, a restriction on the constraint language). 
The first dichotomy theorem was obtained by Schaefer, who 
showed  that  the  propositional  satisfiability  problem  over  a 
fixed constraint  language  is  either  in  P,  or  is  NP-complcte. 
The  non-trivial  tractable  cases  of satisfiability  given  by  this 
result are 2-SAT,  HORN  SAT,  and  XOR-SAT (where each 
constraint is a linear equation in the field with two elements). 
Since Schaefcr's result, many other dichotomy theorems have 
been established [Creignou et al, 2001 J. 

Kirousis  and  Kolaitis  [2001a]  very  recently  established  a 
dichotomy theorem  in  the complexity of model checking for 
circumscription.  The model  checking problem is to decide, 
given an assignment and a formula, whether or not the assign­
ment is a model of the circumscribed formula. Their theorem 
states  that,  for any constraint language,  the  model  checking 
problem  is  either  in  P or  is  co-NP-complete.  Interestingly, 
we  show  that  (for  any  constraint  language)  the  complexity 
of inverse  circumscription  is  exactly  the  complexity  of this 
model checking problem, giving a correspondence analogous 
to  that  between  the  complexity  of  inverse  satisfiability  and 
the complexity of satisfiability.  In  fact,  to establish  hardness 
of inverse  circumscription,  we  will  reduce  from  the  model 
checking problem. 

2  Preliminaries 
In  this  section,  we  present the  definitions  and  notation  that 
will be used throughout the paper.  We first introduce the no­
tation of a constraint; constraints will be the building blocks 
of the propositional formulas we consider. 

We  next  introduce the  notion  of a  5-formula,  which  is  a 
propositional formula built using the relations of a constraint 
language S as "templates." 

Definition 2.2  A  constraint  language  S  is a finite set of log(cid:173)
ical  relations  (which  may  contain  relations  of different  ar-
ities).'  The  maximum  arity  of S  is  the  maximum  over  the 
arities of the  relations in  S. 

An  5-formula  over  variable  set  V  is  a  set  of constraints 
(over V) where the logical relation of each constraint is in 5. 
An 5-formula with constants over variable set V is a set of 
constraints with constants (over V)  where the logical relation 
of each constraint is in S. 

We move on to describe the set of models associated with 
a formula.  Intuitively, a model of a formula is an assignment 
to the variable set which obeys all constraints. 

Definition 2.3  Let 
stants) over variable set V. 

be  an  S-formula  (possibly  with  con(cid:173)

An assignment to 

When W 
is  a  subset  of  V,  f  \w  denotes  the  restriction  off  to  W;  and, 
denotes  the  extension  of f  where 

is a function 

.  ,  , for all 

The assignment f satisfies a  constraint 

. . ., x^)  of 

if the  tuple 

The  assignment  f  satisfies 

is in R. 
//" it  satisfies  all  constraints 
in  this case,  it is said to be a satisfying assignment or 

in 
model of* 

Define Models 

to be the set containing all models of 

For a fixed 5, the problem of deciding whether or not an in­
put 5-formula has a satisfying assignment  is in  NP, since in 
non-deterministic  polynomial  time,  a  satisfying  assignment 
can be guessed and verified.  The following example demon­
strates that there is an  S for which this satisfiability problem 
is equivalent to that for 3-SAT, and hence NP-complete. 

3-SATformula  can  be  efficiently converted into  a  S3-formula 
with exactly the same set of satisfying assignments, and vice-
versa. For example, the 3-SAT formula 

is equivalent to the 

Definition 2.1/4 subset  of 
(for some 
a logical relation, and is said to have arity k. 

A  constraint  over  variable  set  V  is  a  logical  relation  R 
paired  with  a  list of v a r i a b l e s w h e re  k  is  the 
arity of R,  and is  written 

A  constraint with constants over variable set V  is a logical 
relation  R  and  a  list  of variables  or  constants  y\,..., y^  € 
where  k  is  the  arity  of  R,  and  is  written 

is called 

We generalize the definition of  S3  in  Example 2.4 as fol­

lows. 

Definition 2.5  Let 

be  the  set  of relations 
and 
is the tuple with  1  in the first i coordinates, and 

where 

0  in  the  remaining  k  -  i  coordinates. 

Throughout this paper, we assume that all  logical  relations and 

constraint languages are non-empty. 

450 

KNOWLEDGE  REPRESENTATION 

Having defined  the notion of a model  of a formula, we now 
define  what it  means  for a  model  to be  minimal.  The circum­
scription of a formula is considered to have, as its models, the 
minimal  models  of  the  original  formula  [McCarthy,  19801. 
We  consider minimality  with  respect to a  subset  P of the  vari­
able  set:  a  model  is  minimal  if there  is  no  model  "below"  it 
in  a comparison based  on  the  variables  in  P. 
(possibly  with  con-
Definition 2.6  Let  
stants)  over  variable  set  V,  and  let  P  be  a  subset  of V.  Let  < 
denote  the  standard  total  ordering  o n w h e re  0  <  1. 

be  an  S-formula 

that 

Suppose 

  both 
assignments  over  the  same  variable  set  V.  We  write  a  —p  B 
if 
if  for  all 

for 

d,a

all 

re

a

n

.  We  write 
e

t

We  w r

i
We  write 

a

nd  it  is 

if  neither 

not  the ease that 
nor 
domain  of 
above 

relations. 

holds.  When  the  set  P  is  equal  to  V  (the  entire 
we  sometimes  omit  it  when  writing  the 

We say  that 

is  a  minimal  satisfying  assignment  (or  min­

imal  model)  of   with  respect  to  P 
for  all  m o d e l s i m p l

if 
i es 

is  a  model  of 

:  and, 

Define  MinModels 

to  be  the  set  containing  all  mini(cid:173)

mal  models  of  with  respect  to  P. 

We  now  introduce  some  terminology  that  can  be  used  to 
describe  constraint  languages;  this  terminology  will  prove 
to  be  quite  wieldy  in  describing  many  of  the  complexity  di­
chotomy theorems presented in the next section.  As usual, we 
define  a  CNF-SAT  formula  over  variable  set  V  to  be  a  con­
junction  of  clauses,  where  each  clause  is  the  disjunction  of 
literals  from  V.  (A  literal  from  variable  set  V  is  either  a  vari­
able u 
Literals  of 
the  former  type  are  called positive,  whereas  those  of the  latter 
type  are  called  negative.)  An  assignment  / 
{ 0 , 1} 
satisfies  a  CNF-SAT  formula  
contains 
a  literal  evaluating  to  true  under  /. 
Definition  2.7  A 
where  each  clause  contains  exactly  two  literals. 

V  itself,  or the  negation  of a  variable  

is  a  CNF-SAT formula 

if every  clause  of  

Injunctive  formula 

:  V  —> 

A  (dual)  Horn  formula  is  a  CNF-SAT  formula  where  each 

clause  contains  at  most  one  positive  (negative)  literal. 

An  affine formula 

is  a  conjunction  of equations  of the form 
where  the  xi  are  variables  and 
{ 0 , 1} 
logical 
"exclusive 

the 

is  a  constant.  (The  symbol  <  denotes 
or/') 
Definition  2.8  Let  R,  be  a  logical  relation  of arity  n,  and  S 
be  a  constraint 

language. 

The  relation  R  is  0-valid  if  it  contains  the  all-zeroes  tuple 
( 0 , . . .,  0)  of arity  n,  and  is  1-valid  if it  contains  the  all-ones 
tuple  ( 1 , . . .,  1)  ofarity  n. 

The 

relation  R 

is  bijunctive  (Horn,  dual  Horn,  affine) 

if 
there  exists  a  bijunctive  (respectively  Horn,  dual  Horn,  affine) 
formula  o v e r w i
signments  as  the 
The  constraint 

the  same  set  of satisfying  as(cid:173)

-formula 
language  S 

th 

if  every  relation  contained  in  S 

is  0-valid  (l-valid,  bijunctive, 
is 
dual  Horn, 

bijunctive,  Horn, 

Horn,  dual  Horn,  affine) 
0-valid 
affine). 

(respectively 

l-valid, 

The  constraint  language  S  is  Schaefer  if at  least  one  of the 
is  Horn,  S 

following four  conditions  hold:  S 

is  bijunctive,  S 

is  dual  Horn,  S  is  affine.  The  constraint  language  S  is  non-
Schaefer  if it  is  not  Schaefer. 

3  Related Work 
This  section  reviews relevant  work done  previously;  through­
out,  S  is  used to denote  a constraint  language.  We  first  men­
tion  the  seminal  work  of  Schaefer,  who  proved  a  complex­
ity  dichotomy  theorem  on  the  satisfiability  problem  for  S-
formulas. 

Definition  3.1  The  S A T( S)  decision problem. 

S-formula 

Input:  An 
Question: 
The  SATQ(S)  decision  problem 

satisjiable? 

Is 

is 

identical,  except  the 

in(cid:173)

put  S-formula  can  have  constants. 

,  if  the  set  Models  

In  other  words,  the  S A T ( S)  problem  is  to  decide,  for  a 
given  S-formula  
is  non-empty.  Re­
markably,  Schaefer  proved  that  for  any  constraint  language 
S,  S A T ( S)  is  either  in  P  or  is  NP-complete;  in  addition,  he 
gave a precise description of which constraint  languages yield 
a  tractable  satisfiability  problem,  and  which  do  not. 

Theorem  3.2 
guage. 

[Schaefer,  1978]  Let  S  be  a  constraint  lan(cid:173)

If S  is  0-valid,  l-valid,  or  Schaefer,  then  S A T ( S)  is  in  P; 

otherwise,  S A T ( 5) 

is  NP-complete. 

If S  is  Schaefer, 
is  NP-complete. 

then 

is  in  P;  otherwise,  SATC  (S) 

Kavvadias  and  Sideri  [1998]  studied  the  "inverse  satisfia­
bility problem"  (denoted here by  I N V E R SE  S A T C ( S ) ).  In  the 
"standard" satisfiability  problem the goal  is to decide, given a 
formula,  whether  or  not  there  exists  a  satisfying  assignment. 
In  the  "inverse"  problem,  the  given  input  is  a  set  of assign(cid:173)
ments,  and  the  goal  is  to  determine  whether  or  not  there  ex­
ists  a  formula with  exactly the  given assignments  as  its  set  of 
satisfying  assignments. 

Definition  3.3  The  INVERSE  SATc(S)  decision  problem. 

Input:  Set  A  of assignments  over  the  same  variable  set  V. 
S'formula  with  constants  such  that 
Question:  Is  there  an 

A  =  Models 

A  dichotomy  theorem  was  established  by  Kavvadias  and 
Sideri,  which  shows  that  the  inverse  satisfiability  problem  is 
always  in  P,  or  is  CO-NP-complete. 
Intriguingly,  the  com­
plexity  of the  inverse  problem  reflects  exactly  the  complexity 
of  the  satisfiability  problem: 
is  intractable  if  and 
only  if I N V E R SE  S A T C ( S)  is  intractable! 

Theorem  3.4 
straint 

language. 

[Kavvadias  and  Sideri,  1998]  Let  S  be  a  con(cid:173)

If  S  is  Schaefer, 

then  INVERSE  SATc(S)  is  in  P;  other(cid:173)

wise, 

I N V E R SE  

is 

co-NP-complete. 

We  now  formalize  the  model  checking  problem  for  cir­
cumscription,  which  was  called  "minimal  satisfiability"  in 
[Kirousis  and  Kolaitis,  2001a]. 

Definition  3.5  The  M lN  S A T ( S)  decision  problem. 

Input:  An 

S-formula 

over  variable  set  V,  an  assignment 

satisfying 

and  a  subset  P  ofV. 

KNOWLEDGE REPRESENTATION 

451 

Question:  Is the assignment  a  minimal model  of  with 

respect to P? 

The  MlN  SATc(S)  decision problem  is  identical,  except 

the input S-formula can have constants. 

is  not  strictly  below 

The  MlN  S A T ( S)  problem  is  in  CO-NP,  as  deciding 
whether or not  a  is  a  minimal  model  of a  formula amounts 
to  verifying  -  for  all  assignments 
is a model, 
then 
Cadoli 
[1992] showed that this problem is CO-NP-complete in gen­
eral, and also identified some tractable cases.  More recently, 
the following full dichotomy theorem was proved concerning 
the  complexity  of  MlN  S A T ( 5 ). 
Theorem 3.6  [Kirousis and Kolaitis,  2001a,  Theorem 4.2]2 

-  that  if 
in  the  ordering 

Let 5 be a constraint language. 
If S  is  Schaefer,  then  MlN S A TC( 5)  is  in  P;  otherwise, 

MlN SATc(5) is CO-NP-complete. 

If S is 0-valid or Schaefer,  then MlN  S A T ( S)  is in  P; oth(cid:173)

erwise,  MlN  S A T ( S)  is CO-NP-complete. 

4  The Inverse Circumscription Problem 
The  inverse  satisfiability  problem  (defined  formally  in  the 
previous  section)  is  to  decide,  given  a  set  of assignments, 
whether  or  not  there  is  a  formula  with  precisely  the  given 
input set as its models.  The inverse circumscription problem, 
denoted by INVERSE MlN S A T ( 5 ), is similar in that the input 
is also a set of assignments and the task is to decide whether 
or not there is a formula describing the input set.  However, in 
the inverse circumscription problem, the question is whether 
there exists a formula  such that all of the given assignments 
are minimal models of 
Definition  4.1  The 
lem. 

INVERSE  MlN  S A T ( S)  decision  prob(cid:173)

Input: Set A of assignments over the same variable set V, 

. 

and a  subset P of V. 

Question: 
MinModels 

Is  there  an  S-formula  (f)  such  that  A 

The  INVERSE MlN  SATC{S)  decision  problem  is  identi(cid:173)
cal,  except the question is to decide if there is an  S-formula 
with constants satisfying the stated condition. 

As mentioned in the introduction, there is a natural variant 

of the  INVERSE M IN  S A T C ( 5)  problem  which  has  an  iden­
symbol  is  replaced  with  an 
tical  description,  except the 
=  symbol  in  the  "question."  Let  us  denote  this  variant  by 
INVERSE E X A CT  M IN  S A TC( 5 ).  We  have  the following re­
sults concerning this question. 
Theorem 4.2  Let S be a constraint language. 

If S  is  bijunctive or Horn,  then 

INVERSE  E X A CT  M IN  S A TC( 5)  is  in  P. 

2Wc  note  that  the  notation  of  [Kirousis  and  Kolaitis,  2001a] 
is  different  from  ours. 
In  particular,  their  decision  problem 
M IN SAT(S) involves checking, given an assignment and formula, 
if the assignment is minimal with respect to all variables.  It is eas­
ily verified that our definition of MlN S ATc (5) is equivalent to their 
(P; Q; Z) - MlN S AT(5), and that our definition of MlN S AT(5) is 
equivalent to their 
- MlN SAT(5). The theorem is stated 
here with respect to our notation. 

IfS is non-Schaefer, then INVERSE EXACT MlN  SATC(5) 

is CO-NP-complete. 

from 

E X A CT  

INVERSE 

INVERSE  E X A CT M IN  S A TC( 53) 

For  non-Schaefer  constraint  languages  5,  hardness  of 
can  be  shown  by  first  es­

INVERSE 
tablishing  the  hardness  of  INVERSE  E X A CT  M IN  S A TC( 53) 
by  reduction 
ducing 
from 
using  a 
in 
INVERSE 
, 
[Kavvadias  and  Sideri,  1998]. 
For  Schaefer  constraint 
languages  5,  the  existence  of  an  output  polynomial  time 
algorithm  for  computing  minimal  models  of  a  5-formula 
implies  the  tractability  of  INVERSE  E X A CT  M IN  S A T C ( 5 ); 
see  iKavvadias et al. , 2000]  for such algorithms in  the case 
of constraint languages S that are bijunctive or Horn. 

to 
technique 

E X A CT  M IN  

then  re­

,  and 

For  the  remainder  of  this  paper,  we 

focus  on 

the 

INVERSE M IN S A T ( S) decision problem. Given an input set 
A of this problem, it is possible to efficiently compute a "can­
didate  formula"  having  the  property  that  if there  is  any for­
mula containing A in its set of minimal models, then the can­
didate formula is such a formula.  That is, the candidate for­
mula serves to witness that "yes" is the answer to the decision 
question of Definition 4.1 - so long as some formula does. 
Definition 4.3  Suppose that S is a constraint language and 
that A  is a set of assignments over the same  variable set  V. 
Define the candidate 5-formula for A to be the set containing 
all constraints (over V and with  relation  in  S) that are satis(cid:173)
fied by every assignment in A.  Similarly, define the candidate 
5-formula for  A  with  constants  to  be  the  set  containing all 
constraints  with  constants  (over  V  and  with  relation  in  S) 
that are satisfied by every assignment in A. 
Lemma 4.4  Suppose  that  5  is  a  constraint  language  and 
that  A  is  a  set  of assignments  over  a  variable  set  V.  Let 
P  be a  subset of V,  and let 
be  the  candidate  S-formula 
(with  constants)  for  A.  There  exists  an  S-formula  (with  con(cid:173)
stants) 
MinModels(if and  only  if 
A  MinModels 

such  that 

For  a  fixed  constraint  language  5, 

the  candidate  5-
formula  for  a  set  of  assignments  A  can  be  computed  in 
polynomial  time  (measured  with  respect  to  the  size  of  the 
representation  of A).  By  the  key  property  of  the  candidate 
formula (Lemma 4.4), it follows that INVERSE M IN S A T ( S) 
is  in  CO-NP:  an  assignment 
which  is  not  included  in 
A,  satisfies  the  5-candidate  formula  of  A,  and  is  strictly 
below  an  assignment  in  A  (with  respect  to 
, serves as 
a  succinct  and  efficiently  checkable  proof that  A  is  a  "no" 
instance  of  INVERSE  M IN  S A T ( 5 ). 
(By  similar  reasoning, 
INVERSE  E X A CT  M IN  S A T C ( S) 
INVERSE 
can be shown to be in CO-NP, as discussed in IKavvadias and 
Sideri, 1998].) 

and 

Whenever the  model  checking  problem  M IN SAT(5)  is 
in  P,  the  inverse  problem  INVERSE  M IN  S A T ( 5)  will  be  in 
P.  This  is  because deciding  whether or not  an  input set  A 
to  the  INVERSE M IN  S A T ( 5)  problem  is  a  "yes"  instance 
amounts  to  verifying  that  every  assignment  in  A  is  a  min­
imal  model  of  the  candidate  formula  for  A\  clearly,  this 
can  be  done  in  polynomial  time  when  MlN S A T ( 5)  is  in 
P.  To prove a full dichotomy theorem on  the complexity of 

452 

KNOWLEDGE  REPRESENTATION 

INVERSE M IN S A T ( S ),  it remains to describe  the complex­
ity  of  INVERSE  M IN  SAT(S')  for  the  constraint  languages  S 
such that M IN S A T ( S) is not in P. 

5  Dichotomy  Theorem 
In  this  section,  we  describe  completely  the complexity  pro-
tile  of  the  "inverse  circumscription  problem." 
In  partic­
ular,  we  show  that  for  those  constraint  languages  S  such 
that  M IN  S A T ( S) 
is  also  CO-NP-hard  (and  similarly  for  M IN SATc(S)  and 
INVERSE  M IN  S A TC( S ) ). 
is 

to  prove  hardness  of 

INVERSE M IN  S A T ( S) 

is  co-NP-hard, 

step 

Our 

first 

the 

for  9-SAT 

INVERSE M IN  S A T ( 5)  problem 
formulas, 
where  the  circumscription  is  performed  with  respect  to  all 
of the  variables.  This  initial  hardness  result  is  then  used  to 
establish  the  hardness  of  INVERSE M IN  S A T ( S)  for  other 
constraint languages S. 
Theorem 5.1  The  problem 
is 
CO-NP-hard, even with the restriction that the subset P must 
be equal to the entire variable set. 

INVERSE MlN  S A T ( 59) 

The  proof of this  theorem is  sketched  in  Appendix A;  the 
hardness  result  claimed  by  the  theorem  is  achieved  by  re­
duction  from  the  MlN  S A T ( S)  problem.  The  hardness  of 
INVERSE M IN S A T ( S9) can  then  be  leveraged  to  establish 
the  hardness  of  INVERSE MlN  S A TC( £ ),  for  the  remaining 
constraint languages S. 
Theorem 5.2  Let  S  be  a  constraint  language.  If S  is  non-
Schaefer, then INVERSE MlN  SATC(S)  is CO-NP-hard. 

Then,  constants  can  be  "removed"  in  such  a  way  that 

allows  the  hardness  of  INVERSE  M IN  S A T ( S)  to  be  estab­
lished,  based on the  hardness of INVERSE  M IN  S A T C ( S ). 
Theorem 5.3  Let S be a constraint language.  If S is neither 
0-valid nor Schaefer, then INVERSE MlN S A T ( S) is CO-NP-
hard. 

Collecting together the theorems of this section as well  as 
the discussion at the end of Section 4, we have the following 
dichotomy theorem. 
Theorem 5.4  Let S be a constraint language. 

IfS is Schaefer, then INVERSE  MlN  SATc(S) is in P; oth(cid:173)

erwise,  INVERSE  M IN  S A T C ( S)  is  co-NP-complete. 

If S is 0-valid or Schaefer, then INVERSE MlN S A T ( S) is 
in P; otherwise,  INVERSE MlN SAT(S) is CO-NP-complete. 

6  Conclusions and Future Work 
In this paper, we formalized and studied inverse circumscrip(cid:173)
tion.  We  established  a full  dichotomy  theorem  in  the com­
plexity  of  this  problem  (Theorem  5.4).  A  fascinating  phe­
nomenon  is  that  the  complexity  of  inverse  circumscription 
reflects exactly the complexity of model checking for circum­
scription  (Theorem  3.6).  This  correspondence  in  complex­
ity parallels the intimate relationship between the complexity 
of inverse  satisfiability  (Theorem  3.4)  and  that of satisfiabil­
ity  (Theorem  3.2).  The  resemblance between  the  results on 
circumscription and those on propositional logic seems quite 

strong,  as  the  hardness  of inverse circumscription  is  estab­
lished by reduction from model checking for circumscription 
-just as the hardness of inverse satisfiability is established by 
reduction from satisfiability [Kavvadias and Sideri,  19981. 

It  would  be  of great interest  to  investigate  further the  re­
lationship between  "inverse" problems (mapping an explicit 
description to an implicit description) and more classical "for­
ward"  problems  (mapping  an  implicit  description  to  an  ex­
plicit  description).  A  concrete  goal  for  future  work  is  to 
study  inverse  problems  for  other  non-monotonic  reasoning 
formalisms. 

Acknowledgements.  The author wishes to thank Bart Sel-
man for useful discussions and suggestions, and Joe Halpern 
for his  advice  on  the  preparation  of the  final  version of this 
paper. 

P r o of Sketch  of T h e o r em  5.1 

,  we say that an assignment b  :  V 

A 
Definition A .l  Let A  be a  set of assignments over the  vari(cid:173)
able set V.  For 
{(), 1} is k-compatible with A if for every size k subset W of 
V, there exists an assignment a  A such that 
Lemma A.2  Let  S  be  a  constraint language  with  maximum 
arity k, and let A be a set of assignments over the variable set 
is  the  candidate  S-formula for  A  (with 
V.  Suppose that 
,  If b  is  r-compatible  with  A for all r  =  1 , . . ., fc, then 

Moreover, the converse holds if 

b satisfies 
1, 
Definition A.3  Let  S  be a  constraint language.  For  r 
an  r-pattern  of  an  S-formula  over  V  is  a  pair  (W,  T)  such 
that 
—► {0,1} is an assignment 
to  the  variables  of W,  and for  all clauses 
R(x1

if T  is defined on  the  variables 

(that is, 

k 
........,x

,  then T satisfies 

In other words, an r-pattern for a formula 

is a subset W 
of the variable set  of  of size r  along with an assignment to 
W which does not falsify any clause  of 

, . . .,  fc.  If  

is a bit vector 

equal to  on  V\,  and equal to v on 

Before giving the proof,  we introduce the following nota­
tion.  A  vector  x  of length  k  is  an  ordered  list  of variables 
( x1, . . ., Xk).  If  
and  f 
is a vector of length fc, we let  ^  j denote the function map­
ping  xt  to  bi  for all  
and 
v  : 
are assignments with disjoint domains (that 
we denote the function with do­
is, 
by 
main 
When 
z  is  a  vector of variables  and  /  is  an  assignment defined  on 
denote the restriction of /  to the 
the variables  of  we let 
variables  of 
denote the 
set { 1 , .. .,fc}. 
Proof.  By  [Kirousis  and Kolaitis,  2001a, Theorem 3.8],  the 
where the variable set P is promised 
version of MlN 
to  be  the  entire  variable  set  is  CO-NP-complete.  To  prove 
hardness  of  I N V E R S E we  give  a  reduction 
,.  In particular, given a S3-
from this version  of 
formula  ,  and an assignment a satisfying 
, we create a set 
of assignments A  over a variable set X  such  that there is  an 
S9  formula  with  A  MinModels 
if and only if a is 

For a positive integer fc, we let 

KNOWLEDGE  REPRESENTATION 

453 

is not a minimal model  of  ,  This implies the correctness of 
our reduction, as then we have that there exists no 
-formula 
if and only  if a  is  not a 

such that A  MinModels 

minimal model of 

References 
[Cadoli,  1992]  Marco  Cadoli.  The  Complexity  of  Model 
Checking for Circumscriptive Formulae.  Information Pro­
cessing Letters, 44(3): 113-118, 1992. 

[Cadoli  etal,  1997]  Marco  Cadoli,  Francesco  M.  Donini, 
Marco Schaerf, and Riccardo Silvestri.  On Compact Rep­
resentations of Propositional Circumscription.  Theoretical 
Computer Science, 182:183-202, 1997. 

[Creignou et al., 2001]  Nadia  Creignou,  Sanjeev  Khanna, 
and Madhu Sudan. Complexity Classifications of Boolean 
Constraint Satisfaction  Problems.  S1AM  Monographs on 
Discrete Mathematics and Applications, SI AM, 2001. 

iDechter and Pearl,  1992]  Rina  Dechter  and  Judea  Pearl. 
Structure  identification  in  relational data.  Artificial Intelli­
gence, 58:237'-270, 1992. 

[Kautz etal.,  1995]  Henry  Kautz, Michael  Kearns, and Bart 
Selman.  Horn  Approximations of Empirical  Data.  Artifi­
cial Intelligence, 74(1): 129-145,  1995. 

[Kavvadias and Sideri,  1998]  Dimitris 

and 
Martha Sideri.  The Inverse Satisfiability  Problem.  SIAM 
Journal on Computing, 28(1): 152-163,  1998. 

Kavvadias 

[Kavvadias etal, 2000]  Dimitris  J.  Kavvadias,  Martha 
Sideri and Elias C. Stavropoulos.  Generating all maximal 
models of a Boolean expression.  Information Processing 
Letters, 74:157-162,2000. 

[Khardon and Roth,  1996]  Roni  Khardon  and  Dan  Roth. 
Reasoning  with  Models.  Artificial  Intelligence,  87:187-
243, 1996. 

[Kirousis and Kolaitis, 2001a]  Lefteris  M.  Kirousis  and 
The  Complexity  of  Minimal 
Phokion  G.  Kolaitis. 
In  Proceedings  of  the  18th 
Satisfiability  Problems. 
Annual  Symposium  on  Theoretical  Aspects  of Computer 
Science,  volume  2010  of  Lecture  Notes  in  Computer 
Science, pages 407-418. Springer, 2001. Full version at: 
Electronic  Colloquium  on  Computational  Complexity  -
(www.eccc.uni-trier.de/eccc), Report No. 82, 2000. 

[Kirousis and Kolaitis, 2001b]  Lefteris  M.  Kirousis  and 
Phokion G.  Kolaitis.  A  Dichotomy  in  the Complexity  of 
Propositional Circumscription. In Proceedings of the J 6th 
Annual IEEE Symposium on Logic  in  Computer Science -
LICS 2001, pages 71-80,2001. 

[McCarthy,  1980]  John  McCarthy. 

Form  of  Non-Monotonic  Reasoning. 
gence, 13:27-39, 1980. 

Circumscription—A 
Artificial  Intelli­

[Schaefer,  1978]  Thomas J. Schaefer. The complexity of sat­
In  Proc.  10th Annual ACM Sympo­

isfiability  problems. 
sium on Theory of Computing, pages 216-226,1978. 

Let ( W1, T1) , . . ., (VVm,Trri)  be all of the 9-patterns of 0. 

Our set of assignments A  will  be of size m  +  1:  it will  have 
one assignment a1  :  X  —►  {0,1} for each of the 9-patterns 
(Wl,Tl), as well as one assignment a  :  X —> {0,1}  encoding 
the  assignment  o  :  V  —>  {0,1}.  The  partial  assignments 
will be used as building blocks to define 

, and 

the assignments in  A. 

Define 

Define 
Also,  for  any  assignment  / 

:  V  —> 

{0,1},  define 

/  :  X  —>  {0,1}  to  be  the  assignment 

Define  A,  the  output  of  the  reduction,  to  be  the  set 

Let us say that a pair of assignments (d : X  —►  {0,1}, c : 
X  —»  {0,1})  is  a  violating pair  if the  following  four con­
ditions  are  met:  1)  d 
c,  and 
4)  d  is  9-compatible  with  A. 
Intuitively,  a  violating  pair 
(d, c)  is  evidence  that  there  is  no  59-formula  
such  that 
A  MinModels 

A,  3)  d 

A,  2)  c 

More  formally,  observe  that  a  violating  pair exists  if and 

A  and 

MinModels 

A  such  that  d 

only  if  there  exists  ad 
c  and  d  satisfies  the  candidate  59-formula 
for  A,  by 
Lemma  A.2.  This  occurs  if  and  only  if  it  is  not  the  case 
that  A 
since  (as  is  easily  verified) 
the assignments in A are pairwise incomparable.  By Lemma 
4.4,  it  is  not the  case  that  A 
if  and 
only  if  for  all  S9-formulas 
M i n M o d e l s.  Hence, a violating pair exists if and only 
-formula  such that A  MinModels(ψ, -X"). 
if there is no 
The  remainder  of  the  proof,  omitted  due  to  space  con­
straints, establishes that a violating pair exists if and only if a 

MinModels 
it  is  not  the  case  that  A 

454 

KNOWLEDGE  REPRESENTATION 

