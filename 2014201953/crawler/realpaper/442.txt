Logical Filtering 

Eyal Amir and  Stuart Russell 

Computer Science Division, University of California at Berkeley 

Berkeley, CA 94720-1776, USA 
{eyal,russell}@cs.berkeley.edu 

Abstract 

Filtering denotes any method whereby an agent up(cid:173)
dates its belief state—its knowledge of the state of 
the world—from a sequence of actions and obser(cid:173)
vations. In logical filtering, the belief state is a log(cid:173)
ical formula describing possible world states and 
the  agent has  a  (possibly  nondeterministic)  logi(cid:173)
cal  model  of its  environment  and  sensors.  This 
paper presents efficient logical filtering algorithms 
that  maintain  a  compact  belief state  representa(cid:173)
tion indefinitely, for a broad range of environment 
classes  including  nondeterministic,  partially  ob(cid:173)
servable STRIPS environments and environments 
in which actions permute the state space. Efficient 
filtering is also possible when the belief state is rep(cid:173)
resented using prime implicates, or when it is ap(cid:173)
proximated by a logically weaker formula. 

Introduction 

1 
Any  agent  operating  in  a partially  observable environment 
must perform computations that distinguish among the a pri(cid:173)
ori possible current states of the world on the basis of past ob(cid:173)
servations and actions.  These computations may operate di(cid:173)
rectly on a representation of the action observation sequence 
(e.g., [Winslett, 1990; Kautz et  al,  1996]); they may reduce 
queries about the current state to queries about the initial state 
(e.g., [Reiter, 2001]); or, they may update the belief state (the 
agent's knowledge about the state of the world) after each ac(cid:173)
tion and observation. This latter approach, called filtering or 
recursive state estimation in the control theory literature, is 
particularly useful with unbounded sequences of actions and 
observations. 

The main computational difficulties are 1) the time needed 
to update the belief state, and 2) the space required to repre(cid:173)
sent it.  These depend on the nature of the transition model, 
which describes how the environment evolves over time, the 
observation model, which describes the way in which the en(cid:173)
vironment generates observations,  and the family  of repre(cid:173)
sentations used to denote belief states.  Early work, begin(cid:173)
ning with Gauss, assumed stochastic models.  For example, 
the Kalman filter [Kalman, 1960] is a ubiquitous device that 
maintains  a multivariate Gaussian belief state over n  vari(cid:173)
ables,  assuming linear-Gaussian transition and observation 

AUTOMATED  REASONING 

model. Crucially, the 0(/n3) update cost and the 0(n2) space 
requirement do not depend on the length of the observation 
sequence; hence, a Kalman filter can run indefinitely. In this 
paper, we are interested in developing analogous results in the 
context of logical representations. 

We adopt a simple logical language (Section 2) for describ(cid:173)
ing the transition and observation models; the observations 
and the belief state itself are also logical formulae.  The ini(cid:173)
tial state may be only partially known; the transition model, 
which allows for actions by the agent itself, may be nondeter(cid:173)
ministic; and the observation model may be nondeterministic 
and partial,  in the sense that the agent may not be able to 
observe the actual state. 

Even when we restrict ourselves to propositional logic, it 
is clear that the general  filtering  problem  is nontrivial  (we 
prove it is computationally hard), because there are exponen(cid:173)
tially many possible states.  We  identify several  classes of 
models that allow efficient filtering with respect to the belief-
state representation size.  Our primary method is based on 
decomposition theorems showing that  1)  filtering  distributes 
over disjunction  in the  belief state  formula,  and 2) filtering 
distributes over conjunction and negation if the actions are 
permutations of the state space. Such actions serve as one-to-
one mappings between states, for those states in which they 
can be applied. We obtain efficient, exact algorithms for DNF 
belief states and for NNF (Negation Normal Form - all nega(cid:173)
tions are in front of atoms) and CNF belief states with per(cid:173)
muting actions. In other cases, we obtain efficient algorithms 
for approximate filtering. 

In  another class  of dynamic  systems,  we  can  filter  effi(cid:173)
ciently if the belief state is represented in CNF that includes 
all its prime implicates. Finally, we show that STRIPS mod(cid:173)
els (possibly with nondeterministic effects of actions) also ad(cid:173)
mit efficient  filtering.  The  STRIPS  assumption,  that every 
action has no conditional effects and that an effect's precon(cid:173)
ditions are the preconditions for the action's execution, is key 
to this efficiency. 

With respect to maintaining a compact representation, we 
show that properties similar to those mentioned above allow 
us to filter A-CNF formulae (CNF with clauses of at most K 
literals, when k is fixed) such that the result is represented in 
K-CNF (for the same fixed k). Thus, the belief state is main(cid:173)
tained  in  0(nk)  space  indefinitely.  In particular,  we  show 
mild conditions under which a compact belief state can be 

maintained  in nondeterministic STRIPS domains and in per(cid:173)
mutation  domains.  Finally,  we  show  that  DNF belief states 
remain compact if the effects of actions are deterministic and 
guaranteed to hold.  These results  are the  first  analogues,  in 
the  logical  arena,  of  the  desirable  properties  possessed  by 
Kalman filters for continuous variables. 

Ours is by no means the first work on  filtering  in a logical 
context.  Early  on,  it  was  pointed  out  that  filtering  is  easy 
for deterministic systems with a known initial state [Fikes et 
al. , 1972; Lin and Reiter, 1997]. Filtering in nondeterministic 
domains is more difficult. In particular, the related problem of 
temporal projection is coNP-hard when the initial state is not 
fully  known,  or  when  actions  have  nondeterministic  effects 
[Liberatore,  1997] (see also Section 3.3). 

Traditionally,  computational  approaches  for  filtering  take 
one of three approaches:  1) enumerate the world states possi(cid:173)
ble in every  belief state and update each of those states sep(cid:173)
arately, together generating the updated belief state  [Ferraris 
and Giunchiglia, 2000; Cimatti and Roveri, 2000], 2) list the 
sequence  of actions  and  observations  and  prove  queries  on 
the updated belief state  [Reiter,  2001; Sandewall,  1994], or 
3) approximate the belief state representation [Son and Baral, 
2001; Williams and Nayak, 1996]. 

The first two approaches cannot be used when there are too 
many possible worlds (e.g., when the domain includes more 
than a few dozens of fluents and there are more than 240 pos(cid:173)
sible  states)  or  when  the  sequence  of actions  is  long  (e.g., 
more than 100 actions). Examples include robot localization, 
tracking of objects and  their relationships,  and data mining. 
The third approach gives rise to many mistakes that are some(cid:173)
times dangerous, and requires an approximation that fits the 
given problem (if one exists).  Many domains of 100 fluents 
or less are still computationally infeasible for it. 

2  Logical Filtering 
In  this  section  we  define  logical  filtering  using  a  transition 
model and action semantics that are compatible with the stan(cid:173)
dard  semantics  belief  update  operator  of  [Winslett,  1990]. 
(To  avoid  confusion,  this  is  different  from  another operator 
presented in the same publication,  PMA, that applies a non-
monotonic approach to formalize minimal change.)  This op(cid:173)
erator is simple and allows us to examine computational prop(cid:173)
erties easily.  It  can  represent  any  logical  transition  system, 
and specifications in other action languages can be compiled 
into it IWinslett,  1990; Doherty et a/.,  1998]. 

propositions that are true in this world state), A  is  the set of 
actions in the system and Rl(s, a, s')  means that state s'  is a 
possible result of action a in state s. 

A  logical  nondeterministic  domain  description  D  is  a  fi(cid:173)
nite set of statements of the following  kinds:  value proposi(cid:173)
tions  of the  form  'Initially  F"  describe  the  initial  state  and 
effect rules of the form "a causes F if G" describe the effects 
of actions,  for  F  and  G  being  state formulae  (propositional 
combinations of fluent names). We say that F is the head and 
G is the tail of those rules. 

When there is no confusion,  we  write  R  for RD. 

If action a has an effect of FALSE in s, then it cannot execute. 
In partially observable domains, we update our knowledge 
as a result of executing an action and collecting observations 
in the resulting state.  The following definition of filtering as(cid:173)
sumes  that a  is  a set of world states.  We use our transition 
operator  R  to define the resulting belief state  from each  ac(cid:173)
tion.  An observation o is a formula in our language. 

We call Step 2 progression with a and Step 3 filtering with o. 
For example, consider a robot that is in charge of cleaning 
a  room.  It  can  execute  an  action  a  =  fetch(broom, closet) 
which  has  the  single  effect  rule  "a  causes has(broom)  A 

AUTOMATED  REASONING 

3  Filtering Logical Formulae 
Approaches  to  filtering  actions  and  observations that  at any 
stage  enumerate  the  states  in  a  belief state  do  not  scale  to 
large domains.  An alternative approach is to perform logical 
progression in a form similar to the one described by [Lin and 
Reiter,  1997; Mcllraith,  1998]. The difference is that now we 
wish to do so (efficiently)  in the context of nondeterministic 
actions and observations. 

In this section we present a straightforward algorithm that 
filters belief state formulae directly, but does so in worst-case 
exponential  time.  This  algorithm  serves  as  a  starting point 
for  Section  4,  where  we  propose  efficient  algorithms.  We 
also  present  distribution  properties  of  filtering  over  the  log-

3.2  Distribution  Properties  and  Permutation 

the assertion that no precondition of a holds.  This has a sim(cid:173)
ilar effect to adding frame axioms to a set of effect axioms in 

Definition 3.3 (Permuting Actions).  Action  a is permuting, 
if for every state s' there is at most one s such that R(s, a, s'). 
Domains  that  include  only  permuting  actions  are  called 

permutation  domain. 

AUTOMATED  REASONING 

77 

For  example,  consider  a  —  fetch(broom, closet)  from 
above,  and  assume  that  we  add  a  second  effect  rule  "a 
causes  FALSE  if  -in{broom, closet)".  Thus,  a  is  not  exe(cid:173)
cutable unless its first rule's precondition holds. Then, the ac(cid:173)
tion is a one-to-one mapping between states, when this map(cid:173)
ping is defined (it is not defined when a state maps to no re(cid:173)
sulting state).  If this second rule is not added, then the action 
is not one-to-one because it maps two different states (in the 
first we already have the broom and in the second the broom 
is in the closet) to the same state. 

In  the  same  spirit,  an  action pickUp(A, D)  that  picks  up 
block A from the top of block B is one-to-one when it is pos(cid:173)
sible  because  we  can  find  a  single  previous  state  for  every 
resulting  state.  The  same  holds  for putDown(A,C).  Other 
natural  examples  include  turning  a  row  in  a  Rubik's  cube, 
flipping  a  light  switch,  and  buying  a  gallon  of  gas.  In  con(cid:173)
trast, turning on the light, setting a Rubik's cube to a partic(cid:173)
ular configuration, and  filling  up the gas tank are not permu(cid:173)
tation actions.  Notice that we  allow different actions to map 
different states to the same state (e.g., accelerating by 5MPH 
when driving 40MPH results in the same state as when decel(cid:173)
erating by 5MPH when driving 50MPH). 

The  proof of this  theorem  reduces  the  problem  of repre(cid:173)
senting  the belief state  after performing an  action  to  that  of 
representing a Craig Interpolant.  It uses the following. 

4  Efficient and Indefinitely Compact Filtering 
In this section we present the main contribution of this paper, 
namely,  a  polynomial-time  algorithm  that  computes  logical 
filtering  exactly  for  a  significant  class  of transition  systems. 
For  some  special  cases  we  present  simpler  algorithms  that 
are  even  more  efficient.  For  systems that  do not  fall  within 
this class our algorithm  gives an  approximation to the filter(cid:173)
ing.  Also,  we  show  that  we  can  keep  the representation  of 
the filtered belief state compact indefinitely for a class of dy(cid:173)
namic systems.  This class includes nondeterministic STRIPS 
systems and some systems whose actions are permuting. 

Limitations  for  Compact Representation 

3.3 
It may  be  argued that  filtering  may require  only  polynomial 
space, if we limit ourselves to initial belief states that are rep(cid:173)
resented compactly and to actions whose effects and precon(cid:173)
ditions are represented compactly.  In Theorem 3.5  we show 
the  contrary.  That  is,  for every  general-purpose  representa(cid:173)
tion of belief states there is a dynamic system,  an initial be(cid:173)
lief state,  and  a  sequence  of actions  after  which  our  belief 
state representation is exponential in the representation of the 
initial belief state. 

The conditions on action a in the last theorem hold, e.g., for 
actions whose every defining rule has a precondition that is a 
single clause (e.g.,  a literal).  It also holds for actions which 
are defined by at most two rules, and actions that affect all the 
literals that appear in their preconditions. 

Theorem 3.5.  There is dynamic system D with n fluents, be(cid:173)
lief  state  0,  and  action  sequence  a\,...,  an  such  that,  for  all 

78 

AUTOMATED  REASONING 

AUTOMATED  REASONING 

79 

Similarly,  for  in(broom, closet),  one  of our tests  in  step  1 

of NNF-ProgressStep finds that 

belief state  representation  is  no  larger than  (2n)k  which  is 
manageable for small  fixed  K's. 

The main observation that we use is that a clause of A: liter(cid:173)
als may give rise to a larger clause after  filtering,  only  if one 
of the  following  holds:  (a)  the  filtering  of TRUE  includes  a 
clause of more than fc literals;  or (b)  the  filtering  of a  literal 
includes a clause of 2 or more literals that is not subsumed by 
Filter[a](TRUE).  The  first  case  can  occur  when  we  do  not 
know  whether the action  succeeded  or not,  and  which  rules 
applied  if it did.  In  that  case,  we  know  that after the  action 
one of the effects holds or no precondition holds (this yields a 
formula which may include many disjunctions).  The second 
case can occur when the precondition of a rule includes a con(cid:173)
junction of literals.  When we filter a single literal we may get 
a disjunction in the result (of the form the effect holds,  or the 
rest of the precondition  does  not).  When  we  filter  a  clause, 
this may cause the  filtering  to include a larger clause. 

The  following  theorem  describes  sufficient  conditions  for 
filtering a A:-CNF formula into A:-CNF, thus keeping the rep(cid:173)
resentation compact (fc  is  fixed). 

4.2  D NF  and  C NF  Belief States 

4.3  Prime-Implicate Belief States 
It turns out that a form of distribution over conjunction holds 
for all actions if the belief state is represented as the conjunc(cid:173)
tion of all  of its prime implicates  (formulae  we call prime im(cid:173)
plicate belief states (Pl-CNF)). In this form we can distribute 
the computation to the conjuncts and conjoin the result of fil(cid:173)
tering small subgroups of them separately.  More precisely, 

for z a number that depends on the representation of the pre(cid:173)
conditions of a and on the number of rules defining a. 

Thus, when  a is a deterministic action  (every rule's effect 
is  a  conjunction  of literals)  with  a  single  effect  rule  that  is 
always  guaranteed  to  succeed,  then  the  number of disjuncts 
in the formula does not grow as the  filtering  progresses. 

For CNF formulae we can  find  a more significant class of 
actions that allow us to maintain compact representation.  We 
show that under some conditions every fc-CNF formula is  fil(cid:173)
tered  into a fc-CNF formula (fixed  fc).  This  implies that the 

80 

AUTOMATED  REASONING 

Figure 3:  Filtering a PI-CNF formula with STRIPS actions. 

We tested our STRIPS-filter algorithm  in partially observ(cid:173)
able blocks-world domains.  The implementation in LISP in(cid:173)
cludes  a random  action-sequence  and  observation-sequence 
generator,  and both the generator and  filtering  algorithm re(cid:173)
ceive  a  description  of the  domain,  actions  and  observations 
specified in PDDL (a plan-problem specification language). 
We  ran  the  algorithm  with  blocks-world  domains  of  in(cid:173)
creasing sizes (3  to 20 blocks),  yielding domains that range 
from  tens  to over a thousand  of propositional  features.  We 
collected the time taken per  filtering  step for each of the exe(cid:173)
cutions and the space taken overall at every iteration, starting 
with zero knowledge. The results are shown in Figure 4. 

AUTOMATED  REASONING 

81 

have  a  drastic  effect  on  the  computational  effort  needed  for 
filtering  and  on  the  size  of the  resulting  belief state. 

The  need  to track the  state  of the  world  is  a  basic  one,  and 
many  works  have  appealed  to  it  implicitly  in  the  past.  How(cid:173)
ever,  the  computational  treatment  of such  tracking  has  been 
avoided  so  far,  partially  due  to  the  absence  of a  developed 
theory  of nondeterministic  domains,  and  partially  due  to  neg(cid:173)
ative  results  about  the  general  cases  of this  task.  Nonethe(cid:173)
less,  this problem  and  methods  for  its  solution  have  received 
much attention in control theory.  The results we obtained here 
promise  to  find  their  application  in  this  domain  and  may  be 
combined  with  stochastic  filtering  techniques. 

The 

Acknowledgments 
This  research  was  supported  by  ONR  M U RI  Fund  N00014-
01-1-0890,  ONR  M U RI  Fund  N00014-00-1-0637,  and  NSF 
grant  ECS-9873474. 
first  author  thanks  Xuanlong 
Nguyen  for a  stimulating  discussion  on  Theorem  3.4. 
References 
[Boppana and Sipscr,  1990]  R.  Boppana and M.  Sipscr.  The com(cid:173)
plexity of finite functions.  In Jan van Leeuwcn, editor, Handbook 
of Theoretical Computer Science, pages 757-804. Elsevier, 1990. 
[Cimatti and Roveri, 2000]  A. Cimatti and M. Roveri.  Conformant 
planning via symbolic model checking. JAIR,  13:305-338, 2000. 
and 
The  PMA  and  rclativizing  change 

E.  Madalinska-Bugaj. 
for action update.  In Proc. KR  '98, pages 258-269,  1998. 

[Doherty et al,  1998]  P.  Doherty,  W. 

Lukaszewicz, 

[Ferraris and Giunchiglia, 2000]  P.  Ferraris  and  E.  Giunchiglia. 
Planning as satisfiability  in  nondeterministic  domains.  In  Proc. 
AAA!  '00, pages 748-753, 2000. 

[Fikes et  al,  1972]  R. Fikes, P. Hart, and N. Nilsson.  Learning and 

executing generalized robot plans.  All,  3:251-288,  1972. 

[Kalman,  1960]  R.  E.  Kalman.  A  new approach  to  linear filtering 
and prediction problems. Trans, of ASM E J. of Basic Engineer-
ing, 82(Ser. D):35-45,  1960. 

[Kautz et a/.,  1996]  H.  Kautz,  D. McAllester, and B.  Selman.  En(cid:173)

coding plans in propositional logic.  In Proc. KR  '96,  1996. 

[Liberatore,  1997]  P.  Liberatore.  The  complexity  of the  language 

A. ET AI, 1:13-38,  1997. 

[Lin and Reiter, 1997]  F.  Lin  and  R.  Reiter. 

database.  AIJ,92:131-167,  1997. 

How  to  progress  a 

[McHraith, 1998]  S.  McHraith.  Explanatory  diagnosis:  Conjectur(cid:173)
ing actions to explain observations.  In Proc. KR  '98, pages  167— 
177, 1998. 

[Reiter, 2001]  R. Reiter.  Knowledge In Action.  MIT Press, 2001. 
[Sandewall,  1994]  E.  Sandewall.  Features  and Fluents.  Oxford, 

1994. 

[Simon and del Val, 2001]  L.  Simon  and  A.  del  Val.  Efficient 

consequence-finding.  In IJCAI  '01, pages 359-365, 2001. 

[Son and Baral, 2001]  T. C. Son and C. Baral.  Formalizing sensing 

actions: A transition function based approach.  AIJ,  125, 2001. 

[Williams and Nayak,  1996]  B. Williams and P.  Nayak.  A model-
In  Proc, 

based  approach  to  reactive  self-configuring  systems. 
AAA1 '96, pages 971  978,  1996. 

[Winslett,  1990]  M.  Winslett.  Updating Logical Databases.  Cam(cid:173)

bridge U. Press, 1990. 

5  Conclusions 
In  this  paper  we  presented  the  task  of  logical  filtering  and 
gave  it  a  computational  treatment.  The  results  we  obtained 
here  have  implications  for  monitoring  and  controlling  dy(cid:173)
namic systems.  In many cases we present a closed-form com(cid:173)
putation  of the  filtering  and  in  others  show  how  to  approxi(cid:173)
mate  this  computation.  In  some  cases  we  can  guarantee  that 
the  size  of the  representation  of the  filtered  formula  can  be 
bounded  and  kept  small.  In  those  cases,  logical  filtering  can 
be  used  to  control  processes  that  run  over  very  long  periods 
of time.  Examples  of such  systems  are  abundant  and  include 
robot motion control, natural language processing, and agents 
that  explore  partially  observed  worlds. 

We made use  of several  assumptions  in  this paper in  differ(cid:173)
ent  contexts  and  with  different  consequences.  We  presented 
permutation  domains  and  the  certainty  of existence  of an  ef(cid:173)
fect  (D A a  I=  ->G)  as characteristics of the  domain  that make 
filtering  easier.  We  showed that the  commonly  used  assump(cid:173)
tion  that  every  action  has  a  relatively  small  number  of rules 
(at most polynomial  in n),  and that effects, preconditions and 
terms  in  the  belief state  typically  use  a  small  vocabulary,  all 

82 

AUTOMATED  REASONING 

