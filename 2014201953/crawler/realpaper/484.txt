Non-Standard Reasoning Services for the 

Debugging of Description Logic Terminologies 

Stefan Schlobach 

Language and Inference Technology, ILLC 
Universiteit van Amsterdam, Netherlands 

schlobac@science.uva.nl 

Ronald Cornet 

Academic Medical Center 

Universiteit van Amsterdam, Netherlands 

R.Cornet@amc.uva.nl 

Abstract 

Current Description Logic  reasoning  systems pro(cid:173)
vide  only  limited  support  for  debugging  logically 
erroneous knowledge bases.  In this paper we  pro(cid:173)
pose  new  non-standard  reasoning  services  which 
we  designed  and  implemented  to  pinpoint  logical 
contradictions  when  developing  the  medical  ter(cid:173)
minology DICE.  We  provide  complete  algorithms 
for  unfoldable  ACC-TBoxes  based  on  minimisa(cid:173)
tion  of  axioms  using  Boolean  methods  for  min(cid:173)
imal  unsatisfiability-presening  sub-TBoxes,  and 
an  incomplete  bottom-up  method  for  generalised 
incoherence-preserving  terminologies. 

Introduction 

1 
Our  work  was  motivated  by  the  development of the  DICE1 
terminology.  DICE  implements  frame-based  definitions  of 
diagnostic information for the unambiguous and unified clas(cid:173)
sification  of patients in  Intensive Care medicine.  The repre(cid:173)
sentation  of DICE  is  currently being migrated to  an  expres(cid:173)
sive  Description  Logic  (henceforth  DL)  to  facilitate  logical 
inferences.  Figure  1  shows an extract of the DICE terminol(cid:173)
ogy.  In  [Cornet and Abu-Hanna, 2002] the authors describe 
the migration process  in  more  detail.  The  resulting DL ter(cid:173)
minology (usually called a "TBox") contains axioms such as 
the following, where classes (like BODYPART) are translated 
as concepts, and slots (like REGION) as roles: 

Developing  a  coherent  terminology  is  a  time-consuming 
and error-prone process.  DICE defines more than 2400 con(cid:173)
cepts and uses 45  relations.  To  illustrate  some of the prob(cid:173)
lems,  take  the  definition  of a  "brain"  which  is  incorrectly 
specified,  among others,  as a "central nervous-system" and 
"body-part" located in the head.  This definition is contradic(cid:173)
tory as nervous-systems and body-parts are declared disjoint 
in  DICE.  Fortunately,  current  Description  Logic  reasoners, 

'DICE  stands  for  "Diagnoses  for  Intensive  Care  Evaluation". 
The development of the DICE terminology has been supported by 
the NICE foundation. 

such as RACER [Haarslev and Moller, 2001] or FaCT [Ilor-
rocks,  1998],  can  detect  this  type  of inconsistency  and  the 
knowledge  engineer  can  identify  the  cause  of the  problem. 
Unfortunately, many other concepts are defined based on the 
erroneous  definition  of "brain"  forcing  each  of them  to  be 
erroneous as well.  In practice,  DL reasoners provide lists of 
hundreds of unsatisfiable concepts for the DICE TBox and the 
debugging remains a jigsaw to be solved by human experts, 
with little additional explanation to support this process. 

By debugging we  understand the  identification and elimi(cid:173)
nation of modelling errors when  detecting  logical  contradic(cid:173)
tions in a knowledge base.  Debugging requires an explana(cid:173)
tion  for the  logical  incorrectness  and,  as  a  second  step,  its 
correction.  In this paper we  will  focus on the  former as  the 
latter requires an understanding of the meaning of represented 
concepts. We define a number of new non-standard reasoning 
services  to  explain  incoherences  through pinpointing. 

Our  experience  with  debugging  DICE  provides  some 
hands-on  examples  for  the  problem  at  hand:  take  the  con(cid:173)
tradictory definition of brains in the DICE anatomy specifica(cid:173)
tion.  What information is useful for correcting the knowledge 
base?  First, we have to identify the precise position of errors 
within a TBox; that is, we need a procedure to single out the 
axioms causing the contradiction.  The axioms for Brain and 
CentralNenvusSystem  form such  a minimal  incoherent sub(cid:173)
set of the DICE terminology. Formally, we introduce minimal 
unsatisfiability-presening  sub-TBoxes  (abbreviated  MUPS) 
and  minimal  incoherence-presening sub-TBoxes  (MIPS)  as 
the  smallest  subsets  of axioms  of an  incoherent terminology 
preserving  unsatisfiability  of a  particular,  respectively  of at 
least one unsatisfiable concept.  Secondly, we highlight the el(cid:173)
ements of these definitions containing the faulty specification. 
An axiom, e.g., 
NervousSystem points to 
the  core  of the  erroneously  modelled  knowledge.  For  this 
purpose we define generalised incoherence-preserving termi(cid:173)
nologies (GIT) as sets of incoherent axioms,  which are syn-
tacticly related to the original axioms, more general and have 
minimal  structural complexity. 

The remainder of this paper is organised as  follows:  Sec(cid:173)
tion 2 introduces the relevant DL concepts to make the paper 
self-contained.  In Section 3  we  introduce the new reasoning 
services and provide algorithms in Section 4.  The paper fin(cid:173)
ishes  with  a  discussion  of the  results  we  obtained  with  our 
new methods on the terminology DICE. 

DESCRIPTION  LOGICS 

355 

Figure  1:  An extract from the DICE terminology (frame-based). 

2  Description  Logics 
We shall not give a formal introduction into Description Log(cid:173)
ics here, but point to the new handbook [Baader et at., 2003]. 
Briefly, DLs are set description languages with concepts (usu(cid:173)
ally denoted by capital letters), interpreted as subsets of a do(cid:173)
main, and roles which are binary relations, which we denote 
by  small  letters. 
In  a  terminological  component  T  (called 
TBox) the interpretations of concepts can be restricted to the 
models  of T  by  defining  axioms  of the  form  _ 
Based 
on  this  formal  model-theoretic  semantics,  a  TBox  can  be 
checked for incoherence, i.e., whether there are unsatisfiable 
concepts:  concepts which are necessarily  interpreted as  the 
empty set in all models of the TBox.  Other standard reason(cid:173)
ing  services  include subsumption  of two  concepts  C  and  D 
(a subset relation w.r.t. all models of T).  Subsumption with(cid:173)
out  reference to  a TBox  is  called  concept subsumption  and 
we write 
.  Recently,  a number of non-standard rea(cid:173)
soning services have been defined, such as the least common 
subsumer  of concepts  or  the  minimal  rewriting  of concepts 
(see [Kiisters, 2001] for an overview). 

ACC is a simple yet relatively expressive DL with conjunc(cid:173)
and uni(cid:173)
t i o n d i s j u n c t i o n n e g a t i on  
versal 
.  A TBox 
and existential quantification 
is  called  unfoldable if the  left-hand  sides  of the  axioms  (the 
defined concepts) are atomic, and if the right-hand sides (the 
definitions) contain no direct or indirect reference to the  de(cid:173)
fined concept [Nebel, 1990]. 

3  Explaining Logical  Incoherences 
In  this  section  we  study  ways  of explaining incoherences  in 
DL  terminologies.  We  propose to  simplify  a terminology T 
in order to reduce the available information to the root of the 
incoherence. More concretely we first exclude axioms which 
are irrelevant to the incoherence and then provide simplified 
definitions  highlighting the  exact position of a contradiction 
within  the  axioms  of this  reduced  TBox.  We  will  call  the 
former  axiom pinpointing,  the  latter  concept pinpointing. 

In this section we will formally introduce axiom and con(cid:173)
cept  pinpointing  for  a  general  TBox  without restrictions  on 
the underlying representation language.  In Section 4 we will 
give algorithms for the case  of unfoldable ACC-TBoxes. 

3.1  Axiom  Pinpointing 
Axiom pinpointing means  identifying  debugging-relevant ax(cid:173)
ioms, where an axiom is relevant if a contradictory TBox be(cid:173)
comes coherent once the axiom  is removed or if,  at least,  a 
particular,  previously  unsatisfiable  concept turns  satisfiable. 

We will not consider assertional components in this paper. 

Consider  the  following  (incoherent)  TBox  71,  where  A,B 
and  C  are  primitive  and  A\,...,  A7  defined  concept  names: 

{A1,A3,A6,A7}. 

The  set of unsatisfiable  concept names  as  returned by  a  DL 
reasoner  is 
Although  this  is  still  of man(cid:173)
ageable size, it hides crucial information, e.g., that unsatisfia-
bility of  A1  depends on unsatisfiability of A3,  which is inco(cid:173)
herent because of the contradictions between A4  and  A5.  We 
will use this example to explain our debugging methods. 
Minimal  unsatisfiability-preserv ing  sub-TBoxes  (MUPS) 
Unsatisfiability-prcserving  sub-TBoxes  of a  TBox  T and  an 
unsatisfiable concept A  are subsets of T in which  A  is unsat(cid:173)
isfiable.  In general there are several of these sub-TBoxes and 
we select the minimal ones, i.e., those containing only axioms 
that are necessary to preserve unsatisfiability. 
Definition 3.1  Let A  be  a concept which  is  unsatisfiable  in 
a  TBox  T.  A  set  T' 
T  is  a  minimal  unsatisfiability-
preserving  sub-TBox  (MUPS)  of  T  if  A  is  unsatisfiable  in 
7~\ and A is satisfiable in every sub-TBox  T" 
We  will  abbreviate  the  set  of  MUPS  of  T  and  A  by 
mups(T, A).  MUPS  for  our  example  TBox  T1  and  its  un(cid:173)
satisfiable concepts are: 

Vâ€¢ 

MUPS arc useful for relating unsatisfiability to sets of axioms 
but we will also use them in Section 4 to calculate MIPS. 
Minimal  incoherence-preserving sub-TBoxes  (MIPS) 
MIPS are the smallest subsets of an original TBox preserving 
unsatisfiability of at least one atomic concept. 
Definition 3.2  Let T be an incoherent TBox. 
T  is  a  minimal  incoherence-preserving  sub-TBox  (MIPS)  of 
T  if T'  is  incoherent,  and  every  sub-TBox 
is co(cid:173)
herent. 
We  will  abbreviate  the set  of MIPS  of T by mips{T).  For 71 
we get three MIPS: 

It  can  easily  be  checked  that  each  of the  three  incoherent 
TBoxes in mips(Ti)  is  indeed a MIPS  as taking away a sin(cid:173)
gle  axiom  renders each  of the  three  coherent.  The  first  one 
signifies,  for example,  that the  first  two axioms are  already 
contradictory  without  reference  to  any  other  axiom,  which 
suggests a modelling error already in these two axioms. 

356 

DESCRIPTION  LOGICS 

Cores 
Minimal  incoherence-preserving sub-TBoxes  identify smallÂ­
est  sets  of TBox  axioms  causing  the  original  TBox  to  be 
incoherent.  In  terminologies  such  as  DICE,  which are creÂ­
ated through migration from other representation formalisms, 
there are several such sub-TBoxes, each corresponding to a 
particular contradictory terminology.  Cores  are  now  sets  of 
axioms occurring in several of these incoherent TBoxes.  The 
more MIPS such a core belongs to, the more likely its axioms 
will be the cause of contradictions. 
Definition 3.3  Let  T be  a  TBox.  A  non-empty  intersection 
of  n  different  MIPS  in  rnips(T)  (with  n 
1) is called  a 
MlPS-core  ofarity  n  (or  simply  n-ary  core)  for  T. 
livery set containing precisely one MIPS is,  at least, a  1-ary 
core. The most interesting cores of a TBox, T, are those with 
axioms  that  are present  in  as  many  MIPS  of T  as possible, 
i.e.,  having maximal  arity.  On the other hand,  the  size  of a 
core is also significant,  as a bigger size points to clusters of 
axioms causing contradictions in combination only. 

In  our  running  example,  axiom  ax4  occurs  both  in 
a core 
of arity  2  for  T1,  which  is  the  core  of maximal  arity  in  this 
example. 

, which makes 

3.2  Concept Pinpointing 
The next step in the debugging process is to simplify the defÂ­
initions in order to obtain more concise descriptions of errors 
within an incoherent TBox. 
Generalised Terminologies 
Incoherence  of  a  TBox  can  be  regarded  as  an  over-
specification  of one  or  more  concepts  in  the  relevant  defiÂ­
nitions.  Generalised terminologies  are  terminologies where 
some of the definitions have been generalised.3  Furthermore, 
we  require generalised  definitions to  be syntactically related 
to the original axioms.  For different representation languages 
and types of knowledge bases we will have to formally specÂ­
ify what we consider to be syntactically related concepts.  For 
the time being let us keep the definition abstract and assume 
that there is such a relation rel (C,  C')  denoting that two conÂ­
cepts  C  and  C'  are  related.  Formally,  a concept C"  is then 
a  syntactic  generalisation  of  a  concept  C  if rel{C,  C)  and 
(independent of T).  Note that we have to take care 
of the case when C is unsatisfiable w.r.t. T.  Then C is equivÂ­
alent  to 
and  everything  is  more  general.  Therefore  we 
generalise C  without referencing to the original terminology 
T, i.e., we check for simple concept subsumption, only. 

Now,  generalised  incoherence-preserving  terminologies 
(GITs) are TBoxes where the defining concepts of the axioms 
are maximally generalised without losing incoherence. 
Definition  3.4 
coherent  TBox.  An  incoherent  TBox 

be  an 

inÂ­

L

e

t

is  a  generalised incoherence-preserving  terminol-
o fT  if,  and only  if, 

â€¢  each  D1  is a syntactic generalisation  of 
3To simplify matters we generalise the right-hand side of axioms 
only as we are currently working with unfoldable TBoxes anyway. 

â€¢  every  TBox  T"  = 

tactic  generalisation  D"  of  Dt  where  Di 

is coherent. 

with a synÂ­
Di 
and 

We  abbreviate the  set of generalised  incoherence-preserving 
terminologies  of a  TBox  T  by  git(T).  Note  that  the  set  of 
GITs of a TBox  T is  equivalent to  the  union  of GITs for the 
MIPS  of T.  Take a simple  syntactic relation relating a conÂ­
cept  with  the  syntactic  sub-concepts  of its  unfolded  version 
with the same polarity and quantifier depth.4  As this particuÂ­
lar definition of a syntactic relation depends on unfolding the 
related concepts,  all but one axiom per GIT  can be trivially 
generalised  to 
.  Of all  possible  GITs  we  conjecture 
that the  simplest ones,  e.g.,  those  with syntactically minimal 
generalisations, are most likely to be useful for the identificaÂ­
tion of errors.  In our experiments we use two alternative for-
malisations, the first with respect to minimal  size of axioms, 
the  second with  respect to the  number of concept names ocÂ­
curring  in  the  GIT.  Three  minimal  sized  GITs  exist for our 
example  TBox  71,  where  we  only  show the  non-trivial  axÂ­
ioms: 

4  Debugging  Unfoldable ALC-TBoxes 
Practical experience has shown that applying our methods on 
a  simplified  version  of DICE  can  already  provide  valuable 
debugging information.  We  will  therefore  only provide  alÂ­
gorithms for unfoldable  ,ALC-TBoxes  [Nebel,  1990] as this 
significantly improves both the computational properties and 
the readability of the algorithm. 

4.1  Algorithms for Axiom Pointing 
The  calculation  of MIPS  depends  on  the  MUPS  only,  and 
we  will  provide  an  algorithm  to  calculate  these  minimal 
unsatisfiability-preserving  sub-TBoxes  based  on  Boolean 
minimisation  of  terminological  axioms  needed  to  close  a 
standard tableau ([Baader et al., 2003] Chapter 2). 

Usually,  unsatisfiability  of  a  concept  is  detected  with  a 
fully saturated tableau (expanded with rules similar to those 
in  Figure  2)  where  all  branches  contain  a  contradiction (or 
close,  as we say).  The information which axioms are releÂ­
vant for the  closure  is  contained  in  a simple  label  which  is 
added  to  each  formula  in  a  branch.  A  labelled  formula  has 
the  form  (a  :  C)x  where a is  an individual name,  C a conÂ­
cept and x a set of axioms, which we will refer to as label. A 
labelled branch is a set of labelled formulas and a tableau is a 
set of labelled branches.  A  formula can  occur with different 
labels on the same branch.  A  branch  is closed if it contains 
a clash, i.e.  if there is at least one pair of formulas with conÂ­
tradictory atoms on the same individual.  The notions of open 
branch and closed and open tableau are defined as usual and 
do not depend on the labels.  We will always assume that any 

4Thc polarity of a concept name A specifies whether A occurs 
within odd or even numbers  of negations,  the quantifier depth  is 
the sequence of roles over which the concept is quantified.  Such 
a relation will formally be defined for unfoldable ACC-TBoxes in 
Definition 4.3. 

DESCRIPTION  LOGICS 

357 

formula  is  in  negation  normal  form  (nnf)  and  newly  created 
formulas are  immediately transformed.  We usually omit the 
prefix "labelled". 

To calculate a minimal unsatisfiability-preserving TBox for 
a concept name A  w.r.t.  an  unfoldable TBox  T we construct 
a tableau from a branch B initially containing only 
(for a new individual name a) by applying the rules in Figure 
2  as  long as possible.  The rules are standard ALC-tableau 
rules  with  lazy  unfolding,  and  have  to  be  read  as  follows: 
assume  that  there  is  a  tableau  T  =  { B,  B1, . . .,  Bn)  with 
n+1 branches. Application of one of the rules on B yields the 
  {Ax)-
t
a
rule, 

in case of t h e - r u l e. 

or  the 

and

b

e

l

a

u

f

Once no more rules can be applied, we know which atoms 
are  needed to  close  a  saturated branch and  can  construct a 
minimisation  function for A  and T  according to  the  rules  in 
is  called  a  minimisa(cid:173)
Figure  3.  A  propositional  formula 
tion function for A  and T  if A  is  unsatisfiable  in  every  subset 
of T containing the  axioms which  are true  in  an  assignment 
making 
true.  In our case axioms are used as propositional 
.  As we can identify unsatisfiability of A w.r.t. a 
variables in 
set S of axioms with a closed tableau using only the axioms in 
S  for unfolding, branching on a disjunctive rule implies that 
we need to join the functions of the appropriate sub-branches 
conjunctively. If an existential rule has been applied, the new 
branch  B'  might  not  necessarily  be  closed  on  formulas  for 
both individuals.  Assume that B'  closes on the  individual a 
but not on b.  In this case  min-function(a,  B,T)  = 
which 
means that the related disjunct does not influence the calculaÂ­
tion of the minimal  incoherent TBox. 

Based on the minimisation function  minfunction(a,  {(a  : 
(let us call it  which we calculated using the rules 
in  Figure  3  we  can now calculate the MUPS  for A  w.r.t.  T. 
The  idea  is  to  use  prime  implicants  of 
A  prime  impli-
is  the  smallest conjunction of literals5 
cant 
implying 
is a minimisation function 
every implicant  of  must be a minimisation function as well 
and therefore also the prime implicant.  But this implies that 
the  concept A  must be  unsatisfiable  w.r.t.  the  set  of axioms 
is the smallest implicant 
must be minimal, i.e.  a 

we also  know that 
MUPS. Theorem 4.1 captures this result formally. 

[Quine,  1952].  As 

5Note that in our case all literals are non-negated axioms. 

Theorem 4.1  Let A  be a  concept name,  which  is  unsatisfi(cid:173)
able  w.r.t.  an  unfoldable  ACC-TBox  T.  The  set  of  prime  im(cid:173)
plicants  of  the  minimisation  function  minJunction(a,{(a 
: 
,  T)  is  the  set  mups(T,  A)  of minimal  unsatisfiability-

:=  min  function 

preserving sub-TBoxes of A and T. 
Proof: We first prove the claim that the propositional formula 
T)  is indeed a minimisaÂ­
tion  function  for  the  MUPS  problem  w.r.t.  an  unsatisfiablc 
concept A and a TBox T.  We show that a tableau starting on 
a single branch 
closes on all  branches by 
unfolding axioms only, that are evaluated as true in an assignÂ­
true. This saturated tableau Tab* is a particuÂ­
ment making 
lar sub-tableau of the original saturated tableau Tab which we 
used to calculate  min-function 
, T ), and it is 
this connection that we make use of to prove our first claim. 
Every branch  in the new  tableau  is a subset of a branch ocÂ­
curring in the original one and we define visible formulas as 
those labelled formulas occurring in both tableaux. By inducÂ­
tion over the rules applied to saturate Tab we can then show 
that each branch in the original tableau closes on at least one 
If A  is  unsatisfiable  w.r.t.  T,  the 
pair  of visible  formulas. 
tableau starting with the branch 
closes  w.r.t.  T. 
As  we  have  shown that  this  tableau  closes  w.r.t.  T on  visiÂ­
ble  formulas,  it follows that Tab*  is  closed  on  all  branches, 
which proves the  first  claim.  By  another induction over the 
is a 
application of the rules  in Figure 3  we  can prove that 
maximal minimisation function, which means that 
for 
every  minimisation function 
This proves the  first  part  of 
the proof; the first claim (and the argument from above) imÂ­
plies  that  every  implicant of a minimisation  function identiÂ­
fies an unsatisfiability-preserving TBox, and maximality imÂ­
plies that prime implicants identify the minimal ones. 
To show that the conjunction of every MUPS 
is  a  prime  implicant  of 
trivial 
tion.  But as we know that minjunction(a, 
maximal we know that 

is 
is a minimisation function by definiÂ­
is 

as 

as otherwise 

which implies that 

would not be minimal. 

must be prime 
â–  

Satisfiability  in  ACC  is  PSPACE-complete,  and  calculating 
MUPS does not increase the complexity as we can construct 
the minimisation function in a depth-first way, allowing us to 
keep only one single branch in memory at a time.  However, 

358 

DESCRIPTION  LOGICS 

we  calculate  prime  implicants  of a  minimisation  function  the 
size  of  which  can  be  exponential  in  the  number  of  axioms 
in  the  TBox.  Therefore,  approximation  methods  have  to  be 
considered  in practice avoiding the  construction of fully  satu(cid:173)
rated  tableaux  in  order to  reduce  the  size  of the  minimisation 
functions. 

From  MUPS  we  can  easily  calculate  MIPS,  but  we  need 
an  additional  operation  on  sets  of  TBoxes,  called  subset-
reduction.  Let  M  =  { T1, . . .,  Tm)  be  a  set  of TBoxes.  The 
M 
subset-reduction  of  M  is  the  smallest  subset 
such  that  for all  T   M  there  is  a  set  V 
that 
'V 
T.  A  simple  algorithm  for  the  calculation  of MIPS  for 
T  now  simply  follows  from  Theorem  4.2,  which  is  a  direct 
consequence  of the  definitions  of MIPS  and  MUPS. 
Theorem  4.2  Let  T  be  an  incoherent  TBox  with  unsatisfiable 
concepts 

sr(M)  such 

sr(M) 

Checking  elements  of mips(T)  for  cores  of maximal  arity 
requires  exponentially  many  checks  in  the  size  of  mips(T). 
In practice, we therefore apply a bottom-up method searching 
for  maximal  cores  of increasing  size  stopping  once  the  arity 
of the  cores  is  smaller than  2. 

A l g o r i t h ms  f or  C o n c e pt  P i n p o i n t i ng 

4.2 
Calculating  GITs  depends  on  the  definition  of  r e l ( C,  C).  In 
our  case  we  will  define  this  syntactic  relation  described  in 
Footnote 4  including quantifier depth  and polarity. 
Definition  4.3  Let  T  be  an  unfoldable  â€žAlC-T13ox.  A  con(cid:173)
is  syntactically  related  to  a  concept  C  (notation: 
cept  C" 
rcl(C,  C'))  if  C" 
'  -(C),  where  the  set  of qualified  sub-
concepts,  qsr{C), 

inductively: 

is  defined 

for all  concepts  C. 

also  c o n t a i n s a nd  

Moreover, 
Note  that  we  include  terminological  information  from  un(cid:173)
folded TBox  axioms  in  the definition  of syntactic relatedness. 
This  choice  allows  us  to  create  smaller  and  more  concise 
GITs  but  is  non-essential.  As  the  TBox  is  finite  and  cycle-
free, and as the concept size decreases in every recursion step, 
is  finite.  Therefore  there  is  only  a  finite  set  of con(cid:173)
cepts  related  to  any  axiom  
.  A  simple algorithm to cal(cid:173)
culate  GITs  for  an  incoherent  unfoldable  ALC-TBox  T  is 
therefore: 

For all  MIPS  M   mips{T)  (with 

| r m p * ( T )|  =  m) 

1.  Let  T'  be  the  TBox  where  all  axioms  

in  T 

have been replaced  by 

2.  Calculate  different TBoxes  T"  where  an  arbitrary  num(cid:173)
have  been  replaced  in  T'  by 
,  i.e.,  where 

,_ 

ber of axioms , 
generalised  axioms 
and 

for some 

3.  Return  those  incoherent  TBoxes  T"  with  minimal  syn(cid:173)
tactic  generalisations according to the  subsumption rela(cid:173)
tion,  and  the  size  or number of concept  names. 

The  algorithm  described  above  is  a  naive  algorithm which 
might  not  terminate  in  reasonable  time  on  large  terminolo(cid:173)
gies  with  complex  definitions  as  the  number  of syntactically 
related  concepts  for  a  given  concept  C  is  exponential  in  the 
size  of  C.  A  more  efficient  algorithm  to  calculate  GITs  is 
based  on  the  fact  that  the  syntactically  related  concepts  can 
be  created  ordered  by  size  starting  with  atomic  concepts.  To 
find  GITs  of  minimal  size  we  therefore  apply  a  bottom-up 
strategy  checking  more  and  more  complex  terminologies  for 
coherence in  Step 2  stopping once  we  find an  incoherent one. 

5  Evaluation 
The  algorithms  for  axiom  pinpointing  have  been 
imple(cid:173)
mented  in  JAVA  using  RACER,  which provides the  set  of un(cid:173)
satisfiable  concepts.  We  evaluated  the  methods  on  both  the 
anatomy  fragment  of  DICE  and  the  full  DICE  terminology. 
The  fragment  defines  529  concept  names,  76  of which  were 
unsatisfiable  at  first.*'  There  arc  5  MIPS  containing 2  axioms 
each,  but  no  axiom  occurs  in  all  MIPS.  However,  there  is  a 
core  of arity  3  and  size  1:  the  axiom  defining  "central  ner(cid:173)
vous  system"  as  a  "nervous  system".  Note  that  the  defini(cid:173)
tion  of "nervous  system"  is  not  contradictory but  that  its  use 
is  erroneous,  e.g.,  the  concept  brain  should  be  defined  as  a 
"part of"  and  not as  a  subconcept of the  concept  nervous  sys(cid:173)
tem.  For  each  of the  5  MIPS  minimal  size  GITs  have  been 
calculated,  and  they  point  to  the  exact  position  of the  logi(cid:173)
cal  incorrectness.  For the  MIPS  related  to the error described 

6Thc high number of unsatisfiable concepts is due to the fact that 
the DL terminology for DICE has been created by migration from a 
frame-based terminological system.  In order to make the semantics 
as explicit as possible a very restrictive translation has been chosen 
to highlight as many ambiguities as possible.  Moreover, many con(cid:173)
cepts  were  defined  as  sub-concepts  of unsatisfiable  concepts.  See 
[Cornet and Abu-Hanna, 2002] for details. 

DESCRIPTION  LOGICS 

359 

in  the  introduction the  minimal  size  GIT  is  simply  Brain 
NervousSystem  BodyPart which, with the information that 
BodyPart and NervousSystem are disjoint concepts, identifies 
the erroneous specification. 

The  full  DICE  terminology  defines  more  than  2400 conÂ­
cepts,  of  which  more  than  750  were  unsatisfiablc  given 
the chosen  migration method.  Our implemented algorithms 
found  the  MUPS  for  all  but  7  unsatisfiable  concepts. 
In 
these  seven  cases  the  algorithm  failed on  the calculation of 
the prime implicants as we use a naive method in our current 
implementation. Based on the correctly calculated MUPS we 
approximated the set of MIPS which contained more than 350 
TBoxes.  We implemented an iterative approach, calculating 
the  core  Max  of size  1  with  maximal  arity  for mips(Tdicv), 
then the  same for the remaining TBoxes in mips(Tdice)\Max 
and so on.  This way we identified 10 cores of size  1  with an 
arity of 25 to 10, covering almost half of the errors. For some 
of these cores we calculated GITs (by hand) which lead to the 
identification  of a number of modelling errors.  Even though 
the developed reasoning services are not yet fully integrated 
into the knowledge modelling environment, they are useful to 
pinpoint to the core of the logical contradiction, which is then 
investigated and eliminated by a domain expert. 

Although the theoretical complexity of the MUPS problem 
is exponential in the size of the TBox the calculation of most 
MUPS  for  DICE  was  not problematic  due  to  the  relatively 
simple structure of the tableaux for the unsatisfiability proofs. 
Runtime  analysis  suggests  that  most  CPU-time  is  spent  by 
RACER identifying the unsatisfiable concepts, whereas comÂ­
puting MUPS usually takes less than 10 percent of the overall 
runtime7. 

6  Conclusion  &  Further Work 
Explanation  has  been  a  research  topic  right  from  the first 
days  of research  in  Artificial  Intelligence  (e.g.,  introducing 
TMS  [Doyle,  1979]  or  Diagnosis  [Reiter,  1987])  and  TheÂ­
orem  Proving  (recently  [Fiedler,  2001]).  Despite  a  signifiÂ­
cant  interest  in  explanation  of DL  reasoning recently  shown 
in the DL community (as [DIG, 2002] suggests) relatively litÂ­
tle work has been published on the subject.  One exception is 
[McGuinness,  1996]  where  the  author provides explanation 
for subsumption and non-subsumption.  Her approach, based 
on explanation as proof fragments, uses structural subsumpÂ­
tion  for  CLASSIC  and  has  been  extended  to  AlC-tableau 
reasoning  in  [Borgida  et  al,  1999]. 
In  contrast  to  this  apÂ­
proach,  our non-standard  reasoning  services  for axiom  and 
concept  pinpointing  focus  on  the  reduction  of information, 
and are independent of particular calculi or implementations. 
We have introduced non-standard reasoning services facilÂ­
itating  the  debugging of logically  incoherent  DL  terminoloÂ­
gies  and  algorithms  to  calculate  them.  Whereas  the  ideas 
for axiom  pinpointing are  more  evolved and  efficiently  imÂ­
plemented, only a relatively naive algorithm for concept pinÂ­
pointing has been developed as yet. We are currently working 
on more efficient methods and alternative debugging services, 
and tests are under way on the DICE terminology. 

7For the full DICE terminology the overall runtime to calculate 
MIPS is currently about 40 minutes on a PC with a 1 GHz Pentium. 

As  our methods  are  developed  for the  particular applicaÂ­
tion  of the  DICE  terminology some  restrictions  apply,  most 
importantly to  use ACC  and to consider unfoldable TBoxes, 
only.  Neither is essential, and we conjecture that it is not too 
hard to extend our algorithms to find MIPS and GITs both for 
more expressive languages and for general TBoxes.  Both isÂ­
sues will be addressed in future investigations.  Further work 
must also extend the application domain to other terminoloÂ­
gies as  we believe that the success we have with debugging 
DICE  is  not tied  to  the  structure of this  particular represenÂ­
tation.  Of particular  interest  should  be  applications  related 
to  the  Semantic  Web  effort  as  our methods  are  particularly 
geared to support the debugging of existing terminologies and 
logical contradictions caused by migration or merging of terÂ­
minologies. 

References 
[Baader et a/.,2003]  F.  Baader,  D.  Calvanese,  D.  McGuinÂ­
ness, D. Nardi, and P. Patel-Schneider, editors.  The De(cid:173)
scription  Logic  Handbook.  Cambridge  University  Press, 
2003. 

[Borgida et  al,  1999]  A.  Borgida,  E.  Franconi, I.  Horrocks, 
D. McGuinness, and P. Patel-Schneider.  Explaining ACC 
subsumption.  In DL-99, pages 37-40,  1999. 

Evaluation  of  a 

[Cornet and Abu-Hanna, 2002]  R.  Cornet  and  A.  Abu-
frame-based  ontology.  A 
Hanna. 
In  Proceedings  of 
formalization-oriented  approach. 
MIE2002,  Studies  in  Health  Technology  &  Information, 
volume 90, pages 488-93, 2002. 

[DIG, 2002]  Minutes  of  the  DL  Implementation  Group-
http://dl.kr.org/dig/minutes-

Workshop, 
012002 . html, visited on January 9, 2003. 

2002. 

[Doyle,  1979]  J. Doyle.  A truth maintenance system.  Artifi-

cial  Intelligence,  12(3):231-272,1979. 

[Fiedler, 2001]  A.  Fiedler.  Prex:  An  interactive  proof exÂ­
plainer.  In  R.  Gore,  A.  Leitsch,  and T.  Nipkow, editors, 
IJCAR 2001, number 2083 in LNAI, pages 416-420,2001. 
[Haarslev and Moller, 2001]  V.  Haarslev  and  R.  Moller. 
RACER system description.  In R.  Gore, A.  Leitsch, and 
T.  Nipkow,  editors,  IJCAR 2001,  number 2083  in  LNAI, 
2001. 

[Horrocks,  1998]  I.  Horrocks. 

In 
H.  de  Swart,  editor,  Tableaux'98, number  1397 in LNAI, 
pages 307-312, 1998. 

The  FaCT  system. 

[Kusters, 2001]  R. Kiisters.  Non-Standard Inferences in De(cid:173)

scription  Logics,  volume 2100 of LNAI.  2001. 

[McGuinness,  1996]  Deborah McGuinness. Explaining Rea(cid:173)
soning in  Description  Logics.  PhD  thesis,  Department of 
Computer Science, Rutgers University,  1996. 

[Nebel,  1990]  B.  Nebel.  Terminological reasoning is inherÂ­

ently intractable.  AI, 43:235-249,  1990. 

[Quine, 1952] W.V. Quine. The problem of simplifying truth 

functions.  American Math.  Monthly,  59:521-531,1952. 

[Reiter,  1987]  R.  Reiter.  A  theory  of diagnosis  from  first 

principles.  Artificial Intelligence,  32:57-95,  1987. 

360 

DESCRIPTION  LOGICS 

