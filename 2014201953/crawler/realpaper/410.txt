Session No.  14 Theorem Proving 

G01 

HEURISTIC  SEARCH  VS.  EXHAUSTIVE  SEARCH 

Laurent  Siklossv  and  Vesko  Mannov' 

Department  of  Computer  Sc i ences 
Univers ity  oi  Texas  at  Austin 

Aust1n,  Texas  U.S.A. 

ABSTRACT 

A  theorem  proving  system  embodying  a  systema(cid:173)
tic  search  procedure  is  de  sen  bed  .  Al  though  the 
search  spaces  are  usually  i n f i n i t e,  and  not  even 
locally  f i n i t e,  the  asymmetric  way  in  which  thev 
are  generated  results  in  a  speed  that  is  es 11ma(cid:173)
ted  to  be  one  to  two  orders  of  magnitude  faster 
than  the  theorem  provers  of  Quinlan  and  Hunt,  and 
Chang  and  the  problem-solver  of  Kikes,  to  whi c h 
this  systern  has  been  compared  extenslvely. 
DescripIive  terms:  search,  heuristic  search,  ex(cid:173)
haust ive  seare h ,  sea re h  space,  1ocal1v  iniIni te 
search  space,  rewri t ing  ru1e,  expans ion  rule, 
theorem  provi ng,  problem-so1ving. 
1.  INTRODUCTION 

Heuris t i c  programmi ng  technl que s  have  been 

in  a r t i f i c i al 

developed  to  make  i t  posslble  t o  solve  problems 
whose  solutions  each  constitute 
just  one  point  or 
a  small  set  of  points  in  a  very  large,  and  possi(cid:173)
bly  i n f i n i t e,  space,  the  search  space.  Many  pro(cid:173)
blems 
intelligence  are  d i f f i c u l t, 
and  requi re  "intelligene  e"  from  the  problem  sol(cid:173)
ver,  precisely  because  of  the  size  of  the  search 
space.  A 1 though  heuris t ic  search  does  not  guaran(cid:173)
tee  a  solution,  the  size  of  the  search  space  pre(cid:173)
cludes  an  alternative  techni que  such  as  exhaustive 
search.  Any  me thod  that  would  a r tempt  to  search 
unselee ti  vely  the  whole  search  spat e  i or  a  sol u-
tion  would  qu  lckly  exhaus t  avaliable  resources  of 
time  and  memory  and  would  be  bound  to  failure, 
except  in  some  rare,  "lucky"  cases. 

in  fac t, 

The  statements  in  the  above  paragraph  seem  so 
"obvi ous"  that  few  would  diSagree  with  them.  The 
present  study  shows  tha t, 
they  are  false 
in  regard s  to  severa 1  a r t i f i c i al  intelligence 
systerns  that  have  been  b u l l t.  F i r s t,  the  search 
space  is  very  small 
in  many  problems,  often  less 
than  even  a  few  dozen  nodes.  Second,  although  tte 
search  spaces  may  be  infinite  in  principle,  in 
reality  only  very  small  parts  of  this  space  need 
to  be  generated,  in  a  systematic  way,  until  the 
solution  is  found.  Final ly,  a  s imple  program, 
embodying  a  sys tematic,  blind  and  "dumb"  (?)  pro(cid:173)
cedure ,  was  wri t ten -  This  program  has  solved 
typically  considered 
over  sixty  problems  that  are 
as  requiring  heuris tic  search.  The  vas t  majority 
of  these  problems  have  a  potentially  i n f i n i te 
search  space.  An  estimate  of  the  re lative  speeds 
of  different  computers  and  programming  languages 
ind icates  that  our  program  is  from  one  to  two 
orders  of  magnitude  faster,  on  the  average,  than 
the  most  powerful  problem  solvers  with  which  it 
has  been  compared. 

The  reader  should  not  conclude,  either  now  or 

af ter  reading  the  additional  evidence  that  we 
present,  that  hcuri stic  programmi ng  has  no  value. 
The  success  of  our  program,  however,  has  impor(cid:173)
tant  methodological  and  prac tical  consequences. 
Exhaus tive  search  appears  as  a  derided,  yet 
powerful  technique  to  solve  many  problems  that 

are  very  hard  lor  humans  and  that  seemed  to 
necessitate  heurls  t cs  for  their  solut ion 
In  a 
powerful  problem-solve r,  an  exhaus t  ive  Search 
component  might  have  an  impor tan t 
func t ion  in 
so Iving  efficiently  I arge  classes  o f  prob1 ems, 
a 1 though  a 1 one  it  certainly  cannot  solve  all 
problems 
I I.  PROBLFM  DOMAIN 

Points  in  the  prob 1 em  sp,Â«c i  are  expressions 

de f l ned recur s L ve 1 y a s va r i ab ] e s (at oms ) or zero-, 
one -  and  two-p1 ace  func tIon  symbols  (ope ra t ors) 
hav ing  expressIous  as  argument s #  Cons tant s  are 
Zero-place  func tions.  New  points  in  t he  prob1 em 
space  can  be  obtained  by  applying  a  rewrite  rule 
to  an  expression  that  is  a 1 ready  in  the  problem 
spat e.  A  r ewr l te  rule i s  of  t hi1  form* 
<fle f t-hand- s ide / 
: *  ^right-hand-sid<y  where 
both  sides  are  expressions.  A  rewr i te  rule  can 
be  applied  to  an  expression  l i  the  expre ssIon, 
or  one  of  its  subexpressions, 
is  a  substitution 
instance  ol 
the  1cft-hand-side  of  the  rewrite 
rule.  We  say  that  the  rewrite  rule  opera t es  on 
the (sub)expression. 'I h e (s u b)e xp T e s sion that is 
ope ra ted  on  is  t rans f ormed  by  app1ving  t he  same 
substitution  to  t he  r i gh t-hand-side  oi  the  re-
write  rule.  For  example, 
if  the  binary  operator 
+  is  used  with  the  variables  A,  B  and  C;  and  if 
the  expre ssion  (A+R)+C  is  in  the  problem  space, 
a  s l ng lc  appli c a r Ion  of  the  rewr i t e  rule  A+B* = 
B+A  can  produce  two  new  expressions:  C+(A+B)  and 
(B+A)+C,  depending  on  whether  the  rule  is  applied 
at  t he  top 
level  or  not  The  rules  are  seen  as 
havi ng  one  i nput  and  produclng  one  out put  Thls 
is  not  general,  and  in  re solution,  for  example , 
rewr i te  rules  have  two  inputs  for  one  out pu t 

A  theorem  is  in  the  form  of  a  rewrite  rule, 

for  example  (A+B)+C:=A+(B+C).  A  proof  of  the 
theorem  consists  in  showing  that,  by  a  succession 
of  applIcat ions  of  rewrlLe  rules, 
side  can  be  transformed  into  the  right-hand  side. 
After  having  been  proved,  theorems  can  be  consid(cid:173)
ered  as  rewrlte  rules. 

the  lett-hand 

This  problem  domain  is  identical  to  that  con(cid:173)
sidered  extensively  by  Quinlan*  (7)  and  Quinlan 
and  Hunt**  (8).  Q6dl  show  results  of  their  learn(cid:173)
ing  programs,  FDS1  and  FDS  2,  on  59  theorems 
grouped  in  5  different  areas  (see  Tables  T 
through  V).  Q  includes  much  addItiona 1  informa(cid:173)
tion  on  the  programs'  performance.  FDS  Is  con(cid:173)
sidered  the  most  powerful  theorem-prover  of 
its 
type.  Ernst  and  Newe11  (i)  consider  the  results 
of  QMf  "qui te  impressive.M  (p.  27.)  The  same 
version  of  our  program  has  proved  a ll  59  theoiens 
i n  the  tables  in  Q6dl. 

Chang  (2)  has  also  proved  some  of  the  t heorans 

in  QM1  using  a  resolution-based  system,  and  a 
comparison  of  his  results  with  ours  is  given. 
Kesolutlon  is  best  viewed  as  a  systern  utI1i zing 
a  single  two-input,  one-output  rewrite  rule. 
Fi rial ly,  Fikes  (4)  has  documented  proofs  of  four 
heuristic  search  problems.  Although  s ta ted  in  a 
programming  language,  these  four  problems  in 
Fikes  can  be  easily  rewritten  as  problems  in  a 
*To  be  abbreviated  Q. 
**To  be  abbreviated  Q&H. 

602 

Session No.  14 Theorem  Proving 

The  f i r st  three  rules  generate  a  locally  i n f i n(cid:173)
ite  search  space,  while  the  other  three  gener(cid:173)
ate  an  i n f i n i te  space,  which  is  locally  f i n i t e. 
For  example,  applying  T l,  Table  II  to  the  node 
X  results  in  the  node  X+0.  Another  appl1 cat ion 
of  the  same  rewrite  rule  produces  the  three 
nodes  (X+0)+0,  (X+0)+0  and  X+(0+0). 

rewrite  rule  formulation.  Two  of  them  were  solved 
by  the  same  program  that  proved  the  theorems  in 
Q&H.  The  addition  of  some  numerical  capabilities 
to  our  program  would  allow  it  to  solve  the  other 
two  problems.  (See  Siklossy  and  Marinov  (10)  for 
a  hand-simulation  and  addi tional  information  on 
our  system.)  Some  of  the  problems  tha t  can  be 
easily  expressed  for  Chang's  system  are  awkward 
to  express  in  our  system  of  rewrite  rules.  Our 
system  lacks  the  cons traint  mani pulation  tech(cid:173)
niques  and  numerical  capabilities  of  Fikes'  REF-
ARF.  On  the  other  hand,  it  is  doubtful  that 
e ither  Chang's  or  Fikes'  sys tern  could  prove  al1 
the  theorems  in  Table  I I I-  In  this  a r t i c l e, 
the ir  systerns  are  compared  on  problems  on  an 
intersection  of  their  respective  domains  of 
expertise  with  the  domain  of  application  of  our 
system. 
I I I.  SYSTEMATIC  SEARCH 
A.  Non-Expans ion  Rules 

A  theorem  is  of  the  form  L:=R,  where  L  and  R 

in  the  tree  if  and  only  if 

are  the  left  and  right  expressions  of  the  theorem. 
A  systematic  search  for  the  proof  of  the  theorem 
starts  with  the  search  space  consisting  of  the 
expression  L.  From  L,  we  build  the  next  leve1 
of  the  search  tree-  To  this  effect,  we  apply  to 
L  a ll  rewrite  rules,  one  after  the  other.  An 
expression  resulting  from  the  application  of  a 
rewrite  rule  to  a  node  of  the  search  tree  is  in(cid:173)
serted 
already  figure  in  the  search  tree.  Figure  1  shows 
the  search  tree  for  the  proof  of  theorem  1 
Table  1,  using  only  the  f i r st  two  rewrite  rules. 
The  third  node  of  the  search  tree,  (B+A)-K;,  is 
called  a  dead  node  since  no  new  expressions  can 
be  obtained  by  applying  rewrite  rules  Rl  or  R2 
to  this  node.  The  search  terminates  when  the 
expression  A+(B+C)  i s  found  at  the  f i f th  level 
of  the  tree,  as  the  12th  node. 
B.  Expansion  Rules 

it  does  not 

in 

The  reader  w i ll  notice  that  rule  R4,  A:= 

(A+B)-B,  in  Table  I  could  also  be  applied  to  try 
to  prove  theorem  1.  Any  expression  or  subexpres(cid:173)
sion  is  a  substitution  instance  of  the  l e f t-
hand -side  of  R4.  Thus,  any  (sub)express ion  can 
be  rewritten,  using  RA,  by  f i r st  adding  to  it 
any  express ion,  then  subtrac ting  the  same  expres(cid:173)
sion  that  had  been  added.  There  are  clearly  an 
infinity  of  expressions  that  can  be  substituted 
for  B,  so  that  the  search  space  is  locally  in(cid:173)
finite  and,  consequently,  some  recent  resul ts 
in  heuristic  search  by  Pohl  (6)  on  locally 
finite  search  spaces  are  not  applicable  to  the 
problem  domain  considered  here. 

We  call  expansion  rules  those  rules  (such  as 

R4  in  Table  1,  or  R6  in  Table  IV)  whose  repeated 
application  could  generate  an  i n f i n i te  search 
space  for  the  problem  domain  considered.  Some 
ordered  generation  of  the  space  is  needed, 
especially  for  those  rules  (such  as  R4  in  Tab lei) 
which  allow  the  introduction  of  arbitrary  expres(cid:173)
sions . 

Since  expansion  rules  play  an  important  role 
in  our  system  they  deserve  a  more  detailed  dis(cid:173)
cussion.  The  rules  are  a  sample  of  the  different 
types  of  expansion  rules  in  the  doma ins  that  we 

We  further  distinguish  between  two  types  of 
expansion  rules.  Atomi c  expansion  rules  have  a 
single  variable  as  the  left-hand-side.  Rules 
1,  4  and  5  are  atomic.  The  other  expansion  rules 
are  called  non-a tomic.  The  search  strategy  is 
slightly  different  for  the  two  types  of  expan(cid:173)
sion  rules  (see  below) 

It  is  undecidable  in  general  whether  a  re(cid:173)

write  rule  system  has  an  infinite  search  space. 
However,  in  the  problem  domains  that  we  consid(cid:173)
ered,  a  rule  R  is  an  expansion  rule  if  it  can  be 
applied  to  its  own  right-hand-side  ( i . e. 
if  the 
right-hand-side  is  a  substitution  instance  of 
the 
if  the  expression  ob-
tained  by  applying  R  to  its  own  r ight-hand-
side  has  more  nodes  (when  considered  as  a  tree) 
than  the  right-hand-side  of  R.  It  is  seen  that 
testing  whether  a  rule  is  an  expansion  rule  is 
a  simple  matter  in  our  problem  domains. 

lef t-hand-side)  and 

the  system  terminates.  Otherwise,  a ll 

Our  sys tematic  search  procedure  proceeds  as 
f i r st  non-expansion  rules  are  applied 

follows- 
to  the  left-hand  side  of  the  theorem  to  be 
proved.  If  the  right-hand  s ide  of  the  theorem 
is  found, 
nodes  of  the  search  tree  are  eventually  dead, 
since  non-expansion  rules,  by  definition,  can(cid:173)
not  generate  an  infinite  search  space.  At  that 
point,  nodes  of  the  search  tree  are  generated 
in  leve1  order  (9).  For  each  node  so  generated, 
we  apply  a ll  expansion  rules  (as  w i ll  be 
described  below),  adding  any  new  nodes  to  the 
search  tree.  We  then  shift  to  usIng  on 1y  non-
expansion  rules  again.  It  is  seen  that  expan si on 
rules  are  called  in  onlv  when  all  else  has 
failed;  and  when  they  are  ca 1 led  in,  they  are 
applied  as  sparsely  as  possible.  The  reason  for 
this  is  s imply  tha t  expansion  rules  tend  to 
increase  drastically  the  size  of  the  search 
space. 
the  similar(cid:173)
ity  of  our  asymme trie  use  of  rewrite  rules  to 
the  asymmetry  in  the  use  of  the  two  classes  of 
axioms  in  the  geometry  theorem  machine  (5). 
In 
this  latter  system,  axioms  of  class  ( i i)  are 
used  only  when  axioms  of  class  (\)  have 
to  prove  a  theorem 

is  interesting  to  notice 

failed 

It 

An  example  of  the  use  of  a  1 oca 1ly  finite 
is  g iven  in 
expansion  rule  (R6  in  Table  IV) 
Figure  2.  After  the  application  of  Rl 
to  the 
left-hand  side  of  theorem  1,  Table  IV,  both 
nodes  of  the  search  tree  are  dead .  The  (unique) 
expans ion  rule  R6  is  appli ed  to  t he  f i r st  node 
*v0  is  a  constant 

Session No.  14 Theorem Proving 

603 

of  the  tree,  namely  (SÂ«*rR).R,  producing  nodes 
3,4  and  5.  We  switch  back  to  non-expanBion  rules 
only,  and  the  answer  is  quickly  found  at  node  9. 
Notice  that  nodes  2,6  and  7  are  dead. 

The  situation  is  more  complex  for  a  locally 
infinite  expansion  rule,  which  introduces  arbi(cid:173)
trary  expressions,  as,  for  example,  R4  in  Tables 
I  and  I I.  We  have  chosen  to  allow  for  such 
expressions  only  those  that  can  be  constructed 
legally  from  the  atoms  encountered  in  the  theoien 
to  be  proved,  which  is  no  real  restriction.  It 
should  be  noted  that  here  is  the  only  case  where 
the  right-hand  side  of  the  theorem  is  used  for 
purposes  other  than  just  checking  for  termina(cid:173)
tion.  Otherwise,  the  search  is  Indeed  blind! 

Our  strategy  is  to  grow  the  search  space  as 
slowly  as  possible.  We  attain  our  goal  by  limit(cid:173)
ing  both  the  expressions  to  which  atomic  expan(cid:173)
sion  rules  are  applied,  and  the  expressions  that 
can  be  substituted  for  the  arbitrary  variables 
in  locally  infinite  expansion  rules.  The  growth 
of  the  search  space  takes  place  in  several  passes, 
and  in  each  successive  pass  there  are  fewer 
limitations  on  the  use  of  expansion  rules. 

In  a  f i r st  pass,  atomic  expansion  rules  (which 

could  be  applied  to  any  (sub)expression  of  a 
node)  are  applied  only  to  variables,  constants 
and  unary  functions.  There  is  no  restriction  on 
the  (sub)expreBsions  that  non-atomic  expansion 
rules  are  allowed  to  match.  During  that  same 
f i r st  pass,  we  limit  the  expressions  that  w i ll 
be  substituted  for  the  arbitrary  variables  in 
locally  infinite  rules. 
is  substituted  for  the  arbitrary  variable,  wc 
say  that  we  are  expanding  with  that  expression.) 
In  the  f i r st  pass, 
rules  expand  only  with  variables,  constants  and 
unary  functions. 

locally  infinite  expansion 

(If  a  certain  expression 

If  the  theorem  is  not  proved  during  the  f i r st 
pass,  the  restrictions  described  above  would  be 
successively  loosened.  We  did  not  need  to  pro(cid:173)
gram  passes  beyond  the  f i r st  since  a ll  theorems 
could  be  proved  during  the  f i r st  pass.  Moreover, 
we  are  now  testing  more  sophisticated  techniques 
for  expansion  that  render  much  of  the  above 
scheme  inefficient. 

One  might  argue  that  we  are  using  heuristics. 
We  believe  though  that  we  are  only  using  a  stra(cid:173)
tegy,  since  the  order  in  which  the  rules  are 
applied  is  predetermined  and  not  modified  during 
proofs. 
IV.  COMPARISONS  WITH  OTHER  SYSTEMS 
A.  Comparisons  with  Quinlan  and  Hunt 

The  theorem  proverj of  Q&H  (there  are  two 
versions  of  FDS)  were  written  for  a  FORTRAN 
compiler  on  the  IBM  7094.  Our  system  is  written 
for  a  LISP  1.5  interpreter  on  the  CDC  6600.  Com(cid:173)
parisons  between  the  speeds  of  the  two  systems 
are  awkward.  A  consensus  of  "experts"  indicates 
that  we  should  expect  our  system  to  be  about 
ten  times*  slower  than  Q&H.  ( It  was  estimated 
that  the  FORTRAN  compiler  is  about  100  times 
faster  than  our  LISP  interpreter,  while  the 
CDC  6600  may  be  some  eight  to  ten  times  faster 
than  the  IBM  7094.)  To  facilitate  compari-

sons,  a ll  our  times  (in  seconds)  were  divided 
by  10  in  the  results  in  Tables  I  through  VI. 
All  rewrite  rules,  labelled  Ri,  were  taken  in 
exactly  the  same  order  as  given  in  Q&H,  and  a ll 
theorems,  labelled  T i,  proved  exactly  in  the 
same  order.  All  the  proofs  mentioned  in  this 
article  were  obtained  with  the  same  version  of 
our  program.  By  contrast,  the  results  mentioned 
by  Q&H  are  for  different,  locally  optimized 
programs.  The  only  exception  is  in  Table  V: 
the 
rewrite  rules  in  Q&H  are  insufficient  to  prove 
the  theorems.  Q&H  indicate  that  they  used  addi(cid:173)
tional  rewrite  rules,  without  specifying  which. 
We  added  the  four  rewrite  rules  R12  through  R15. 
Because  of  these  changes,  the  results  of  Table  V 
are  not  as  meaningful  as  those  of  the  f i r st 
four  tables.  (In  the  tables  below,  S&M  label 
our  results.) 

* It  is  not  crucial  that  the  reader  agree  with 
our  estimate. 

604 

Session No.  14 Theorem Proving 

Session No.  14 Theorem Proving 

605 

Ac tually, the eomparison between QfcJl and our 
system  is  misleading.  Not  only  are  their  results 
obtained wi th two d ifferent vers ions of FDS,  but 
their  results  for  each  Table  arc  obtained  after 
opttimizat ion of the average t ime to prove the 
theorems  of  a  particular  table.  In  other words, 
the  particular  version  of FDS  that  proves most 
efficiently  the  theorems  of  Table  III  performs 
miserably  when  proving  the  theorems  of  Table  I. 
In Table VI, we list, when ava i lable, the bes t 
and wors t  average  t imes  to prove  theorems  in  the 
various tables (as collected from (7)) as wo 11 
as  the results  in Q&H and our own. 

A proof  terminates when  the  (right-hand  side 
of  a)  theorem  is  found.  The  level  at  which  the 
theorem  is  encountered  is  fixed,  but  the  number 
of  nodes  searched  at  that  level  can  vary  if we 
change  the  order  in which  the  rewrite  rules  are 
applied.  1t would  be  straightforward  to  imple(cid:173)
ment a sys tern tha t would change the order of 
application  of  rewrite  rules  to minimize  the 
average  time per proof  in a given table. We can(cid:173)
not  estimate  the  gains  in  speed  that would 
result. As we mentioned previously, we have kept 
the order of the rules and t lie or cms that we 
found in Q&H. 

Fikes  (4)  describes  four  heuristic  search 

problems:  monkey and bananas; water]ug; a pro(cid:173)
gramming problem; and  the mi ssi onaries and cann i-
bals .  The  sta tements  of  these problems  are  not 
reproduced here. These problems in VIkes are 
written  in a  programming  language,  but  each  of 
them can be  translated easily  into a rewrite 
rule  systorn.  Such  a  translation  for  the  fIr st 
problem  is  given  in  Figure  3.  In  each  triple, 
the  first  element  Indicates  the  monkey's  position 
the  second element  the monkey's  height and  the 
last  element  the  position  of  the  box.  Each  of 
the rewrite rules corresponds to an a 1lowable 
ac tivi ty  of  the monkey,  in exac tly  the  same  order 
as  found  in  Fikes.  The  translation  of  the  pro(cid:173)
gramming  problem  is  shown  in Figure  4.  The  sex(cid:173)
tuple  represents  the  two regi sters  put  side  by 
side.  The  rewrite  rules  correspond  to  the  allowed 
shi ft  operations. 

Fikes1 system was programmed on an IBM 360/67 

B. Compari son with F ikes 

for an IPL-V  interpreter.  His computer may be 
slightly s1 owe r than the CDC 6600, wh11e we 
expec t 1 PL to have a speed comparable to our 
LISP.  The  real  times  to  solution,  also  listed  in 
Figures  3 and 4,  are  therefore  comparable as 
gi ven. 

The water jug problem and the missionaries and 

canni baIs problem necessi tate some ari thmetic 
capabilities  that  our  system  lacks.  Both  problems 

606 

Session No.  14 Theorem Proving 

can  be  easily  translated  into  a  system  for  re(cid:173)
write  rules  (see  (10)).  For  example,  in  the 
waterjug  problem  the  rewrite  rule  corresponding 
to  pouring  from  the  large  jug  into  the  small 
Jug  would  be: 

(a,b)  :=  (a=-min(5,a+b),  b'=b-(a'-a)) 

where  the  f i r st  and  second  element  of  the  ordered 
pair  represent  the  amounts  of  water  in  the  small 
and  large  jugs,  respectively. 

The  missionaries  and  cannibals  problem  has  a 

total  search  space  of  16  nodes  (1)  while  our 
hand  simulation  (10)  shows  that  our  system  would 
solve  the  waterjug  problem  in  a  total  of  seven 
nodes.  We  would  estimate  our  system  to  use  less 
than  2  seconds  for  each  of  these  problems.  These 
(hypothesized)  times  should  be  compared  to  491 
seconds  and  83  seconds  for  Fikes'  REF-ARF.  More(cid:173)
over,  the  particular  way  in  which  the  missionaries 
and  cannibals  problem  is  stated  in  REF  has  a 
strong  influence  on  the  time  needed  to  solve  it 
Fikes  mentions  that  a  particular  statement  of 
the  problem  would  require  more  than  1800  seconds 
of  360/67  time. 
C.  Comparisons  with  Chang. 

Chang  (2)  reports  on  a  very  efficient  theorem 
prover  based  on  the  resolution  principle.  He  has 
proved  some  of  the  theorems  from  Q&H.  Table  VII 
compares  his  times  with  ours.  Chang's  program  is 
written  in  LISP  1.6  for  the  FDP-10.  We  do  not 
know  whether  a  compiled  or  interpreted  version 
of  LISP  1.6  was  used. 

The  results  described  in  this  section  could 
be  improved  substantially,  especially  those  of 
the  long  proofs.  A  newly  generated  node  is  added 
to  the  search  space  only  if  it  is  not  already  in 
the  space.  At  present,  the  space  is  searched 
linearly  for  the  existence  of  the  node.  A  hash-
coding  scheme  would  cut  down  dramatically  on  the 
time  needed  for  such  a  search. 

In  spite  of  such  improvements,  our  system 

would  perform  poorly  in  potentially  large  search 
spaces  which  could  be  reduced  significantly  by 
the  manipulation  of  constraints.*  We  have  repor(cid:173)
ted  results  on  problems  for  which  few  or  no  con(cid:173)
straints  can  be  used. 
*Fikes'  system  has  solved  several  constraint 
satisfaction  problems. 

V.  CONCLUSIONS 

The  research  reported  here  is  part  of  a 

larger,  continuing  investigation  into  the  cost 
of  overhead  in  a  theorem  prover.  It  appears 
intuitive  (but  it  may  not  be  true)  that,  as  a 
theorem  prover  applies  more  sophisticated  tech(cid:173)
niques  to  reduce  its  search  space, 
expend  more  time  for  computation  per  node  con(cid:173)
sidered.  The  total  number  of  nodes  considered 
is  an  inadequate  measure  of  the  efficiency  of  a 
theorem  prover,  since  this  number  does  not  take 
into  account  the  cost  per  node.  Total  time  to 
solution  s t i ll  appears  as  the  only  reasonable 
criterion  for  comparing  different  systems  with 
similar  domains. 

it  w i ll 

It  may  come  as  a  surprise  to  many  that  our 
systematic,  blind,  search  procedure  performs  at 
least  one  to  two  orders  of  magnitude  faster  than 
the  most  powerful  existent  theorem  provers  to 
which  it  has  been  compared.  The  result  is  even 
more  surprising  when  it  is  stressed  that  the 
problem  domains  considered  have  infinite  search 
spaces  that  are  often  not  even  locally  finite 
The  results  can  be  explained  by  noticing  that 
the  proofs  of  the  theorems  are  very  short.  The 
deepest  proofs  in  Q&H  (tied  by  the  theorem  in 
Figure  1)  have  a  depth  of  only  5.  Many  of  the 
proofs  in  Q&H,  and  a ll  four  problems  in  Fikes, 
are  found  after  generating  at  most  a  few  dozen 
nodes.*  Consequently,  the  problems  considered 
should  not  tax  the  capabilities  of  a  sophisti(cid:173)
cated  heuristic  program  (although  they  certainly 
seem  to  have  done  so.1).  These  problems  do  not 
represent  adequate  tests  for  such  a  program. 

An  informal  investigation  into  the  problems 
solved  by  a r t i f i c i al  intelligence  systems  using 
heuristic  search  indicates  that  many  of  the 
tasks  have,  in  fact,  very  small  search  spaces. 
If  these  problems  are  representative  of  many  of 
the  future  problems  to  be  solved  by  these  systems, 
then  it  is  apparent  that  a  very  powerful  problem 
solver  can  be  built  by  combining  heuristic  and 
systematic  search  procedures  that  would  time-
share  available  resources.  The  systematic  search 
procedure  could  solve  very  rapidly  a  large 
number  of  the  easy  problems.  The  cooperation, 
inside  a  large  system,  of  subsystems  of  various 
degrees  of  sophistication  w i ll  be  a  fascinating 
area  of  research. 
VI .  REFERENCES 
(1)  Amarel,  S.  On  Representations  of  Problems 
of  Reasoning  about  Actions,  in:  Michie,  D. 
(Ed.),  Machine  Intelligence  3.  American 
Elsevier,  N.  Y.,  1968,  131-171. 

(2)  Chang,  C.L.  The  Unit  Proof  and  the  Input 
Proof  in  Theorem  Proving,  J.ACM.  17,  4, 
1970,  698-707. 

(3)  Ernst,  G.W.  and  Newell,  A.  GPS:  a  Case 

Study  in  Generality  and  Problem  Solving. 
Academic  Press,  N.Y.,  1969. 

(4)  Fikes,  R.E.  REF-ARF:  A  System  for  Solving 
Problems  Stated  as  Procedures,  A r t i f i c i al 
Intelligence,  i,  1970,  27-120. 

*A  more  thorough  discussion  of  the  size  of  search 
spaces  w i ll  be  reported  subsequently. 

Session No.  14 Theorem Proving 

607 

(5)  Gilmore,  P.C.  An  Examination  of  Che  Geometry 

Theorem  Machine,  A r t i f ic ial  In telligence, 
J_,  3,  1970,  171-187. 

(6)  Pohl,  I.  Heuristic  Search  Viewed  as  Path 

Finding  in  a  Graph,  A r t i f i c i al  Intelligence. 
J.,  3,  1970,  193-204. 

(7)  Quinlan,  J.R.  FORTRAN  Deductive  System: 
Experiments  with  two  Implementations, 
Technical  Report  -68-5-03,  Computer  Science 
Group,  University  of  Washington,  Seattle, 
1968. 

(8)  Quinlan,  J.R.  and  Hunt,  E.B.  A  Formal  Deduc(cid:173)
tive  Problem-Solving  System,  J.ACM,  15,  4, 
1968,  625-646. 

(9)  Salton,  G.  Manipulation  of  trees  in  informa(cid:173)

tion  retrieval,  C.A.C.M. ,  5_,  2,  103-114, 
1962. 

(10)  Siklossy,  L.  and  Marinov,  V.  Experiments 
in  search,  Technical  Report  TSN-20,  Com(cid:173)
putation  Center,  University  of  Texas  at 
Austin,  1971. 

