Contract Algorithms and Robots on Rays: Unifying Two Scheduling Problems 

Daniel S. Bernstein 

Dept.  of Computer Science 
University  of Massachusetts 

Amherst,  MA  01003 
bern@cs.umass.edu 

Lev  Finkelstein 

Computer Science Department 

Technionâ€”IIT 

Haifa 32000, Israel 
lev@cs.technion.ac.il 

Shlomo  Zilberstein 

Dept.  of Computer Science 
University  of Massachusetts 

Amherst,  MA 01003 
shlomo@cs.umass. 

Abstract 

We  study  two  apparently  different,  but  formally 
similar, scheduling problems. The first problem in(cid:173)
volves contract algorithms, which can trade off run 
time for solution quality,  as long as the amount of 
available run time is known in advance.  The prob(cid:173)
lem is to schedule contract algorithms to run on par(cid:173)
allel processors,  under the  condition that an  inter(cid:173)
ruption can occur at any time, and upon interruption 
a solution to any one of a number of problems can 
be requested.  Schedules are compared in terms of 
acceleration ratio, which is a worst-case measure of 
efficiency.  We provide a schedule and prove its op-
timality among a particular class of schedules.  Our 
second problem involves multiple robots searching 
for a  goal  on  one  of multiple  rays.  Search  strate(cid:173)
gics are compared in terms of time-competitive ra(cid:173)
tio,  the  ratio  of the  total  search  time  to  the  time 
it  would  take  for  one  robot  to  traverse  directly  to 
the goal. We demonstrate that search strategies and 
contract schedules are formally equivalent.  In addi(cid:173)
tion, for our class of schedules, we derive a formula 
relating the  acceleration  ratio  of a  schedule  to the 
time-competitive  ratio  of the  corresponding  search 
strategy. 

Introduction 

1 
In this paper, we demonstrate a connection between two prob(cid:173)
lems that initially seem unrelated.  The first involves comput(cid:173)
ing solutions to multiple problems, under the condition that a 
solution to any one of the problems can be requested at any 
time.  Challenges of this type arise in the design of intelligent 
user interfaces,  information prefetching  systems,  and medi(cid:173)
cal diagnosis systems. The second problem involves multiple 
robots searching an unknown environment for a goal.  Prob(cid:173)
lems  of this  nature  arise  in  robotics  and  space  exploration. 
In the following paragraphs we describe the problems, along 
with our contribution, in more detail. 

The  first  problem  concerns  anytime  algorithms  [Horvitz, 
1987; Dean and Boddy, 1988; Russell and Zilberstein, 1991], 
which  produce  solutions  of different  qualities  depending  on 
available computation time.  More  specifically,  we  focus on 

contract  algorithms,  which  are  anytime  algorithms  that  re(cid:173)
quire the deadline as input prior to the start of execution. With 
contract algorithms,  no  assumptions  can be  made about re(cid:173)
sults produced before the given deadline. This is in contrast to 
the familiar interruptible algorithms, which can be queried at 
any point during execution.  Although less flexible than inter-
ruptible algorithms, contract algorithms typically use simpler 
data structures, making them easier to implement and main(cid:173)
tain.  An example  in Al  is  game playing programs based  on 
heuristic search. For these programs, the allowed deliberation 
time is usually known in advance, and is used to set internal 
parameters.  Another example is planning algorithms that per(cid:173)
form state-space abstraction.  With these algorithms, the run 
time can be controlled by setting the abstraction level at the 
start of execution. 

Our problem  can  be  stated  as  follows.  We  are  given  n 
instances of an optimization problem,  along with  a  contract 
algorithm for the problem, and we have an m-processor ma(cid:173)
chine on which to run the algorithm.  An interruption can oc(cid:173)
cur at any time, and a solution can be requested for any one 
of the problem instances.  Given these constraints, we want a 
good general strategy for scheduling runs of the algorithm on 
the processors. 

In  the  case  of one  problem  instance  and  one  processor, 
Russell and Zilberstein [1991] suggested iteratively doubling 
the contract lengths.  With this schedule, for any interruption 
time  t,  the  last  contract  completed  (if one  exists)  is  always 
of length  at  least t/4.  This  factor of four is the acceleration 
ratio  of the  schedule,  a  worst-case  measure  of its  efficiency. 
Zilberstein et al.  [1999] showed that no schedule can achieve 
an acceleration ratio less than four. 

The generalization to multiple problem instances has been 
considered  [Zilberstein  et  al.,  1999],  as has the generaliza(cid:173)
tion to scheduling contracts on parallel processors [Bernstein 
et al, 2002].  Optimal acceleration ratios have been derived in 
both cases. The more general multi-processor, multi-instance 
case has not previously been studied.  In this paper,  we pro(cid:173)
vide a schedule for this case, and we prove that this schedule 
is optimal among a restricted, though still interesting, class of 
schedules.  The optimality proof is  a  nontrivial  extension of 
the previous proofs, and contains as a lemma a generalization 
of the monotone convergence principle. 

This  work  is  most  closely  related  to  Horvitz's  continual 
computation  framework  [Horvitz,  2001].  In his  framework, 

SCHEDULING 

1211 

as in ours, computation is performed with limited knowledge 
about the  deadline  or desired  result.  However,  the  assump(cid:173)
tions underlying the two frameworks are different. In the con(cid:173)
tinual computation framework, the limited knowledge comes 
in the form of probability distributions. In contrast, our use of 
acceleration ratio does not require probabilistic  information. 
Furthermore, contract algorithms and parallel processing are 
both not considered in continual computation. 

Our contract scheduling results can  be directly applied to 
a robot search problem.  In this problem, m robots search for 
a goal that is located on one of p intersecting rays.  The aim 
is to minimize the time-competitive ratio, which is the worst-
case  ratio  of the total  time  spent searching to the time  for a 
single robot to traverse directly to the goal.  The optimal ratio 
for the  one-robot  case  was  derived  previously  [Baeza-Yates 
etal,  1993]. 

We address the general multi-robot case, for which search 
strategies are  formally equivalent to contract schedules.  For 
our class of schedules, we derive a formula relating the accel(cid:173)
eration ratio of a schedule to the time-competitive ratio of the 
corresponding search strategy.  The optimal time-competitive 
ratio is derived as a corollary. 

This work is the first to draw a precise connection between 
contract  scheduling  and  multi-robot  search,  and  the  first  to 
provide  nontrivial  results  for  the  multi-robot  case.  Kao 
al  [1998]  studied  the  multi-robot  problem,  but  used  a  dif(cid:173)
ferent performance measure.  They minimized the distance-
competitive  ratio,  which  is  the  worst-case  ratio  of the  total 
distance  traveled  during  the  search  to  the  distance  between 
the origin and the goal. 

2  Scheduling a Contract Algorithm 
2.1  Problem  Description 
An  anytime  algorithm  A,  when  applied  to  an  optimization 
problem  instance  i  for  time  t,  produces  a  solution  of some 
The  function  QA  is  called  A's 
real-valued  quality 
performance profile. 
In  general,  one  does  not  know  an  al(cid:173)
gorithm's  performance  profile.  Nevertheless  the  concept  of 
a  performance  profile  is  useful  in  reasoning  about  anytime 
algorithms.  We  assume  that  the  performance  profile  of an 
anytime algorithm on any problem instance is defined for all 

and  is a nondecreasing  function oft. 

The  distinctions  among  different  types  of anytime  algo(cid:173)
rithms  arise from different assumptions about which param(cid:173)
eters  are  known prior to  execution.  When  both  t  and  i  are 
known  in  advance,  the  algorithm  is  called  contract.  When 
only i is known in advance, the algorithm is called interrupt-
ible.  For the case where both are unknown, we will  say that 
the  algorithm  is  multi-interruptible,  because  it acts  like mul(cid:173)
tiple interruptible algorithms running in parallel. 

Suppose we have a contract algorithm A, which we can run 
on a machine with m processors.  At some unknown deadline, 
a  solution to  one  of n  problem  instances  will  be  requested. 
This setup requires a multi-interruptible algorithm, which we 
can create by scheduling contracts in such a way that progress 
is  continually  made  on  each problem  instance.  Upon  inter(cid:173)
ruption  and  query,  the  result  returned  is  that  of the  longest 
completed contract dedicated to the desired problem instance. 

Figure 1: Scheduling a contract algorithm on three processors 
to create a two-problem multi-interruptible algorithm. 

Note that although G depends on A",  we omit the subscript. 
Dependence on the schedule will be made implicit through(cid:173)
out  the  paper  for ease  of notation.  For  every  schedule,  the 
index  ordering  must  correspond  to  the  completion  time  or(cid:173)
dering.  Furthermore,  no two contracts may complete at the 
exact  same  time.  The  formal  statement of these two  condi(cid:173)
for all k, I.  Also, 
tions is that 
a  schedule  must have 
This 
a solution is available for 
ensures that after time 
each problem instance. 

is equivalent to 

for 

To compare schedules,  we use a worst-case metric called 
acceleration  ratio.  The  acceleration  ratio tells  us how much 
faster our constructed algorithm would need to run in order to 
ensure the same quality as if the query time and problem were 
known, and a dedicated processor was assigned to producing 
a result.  Intuitively, it measures how well a schedule handles 
the  uncertainty about  the  problem  instance  and  interruption 
time. 

Before formally defining acceleration ratio,  we must state 
some more technical details of the problem and present some 
more definitions.  First, we take the view that when a contract 
completes  at  time  t,  its  solution  is  available  to  be  returned 
upon interruption at any time  r 
t.  Second, we assume that 

1212 

SCHEDULING 

We can now give a precise definition of acceleration ratio. 

In the next section, we provide a schedule that is optimal 
within a restricted, though still interesting, class of schedules. 
We state below in precise terms the properties that delineate 
the class of schedules under consideration.  Schedules having 
the three properties below will be called cyclic schedules. 

The  first  property  states  that  problem  instances  arc  com(cid:173)
pleted in a round-robin manner.  This seems sensible, as the 
desired  problem  instance  is  unknown.  However,  we cannot 
yet  prove  that  for  every  non-problem-round-robin  schedule, 
there is an equally good problem-round-robin schedule. 
Property 1  (Problem-round-robin) 
k. 

for  all 

mod 

The  next  property  states  that  the  lengths  of contracts  for 
each problem  instance  must  increase  with time.  Given that 
performance profiles are nondecrcasing, it seems that it would 
never be beneficial to use a schedule that doesn't satisfy this 
property.  However,  as  with  the  first  property,  we  cannot 
yet  prove  this.  One  difficulty  lies  in  having  to  satisfy  the 
problem-round-robin  property  mentioned  above.  We  would 
like to be able to "remove" useless contracts from a schedule, 
but  we  have  not  found  a  way  to  do this  while  guaranteeing 
that the resulting schedule will be problem-round-robin. 
Property 2  (Length-increasing) For  all 

and 

then  

The final property states that processors return results in a 
round-robin manner. This property does not play a part in our 
lower bound derivation, but it is used in drawing a connection 
to the robot search problem.  We introduce it at this point only 
for ease of exposition. 
Property 3  (Processor-round-robin) 
all  k. 

mod  m  for 

We can prove a lemma that allows us to cast acceleration 
ratio  in  simpler terms  when  we  are  considering  only  cyclic 
schedules.  In the proof,  the following  facts arc established: 
acceleration  ratio can be  stated  without reference  to perfor(cid:173)
mance  profiles;  the  only  interruption  times  that  need  to  be 
considered are completion times; and upon interruption, the 
result returned is  from  the contract with index exactly n less 
than  index of the current contract. 

To show that equality holds, assume the contrary and derive 
a contradiction with the fact that 
is defined as the 
smallest constant enforcing the inequality  between 
and  

Next we show that 

is  left-continuous  everywhere  and  piece-

For each 
wise constant, with  the pieces  delimited by  time  points 
So for all 
is  left-continuous and piecewise  linear 
and increasing.  Thus, the local maxima  of 
occur at 
the points  Gk;  no  other times may play  a  role  in  the supre-
mum. 

Finally, 

follows from the problem-round-robin and length-increasing 
properties, and the fact that no two contracts can finish at the 
exact same time.  

To conclude this section, we define the minimal accelera(cid:173)

tion ratio for m processors and ?/ problems to be 

where the  infimum  is taken over the  set of cyclic  schedules. 
In  the  following  sections,  we  provide  tight  bounds  for  this 
ratio. 

2.2  An  Exponential  Schedule 
A  simple  approach  to  scheduling  contract  algorithms  is  to 
have the contract lengths increase exponentially.  We consider 
the schedule 

It is easily verified that this is a cyclic schedule.  The follow(cid:173)
ing theorem gives an expression for this schedule's accelera(cid:173)
tion ratio. 

SCHEDULING 

1213 

Theorem 1 The acceleration ratio for the exponential sched(cid:173)
ule is 

There are a few things to note about the ratio we just de(cid:173)
rived.  As  the  number  of processors  approaches  infinity,  it 
tends to one.  This is intuitive; by adding processors, we can 
get arbitrarily close to the omniscient algorithm.  As the num(cid:173)
ber of problems approaches infinity, the ratio tends to infinity. 
Finally, the ratio depends only on the ratio of problems to pro(cid:173)
cessors, and not on the absolute numbers. 

We  turn  now  to  showing  that  no  cyclic  schedule  can 

achieve a smaller ratio. 

Lower  Bound 

2.3 
We define a function to represent the sum of the lengths of all 
the contracts  finishing  no later than contract k finishes: 

We can  derive an  inequality  involving only  the acceleration 
ratio and  { # * }. 
Lemma 2  For all cyclic schedules  X  and all k, 

1214 

SCHEDULING 

Figure 2: The search problem with three robots and five rays. 

at the same speed, search for a goal at an unknown location 
on one of the rays (see Figure 2). The search ends as soon as 
one of the robots finds the goal. Because there are not enough 
robots to cover all of the rays, finding a good search strategy 
is nontrivial.  At this  level of detail, the search problem may 
seem  very  different  from  the  contract  scheduling  problem. 
Below  we  provide  a  more  precise description  of the  search 
problem and show how the contract scheduling results can be 
applied. 

A search is an infinite sequence of search extents, or return 
trips departing from the origin. Formally, a search strategy is 
a triple 

where 

is the robot executing search extent  

takes place, and 
is the ray on which search extent 
is  the  length  of search  extent 
By  adding  the  same  con(cid:173)
ditions  as  in  the  contract  scheduling  case,  we  get  an  exact 
correspondence between schedules and search strategies.  A 
cyclic search strategy  is defined in the same way as a cyclic 
schedule. 

A  natural  metric  for  the  efficiency  of a  search  strategy  is 
the  time-competitive  ratio,  the  worst-case  ratio  of  the  total 
time spent searching to the time required for a single robot to 
traverse directly to the goal.  We assume that the goal is not 
considered discovered until a robot actually moves beyond it. 
We  assume  also  that  the  location  of the  goal  is  such  that  it 
cannot be found on the first search extent on any of the rays. 
This  means  that  for  each  ray  a,  we  consider only  locations 

Combining this inequality with Theorem 1, we get the desired 
result.  

3  Multi-Robot Search on Rays 
The  results  from  the  previous  section  can  be  directly  ap(cid:173)
plied to a formally similar problem involving multiple robots 
searching  for a goal.  The problem  is described  as  follows. 
Initially,  m  robots  stand  at  the  intersection  of p  rays  (with 
m  p).  The  robots,  all  moving  in  a  continuous  fashion  and 

Before formally  defining  time-competitive ratio,  we  need 
to introduce a new function and explain its use in the defini(cid:173)
tion. Let us define 
to be the index of the first search ex(cid:173)
tent that goes past point t on ray a. This means that if the goal 
is located at point t on ray a, then it is found during search ex(cid:173)
tent 
is 
(The factor of two results from search extents going 
out and back on rays.) However, since the search ends as soon 
as the goal is found, the last extent does not go to completion, 
and thus we must subtract out 
This leads us to 
the following formal definition for time-competitive ratio. 

The total search time up through extent 

SCHEDULING 

1215 

Definition 2  The time-competitive ratio, 

We  can  now  give  a  formula  for the  relationship between 
acceleration ratio and time-competitive ratio for cyclic sched(cid:173)
ules and search strategies. 
Theorem 3  For all cyclic search strategies (schedules)  X, 

where X' is the same as X,  but  with   
Proof:  Because of the length-increasing and problem-round-
robin properties, we know that the  first  search extent to pass 
a point on a ray comes p extents after the last extent on that 
same ray.  Formally, we have that for all a and all  

Thus we have  

4  Conclusion 
In this paper, we addressed two apparently different schedul(cid:173)
ing  problems,  one  involving  contract  algorithms,  and  the 
other  involving  robots  searching  on  rays.  For  the  contract 
scheduling problem,  we provided a schedule and proved its 
optimality  among  the  class  of cyclic  schedules.  We  further 
showed how contract scheduling results can be applied to the 
robot search problem, thus unifying the two problems. 

A natural  direction  for future  research  is to  study  less re(cid:173)
stricted classes  of schedules  and  search  strategies.  One  in(cid:173)
triguing question is whether lower acceleration ratios can be 
achieved  with  schedules  that  are  not  problem-round-robin 
or  length-increasing. 
It  would  also  be  interesting  to  know 
whether the  contract  scheduling  and  robot  search  problems 
have  similarities  beyond  those  that  result  from  using  cyclic 
schedules and search strategies. 

Acknowledgments 
We thank William Hesse and Laszlo Babai for providing key 
insights into the proof of Lemma 3.  We also thank Theodore 
Perkins  and  Charles  Sutton  for  comments  on  earlier drafts. 
Support for this  work  was  provided  in  part  by  the  NSF  un(cid:173)
der  grant  IIS-0219606  and  by  NASA  under  grants  NAG-2-
1394 and NAG-2-1463. Daniel Bernstein was supported by a 
NASA GSRP Fellowship.  Any opinions, findings,  and con(cid:173)
clusions  or recommendations  expressed  in  this  material  are 
those of the  authors and do  not reflect the  views  of the NSF 
or NASA. 

1216 

SCHEDULING 

where 
This  equa(cid:173)
tion  is a linear nonhomogeneous difference equation  [Mick-
ens,  1987].  The behavior of  {qk}  depends on the roots of the 
characteristic polynomial, 

and 

is bounded below,  and since 

con(cid:173)
We know that 
verges, 
is  also  bounded  above.  Thus  to  demonstrate 
convergence,  it  suffices  to  show  that  /  has  no  roots  on  the 
unit circle. 

Consider the polynomial 

[Mickens,  1987]  Ronald E.  Mickens.  Difference Equations. 
Van  Nostrand  Reinhold  Company,  Inc.,  New  York,  NY, 
1987. 

[Russell and Zilberstein,  1991]  Stuart J. Russell and Shlomo 
Zilberstein. Composing real-time systems. In Proceedings 
of the  Twelth  International Joint  Conference  on  Artificial 
Intelligence,  1991. 

[Zilberstein et al,  1999]  Shlomo 

Francois 
Charpillet,  and  Philippe  Chassaing.  Real-time  problem-
In  Proceedings  of the 
solving  with  contract  algorithms. 
Sixteenth 
International  Joint  Conference  on  Artificial 
Intelligence,  1999. 

Zilberstein, 

Clearly  z  =  1  is a root of g but not o f /.  To show that / has 
no roots on the unit circle,  we  will show that g has no roots 
on the unit circle other than z  =  1. 

then 

We must show that for all 

then 

References 
[Baeza-Yates  et  al.,1993]  Ricardo Baeza-Yates, Joseph Cul(cid:173)
berson, and Gregory Rawlins.  Searching in the plane.  In(cid:173)
formation  and  Computation,  106:234-252,  1993. 

[Bernstein et al, 2002]  Daniel  S.  Bernstein,  Theodore  J. 
Perkins,  Shlomo  Zilberstein,  and  Lev  Finkelstein. 
Scheduling contract algorithms on multiple processors.  In 
Proceedings of the Eighteenth National Conference on Ar(cid:173)
tificial  Intelligence,  2002. 

iDean and Boddy,  1988]  Thomas Dean and Mark Boddy. An 
In  Proceedings  of 
analysis  of time-dependent  planning. 
the Seventh  National Conference on Artificial Intelligence, 
1988. 

[Horvitz,  1987]  Eric  Horvitz.  Reasoning  about  beliefs  and 
actions under computational resource constraints. In Work(cid:173)
shop  on  Uncertainty  in Artificial Intelligence,  1987. 

[Horvitz, 2001]  Eric  Horvitz.  Principles  and  applications 
of continual  computation.  Artificial  Intelligence  Journal, 
126(1-2):159-196,2001. 

[Kao et al,  1998]  Ming-Yang  Kao,  Yuan  Ma,  Michael 
Sipser,  and  Yiqun  Yin.  Optimal  constructions  of hybrid 
algorithms.  Journal  of  Algorithms,  29:142-164,  1998. 

SCHEDULING 

1217 

