New Constraint Programming Approaches for the Computation of

Leximin-Optimal Solutions in Constraint Networks

Sylvain Bouveret and Michel Lemaˆıtre

Ofﬁce National d’ ´Etudes et de Recherches A´erospatiales
sylvain.bouveret@onera.fr and michel.lemaitre@onera.fr

Abstract

We study the problem of computing a leximin-
optimal solution of a constraint network. This prob-
lem is highly motivated by fairness and efﬁciency
requirements in many real-world applications im-
plying human agents. We compare several generic
algorithms which solve this problem in a constraint
programming framework. The ﬁrst one is entirely
original, and the other ones are partially based on
existing works adapted to ﬁt with this problem.

1 Introduction
Many advances have been done in recent years in modeling
and solving combinatorial problems with constraint program-
ming (CP). These advances concern, among others, the abil-
ity of this framework to deal with human reasoning schemes,
such as, for example, the expression of preferences with soft
constraints. However, one aspect of importance has only re-
ceived a few attention in the constraints community to date:
the way to handle fairness requirements in multiagent combi-
natorial problems.

The seek for fairness stands as a subjective but strong re-
quirement in a wide set of real-world problems implying hu-
man agents.
It is particularly relevant in crew or worker
timetabling and rostering problems, or the optimization of
long and short-term planning for ﬁremen and emergency ser-
vices. Fairness is also ubiquitous in multiagent resource al-
location problems, like, among others, bandwidth allocation
among network users, fair share of airspace and airport re-
sources among several airlines or Earth observing satellite
scheduling and sharing problems [Lemaˆıtre et al., 1999].

In spite of the wide range of problems concerned by fair-
ness issues, it often lacks a theoretical and generic approach.
In many Constraint Programming and Operational Research
works, fairness is only enforced by speciﬁc heuristic local
choices guiding the search towards supposed equitable solu-
tions. However, a few works may be cited for their approach
[Lemaˆıtre et al., 1999] make
of this fairness requirement.
use of an Earth observation satellite scheduling and sharing
problem to investigate three ways of handling fairness among
agents in the context of constraint satisfaction. More recently
[Pesant and R´egin, 2005] proposed a new constraint based on
statistics, which enforces the relative balance of a given set of

variables, and can possibly be used to ensure a kind of equity
among a set of agents. Equity is also studied in Operational
Research, with for example [Ogryczak and ´Sliwi´nski, 2003],
who investigate a way of solving linear programs by aggre-
gating multiple criteria using an Ordered Weighted Average
Operator (OWA) [Yager, 1988]. Depending on the weights
used in the OWA, this kind of aggregators can provide equi-
table compromises.

Microeconomy and Social Choice theory provide an im-
portant literature on fairness in collective decision making.
From this theoretical background we borrow the idea of rep-
resenting the agents preferences by utility levels, and we
adopt the leximin preorder on utility proﬁles for conveying
the fairness and efﬁciency requirements. Being a reﬁnement
of the maximin approach1, it has an inclination to fairness,
while avoiding the so-called drowning effect of this approach.
Apart from the fact that it conveys and formalizes the con-
cept of equity in multiagent contexts, the leximin preorder is
also a subject of interest in other contexts, such as fuzzy CSP
[Fargier et al., 1993], and symmetry-breaking in constraint
satisfaction problems [Frisch et al., 2003].

This contribution is organized as follows. Section 2 gives a
minimal background in social choice theory and justiﬁes the
interest of the leximin preorder as a fairness criterion. Sec-
tion 3 deﬁnes the search for leximin-optimality in a constraint
programming framework. The main contribution of this pa-
per is Section 4, which presents three algorithms for com-
puting leximin-optimal solutions, the ﬁrst one being entirely
original, and the other ones adapted from existing works.
The proposed algorithms have been implemented and tested
within a constraint programming system. Section 5 presents
an experimental comparison of these algorithms.

2 Background on social choice theory
We ﬁrst introduce some notations. Calligraphic letters (e.g.
X ) will stand for sets. Vectors will be written with an arrow
−→
−→
x ), or between brackets (e.g. (cid:3)x1, . . . , xn(cid:4)). f (
x ) will
(e.g.
−→
be used as a shortcut for (cid:3)f (x1), . . . , f (xn)(cid:4). Vector
↑
will
x
−→
stand for the vector composed by each element of
x rear-
↑
i the ith compo-
ranged in increasing order. We will write x
nent of vector
. Finally, the interval of integers between k
and l will be written (cid:2)k, l(cid:3).

−→
↑
x

1Trying to maximize the utility of the unhappiest agent.

IJCAI-07

62

2.1 Collective decision making and welfarism
Let N be a set of n agents, and S be a set of admissible
alternatives concerning all of them, among which a benevo-
lent arbitrator has to choose one. The most classical model
describing this situation is welfarism (see e.g. [Keeney and
Raiffa, 1976; Moulin, 1988]): the choice of the arbitrator is
made on the basis of the utility levels enjoyed by the indi-
vidual agents and on those levels only. Each agent i ∈ N
has an individual utility function ui that maps each admissi-
ble alternative s ∈ S to a numerical index ui(s). We make
here the classical assumption that the individual utilities are
comparable between the agents2. Therefore each alternative s
can be attached to a single utility proﬁle (cid:3)u1(s), . . . , un(s)(cid:4).
According to welfarism, comparing two alternatives is per-
formed by comparing their respective utility proﬁles.

A standard way to compare individual utility proﬁles is to
aggregate each of them into a collective utility index, stand-
ing for the collective welfare of the agents community. If g is
a well-chosen aggregation function, we thus have a collective
utility function uc that maps each alternative s to a collec-
tive utility level uc(s) = g(u1(s), . . . , un(s)). An optimal
alternative is one of those maximizing the collective utility.

2.2 The leximin preorder as a fairness and

efﬁciency criterion

The main difﬁculty of equitable decision problems is that
we have to reconcile the contradictory wishes of the agents.
Since generally no solution fully satisﬁes everyone, the ag-
gregation function g must lead to fair and Pareto-efﬁcient3
compromises.

The problem of choosing the right aggregation function g
is far beyond the scope of this paper. We only describe the
two classical ones corresponding to two opposite points of
view on social welfare4: classical utilitarianism and egalitar-
ianism. The rule advocated by the defenders of classical util-
itarianism is that the best decision is the one that maximizes
the sum of individual utilities (thus corresponding to g = +).
However this kind of aggregation function can lead to huge
differences of utility levels among the agents, thus ruling out
this aggregator in the context of equitable decisions. From
the egalitarian point of view, the best decision is the one that
maximizes the happiness of the least satisﬁed agent (thus cor-
responding to g = min). Whereas this kind of aggregation
function is particularly well-suited for problems in which fair-
ness is essential, it has a major drawback, due to the idempo-
tency of the min operator, and known as “drowning effect” in
the community of fuzzy CSP (see e.g.[Dubois and Fortemps,
1999]). Indeed, it leaves many alternatives indistinguishable,
such as for example the ones with utility proﬁles (cid:3)0, . . . , 0(cid:4)
and (cid:3)1000, . . . , 1000, 0(cid:4), even if the second one appears to be

2In other words, they are expressed using a common utility scale.
3A decision is Pareto-efﬁcient if and only if we cannot strictly
increase the satisfaction of an agent unless we strictly decrease the
satisfaction of another agent. Pareto-efﬁciency is generally taken as
a basic postulate in collective decision making.

4Compromises between these two extremes are possible. See e.g.

[Moulin, 2003, page 68] or [Yager, 1988] (OWA aggregators).

much better than the ﬁrst one. In other words, the min ag-
gregation function can lead to non Pareto-optimal decisions,
which is not desirable.

The leximin preorder is a well-known reﬁnement of the or-
der induced by the min function that overcomes this draw-
back. It is classically introduced in the social choice literature
(see [Moulin, 1988]) as the social welfare ordering that rec-
oncile egalitarianism and Pareto-efﬁciency, and also in fuzzy
CSP [Fargier et al., 1993]. It is deﬁned as follows:

−→
y is leximin-preferred to

−→
x and
−→
x ∼leximin

−→
Deﬁnition 1 (leximin preorder [Moulin, 1988]) Let
x and
−→
−→
y be two vectors of Nn
y are said leximin-
−→
−→
↑
y
x
.
indifferent (written
−→
x ≺leximin
The vector
−→
y ) if and only if ∃i ∈ (cid:2)0, n − 1(cid:3) such that ∀j ∈ (cid:2)1, i(cid:3),
−→
↑
↑
j = y
x
y for
i+1. We write
−→
−→
x ≺leximin
y . The binary relation
(cid:10)leximin is a total preorder.

↑
↑
i+1 < y
j and x
−→
−→
x ∼leximin
y or

−→
y ) if and only if
−→
x (written

−→
x (cid:10)leximin

↑ =

.

In other words, the leximin preorder is the lexicographic pre-
order over ordered utility vectors. For example, we have
(cid:3)4, 1, 5, 1(cid:4) ≺leximin (cid:3)2, 2, 1, 2(cid:4).

(cid:2)n

A known result is that no collective utility function can rep-
resent the leximin preorder5, unless the set of possible utility
proﬁles is ﬁnite. In this latter case, it can be represented by
−xi
the following non-linear functions: g1 :
(adapted for leximin from a remark in [Frisch et al., 2003])
and g2 :
, where q > 0 is large enough
[Moulin, 1988]. Using this kind of functions has however
a main drawback: it rapidly becomes unreasonable when the
−→
x increases. Moreover,
upper bound of the possible values of
it hides the semantics of the leximin preorder and hinders the
computational beneﬁts we can possibly take advantage of.

−→
x (cid:11)→ −

−→
x (cid:11)→ −

−q
i=1 x
i

(cid:2)n

i=i n

In the following, we will use the leximin preorder as a
criterion for ensuring fairness and Pareto-efﬁciency, and we
will be seeking the non-dominated solutions in the sense of
the leximin preorder. Those solutions will be called leximin-
optimal. This problem will be expressed in the next section
in a CP framework.

3 Constraint programming and

leximin-optimality

The constraint programming framework is an effective and
ﬂexible tool for modeling and solving many different com-
binatorial problems such as planning and scheduling prob-
lems, resource allocation problems, or conﬁguration prob-
lems. This paradigm is based on the notion of constraint
network [Montanari, 1974]. A constraint network consists
of a set of variables X = {X1, . . . , Xp} (in the following,
variables will be written with uppercase letters), a set of asso-
ciated domains D = {DX1 , . . . , DXp
}, where DXi is the set
of possible values for Xi, and a set of constraints C, where
each c ∈ C speciﬁes a set of allowed tuples R(c) over a set of
variables X (c). We make the additional assumption that all
the domains are in N, and we will use the following notations:
X = min(DX ) and X = max(DX ).

5In other words there is no g such that
x ) ≤ g(−→

y ). See [Moulin, 1988].

g(−→

−→
x (cid:3)leximin

−→
y ⇔

IJCAI-07

63

is the restriction of this instantiation to S (cid:3)

An instantiation v of a set S of variables is a function that
maps each variable X ∈ S to a value v(X) of its domain DX .
If S = X , this instantiation is said to be complete, otherwise
it is partial. If S (cid:3) (cid:2) S, the projection of an instantiation of
S over S (cid:3)
and is
written v↓S (cid:2) . An instantiation is said to be consistent if and
only if it satisﬁes all the constraints. A complete consistent
instantiation of a constraint network is called a solution. The
set of solutions of (X , D, C) is written sol(X , D, C). We will
also write v[X ← a] the instantiation v where the value of X
is replaced by a.

Given a constraint network, the problem of determining
whether it has a solution is called a Constraint Satisfaction
Problem (CSP) and is NP-complete. The CSP can be clas-
sically adapted to become an optimization problem in the fol-
lowing way. Given a constraint network (X , D, C) and an
objective variable O ∈ X , ﬁnd the value m of DO such
that m = max{v(O) | v ∈ sol(X , D, C)}. We will write
max(X , D, C, O) for the subset of those solutions that maxi-
mize the objective variable O.

Expressing a collective decision making problem with a
numerical collective utility criterion as a CSP with objective
variable is straightforward: consider the collective utility as
the objective variable, and link it to the variables represent-
ing individual utilities with a constraint. However this cannot
directly encode our problem of computing a leximin-optimal
solution, which is a kind of multicriteria optimization prob-
lem. We introduce formally the MaxLeximinCSP problem
as follows :
Deﬁnition 2 (MaxLeximinCSP problem)
Input: a constraint network (X , D, C); a vector of variables
−→
U = (cid:3)U1, . . . , Un(cid:4) ∈ X n
Output: “Inconsistent” if sol(X , D, C) = ∅. Otherwise a so-
−→
lution (cid:3)v such that ∀v ∈ sol(X , D, C), v(
U ).
We describe in the next section several generic constraint
programming algorithms that solve this problem. The ﬁrst
one is entirely original, and the other ones are based on exist-
ing works that are adapted to ﬁt with our problem.

−→
U ) (cid:10)leximin (cid:3)v(

, called an objective vector.

(cid:2)

4 Proposed algorithms
4.1 Using a cardinality combinator
Our ﬁrst algorithm is based on an iterative computation of the
components of the leximin-optimal vector. It ﬁrst computes
the maximal value y1 such that there is a solution v with ∀i,
y1 ≤ v(Ui), or in other words
i(y1 ≤ v(Ui)) = n, where
by convention the value of (y1 ≤ v(Ui)) is 1 if the inequality
is satisﬁed and 0 otherwise6. Then, after having ﬁxed this
value for y1, it computes the maximal value y2 such that there
i(y2 ≤ v(Ui)) ≥ n − 1, and so on
is a solution v with
(cid:2)
until the maximal value yn such that there is a solution v with

i(yn ≤ v(Ui)) ≥ 1.
To enforce the constraint on the yi, we make use of the
meta-constraint AtLeast, derived from a cardinality com-
binator introduced by [Van Hentenryck et al., 1992], and
present in most of CP systems:

(cid:2)

6This convention is inspired by the constraint modeling language

OPL [Van Hentenryck, 1999].

Deﬁnition 3 (Meta-constraint AtLeast) Let Γ be a set of p
constraints, and k ∈ (cid:2)1, p(cid:3) be an integer. The meta-constraint
AtLeast(Γ, k) holds on the union of the scopes of the con-
straints in Γ, and allows a tuple if and only if at least k con-
straints from Γ are satisﬁed.

Due to its genericity, this meta-constraint cannot provide
very efﬁcient ﬁltering procedures.
In our case where the
constraints of Γ are linear, this meta-constraint is simply a
counting constraint, and bound-consistency can be achieved
in O(n). The speciﬁc meta-constraint AtLeast can also
be implemented with a set of linear constraints [Garﬁnkel
and Nemhauser, 1972, p.11], by introducing n 0–1 variables
{Δ1, . . . , Δn}, and a set of linear constraints {X1 + Δ1Y ≥
Y, . . . , Xn + ΔnY ≥ Y,

i=1 Δi ≤ n − k}.

(cid:2)n

Our ﬁrst approach for computing a leximin-optimal solu-

tion is presented in algorithm 1.

Algorithm 1: Computation of a leximin-optimal solution
using a cardinality combinator.
input : A const. network (X , D, C); (cid:6)U1, . . . , Un(cid:7) ∈ X n
output: A solution to the MaxLeximinCSP problem
if solve(X , D, C) = “Inconsistent” return “Inconsistent”;
(X0, D(cid:2)
for i ← 1 to n do

0, C0) ← (X , D, C);

Xi ← Xi−1 ∪ {Yi};
Di ← D(cid:2)
i−1∪{DYi
Ci ← Ci−1 ∪

} with DYi

= (cid:2)minj (Uj ), maxj (Uj )(cid:3);

{AtLeast({Yi ≤ U1, . . . , Yi ≤ Un}, n − i + 1)};

bv(i) ← maximize(Xi, Di, Ci, Yi);
← {bv(i)(Yi)};
D(cid:2)

i ← Di with DYi

return bv(n)↓X ;

1

2

3

4

5

6

7

8

9

The functions solve and maximize (the detail of which is
the concern of solving techniques for constraints satisfaction
problems) of lines 1 and 7 respectively return one solution
v ∈ sol(X , D, C) (or “Inconsistent” if such a solution does
not exist), and an optimal solution (cid:3)v ∈ max(Xi, Di, Ci, Yi)
(or “Inconsistent” if sol(Xi, Di, Ci) = ∅). We assume – con-
trary to usual constraint solvers – that these two functions do
not modify the input constraint network.

The following example illustrates
the behavior of the algorithm. It is a
simple resource allocation problem,
where 3 objects must be allocated
to 3 agents, with the following con-
straints: each agent must get one and only one object, and
one object cannot be allocated to more than one agent (i.e. a
perfect matching agent/objects). A utility is associated with
each pair (agent,object) with respect to the array above.

a1
3
5
7

a2
3
9
8

a3
3
7
1

o1
o2
o3

This problem has 6 feasible solutions (one for each permu-
tation of (cid:2)1, 3(cid:3)), producing the 6 utility proﬁles shown in the
columns of the following array:

p1
3
9
1

p2
3
8
7

p3
5
3
1

p4
5
8
3

p5
7
3
7

p6
7
9
3

u1
u2
u3

IJCAI-07

64

The algorithm runs in 3 steps: Step 1: After having intro-

Y1 such that each (at least 3) agent gets at least Y1. We ﬁnd

duced one variable Y1, we look for the maximal value (cid:3)y1 of
(cid:3)y1 = 3. The variable Y1 is ﬁxed to this value, implicitly re-
one variable Y2, we look for the maximal value (cid:3)y2 of Y2 such
that at least 2 agents get at least Y2. We ﬁnd (cid:3)y2 = 7. The vari-

moving proﬁles p1 and p3. Step 2: After having introduced

able Y2 is ﬁxed to this value, implicitly removing proﬁle p4.
Step 3: After having introduced one variable Y3, we look for

the maximal value (cid:3)y3 of Y3 such that at least 1 agent gets at
least Y3. We ﬁnd (cid:3)y3 = 9. Only one instantiation maximizes
Y3: p6. Finally, the returned leximin-optimal allocation is:
a1 ← o3, a2 ← o2 and a3 ← o1.

Proposition 1 If the two functions maximize and solve
are both correct and both halt, then algorithm 1 halts and
solves the MaxLeximinCSP problem.

In the next proofs, we will write soli and sol

(cid:3)
i for respec-
i, Ci). We will also write
tively sol(Xi, Di, Ci) and sol(Xi, D(cid:3)
(cid:3)
(soli)↓Xj and (sol
i)↓Xj for the same sets of solutions pro-
jected on Xj (with j < i). We can notice that sol0 =
sol(X , D, C), and that ∀i, sol

i ⊆ soli.

(cid:3)

Lemma 1 Let
components of

−→
x be a vector of size n. At least n − i + 1
−→
↑
x are greater than or equal to x
i .

The proof of this useful lemma is obvious, so we omit it.

Lemma 2 If sol0 (cid:17)= ∅ then (cid:3)v(n) is well-deﬁned and not equal

to “Inconsistent”.

(cid:2)

(cid:2)

Proof: Let i ∈ (cid:2)1, n(cid:3), suppose that sol
i−1 (cid:11)= ∅, and let v(i) ∈
i−1. Then extending v(i) by instantiating Yi to minj(Uj ) leads
sol
to a solution of (Xi, Di, Ci) (only one constraint has been added and
it is satisﬁed by the latter instantiation). Therefore soli (cid:11)= ∅ and, if
maximize is correct, bv(i) (cid:11)= “Inconsistent” and bv(i) ∈ sol
(cid:2)
i. So,
sol

i (cid:11)= ∅. It proves lemma 2 by induction. (cid:2)

(cid:2)

Lemma 3 If sol0 (cid:17)= ∅, then ((cid:3)v(n))↓Xi

∈ soli, ∀i ∈ (cid:2)0, n(cid:3).

Proof: We have sol

(cid:2)

i ⊆ soli, and (soli+1)↓Xi

(cid:2)
i (since
i, Ci) to (Xi+1, Di+1, Ci+1) we just add a constraint).
⊆
⊆

⊆ (soli)↓Xj , and (soli+1)↓Xj
n)↓Xi

∈ (sol

⊆ sol

(cid:2)

(cid:2)

i)↓Xj , as soon as j ≤ i. Hence, (bv(n))↓Xi
i ⊆ soli. (cid:2)

(cid:2)

(cid:2)

i)↓Xj

from (Xi, D(cid:2)
More generally, (sol
(sol
⊆ · · · ⊆ (soli+1)↓Xi
(soln)↓Xi
Lemma 4 If sol0 (cid:17)= ∅, (cid:3)v(n)(

⊆ sol
y ) is equal to (cid:3)v(n)(
−→

−→
U )↑

.

Proof: For all i ∈ (cid:2)1, n(cid:3), (bv(n))↓Xi is a solution of soli
by lemma 3. By lemma 1, (bv(n))↓Xi
i ] satis-
ﬁes the cardinality constraint of iteration i, and is then a solu-
tion of soli. By deﬁnition of function maximize, we thus have
−→
U )↑
bv(i)(Yi) ≥ bv(n)(
i . Since bv(i)(Yi) = bv(n)(Yi), we have
−→
U )↑
bv(n)(Yi) ≥ bv(n)(
i .

[Yi ← bv(n)(

−→
U )↑

Since bv(n) is a solution of soln, at least n − i + 1 numbers from
−→
U ) are greater than or equal to bv(n)(Yi). At least the
−→
U ) must then be greater than
i , which

vector bv(n)(
n − i + 1 greatest numbers from bv(n)(
or equal to bv(n)(Yi). These components include bv(n)(
leads to bv(n)(Yi) ≤ bv(n)(
i , proving the lemma. (cid:2)

−→
U )↑

−→
U )↑

1

2

3

4

5

6

7

8

We can now put things together and prove proposition 1.

IJCAI-07

65

Proof of proposition 1:

If sol(X , D, C) = ∅, and if solve
is correct, then algorithm 1 obviously returns “Inconsistent”. Other-
wise, following lemma 2, it outputs an instantiation (bv(n))↓X which
is, according to lemma 3, a solution of (X0, D0, C0) = (X , D, C).

−→
U )↑

−→
U )↑

−→
U )↑

−→
U )↑

j and v(

i > bv(n)(

j = bv(n)(

i . Following lemma 4,

j . By gathering all the previous equalities,

there is a v ∈ sol(X , D, C) such that
−→
U ). Then following deﬁnition 1, ∃i ∈ (cid:2)1, n(cid:3)
−→
−→
U )↑
U )↑
i .
+
(i) be the extension of v respectively instantiating Y1, . . . Yi−1

Suppose that
−→
U ) (cid:15)leximin bv(n)(
v(
such that ∀j < i, v(
Let v
to bv(n)(Y1), . . . bv(n)(Yi−1) and Yi to v(
∀j, bv(n)(Yj) = bv(n)(
we have ∀j < i v

+
(i)(Yj) = bv(n)(Yj) = v(
−→
U ))↑

−→
U )↑
j . We
+
i . By lemma 1, ∀j ≤ i at
(i)(
also have v
−→
least n − j + 1 numbers from (v
U )) are greater than or equal to
+
+
(i)(Yj), proving that v
(i) satisﬁes all the cardinality constraints at
v
iteration i. Since it also satisﬁes each constraint in C and maps each
variable of Xi to one of its possible values, it is a solution of soli,
i = bv(i)(Yi). It contradicts the
and v
deﬁnition of maximize, proving the proposition 1. (cid:2)

i = (v
+
(i)(

+
(i)(Yi) = v(

+
(i)(Yi) = v(

i > bv(n)(

−→
U ))↑

−→
U )↑

−→
U )↑

−→
U )↑

j = (v

+
(i)(

4.2 Using a sorting constraint
Our second algorithm is directly based on the deﬁnition 1 of
the leximin preorder, which involves the sorted version of the
objective vector. This can be naturally expressed in the CP

paradigm by introducing a vector of variables
ing the constraint Sort(

−→
Y and enforc-
−→
Y ) which is deﬁned as follows:

−→
U ,

−→
X and

−→
(cid:3)
X

Deﬁnition 4 (Constraint Sort) Let
be two vec-
tors of variables of the same length, and v be an instantiation.
(cid:3)) holds on the set of variables be-
The constraint Sort(
−→
X or in
, and is satisﬁed by v if and only if

−→
−→
X
X ,
−→
(cid:3)
X

ing either in
v(

−→
X

(cid:3)) is the sorted version of v(

−→
X ) in increasing order.

This constraint has been particularly studied in two works,
which both introduce a ﬁltering algorithm for enforcing
bound consistency on this constraint. The ﬁrst algorithm
comes from [Bleuzen-Guernalec and Colmerauer, 1997] and
−→
X ). [Mehlhorn and
runs in O(n log n) (n being the size of
Thiel, 2000] designed a simpler algorithm that runs in O(n)
−→
plus the time required to sort the interval endpoints of
X ,
which can asymptotically be faster than O(n log n).

Algorithm 2: Computation of a leximin-optimal solution
using a sorting constraint.
input : A const. network (X , D, C); (cid:6)U1, . . . , Un(cid:7) ∈ X n
output: A solution to the MaxLeximinCSP problem
if solve(X , D, C) = “Inconsistent” return “Inconsistent”;
X (cid:2) ← X ∪ {Y1, . . . , Yn};
D(cid:2) ← D ∪ {DY1 , . . . , DYn }, DYi
C (cid:2) ← C ∪ {Sort(
for i ← 1 to n do

= (cid:2)minj(Uj ), maxj(Uj )(cid:3);

−→
Y )};

−→
U ,

bv(i) ← maximize(X (cid:2)
DYi

← {bv(i)(Yi)};

, D(cid:2)

, C (cid:2)

, Yi);

return bv(n)↓X ;

Proposition 2 If the two functions maximize and solve
are both correct and both halt, then algorithm 2 halts and
solves the MaxLeximinCSP problem.

(cid:2)

Proof: If sol(X , D, C) = ∅ and if solve is correct, then al-
gorithm 2 obviously returns “Inconsistent”. We will suppose in the
following that sol(X , D, C) (cid:11)= ∅ and we will use the following nota-
i are the sets of solutions of (X (cid:2)
, C (cid:2)) respec-
tions: soli and sol
tively at the beginning and at the end of iteration i.

We have obviously ∀i ∈ (cid:2)1, n − 1(cid:3) soli+1 = sol

(cid:2)
i, which proves
(cid:11)= ∅, then the call to maximize at line 6 does not
that if soli
return “Inconsistent”, and soli+1 (cid:11)= ∅. Thus bv(n) is well-deﬁned,
and obviously (bv(n))↓X is a solution of (X , D, C).

, D(cid:2)

−→
U ) ≺leximin v(

−→
U ). We deﬁne v
−→
U )↑

We note bv = bv(n) the instantiation computed by the last
maximize in algorithm 2. Suppose that there is an instantiation
+
v ∈ sol(X , D, C) such that bv(
the extension of v that instantiates each yi to v(
i . Then, due
−→
+(Y ) are the respective sorted ver-
Y ) and v
to constraint Sort, bv(
−→
+(U ). Following deﬁnition 1, there is an i ∈
sion of bv(
U ) and v
+(Yj) and bv(Yi+1) <
(cid:2)0, n − 1(cid:3) such that ∀j ∈ (cid:2)1, i(cid:3), bv(Yj) = v
+(Yi+1). Due to line 7, we have bv(Yi+1) = bv(n)(Yi+1) =
v
bv(i+1)(Yi+1). Thus v
, Yi+1)
+
(i+1)(Yi+1) strictly greater than bv(i+1)(Yi+1),
with objective value v
which contradicts the hypothesis about maximize. (cid:2)

is a solution in max(X (cid:2)

, D(cid:2)

, C (cid:2)

+

4.3 Using a multiset ordering constraint
Our third algorithm computing a leximin-optimal solution is
perhaps the most intuitive one. It proceeds in a pseudo branch
and bound manner: it computes a ﬁrst solution, then tries to
improve it by specifying that the next solution has to be better
(in the sense of the leximin preorder) than the current one, and
so on until the constraint network becomes inconsistent. This
approach is based on the following constraint:

Deﬁnition 5 (Constraint Leximin) Let

variables,
ation. The constraint Leximin(

−→
λ be a vector of integers, and v be an instanti-
−→
X ) holds on the set of
−→
X , and is satisﬁed by v if and only if

−→
λ ,

−→
X be a vector of

variables belonging to
−→
λ ≺leximin

−−−→
v(X).

Although this constraint does not exist in the literature, the
work of [Frisch et al., 2003] introduces an algorithm for en-
forcing generalized arc-consistency on a quite similar con-
straint: the multiset ordering constraint, which is, in the con-
text of multisets, the equivalent of a leximax7 constraint on
vectors of variables. At the price of some slight modiﬁca-
tions, the algorithm they introduce can easily be used to en-
force the latter constraint Leximin.

Proposition 3 If the function solve is correct and halts, then
algorithm 3 halts and solves the MaxLeximinCSP problem.

The proof is rather straightforward, so we omit it.

4.4 Other approaches
In the context of fuzzy constraints, two algorithms dedicated
to the computation of leximin-optimal solutions have been
published by [Dubois and Fortemps, 1999]. These algorithms

Algorithm 3: Computation of a leximin-optimal solution
in a branch and bound manner.
input : A const. network (X , D, C); (cid:6)U1, . . . , Un(cid:7) ∈ X n
output: A solution to the MaxLeximinCSP problem
bv ← null; v ← solve(X , D, C);
while v (cid:11)= “Inconsistent” do

bv ← v;
C ← C ∪ {Leximin(bv(
v ← solve(X , D, C);

−→
U ),

−→
U )};

if bv (cid:11)= null then return bv else return “Inconsistent”;

1

2

3

4

5

6

work by enumerating, at each step, all the subsets of fuzzy
constraints (corresponding to our agents) having a property
connected to the notion of consistency degree.

[Ehrgott, 2000, p. 162] describes two very simple algo-
rithms for solving the closely related “Lexicographic Max-
Ordering” problem (that could be called “leximax-optimal”
in our terms). However, they do not seem realistic in the con-
text of combinatorial problems, since they are based on an
enumeration of all utility proﬁles.

5 Experimental results

The algorithms 1, 2, 3 and the ﬁrst algorithm proposed
in [Dubois and Fortemps, 1999] have been implemented and
tested using the constraint programming tool CHOCO [Labur-
the, 2000]. So as to test them on realistic instances, we have
extracted, from a real-world problem, a simpliﬁed multiagent
resource allocation problem. In this problem, the resource is a
set of objects O, that must be allocated to some agents under
volume and consumption constraints. The individual utility
functions are speciﬁed by a set of weights wa,o (one per pair
(agent, object)): given an allocation of the objects, the indi-
vidual utility of an agent i is the sum of the weights wi,o of
the objects o that she receives. The weights can be generated
uniformly or can be concentrated around some powers of 10,
so as to simulate some kind of priorities8.

We have developed a customizable generator of random
instances, available online9. We tested our algorithms on sev-
eral instances, with very different characteristics, leading to
very different kind of problems. Here is a brief description
of each kind of instances appearing in table 1 (by default, the
weights are non-uniformly distributed, and the constraints are
of medium tightness):

(1) 10 agents, 100 objects. (2) 4 agents, 100 objects. (3) 20
agents, 40 objects. (4) 10 agents, 100 objects, low-tightness
constraints. (5) 10 agents, 100 objects, hard-tightness con-
straints. (6) 10 agents, 30 objects, uniform weights (with low
values), hard-tightness constraints. (7) 4 agents, 150 objects.
The results from table 1 show that algorithm 1 has the best
running times with most of the instances, followed by algo-
rithm 2 which is almost as fast, but is less efﬁcient when the
number of agents increases (instances of kind 3), whereas al-
gorithm 3 is better on this kind of instances. As expected, the
algorithm from [Dubois and Fortemps, 1999] explodes when

7The leximax is based on an increasing reordering of the values,

instead of a decreasing one for leximin.

8Approximating the conditions of our real-world application.
9http://www.cert.fr/dcsd/THESES/sbouveret/benchmark/

IJCAI-07

66

kind

1
2
3
4
5
6
7

Algorithm 2 (Sort)

Algorithm 3 (Leximin)

Algorithm 1 (AtLeast)
avg min max N% avg min max N% avg min max
0.7
34.5
0.6
43.9
20.2
99.2
0.8
4.2
2.1
101

0.9
0.7
97.9
0.9
3.9
2.1
103

1.8
17.7
117
1.2
57.9
4.3
600

100
100
100
100
100
100
92

100
100
100
100
100
100
92

0.2
1.3
0.4
0.5
0.2
0.1
4.3

3
6.9
16.7

2
6.4
0.7
320

0.7
0.2
2
0.8
0.8
0.7
0.3

1.1
19.1
551

1

83.5
4.3
600

0.6
0.2
1.5
0.7
0.8
0.6
0.3

8

186.6

1.2
600

N% avg
100
100
100
100
100
100
60

9
2.5
600
9.1
12.4
218.2
155.2

600
8.9
9.1
47.5
2.4

max
9.6
18.5
600
9.2
53.7
457.4
600

[Dubois and Fortemps, 1999]
N%
100
100

min
8.8
2

0

100
100
100
84

Table 1: CPU times (in seconds) and percentage of instances solved within 10 minutes for each algorithm. Each algorithm has
been run on 50 instances of each kind, on a 1.6GHz Pentium M PC under Linux.

the number of equal components in the leximin-optimal vec-
tor increases (kinds (3) and (6)).

These results must however be considered with care, since
they are subject to our implementation of the ﬁltering al-
gorithms.
In particular, not every optimizations given in
[Mehlhorn and Thiel, 2000] for the constraint Sort have been
implemented yet. Moreover, the running times are highly af-
fected by the variable choice heuristics. In our tests, we used
the following particular heuristics, that are specially efﬁcient:
choose as the next variable to instantiate the one that will the
most increase the lowest objective value (in our application
problem we ﬁrst allocate the objects that have the highest
weight for the currently least satisﬁed agent).

6 Conclusion

The leximin preorder cannot be ignored when dealing with
optimization problems in which some kind of fairness must
be enforced between utilities of agents or equally important
criteria. This paper brings a contribution to the computa-
tion of leximin-optimal solutions of combinatorial problems.
It describes, in a constraint programming framework, three
generic algorithms solving this problem. The ﬁrst one, based
on a cardinality combinator, is entirely new, and gives slightly
better results than two algorithms based on the sort and lex-
imin constraints.

References

[Bleuzen-Guernalec and Colmerauer, 1997] N.

Bleuzen-
Guernalec and A. Colmerauer. Narrowing a block of
sortings in quadratic time. In Proc. of CP’97, pages 2–16,
Linz, Austria, 1997.

[Dubois and Fortemps, 1999] D. Dubois and P. Fortemps.
Computing improved optimal solutions to max-min ﬂex-
ible constraint satisfaction problems. European Journal of
Operational Research, 1999.

[Ehrgott, 2000] M. Ehrgott. Multicriteria Optimization.
Number 491 in Lecture Notes in Economics and Mathe-
matical Systems. Springer, 2000.

[Fargier et al., 1993] H. Fargier, J. Lang, and T. Schiex. Se-
lecting preferred solutions in fuzzy constraint satisfaction
problems. In Proc. of EUFIT’93, Aachen, 1993.

[Frisch et al., 2003] A. Frisch, B. Hnich, Z. Kiziltan,
I. Miguel, and T. Walsh. Multiset ordering constraints. In
Proc. of IJCAI’03, February 2003.

[Garﬁnkel and Nemhauser, 1972] R. S. Garﬁnkel and G. L.

Nemhauser. Integer Programming. Wiley, 1972.

[Keeney and Raiffa, 1976] R. L. Keeney and H. Raiffa. De-
cisions with Multiple Objectives. J. Wiley & Sons, 1976.
[Laburthe, 2000] F. Laburthe. CHOCO : implementing a
CP kernel.
In Proc. of TRICS’2000, Workshop on tech-
niques for implementing CP systems, Singapore, 2000.
http://sourceforge.net/projects/choco.

[Lemaˆıtre et al., 1999] M. Lemaˆıtre, G. Verfaillie,

and
N. Bataille. Exploiting a Common Property Resource un-
der a Fairness Constraint: a Case Study. In Proc. of IJCAI-
99, pages 206–211, Stockholm, 1999.

[Mehlhorn and Thiel, 2000] K. Mehlhorn and S. Thiel.
Faster algorithms for bound-consistency of the sortedness
and the alldifferent constraint.
In Rina Dechter, editor,
Proc. of CP’00, pages 306–319, Singapore, 2000.

[Montanari, 1974] U. Montanari. Network of constraints:
Fundamental properties and applications to picture pro-
cessing. Inf. Sci., 7:95–132, 1974.

[Moulin, 1988] H. Moulin. Axioms of Cooperative Decision

Making. Cambridge University Press, 1988.

[Moulin, 2003] H. Moulin. Fair division and collective wel-

fare. MIT Press, 2003.

´Sliwi´nski.

[Ogryczak and ´Sliwi´nski, 2003] W.

and
T.
On solving linear programs with the
ordered weighted averaging objective. Europen Journal
of Operational Research, (148):80–91, 2003.

Ogryczak

[Pesant and R´egin, 2005] G. Pesant

and

SPREAD: A balancing constraint based on statistics.
Proc. of CP’05, Sitges, Spain, 2005.

J-C. R´egin.
In

[Van Hentenryck et al., 1992] P. Van Hentenryck, H. Simo-
nis, and M. Dincbas. Constraint satisfaction using con-
straint logic programming. A.I., 58(1-3):113–159, 1992.

[Van Hentenryck, 1999] P. Van Hentenryck. The OPL Opti-
mization Programming Language. The MIT Press, 1999.
[Yager, 1988] R. Yager. On ordered weighted averaging ag-
gregation operators in multicriteria decision making. IEEE
Trans. on Syst., Man, and Cybernetics, 18:183–190, 1988.

IJCAI-07

67

