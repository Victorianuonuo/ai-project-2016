A Logical Framework for Modularity of Ontologies

∗

Bernardo Cuenca Grau, Ian Horrocks, Yevgeny Kazakov and Ulrike Sattler

The University of Manchester
School of Computer Science
Manchester, M13 9PL, UK

{bcg, horrocks, ykazakov, sattler }@cs.man.ac.uk

Abstract

Modularity is a key requirement for collaborative
ontology engineering and for distributed ontology
reuse on the Web. Modern ontology languages,
such as OWL, are logic-based, and thus a useful
notion of modularity needs to take the semantics of
ontologies and their implications into account. We
propose a logic-based notion of modularity that al-
lows the modeler to specify the external signature
of their ontology, whose symbols are assumed to
be deﬁned in some other ontology. We deﬁne two
restrictions on the usage of the external signature,
a syntactic and a slightly less restrictive, seman-
tic one, each of which is decidable and guarantees
a certain kind of “black-box” behavior, which en-
ables the controlled merging of ontologies. Analy-
sis of real-world ontologies suggests that these re-
strictions are not too onerous.

1 Motivation

Modularity is a key requirement for many tasks concerning
ontology design, maintenance and integration, such as the
collaborative development of ontologies and the merging of
independently developed ontologies into a single, reconciled
ontology. Modular representations are easier to understand,
reason with, extend and reuse. Unfortunately, in contrast
to other disciplines such as software engineering—in which
modularity is a well established notion—ontology engineer-
ing is still lacking a useful, well-deﬁned notion of modularity.
such as OWL [Patel-
Schneider et al., 2004], are logic-based; consequently, a no-
tion of modularity needs to take into account the semantics of
the ontologies and their implications.

Modern ontology languages,

In this paper, we propose a logic-based framework for
modularity of ontologies in which we distinguish between
external and local symbols of ontologies. Intuitively, the ex-
ternal symbols of an ontology are those that are assumed to
be deﬁned somewhere externally in other ontologies; the re-
maining, local symbols, are assumed to be deﬁned within the

∗This work is supported by the EU Project TONES (Thinking
ONtologiES) ref: IST-007603 and by the EPSRC Project REOL
(Reasoning in Expressive Ontology Languages) ref: EP/C537211/1.

ontology itself by possibly reusing the meaning of external
symbols. Hence by merging an ontology with external on-
tologies we import the meaning of its external symbols to de-
ﬁne the meaning of its local symbols.

To make this idea work, we need to impose certain con-
straints on the usage of the external signature: in particular,
merging ontologies should be “safe” in the sense that they
do not produce unexpected results such as new inconsisten-
cies or subsumptions between imported symbols. To achieve
this kind of safety, we use the notion of conservative exten-
sions to deﬁne modularity of ontologies, and then prove that
a property of some ontologies, called locality, can be used
to achieve modularity. More precisely, we deﬁne two no-
tions of locality for SHIQ TBoxes: (i) a tractable syntac-
tic one which can be used to provide guidance in ontology
editing tools, and (ii) a more general semantic one which can
be checked using a DL-reasoner. Additionally, we present an
extension of locality to the more expressive logic SHOIQ
[Horrocks and Sattler, 2005]. Finally, we analyse existing
ontologies and conclude that our restrictions to local TBoxes
are quite natural.

When integrating independently developed ontologies, we
often have to identify different symbols in the ontologies hav-
ing the same intended meaning. This is a problem known as
ontology matching or mapping,1 which we are not concerned
with here: we consider ontologies sharing some part of their
signature, and how we can make sure that that their merge
(i.e. the union of their axioms) is “well-behaved”.

2 Preliminaries
We introduce the description logic SHOIQ, which provides
the foundation for OWL.

A SHOIQ-signature is the disjoint union S = R (cid:3) C (cid:3) I
of sets of role names (denoted by R, S, · · · ), concept names
(denoted by A, B, · · · ) and nominals (denoted by i, j, k, · · · ).
A SHOIQ-role is either R ∈ R or an inverse role R− with
R ∈ R. We denote by Rol(S) the set of SHOIQ-roles for
the signature S. The set Con(S) of SHOIQ-concepts for the
signature S is deﬁned by the grammar

Con(S) ::= A | j | (¬C) | (C1 (cid:5)C2) | (∃R.C) | ((cid:2) n S.C)

1The website http://www.ontologymatching.org

provides extensive information about this area.

IJCAI-07

298

where A ∈ C, j ∈ I, C(i) ∈ Con(S), R, S ∈ Rol(S), with S
a simple role,2 and n a positive integer. We use the following
abbreviations: C (cid:7) D stands for ¬(¬C (cid:5) ¬D); (cid:8) and ⊥ stand
for A (cid:7) ¬A and A (cid:5) ¬A, respectively; ∀R.C and (cid:3) n S.C
stand for ¬∃R.¬C and ¬((cid:2) n+1 S.C), respectively.

A SHOIQ-TBox T , or ontology, is a ﬁnite set of role in-
clusion axioms (RIs) R1 (cid:11) R2 with Ri ∈ Rol(S), transitivity
axioms Trans(R) with R ∈ R and general concept inclusion
axioms (GCIs) C1 (cid:11) C2 with Ci ∈ Con(S). We use A ≡ C
as an abbreviation for the two GCIs A (cid:11) C and C (cid:11) A.
The signature Sig(α) (respectively Sig(T )) of an axiom α
(respectively of a TBox T ) is the set of symbols occurring in
α (respectively in T ). A SHIQ-TBox is a SHOIQ-TBox
that does not contain nominals.

Given a signature S = R (cid:3) C (cid:3) I, an S-interpretation I
is a pair I = (ΔI , .I ), where ΔI is a non-empty set, called
the domain of the interpretation, and .I is the interpretation
function that assigns to each R ∈ R a binary relation RI ⊆
ΔI × ΔI , to each A ∈ C a set AI ⊆ ΔI , and to every
j ∈ I a singleton set j I ⊆ ΔI . The interpretation function is
extended to complex roles and concepts as follows:

(R−)I = {(cid:14)x, y(cid:15) | (cid:14)y, x(cid:15) ∈ RI}
(¬C)I = ΔI \ C I
(C (cid:5) D)I = C I ∩ DI
(∃R.C)I = {x ∈ ΔI | ∃y.(cid:14)x, y(cid:15) ∈ RI ∧ y ∈ C I }

((cid:2) n R.C)I = {x ∈ ΔI |

(cid:3){y ∈ ΔI | (cid:14)x, y(cid:15) ∈ RI ∧ y ∈ C I } ≥ n}

The satisfaction relation I |= α between an interpretation
I and a SHOIQ-axiom α (read as I satisﬁes α) is deﬁned
as follows: I |= (R1 (cid:11) R2) iff RI
2 ; I |= Trans(R)
iff RI is transitive; I |= (C (cid:11) D) iff C I ⊆ DI. An inter-
pretation I is a model of a TBox T if I satisﬁes all axioms in
T . A TBox T implies an axiom α (written T |= α) if I |= α
for every model I of T . An axiom α is a tautology if it is
satisﬁed in every interpretation.

1 ⊆ RI

An S-interpretation I = (ΔI , ·I) is an expansion of an
S(cid:2)-interpretation I (cid:2) = (ΔI (cid:2), ·I (cid:2)) if S ⊇ S(cid:2), ΔI = ΔI (cid:2)
, and
X I = X I (cid:2)
for every X ∈ S(cid:2). The trivial expansion of I (cid:2) to
S is an expansion I = (ΔI (cid:2), ·I ) of I (cid:2) such that X I = ∅ for
every X ∈ S \ S(cid:2).

3 Modularity of Ontologies

In this section, we propose a logical formalization for the no-
tion of modularity for ontologies. In analogy to software en-
gineering, we should be able to compose complex ontologies
from simpler (modular) ontologies in a consistent and well-
deﬁned way, in particular without unintended interactions be-
tween the component ontologies. This notion of modular-
ity would be useful for both the collaborative development of
a single ontology by different domain experts, and the inte-
gration of independently developed ontologies, including the
reuse of existing third-party ontologies.

2See [Horrocks and Sattler, 2005] for a precise deﬁnition of sim-

ple roles.

In order to formulate our notion of modularity, we will dis-
tinguish between the local and external symbols of an ontol-
ogy. We assume that the signature Sig(T ) of a TBox T is
partitioned into two parts: the local signature Loc(T ) of T
and the external signature Ext(T ) of T . To distinguish be-
tween the elements of these signatures, we will underline the
external signature elements whenever used within the con-
text of T . Intuitively, Ext(T ) speciﬁes the concept and role
names that are (or can be) imported from other ontologies,
while Loc(T ) speciﬁes those that are deﬁned in T .

As a motivating example, imagine a set of bio-medical on-
tologies that is being developed collaboratively by a team of
experts. Suppose that one group of experts designs an on-
tology G about genes and another group designs an ontology
D about diseases. Now certain genes are deﬁned in terms of
the diseases they cause. For example, the gene ErbB2 is de-
scribed in G as an Oncogene that is found in humans and is
associated with a disease called Adrenocarcinoma3

ErbB2 ≡ Oncogene (cid:5) ∃foundIn.Human

(cid:5) ∃associatedWith.Adrenocarcinoma

The concept Adrenocarcinoma is described in D, which is un-
der the control of a different group of modelers. So, this con-
cept is external for G, whereas the remaining concept and role
names are local for G. Now one consequence of these ontolo-
gies being modularly “well-behaved” would be that the gene
experts building G should not change the knowledge about
diseases, even if they are using them in their axioms.

Another example is the integration of a foundational (or
“upper”) ontology U and a domain ontology O. Founda-
tional ontologies, such as CYC, SUMO,4 and DOLCE, pro-
vide a structure upon which ontologies for speciﬁc subject
matters can be constructed and are assumed to be the result
of an agreement between experts. Suppose that an ontol-
ogy developer wants to reuse the generic concept of a Sub-
stance from U in their ontology O about Chemicals. For such
a purpose, they state that the concept Organic Chemical in
their chemical ontology O is more speciﬁc than Substance
in U by using the axiom: Organic Chemical (cid:11) Substance,
where Substance ∈ Ext(O). Since foundational ontologies
are well-established ontologies that one does not control and,
typically, does not have complete knowledge about, it is espe-
cially important that the merge O ∪ U does not produce new
logical consequences w.r.t. U—even if U changes.

In both examples, we have argued that ontology integration
should be carried out in such a way that consequences of a
TBox T (cid:2) are not changed when elements of T (cid:2) are reused in
another TBox T . This property can be formalized using the
notion of a conservative extension [Ghilardi et al., 2006].
Deﬁnition 1 (Conservative Extension). Let T and T (cid:2) be
TBoxes. Then T ∪ T (cid:2) is a conservative extension of T (cid:2) if, for
every axiom α with Sig(α) ⊆ Sig(T (cid:2)) we have T ∪ T (cid:2) |= α
iff T (cid:2) |= α.
♦
Thus, given T and T (cid:2), their union T ∪ T (cid:2) does not yield
new consequences in the language of T (cid:2) if T ∪T (cid:2) is a conser-

3Example from the National Cancer Institute Ontology http:

//www.mindswap.org/2003/CancerOntology.

4See http://ontology.teknowledge.com.

IJCAI-07

299

vative extension of T (cid:2). A useful notion of modularity, how-
ever, should abstract from the particular T (cid:2) under considera-
tion. In fact, the external signature should be the core notion
in a modular representation as opposed to its particular deﬁn-
ition in a particular ontology T (cid:2). This is especially important
when T (cid:2) may evolve, and where this evolution is beyond our
control—which, for example, could well be the case when us-
ing the “imports” construct provided by OWL. Consequently,
in order for T to use Ext(T ) in a modular way, T ∪ T (cid:2) should
be a conservative extension of any T (cid:2) over Ext(T ).

Furthermore, it is important to ensure that, whenever two
independent parts T1 and T2 of an ontology T under the con-
trol of different modelers are developed in a modular way,
then T remains modular as well.

These requirements can be formalized as follows:

Deﬁnition 2 (Modularity). A set M of TBoxes T with
Sig(T ) = Loc(T ) (cid:3) Ext(T ) is a modularity class if the fol-
lowing conditions hold:
M1. If T ∈ M, then T ∪ T (cid:2) is a conservative extension of

every T (cid:2) such that Sig(T (cid:2)) ∩ Loc(T ) = ∅;

M2. If T1, T2 ∈ M, then T = T1 ∪ T2 ∈ M with Loc(T ) =
♦

Loc(T1) ∪ Loc(T2).

Please note that our framework is independent of the DL
under consideration. Also, Deﬁnition 2 does not deﬁne a
modularity class uniquely, but just states conditions for be-
ing one. When the modularity class is clear from the context,
we will call its elements modular ontologies.

In the next section, we focus our attention on the logic
SHIQ, and show that it is possible to deﬁne a reasonable
modularity class such that (1) checking its membership can
be done using standard reasoning tools, (2) it has an inex-
pensive syntactic approximation that can be used to guide the
modeling of ontologies in a modular way, and (3) our analy-
sis of existing ontologies shows that they seem to conform
“naturally” with its restrictions.

4 Modularity of SHIQ ontologies
In this section we deﬁne a particular modularity class, the
class of local ontologies, which captures many practical ex-
amples of modularly developed ontologies. We ﬁrst give a
syntactic deﬁnition of local ontologies and then generalize it
to a semantic one. Finally, we prove that our semantic deﬁni-
tion leads to a maximal class of modular TBoxes.

Deﬁnition 2 excludes already many SHIQ-TBoxes. Prop-
erty M1, in particular, implies that no modular TBox T can
contain the two axioms below at the same time:

A (cid:11) C (cid:2)
1
2 (cid:11) A
C (cid:2)

(1)

(2)

(local)

(non-local)
1, C (cid:2)
2 (cid:11) C (cid:2)

where A is a local concept name and C (cid:2)
2 are constructed
using Ext(T ). These axioms imply C (cid:2)
1, which indeed
changes the meaning of the external concepts C (cid:2)
i. At this
point, we are faced with a fundamental choice as to the type of
axioms to disallow. Each choice leads to a different modular-
ity class. We argue that, analogously to software engineering,
where reﬁnement is the main application of modularity, ax-
ioms of type (1) ﬁt better with ontology integration scenarios,
such as those sketched in Section 3, than axioms of type (2).

As discussed in Section 3, the external names are “im-
ported” in order to reuse them in the deﬁnition of other con-
cepts, and not to further constrain their meaning. Intuitively,
axioms of type (1) are consistent with this idea, whereas ax-
ioms of type (2) are not.

The principal difference between these two axioms is that
(2) forces the external concept C (cid:2)
2 to contain only instances of
the local concept name A, thus bounding the size of possible
interpretations of C (cid:2)
2 once the meaning of A is established.
In contrast, (1) still (in principle) allows for interpretations
of C (cid:2)
1 of unbounded size. Note that this argument does not
prohibit all inclusion axioms between external concepts and
local ones. For example, in contrast to (2), the axiom

C (cid:2)

2 (cid:11) ¬A

(3)
still leaves sufﬁcient “freedom” for the interpretation of C (cid:2)
2,
even if the interpretation for A is ﬁxed. In fact, this axiom is
equivalent to A (cid:11) ¬C (cid:2)

2, and thus is of type (1).

(local)

Our choice of the types of simple axioms to disallow can be
generalized to more complex axioms; for example, all axioms
below should be forbidden for the reasons given above:

C (cid:2)

1 (cid:11) A1 (cid:7) A2

and A ≡ C (cid:2)

2 (cid:7) ∃R.B (non-local) (4)

The last axiom is disallowed because it implies (2).

Even if an axiom does not explicitly involve the external
symbols, it may still constrain their meaning. In fact, cer-
tain GCIs have a global effect and impose constraints on all
elements of the models of an ontology, and thereby on the in-
terpretation of external concepts. For example, it is easy to
see that the axioms

(cid:8) (cid:11) A and ¬A1 (cid:11) A2

(non-local)

(5)

imply (2) and the ﬁrst axiom in (4) respectively.5 These ob-
servations lead to the following deﬁnition:
Deﬁnition 3 (Locality). Let S be a SHIQ-signature and let
E ⊆ S be the external signature. The following grammar
deﬁnes the two sets C+
E of positively and negatively
local concepts w.r.t. E:

E and C −

C+

E

C −

E

::= A | (¬C −) | (C (cid:5) C+) | (∃R+.C) | (∃R.C+) |

| ((cid:2) n R+.C) | ((cid:2) n R.C+) .

::= (¬C+) | (C −

1 (cid:5) C −

2 ) .

E , C −

(i) ∈ C−

where A is a concept name from S \ E, R ∈ Rol(S), C ∈
Con(S), C+ ∈ C+
E , i = 1, 2, and R+ (cid:21)∈ Rol(E).6
A role inclusion axiom R+ (cid:11) R or a transitivity axiom
Trans(R+) is local w.r.t. E. A GCI is local w.r.t. E if it is
either of the form C+ (cid:11) C or C (cid:11) C −, where C+ ∈ C+
E ,
C − ∈ C −
E and C ∈ Con(S). A SHIQ-TBox T is local if
every axiom from T is local w.r.t. Ext(T ).
♦

Intuitively, the positively local concepts are those whose
interpretation is bounded (i.e.
its size is limited) when the
interpretation of the local symbols is ﬁxed. In this respect,

5¬A1 (cid:2) A2 implies (cid:3) (cid:2) A1(cid:4)A2, which implies C (cid:3) (cid:2) A1(cid:4)A2.
6Recall that ∀R.C, ((cid:3) n R.C) and C1 (cid:4) C2 are expressed using
the other constructors, so they can be used in local concepts as well.

IJCAI-07

300

they behave similarly to local concept names. Negatively lo-
cal concepts are essentially negations of positively local con-
cepts. Please, note that, given E ⊆ S, a concept written over
S may be neither in C+

E , nor in C −
E .

Deﬁnition 3 can be used to formulate guidelines for con-
structing modular ontologies, as illustrated by the following
example. Moreover, Deﬁnition 3 can be used in ontology ed-
itors to detect and warn the user of an a priori “dangerous”
usage of the external signature—without the need to perform
any kind of reasoning.
Example4 Suppose we are developing W, an ontology about
wines, and we want to reuse some concepts and roles from F ,
an independently developed ontology about food.
F : VealParmesan (cid:11) MeatDish (cid:5) ∃hasIngredient.Veal
DeliciousProduct (cid:22) ∃hasIngredient.DeliciousProduct

Trans(hasIngredient)

W: Chardonnay (cid:11) Wine (cid:5) ∃servedWith.VealParmesan
Rioja (cid:11) Wine (cid:5) ∃hasIngredient.Tempranillo

RedWine (cid:22) Wine (cid:5) ∃servedWith.MeatDish

Tempranillo (cid:11) DeliciousProduct

Here Ext(W) = {hasIngredient, DeliciousProduct,
VealParmesan, MeatDish} and W is local.
♦

The following Lemma shows that our notion of locality sat-

isﬁes the desired properties from Deﬁnition 2.

Lemma 5 [Locality Implies Modularity]
The set of local SHIQ TBoxesis a modularityclass.
To prove Lemma 5, we use the following property:

E and C − ∈ C −

Lemma 6 Let T be a local SHIQ TBox with E = Ext(T ),
and let I (cid:2) be an E-interpretation. Then the trivial expansion
I of I (cid:2) to Sig(T ) is a modelof T .
Proof. We need to show that I |= α for every α ∈ T .
According to Deﬁnition 3, every α ∈ T has one of the
forms: R+ (cid:11) R, Trans(R+), C+ (cid:11) C or C (cid:11) C −, where
R+ /∈ Rol(E), C+ ∈ C+
E . To prove I |= α
it is then sufﬁces to show that (R+)I = ∅, (C+)I = ∅ and
(C −)I = ΔI for each such axiom. The ﬁrst property holds
since I is the trivial expansion of an E-interpretation I (cid:2). The
remaining two properties can be easily shown by induction
over the deﬁnitions of C+
Proof of Lemma 5. Let M be a set of TBoxes Ti, each of
which is local w.r.t. Ext(Ti). Property M2 from Deﬁnition 2
follows from Deﬁnition 3 since every axiom α that is local
w.r.t. E is also local w.r.t. every E(cid:2) with (E(cid:2) ∩ Sig(α)) ⊆ E.
In order to prove Property M1, let T be a local SHIQ-
TBox. Assume ((cid:4)) T (cid:2) ∪ T |= α for some TBox T (cid:2) and an
axiom α with Sig(α) ⊆ Sig(T (cid:2)) and Sig(T (cid:2)) ∩ Loc(T ) = ∅.
We have to show that T (cid:2) |= α.

Assume to the contrary that T (cid:2)

(cid:21)|= α. Then, there exists
a model I (cid:2) of T (cid:2) such that I (cid:2)
(cid:21)|= α. Let I be the trivial
expansion of I (cid:2) to Sig(T ). Then I |= T (cid:2) and I (cid:21)|= α since
Sig(α) ⊆ Sig(T (cid:2)). Additionally, by Lemma 6, I |= T . So
T ∪ T (cid:2) (cid:21)|= α, which contradicts our assumption ((cid:4)).

E and C −

E from Deﬁnition 3.

Lemma 5 tells us that, in Example 4, W ∪ F does not
entail new information about food only. Even if F evolves,
say by adding the axiom VealParmesan (cid:11) ∃producedIn.Italy
using a third ontology C of countries, W will not inter-
fere with F . On the other hand, using the imported con-
cepts from F allows us to derive some non-trivial proper-
ties involving the local and mixed signature of W, such as
Chardonnay (cid:11) RedWine and Rioja (cid:11) DeliciousProduct.

As we have seen, our notion of locality from Deﬁnition 3
yields a modularity class. This class, however, is not the most
general one we can achieve. In particular, there are axioms
that are not local, but obviously unproblematic. For example,
the axiom A(cid:2) (cid:11) A(cid:2) (cid:7) C (cid:2) is a tautology, but is disallowed by
Deﬁnition 3 since it involves external symbols only; another
example is the GCI A1 (cid:7) B (cid:2) (cid:11) A2 (cid:7) B (cid:2) which is implied by
the (syntactically) local axiom A1 (cid:11) A2. The limitation of
our syntactic notion of locality is its inability to “compare”
concepts from the external signature.

A natural question is whether we can generalize Deﬁni-
tion 3 to overcome this limitation. Obviously, such general-
ization cannot be given in terms of syntax only since check-
ing for tautologies in the external signature necessarily in-
volves reasoning. Since our proof of Lemma 5 relies mainly
on Lemma 6, we generalize our notion of locality as follows:
Deﬁnition 7 (Semantic Locality). Let E ⊆ S. A SHIQ-
axiom α with Sig(α) ⊆ S is semantically local w.r.t. E if
the trivial expansion I of every E-interpretation I (cid:2) to S is a
model of α. A SHIQ-TBox T is semantically local if every
axiom in T is semantically local w.r.t. Ext(T ).
♦

Lemma 6 essentially implies that every syntactically local
TBox is semantically local. Interestingly, both notions coin-
cide when E = ∅ or when α is a non-trivial role inclusion
axiom (not of the form R(cid:2) (cid:11) R(cid:2)) or a transitivity axiom. It
is easy to check that the conditions for a modularity class in
Deﬁnition 2 hold for semantic locality as well. The following
proposition provides an effective way of checking whether a
GCI satisﬁes Deﬁnition 7:
Proposition 8 Letα beaGCIand E ⊆ S. Letα(cid:2) beobtained
from α by replacing every subconcept of the form ∃R.C,
(cid:2) n R.C, and every concept name A in α with ⊥, where
R /∈ Rol(E) and A /∈ E. Then α is semantically local w.r.t.
E iff α(cid:2) is a tautology.

Proof. The subconcepts of the form ∃R.C, (cid:2) n R.C, and
A are interpreted by ∅ in every trivial expansion of every
E-interpretation, hence they are indistinguishable from ⊥ in
the context of Deﬁnition 7. Replacing all these subconcepts
in α with ⊥ yields α(cid:2) with Sig(α(cid:2)) ⊆ E, and thus Deﬁni-
tion 7 implies that α is semantically local iff every SHIQ-
interpretation satisﬁes α(cid:2).

As mentioned above, deciding semantic locality involves
reasoning; in fact, this problem is PSPACE-complete in the
size of the axiom,7 as opposed to checking syntactic locality,
which can be done in polynomial time. We expect the test

7This is precisely the complexity of checking subsumption be-
tween SHIQ-concepts w.r.t. the empty TBox and without role in-
clusions and transitivity axioms [Tobies, 2001].

IJCAI-07

301

from Proposition 8 to perform well in practice since the size
of axioms in a TBox is typically small w.r.t. the size of the
TBox, and would like to point out that it can be performed
using any existing DL reasoner.

It is worth noting that both notions of locality provide the
“black-box” behavior we are aiming at, and both involve only
the ontology T and its external signature. Finally, a nat-
ural question arising is whether semantic locality can be fur-
ther generalized while preserving modularity. The following
lemma answers this question negatively.

Lemma 9 [Semantic Locality is Maximal]
IfaSHIQ-TBoxT1 isnotsemanticallylocal,thenthereexist
SHIQ-TBoxes T2 and T (cid:2) such that T2 is local, Loc(T2) ⊆
Loc(T1), Loc(T1) ∩ Sig(T (cid:2)) = ∅, and T1 ∪ T2 ∪ T (cid:2) is not a
conservativeextensionof T (cid:2).

Proof. Let T1 be not semantically local, and deﬁne T2 and T (cid:2)
as follows: T2 consists of the axioms of the form A (cid:11) ⊥ and
∃R.(cid:8) (cid:11) ⊥ for every A, R ∈ Loc(T1); T (cid:2) consists of axioms
of the form ⊥ (cid:11) A(cid:2) and ⊥ (cid:11) ∃R(cid:2).(cid:8) for every A(cid:2), R(cid:2) ∈
Ext(T1). Note that (i) T2 is local, (ii) for every model I of
T2, we have AI = ∅ and RI = ∅ for every A, R ∈ Loc(T1)
and (iii) every Ext(T1)-interpretation is a model of T (cid:2), and
(iv) T (cid:2) uses all symbols from Ext(T1).

(cid:21)|= α(cid:2) but T1 ∪ T2 ∪ T (cid:2)

In order to show that T1 ∪ T2 ∪ T (cid:2) is not a conservative
extension of T (cid:2), we construct an axiom α(cid:2) over the signature
of T (cid:2) such that T (cid:2)
|= α(cid:2). Since
T1 is not semantically local, there exists an axiom α ∈ T1
which is not semantically local w.r.t. Ext(T1), and which we
use to deﬁne α(cid:2). If α is a role axiom of the form α = (R(cid:2) (cid:11)
R), we set α(cid:2) = ((cid:8) (cid:11) ∀R(cid:2).⊥); if α = (R(cid:2) (cid:11) S (cid:2)) with
(cid:21)= S (cid:2) or α = Trans(R(cid:2)), we set α(cid:2) = α; and if α is a
R(cid:2)
GCI, we deﬁne α(cid:2) from α as in Proposition 8. As a result, α(cid:2)
uses Ext(T1) = Sig(T (cid:2)) only, and T (cid:2) (cid:21)|= α(cid:2) since α(cid:2) is not a
tautology (for the last case this follows from Proposition 8).
Since T1 contains α and because of the property (ii) above
for T2, we have T1 ∪ T2 |= α(cid:2), and so T1 ∪ T2 ∪ T (cid:2) |= α(cid:2).

Lemma 9 shows that semantic locality cannot be general-
ized without violating the properties in Deﬁnition 2. Indeed,
condition M2 implies that the union T of two local TBoxes T1
and T2 is a local TBox, and condition M2 implies that T ∪ T (cid:2)
is conservative over every T (cid:2) with Sig(T (cid:2)) ∩ Loc(T ) = ∅.
The results in Lemma 5 and Lemma 9 are summarized in the
following theorem:
Theorem 10 A setofsemanticallylocal SHIQ TBoxesisa
maximalclass of modularTBoxes.

5 Modularity of SHOIQ ontologies
When trying to extend the results in the previous section to
the more expressive logic SHOIQ, we soon encounter difﬁ-
culties. Nominals are interpreted as singleton sets and, thus, a
straightforward extension of Deﬁnition 7 fails since nominals
cannot be interpreted by the empty set.

A notion of modularity, however, can still be achieved if
all nominals in a TBox T are treated as external concepts; the
intuitive reason for this is that the interpretation of nominals
is already very constrained, and hence we have little control

over it. Under this assumption, Deﬁnitions 3 and 7 can be
reused for SHOIQ. Such notions of locality still allow for
non-trivial uses of nominals in T . For example, the following
axiom is semantically local w.r.t. E = {elvis}, even if elvis
is used as a nominal:

ElvisLover ≡ MusicFan (cid:5) ∃likes.elvis

Indeed, the trivial expansion of every E-Interpretation to S =
{ElvisLover, MusicFan, likes} is a model of this axiom.
Deﬁnition 11 (Locality for SHOIQ). A SHOIQ-TBox T
with Sig(T ) = R (cid:3) C (cid:3) I is syntactically (semantically) local
w.r.t. E if T is syntactically (semantically) local w.r.t. E ∪ I
♦
as in Deﬁnition 3 (Deﬁnition 7).

Lemma 12 [Semantic Locality Implies Modularity] The
set of semantically local SHOIQ TBoxes is a modularity
class for E.

The proof is analogous to the one of Lemma 5. Unfortu-
nately, an important use of nominals in DLs, namely ABox
assertions, is non-local according to our deﬁnition. For ex-
ample, the assertion elvis (cid:11) Singer (typically written as
elvis:Singer) is not local since elvis is treated as an exter-
nal element. In fact, it is not possible to extend the deﬁnition
of locality to capture assertions and retain modularity:

Proposition 13 [Assertions Cannot be Local]
For every assertion α = (i (cid:11) A) there exists a syntactically
localTBox T such that T ∪ {α} is inconsistent.
Proof. Take T = {A (cid:11) ⊥}.

Proposition 13 implies that no TBox T1 containing an as-
sertion α can be declared as local without braking either prop-
erty M1 or M2 of modularity from Deﬁnition 2. Indeed, by
taking T as in the proof of Proposition 13, we obtain an in-
consistent merge T1 ∪ T which should be local according to
M2 if T1 is local. However, no inconsistent TBox can be local
since it implies all axioms and hence violates condition M1.
Even if the merge of a TBox and a set of assertions is con-
sistent, new subsumptions over the external signature may
still be entailed. For example, consider the TBox T consist-
ing of the axiom:

Frog (cid:11) ∃hasColor.green (cid:5) ∀hasColor.Dark

which is local w.r.t. E = {green, Dark}. If we add the asser-
tion kermit (cid:11) Frog to T , then we obtain that green is a dark
color (green (cid:11) Dark), as a new logical consequence.

To sum up, we have shown that locality can be extended
to SHOIQ, but not in the presence of assertions. An open
question is whether semantic locality for SHOIQ is maxi-
mal in the sense of Lemma 9.

6 Field Study
In order to test the adequacy of our conditions in practice,
we have implemented a (syntactic) locality checker and run
it over ontologies from a library of 300 ontologies of various
sizes and complexity some of which import each other [Gar-
diner et al., 2006].8 Since OWL does not allow to declare

8The library is available at http://www.cs.man.ac.uk/

∼horrocks/testing/

IJCAI-07

302

symbols as local or external, we have used the following “in-
formed guess work”: for an ontology T , we deﬁne the set
Loc(T ) as the set of symbols in T that do not occur in the
signature of the ontologies imported (directly or indirectly)
using the owl:imports construct by T , and deﬁning Ext(T )
to be the complement of Loc(T ) in Sig(T ). The owl:imports
construct allows to include, in an ontology T , the axioms of
another ontology T (cid:2) published on the Web by reference. The
usage of owl:imports T (cid:2) in T produces the (logical) union
T ∪ T (cid:2).

It

turned out that 96 of the 300 ontologies used the
owl:imports construct, and that all but 11 of these 96 ontolo-
gies are syntactically local (and hence also semantically lo-
cal). From the 11 non-local ontologies, 7 are written in the
OWL-Full species of OWL to which our framework does not
yet apply. The remaining 4 non-localities are due to the pres-
ence of so-called mapping axioms of the form A ≡ B (cid:2), where
A ∈ Loc(T ) and B (cid:2) ∈ Ext(T ), which are not even seman-
tically local. We were able to ﬁx these non-localities as fol-
lows: we replace every occurrence of A in T with B (cid:2) and
then remove this axiom from T . After this transformation, all
4 non-local ontologies turned out to be local.

7 Discussion and Related Work

In the last few years, a rapidly growing body of work has
been developed under the names of Ontology Mapping and
Alignment, Ontology Merging and Ontology Integration; see
[Kalfoglou and M.Schorlemmer, 2003; Noy, 2004] for sur-
veys. This ﬁeld is rather diverse, has originated from differ-
ent communities, and is concerned with two different prob-
lems: (i) how to (semi-automatically) detect correspondences
between terms in the signatures of the ontologies to be in-
tegrated (e.g. Instructor corresponds to Professor), and, (ii)
how to assess and predict the (logical) consequences of the
merging. Typically, when integrating ontologies, one ﬁrst
solves (i) and then (ii).

Although (i) has been the focus of intensive research in
the last few years [Kalfoglou and M.Schorlemmer, 2003],
and tools for ontology mapping are available, to the best of
our knowledge, the problem of predicting and controlling
the consequences of ontology integration has been addressed
only very recently in [Ghilardi et al., 2006] and [Grau et al.,
2006]. In [Ghilardi et al., 2006], the authors point out the
importance of the notion of a conservative extension for on-
tology evolution and merging, and provide decidability and
complexity results for the problem of deciding conservative
extensions in the basic DL ALC. In [Grau et al., 2006], the
authors identify two basic ontology integration scenarios. For
each of them, the authors established a set of semantic proper-
ties (including being conservative extensions) to be satisﬁed
by the integrated ontology, and presented a set of syntactic
constraints on the component ontologies to ensure the preser-
vation of the desired semantic properties.

The results in this paper generalize those from [Grau et
al., 2006], since the integration scenarios presented there are
particular cases of Deﬁnition 3. Also, in contrast to both
[Ghilardi et al., 2006], and [Grau et al., 2006], our notion
of modularity implies a “black box” behavior with respect to

the external signature: instead of considering a pair of ontolo-
gies T , T (cid:2), our approach takes an ontology T with speciﬁed
sets of local and external symbols, and provides guarantees
for the merge of T with any ontology T (cid:2) which does not use
local symbols. In contrast, the approach described in [Ghi-
lardi et al., 2006] considers the problem of whether, for two
given ALC TBoxes T , T (cid:2), their merge T ∪ T (cid:2) is conserv-
ative over T (cid:2). It turns out that this problem is decidable in
2EXPTIME in the size of T ∪ T (cid:2), and thus it is signiﬁcantly
harder than standard reasoning tasks (such as deciding on-
tology consistency). A solution to the latter problem can be
used to decide whether T and T (cid:2) can be safely merged—
which can be the case without any of them being local. If
T or T (cid:2) are changed, however, then this test would need to
be repeated—which is not the case in the approach presented
here (see the above discussion of its black box behavior). As
a consequence, these two approaches can be used in different
scenarios: ours can be used to provide guidelines for ontology
engineers who want to design modular ontologies that show
black box behavior, whereas the one described in [Ghilardi et
al., 2006] can be used to check safe integrability for a given,
ﬁxed set of TBoxes.

Summing up, we have proposed a logic-based framework
for modularity, which we have instantiated in a plausible and
practically applicable way for SHIQ, and in a preliminary
way for SHOIQ. We believe that our results will be useful
as the foundations of tools that support both the collabora-
tive development of complex ontologies and the integration
of independently developed ontologies on the Semantic Web.

References
[Gardiner et al., 2006] T. Gardiner,

and
D. Tsarkov. Automated benchmarking of description
logic reasoners. In Proc. of DL, 2006.

I. Horrocks,

[Ghilardi et al., 2006] S. Ghilardi, C. Lutz, and F. Wolter.
Did I damage my ontology? a case for conservative ex-
tensions in description logics. In Proc. of KR-06, 2006.

[Grau et al., 2006] B. Cuenca Grau, I. Horrocks, O. Kutz,
and U. Sattler. Will my ontologies ﬁt together? In Proc.
of DL, 2006.

[Horrocks and Sattler, 2005] I. Horrocks and U. Sattler. A
tableaux decision procedure for SHOIQ. In Proc. of IJ-
CAI, 2005.

[Kalfoglou and M.Schorlemmer, 2003] Y. Kalfoglou and
M.Schorlemmer. Ontology mapping: The state of the art.
The Knowledge Engineering Review, 18:1–31, 2003.

[Noy, 2004] N. Noy. Semantic integration: A survey on

ontology-based approaches. SIGMOD Record, 2004.

[Patel-Schneider et al., 2004] P.F. Patel-Schneider, P. Hayes,
and I. Horrocks. OWL web ontology language semantics
and abstract syntax. W3C Recommendation, 2004.

[Tobies, 2001] S. Tobies. Complexity Results and Practical
Algorithms for Logics in Knowledge Representation. PhD
thesis, RWTH Aachen, 2001.

IJCAI-07

303

