Strong Equivalence for Logic Programs with Preferences(cid:3)

Wolfgang Fabery

Department of Mathematics

University of Calabria

I-87030 Rende (CS), Italy
Email: faber@mat.unical.it

Kathrin Konczak

Institut f¤ur Informatik
Universit¤at Potsdam

PF 900327, D-14439 Potsdam, Germany

Email: konczak@cs.uni-potsdam.de

Abstract

Recently, strong equivalence for Answer Set Pro-
gramming has been studied intensively, and was
shown to be bene(cid:2)cial for modular programming
and automated optimization. In this paper we de-
(cid:2)ne the novel notion of strong equivalence for logic
programs with preferences. Based on this de(cid:2)nition
we give, for several semantics for preference han-
dling, necessary and suf(cid:2)cient conditions for pro-
grams to be strongly equivalent. These results pro-
vide a clear picture of the relationship of these se-
mantics with respect to strong equivalence, which
differs considerably from their relationship with re-
spect to answer sets. Finally, based on these results,
we present for the (cid:2)rst time simpli(cid:2)cation methods
for logic programs with preferences.

Introduction

1
During the
last decade, Answer Set Programming
(ASP) [Gelfond and Lifschitz, 1988] has become an in-
creasingly acknowledged tool for knowledge representation
and reasoning. A main advantage of ASP is that it is based
on solid theoretical foundations, while being able to model
commonsense reasoning in an arguably satisfactory way. The
availability of ef(cid:2)cient solvers has furthermore stimulated
its use in practical applications in recent years. This devel-
opment had quite some implications on ASP research. For
example, increasingly large applications require features for
modular programming. Another requirement is the fact that
in applications, ASP code is often generated automatically
by so-called frontends, calling for optimization methods
which remove redundancies, as also found in database query
optimizers. For these purposes the rather recently suggested
notion of strong equivalence for ASP [Lifschitz et al., 2001;
Turner, 2003] can be used.
Indeed, if two ASP programs
are strongly equivalent, they can be used interchangeably in

(cid:3)The (cid:2)rst author was partially supported by the EC under project
IST-2002-33570 (INFOMIX). The second author was partially sup-
ported by the German Science Foundation (DFG) under grant SCHA
550/6-4, TP C. Both authors were partially supported by the EC un-
der project IST-2001-37004 WASP.

yFunded by APART of the Austrian Academy of Sciences.

any context. This gives a handle on showing the equivalence
of ASP modules.
If a program is strongly equivalent to a
subprogram of itself, then one can always use the subprogram
instead of the original program, a technique which serves as
an effective optimization method.

On a different line of ASP research, many extensions of the
basic formalism have been proposed. Perhaps the most inten-
sively studied one is the modeling of preferences in ASP, cf.
[Delgrande et al., 2004]. Strongly rooted in the research of
nonmonotonic formalisms, the ability to specify preferences
is acknowledged to be particularly bene(cid:2)cial to ASP, since
they constitute a very natural and effective way of resolving
indeterminate solutions. For example, preferences have been
successfully used for timetabling, auctioning, con(cid:2)guration,
and other domains. A sophisticated application for informa-
tion site selection has been described in [Eiter et al., 2002].
The emergence of such applications thus also calls for opti-
mization methods, as for standard ASP.

In this paper we tackle this issue and generalize the no-
tion of strong equivalence to ASP with preferences. Since
a plethora of formalisms and semantics has been introduced
for extending ASP by preferences, we have to limit ourselves
in this paper to a few concrete approaches. A basic clas-
si(cid:2)cation of preference handling is (i) over which elements
the preference is de(cid:2)ned and (ii) the way how preferences
are interpreted, and in particular how they are aggregated.
In this work we focus on ordered programs, where prefer-
ences are de(cid:2)ned among rules, which semantically act as (cid:2)l-
ters over answer sets. In particular, we consider the three se-
mantics de(cid:2)ned in [Delgrande et al., 2003; Wang et al., 2000;
Brewka and Eiter, 1999], referred to as D-, W -, and B-
semantics, respectively. The reason for this choice is that
these semantics seem to be widely accepted and their prop-
erties and interrelationships are fairly well-understood.

The contributions of this work are as follows. We de(cid:2)ne the
notion of strong equivalence for ordered programs. It turns
out that the de(cid:2)nition for standard ASP cannot be straightfor-
wardly extended for two main reasons: (1) the (cid:147)union(cid:148) of or-
dered programs needs to be de(cid:2)ned properly, and (2) not any
(cid:147)union(cid:148) of ordered programs yields a valid ordered program.
To overcome these problems, we de(cid:2)ne the notion of admis-
sible extension, which provides a general method for de(cid:2)ning
strong equivalence for arbitrary structures. We show several
properties of strong order equivalence, providing necessary

and suf(cid:2)cient conditions for programs to be strongly order
equivalent. We also explore the relationship of strong order
equivalence between the three semantics studied in this paper,
and the relationship to strong equivalence of standard logic
programs. Based on these results, we study the applicability
of program simpli(cid:2)cation rules, known from standard ASP,
in the presence of preferences. We obtain that most of these
simpli(cid:2)cations can be applied only in particular contexts. The
main results of this work are that the relationship between the
three preference semantics is changing under strong equiva-
lence and that preferences cannot be (cid:147)compiled away(cid:148) in a
modular fashion. We omit all proofs due to the page limit. 1

2 Background
Answer Sets. A logic program (LP) is a (cid:2)nite set of rules
such as p0   p1; : : : ; pm; not pm+1; : : : ; not pn, where
n (cid:21) m (cid:21) 0, and each pi (0 (cid:20) i (cid:20) n) is an atom. For
such a rule r, we let head (r) denote the head, p0, of r and
body(r) the body, fp1; : : : ; pm; not pm+1; : : : ; not png,
of r. Let body +(r) = fp1; : : : ; pmg and body (cid:0)(r) =
fpm+1; : : : ; png. For a set of rules (cid:5), we write head ((cid:5)) =
fhead (r) j r 2 (cid:5)g. A program is basic if body (cid:0)(r) = ;
for all its rules. The reduct, (cid:5)X, of a program (cid:5) relative to a
set X of atoms is de(cid:2)ned by (cid:5)X = fhead (r)   body +(r) j
r 2 (cid:5); body (cid:0)(r) \ X = ;g. A set of atoms X is closed
under a basic program (cid:5) if for any r 2 (cid:5), head (r) 2 X if
body +(r) (cid:18) X. The smallest set of atoms being closed un-
der a basic program (cid:5) is denoted by Cn((cid:5)). Then, a set X
of atoms is an answer set of a program (cid:5) if Cn((cid:5)X ) = X.
We use AS((cid:5)) for denoting the set of all answer sets of (cid:5). In
what follows, an important concept is that of the generating
rules of an answer set. Given a set X of atoms from (cid:5), de(cid:2)ne
R(cid:5)(X) = fr 2 (cid:5) j body +(r) (cid:18) X; body (cid:0)(r) \ X = ;g.

Strong Equivalence. Under the answer set semantics, two
LPs (cid:5)1 and (cid:5)2 are regarded as equivalent, denoted (cid:5)1 (cid:17) (cid:5)2,
iff AS((cid:5)1) = AS((cid:5)2). Two LPs (cid:5)1 and (cid:5)2 are strongly
equivalent, denoted (cid:5)1 (cid:17)s (cid:5)2, iff, for any LP (cid:5), the pro-
grams (cid:5)1 [ (cid:5) and (cid:5)2 [ (cid:5) are equivalent, i.e. (cid:5)1 [ (cid:5) (cid:17)
(cid:5)2 [ (cid:5). As shown in [Lifschitz et al., 2001], strong equiv-
alence is closely related to the non-classical logic of here-
and-there, which was adapted to logic-programming terms by
Turner [Turner, 2003]: Let (cid:5) be an LP, and let X; Y (cid:18) A
such that X (cid:18) Y . The pair (X; Y ) is an SE-model of (cid:5) (over
A), if Y j= (cid:5) and X j= (cid:5)Y . By SEA((cid:5)) we denote the
set of all SE-models over A of (cid:5). Usually the set A is left
implicit and one just writes SE((cid:5)). Then, for any LPs (cid:5)1
and (cid:5)2, (cid:5)1 (cid:17)s (cid:5)2 iff SE((cid:5)1) = SE((cid:5)2) [Turner, 2003].

Preferences. A logic program (cid:5) is said to be ordered if we
have a set N of terms serving as names for rules and a pref-
erence relation <(cid:18) N (cid:2) N as a strict partial order among
rules, where we write s < t for the names s; t 2 N of rules
in (cid:5). Furthermore, we assume a bijective function n(:) as-
signing to each each rule r 2 (cid:5) a name n(r) 2 N . To
simplify our notation, we usually write ri instead of n(ri) for
some ri 2 (cid:5). Given ri; rj 2 (cid:5), ri < rj states that rj has

1A version of the paper including proofs can be found at http:

//www.wfaber.com/research/#publications

higher priority than ri. Formally, an ordered (logic) program
(OLP) can be understood as a quadruple ((cid:5); N ; n; <), where
(cid:5) is a logic program, n is a bijective function between (cid:5) and
the set of names N , and < is a set of preference relations
over (cid:5). Whenever possible, we leave N and n implicit and
just write ((cid:5); <) for OLPs. Moreover, we write <= ; if no
partial order is given that is ((cid:5); ;) denotes a logic program.
The interpretation that one rule has higher priority than an
other rule can be made precise in different ways. In what fol-
lows, we consider three such interpretations: D(cid:150) [Delgrande
et al., 2003], B(cid:150) [Brewka and Eiter, 1999], and W (cid:150) prefer-
ence [Schaub and Wang, 2003]. Given ((cid:5); <), all of them
use < for selecting preferred answer sets among the standard
answer sets of (cid:5). We now recall the de(cid:2)nitions of these se-
mantics. 2
De(cid:2)nition 2.1 Let ((cid:5); <) be an OLP and X be an answer set
of (cid:5). Then, X is <D(cid:150)preserving, if an enumeration hriii2I
of (cid:5) exists s.t. for every i; j 2 I we have
1. if ri < rj, then j < i, and
2. if ri 2 R(cid:5)(X) then body +(ri) (cid:18) fhead (rj) j rj 2

R(cid:5)(X); j < ig, and
3. if ri 2 (cid:5) n R(cid:5)(X) then
(a) body +(ri) 6(cid:18) X or
(b) body (cid:0)(ri) \ fhead (rj) j rj 2 R(cid:5)(X); j < ig 6= ;.
Cond.1 stipulates that the enumeration of (cid:5) is compatible
with <. Cond.2 makes the property of supportedness explicit.
Although any answer set is generated by a supported se-
quence of rules, in D(cid:150)preferences, rules cannot be supported
by lower-ranked ones. Cond.3a separates the handling of un-
supported rules from preference handling. Cond.3b guaran-
tees that rules can never be blocked by lower-ranked ones.
De(cid:2)nition 2.2 Let ((cid:5); <) be an OLP and X be an answer set
of (cid:5). Then, X is <W (cid:150)preserving, if an enumeration hriii2I
of (cid:5) exists s.t. for every i; j 2 I we have
1. if ri < rj, then j < i, and
2. if ri 2 R(cid:5)(X) then
(a) body +(ri) (cid:18) fhead (rj) j rj 2 R(cid:5)(X); j < ig or
(b) head (ri) 2 fhead (rj) j rj 2 R(cid:5)(X); j < ig, and
3. if ri 2 (cid:5) n R(cid:5)(X) then
(a) body +(ri) 6(cid:18) X or
(b) body (cid:0)(ri) \ fhead (rj) j rj 2 R(cid:5)(X); j < ig 6= ; or
(c) head (ri) 2 fhead (rj) j rj 2 R(cid:5)(X); j < ig.
For W (cid:150)preference, the concept of order preservation from
D(cid:150)preferences is weakened in Condition 2 and 3 for suspend-
ing both conditions, whenever the head of a preferred rule is
derivable in an alternative way.
De(cid:2)nition 2.3 Let ((cid:5); <) be an OLP and X be an answer set
of (cid:5). Then, X is <B(cid:150)preserving, if an enumeration hriii2I
of (cid:5) exists s.t. for every i; j 2 I we have
1. if ri < rj, then j < i, and

2In the following, I is an index set I = f1; : : : ; ng for j(cid:5)j = n.

2. if ri 2 (cid:5) n R(cid:5)(X) then
(a) body +(ri) 6(cid:18) X or
(b) body (cid:0)(ri) \ fhead (rj) j rj 2 R(cid:5)(X); j < ig 6= ; or
(c) head (ri) 2 X.
B(cid:150)preference drops Cond.2; thus decoupling preference han-
dling from the order induced by consecutive rule applications.
For (cid:27) 2 fD; W; Bg, we de(cid:2)ne AS (cid:27)(((cid:5); <)) as the set
of all <(cid:27)-preserving answer sets of OLP ((cid:5); <). As shown
in [Schaub and Wang, 2003], the three strategies yield an
increasing number of preferred answer sets. That is, D(cid:150)
preference is stronger than W (cid:150)preference, which is stronger
than B(cid:150)preference, which is stronger than no preference.
More precisely, we have AS D(((cid:5); <)) (cid:18) ASW (((cid:5); <)) (cid:18)
ASB(((cid:5); <)) (cid:18) AS((cid:5)) and, in addition, AS (cid:27)(((cid:5); ;)) =
AS((cid:5)) for (cid:27) 2 fD; W; Bg.

3 Strong Order Equivalence
In this section we de(cid:2)ne variants of equivalences for OLPs.
De(cid:2)ning (cid:147)standard(cid:148) equivalence (two programs permit pre-
cisely the same answer sets) is straightforward by considering
the respective preferred answer sets.

However, concerning the notion of strong equivalence,
there are some caveats. For standard programs, strong equiv-
alence for (cid:5)1 and (cid:5)2 holds if for any program (cid:5), (cid:5)1 [ (cid:5)
and (cid:5)2 [ (cid:5) are equivalent. If we now take preferences into
account, for any ((cid:5); <), ((cid:5)1; <1) and ((cid:5)2; <2) would be
strongly equivalent if ((cid:5)1 [ (cid:5); <1 [ <) and ((cid:5)2 [ (cid:5); <2
[ <) are equivalent. The problem is that ((cid:5)1 [ (cid:5); <1 [ <)
is not necessarily an OLP, because of two issues: 1. Rule label
clashes, and 2. partial order clashes.

Rule label clashes, i.e. two different rules have the same
name or one rule has two different names, can be resolved by
a renaming. We say that ((cid:5); N (cid:3); n(cid:3); <(cid:3)) is a renaming of
((cid:5); N ; n; <) if N (cid:3) is a new set of names of rules, n(cid:3)(:) is
a bijective function assigning each rule of (cid:5) an unique name
of N (cid:3), and n(cid:3)(r) <(cid:3) n(cid:3)(r0) holds iff n(r) < n(r0), for all
r; r0 2 (cid:5). The union of two OLPs is then de(cid:2)ned as follows.
De(cid:2)nition 3.1 Let ((cid:5); N ; n; <) and ((cid:5)0; N 0; n0; <0) be
OLPs where N ; N 0 are disjoint sets of rule names.

We de(cid:2)ne the union of ((cid:5); N ; n; <) and ((cid:5)0; N 0; n0; <0)

as ((cid:5)(cid:3); N (cid:3); n(cid:3); <(cid:3)), where

(cid:15) (cid:5)(cid:3) = (cid:5) [ (cid:5)0
(cid:15) N (cid:3) as new set of names of rules,
(cid:15) n(cid:3)(r) for r 2 (cid:5) [ (cid:5)0 as a bijective function assigning

each rule of (cid:5) [ (cid:5)0 an unique name of N (cid:3), and

(cid:15) <(cid:3) as < [ <0, where for r; r0 2 (cid:5) [ (cid:5)0, n(cid:3)(r) <(cid:3)
n(cid:3)(r0) holds whenever n(r) < n(r0) or n0(r) <0 n0(r0)
holds.

Again, we usually leave N (cid:3) and n(cid:3) implicit. Sometimes we
write ((cid:5) [ (cid:5)0; < [ <0) for the union of ((cid:5); <) and ((cid:5)0; <0).
We next observe that the union of OLPs is not necessarily

an OLP. For this, consider

((cid:5)1; <1) = fr1 : a  ; r2 : b   a; r2 <1 r1g
((cid:5)2; <2) = fr3 : a  ; r4 : b   a; r3 <2 r4g

Then, we have

((cid:5)(cid:3); <(cid:3)) = fr5 : a  ; r6 : b   a; r5 <(cid:3) r6; r6 <(cid:3) r5g

where <(cid:3) is not a strict partial order. Hence, ((cid:5)(cid:3); <(cid:3)) is
not an OLP. To avoid this, we de(cid:2)ne the notion of admissible
extensions of an OLP.
De(cid:2)nition 3.2 Let ((cid:5); <) and ((cid:5)0; <0) be OLPs.

Then, ((cid:5)0; <0) is an admissible extension of ((cid:5); <) if ((cid:5) [

(cid:5)0; < [ <0) is an OLP.

We remark that the notion of compatibility for orderings,
as de(cid:2)ned in [Brewka and Eiter, 1999], is similar in spirit to
admissible extensions, but concerns only the order relation
and not the rules in the program.

Analogously to (normal) logic programs, we can de(cid:2)ne the

notion of equivalence of OLPs.
De(cid:2)nition 3.3 (Order
((cid:5)1; <1) and
((cid:5)2; <2) be OLPs and (cid:27) 2 fD; B; W g. Then, ((cid:5)1; <1) and
((cid:5)2; <2) are <(cid:27)-equivalent, denoted ((cid:5)1; <1) (cid:17)(cid:27) ((cid:5)2; <2),
iff AS(cid:27)(((cid:5)1; <1)) = AS(cid:27)(((cid:5)2; <2)).

equivalence) Let

Since the de(cid:2)nition of strong equivalence for logic pro-
grams can be interpreted as having the same answer sets in
any extension, we employ the notion of admissible extensions
for de(cid:2)ning the analogon for OLPs.
De(cid:2)nition 3.4 (Strong order equivalence) Let ((cid:5)1; <1) and
((cid:5)2; <2) be OLPs and (cid:27) 2 fD; B; W g.

Then, ((cid:5)1; <1) and ((cid:5)2; <2) are strongly <(cid:27)-equivalent
iff for all admissible extensions ((cid:5); <) of ((cid:5)1; <1) and
((cid:5)2; <2) it holds that ((cid:5)1 [ (cid:5); <1 [ <) and ((cid:5)2 [ (cid:5); <2
[ <) are <(cid:27)- equivalent.
Abbreviatory, we write (cid:17)(cid:27)
<(cid:27)-equivalent.

s whenever two OLPs are strongly

4 Properties and Relationships
Next, we want to characterize which conditions two OLPs
must ful(cid:2)ll s.t. they are strongly order equivalent.

The next theorem states that strong order equivalence im-

s ((cid:5)2; <2) then (cid:5)1 (cid:17)s (cid:5)2.

plies strong equivalence of the underlying logic programs.
Theorem 4.1 Let ((cid:5)1; <1) and ((cid:5)2; <2) be OLPs and (cid:27) 2
fD; W; Bg. If ((cid:5)1; <1) (cid:17)(cid:27)
Intuitively, if the logic programs are not strongly equivalent,
one extension of them admits an answer set A, which is no
answer set of the extension of the other program. If the corre-
sponding ordered extensions have the same answer sets, this
means that A is inhibited by the preferences. But then one can
always construct a further extension, which regenerates A for
one program, but not for the other. For example, programs

= fr1 : a  g

((cid:5)1; ;)
((cid:5)2; <2) = fr2 : a   not b; r3 : b   not a; r3 <2 r2g
have both the preferred answer set fag, whereas (cid:5)2 has ad-
ditionally the answer set fbg. Taking ((cid:5); ;) = fr4 : b  
y; r5 : y  g yields fa; b; yg as preferred answer set of
((cid:5)1[(cid:5); ;), but fb; yg as preferred answer set of ((cid:5)2[(cid:5); <2).
Note that one can create such a (cid:147)compensating(cid:148) program
for any answer set which is inhibited by the preference rela-
tion. For this, we use new symbols and new rules, which are

not involved in the preference relation, to (cid:147)repair(cid:148) this answer
set. Therefore strong equivalence is a necessary condition for
strong order equivalence.

Next, we turn our attention to the set of generation rules.

For this, consider the following OLPs:

((cid:5)1; ;) = fr1 : a  ; r3 : b  g
((cid:5)2; ;) = fr1 : a  ; r2 : b   ag

We observe that (cid:5)1 (cid:17)s (cid:5)2, but taking

((cid:5)(cid:3); <(cid:3)) = fr2 : b   a; r4 : y   not b; r2 <(cid:3) r4g

yields fa; bg 2 AS (cid:27)(((cid:5)1 [ (cid:5)(cid:3); <(cid:3))) but AS(cid:27)(((cid:5)2 [ (cid:5)(cid:3); <(cid:3)
)) = ; for (cid:27) 2 fD; W; Bg. They are not strongly order
equivalent because they do not coincide on their set of gener-
ating rules. ((cid:5)1; ;) contains r3 and ((cid:5)2; ;) rule r2 to derive
the atom b. Adding r4 and the preference that r4 is higher pre-
ferred to r2 entails that ((cid:5)2[(cid:5)(cid:3); <(cid:3)) has no preferred answer
set since r4 is blocked by the lower preferred rule r2, while
((cid:5)1 [ (cid:5)(cid:3); <(cid:3)) has a preferred answer set since r3 allows to
block r4 in an alternative way. This allows us to suppose that
strong order equivalence enforces that the OLPs must coin-
cide on all rules which can become applicable. For this, we
say that a rule r 2 (cid:5) contributes to an answer set X, if there
exists an (cid:5)(cid:3) such that X 2 AS((cid:5)[(cid:5)(cid:3)) and r 2 R(cid:5)[(cid:5)(cid:3) (X).
Rules which are not contributing to answer sets, are never ap-
plicable, e.g. body +(r) \ body (cid:0)(r) 6= ;. For B(cid:150)preferences,
we obtain that two strongly order equivalent programs must
coincide on their rules contributing to answer sets.
Theorem 4.2 Let ((cid:5)1; <1) and ((cid:5)2; <2) be OLPs.
If
((cid:5)2; <2), then for all (cid:5) and for all X 2
((cid:5)1; <1) (cid:17)B
s
AS((cid:5)1 [ (cid:5)) = AS((cid:5)2 [ (cid:5)) we have R(cid:5)1[(cid:5)(X) =
R(cid:5)2[(cid:5)(X).
Interestingly, for D(cid:150) and W (cid:150)preferences, these conditions
have to be weakened.
Theorem 4.3 Let ((cid:5)1; <1) and ((cid:5)2; <2) be OLPs and (cid:27) 2
fD; W g. If ((cid:5)1; <1) (cid:17)(cid:27)
s ((cid:5)2; <2), then for all (cid:5) and for all
X 2 AS((cid:5)1 [ (cid:5)) = AS((cid:5)2 [ (cid:5)) we have R(cid:5)1[(cid:5)(X) n fr 2
(cid:5)1[(cid:5) j head (r) 2 body +(r)g = R(cid:5)2[(cid:5)(X)nfr 2 (cid:5)2[(cid:5) j
head (r) 2 body +(r)g.
Since D- and W - preferences couple rule application with
preference handling, answer sets can be inhibited by prefer-
ences because applied rules are not enumerable in an order
preserving way (see Condition 2 in De(cid:2)nition 2.1 and 2.2).
But one can always (cid:2)nd an extension such that those an-
swer sets are regenerated. For applied (cid:147)loop(cid:148) rules, i.e.
head (r) 2 body +(r), another rule must always exist which
derives the head in an order preserving way. Hence, such loop
rules are redundant wrt. D- and W - preferences as long as
they are not involved in the preference relations. In contrast,
B- preferences decouple preference handling from rule ap-
plication and hence, one can always (cid:2)nd an extension, where
those loop rules regenerate a non-preferred answer set to a
preferred one in one program but not in the other one. For
example,
((cid:5)1; ;) = fr1 : a  g
are not strongly <B- equivalent. Taking

((cid:5)2; ;) = fr1 : a  ; r2 : a   ag

((cid:5); <) = fr1 : a  ; r3 : y   not a; r1 < r3g

yields ASB(((cid:5)1 [ (cid:5); <)) = ; but AS B(((cid:5)2 [ (cid:5); <)) =
fag. Here, rule r2 can be used to block r3. For D- and W -
preferences, however, r2 has to be ordered after r1, hence it
can not be used to block r3.

In the following we will concentrate on the preference re-

lations. For this consider the program

(cid:5) = fr1 : a  ; r2 : b   ag

and the preference relation r1 > r2. We obtain that ((cid:5); ;) (cid:17)(cid:27)
((cid:5); <) holds for all (cid:27) 2 fD; W; Bg and ((cid:5); ;) and ((cid:5); <)
coincide on their set of rules. For ((cid:5); ;), rule r1 must be
considered before rule r2 in D- and W -preference, since the
derivation of the positive body of r2 depends from r1. Thus,
adding the preference relation r1 > r2 to ((cid:5); ;) has no effect
on <D- and W - preferred answer sets. Surprisingly, this does
not hold when considering strong order equivalence. Taking

((cid:5)0; <0) =( r1 : a   r3 : z  

r2 : b   a r4 : y   not z
r3 <0 r2

r1 <0 r4

r5 : a   x
r6 : x  

)

s ((cid:5)2; <2) then <1=<2.

yields AS(cid:27)(((cid:5) [ (cid:5)0; <0)) = ffa; b; x; zgg while AS (cid:27)(((cid:5) [
(cid:5)0; < [ <0)) = ;. For ((cid:5); <) [ ((cid:5)0; <0) we get the transitive
preference r4 > r3, implying that r4 is blocked by a lower
preferred rule, which we don’t obtain for ((cid:5); ;) [ ((cid:5)0; <0
). Since one can always construct such a program (observe
that the relevant rules contain new symbols), it follows that
two OLPs can never be strongly equivalent if the preference
relations do not coincide.
Theorem 4.4 Let ((cid:5)1; <1) and ((cid:5)2; <2) be OLPs and (cid:27) 2
fD; W; Bg. If ((cid:5)1; <1) (cid:17)(cid:27)
s ((cid:5); <) holds for
As a special case we obtain that ((cid:5); ;) 6(cid:17)(cid:27)
any program (cid:5), any non-empty preference relation on (cid:5), and
any (cid:27) 2 fD; W; Bg. Moreover, for every OLP ((cid:5); <); <6=
;; there exists no strongly order equivalent program ((cid:5)0; ;).
Corollary 4.5 Let ((cid:5); <) be an OLP such that <6= ; and
(cid:27) 2 fD; W; Bg. Then, there exists no logic program (cid:5)0 such
that ((cid:5); <) (cid:17)(cid:27)
Interestingly, this tells us that no transformation from an
OLP with a non-empty preference relation to a logic program
exists such that the transformed program is strongly order
equivalent to the original one. The results given above are
suf(cid:2)cient for characterizing strong order equivalence.
Theorem 4.6 Let ((cid:5)1; <1) and ((cid:5)2; <2) be OLPs. If (cid:5)1 (cid:17)s
(cid:5)2, <1=<2, and for all (cid:5) and for all X 2 AS((cid:5)1 [
(cid:5)) = AS((cid:5)2 [ (cid:5)) we have R(cid:5)1[(cid:5)(X) = R(cid:5)2[(cid:5)(X), then
((cid:5)1; <1) (cid:17)B
Theorem 4.7 Let ((cid:5)1; <1) and ((cid:5)2; <2) be OLPs and (cid:27) 2
fD; W g. If (cid:5)1 (cid:17)s (cid:5)2, <1=<2, and for all (cid:5) and for all
X 2 AS((cid:5)1 [ (cid:5)) = AS((cid:5)2 [ (cid:5)) we have R(cid:5)1[(cid:5)(X) n fr 2
(cid:5)1[(cid:5) j head (r) 2 body +(r)g = R(cid:5)2[(cid:5)(X)nfr 2 (cid:5)2[(cid:5) j
head (r) 2 body +(r)g, then ((cid:5)1; <1) (cid:17)(cid:27)
For example,

s ((cid:5)2; <2).

s ((cid:5)2; <2).

s ((cid:5)0; ;).

((cid:5)1; ;) = fr1 : a  ; r2 : b   not ag
((cid:5)2; ;) = fr1 : a  ; r3 : c   not ag

are strongly order equivalent in all three semantics, whereas

((cid:5)3; ;) = fr1 : a  g

((cid:5)4; ;) = fr1 : a  ; r2 : a   ag

are only strongly <D- (and <W -) equivalent, but not strongly
<B- equivalent. With these results we can formalize the fol-
lowing characterization of strong order equivalence.
Corollary 4.8 Let ((cid:5)1; <1) and ((cid:5)2; <2) be OLPs. Then,
s ((cid:5)2; <2) iff (cid:5)1 (cid:17)s (cid:5)2, <1=<2, and for all
((cid:5)1; <1) (cid:17)B
(cid:5) and for all X 2 AS((cid:5)1 [ (cid:5)) = AS((cid:5)2 [ (cid:5)) we have
R(cid:5)1[(cid:5)(X) = R(cid:5)2[(cid:5)(X).
Corollary 4.9 Let ((cid:5)1; <1) and ((cid:5)2; <2) be OLPs and (cid:27) 2
((cid:5)2; <2), iff (cid:5)1 (cid:17)s (cid:5)2,
fD; W g. Then, ((cid:5)1; <1) (cid:17)(cid:27)
s
<1=<2, and for all (cid:5) and for all X 2 AS((cid:5)1 [ (cid:5)) =
AS((cid:5)2 [ (cid:5)) we have R(cid:5)1[(cid:5)(X) n fr 2 (cid:5)1 [ (cid:5) j head (r) 2
body +(r)g = R(cid:5)2[(cid:5)(X) n fr 2 (cid:5)2 [ (cid:5) j head (r) 2
body +(r)g.
Regarding preferred answer sets, the different strategies for
preference handling yield an increasing number of preferred
answer sets.
Interestingly, the above given theorems show
that there is no difference in the behavior of D(cid:150) and W (cid:150)
preferences when considering strong order equivalence.
In
contrast, fewer programs are strongly order equivalent in the
B(cid:150)semantics, since preference handling is decoupled from
rule application.
Theorem 4.10 Let ((cid:5)1; <1) and ((cid:5)2; <2) be OLPs. Then
(a) if ((cid:5)1; <1) (cid:17)B
((cid:5)2; <2),
(b) ((cid:5)1; <1) (cid:17)W
s
Considering answer sets, each <D-preferred answer set is
<W -preferred and each <W -preferred is <B-preferred. In-
terestingly, regarding strong order equivalence we obtain that
s , so the differences between the D- and W - se-
(cid:17)D
mantics can be compensated by extending the program in a
suitable way. Moreover, since (cid:17)B
s im-
plies (cid:17)D
s , the B-semantics imposes a strictly stronger crite-
rion for programs to be strongly order equivalent. The reason
for this is that B-preference decouples preference handling
from rule application, and in addition, these differences can-
not be compensated by adding suitable extensions.

s ((cid:5)2; <2) then ((cid:5)1; <1) (cid:17)W
((cid:5)2; <2) iff ((cid:5)1; <1) (cid:17)D

s ((cid:5)2; <2).

s

s iff (cid:17)W

s implies (cid:17)W

s and (cid:17)B

5 Program Simpli(cid:2)cations
Corollaries 4.9 and 4.8 show that two OLPs which are
strongly order equivalent, differ in rules which are not in-
volved in the preference relation and which are never appli-
cable. Additionally, for D- and W - semantics, strongly order
equivalent logic programs may differ in loop rules, in which
the head is contained in the positive body. These results al-
low us to formalize the following results concerning transfor-
mations on OLPs. In the following, we say that a rule r is
involved in a preference relation < if there exists an r 0 such
that r < r0 or r0 < r holds.
Corollary 5.1 Let ((cid:5); <) be an OLP such that for r 2 (cid:5),
which is not involved in <, for all (cid:5)0 and X 2 AS((cid:5) [ (cid:5)0)
we have r 62 R(cid:5)[(cid:5)0 (X). Then, ((cid:5); <) (cid:17)(cid:27)
s ((cid:5)nfrg; <) holds
for (cid:27) 2 fD; W; Bg.

This corollary expresses that a rule, which is never applicable
and not involved in <, is redundant regarding strong order
equivalence. The next corollary concentrates on loop rules.
Corollary 5.2 Let ((cid:5); <) be an OLP and (cid:27) 2 fD; W g. Fur-
thermore, let r 2 (cid:5) s.t. head (r) 2 body +(r) and r is not
involved in <. Then, ((cid:5); <) (cid:17)(cid:27)

s ((cid:5) n frg; <).

In [Eiter et al., 2004; Osorio et al., 2001] transformations
on logic programs are reported, which can be used for sim-
plifying a program. For those modular transformations a
program must be strongly equivalent to the transformed one.
Considering OLPs, we observe that these transformations in
general do not guarantee strong order equivalence. Transfor-
mation TAUT expresses that for all logic programs (cid:5) and all
r 2 (cid:5) where head (r) 2 body +(r) we have (cid:5) (cid:17)s (cid:5) n frg.
Corollary 5.2 implies that the analogon for OLPs only holds
for the D- and W - semantics as long as r is not involved
in <. Transformation RED(cid:0) expresses that for a logic pro-
gram (cid:5) and for rules r1; r2, where head (r2) 2 body (cid:0)(r1)
and body(r2) = ;, we have (cid:5) (cid:17)s (cid:5) n fr1g. Since r2 is
always a generating rule, regardless which rules we add to
(cid:5), r1 never contributes to an answer set. Hence, RED(cid:0) is
feasible for OLPs unless r1 is involved in <. For r 2 (cid:5),
where body +(r) \ body (cid:0)(r) 6= ; we have that (cid:5) (cid:17)s (cid:5) n frg
(transformation CONTRA). Since such a rule is never ap-
plicable, this result can be carried over to OLPs whenever
this rule is not involved in <. Transformation NONMIN
states that for r1; r2 2 (cid:5), where head (r2) = head (r1) and
body(r2) (cid:18) body(r1), we have that (cid:5) (cid:17)s (cid:5) n fr1g holds.
Since there is no information whether r1 can become appli-
cable or not, this transformation can only be made on OLPs
whenever r1 is not involved in < and never becomes applica-
ble. For example, consider the program:

((cid:5)1; ;) = fr1 : a  ; r2 : b  ; r3 : c   a; r4 : c   a; bg

Here we have that head (r3) = head (r4) and body(r3) (cid:18)
body(r4), hence, (cid:5)1 (cid:17)s (cid:5)1 nfr4g. Since r4 is applicable, the
simpli(cid:2)ed program is not strongly order equivalent. Taking

((cid:5)(cid:3); <(cid:3)) = fr3 : c   a; r5 : y   not c; r3 <(cid:3) r5g

yields fa; b; cg 2 AS (cid:27)(((cid:5)1 [ (cid:5)(cid:3); <(cid:3))) but AS(cid:27)((((cid:5)1 n
fr4g) [ (cid:5)(cid:3); <(cid:3))) = ;, for (cid:27) 2 fD; W; Bg. Thus, ((cid:5)1; ;) 6(cid:17)(cid:27)
s
((cid:5)1 n fr4g; ;). Similar considerations apply for the trans-
formation S-IMP, where for all r; r0 2 (cid:5) such that there
exists an A (cid:18) body (cid:0)(r0) such that head (r) 2 head (r0) [
A; body (cid:0)(r) (cid:18) body (cid:0)(r0) n A and body +(r) (cid:18) body +(r0)
we have (cid:5) (cid:17)s (cid:5) n fr0g. This transformation can only be car-
ried over to OLPs whenever r0 is not involved in < and never
becomes applicable. For example, taking

(cid:5) = fr0 : a   b; not c; r : a  g

and A = fcg yields (cid:5) (cid:17)s frg, where r0 is applicable wrt
s (frg; ;), since for
fa; bg 2 AS((cid:5) [ fb  g). But ((cid:5); ;) 6(cid:17)(cid:27)

((cid:5)(cid:3); <(cid:3)) =(cid:8)r : a  ; ry : y   not a; rb : b  ; r <(cid:3) ry(cid:9)

we get fa; bg 2 AS (cid:27)(((cid:5) [ (cid:5)(cid:3); <(cid:3))) but ; = AS(cid:27)((frg [
(cid:5)(cid:3); <(cid:3))) for (cid:27) 2 fD; W; Bg. Transformation WGPPE states
for a rule r1 2 (cid:5), where a 2 body +(r1), Ga = fr2 2 (cid:5) j

a holds where
head (r2) = ag and Ga 6= ; that (cid:5) (cid:17)s (cid:5) [ G0
a = fhead (r1)   (body +(r1) n fag) [ not body (cid:0)(r1) [
G0
body(r2) j r2 2 Gag. As with the other transformations ob-
tained for strong equivalence, this one is transferable to strong
order equivalence if the rules from Ga become never applica-
ble and are not involved in the preference relation. E.g., for

(cid:5) = fr1 : b   a; r2 : a  g

we have that (cid:5) (cid:17)s (cid:5) [ fb  g holds. By taking

((cid:5)(cid:3); <(cid:3)) = fr1 : b   a; ry : y   not b; ry >(cid:3) r1g

we obtain ((cid:5); ;) 6(cid:17)(cid:27)
s ((cid:5) [ fb  g; ;) since ((cid:5) [ (cid:5)(cid:3); <(cid:3)) has
no <(cid:27)(cid:150) preferred answer set while ((cid:5) [ fb  g [ (cid:5)(cid:3); <(cid:3)) has
<(cid:27)(cid:150) preferred answer set fa; bg, for (cid:27) 2 fD; W; Bg.

6 Conclusions and Future Work
We have presented the notion of strong order equivalence for
ASP with preferences. We have provided an extensive analy-
sis of this novel notion, and studied the relationship between
different preference semantics for it. We have also analyzed
the conditions for certain simpli(cid:2)cation methods to guarantee
strong order equivalence (hence applicability to modules).

We could show in Corollaries 4.8 and 4.9 that two pro-
grams are strongly W - and D-equivalent, if (and only if) the
preference relation is equal, their standard ASP programs are
strongly equivalent, and their (cid:147)non-looping(cid:148) generating rules
are identical for all answer sets of any extension of them.
For B-preference, also the (cid:147)looping(cid:148) generating rules must
be identical in any answer set.

¿From Theorem 4.10 we obtain that exactly the same pairs
of programs are strongly <D- and <W - equivalent, while not
all of them are strongly <B- equivalent. That is, the semanti-
cal differences between D- and W - preference have no longer
any effect when considering strong order equivalence. On
the contrary, for B- semantics the differences to D- and W -
preferences are strengthened under strong order equivalence,
since it decouples preference handling from rule application,
which can not be compensated by suitable extensions.

We have furthermore studied possibilities to simplify or-
dered programs.
In Corollaries 5.1 and 5.2 we have given
abstract conditions for simpli(cid:2)cations, and have assessed un-
der which circumstances simpli(cid:2)cation rules from standard
ASP can be applied on ASP modules with preferences.

The reader may have noted that we did not de(cid:2)ne a no-
tion which would correspond to SE-models in standard ASP
strong equivalence. Indeed there seem to be considerable dif-
(cid:2)culties: SE-models can only express statements on atoms,
and not directly on rules. However, as demonstrated e.g. in
Theorem 4.3, strong order equivalence depends heavily on
the rules involved in the program. We therefore conjecture
that (cid:147)SE-models(cid:148) for D-, W -, and B- preferred answer sets
must include a means for stating relationships among rules,
and leave this topic for future work.

Another way of analyzing strong order equivalence could
be offered by a compilation of the programs, as done e.g. in
the plp-System [Delgrande et al., 2003; plp, 2002]. There,
ordered programs are compiled into logic programs such that
their answer sets directly correspond to the preferred answer

sets of the original ordered program. Since the compilation
is a logic program, one could suppose that two ordered pro-
grams are strongly order equivalent if the compilation of them
possess the same SE-models. However, the compilation in-
troduces additional symbols. Hence, the answer sets of two
compiled programs, which represent the same preferred an-
swer set, are in general incomparable because of these addi-
tional symbols. One would therefore have to consider strong
equivalence under a projection of the answer sets. Further-
more, for an exact notion one would also have to take into
account that compiled programs have a particular, rather than
arbitrary, structure. Such a notion of strong equivalence has
(to the best of our knowledge) not been studied so far. There-
fore, we leave this kind of analysis for future work.

Corollary 4.5 shows that no transformation from an or-
dered program ((cid:5); <) into a logic program (cid:5)0 exists such
that ((cid:5); <) is strongly order equivalent to (cid:5)0. Also, Corollar-
ies 4.8 and 4.9 describe rigorous conditions on ordered pro-
grams being strongly order equivalent under the considered
preference semantics. Hence, further work could be to de(cid:2)ne
and study weaker notions of order equivalence.

References
[Brewka and Eiter, 1999] G. Brewka and T. Eiter. Preferred answer
sets for extended logic programs. Arti(cid:2)cial Intelligence, 109(1-
2):297(cid:150)356, 1999.

[Delgrande et al., 2003] J. Delgrande, T. Schaub, and H. Tom-
pits. A framework for compiling preferences in logic programs.
TPLP, 3(2):129(cid:150)187, 2003.

[Delgrande et al., 2004] J. Delgrande, T. Schaub, H. Tompits, and
K. Wang. A classi(cid:2)cation and survey of preference handling
approaches in nonmonotonic reasoning. Computational Intelli-
gence, 20(2):308(cid:150)334, 2004.

[Eiter et al., 2004] T. Eiter, M. Fink, H. Tompits, and S. Woltran.
Simplifying logic programs under uniform and strong equiva-
lence. In LPNMR’04, pages 87(cid:150)99. Springer, 2004.

[Eiter et al., 2002] T. Eiter, M. Fink, G.Sabbatini, and H. Tompits.
A Generic Approach for Knowledge-Based Information Site Se-
lection. In KR-02, pages 459(cid:150)469. Morgan Kaufmann, 2002.

[Gelfond and Lifschitz, 1988] M. Gelfond and V. Lifschitz. The
stable model semantics for logic programming. In ICLP, pages
1070(cid:150)1080. The MIT Press, 1988.

[Lifschitz et al., 2001] V. Lifschitz, D. Pearce, and A. Valverde.
Strongly Equivalent Logic Programs. ACM TOCL, 2(4):526(cid:150)
541, 2001.

[Osorio et al., 2001] M. Osorio, J.A. Navarro, and J. Arrazola.
Equivalence in answer set programming. In LOPSTR, pages 57(cid:150)
75. Springer, 2001.

[plp, 2002] http://www.cs.uni-potsdam.de/(cid:24)torsten/plp, 2002.
[Schaub and Wang, 2003] T. Schaub and K. Wang. A semantic
framework for preference handling in answer set programming.
TPLP, 3(4-5):569(cid:150)607, 2003.

[Turner, 2003] H. Turner. Strong equivalence made easy: nested ex-
pressions and weight constraints. TPLP, 3(4-5):609(cid:150)622, 2003.
[Wang et al., 2000] K. Wang, L. Zhou, and F. Lin. Alternating Fix-
In CL 2000,

point Theory for Logic Programs with Priority.
pages 164(cid:150)178. Springer.

