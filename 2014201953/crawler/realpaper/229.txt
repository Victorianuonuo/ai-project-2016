First-Order Logical Filtering

Afsaneh Shirazi and Eyal Amir

Computer Science Department, University of Illinois at U-C

Urbana, IL 61801, USA {hajiamin,eyal}@cs.uiuc.edu

Abstract

Logical ﬁltering is the process of updating a belief
state (set of possible world states) after a sequence
of executed actions and perceived observations. In
general, it is intractable in dynamic domains that
include many objects and relationships. Still, po-
tential applications for such domains (e.g., seman-
tic web, autonomous agents, and partial-knowledge
games) encourage research beyond immediate in-
tractability results.
In this paper we present polynomial-time algo-
rithms for ﬁltering belief states that are encoded
as First-Order Logic (FOL) formulae. We sidestep
previous discouraging results, and show that our
algorithms are exact in many cases of interest.
These algorithms accept belief states in full FOL,
which allows natural representation with explicit
references to unidentiﬁed objects, and partially
known relationships. Our algorithms keep the en-
coding compact for important classes of actions,
such as STRIPS actions. These results apply to
most expressive modeling languages, such as par-
tial databases and belief revision in FOL.

Introduction

1
Many everyday scenarios are dynamic and partially observ-
able: a robot in one room cannot see the state of another
room, a camera overlooking a bookshelf cannot detect the
title of a book that is obscured, and one cannot readily ob-
serve the amount of money an agent has. Many applications
in such domains compute information about the current world
state (belief state, i.e., set of possible states or a distribution
over such a set) after actions and observations. This compu-
tation is called ﬁltering (also, state estimation, belief update,
and database progression). They use this information to make
decisions, answer questions, and explore.

Filtering is intractable in general for discrete domains
[Eiter and Gottlob, 1992], and much research is dedicated
to its approximation in stochastic domains (e.g., [Boyen and
Koller, 1998]). Still, these approximations introduce un-
bounded errors many times, take unbounded computation
time in others, and are not usable in most deterministic do-
mains. Recent progress on logical methods for ﬁltering of

propositional belief states (sets of states) [Amir and Russell,
2003] with actions and observations has shown that exact ﬁl-
tering is tractable when belief states are represented as propo-
sitional formulae, and certain natural assumptions are met.
Still, many domains have propositional encodings that are
too large or are not possible (e.g., large numbers of objects,
unknown number of objects, and observations with partial
knowledge about identity of objects).

In this paper we present tractable algorithms and theoret-
ical results for updating belief states that are represented in
First-Order Logic (FOL). These representations permit belief
states of inﬁnite sizes, uncertainty about the number of ob-
jects and their identity, and observations that do not distin-
guish between some objects. It also enables more compact
representations than those of propositional logic.

We show that when actions map states 1:1, then we can
update FOL belief-state formulae efﬁciently (linear time in
the representation size), after prior compilation. We also
show that the representation remains of bounded polyno-
mial size for two classes of actions,
including those for
which actions have simple case preconditions and actions
with STRIPS-like preconditions (non-conditional, and ob-
served success/failure). For those we also present ﬁlter-
ing algorithms that do not require precompilation for ef-
ﬁcient update. This is in surprising contrast to the com-
mon belief that FOL cannot be used efﬁciently for rep-
resenting and updating partial knowledge [Winslett, 1990;
Lin and Reiter, 1997].

On the way to these contributions we form the foundations
and provide a theory for FOL belief update. We relate deter-
ministic Situation Calculus [Reiter, 2001] with a ﬁrst-order
transition model [Blass and Gurevich, 2000]. There, every
belief state is a set of FOL models over the FOL language of
a state. We show that ﬁltering such belief states can be cap-
tured exactly by deduction in FOL, if the result of the ﬁltering
is deﬁnable in FOL (this is the best we can hope for [Lin and
Reiter, 1997]). Also, we show that deduction can be carried
out one time step at a time.

Most work related to ours is limited to the propositional
case (e.g., [Amir and Russell, 2003; Boyen and Koller,
1998]).
Important exceptions are [Cravo et al., 2001;
Dixon and Wobcke, 1993] (First-Order AGM belief revision),
[Winslett, 1990] (belief update and revision in simple sub-
classes of FOL), and [Lin and Reiter, 1997] (progression in

Situation Calculus). The important difference that we draw
with these works is that ours provides efﬁcient inference pro-
cedures, while others focus on the use of general-purpose the-
orem provers, and intractability results.

2 Semantics of First-Order Filtering
In this section, we study logical ﬁltering with ﬁrst-order struc-
tures. A ﬁrst-order language has as nonlogical symbols, the
variables, the function symbols and the predicate symbols. A
0-ary function symbol is called constant. Note that among
the binary predicate symbols must be the equality symbol =.
We deﬁne the terms and formulas by the generalized induc-
tive deﬁnition. Variables and functions are terms. Predicates
are atomic formulas.

A ﬁrst-order language is a language in which the symbols
and formulas are as described above. We now turn to a de-
scription of the semantics of ﬁrst-order languages. A struc-
ture S for a ﬁrst-order language consists of:

1. |S|, the nonempty universe or domain of the structure S.

The elements of |S| are called the individuals of S.

2. For each n-ary predicate symbol p, pS ⊆ |S|n. These
tuples of the universe are those tuples on which p is true.
3. For each n-ary function symbol f, f S : |S|n → |S|. (In
particular, for each constant e, eS is an individual of S)
When a sentence ψ is true in a structure S, we denote it
by |=S ψ. For example, suppose that in structure S, |S| =
{B, R}, for predicate in, inS = {hB, Ri}, for constant CS-R,
CS-RS = {R}, and for constant CS-B, CS-BS = {B}. This
world has a CS room (CS-R), a CS book (CS-B), and a predi-
cate in which indicates whether a book is in a room. By this
deﬁnition, sentence in(CS-B, CS-R) is true in S.

We deﬁne logical ﬁltering using situation calculus. The
one that we use is compatible with the basic action theory
of [Reiter, 2001]. The basic action theory has the form D =
Σ ∪ Dss ∪ Dap ∪ Duna ∪ Ds0 where:

• Σ are the foundational axioms for situations.
• Dss is a set of successor state axioms.
• Dap is a set of action precondition axioms.
• Duna is a set of unique name axioms for actions.
, A(−→x ) = A(−→y ) ⇒ −→x = −→y

A(−→x ) 6= A′(−→y )
where A and A′ are action symbols.

• Ds0 (the initial database) is a ﬁnite set of ﬁrst-order sen-

tences that are uniform in s0

Deﬁnition 2.1 (Uniform Formula). A formula is uniform
in s if s is the only term of sort situation mentioned by that
formula.

We deﬁne precondition axioms and successor state axioms

as a part of basic action theory as follows.
Deﬁnition 2.2 (Action Precondition Axioms). An action
precondition axiom is a sentence of the form:1

P oss(a(x1:n), s) ⇔ preconda(x1:n, s)

where a is an n-ary action symbol, and preconda(x1:n, s) is
a formula that is uniform in s and whose free variables are
among x1, . . . , xn, s.

1x1:n is the abbreviation for x1, . . . , xn

Generally, the values of relations and functions in a dy-
namic world will vary from one situation to the next. Rela-
tions whose truth values vary from situation to situation are
called relational ﬂuents. They are denoted by predicate sym-
bols taking a situation term as their last argument. Same ar-
gument is true about functions.

Deﬁnition 2.3 (Successor State Axioms). Successor state
axioms is deﬁned for either a relational ﬂuent or a functional
ﬂuent. A successor state axiom for an n-ary relational ﬂuent
p is a sentence of the form:

P oss(a(x1:n), s) ⇒ ∀y1, . . . , ∀ym

(p(y1:m, do(a(x1:n), s)) ⇔ succp,a(x1:n, y1:m, s))

where a is an action symbol, and succp,a(x1:n, y1:m, s) is
a formula that is uniform in s and whose free variables are
among x1, . . . , xn, y1, . . . , ym, s. We deﬁne a successor state
axiom for a functional ﬂuent in a similar way.

All changes to the world are the result of named ac-
tions. An action may be parameterized.
For example,
move(b, r1, r2) stands for the action of moving object b from
room r1 to room r2. The intended interpretation is that situa-
tions are ﬁnite sequences of actions, and do(a, s) denotes the
sequence formed by adding action a to the sequences s. In
other words, do(a, s) is the successor situation resulting from
performing the action a. We use situation calculus as foun-
dations and semantics. Later (section 3 onwards) we do not
mention it because we always focus on belief states. How-
ever, it is used in the proofs of theorems and our results are
applicable to it.

Example Consider a book keeper robot who lives in a
world consisting of rooms. When the robot is in a room, it can
make observations about the books in that room. It can move
a book between rooms, it can return a book to the library
from an arbitrary room or it can put a borrowed book in a
room. So possible actions are move(b, r1, r2), return(b, r)
or borrow(b, r). The actions which are executable in a world
state can change the value of different predicates or functions.
Predicates are room(r), book(b) or in(b, r). There are no
functional ﬂuents except constants.

We deﬁne a precondition axiom and a successor state ax-

iom for action move and skip the others.

• Precondition Axiom:

P oss(move(b, r1, r2), s) ⇔ book(b, s) ∧ room(r1, s) ∧
room(r2, s) ∧ in(b, r1, s)

• Successor State Axioms:

P oss(move(b, r1, r2), s) ⇒

∀b′, r′ (in(b′, r′, do(move(b, r1, r2), s)) ⇔

(((b′ = b) ∧ (r′ = r1)) ⇒ f alse

∧((b′ = b) ∧ (r′ = r2)) ⇒ true
∧(¬((b′ = b) ∧ (r′ = r1))

∧¬((b′ = b) ∧ (r′ = r2))) ⇒ in(b′, r′, s)))

The deﬁnition of progression and ﬁltering semantics are as
follows.

Deﬁnition 2.4 (Transition Relation of Structures). For an
action theory D and a structure S, we deﬁne a transition re-

lation RD(S, a, S′) as follows.
RD = {hS, a(u1:n), S′i | |=S preconda(u1:n), |S′| = |S|,
= {hs1:mi ∈ |S|m| |=S succp,a(u1:n, s1:m)},
= {hs1:m, sri ∈ |S|m+1|

pS′
f S′

|=S succf,a(u1:n, s1:m, sr)}}

We use [x/v] as a notion of substitution in which x is a
vector of variables and v is a vector of variables and constants.
[x/v] is a shorthand for [x1/v1, . . .] in which [x1/v1] means
replacing all instances of symbol x1 by symbol v1.
Deﬁnition 2.5 (Logical Filtering Semantics). Let σ be a set
of ﬁrst-order structures. We refer to it as belief state. The
ﬁltering of a sequence of actions (ground or not) and obser-
vations ha1, o1, . . . , at, oti is deﬁned as follows (ǫ refers to
the empty sequence).

1. F ilter[ǫ](σ) = σ;
2. F ilter[a](σ) = {S′ | S ∈ σ, hS, ˆa, S′i ∈ RD,

ˆa = a[x/v]}

3. F ilter[o](σ) = {S ∈ σ | |=S o};
4. F ilter[hai, oi, . . . , at, oti](σ) =

F ilter[hai+1, oi+1, . . . , at, oti]

We call Step 2 progression with a and Step 3 ﬁltering with o.

(F ilter[oi](F ilter[ai](σ))).

3 Filtering of FOL Formulae
In the above deﬁnition, ﬁltering is applied to a set of ﬁrst-
order structures. In this section we use FOL to represent be-
lief states and we update this representation without explicit
reference to the structures in a belief state.

3.1 FOL Theories and Belief States
A belief state formula is a ﬁrst-order theory (possibly inﬁnite)
that represents belief state. A structure is in belief state if and
only if it satisﬁes the belief state formula. The use of a theory
instead of a formula is required because the set of ﬁrst-order
consequences of a ﬁrst-order formula is inﬁnite and may not
be representable by a FOL formula.

For simplicity, we use the same logical connectives that we
have for FOL formulas. The meaning of those connectives on
ﬁrst-order theories is as follows:

If ϕ, ψ are theories of inﬁnite size, then
• ϕ ∧ ψ will mean ϕ ∪ ψ.
• ϕ ∨ ψ will mean {α ∨ β| α ∈ ϕ, β ∈ ψ} (similar to

de-morgan law).

• Whenever applying negation (¬) we will assume that ϕ

is a ﬁnite theory (thus, a logical formula)

• Same for ∃ (can replace ∃ with a new constant symbol)
Thus, in the rest of the paper, whenever we say ”belief state
formula”, we refer to a FOL theory, unless sanctioned other-
wise as above. From now on, we assume that our ﬁrst-order
language has no function symbols except constants.

3.2 Basic Algorithm
In this section, we show how we can progress an initial
database represented by a logical formula after applying a
single action or observation. The result of progression is a
new database that progression algorithm can use afterwards.

We deﬁne a predicate corresponding to each relational ﬂu-
ent whose truth value does not depend on the situation. The
snapshot of system at time t only shows the truth values of
predicates. The truth values of predicates would change while
moving from one situation to the next. We represent predi-
cates with the same symbol as relational ﬂuents but with dif-
ferent arity.

Suppose that P = {g1, . . . , gr} is the set of all con-
stants and predicates. We deﬁne a new set of symbols
i(y1:n) = gi(y1:n)[P/P ′] where
P ′ = {g′
r]. We view P as
[P/P ′] is a shorthand for [g1/g′
the set of predicates in situation s, and P ′ as the set of predi-
cates in situation do(a, s).

r} such that g′

1, ..., gr/g′

1, . . . , g′

We ﬁlter a belief-state formula as follows.

(We reuse
F ilter[·](·) for ﬁltering a belief-state formula.) Let ψ be a
belief state formula, a(u1:n) be a grounded action, Cn(Ψ) be
the set of logical consequences of Ψ (i.e. formulae φ such
that Ψ |= φ), and CnL(Ψ) be the set of logical consequences
of Ψ in the language L. We write CnL(Ψ), when L is a set
of symbols, to mean CnL(L)(Ψ).
1. F ilter[a(u1:n)](ψ) = (CnP ′
^
i
^
i
2. F ilter[o](ψ) = ψ ∧ o

i (y1:m) = z ⇔ succfi,a(u1:n, y1:m, z)))[P ′/P]

i(y1:m) ⇔ succpi,a(u1:n, y1:m)∧

(ψ ∧ preconda(u1:n)∧

∀y1:m∀z, f ′

∀y1:m, p′

(1)

When we ﬁlter with action a we assert implicitly that its pre-
condition held in the last world state. If the action is not exe-
cutable on the belief state, the new belief state would be false
which indicates an empty set. We prove in the following the-
orem that this deﬁnition of ﬁltering approximates the seman-
tics of deﬁnition 2.5.
Theorem 3.1. Let ψ be a belief state formula and a be an
action, then

F ilter[a]({s | |=s ψ}) ⊆ {s′ | |=s′ F ilter[a](ψ)}
PROOF

See section A.1

[Lin and Reiter, 1997] showed that progression is not al-
ways ﬁrst-order deﬁnable. However, they proved that pro-
gression always exists as a set of second order sentences for
ﬁnite initial databases. Therefore, the two sides in theorem
3.1 are not equivalent since formula (1) is in FOL. In other
words, FOL is not strong enough to model the progression of
the initial database. However, the following corollary shows
that the two sides of theorem 3.1 would be equal if the pro-
gression of a database is FOL deﬁnable.
Corollary 3.2. Let ψ be a ﬁrst-order belief state formula.
If FOL can represent the progression of ψ after performing
action a, then

F ilter[a]({s | |=s ψ}) = {s′ | |=s′ F ilter[a](ψ)}
From this point, we

that progression is
ﬁrst-order deﬁnable.
Our basic algorithm computes
F ilter[ha1, o1, ..., at, oti](ψ) by iteratively applying ﬁltering
of a belief-state formula with an action and an observation.
It sets ψ0 = ψ and ψi = F ilter[oi](F ilter[ai](ψi−1))

assume

recursively for i > 0 using the equations deﬁned above. This
algorithm is correct, as shown by corollary 3.2.
It can be
implemented using a ﬁrst-order consequence ﬁnder.

3.3 Sequences of Actions and Observations
This section shows that iterative applications of progression
steps lose no information. Thus, we can throw away the pre-
vious database and start working with the new one after per-
forming each action.

We break our action theory D into two parts, the initial
database Ds0 and the rest Dg. Therefore, D = Dg ∪ Ds0.
Now we deﬁne the language of an action theory as follows.
Deﬁnition 3.3. The language of D, L(D), is a set of ﬁrst-
order formulae whose predicate and function symbols occur
in D.

For instance, if Ds0 = put(A, B) ∧ ∀x box(x), then
put(A, A) and ∀x∃y put(x, y) are in L(Ds0) but box(A, B)
is not.

In progression we assume that a ground action a is per-
formed, and we are looking for a set of sentences Dsa that
can serve as a new initial database (sa denotes the situation
term do(a, s)). Unfortunately [Lin and Reiter, 1997] showed
that Dsa is not always ﬁrst-order deﬁnable.

We deﬁne Fsa as the set of ﬁrst-order sentences uniform
in sa entailed by D. If we use Fsa instead of Dsa, for every
ﬁrst-order sentence ψ about the future of sa, Fsa ∪ Dg |= ψ
iff D |= ψ. The following theorem states this result.

Note that the intersection of all consequences of the action

theory with L(Dg ∪ {sa}) is uniform in sa.
Theorem 3.4. Let D0 be an action theory, and deﬁne
D1, D2, D′

2 as follows.

D1 = Cn(D0 ∪ {s1 = do(a1, s0)}) ∩ L(Dg ∪ {s1})
D2 = Cn(D1 ∪ {s2 = do(a2, s1)}) ∩ L(Dg ∪ {s2})
D′
2 = Cn(D0 ∪ {s1 = do(a1, s0), s2 = do(a2, s1)})

∩L(Dg ∪ {s2})

(a1 and a2 are two actions in D0, not necessarily different.
s0, s1 and s2 do not occur in Dg.) Then , D2 = D′
2.

PROOF

See section A.2

in

our

For

instance
is
Ds0
the ﬁrst
{book(B, s1), room(R, s1), ¬in(B, R, s1)}.

{book(B, s0), room(R, s0), in(B, R, s0)}
action

return(B, R), Ds1 would

example,

keeper

book

is

if
and
be

4 Factored Inference
Several distribution properties hold for logical ﬁltering. We
can decompose the ﬁltering of a formula ϕ along logical con-
nectives ∧, ∨, ¬, ∀, ∃.
Theorem 4.1. Let a be an action, and let ϕ, ψ be ﬁrst-order
formulae. Then,

1. F ilter[a](ϕ ∨ ψ) ≡ F ilter[a](ϕ) ∨ F ilter[a](ψ)
2. |= F ilter[a](ϕ ∧ ψ) ⇒ F ilter[a](ϕ) ∧ F ilter[a](ψ)
3. |= F ilter[a](¬ϕ) ⇐ ¬F ilter[a](ϕ)∧F ilter[a](TRUE)
4. F ilter[a](∃x ϕ(x)) ≡ ∃x F ilter[a](ϕ(L))[L/x]

(L is a fresh constant symbol.)
F ilter[a](ϕ) is ﬁnite.

3, 4 hold only when

We can say something stronger for actions that act as per-

mutations on the structures in which they are executable.
Deﬁnition 4.2 (Permuting Actions). Action a is permuting
(1:1) if for every structure S′ there is at most one S such that
RD(S, a, S′).

Domains that only include permuting actions are called

permutation domains.
Theorem 4.3 (Distribution for Permutation Domains). Let
a be a permuting action, and let ϕ, ψ be formulae. Then,

1. F ilter[a](ϕ ∨ ψ) ≡ F ilter[a](ϕ) ∨ F ilter[a](ψ)
2. F ilter[a](ϕ ∧ ψ) ≡ F ilter[a](ϕ) ∧ F ilter[a](ψ)
3. F ilter[a](¬ϕ) ≡ ¬F ilter[a](ϕ) ∧ F ilter[a](TRUE)
4. F ilter[a](∃x ϕ(x)) ≡ ∃x F ilter[a](ϕ(L))[L/x]
We can decompose every ﬁrst-order formula into a set of
single literals by using distribution properties proved above.
For instance, ∀x (ϕ(x) ∧ ψ(x)) is equivalent to ∀x ϕ(x) ∧
∀x ψ(x) so rule 2 can break it into two parts. Also ∀x ¬ϕ(x)
is equivalent to ¬∃x ϕ(x) so rule 3 and rule 4 can be used,
and ∀x (ϕ(x) ∨ ψ(x)) is equivalent to ¬∃x (¬ϕ(x) ∧ ¬ψ(x))
so rule 3, rule 4, and rule 2 can be used.

In permutation domains, we decompose the formula down
to a set of grounded ﬁrst-order single literals, and for ﬁltering
a single literal we use formula (1).

Our factored ﬁltering (FF) algorithm for permutation do-
mains is presented in Figure 1.
It relies on theorems 3.2,
4.1, and 4.3. The number of different grounded single literals
would be ﬁnite, if the number of objects is ﬁnite. Therefore,
we can calculate ﬁltering of all single literals as a preprocess-
ing step and retrieve it later in ﬁnite domains.

Note that the arguments of these literals are either the con-
stants associated to existential quantiﬁers or the constants
which are mentioned in the initial belief state, the set of ax-
ioms or the observations.

PROCEDURE FF(hai, oii0<i≤t,ψ)
∀i, ai an action, oi an observation, ψ a belief-state formula.

if t = 0, return ψ.

1.
2. return ot∧ FF-Step(at,

precondat ∧ FF(hai, oii0<i≤(t−1),ψ)).

PROCEDURE FF-Step(a,ψ)
a an action. ψ a belief-state formula.

1.

if ψ is a single literal, then return Single-Literal-Filtering(a,
ψ).

2. else, use distribution properties, call FF-Step recursively on

sub-formulas of ψ.

Figure 1: Filtering of a FOL formula when all the actions are
permuting actions.

Theorem 4.4. The algorithm FF is correct, and if the ﬁltering
of all single literals are given, the algorithm FF would run in
time O(|preconda ∧ ψ|), where ψ is a belief state formula.

Our factored ﬁltering algorithm uses consequence ﬁnding
tools. Since it is part of preprocessing, it does not affect the

runtime of the system. In open systems the time is different
since new objects may be added during the operation of the
system. In these systems ﬁltering of new single literals should
be computed while system is running.

5 Filtering Algorithms for Different Domains
Our naive ﬁltering algorithm uses consequence ﬁnding tools
which do not scale to large domains. The following theorem
suggests a different reasoning procedure.
Theorem 5.1. Let a be an action, ψ be a belief state formula,
and Φ(ϕ1:n) be a ﬁrst-order logical formula whose atomic
subformulas are among ϕ1, . . . , ϕn. Then,

F ilter[a](ψ) ≡ {Φ(p1:n)| FOL formula Φ,

ψ ∧ preconda |= Φ(succp1,a, . . . , succpn,a)}

(2)
In this formula, all possible Φs should be considered. In
general, generating all Φs is impossible because there are in-
ﬁnitely many such Φs.
In the following sections, we pro-
vide simpler closed-form solutions for two special cases of
dynamic domains. These give rise to practical(polynomial)
algorithms.

5.1 Unit-Case Successor State Axioms
By deﬁnition of successor state axioms, for every pair of ac-
tions and predicates exactly one successor state axiom is pro-
vided. The successor state axiom for action a and predicate
pi can be rewritten as:
P oss(a(x1:n), s) ⇒ ∀y1, . . . , ∀ym (pi(y1:m, do(a, s)) ⇔

(case1

∧(¬case1

i ) ∧ . . . ∧ (caseli

i ⇒ φ1
i ∧ . . . ∧ ¬caseli

i ⇒ φli
i )
i ) ⇒ φli+1
)

i

where casej
i is of the form (yj1 = xj1) ∧ . . . ∧ (yjk = xjk )
(variable xj1 is an argument of action a and variable yj1 is an
argument of predicate p) and each variable assignment sat-
isﬁes at most one of the cases. A successor state axiom is
called unit-case successor state axiom if it can be rewritten in
a form where every φj

i (1 ≤ j ≤ li + 1) is a unit clause.

We break a unit-case successor state axiom into multiple
instantiated axioms. Instantiated successor state axioms for
predicate pi are:

• P oss(a(x1:n), s) ⇒ (pi(y1:m, do(a, s)) ⇔ φj

i )[yj

i /xj
i ]

for all 1 ≤ j ≤ li

• P oss(a(x1:n), s) ⇒ ∀y1:m (¬case1

i ∧ . . . ∧ ¬caseli

i ) ⇒

i /xj

(pi(y1:m, do(a, s)) ⇔ φli+1)
i ] is the substitution corresponding to casej

[yj
i and xj
i
are sequences of variables). This process is called breaking
into cases. Note that all instantiated successor state axioms
are in the form P oss(a) ⇒ (condi ⇒ (pi ⇔ φi)) where in
some of them condi is true (i is an enumeration of all instan-
tiated successor state axioms of action a).

i (yj

Figure 2 shows the unit-case ﬁltering (UCFilter) algo-
rithm. This algorithm is applicable on permutation do-
mains whose successor state axioms are unit-case. The
algorithm UCFilter is actually a way to compute every
a) in formula (2). In permutation
Φ(subsucc1
domains, the head of entailment in formula (2) is a single lit-
eral (action precondition can be considered as a conjunct to

a, . . . , subsucck

PROCEDURE UCFilter(hai, oii0<i≤t,ψ)
∀i, ai an action, oi an observation, ψ a belief-state formula.

if t = 0, return ψ.

1.
2. ψt−1 = UCFilter(hai, oii0<i≤(t−1),ψ).
3. return ot∧ Filter-True(at) ∧ UCStep(at, precondat ∧ψt−1).

1. poss(a) ⇒ (condi ⇒ (pi ⇔ φi)) an instantiated successor

PROCEDURE Filter-True(a)
a an action.

state axiom (1 ≤ i ≤ k).

2. S = ∅
3. for all 1 ≤ i, j ≤ k,

(a) if φi = true, add casei ⇒ pi to S
(b) elseif φi = f alse, add casei ⇒ ¬pi to S
(c) elseif uniﬁable(φi, φj), add

((condi ∧ condj) ⇒ (pi ⇔ pj))mgu(φi,φj ) to S

(d) elseif uniﬁable(φi, ¬φj ), add

((condi ∧ condj) ⇒ (pi ⇔ ¬pj))mgu(φi,φj ) to S

(e) elseif φi = ∀x q(x), φj = q(t), add
(condi ∧ condj) ⇒ (¬pi ∨ pj) to S
(f) elseif φi = ∃x q(x), φj = q(t), add
(condi ∧ condj) ⇒ (pi ∨ ¬pj) to S

4. return Vϕ∈S ϕ.

PROCEDURE UCStep(a,ψ)
a an action. ψ a belief-state formula.

1.

if ψ is a single literal, then
(a) poss(a) ⇒ (condi ⇒ (pi ⇔ φi)) an instantiated

successor state axiom (1 ≤ i ≤ k).

(b) S = ∅
(c) for all 1 ≤ i ≤ k,

i. if uniﬁable(φi, ψ), add

(casei ⇒ pi)mgu(φi,ψ) to S
ii. elseif uniﬁable(φi, ¬ψ), add
(casei ⇒ ¬pi)mgu(φi,ψ) to S

(d) return Vϕ∈S ϕ.

sub-formulae of ψ.

2. else, use distribution properties, call UCStep recursively on

Figure 2: Unit-Case Filtering.

the belief state formula, and the distribution properties can be
used). Consequently, Φ(subsucc1
a) is either
equivalent to that literal or a tautology. A tautology is at most
of size two when unit-case successor state axioms are used.
Therefore, we can compute all desired Φs in a ﬁnite number
of steps.

a, . . . , subsucck

Theorem 5.2. Let k be the number of successor state axioms
after breaking into cases, and ψ be the belief state formula. If
each predicate has arity at most R, then algorithm UCFilter
returns the ﬁltering of ψ with action a in time O(R · k2 + R ·
k · |ψ ∧ preconda|). The length of new belief state formula is
O(R · k2 + R · k · |ψ ∧ preconda|).

Corollary 5.3. Given a sequence of t actions and observa-
tions, algorithm UCFilter returns the ﬁltering of ψ0 in time
O(t2 · Rt · kt+1 + t · Rt · kt · |ψ0|). The length of belief state
formula after t step is ψt = O(t · Rt · kt+1 + Rt · kt · |ψ0|).
(If the length of all observations and preconditions of actions
are negligible compared to the length of belief state formula)

5.2 STRIPS Domains
In STRIPS domains every action has no conditional effects. It
means that the value of each predicate either changes to true,
changes to false, or remains the same. STRIPS actions are
not necessarily permuting. Consequently STRIPS successor
state axioms can not be treated by algorithm UCFilter even
though they are unit-case. Successor state axioms in STRIPS
domains are of the form:

P oss(a(x1:n), s) ⇒ ∀y1, . . . , ∀ym (pi(y1:m, do(a, s)) ⇔

(case1

∧(¬case1

i ) ∧ . . . ∧ (caseli

i ⇒ φ1
i ∧ . . . ∧ ¬caseli

i ⇒ φli
i )

i ) ⇒ pi(y1:m, s))

where φj

i (j ≤ li) is either true or false.

A STRIPS action affects some of the instantiated predi-
cates and keeps the value of the others. We refer to the set of
affected instantiated predicates as Eff(a).
Eff(a) = {p(−→v )| action a affects every instance of p(−→v )}
where v is a sequence of variables and constant symbols.

The ﬁrst-order STRIPS ﬁltering (FOSF) algorithm is pre-
sented in ﬁgure 3. The belief state formula which is an in-
put to this algorithm should be in the form ∃∗∀∗φ (EAFOL)
(EAFOL is a ﬁrst-order formula in which there is no existen-
tial quantiﬁer inside a universal one). A clause in the clausal
form of φ would be splitted into multiple instantiated clauses
if one of its literals has some instances in Eff(a) and some out
of Eff(a). This step is called splitting into pure literal clauses.
We split every clause p(x) ∨ ϕ in which some instantiations
of p(x) are affected and some are not, into:

{p(v1) ∨ ϕ , . . . , p(vr) ∨ ϕ ,

((x 6= v1 ∧ . . . ∧ x 6= vr) ⇒ p(x)) ∨ ϕ}

where p(v1), . . . , p(vr) are in Eff(a). Note that we treat ((x 6=
v1 ∧ . . . ∧ x 6= vr) ⇒ p(x)) as a single literal.

The new clausal form of φ is divided into two parts, clauses
with no literal in Eff(a) and clauses that have at least one
literal in Eff(a). The ﬁrst part directly goes to the new belief
state formula. The algorithm adds all the consequences of
the second part in which no affected literals exist, to the new
belief state formula. All literals in Eff(a) are also added to
new belief state formula as their values can be determined
unconditionally after applying the action.
Theorem 5.4. Given action a, observation o, and be-
lief state formula ψ in EAFOL, algorithm FOSF returns
the ﬁltering of ψ with a and o in time O(R · |E| ·
min(( |E|
, |Eff(a)|2|E|·R) + |ψ|) where E is the set of
all clauses with any literal in Eff(a) after splitting into pure
literal clauses and each clause has length at most R.
Theorem 5.5. If ψ is in 2-FO-CNF2 then the time complexity
of FOSF after ﬁltering one action is O(|Eff(a)| · |E|2 + |ψ|).
The formula length is O(|Eff(a)| + |E|2 + |ψ|).
Extended Example
Consider our previous book-keeping robot. Suppose that we
have two rooms, a CS room and an ECE room, and two books,

2 )2|Eff(a)|

2A ﬁrst-order formula is in k-FO-CNF if in clausal form the size

of each clause is at most k.

PROCEDURE FOSF(hai, oii0<i≤t,ψ)
∀i, ai an action, oi an observation and ψ a belief state formula. oi
and ψ in EAFOL

if t = 0, return ψ.

1.
2. return Move-Quana(ot∧ FO-STRIPS-Step(at,

Move-Quan(precondat ∧ FOSF(hai, oii0<i≤(t−1),ψ))))

aMoves all the quantiﬁers to the front with fresh variable names

PROCEDURE FO-STRIPS-Step(a,ψ)
a an action, ψ = ∃∗∀∗ Vi ci a belief-state formula.

1.
if ψ = ∃x φ(x), return ∃x FO-STRIPS-Step(a,φ(L))[L/x]
2. elseif ψ = ∀x φ(x), return ∀x FO-STRIPS-Step(a,φ(x))
3. else,

a

(a) ψ′ ← split every clause in ψ into pure literal clauses
(b) E ← all clauses in ψ′ with any literal in Eff(a)
(c) S ← all clauses in ψ′ with no literal in Eff(a)
(d) if E 6= ∅

for all l ∈ Eff(a)

E ← resolve-out(l, E)

(e) φ = Vci∈E∪S ci
(f) Eff+(a) ← literals affected to true
(g) Eff−(a) ← literals affected to false
(h) return φ ∧ Vp(v)∈Eff+(a) p(v) ∧ Vp(v)∈Eff−(a) ¬p(v).

aL is a fresh constant that does not appear in the language

Figure 3: First-Order STRIPS Filtering.

a CS book and an ECE book, and our belief state formula is
in(CS-B, CS-R) ∧ in(ECE-B, ECE-R). ECE department needs
the CS book for a while, so the book keeper moves it to ECE
room. The action is a = move(CS-B, CS-R, ECE-R). (This
example has unit-case successor state axioms.)

First, we add precondition to belief state formula. The
new belief state is in(CS-B, CS-R) ∧ in(ECE-B, ECE-R) ∧
book(CS-B) ∧ room(CS-R) ∧ room(ECE-R). We calculate the
ﬁltering of all the single literals of the belief state formula
separately and compute the result by using distribution prop-
erties. What follows is the formula for one of these literals
based on the algorithm presented before.

F ilter[move(CS-B, CS-R, ECE-R)](in(ECE-B, ECE-R)) ≡

in(CS-B, ECE-R) ∧ ¬in(CS-B, CS-R) ∧ in(ECE-B, ECE-R)

Now suppose that instead of applying an action we ﬁlter the
belief state based on an observation. The robot enters the CS
room and observes that there is only one book in the room.
The perfect ﬁltering algorithm guarantees that in such cases
the book is the same book that the robot has put in the room
before.

Assume that the belief state formula is in(CS-B, CS-R) ∧
in(ECE-B, ECE-R). The observation is ∀x in(x, CS-R) ⇒ x =
TheBook. F ilter[o](ψ) |= TheBook = CS-B, so we can replace
every instance of TheBook in the new belief state formula by
CS-B.

6 Conclusions
In this paper we presented semantics and methodology for ﬁl-
tering in domains that include many objects whose identity is
not certain. We generalized this problem to ﬁltering with FOL

formulae. We showed that this problem is solvable in poly-
nomial time when actions map states 1:1, or the actions are
STRIPS. We showed that 1:1 actions allow us to ﬁlter ﬁrst-
order belief state formulae in linear time (in the size of rep-
resentation), if we can perform a precompilation step. When
actions are STRIPS or Unit-Case, we can ﬁlter these belief
state formulae efﬁciently without precompilation.
In some
cases, we showed that the belief state formulae is guaranteed
to remain compactly represented. Those cases permit ﬁltering
of actions and observations indeﬁnitely in polynomial time
(in the number of predicates and objects). As a result, we can
use our algorithm for many interesting applications, such as
semantic web, autonomous agents, robot motion control, and
partial knowledge games.

7 Acknowledgements
We wish to thank Megan Nance for useful discussions on
related topics. We also wish to acknowledge support from
DAF Air Force Research Laboratory Award FA8750-04-2-
0222 (DARPA REAL program).

References
[Amir and Russell, 2003] Eyal Amir and Stuart Russell. Logical

ﬁltering. In IJCAI ’03, pages 75–82. MK, 2003.

[Blass and Gurevich, 2000] A. Blass and Y. Gurevich. Background,
Reserve, and Gandy Machines.
In P. Clote and H. Schwicht-
enberg, editors, Computer Science Logic (Proceedings of CSL
2000), volume 1862 of LNCS, pages 1–17. Springer, 2000.

[Boyen and Koller, 1998] Xavier Boyen and Daphne Koller.
In Proc.

Tractable inference for complex stochastic processes.
UAI ’98, pages 33–42. MK, 1998.

[Cravo et al., 2001] Maria R. Cravo, Jo˜ao P. Cachopo, Ana C. Ca-
chopo, and Jo˜ao P. Martins. Permissive belief revision. In EPIA,
pages 335–348, 2001.

[Dixon and Wobcke, 1993] Simon Dixon and Wayne Wobcke. The
implementation of a ﬁrst-order logic agm belief revision system.
In ICTAI, pages 40–47, 1993.

[Eiter and Gottlob, 1992] T. Eiter and G. Gottlob. On the complex-
ity of propositional knowledge base revision, updates, and coun-
terfactuals. AIJ, 57(2-3):227–270, 1992.

[Lin and Reiter, 1997] Fangzhen Lin and Ray Reiter. How to

Progress a Database. AIJ, 92(1-2):131–167, 1997.

[Reiter, 2001] Raymod Reiter. Knowledge In Action: Logical Foun-
dations for Describing and Implementing Dynamical Systems.
MIT Press, 2001.

[Winslett, 1990] Mary-Anne Winslett.
Databases. Cambridge U. Press, 1990.

Updating Logical

A Proofs
A.1 Proof of Theorem 3.1: Filtering Algorithm
PROOF
|=s ψ}). We need
to show that |= ˆS F ilter[a](ψ). From Deﬁnition 2.5 there
|=s ψ} and hS, ˆa, ˆSi ∈
should be S such that S ∈ {s |
RD. In other words, there should be S such that |=S ψ and
hS, ˆa, ˆSi ∈ RD.

Take ˆS ∈ F ilter[a]({s |

It

|= ˆS

To prove

F ilter[a](ψ) we need to show
that ψ ∧ preconda(u1:n) ∧ Vi ∀y1:m, p′
i(y1:m) ⇔
succpi,a(u1:n, y1:m) ∧ Vi ∀y1:m∀z, f ′
i (y1:m) = z ⇔
succfi,a(u1:n, y1:m, z) with ˆS as structure for P ′ and
S as structure for P.
In other words the truth as-
signment ˆS to all predicates in some situation satis-
ﬁes this formula together with the truth assignment S
to all predicates in following situation.
is not sat-
isfying this formula only if one of
the conjuncts ψ,
preconda(u1:n), ∀y1:m, p′
i(y1:m) ⇔ succpi,a(u1:n, y1:m), or
i (y1:m) = z ⇔ succfi,a(u1:n, y1:m, z)is falsiﬁed.
∀y1:m∀z, f ′
This in not the case for ﬁrst two by our choice of S.

Assume by contradiction that this is the case for some
i. Then, the truth assignments sanction that p′
i(y1:m) ⇔
succpi,a(u1:n, y1:m) does not hold. From the way we deﬁned
R this is never the case. This contradicts our assumption.
The same argument is true for functions. Thus, we get that
|= ˆS F ilter[a](ψ).
A.2 Proof of Theorem 3.4: Progression Possibility
PROOF We show that the two sets of world structures have
the same elements. We ﬁrst show that the left-hand side of the
equality is contained in the right-hand side.

Take φ ∈ D2. We show that φ should be in D′

plug the deﬁnition of D1 in the deﬁnition of D2.

2. We can

D2 = Cn(Cn(D0 ∪ {s1 = do(a1, s0)}) ∩ L(Dg ∪ {s1}))

∩L(Dg ∪ {s2})

⊆ Cn(Cn(D0 ∪ {s1 = do(a1, s0)})) ∩ L(Dg ∪ {s2})
= Cn(D0 ∪ {s1 = do(a1, s0)}) ∩ L(Dg ∪ {s2})

In other words, D2 ⊆ D′
2.

For the opposite direction (showing the right-hand side is
2. We

contained in the left-hand side), suppose that φ ∈ D′
show that φ ∈? D2.

From the deﬁnition of D′

2 iff D0 ∪
{s1 = do(a1, s0), s2 = do(a2, s1)} |= φ. So, with the same
explanation, we show that D1 ∪ {s2 = do(a2, s1)} |=? φ.

2, we know that φ ∈ D′

φ ∈ D′
2
D0 ∪ {s1 = do(a1, s0), s2 = do(a2, s1)} |= φ
D0 ∪ {s1 = do(a1, s0)} |= (s2 = do(a2, s1)) ⇒ φ

On the other hand we know that,

L(D0 ∪ {s1 = do(a1, s0)}) = L(D0 ∪ {s0, s1)})
⊆ L(Dg ∪ {s0, s1)})
2 ∪ {s1, s2})
⊆ L(Dg ∪ {s1, s2)})

L(s2 = do(a2, s1) ⇒ φ) = L(D′

As we know, there is no si in Dg so we can compute the

intersection of the two side of equation.

L(D0 ∪ {s1 = do(a1, s0)}) ∩ L(s2 = do(a2, s1) ⇒ φ)

⊆ L(Dg ∪ {s1})
Now, by applying Craig’s interpolation theorem for FOL,
we get that there should exist a γ ∈ L(Dg ∪ {s1}) such that
D0 ∪ {s1 = do(a1, s0)} |= γ and γ |= (s2 = do(a2, s1)) ⇒
φ. From γ ∈ L(Dg ∪ s1) and D0 ∪ {s1 = do(a1, s0)} |= γ
we can conclude that γ ∈ D1. So,

D1
D1 ∪ (s2 = do(a2, s1))

|= (s2 = do(a2, s1)) ⇒ φ
|= φ
and the opposite direction is done.

