Handling Alternative Activities in

Resource-Constrained Project Scheduling Problems

J ¨urgen Kuster, Dietmar Jannach and Gerhard Friedrich

University of Klagenfurt, Austria

Department of Business Informatics and Application Systems

{jkuster, dietmar, gerhard}@iﬁt.uni-klu.ac.at

Abstract

In the context of operative disruption management,
decision support systems have to evaluate the typ-
ically manifold options of responding to distur-
bances: The temporal shift of activities and the al-
location of alternative resources can be assessed by
the application of generic scheduling frameworks
such as the Resource-Constrained Project Schedul-
ing Problem (RCPSP). However, switches from one
process variant to another one are usually not sup-
ported by the corresponding models, even though
they represent a common way of repairing broken
schedules in many practical domains. In this paper,
we thus show how the RCPSP can be extended by
the concept of alternative activities, making it pos-
sible to model and search within alternative process
execution paths. Beside a formal description of
the conceptual extension, we show how such gen-
eralized rescheduling problems can be solved by a
novel genetic algorithm and summarize the promis-
ing results of a detailed evaluation.

1 Introduction
Disruption management (DM, see [Yu and Qi, 2004; Clausen
et al., 2001]) is the process of responding to an unforeseen
disturbance occurring during the execution of planned and
scheduled operations. It is aimed at the selection of appro-
priate repair actions which help to get back on track and to
minimize the negative impact typically associated with a dis-
ruption. Two forms of interventions can be distinguished:

• Rescheduling corresponds to a shift of scheduled starting
times or a change in the allocation of resource entities to
activities. It is particularly relevant in domains where
the set of operations is ﬁxed and no process variability
is given: Production processes form a typical example.
• A process variation corresponds to the switch from a
previously chosen process variant to another one. This
form of modiﬁcation is applied in many practical do-
mains to insert or remove activities, to change execution
orders, etc.: For example project scheduling and supply-
chain management are typically characterized by the ex-
istence of various predeﬁned process variants.

The Resource-Constrained Project Scheduling Problem
(RCPSP, see [Błazewicz et al., 1983; Brucker et al., 1999])
provides a generic and well-established framework for the
formal description of scheduling problems: Generalizing the
production-speciﬁc job shop, ﬂow shop and open shop prob-
lems, it imposes no restrictions on either the number of enti-
ties per resource type, the way activities are connected or the
characteristics of resource requirements. Moreover, the ex-
istence of various highly efﬁcient algorithms for its solution
(see [Kolisch and Hartmann, 2005]) proves that the RCPSP
has been and still is an area of intensive research.

The rescheduling part of DM problems can be solved
within the framework provided by the RCPSP. As regards po-
tential process variations, however, there exist no possibilities
to describe alternative execution paths within the RCPSP: It
is thus impossible to overcome a previously made decision on
a certain process variant during optimization. To the best of
our knowledge, the only approach to more ﬂexibility has been
made in the Multi-Mode RCPSP (MRCPSP, see [Hartmann,
2001] for example): Through the deﬁnition of various execu-
tion modes per activity, it is possible to consider changes in
their durations and associated resource requirements. But it is
obvious that the concept of mode alternations is not sufﬁcient
for the description of the entire range of potential variations.
Research on DM in the context of the RCPSP has mainly
focused on responding to disruptions by way of rescheduling:
Artigues et al. [2003] propose an approach to insert an unex-
pected activity into a given schedule; Elkhyari et al. [2004]
use explanations to cope with over-constrained networks in
dynamic scheduling problems; Zhu et al. [2005] present a hy-
brid mixed integer programming/constraint propagation ap-
proach to handling various classes of disruptions.
In con-
trast to these works, which all focus on mere rescheduling,
we herein extend the scope of available options by making
switches between different process variants possible.

For this purpose, we propose to extend the RCPSP by the
concept of alternative activities: In Section 2, the formal de-
scription of the conceptual extension and a modeling example
from the domain of air trafﬁc management are provided. In
Section 3, we propose a novel genetic algorithm (GA) for the
solution of the problem: The speciﬁc crossover and mutation
operators are discussed as well as the promising results of a
detailed evaluation. Finally, Section 4 summarizes the contri-
butions of this paper.

IJCAI-07

1960

2 A Conceptual Extension of the RCPSP

2.1 Alternative Activities

We base our approach to deﬁning alternative execution paths
on the concept of alternative activities and activity dependen-
cies. The expressive power of these constructs is illustrated
by several modeling examples of typical process variations:
• A mode alternation corresponds to a change of the du-
ration and the resource requirements associated with an
activity. Basically, each execution mode can be repre-
sented by a separate alternative activity. If, for example,
in a sequence a, b and c three modes of b shall be dis-
tinguished, the alternative activities b1, b2 and b3 can be
considered instead of b.

• For the dynamic insertion/removal of activities, the pos-
sibility to describe activity dependencies is required: An
activity i is considered dependent on another activity j,
if j has to be executed whenever i is scheduled. If, for
example, it shall be possible to dynamically insert an ac-
tivity e into a sequence a, b and c, it is sufﬁcient to con-
sider two alternatives of an arbitrary scheduled operation
(activity b, for example): One variant (b1) is dependent
on the execution of e whereas the other one (b2) is not.
• A potential order change can be described by alternative
versions of all involved process steps: One variant repre-
sents the original, the other one the optional position of
the activity. If, for example, it shall be possible to swap
b and d in a sequence a, b, c and d, b1 and d1 correspond
to the original, b2 and d2 to the alternative positions.

• The serialization/parallelization of operations is based
on two alternative activities with different precedence
relations associated: One variant is a predecessor of an-
other activity whereas the other one is not. If, for ex-
ample, it shall be possible to parallelize b and c in a se-
quence a, b, c and d, it sufﬁces to consider two versions
of b: b1 is a predecessor of c and represents the option of
serial execution, whereas b2 is not necessarily scheduled
before c and represents the option of parallel execution.

By applying the concept of alternative activities, both parts
of the DM problem – the selection and scheduling of oper-
ations – are combined in one single conceptual model. This
implies that (1) no detached process deﬁnitions need to be
synchronized and that (2) particularly efﬁcient algorithms can
be applied for problem solving [Bart´ak, 1999].

2.2 The Extended Resource-Constrained Project

Scheduling Problem

As regards the consideration of alternative activities in
scheduling problems, little research has been done so far. One
of the most important approaches can be found in the area
of constraint-directed scheduling: Beck and Fox [2000] base
their work on the introduction of XOR-nodes as well as PEX
(Probability of Existence) variables into the constraint graph,
and propose speciﬁc, PEX-based propagators and heuristics
for solving such extended problems.

In contrast to their work, which aims at extending the
scope of constraint-directed scheduling approaches, our goal

is to incorporate the concept of alternative activities into the
framework of the RCPSP. Consequently, we propose a com-
pact and intuitive way of modeling process execution variants
which is independent from the underlying search procedure:
In the Extended Resource-Constrained Project Scheduling
Problem (x-RCPSP), the concept of alternative activities is
implemented through the distinction between active and in-
active activities: Only the former ones are actually consid-
ered in the resulting schedule. By activating and deactivating
activities it is possible to change the activation state of the
model. Note that each potential combination of active ele-
ments forms an individual instance of the classical RCPSP: It
is thus possible to apply well-established methods for activity
sequence optimization.

Formally, the x-RCPSP can be described as follows. A

process is composed of a set of potential activities A
0, 1, ..., a, a
1 where the ﬁrst and the last element repre-
sent abstract start and end activities: They have a duration of
0 and do not require any resources. Each remaining i A
has a non-negative duration di assigned. Active activities are
grouped in a subset A A , inactive activities are contained
in the set difference A A. For the execution of activities, a
set of renewable resource types R 1, ..., r
is available:
For each type k R, there exists a constant amount of ck
units. Various forms of activity dependency can be described
by use of the following constructs:

• Precedence Constraints. The order of activities is de-
scribed by use of precedence constraints: The existence
A has to be ﬁnished
of pi,j states that activity i
at or before the start of j
In accordance with
the distinction between active and inactive activities,
P contains all potentially relevant constraints whereas
A groups only relations in
P
which predecessor and successor are currently active.

A .

pi,j

P

i, j

• Resource Requirements. Resource requirements de-
scribe the relation between activities and resources. Ac-
tivity i A requires a constant amount of qi,k units of
resource type k R throughout its execution. Again,
two sets are distinguished: Q contains all potentially
relevant dependencies whereas Q qi,k Q
i A
groups only the requirements of active activities.

Potential activation state modiﬁcations and associated de-
pendencies are described by use of the following constructs:
• Activity Substitutions. If xi,j is contained within the set
of potential activity substitutions X , it represents a le-
gal form of process variation to activate j A A for
the deactivation of i A: j replaces i within A.

• Activity Dependencies/Constraints. Since the activation
or deactivation of an activity might have an impact on
the state of other activities, M describes dependen-
cies between the elements of A : mi,j (mi,j ) M
A has to be (de)activated
indicates that activity j
upon the (de)activation of i A ; mi,j M indicates
that j has to be deactivated upon the activation of i, and
mi,j M indicates that j has to be activated upon the
deactivation of i. Note that these constraints have to be
deﬁned carefully in order to avoid inconsistencies.

IJCAI-07

1961

The presented x-RCPSP is a generalization of

the
MRCPSP, which itself generalizes the classical RCPSP
[Hartmann, 2001]: Any MRCPSP can be formulated as an
x-RCPSP. As regards the formulation of an x-RCPSP as an
MRCPSP, the limitations of MRCPSPs must be observed.
Such a formulation which preserves the activities, precedence
constraints and resource constraints of the x-RCPSP is possi-
ble if the following properties hold:

xi,j X xj,i X
xi,j, xj,k X xi,k X
xi,j X , pi,k P pj,k P
xi,j X , pk,i P pk,j P

M

(1)
(2)

(3)

(4)

(1) It is not possible to describe one-directional mode sub-
stitutions in the MRCPSP. (2) Any activity execution mode
has always to be a direct substitute of all other ones. (3) Ac-
tivity replacements are only possible at exactly the same po-
sition: No changes of the activity execution order can thus
be deﬁned.
(4) No activity dependencies can be described
for different execution modes: It is therefore not possible to
dynamically insert or remove activities.

The result of solving the x-RCPSP is a combination of
model activation state and sequence of all active activities:
A schedule S is represented as a vector of starting times
β1, β2, ..., βn for the set of active activities A with A
S is considered valid if the following criteria are fulﬁlled:

• Activation State Validity. The activation state A associ-
ated with a schedule S is valid, if and only if it can be
derived from an original valid activation state through
the application of the substitutions deﬁned in X , satis-
fying all constraints deﬁned in M .

n.

• Starting Times Validity. Let A t be the set of activities
carried out at a time t. The staring times β1, ..., βn are
valid if (1) βi 0 for any i A, (2) βi
i A t qi,k ck for any k R
any pi,j
at any t. Note that these criteria correspond to the ones
deﬁning schedule validity in the context of the RCPSP.

P and (3)

di βj for

2.3 Modeling an Exemplary Process
In this section it is illustrated how the framework of the
x-RCPSP can be applied for the formal description of realistic
processes. For this purpose, the aircraft turnaround – as the
process aircrafts typically go through at an airport between
touchdown and takeoff – is considered in a simpliﬁed ver-
sion (corresponding to the combination of core processes as
deﬁned by [Carr, 2004]): After the plane reaches its ﬁnal po-
sition, incoming passengers leave the aircraft (deboarding).
It is then prepared for the next ﬂight during fueling, cleaning
and catering, which may be executed simultaneously. Outgo-
ing passengers enter the aircraft (boarding) before the plane
ﬁnally leaves its position heading for the runway.

Apart from inherent options of rescheduling, three forms
of variations are assumed to be available for the adaptation of
the process in response to disruptions: First, deboarding can
be accelerated through the assignment of additional buses.
Second, cleaning can be shortened if in exchange the cabin

Table 1: x-RCPSP Description of the Aircraft Turnaround

Set Content
R Bus, F irebrigade
B
A Start, Deb, Deb

, F ue, F ue

P

, Cat, Cle, Cle

R

,

P

P

B

F ue
R

Ins, Boa, End
Start Deb, Start Deb
Deb
Deb Cle
Deb
F ue Boa, F ue
Boa, Cle

, Deb
Cat, Deb

F ue, Deb
Cle, Deb

F ue
Cle
End, Cat Boa, Cle
Ins, Ins Boa, Boa End

, Deb F ue,
Cle,
P
,
,

Cat, Deb
B

, Deb
B

B

B

B

R

R

P

Q Deb (cid:2) 1 Bus, Deb

B

F irebrigade

X Deb Deb
M Cle

R

, F ue F ue
Ins

R

Ins, Cle

B

P

P

(cid:2) 1

(cid:2) 2 Bus, F ue

, Cle Cle

R

is inspected by the cabin crew prior to boarding. And third,
the process can be accelerated by parallelizing fueling and
boarding if the ﬁre brigade is present for supervision.

j for xi,j

xj,i, (5) i

j for mi,j ,

Table 1 summarizes the central elements of the correspond-
ing x-RCPSP (particularly activity durations and resource ca-
pacities are omitted) based on a simpliﬁed form of notation:
(1) i j stands for pi,j , (2) i(cid:2)n k for qi,k n, (3) i j
for xi,j , (4) i
etc. Process steps are represented by the ﬁrst three letters
of the associated activity names. Potential process variations
are expressed by use of alternative activities. The ﬁrst of the
available options corresponds to a mode alternation (as also
is characterized by reduced
possible in an MRCPSP): Deb
time and additional resource requirements. The second op-
tion corresponds to a combination of mode alternation and
takes less time but is connected to
activity insertion: Cle
the optional activity Ins (for cabin inspection). The third op-
tion corresponds to the parallelization of two process steps:
is not necessarily executed prior to boarding but has
F ue
additional resource requirements associated.

B

R

P

3 Solving the x-RCPSP

The application of the x-RCPSP to DM is based on a compre-
hensive model describing the baseline schedule and all valid
process variants. The following steps are performed upon the
occurrence of a disruption: (1) The schedule is updated ac-
cordingly. (2) Based on a schedule evaluation function f S
and the corresponding objective (minimization or maximiza-
tion), optimization is performed. Unlike in scheduling prob-
lems, where mainly the minimization of the total process ex-
ecution time (the so-called makespan) is of interest, common
goals in DM are the minimization of costs for earliness, tardi-
ness, interventions and the deviation from the original sched-
ule: Typically, several of these aspects are combined. (3) Fi-
nally, the difference between the original and the optimized
schedule is interpreted as the set of interventions to apply.

Due to the central relevance of the second step, we will fo-
cus on the optimization of the x-RCPSP in this section. As
regards the choice of an approach to the identiﬁcation of the
optimal combination of activation state and activity starting

IJCAI-07

1962

times, the mentioned practical relevance of proximity to the
original schedule suggests the use of incremental local search
algorithms. Since, moreover, performance usually represents
a crucial factor in the operative process of DM and since
particularly genetic algorithms perform well for the RCPSP
[Kolisch and Hartmann, 2005] we herein present and evaluate
an evolutionary algorithm for the solution of the x-RCPSP.

3.1 An Evolutionary Algorithm

Representation
Due to the complexity associated with the direct modiﬁcation
of time values, it is a common approach to use some sort of
abstract solution representation during optimization [Kolisch
and Hartmann, 2005; Hindi et al., 2002]. We decided on the
use of activity lists: λ is a precedence feasible list of all el-
ements in A, describing the order in which active activities
shall be added to the schedule. In the associated serial sched-
ule generation scheme, each operation is scheduled at the ear-
liest possible time: This way, each valid λ can be converted
into a valid schedule unambiguously.

Initialization
The original schedule can be converted into a corresponding
activity list easily: λ0 is obtained by simply sorting all active
activities by their scheduled starting times. It represents the
legal option of performing no intervention at all and is there-
fore considered the ﬁrst element of the ﬁrst generation. All
other solutions of the initial population are generated by the
application of the mutation operator (see below) on λ0.

Crossover
If the elements contained in two parent activity lists λa and
λb are equal, one of the well-elaborated RCPSP-speciﬁc
crossover operators can be applied (see [Hartmann, 1998;
Hindi et al., 2002] for examples or [Kolisch and Hartmann,
2005] for a comprehensive overview). If, however, the con-
tents of λa and λb differ, list combination is more difﬁcult:
Algorithm 1 summarizes a crossover operator, which is based
on the idea that λa steers the selection of elements contained
in the child whereas λb determines the respective order, and
which guarantees that only valid activity lists are generated.

apply RCPSP-speciﬁc crossover operator

xj,i

Xb Xa

then return incompatible

Xa(cid:2)Xb

xi,j X

T Xa Xb
T
if
λ λb
do

Algorithm 1 Crossover (λa, λb)
1: if Aa Ab then
2:
3: else
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14: end if
15: return λ

T then
replace i with j in λ
changed true

changed f alse
if i

while changed

λ, xi,j

end if

rearrange λ by applying RCPSP-speciﬁc mutation

Algorithm 2 Mutate (λ)

1: if a randomly generated value
2:
3: else
4:
5:
6: end if
7: return λ

select an arbitrary xi,j X
replace i with j in λ

0, 1 θ then

i

λ

Denoting the set of activities in λi as Ai A , it is ﬁrst

checked whether an RCPSP-speciﬁc operator can be applied
(line 1). If this is not possible due to Aa Ab, a transition
set T X is initialized for coping with different list con-
tents: T describes which substitutions have to be applied for
the conversion of λb to λa. Let Xi X be the set of sub-
stitutions that has led from an original set A0 to Ai: T can
then be deﬁned as the combination of all substitutions exclu-
sive to λa and the inversion of all substitutions exclusive to
λb (line 4). Since, however, substitutions are not necessar-
ily directly reversible, it might be the case that λb can not
be (directly) transformed into λa: If the size of T is unequal
to the size of the symmetric difference Xa(cid:2)Xb, the activity
lists are considered incompatible for crossover and a different
selection of parent lists has to be made (line 5). Otherwise,
the child activity list λ is initialized as a clone of λb before a
repetitive replacement procedure is started (line 7 to 13): As
long as λ contains replaceable elements in terms of T , the re-
spective substitutions are applied: Note that dependencies in
M have to be observed and that precedence feasibility has
to be secured by shifting successors to the right-hand side of
their predecessors. If the application of the substitutions in T
results in an inconsistency (i.e. activities have to be activated
and deactivated at the same time due to contradicting depen-
dencies in M ), the replacement operator (called in line 10)
fails: λa and λb are considered incompatible for crossover
and different parent activity lists have to be selected.

R

P

B

, Cat, Cle

If, for example, λa Deb

, F ue, Cle, Cat, Boa and
for the process
R
F ue can be deduced from Xa Deb Deb
.

λb Deb
modeled above, the transition set T
F ue
and Xb Deb Deb
Crossover thus results in λ Deb

, Cat, Cle, F ue, Boa .

, F ue F ue
B

, Ins, Boa, F ue

, Cle Cle

Cle,

Cle

P

B

R

P

B

B

Mutation
An x-RCPSP-speciﬁc version of the mutation operator is de-
scribed in Algorithm 2: Apart from changes in the order of
activities, also potential process variations are considered.

With a certain probability θ, the activation state is left un-
modiﬁed and any RCPSP-speciﬁc mutation operator can be
applied for the random modiﬁcation of λ (see the references
mentioned above for crossover). Otherwise, an arbitrary re-
placement is selected for an element contained in the activity
list: As regards its application, again all associated dependen-
cies and precedence constraints have to be observed.

Fitness and Selection
The quality of an activity list is evaluated by converting it
into the corresponding schedule and analyzing the associated
costs by use of the predeﬁned schedule evaluation function.

IJCAI-07

1963

Table 2: Portion of the identiﬁed optimization potential that could be tapped by the genetic algorithm within limited time

Limit

Process Complexity

Resource Complexity

Left-Shifts

Small

Large

5 sec
15 sec
5 sec
15 sec
45 sec

low

high

low

99.15% 100.00% 100.00%
99.63% 100.00% 100.00%
82.38%
55.63%
70.99%
89.21%
92.58%
81.80%

65.01%
76.48%
85.65%

high

99.15%
99.63%
38.27%
58.26%
74.87%

yes

no

Baseline Schedule
wide
tight

Overall

99.37% 99.78% 99.56% 99.59% 99.58%
99.69% 99.93% 99.81% 99.81% 99.81%
53.27% 67.38% 60.06% 60.58% 60.32%
67.16% 80.31% 74.64% 72.83% 73.74%
77.99% 89.46% 84.01% 83.43% 83.72%

This way, activity lists are made comparable. In each step
of evolution, a new generation is derived from the previous
one by combining the best individuals (the survivors) with
new ones (their children) generated through the application
of crossover and mutation to the ﬁttest activity lists. In order
to avoid the convergence to a local optimum, we randomly
replace individual members of the generated population with
the initial activity list λ0: The probability for such replace-
ments is decreasing with the continuing progress of evolution.
Due to the signiﬁcant role of randomness in the selection and
mutation of solutions, it is made sure that the exact optimum
is identiﬁed by the GA at least within an inﬁnite time horizon.

3.2 Computational Experiments

The above algorithm has been implemented in a Java-based
rescheduling engine: The realization of the RCPSP-speciﬁc
operators is based on the GA proposed by Hartmann [1998].
As there are currently neither instances of nor testset genera-
tors for reactive scheduling problems available [Policella and
Rasconi, 2005], a framework for the parameterized genera-
tion of DM problems has also been developed: Normalized
versions of network complexity, resource factor and resource
strength (as proposed by Kolisch et al. [1995]) as well as pa-
rameters describing the characteristics of baseline schedules
and disruptions can be used to deﬁne the problem structure.

The generated instances consist of a baseline schedule and
a disruption occurring during its execution. Based on the pos-
A , the
sibility to assign a due date δi to an activity i
goal of optimization is to minimize the sum of the overall
δi and the number
process tardiness
of schedule modiﬁcations: Each modiﬁcation is assumed to
cause three times the costs of one time unit of tardiness.

i A max 0, βi

di

As regards complexity aspects, the following conﬁgura-
tions have been used to generate 16 different problem classes:
• Low/High Process Complexity. Based on this parameter
it can be speciﬁed whether the scheduled activities are
linked by few or by many precedence constraints.

• Low/High Resource Complexity. The aspects of resource
requirements and resource availability are combined in
this parameter: Low resource complexity corresponds to
the existence of few requirements and the availability of
many resource entities, high complexity to the opposite.
• With/Without Left-Shifts. If an activity is scheduled to
start earlier than it did in the original schedule, this is
considered a left-shift. Whether such modiﬁcations are
valid or not can be deﬁned by the assignment of appro-
priate lower bounds to the activity starting times.

• Tight/Wide Baseline Schedule. The distribution of start-
ing times and the amount of incorporated slack time are
combined in this parameter: In a tight (wide) schedule,
activities (do not) start at the earliest possible point and
many (only few) processes are executed simultaneously.

Small and large problem instances were distinguished: The
former consist of one process containing 10, the latter of one
process containing 100 activities. For each problem class, 10
instances of both sizes were generated by random; on aver-
age, one out of ten activities had one of the execution alter-
natives mentioned in Section 2.1 associated. In each case, a
disruption was injected immediately at the start of execution
by doubling the durations of half the activities.

As there is currently no benchmark data available for DM
problems, it was not possible to compare the proposed GA to
existing approaches. Instead, the fast convergence of sched-
ule quality towards the optimal or at least a good solution is
illustrated. Table 2 summarizes how much of the identiﬁed
optimization potential could be tapped within limited time1.
For each of the small instances, ﬁrst the exact optimum was
identiﬁed based on a deterministic procedure: The difference
between the costs associated with the disrupted schedule SΔ
and the optimal schedule S deﬁnes the optimization poten-
tial. For the evaluation of the GA, 10 runs were conducted
for each of the generated cases and each of the regarded time
limits: Let S denote the schedule resulting from such limited
optimization. The ﬁgures listed in Table 2 thus correspond to

f SΔ f S
f SΔ f S : Basically, they reveal that
the average value of
in almost any case the optimum could be identiﬁed already
within the ﬁrst 5 or 15 seconds of optimization.

As even by use of the most powerful exact methods (see
[Laborie, 2005] for a recent approach) hard scheduling prob-
lems of the considered size are not tractable in reasonable
time [Hartmann, 1998; Alcaraz et al., 2003], an alternative
procedure has been chosen for the large instances. Instead of
identifying the actual optimum, the best solution that could be
found during (1) all GA runs and (2) an additional run lim-
ited to 10 minutes was taken as a reference. This approach
was motivated by the observation that large improvements
can mainly be made within the ﬁrst generations: The typi-
cal development of the costs associated with the best known
schedule throughout 10 minutes is depicted in Figure 1. Cor-
respondingly, the ﬁgures listed in Table 2 show how close the
GA could get to the best known solution within 5, 15 and 45
seconds. The following observations can be made:

1The used problem instances and more detailed evaluation results

can be obtained from http://rcpsp.serverside.at/ijcai-07.html

IJCAI-07

1964

Figure 1: Reduction of Schedule Costs during Optimization
• Due to the fact that the existence of many precedence
constraints narrows the search space, the GA converges
faster for problems with high process complexity.

• Resource complexity has considerable impact on the
time required for the conversion of activity lists into
schedules. A low complexity value thus means that more
schedules can be analyzed within the available time and
that the GA converges faster, therefore.

• The possibility of left-shifts extends the space of avail-
able rescheduling options: The genetic algorithm per-
forms better if only activity postponements are valid.

• The aspects of slack time and process simultaneity have

no signiﬁcant impact on the speed of convergence.

The overall values indicate that the assumption of fast
convergence to good schedule quality holds. Although no
comparison with existing algorithms was possible (due to
the mentioned lack of comparable results), the ﬁgures illus-
trate the effectiveness of the proposed operators and repre-
sent a starting point for future improvements and evaluations:
Our recent results indicate that particularly local forms of
rescheduling can improve the algorithm’s efﬁciency.

4 Conclusions
This paper described how the generic framework of the
RCPSP can be extended by the concept of alternative activi-
ties, to make its application in realistic DM problems possi-
ble: The x-RCPSP is based on a distinction between active
and inactive activities as well as the deﬁnition of valid activ-
ity substitutions and associated constraints. Beside the mod-
eling framework, we presented a novel genetic algorithm for
the solution of the proposed generalization of the RCPSP. Its
evaluation (which was based on an additionally published set
of problem instances) proved the fast convergence of sched-
ule quality towards the optimal or at least a good solution.

Acknowledgments
This research project was partly funded by grants from
(1) FFF Austria, Project cdm@airports, and (2) the European
Union, Project WS-Diamond, Contract 516933.

References
[Alcaraz et al., 2003] J. Alcaraz, C. Maroto, and R. Ruiz.
Solving the multi-mode resource-constrained project
scheduling problem with genetic algorithms. Journal of
the Operational Research Society, 54(6):614–626, 2003.

[Artigues et al., 2003] C. Artigues,

P. Michelon,

and
Insertion techniques for static and dynamic
European

S. Reusser.
resource constrained project scheduling.
Journal of Operational Research, 149:249–267, 2003.

[Bart´ak, 1999] R. Bart´ak. Conceptual models for combined
planning and scheduling. In Proceedings of CP99 Work-
shop on Large Scale Combinatorial Optimisation and
Constraints, pages 2–14, 1999.

[Beck and Fox, 2000] J.C. Beck and M.S. Fox. Constraint
directed techniques for scheduling with alternative activi-
ties. Artiﬁcial Intelligence, 121:211–250, 2000.

[Błazewicz et al., 1983] J. Błazewicz, J. K. Lenstra, and
A.H.G. Rinnooy Kan. Scheduling projects to resource
constraints: Classiﬁcation and complexity. Discrete Ap-
plied Mathematics, 5:11–24, 1983.

[Brucker et al., 1999] P. Brucker, A. Drexl, R. M¨ohring,
K. Neumann, and E. Pesch. Resource-constrained project
scheduling: Notation, classiﬁcation, models, and methods.
European Journal of Operational Research, 112, 1999.

[Carr, 2004] F. R. Carr. Robust Decision Support Tools for

Airport Surface Trafﬁc. PhD thesis, 2004.

[Clausen et al., 2001] J. Clausen, J. Hansen, J. Larsen, and
A. Larsen. Disruption management. ORMS Today, 2001.
[Elkhyari et al., 2004] A. Elkhyari, C. Guret, and N. Jussien.
Constraint programming for dynamic scheduling prob-
lems.
ISS’04 International
Scheduling Symposium, pages 84–89, Japan, 2004.

In Hiroshi Kise, editor,

[Hartmann, 1998] S. Hartmann. A competitive genetic algo-
rithm for resource-constrained project scheduling. Naval
Research Logistics, 45:733–750, 1998.

[Hartmann, 2001] S. Hartmann.

Project scheduling with
multiple modes: A genetic algorithm. Annals of Opera-
tions Research, 102(1-4):111–135, 2001.

[Hindi et al., 2002] K.S. Hindi, H. Yang, and K. Fleszar. An
evolutionary algorithm for resource-constrained project
scheduling. IEEE Transactions on Evolutionary Compu-
tation, 6(5):512–518, 2002.

[Kolisch and Hartmann, 2005] R. Kolisch and S. Hartmann.
Experimental
investigation of heuristics for resource-
constrained project scheduling: An update. European
Journal of Operational Research, 2005.

[Kolisch et al., 1995] R. Kolisch, A. Sprecher, and A. Drexl.
Characterization and generation of a general class of
resource-constrained project scheduling problems. Man-
agement Science, 41:1693–1703, 1995.

[Laborie, 2005] P. Laborie. Complete MCS-based search:
Application to resource constrained project scheduling. In
IJCAI-05, pages 181–186, 2005.

[Policella and Rasconi, 2005] N. Policella and R. Rasconi.
Testsets generation for reactive scheduling. In Workshop
on Experimental Analysis and Benchmarks for AI Algo-
rithms, 2005.

[Yu and Qi, 2004] G. Yu and X. Qi. Disruption Manage-
ment: Framework, Models and Applications. World Sci-
entiﬁc Publishing, Singapore, 2004.

[Zhu et al., 2005] G. Zhu, J.F. Bard, and G. Yu. Disruption
management for resource-constrained project scheduling.
Journal of the Operational Research Society, 56, 2005.

IJCAI-07

1965

