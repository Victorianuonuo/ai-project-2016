Dynamic Heuristics for Backtrack Search on Tree-Decomposition of CSPs

Philippe J´egou and Samba Ndojh Ndiaye and Cyril Terrioux

LSIS - UMR CNRS 6168

Universit´e Paul C´ezanne (Aix-Marseille 3)

Avenue Escadrille Normandie-Niemen

{philippe.jegou, samba-ndojh.ndiaye, cyril.terrioux}@univ-cezanne.fr

13397 Marseille Cedex 20 (France)

Abstract

This paper deals with methods exploiting tree-
decomposition approaches for solving constraint
networks. We consider here the practical efﬁciency
of these approaches by deﬁning ﬁve classes of vari-
able orders more and more dynamic which pre-
serve the time complexity bound. For that, we de-
ﬁne extensions of this theoretical time complexity
bound to increase the dynamic aspect of these or-
ders. We deﬁne a constant k allowing us to extend
the classical bound from O(exp(w + 1)) ﬁrstly to
O(exp(w + k + 1)), and ﬁnally to O(exp(2(w +
k +1)−s−)), with w the ”tree-width” of a CSP and
s− the minimum size of its separators. Finally, we
assess the deﬁned theoretical extension of the time
complexity bound from a practical viewpoint.

1 Introduction
The CSP formalism (Constraint Satisfaction Problem) offers
a powerful framework for representing and solving efﬁciently
many problems. Modeling a problem as a CSP consists in
deﬁning a set X of variables x1, x2, . . . xn, which must be
assigned in their respective ﬁnite domain, by satisfying a set
C of constraints which express restrictions between the dif-
ferent possible assignments. A solution is an assignment of
every variable which satisﬁes all the constraints. Determining
if a solution exists is a NP-complete problem.

The usual method for solving CSPs is based on backtrack-
ing search, which, in order to be efﬁcient, must use both ﬁlter-
ing techniques and heuristics for choosing the next variable
or value. This approach, often efﬁcient in practice, has an
exponential theoretical time complexity in O(e.dn) for an in-
stance having n variables and e constraints and whose largest
domain has d values. Several works have been developed,
in order to provide better theoretical complexity bounds ac-
cording to particular features of the instance. The best known
complexity bounds are given by the ”tree-width” of a CSP
(often denoted w). This parameter is related to some topolog-
ical properties of the constraint graph which represents the
interactions between variables via the constraints. It leads to
a time complexity in O(n.dw+1) (denoted O(exp(w + 1))).
Different methods have been proposed to reach this bound
like Tree-Clustering [Dechter and Pearl, 1989] (see [Gottlob

et al., 2000] for more details). They rely on the notion of
tree-decomposition of the constraint graph. They aim to clus-
ter variables such that the cluster arrangement is a tree. De-
pending on the instances, we can expect a signiﬁcant gain
w.r.t. enumerative approaches. Most of works based on this
approach only present theoretical results. Except [Gottlob et
al., 2002; J´egou and Terrioux, 2003], no practical results have
been provided. So, we study these approaches by concentrat-
ing us on the BTD method [J´egou and Terrioux, 2003] which
seems to be the most effective method proposed until now
within the framework of these structural methods.

While the problem of ﬁnding the best decomposition has
been studied in the literature ﬁrstly from a theoretical point of
view, recently, some studies have been realized in the ﬁeld of
CSP, integrating as quality parameter for a decomposition, its
efﬁciency for solving the considered CSP [J´egou et al., 2005].
Yet, these studies do not consider the questions related to an
efﬁcient use of the considered decompositions.

This paper deals with this question. Given a tree-
decomposition, we study the problem of ﬁnding good orders
on variables for exploiting this decomposition. As presented
in [J´egou and Terrioux, 2003], the order on the variables is
static and compatible with a depth ﬁrst traversal of the as-
sociated cluster tree. Since enumerative methods highlight
the efﬁciency of dynamic variable orders, we give condi-
tions which allow to exploit in a more dynamic way the tree-
decomposition and guarantee the time complexity bound. We
propose ﬁve classes of orders respecting these conditions, two
of them giving more freedom to order variables dynamically.
Consequently, their time complexity possess larger bounds:
O(exp(w + k + 1)) and O(exp(2(w + k + 1) − s−)), where
k is a constant to parameterize and s− the minimum size of
separators. Based on the properties of these classes, we ex-
ploit several heuristics which aim to compute a good order on
clusters and more generally on variables. They rely on topo-
logical and semantic properties of CSP instance. Heuristics
based on the expected number of solutions enhance signiﬁ-
cantly the performances of BTD. Meanwhile, those based on
the cluster size or on the dynamic variable ordering heuristic
provide often similar improvements and may outperform the
ﬁrst ones on real-world instances. Finally, we report here ex-
periments to assess the interest of the extensions based on the
time complexity bound.

This paper is organized as follows. The next section pro-

IJCAI-07

112

vides basic notions about CSPs and methods based on tree-
decompositions. Then, in section 3, we deﬁne several classes
of variable orders which preserve the classical bounds for
time complexity. Section 4 introduces two extensions giving
new time complexity bounds. Section 5 is devoted to exper-
imental results to assess the practical interest of our proposi-
tions. Finally, in section 6, we summarize this work and we
outline some future works.

2 Preliminaries

A constraint satisfaction problem (CSP) is deﬁned by a tu-
ple (X, D, C). X is a set {x1, . . . , xn} of n variables. Each
variable xi takes its values in the ﬁnite domain dxi from D.
The variables are subject to the constraints from C. Given an
instance (X, D, C), the CSP problem consists in determin-
ing if there is an assignment of each variable which satisﬁes
each constraint. This problem is NP-complete. In this paper,
without loss of generality, we only consider binary constraints
(i.e. constraints which involve two variables). So, the struc-
ture of a CSP can be represented by the graph (X, C), called
the constraint graph. The vertices of this graph are the vari-
ables of X and an edge joins two vertices if the corresponding
variables share a constraint.

Tree-Clustering [Dechter and Pearl, 1989] is the reference
method for solving CSPs thanks to the structure of its con-
straint graph. It is based on the notion of tree-decomposition
of graphs [Robertson and Seymour, 1986]. Let G = (X, C)
be a graph, a tree-decomposition of G is a pair (E, T ) where
T = (I, F ) is a tree with nodes I and edges F and E =
: i ∈ I} a family of subsets of X, such that each
{Ei
subset (called cluster) Ei is a node of T and veriﬁes: (i)
∪i∈I Ei = X, (ii) for each edge {x, y} ∈ C, there exists
i ∈ I with {x, y} ⊆ Ei, and (iii) for all i, j, k ∈ I, if k is in a
path from i to j in T , then Ei ∩ Ej ⊆ Ek.

The width of a tree-decomposition (E, T ) is equal to
maxi∈I |Ei| − 1. The tree-width w of G is the minimal width
over all the tree-decompositions of G.

Assume that we have a tree-decomposition of mini-
mal width (w), the time complexity of Tree-Clustering is
O(exp(w + 1)) while its space complexity can be reduced
to O(n.s.ds) with s the size of the largest minimal sepa-
rators of the graph [Dechter and Fattah, 2001]. Note that
Tree-Clustering does not provide interesting results in prac-
tical cases. So, an alternative approach, also based on tree-
decomposition of graphs was proposed in [J´egou and Ter-
rioux, 2003]. This method is called BTD (for Backtracking
with Tree-Decomposition) and seems to provide among the
best empirical results obtained by structural methods.

The BTD method proceeds by an enumerative search
guided by a static pre-established partial order induced by
a tree-decomposition of the constraint-network. So, the ﬁrst
step of BTD consists in computing a tree-decomposition. The
obtained tree-decomposition allows to exploit some structural
properties of the graph, during the search, in order to prune
some branches of the search tree, what distinguishes BTD
from other classical techniques. Firstly, the order for the as-
signment of the variables is induced by the considered tree-
decomposition of the constraint graph. Secondly, some parts

of the search space will not be visited again as soon as their
consistency is known. This is possible by using the notion
of structural good. A good is a consistent partial assignment
on a set of variables, namely a separator (i.e. an intersection
between two clusters), such that the part of the CSP located
after the separator is consistent and admits a solution com-
patible with the good. So, it is not necessary to explore this
part because we know its consistency. Thirdly, some parts of
the search space will not be visited again if we know that the
current instantiation leads to a failure. This is possible in ap-
plying the notion of structural nogood. A structural nogood
is a particular kind of nogood justiﬁed by structural proper-
ties of the constraints network: the part of the CSP located
after the nogood is not consistent (a nogood is a consistent
assignment of a separator of the graph).

To satisfy the complexity bounds, the variable ordering
exploited in BTD is related to the cluster ordering. For-
mally, let us consider a tree-decomposition (E, T ) of the CSP
with T = (I, F ) a tree and assume that the elements of
E = {Ei : i ∈ I} are indexed w.r.t. a compatible numera-
tion. A numeration on E compatible with a preﬁx numeration
of T = (I, F ) with E1 the root is called compatible numer-
ation. An order (cid:6)X of variables of X such that ∀x ∈ Ei,
∀y ∈ Ej, with i < j, x (cid:6)X y is a compatible enumeration
order. The numeration on the clusters gives a partial order on
the variables since the variables in the Ei are assigned before
those in Ej if i < j, except variables in the descent of a good,
namely those located in the subproblem rooted on the cluster
containing the good. In fact, using goods and nogoods allows
not to explore twice subproblems if their consistency (incon-
sistency) with the current assignment is known.
If we use
a good to avoid visiting again a subtree, we known that the
variables in it can be assigned consistently with the current
assignment. So BTD does not assign them effectively, but
they are considered done. For consistent problems, an addi-
tional work must be performed to assign these variables if we
want to provide a solution [J´egou and Terrioux, 2004]. They
are named consistently assignable variables thanks to a good.
Thus the variables in Ej are assigned if the variables in Ei
are either already assigned or consistently assignable thanks
to a good. To complete this order, we have to choose vari-
able ordering heuristics inside a cluster. Finally, a compatible
enumeration order on the variables is given by a compatible
numeration on clusters and a variable order in each cluster.

In [J´egou and Terrioux, 2003; 2004], the presented results
were obtained without heuristics for the choice of the clus-
ters and thus the choice of the variables. Only a traditional
dynamic order was used inside the clusters. Obviously, the
variable ordering have a great impact on the efﬁciency of enu-
merative methods. Thus, we study here how the beneﬁts of
variable orderings can be fully exploited in BTD. Neverthe-
less, to guarantee the time complexity bounds, it is necessary
to respect some conditions. So, in the next section, we deﬁne
classes of orders guaranteeing complexity bounds.

3 Dynamic orders in O(exp(w + 1))

The ﬁrst version of BTD was deﬁned with a compatible static
variable ordering. We prove here that it is possible to consider

IJCAI-07

113

more dynamic orders without loosing the complexity bounds.
The deﬁned classes contain orders more and more dynamic.
These orders are in fact provided by the cluster order and the
variable ordering inside each cluster.
Let (X, D, C) be a CSP and (E, T ) a tree-decomposition of
the graph (X, C), we exploit an order σi on the subproblems
, . . . , Pik rooted on the sons Eij of Ei and an order γi
Pi1
on the variables in Ei. We deﬁne recursively the following
classes of orders. In the three next classes, we choose the ﬁrst
cluster to assign (the root): E1 among all the clusters and
we consider P1 the subproblem rooted on E1 (i.e. the whole
problem).
Deﬁnition 1 We begin the search in E1 and we try recur-
sively to extend the current assignment on the subproblem
rooted on Ei by assigning ﬁrst the variables in Ei accord-
ing to γi and then on Pi1

, . . . , Pik according to σi.

• Class 1. σi and γi are static. We compute σi and γi

statically (before starting the search).

• Class 2. σi is static and γi is dynamic. We compute

statically σi, while γi is computed during the search.

• Class 3. σi and γi are dynamic. Both, σi and γi are
computed during the search. σi is computed w.r.t.
the
current assignment as soon as all the variables in Ei
are assigned.

• Class ++. Enumerative dynamic order. The variable
ordering is completely dynamic. So, the assignment or-
der is not necessarily a compatible enumeration order.
There is no restriction due to the cluster tree.

The deﬁned classes form a hierarchy since we have: Class 1
⊂ Class 2 ⊂ Class 3 ⊂ Class ++.
Property of the Class 3. Let Y be an assignment, x ∈ Ej −
(Ei ∩ Ej) with Ei the parent of Ej: x ∈ Y iff: i)∀v ∈ Ei,
),
v ∈ Y ii) Let Eip
∀v ∈ Piu , v ∈ Y iii) ∀v ∈ Ej s.t. γj(v) ≤ γj(x), v ∈ Y .

= Ej , ∀Piu s.t. σi(Piu

) ≤ σi(Pip

In [J´egou and Terrioux, 2003], the experiments use Class 2
orders. Formally, only the orders of the Class 1 are compati-
ble. Nevertheless, for an order o3 in the Class 3 and a given
assignment A, one can ﬁnd an order o1 in the Class 1 that
instantiates the variables in A in the same way and the same
order o3 does. This property gives to the Class 3 (thus Class
2) orders the ability of recording goods and nogoods and us-
ing them to prune branches in the same way Class 1 orders
do. The Class ++ gives a complete freedom. Yet, it does not
guarantee the time complexity bound because sometimes it is
impossible to record nogoods. Indeed, let the cluster Ej be a
son of the cluster Ei, we suppose that the enumeration order
assigns the variables in Ei except those in Ei ∩ Ej, as well
as the variables in the clusters which are on the path from the
root cluster to Ei. Let x, the next variable to assign, be in Ej
and not in Ei ∩ Ej. If the solving of the subtree rooted on
Ej leads to a failure, it is impossible to record a nogood on
Ei ∩ Ej (if it is consistently assigned) because we do not try
the other values of x to prove that the assignment on Ei ∩ Ej
cannot be consistently extended on this subtree. If the sub-
problem has a solution, we can record a good. Actually, this
solution is a consistent extension of the assignment on Ei∩Ej
which is a good. A nogood not recorded could be computed

again. Thus the time complexity bound is not guaranteed any-
more. Meanwhile, the Class 3 orders guarantee this bound.

Theorem 1 Let the enumeration order be in the Class 3, the
time complexity of BTD is O(exp(w + 1)).
Proof We consider a cluster Ej in the cluster tree, and we
must prove that any assignment on Ej is computed only once.
Let Ei be the cluster parent of Ej and suppose that all the
variables in Ei are assigned and those in Ej − (Ei ∩ Ej)
are not. Since the order belongs to the Class 3, the variables
of the clusters on the path from the root to Ei are already
assigned and those in the subtree rooted on Ej not yet. A
consistent assignment A on Ei ∩ Ej is computed at the latest
when the variables in Ei are assigned (before those in the
subproblem rooted in Ej). Solving this subproblem leads to
a failure or a solution. In each case, A is recorded as a good
or nogood. Let A(cid:3) be an assignment on Ej compatible with
A. The next assignment of variables in Ei leading to A on
Ei ∩ Ej will not be pursued on the subproblem rooted on Ej.
A(cid:3) is not computed twice, only the variables in Ei ∩ Ej are
assigned again. So the time complexity is O(exp(w + 1)). (cid:2)
The properties of the Class 3 offer more possibilities in the
variable ordering. So it is possible to choose any cluster to
visit next among the sons of the current cluster. And in each
cluster, the variable ordering is totally free. In section 4, we
propose two natural extensions of the complexity bound.

4 Bounded extensions of dynamic orders
We propose two extensions based on the ability given to the
heuristics to choose the next variable to assign not only in
one cluster, but also among k variables in a path rooted on
the cluster that veriﬁes some properties. So, we deﬁne two
new classes of orders extending Class 3. First, we propose a
generalization of the tree-decomposition deﬁnition.
Deﬁnition 2 Let G = (X, C) be a graph and k a positive
integer, the set of directed k-covering tree-decompositions of
a tree-decomposition (E, T ) of G with E1 its root cluster, is
deﬁned by the set of tree-decompositions (E (cid:3), T (cid:3)) of G that
verify:

• E1 ⊆ E (cid:3)
• ∀E (cid:3)

1, E (cid:3)
i ∈ E (cid:3), E (cid:3)

1 the root cluster of (E (cid:3), T (cid:3))
i ⊆ Ei1

. . . ∪ EiR −1 ⊂ E (cid:3)

∪ Ei2
i, with Ei1

∪ . . . ∪ EiR and Ei1
. . . EiR a path in T

∪ Ei2

∪

• |E (cid:3)

i| ≤ w + k + 1, where w = maxEi∈E|Ei| − 1

Now, we give a deﬁnition of the Class 4.
Deﬁnition 3 Let (X, D, C) be a CSP, (E, T ) a tree-
decomposition of the graph (X,C) and k a positive integer.
A variable order is in the Class 4, if this order is in the Class
3 for one directed k-covering tree-decomposition of (E, T ).

We derive a natural theorem:

Theorem 2 Let the enumeration order be in the Class 4, the
time complexity of BTD is O(exp(w + k + 1)).
Proof This proof is similar to one given for Class 3 since we
can consider that BTD runs on a tree-decomposition (E (cid:3), T (cid:3))
of width at most w + k + 1. (cid:2)

A second extension is possible in exploiting during the
search, a dynamic computing of the tree-decomposition (we

IJCAI-07

114

∪ Ei2

i = Ei1

∪ Ei2

i ∈ E (cid:3), E (cid:3)

i = Ei1

i ∈ E (cid:3), E (cid:3)

can use several directed k-covering tree-decompositions dur-
ing the search). Then, the time complexity bound changes
because sometimes it would be impossible to record nogoods.
Deﬁnition 4 Let (X, D, C) be a CSP, (E, T ) a tree-
decomposition of the graph (X,C) and k a positive integer. A
variable order o5 is in the Class 5, if for a given assignment
A, one can ﬁnd one directed k-covering tree-decomposition
(E (cid:3), T (cid:3)) of (E, T ) such that ∀E (cid:3)
∪
. . . ∪ EiR , with Ei1
. . . EiR a path in T and ﬁnd an order o3
on (E (cid:3), T (cid:3)), in the Class 3 that instantiates the variables in
A in the same way and the same order o5 does.
This deﬁnition enforces to use directed k-covering tree-
decompositions (E (cid:3), T (cid:3)) of (E, T ) that verify the additional
∪ . . . ∪ EiR . Hence, a
condition: ∀E (cid:3)
separator in (E (cid:3), T (cid:3)) is also a separator in (E, T ). We denote
by s− the minimum size of separators in (E, T ).
Theorem 3 Let the enumeration order be in the Class 5, the
time complexity of BTD is O(exp(2(w + k + 1) − s−)).
Proof Let (X, D, C) be a CSP, (E, T ) a tree-decomposition
of the graph (X, C) and E1 its root cluster. We have to prove
that any assignment on a set V of 2(w + k + 1) − s− variables
on a path of the tree T is computed only once. Let A be an
assignment containing V . The order in which the variables
of A were assigned is in the Class 3 for a directed k-covering
tree-decomposition (E (cid:3), T (cid:3)) of (E, T ) that veriﬁes ∀E (cid:3)
i ∈ E (cid:3),
. . . EiR a path in T . The
E (cid:3)
size of the clusters in (E (cid:3), T (cid:3)) is bound by w+k+1, so the set
V is covered by at least two clusters since s− is the minimum
iq be a path on (E (cid:3), T (cid:3))
size of the separators. Let E (cid:3)
i1
covering V . The solving of the subproblem rooted on E (cid:3)
i1
with the assignment A leads to the recording of (no)goods on
the separators of these clusters. If E (cid:3)
i1 is the root cluster of
(E (cid:3), T (cid:3)), then V contains E1. Thus A will not be computed
again because it contains the ﬁrst variables in the search. We
i1 is not the root cluster of (E (cid:3), T (cid:3)). Since q ≥
suppose that E (cid:3)
2, we record a (no)good on the separator of E (cid:3)
i1 and its parent
i2 . Let B be
and at least an other on the separator of E (cid:3)
a new assignment that we try to extend on V with the same
values in A. One of the (no)goods will be computed ﬁrst.
Thus before all the variables in V are assigned, the search is
stopped thanks to this (no)good. So A is not computed again.
We prove that any assignment on V is computed only once.(cid:2)
Note that the new deﬁned classes are included in the hier-
archy presented in section 3: Class i ⊂ Class j, if i < j and
for 1 ≤ i < j ≤ 5, with also Class 5 ⊂ Class ++.

∪. . .∪EiR , with Ei1

i = Ei1

∪Ei2

. . . E (cid:3)

i1 and E (cid:3)

In practice, we assess here the proposed strategies on random
partial structured CSPs in order to point up the best ones w.r.t.
CSP solving. For building a random partial structured in-
stance of a class (n, d, w, t, s, nc, p), the ﬁrst step consists in
producing randomly a structured CSP according to the model
described in [J´egou and Terrioux, 2003]. This structured in-
stance consists of n variables having d values in their domain.
Its constraint graph is a clique tree with nc cliques whose
size is at most w and whose separator size does not exceed
s. Each constraint forbids t tuples. Then, the second step
removes randomly p% edges from the structured instance.
Secondly, we experiment the proposed heuristics on bench-
mark instances of the CP’2005 solver competition1. All these
experimentations are performed on a Linux-based PC with a
Pentium IV 3.2GHz and 1GB of memory. For each consid-
ered random partial structured instance class, the presented
results are the average on instances solved over 50. We limit
the runtime to 30 minutes for random instances and to 10 min-
utes for CP’2005 benchmark instances. Above, the solver is
stopped and the involved instance is considered as unsolved
(what is denoted by the letter T in tables). In the following
tables, the letter M means that at least one instance cannot be
solved because it requires more than 1GB of memory.

In [J´egou et al., 2005], a study was performed on triangu-
lation algorithms to ﬁnd out the best way to compute a good
tree-decomposition w.r.t. CSP solving. As MCS [Tarjan and
Yannakakis, 1984] obtains the best results and is very easy
to implement, we use it to compute tree-decompositions in
this study. We do not provide the results obtained by clas-
sical enumerative algorithms like FC or MAC since they are
often unable to solve several instances of each class within 30
minutes.

Here, for lack of place, we only present the more efﬁcient

heuristics:

• minexp(A): this heuristic is based on the expected num-
ber of partial solutions of clusters [Smith, 1994] and on
their size. It chooses as root cluster one which minimizes
the ratio between the expected number of solutions and
the size of the cluster.

• size(B ): we choose the cluster of maximum size as root

cluster

• minexps (C ): this heuristic is similar to minexp and or-
ders the son clusters according to the increasing value of
their ratio.

• minseps (D ): we order the son clusters according to the

increasing size of their separator with their parent.

• nv (E ): we choose a dynamic variable ordering heuristic
and we visit ﬁrst the son cluster where appears the next
variable in the heuristic order among the variables of the
unvisited son clusters.

• minexpsdyn (F ): the next cluster to visit minimizes the
ratio between the current expected number of solutions
and the size of the cluster. The current expected num-
ber of solutions of a cluster is modiﬁed by ﬁltering the
domains of unassigned variables.

1This competition held during the Second International Work-

shop on Constraint Propagation and Implementation of CP’2005.

To deﬁne the value of k, we have several approaches to
choose variables to group. A good one consists in trying to
reduce the value of the parameter s and, by this way, to en-
hance the space complexity bound. Then, we can observe that
grouping clusters with large separators permits to achieve a
signiﬁcant reduction of s.

5 Experimental study
Applying a structural method on an instance generally as-
sumes that this instance presents some particular topological
features. So, our study is ﬁrst performed on instances hav-
ing a structure which can be exploited by structural methods.

IJCAI-07

115

CSP

Class 1

Class 2

Class 3

Class 4

(n, d, w, t, s, nc, p)

(150, 25, 15, 215, 5, 15, 10)
(150, 25, 15, 237, 5, 15, 20)
(150, 25, 15, 257, 5, 15, 30)
(150, 25, 15, 285, 5, 15, 40)
(250, 20, 20, 107, 5, 20, 10)
(250, 20, 20, 117, 5, 20, 20)
(250, 20, 20, 129, 5, 20, 30)
(250, 20, 20, 146, 5, 20, 40)
(250, 25, 15, 211, 5, 25, 10)
(250, 25, 15, 230, 5, 25, 20)
(250, 25, 15, 253, 5, 25, 30)
(250, 25, 15, 280, 5, 25, 40)
(250, 20, 20, 99, 10, 25, 10)
(500, 20, 15, 123, 5, 50, 10)
(500, 20, 15, 136, 5, 50, 20)

w+

s

13.00
12.54
12.16
11.52
17.82
17.24
16.80
15.92
13.04
12.86
12.38
11.80
17.92
13.04
12.94

12.22
11.90
11.40
10.64
16.92
16.56
15.80
15.24
12.34
11.98
11.82
11.16
17.02
12.58
12.10

B

D

9.31
9.99
13.36
3.07
54.59
55.39
26.21
44.60
28.86
20.21
11.36
7.56
M
12.60
47.16

A

C

28.12
5.27
27.82
8.77
57.75
79.80
21.14
30.17
38.75
34.47
16.91
32.74
M
13.63
19.22

B

D

3.41
5.10
3.38
1.13
15.92
23.38
7.23
26.24
15.33
8.60
5.18
3.67
M
7.01
25.54

A

C

2.52
2.47
5.06
0.87
12.39
14.26
5.51
3.91
11.67
7.12
11.13
16.32
M
8.08
23.49

A

F

2.45
1.99
4.97
1.27
12.14
13.25
6.19
4.51
13.37
14.84
5.14
17.49
M
7.31
27.01

B

G

B

D

5.34
5.47
3.55
1.17
14.93
24.14
7.84
17.99
18.12
19.47
5.26
4.91

2.75
2.58
1.41
1.67
10.18
10.05
33.93
11.38
5.86
4.19
2.80
4.03
M 66.94
5.48
4.86

7.54
15.11

A

C

2.17
1.76
1.05
0.39
7.75
8.81
4.61
3.17
7.71
3.94
3.71
1.40
63.15
4.50
4.92

A

F

2.08
1.63
1.13
0.63
7.34
8.39
4.41
3.17
6.65
3.36
3.52
1.26
62.99
4.41
3.94

B

G

2.65
2.97
1.30
1.75
10.26
10.34
34.20
10.63
6.44
6.81
3.06
3.55
66.33
5.86
5.24

Table 1: Parameters w+ and s of the tree-decomposition and runtime (in s) on random partial structured CSPs with mdd for
class 1 and mdddyn for classes 2, 3 and 4.

CSP

Instance

qa 5

qcp-10-64-45-QWH-10

qcp-15-120-278-QWH-15
qwh-15-106-392-QWH-15
qwh-15-106-974-QWH-15

n

e

w+

s

Class 1

A
D

B
D

Class 2

A
C

B
C

26
100
225
225
225

309
900
3,150
3,150
3,150

25
91
211
211
211

9
82
197
197
197

32.01
T
T
T
T

132.82

2.67
M 69.83
T 120.69
0.89
M
94.58
2.55

77.82
T
10.47
169.49
75.77

A
F

84.19
T
10.92
181.18
79.46

Class 3

E
G

80.86
70.10
122.26
0.86
2.67

B
G

2.62
69.82
122.47
0.89
2.54

Table 2: Parameters w+ and s of the tree-decomposition and runtime (in s) on some instances from the CP’2005 solver
competition with mdd for class 1 and mdddyn for classes 2 and 3.

• nvsdyn (G):

it is similar to nv . We visit ﬁrst the son
cluster where appears the next variable in the heuristic
order among the variables of the unvisited son clusters.

Inside a cluster, the heuristic used for choosing the next vari-
able is min domain/degree (static version mdds for class 1
and dynamic mdddyn for the other classes).

Table 1 shows the runtime of BTD with several heuristics
of Classes 1, 2, 3 and 4. For Class 5, we cannot get good re-
sults and then, the results are not presented. Also it presents
the width of the computed tree-decomposition and the max-
imum size of the separators. Clearly, we observe that Class
1 orders obtain poor results. This behaviour is not surprising
since static variable orders are well known to be inefﬁcient
compared to dynamic ones. A dynamic strategy allows to
make good choices by taking in account the modiﬁcations of
the problem during search. Thus these choices are more jus-
tiﬁed than in a static case. That explains the good results of
Classes 2 and 3 orders. The results show as well the crucial
importance of the root cluster choice since each heuristic of
the Classes 2 and 3 fails to solve an average of 4 instances
over all instances of all classes because of a bad choice of
root cluster. We note that the unsolved instances are not the
same for size and minexp heuristics. The memory problems
marked by M can be solved by using a Class 4 order with the
sep heuristic for grouping variables (we merge cluster whose

intersection is greater than a value smax). Table 1 gives the
runtime of BTD for this class with smax = 5.

When we analyze the value of the parameter k, we observe
that its value is generally limited (between 1 to 6). Neverthe-
less, for the CSPs (250, 20, 20, 99, 10, 25, 10), the value of k
is near 40, but this high value allows to solve these instances.

The heuristics for the Classes 2 and 3 improve very sig-
niﬁcantly the results obtained. The impact of the dynamic-
ity is obvious. minexp and nv heuristics solve all the in-
stances except one due to a bad root cluster choice, size solve
all the instances. Except the unsolved instance, minexp ob-
tains very promising results. The son cluster ordering has
a limited effect because the instances considered have a few
son clusters reducing the possible choices and so their im-
pact. We can expect a more important improvement for in-
stances with more son clusters. The best results are obtained
by minexp + minexpsdyn , but size + minseps obtains of-
ten similar results and succeed in solving all instances in
the Class 4. The calculus of the expected number of solu-
tion assumes that the problem constraints are independent,
what is the case for the problems considered here. Thus,
size + minsep may outperform minexp + minexpsdyn on
real-world problems which have dependent constraints.

When we observe the results in table 1, we see the rele-
vance of extending the dynamic order. Merging clusters with

IJCAI-07

116

k less than 6 decreases the maximal size of separators and
allows a more dynamic ordering of variables. That leads to
an important reduction of the runtime. These experiments
highlight the importance of dynamic orders and make us con-
clude that the Class 4 gives the best variable orders w.r.t CSP
solving with a good value of k. Of course, this behaviour
has been observed on random instances. The next step of our
study consists in assessing the proposed heuristics on bench-
mark instances of the CP’2005 solver competition. At the
beginning of the section, we reminded that structural meth-
ods like BTD assume the CSP has interesting topological fea-
tures. This is not the case for a great part of instances of
this competition. Since the space complexity of BTD is in
O(n.s.ds), if the size of the cluster separators of the com-
puted tree-decomposition of CSP is too large, the method
needs more than 1GB of memory. Many instances have tree-
decompositions with very large separators and clusters. Re-
ducing the required space memory leads to group all the vari-
ables in one cluster and so to perform like the FC algorithm.
In table 2, which provides results on these instances, we do
not present the results for instances with very bad topological
features for which BTD has a behavior close to FC one.

On these instances, the size heuristic outperforms minexp
except on qcp instance. To resume, we can say that the
dynamicity improves signiﬁcantly the method and the ex-
pected number of solutions provides an important improve-
ment on random CSPs, while the size + minsep heuristic
outperforms the others on real-world instances.

6 Discussion and Conclusion

In this article, we have studied the CSP solving methods
based on tree-decompositions in order to improve their prac-
tical interest. This study was done both theoretically and em-
pirically. The analysis of the variable orders allows us to de-
ﬁne more dynamic heuristics without loosing the time com-
plexity bound. So, we have deﬁned classes of variable orders
which allow a more and more dynamic ordering of variables
and preserve the theoretical time complexity bound. This
bound has been extended to enforce the dynamic aspect of
orders that has an important impact on the efﬁciency of enu-
merative methods. Even though these new bounds are theo-
retically less interesting that the initial, it allows us to deﬁne
more efﬁcient heuristics which improve signiﬁcantly the run-
time of BTD. This study, which could not be achieved pre-
viously, takes now on importance for solving hard instances
with suitable structural properties. For example, the struc-
tured instances used here are seldom solved by enumerative
methods like FC or MAC.

We have compared the classes of variable orders with rel-
evant heuristics w.r.t. CSP solving. This comparison points
up the importance of a dynamic variable ordering. Indeed the
best results are obtained by Class 4 orders because they give
more freedom to the variable ordering heuristic while their
time complexity is O(exp(w+k+1)) where k is a constant to
parameterize. Note that for the most dynamic class (the Class
5), we get a time complexity in O(exp(2(w + k + 1) − s−)).
It seems that this bound should be too large to expect a sig-
niﬁcant practical improvement.

Concerning heuristics, we exploit the notion of expected
number of partial solutions in order to guide the traversal of
the cluster tree during the solving. Even though the other
heuristics presented (size + minsep) are less efﬁcient, of-
ten they obtain similar results. They are also more general
what induces a stabler behaviour. So, on real-world prob-
lems with dependent constraints, they may outperform the ex-
pected number of solutions based heuristics. Then, for Class
4, we aim to improve the criteria used to compute the value
of k and to deﬁne more general ones by exploiting better the
problem features.

This study will be pursued on the Valued CSPs [Schiex et

al., 1995] which are well known to be more difﬁcult.

Acknowledgments
This work is supported by a ”programme blanc” ANR grant
(STAL-DEC-OPT project).

References
[Dechter and Fattah, 2001] R. Dechter and Y. El Fattah.
Topological Parameters for Time-Space Tradeoff. Artiﬁ-
cial Intelligence, 125:93–118, 2001.

[Dechter and Pearl, 1989] R. Dechter and J. Pearl. Tree-
Clustering for Constraint Networks. Artiﬁcial Intelligence,
38:353–366, 1989.

[Gottlob et al., 2000] G. Gottlob, N. Leone, and F. Scarcello.
A Comparison of Structural CSP Decomposition Methods.
Artiﬁcial Intelligence, 124:343–282, 2000.

[Gottlob et al., 2002] G. Gottlob, M. Hutle, and F. Wotawa.
Combining hypertree, bicomp and hinge decomposition.
In Proceedings of ECAI, pages 161–165, 2002.

[J´egou and Terrioux, 2003] P. J´egou and C. Terrioux. Hybrid
backtracking bounded by tree-decomposition of constraint
networks. Artiﬁcial Intelligence, 146:43–75, 2003.

[J´egou and Terrioux, 2004] P. J´egou and C. Terrioux. De-
composition and good recording for solving Max-CSPs.
In Proceedings of ECAI, pages 196–200, 2004.

[J´egou et al., 2005] P. J´egou, S. N. Ndiaye, and C. Terrioux.
Computing and exploiting tree-decompositions for solving
constraint networks.
In Proceedings of CP, pages 777–
781, 2005.

[Robertson and Seymour, 1986] N. Robertson and P.D. Sey-
mour. Graph minors II: Algorithmic aspects of tree-width.
Algorithms, 7:309–322, 1986.

[Schiex et al., 1995] T. Schiex, H. Fargier, and G. Verfaillie.
Valued Constraint Satisfaction Problems: hard and easy
problems. In Proceedings of IJCAI, pages 631–637, 1995.
[Smith, 1994] B. Smith. The Phase Transition and the Mushy
Region in Constraint Satisfaction Problems. In Proceed-
ings of ECAI, pages 100–104, 1994.

[Tarjan and Yannakakis, 1984] R. Tarjan and M. Yan-
nakakis. Simple linear-time algorithms to test chordality
of graphs, test acyclicity of hypergraphs, and selectively
reduce acyclic hypergraphs. SIAM Journal on Computing,
13 (3):566–579, 1984.

IJCAI-07

117

