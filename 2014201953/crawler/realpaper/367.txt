Session No.  5 Software Support 

159 

A PROGRAMMING TOOL FOR MANAGEMENT OF A 
PREDICATE-CALCULUS-ORIENTED DATA BASE* 

Erik  Sandewall 

Uppsala  University 
Uppsala,  Sweden 

Abstract 

This  paper  describes  a  LISP  program,  called 
PCDB,  for  storage  and  retrieval  in  a  data  base 
of  predicate  calculus  (PC)  formulas.  The  PCDB 
pacxage  uses  standardized  representations  of 
PC  formulas,  where  ground  unit  clauses  are 
stored  e f f i c i e n t l y,  e.g.  on  the  property-lists 
of  their  arguments,  and  other  clauses  have 
other  representation.  The  major  part  of  the 
PCDB  package  is  a  function  generator,  which 
accepts  declarations  of  PC  relations  and 
functions,  and  Which  also  accepts  "rules"  (= 
non-ground  axioms  intended  for  use  in  deduction) 

Declarations  and  rules  are  used  to  generate 
efficient  code  for  storage  and  retrieval  of 
"facts"  (usually  =  ground  unit  clauses)  in  and 
from  the  data  base.  This  generation  process 
may  be  characterized  as  a  "compilation"  of  the 
rules  (from  predicate  calculus  to  LISP). 

Key  words  and  phrases 

Axiom  compilation,  deduction,  function  gene(cid:173)
rator,  LISP,  p a r t i al  evaluation,  r e t r i e v a l. 

Motivation 

Many  programming  tasks  in  a r t i f i c i al  i n t e l l i(cid:173)
gence  require  the  manipulation  of  small  data 
bases.  Question-answering  programs  maintain  a 
data  base  of  accumulated  facts,  and  inquire 
the  data  base  for  answers  to  questions.  Robot 
programs  maintain  a  data  base  which  describes 
the  robot's  environment.  Advanced  CAI  programs 
maintain  a  data  base  of  the  subject-matter 
that  they  have  to  teach.  Simulated  scientists 
(e.g.  the  Dendral  program)  maintain  a  data 
base  of  know-how  in  a  narrow  but  deep  f i e ld  of 
human  knowledge.  These  programs,  and  other 
similar  ones,  need  to  perform  complex  retrieval 
operations  (and  sometimes,  reorganization)  in 
the  data  base. 

(x) 

This  research  was  supported  in  part  by  the 
Swedish  Natural  Science  Research  Council 
(contract  Dnr  2654-3) 

In  the  design  of  such  programs,  it  is  crucial 
to  find  a  good  representation  of  one's  data. 
Programming  languages  like  LISP,  PL/I,  or 
SIMULA  67  offer  a  machine-oriented  data  struc(cid:173)
ture;  for  example,  LISP  offers  the  use  of 
property-lists,  and  SIMULA  67  offers  the  use  of 
Hoare's  record  structure.  However,  it  is  often 
desirable  to  find  a  more  problem-oriented  rep(cid:173)
resentation,  such  as  nested  t r i t u p l e s,  colored 
graphs,  or  "semantic  nets". 

Predicate  calculus  notation  is  often  used  as 
such  a  "high-level  data  language".  The  SRI  A . I. 
project  uses  predicate  calculus  for  their 
robot  project  (see  Nilsson,  1969)  and  for 
question-answering  (see  Green,  1969).  Two  d i f f e(cid:173)
rent  methods  for  using  predi cate  calculus  as  a 
data  language  in  program  manipulation  programs 
have  been  proposed  by  Burstall  (1969)  and  by 
Manna  and  Waldinger  (1970).  Burstall  (1970)  has 
proposed  a  set  or  conventions  for  expressing 
the  deep  structure  of  natural  language  in 
predicate  calculus,  and  a  similar  proposal  has 
been  made  by  the  present  author  (Sandewall, 
1970).  The  l i st  can  be  continued. 

Predicate  calculus  offers  the  user  two  major 
advantages:  F i r s t,  it  is  a  versatile  notation, 
and  second,  the  user  can  express  the  logical 
properties  of  his  data  through  a  set  of  axioms. 
These  axioms  can  be  used  as  a  theoretical  basis 
for  the  program,  or  they  can  be  given  to  a 
theorem-proving  program  (such  as  QA3,  see  Green, 
1969). 
program  "interprets"  the  axioms.  This  was 
discussed  in  Green,  o p . c i t .,  page  131.  In  the 
former  case,  the  same  axioms  have  been  manually 
re-written  ("compiled")  into  a  program.  Using 
a  theorem-proving  program  is  more  convenient, 
but  a  tailor-made  program  can  be  expected  to  be 
much  more  e f f i c i e n t. 

In  the  l a t t er  case,  the  theorem-proving 

package 

Topic  of  this  paper:  the  PCDB 

This  paper  describes  an  existing  LISP  "program" 
(or  to  be  precise,  function  package)  which  com(cid:173)
bines  the  generality  and  convenience  of  a 
theorem-proving  program  with  the  relative  e f f i(cid:173)
ciency  of  tailor-made  programs.  Our  program  is 

160 

Session No.  5 Software Support 

called  PCDB  (for  "Predicate  Calculus  Data 
Base"),  and  it  is  a  function  generator.  PCDB 
takes  the  following  types  of  input: 

declarations  of  the  predicate  calculus  r e l a-
tions  and  functions  that  the  user  wants  to 
u t i l i z e; 

facts,  i.e.  ground  unit  clauses  which  are 
intended  as  contributions  to  the  data  base; 

questions,  i.e.  unit  clauses  which  are  to  be 
proved  from  the  data  base.  Question  clauses 
may  be  ground  (for  closed  questions)  or  non-
ground  (for  open  questions); 

rules,  i . e.  non-ground  (and  usually  non-unit) 
clauses  which  are  to  be  accumulated,  and  later 
used  for  forward  deduction  from  facts  and/or 
for  backward  deduction  in  answering  questions. 

When  the  package  receives  rules,  it  generates 
"code"  ( i . e.  LISP  S-expressions)  that  corres(cid:173)
ponds  to  these  rules  ( i . e. 
it  "compiles"  the 
rules),  and  when  it  receives  facts  and  quest(cid:173)
ions,  this  code  is  u t i l i z e d.  Declarations  set 
certain  flags  and  properties  which  govern 
subsequent  code  generation. 

The  PCDB  package  is  useful  in  problem  environ(cid:173)
ments  where  there  is  a  large  and  open-ended 
data  base  of  "facts"  (in  the  above  sense  of  the 
word)  and  a  relatively  small  and  limited 
number  of  "rules".  Question-answering  appli(cid:173)
cations  and  Burstall's  notation  for  program 
descriptions  satisfy  this  requirement.  -  The 
package  is  not  useful  in  problem  environments 
where  the  major  part  of  the  data  base  consists 
of  "rules".  Manna's  approach  to  program  analy(cid:173)
sis  is  an  example  of  such  an  environment.  For 
such  applications,  conventional  resolution 
programs  seem  more  suitable. 

Example  of  predicate  calculus  usage 

Before  we  proceed  to  a  detailed  description  of 
PCDB,  let  us  give  an  example  of  the  use  of 
predicate  calculus  as  a  high-level  data 
language.  With  this  example,  the  reasons  for  the 
design  of  PCDB  w i ll  be  more  transparent. 

Suppose  we  want  to  perform  that  standard  exer(cid:173)
cise:  writing  a  kinship  handling,  question-
answering  program.  Some  simple  kinship  rela(cid:173)
tionships  may  be  expressed  in  predicate  calculus 
as 

Sibling(Jesper,Bodil) 
Male(Jesper) 
Father(Jesper)  =  Edvin 
Wife  (Edvin)  =  Edla 

("Sibling"  stands  for  "brother  or  s i s t e r " ). 

etc. 
For  simple  facts  there  is  no  essential  d i f f e(cid:173)
rence  in  effort  between  making  these  predicate-
calculus  statements  and  making  the  obvious 
property-list  storage  instructions.  However,  in 
more  complex  expressions,  like 

Sibling(  Father(Hedvig),  Wife(Neighbor 

(Halvard))  ) 
(for  "Hedvig's  father  is  a  sibling  of  Halvard's 
neighbor's  wife)  the  predicate  calculus  formu(cid:173)
lation  is  probably  more  convenient  than  what  we 
could  immediately  do  with  e.g.  property-list 
storage  instructions. 
tion  is  "high-level"  and  "problem-oriented". 

In  this  sense,  the  nota(cid:173)

Moreover,  predicate  calculus  permits  us  to  state 
general  axioms,  which  characterize  these  k i n(cid:173)
ship  functions  and  relations,  e.g. 

If  we  write  a  direct  program  for  the  kinship 
exercise  (without  the  support  of  any  standard 
program),  then  the  information  contained  in 
these  axioms  must  somehow  go  into  that  program. 
Normally,  it  goes  into  the  retrieval  part,  but 
some  of  the  axioms  could  also  go  into  the 
storage  part.  For  a  t r i v i al  example,  the  f i r st 
axiom  could  correspond  to  a  segment  of  the 
retrieval  procedure  which  says  " if  it  has  been 
asked  whether  x  is  male,  and  if  there  is  no 
immediate  information  in  the  data  base  saying 
that  he  is  or  i s n ' t,  then  ask  as  a  sub-question 
whet  er  x  is  female,  and  negate  the  answer", 
and  to  a  corresponding  segment  for  the  case 
where  x  is  female.  But  alternatively,  it  could 
correspond  to  a  section  of  the  storage  proce(cid:173)
dure  which  says  " if  you  have  to  store  that  x  is 
male,  then  store  also  that  x  is  not  female"  and 
similarly  for  the  symmetric  case.  The  retrieval 
procedure  does  backward  deduction,  whereas  the 
storage  procedure  does  forward  deduction. 
It  is 
one  purpose  of  PCDB  to  generate  code  for  and  to 
administrate  backward  and  forward  deduction. 
With  this  example  as  a  background,  l et  us  now 
describe  the  PCDB  program  by  tracing  what 
happens  when  some  selected  expressions  are  given 
as  "input",  i.e.  as  argument  to  functions  in  the 
package. 

Declarations  of  relations 

LISP  atoms  areused  for  relations  symbols, 
function  symbols,  and  object  symbols.  The  pur(cid:173)
pose  of  declaring  a  relation  is  to  provide  it 
with  a  number  of  functions  (lambda-expressions) 
which  are  properties  on  the  property-list  of  the 
relation.  For  example,  a  binary  relation  Father 

Session No.  5 Software Support 

161 

(such  that  Father(x,y)  means  "y  is  the  father 
of  x")  might  be  associated  with  at  least  the 
following  lambda-expressions: 

statements,  provided  they  have  a ll  been 
given  before  the  f i r st  time  the  relation 
(or  function)  is  used; 

(c)  declarations  may  be  i m p l i c i t.  Functions 

like  testdef  must  clearly  inquire  the 
property-1ist  of  their  argument  for  the 
flags  that  were  assigned  by  the  declara(cid:173)
t i o n. 
testdef  (and  similar  functions)  can  com(cid:173)
pute  default  values. 

If  these  flags  are  not  present,  then 

These  properties  are  used  for  assertions,  for 
closed  questions,  and  for  open  questions, 
respectively.  Additional  properties  are  needed 
for  deduction,  for  undoing  previous  assertions, 
etcetera. 
design  the  PCDB  package  so  that  a ll  of  these 
properties  are  generated  and  assigned  at  the 
point  where  FATHER  is  declared  to  be  a  binary 
relation.  However,  we  have  preferred  to  do 
things  as  follows  in  PCDB: 

It  would  have  been  possible  to 

at  declaration  time,  some  flags  are  put  on  the 
property-list  of  the  new  relation.  These  flags 
correspond  directly  to  the  information  in  the 
declaration.  No  functional  expressions  are 
generated. 

when  a  functional  property  is  needed,  the 
system  asks  for  it  by  doing  e.g. 

getd f i ll FATHER,  TESTDEF] 

where  the  function  getdflt  is  defined  essecti-
a l ly  as 

g e t d f l t [ a , i]  =  g e t [ a , i]  V  putprop[a,i[a], 
il 
The  f i r st  time  the  TESTDEF  property  of  FATHER 
is  asked  f o r,  the  value  of  get[FATHER,  TESTDEF] 
is  NIL,  so  testdef[FATHER]  is  evaluated,  stored 
as  a  property,  and  returned  as  a  value.  This  is 
the  required  function  definition. 
words,  the  functions  testdef,  storedef,  etc. 
a ll  return  lambda-expressions  as  values. 
On  each  succeeding  c a ll  for  the  TESTDEF  proper(cid:173)
t y,  it  can  be  retrieved  from  the  property-
l i s t,  and  it  need  not  be  computed  again.  (The 
value  of  the  function  testdef  is  memoized). 

In  other 

This  design  has  several  advantages: 

(a) 

(b) 

functional  properties  are  not  generated 
unless  they  are  really  needed; 
the  user  may  make  several  declarative 

In  fact,  this  is  a  simple  example  of  backward 
deduction. 

The  PCDB  package  contains  various  service 
functions  for  doing  declarations  in  a  conveni(cid:173)
ent  way.  However,  l et  us  ignore  the  conven(cid:173)
tions  of  those  service  functions,  and  look  at 
their  effect  in  the  example  of  the  relation 
Father,  where  the  declaration  might  have  imme(cid:173)
diate  effect  of  putting  the  following  proper(cid:173)
ties  of  the  property-list  of  the  atom  FATHER: 

The  functions  t e s t d e f [ r ],  storedef[r],  etc.  have 
been  defined  so  as  to  branch  on  get[r,KELTyFE], 
get[r,LOCATED],  etc.  and  to  return  a  functional 
expression  in  each  case.  With  the  given  decla(cid:173)
rations,  the  above-mentioned  lambda-expressions 
w i ll  be  obtained. 

The  PCDB  package  recognizes  different  kinds  of 
relations,  with  different  numbers  of  arguments 
(one,  two,  three,  or  more),  different  storage 
conventions  (on  property-lists  of  arguments,  on 
property-list  of  relation  symbol;  hashed  in  an 
array  is  planned,  etc.)  and  other  idiosyncra-
cies.  Since  each  relation  has  i ts  own  storage 

162 

Session No.  5 Software Support 

Session No.  5 Software Support 

163 

((P  Y)  (S  Y  Z)) 
(Q  Z  X)) 

conditions 
consequent 

In  this  example,  R(x,y)  is  selected  as  the 
antecedent,  since  it  is  to  be  the  triggering 
l i t e r al  ( i . e.  the  compiled  axiom  is  to  be  on 
the  ASSERTDEF  property  of  R).  In  general  one 
may  want  to  have  several  versions  of  the  same 
axiom,  with  different  choice  of  an  antecedent. 

Pass  2:  Convert  to  PROG-expression.  This  pass 
generates  a  very  inefficient  but  yet  executable 
prog-expression,  and  can  be  considered  as  the 
compilation  proper. 
generate  the  expression 

In  our  example  it  w i ll 

Each  argument  to  OR  is  a  compiled  axiom,  and 
each  compiled  axiom  calls  sysrecsearch  once 
for  each  sub-question  it  generates. 

SEARCHDEF  properties  (which  are  used  by 
syssearch  for  breadth-first  search)  are  similar 
to  RECSEARQiDEF's,  but  instead  of  calling 
sysrecsearch,  they  store  the  sub-question  on  a 
FIFO  subquestion  queue  which  the  function 
syssearch  maintains  as  the  value  of  a  prog 
variable,  which  then  is  free  in  the  SEARCHDEF. 

Compilation  of  rules 

The  compilation  process  starts  with  a  rule  ( i . e. 
a  non-ground,  and  usually  non-unit  clause),  and 
ends  when  this  rule  has  been  transformed  to 
LISP  code  and  inserted  in  an  ASSERTDEF, 
SEARCHDEF,  and/or  RECSEARCIDEF  property.  Compi(cid:173)
lation  is  done  in  several  passes.  Let  us 
i l l u s t r a te  it  with  a  concrete  example,  namely 
the  axiom 

Let  us  assume,  furthermore,  that  this  rule  is 
to  be  used  for  forward  deduction,  so  that  when 
R[x,y]  is  asserted,  and  Ply]  has  previously 
been  asserted,  then  for  a ll  z  such  that  S[y,z] 
has  been  asserted,  Q[z,x]  is  to  be  asserted. 
The  treatment  of  rules  for  backward  deduction 
is  analogous. 

Pass  I:  External  to  internal  notation.  This 
step  transforms  infixes  (such  as  A,  or  i n f ix 
relations)  to  prefix  form. 
of  the  variables,  and  classifies  the  l i t e r a ls 
as  an  antecedent,  a  l i st  of  conditions,  and  a 
consequent.  The  result  is 

It  also  makes  a  l i st 

((X  Y  Z) 
(R  X  Y) 

vari ables 
antecedent 

Thus  the  antecedent  determines  the  contents  of 
the  f i r st  line  (intended  as  lambda-variables 
e t c . );  each  condition  generates  a  bind-cont 
pair,  and  the  consequent  is  used  as  an  argument 
to  the  lambda-expression.  The  functions  in  this 
prog  are  defined  as  follows: 
b i n d [ v a r l i s t , l i t e r a l,  oontlabel,  backuplabel, 
depth]. 
If  v a r l i st  is  NIL,  then  bind  does  a 
recsearch  on  the  l i t e r al  with  the  indicated 
depth. 
is  v e r i f i e d ),  then  bind  does  a  goto  the 
contlabel,  where  the  next  condition  is  tested, 
otherwise  it  does  a  goto  the  backuplabel,  i.e. 
the  corrt-statement  of  the  previous  condition. 

the  value  is  T  ( i . e. 

If 

if  the  condition 

In  general,  the  v a r l i st  contains 

If  the  v a r l i st  is  non-NIL,  then  bind  binds 
(using  the  LISP  function  set)  the  variables  on 
the  v a r l i s t. 
a ll  variables  which  occur  in  l i t e r a l,  and  which 
have  not  occurred  in  the  antecedent  or  in  any 
previous  l i t e r a l.  In  position  B2  above,  bind 
w i ll  assign  to  ZQUE  the  l i st  of  a ll  z  which 
satisfy  S(y,z)  for  the  given  y,  and  to  Z  the 
f i r st  element  of  ZQUE.  Moreover,  bind  w i ll  go  to 
contlabel  if  the  value  of  zque  is  non-NIL  ( i . e. 
some  z  has  been  found)),  and  to  backuplabel 
otherwise. 

cont[varlist, 
tion  has  the  primary  purpose  of  doing  (in  the 
above  example) 

l i t e r a l,  backuplabel].  This  func-

Z  :=  car[zque] 
ZQUE  :=  cdr[zque] 

164 

Session No.  5 Software support 

When  zque  has  been  exhausted,  cont  goes  to 
backuplabel  (where  an  "earlier"  variable  w i ll 
be  cont-ed),  otherwise  it  leaves  control  to  the 
next  statement  in  the  prog  (where  the  next 
condition  is  bind-ed,  or  the  consequent  of  the 
clause  is  processed).  Moreover, 
if  the  v a r l i st 
is  empty,  the  corresponding  bind  only  served 
as  a  t e s t,  and  then  cont  should  t r i v i a l ly  go 
to  backuplabel. 

The  reason  cont  is  given  l i t e r al  as  an  argu(cid:173)
ment  is  that  in  cases  like 
'(R  X  Y) 

(CONT 

'M6) 

'(Y) 

if  R  has  been  declared  to  be  functional  in  the 
second  argument, 
nothing  to  continue  with.  Then  cont  can  again 
t r i v i a l ly  go  to  backuplabel. 

it  is  obvious  that  there  is 

close[form].  This  function  is  defined  as 

cons[car[form],evlis[cdr[form]]] 

In  the  example,  it  is  used  to  pick  up  the 
current  values  of  x  and  z.  - 
it  should  also  be 
remarked  that  the  variable  n  is  used  to  control 
the  number  of  new  nodes  that  are  introduced. 
N  is  decremented  when  we  have  forward  axioms 
like 

where  y  is  a  function  from  the  predicate-
calculus  viewpoint. 

Pass  3:  Partial  evaluation.  This  is  an  equiva-
lence  transformation  which  transforms  the  prog-
expression  into  another  expression,  which  has 
the  same  value  and  the  same  side-effects  for 
a ll  arguments,  but  which  runs  more  e f f i c i e n t l y. 
Partial  evaluation  is  possible  since  a ll  argu(cid:173)
ments  to  bind  and  cont  have  been  given  e x p l i c i t(cid:173)
l y.  For  example,  the  function  cont  is  defined 
as 
cont[vl,e,m]  = 
if  n u l l [ v ll 
elseif  n u l l [ c d r [ v l ]] 

( if 
else  prog2[  set[car[vl],car[eval[que[car 

then  goto[m] 
then 
then  goto[m] 

[ v l ] ] ] ]] 

set[que[car[vl]],cdr[eval 

[ q u e [ c a r [ v l ] ] ] ] ]] 

) 

else 

. .. 

where  que  is  a  packing  and  memoizing  function 
defined  so  that 

que[Z]  =  ZQUE 

In  p a r t i al  evaluation,  the  definitions  of  cont, 
que,  etc.  are  inserted  in  the  prog-expression; 
lambda-expressions  are  expanded,  and  function 
expressions  are  collapsed  whenever  possible, 

e.g.  so  that 

(CONS  x  y)) 

(CAR 
(EVAL  (QUOTE X)) 
(GOTO  (QUOTE  D) 
(QUOTE x)  y) 
(SET 

->  x 
-> 
-> 

->  x 

(GO  1) 
(SETQ  x  y) 

With  such  simplifications,  the  expression  in 
position  B2  above  is  reduced  to 

B? 

(COND 

((NULL  ZQUE)  (GO  Ml)) 
(T 

(SETQ  Z  (CAR  ZQUE)) 

(SETQ  ZQUE  (CDR ZQUE] 

which  is  quite  reasonable  code. 
Pass  4:  Prog-reduction.  Partial  evaluation  w i ll 
leave  a  lot  of  redundant  go  statements  in  the 
prog,  e.g. 

like 

(GO  L) 
• * • 

L  (GO  M) 

• • » 

In  this  pass,  the  obvious  simplifications  are 
made. 

In  a  f i f th  step,  the  prog-expression  is  inserted 
into  the  relevant  ASSERTDEF  or  other  ...DEF 
properties. 

It  should  be  noticed  that  pass  2  and  step  5  are 
the  only  steps  that  are  logically  needed.  Pass  1 
only  provides  some  added  notational  convenience, 
and  is  dispensable.  Passes  3  and  4  serve  to 
speed  up  the  program,  but  they  are  not  necessary 
For  testing  purposes,  it  is  sometimes  better  not 
to  use  them. 

Predicate-calculus 

functions 

Operators  which  are  functions  from  the  predicate 
calculus  viewpoint  (these  must  be  carefully 
distinguished  from  functions  in  the  LISP  system, 
which  in  a  certain  sense  interprets  the  predi(cid:173)
cate  calculus  expressions),  are  handled  in  the 
following  fashion: 

Every  PC  function  is  assigned  a  LISP  function 
d e f i n i t i o n,  which  follows  a  standard  pattern.  If 
g 
n-ary  LISP  function  which  returns  an  expression 
of  the  form 

is  an  n-ary  PC  function,  then  it  is  also  an 

(G8  G A B) 

where  G8  is  a  gensym-atom,  and  A  and  B  are  the 
evaluated  arguments  to  g.  This  expression  is 
called  an  H-expression.  (H  stands  for  Herbrand). 
It  is  generated  the  f i r st  time  g[A,B]  is  evalua(cid:173)
ted,  and  the  same  (with  eq)  expression  is  ob(cid:173)
tained  on  each  successive  evaluation  of  g[A,B]. 

Session No.  5  Software Support 

165 

The  atom  G8  carries  a  property-list,  on  which 
relations  can  be  stored.  Moreover,  the  proper(cid:173)
t y - l i st  of  the  f i r st  argument  (in  this  case, 
A),  contains  a  pointer  to  the  above  expression 
under  a  certain  indicator.  Notice  that  A  need 
not  be  an  atom,  but  it  may  i t s e lf  have  been 
generated  by  a  PC  function. 

When  functions  appear  in  axioms,  then  linear 
code  for  the  matching  ("unification") 
is 
generated  at  compile  time.  For  a  t r i v i al 
example, 

if  the  axiom 

is  declared  for  forward  usage,  then  it  is  re(cid:173)
written  in  an  early  compilation  step  as 

where  gg  is  considered  as  a  relation  which  has 
a  peculiar  mode  of  storage,  but  which  is  other(cid:173)
wise  similar  in  a ll  respects  to  user-declared 
relations.  If  the  user  declares  g  as  a  PC 
function,  then  the  necessary  declaration  of 
gg  is  implicit.  -  Notice  that  this  axiom  would 
not  be  re-written  if  it  were  declared  for 
backward  usage.  Thus  new  H-cxpressions  may  be 
introduced  during  deduction. 

Comparisons  with  some  existing  programs 

Several  existing  programs  show  similarities 
with  PCDB  in  some  respects.  We  shall  attempt 
a  comparison,  even  if  there  is  on  obvious  risk 
that  we  are  misinformed  about  some  aspect  of 
the  other  programs.  The  reader  should  take  the 
discussion  here  as  a  f i r st  approximation. 

QA3  and  QA3.5  (see  Green,  1969,  and  Garvey  and 
Kling,  1969).  QA3  is  a  resolution-oriented 
theorem-proving  program,  which  maintains  a 
"memory"  (set  of  clauses  that  are  stored  in 
the  system)  and  a  "clauselist"  (set  of  clauses 
that  are  active  during  a  deduction).  Clauses 
in  memory  are  indexed  by  predicate  l e t t er  and 
then  by  length;  clauses  on  the  clauselist  by 
length  only.  Moreover,  there  are  special 
heuristics  for  handling  e.g.  sequences  of  reso(cid:173)
lutions  with  binary  clauses  ("chaining").  QA3. 
is  similar  in  a ll  of  these  respects.  The  major 
differences  between  QA3  and  PCDB  are: 

1.  QA3  interprets  a ll  "rules";  PCDB  compiles 
them. 

2.  QA3  can  perform  resolution  proofs  according 
to  arbitrary  strategies.  The  proofs  performed 
by  the  PCDB  search  executive  and  the  compiled 
axioms  correspond  to  some  highly  restricted 
resolution  strategies. 

3.  QA3  treats  a ll  clauses  uniformly,  and  does 

not  store  ground  unit  clauses  ("facts")  in  a 
special  way  as  PCDB  does,  ( it  is  possible  to 
interface  QA3  with  a  program  for  such  storage, 
for  example  by  using  the  predicate  evaluation 
feature.  However,  it  seems  to  be  a  non-trivial 
task  to  make  this  work  f u l ly  automatically, 
and  to  implement  it  for  clauses  where  the  rela(cid:173)
tion's  arguments  have  been  constructed  with 
PC functions). 

The  difference  indicated  in  point  2  implies 
that  QA3  is  more  general-purpose  than  PCDB  i s, 
and  that  it  is  more  suitable  for  tasks  where  a 
major  part  of  the  clauses  as  non-ground  and 
non-unit.  On  the  other  hand,  points  1  and  3 
enable  us  to  guess  that  PCDB  should  be  much 
faster  in  those  cases  where  it  is  applicable, 
although  no  comparative  measurements  are  yet 
available. 

In  some  experiments, 

The  NIH  Heuristics  Laboratory  program  (see 
Norton,  1971,  and  Dixon,  1971).  This  program  is 
similar  in  approach  to  QA3. 
the  NIH  program  has  been  guided  by  heuristic 
search,  but  this  does  not  affect  the  comparison 
with  PCDB.  The  NIH  group  have  compiled  axioms 
using  partial  evaluation,  and  did  so  a  year 
before  us.  However,  their  compilation  (at  least 
as  described  in  the  paper  by  Dixon)  seems  to  be 
more  restricted.  It  is  performed  so  that 

resolve[c,c'] 

= 

(compile[c]) 

lc'] 

whereas  the  execution  of  one  compiled  rule  in 
PCDB  may  be  equivalent  to  a  large  number  of 
resolutions. 

Planner  (see  Hewitt,  1970).  Like  PCDB  and  unlike 
the  preceeding  programs,  Planner  is  a  substrate 
for  special-purpose  theoreni-provers,  rather  than 
a  general-purpose  theorem-prover.  Planner  is 
also  more  data-base-oriented  than  the  preceeding 
programs.  For  example,  Planner  uses  the  idea  of 
associating  procedures  with  relation  symbols, 
and  to  execute  these  for  storage  and/or  r e t r i e(cid:173)
val .  The  dichotomy  between  forward  and  backward 
deduction  is  present  in  Planner,  where  one 
speaks  about  "consequent"  and  "antecedent" 
theorems,  re  spectively. 

The  major  difference  is  that  Planner  uses  a 
general  high-level  control  mechanism,  which  is 
similar  in  approach  to  non-deterministic  prog(cid:173)
ramming.  This  control  mechanism  is  available  to 
the  user  of  Planner;  the  user  of  PCDB  does  not 
have  it  (except  t r i v i a l ly  when  he  can  u t i l i ze 
the  system's  search  executive  for  backward 
proof  in  some  round-about  way).  The  control 
mechanism  is  also  used  inside  Planner.  The 
occurrences  of  this  correspond  e.g.  to  the 
breadth-first  search  that  is  performed  by  the 
function  syssearch  in  PCDB,  and  to  the  loops 

166 

Session No.  5  Software Support 

that  are  generated  by  bind  and  cant  in  compiled 
axioms.  This  difference  is  correlated  with 
another: 

Planner  thinks  about  i ts  user  as  a  programmer, 
and  about  i ts  "theorems"  as  programs,  albeit  in 
a  very  machine-remote  programming  language 
which  assumes  the  above-mentioned  control 
structure.  PCDB  thinks  about  i ts  input  as  sta(cid:173)
t ic  information  ("declarations",  "facts", 
"rules"),  plus  some  tags  which  hint  when  and 
where  this  static  information  is  to  be  used; 
and  PCDB  takes  as  i ts  task  to  "digest"  i ts  i n(cid:173)
put  so  that  it  can  later  be  used  in  the  i n d i(cid:173)
cated  situations.  (This  attitude  of  PCDB  can  be 
overcome,  e.g.  using  the  function  do  that  was 
described  above,  but  it  is  s t i ll  significant). 
As  a  consequence  of  t h i s,  PCDB  assumes  predicate 
calculus  notation  as  input,  whereas  Planner 
assumes  i ts  own  input  language.  ( It  is  an 
interesting  problem  to  write  a  translator  from 
to  the 
predicate-calculus-plus-control-tags 
Planner  language).  Thus  PCDB  is  in  several 
respects  s l i g h t ly  closer  to  conventional 
theorem-proving  programs  than  Planner  i s. 

(a)  pass  I  of  compilation  ( i n f ix  to 

Present  status  and  planned  extensions  of  PCDB. 
Most  features  described  in  this  paper  are 
presently  working  (May  20,  1971).  The  excep(cid:173)
tions  are: 
prefix  notation);  (b)  pass  TV  of  compilation 
(prog-reduction)  and  the  function  collapsing 
step  in  pass  I II  (partial  evaluation); 
(c)  function-to-relation  conversion  in  compiling 
rules  with  PC  functions  in  them.  The  immediate 
plans  are  to  complete  these  steps;  to  add  a 
package  for  answering  open  questions  (exists  in 
outline);  and  to  compare  the  efficiency  of 
PCDB-generated  code  with  manually  produced 
code. 

Acknowledgement s 

Many  thanks  to  Lennart  Drugge,  Anders  Haraldson, 
Rene  Reboh  and  Arne  Tengvald,  who  helped  great(cid:173)
ly  with  testing  and  debugging  various  parts  of 
the  PCDB  program.  Thanks  also  to  David  Luckham, 
who  patiently  explained  some  of  the  intricacies 
of  resolutionology,  and  to  members  of  the  SRI 
A . I.  group  for  the  opportunity  to  discuss  and 
to  play  with  the  QA3.5  program. 

References 

Burstall,  R.M.  (1969) 

Formal  description  of  program  structure  and 
semantics  in  first-order  logic 
in  Meltzer  &  Michie  (eds)  Machine  I n t e l l i(cid:173)
gence,  Vol.  5  (Edinburgh,  1969) 

Burstall,  R.M.  (1970) 

Formalising  the  semantics  of  first-order 
logic  in  first-order  logic,  and  an  applica(cid:173)
tion  to  planning  for  robots 

Dixon,  John  K.  (1971) 

THE  SPECIALIZER:  A  Method  of  Automatically 
Writing  Computer  Programs 
NIH  Heuristics  Laboratory  (unpublished) 

Garvey,  Thomas  D.  and  Kling,  Robert  E.  (1969) 

User's  Guide  to  QA3,5  Question  Answering 
System 
SRI  A r t i f i c i al  Intelligence  Group,  Technical 
Note  15  (1969) 

Green,  Cordell  C.  (1969) 

The  application  of  theorem  proving  to 
quest ion-answering systems 
SRI  A r t i f i c i al  Intelligence  Group,  June  1969 

Hewitt-,  Carl  (1970) 

PLANNER:  a  Language  for  Manipulating  Models 
and  Proving  Theorems  in  a  Robot 
MIT  Project  MAC  A r t i f i c i al  Intelligence 
Memo  No.  168 

Manna,  Zohar  and  Waldinger,  Richard  J.  (1970) 

Towards  Automatic  Program  Synthesis 
Stanford  A r t i f i c i al  Intelligence  Project 
Memo AIM-127 

Nilsson,  Nils  (1969) 

intelligence  techniques 

A  mobile  automaton:  an  application  of 
a r t i f i c i al 
Paper  presented  at  the  f i r st  International 
Joint  Conference  on  A r t i f i c i al  Intelligence 
(1069) 

Norton,  Lewis  M.  (197]) 

Experiments  with  a  Heuristic  Theorem-Proving 
Program  for  Predicate  Calculus  with  Equality 
NIH  Heuristics  Laboratory  (unpublished) 

Palme,  Jakob  (1971) 

Making  Computers  Understand  Natural  Language 
in  Findler  (ed.),  A r t i f i c i al  Intelligence 
and  Heuristic  Programming 
Oxford  University  Press,  1971 

Sandewall,  Erik  (1970) 

Representing  natural-language  information  in 
predicate  calculus 
in  Meltzer  &  Michie  (eds)  Machine  I n t e l l i(cid:173)
gence,  Vol.  6  (Edinburgh,  1970) 

