From Logic Programming Semantics to the Consistency of Syntactical Treatments 

of Knowledge and Belief 

Informatics and Mathematical Modelling 

Technical University of Denmark 

Thomas Bolander 

tb@imm.dtu.dk 

Abstract 

This  paper concerns  formal  theories  for reasoning 
about  the  knowledge  and  belief of agents. 
It  has 
seemed attractive to researchers in artificial  intelli(cid:173)
gence to formalise these propositional  attitudes as 
predicates  of  first-order  predicate  logic.  This  al(cid:173)
lows  the  agents  to  express  stronger  introspective 
beliefs and engage in stronger meta-rcasoning than 
in  the  classical  modal  operator approach.  Results 
by  Montague  [1963]  and Thomason  [1980]  show, 
however, that the predicate approach is prone to in(cid:173)
consistency.  More  recent  results  by  des  Rivieres 
&  Levesque  [1988]  and  Morreau  &  Kraus  [1998] 
show that we can maintain the predicate approach if 
we make suitable restrictions to our set of epistemic 
axioms. Their results are proved by careful transla(cid:173)
tions from corresponding modal formalisms.  In the 
present  paper we  show  that  their results  fit  nicely 
into  the  framework  of logic  programming  seman(cid:173)
tics,  in  that  we  show  their  results  to  be  corollar(cid:173)
ies  of well-known  results  in  this  field.  This  does 
not  only  allow  us  to  demonstrate  a  close  connec(cid:173)
tion between consistency problems in the syntactic 
treatment of propositional attitudes and problems in 
semantics for logic programs, but it also allows us 
to strengthen the results of des Rivieres & Levesque 
[1988] and Morreau & Kraus [1998]. 

Introduction 

1 
The  approach  most often  used  in  constructing  formal  theo(cid:173)
ries  for  reasoning  about  multiagent  systems  is  to  formalise 
the  agents'  beliefs  and  knowledge  through  modal  opera(cid:173)
tors.  An  alternative  approach  is to  formalise  these proposi(cid:173)
tional  attitudes as predicates  of a  first-order  predicate  logic. 
This  has  several  advantages,  which  have  been  widely  dis(cid:173)
cussed in the literature [Davies, 1990; Attardi and Simi, 1995; 
Carlucci  Aiello  et al.y  1995;  McCarthy,  1997;  Grant  et a/., 
2000].  Most  importantly,  it  allows  us  to  quantify  over  the 
propositional objects of knowledge and belief as for instance 
in "agent  1  believes that everything known by agent 2 is also 
known by agent 1", formalised by 

This  formula  has  no  counterpart  in  the  classical  modal  op(cid:173)
erator approach,  since  if A'i  and  K2  were  modal  operators, 
we would not be able to apply them directly to the variable x 
(modal operators only apply to well-formed formulas).  Thus 
the predicate  approach gives  us  more  expressive power and 
the  ability  of agents  to  refer  to  the  totality  of their  own  and 
others beliefs, which is important in meta-reasoning. 

Unfortunately,  the  predicate  approach  easily  becomes  in(cid:173)
consistent,  since  the  added  expressive  power  allows  the 
agents  to  express  self-referential  beliefs  that  in  some  cases 
turn  out  to  be  paradoxical.  This  was  proved  by  Montague 
[1963] and Thomason [1980].  They prove that certain axiom 
schemes describing natural  properties of knowledge  and be(cid:173)
lief are inconsistent with formal arithmetic.  Their results are 
reviewed in Section 3.  Des Rivieres &  Levesque [1988] and 
Morreau & Kraus [1998] have shown there to be a way out of 
these inconsistency results:  to suitably restrict the set of sen(cid:173)
tences  that  we  instantiate  our  axiom  schemes  of knowledge 
and belief with.  These results are reviewed in Section 3  as 
well. 

In this paper we will  show that the results of des Rivieres, 
Levesque, Morreau and Kraus can be reduced to well-known 
results  in  logic  programming  semantics.  This  is  carried out 
in  Section 4.  In  Section  5  we  give  a  strengthening of their 
results, using again the connection to logic programming se(cid:173)
mantics. 

2  Terminology and Notation 
We will be using theories of first-order predicate logic to for(cid:173)
malise propositional attitudes of agents.  To prove the consis(cid:173)
tency  of these  first-order  theories,  we  use  results  from  logic 
programming  semantics.  Below  we  introduce  the  kinds  of 
logic programs and first-order languages we will be consider(cid:173)
ing. 

Logic Programs 

2.1 
All  logic programs considered  in this paper will  be proposi(cid:173)
tional.  Thus,  an  atom  is  simply  a propositional  letter,  and 
a literal is  either a propositional  letter p or its negation  - p. 
We take the symbols  true  and false to be among our propo(cid:173)
sitional  letters  with  the  obvious  intended  interpretation.  A 
clause is a formula of propositional logic on the form 

KNOWLEDGE  REPRESENTATION 

443 

where H is an atom, 
and all  Li  are literals.  A preposi­
tional program (or simply a program) is a (possibly infinite) 
set of clauses.  Herbrand models of programs are defined  in 
the  usual  way.  We  require that  all  models  assign the truth-
value true to the propositional  letter true and false to false. 
Given  a  program  P,  comp(P)  denotes  its  Clark  comple­
tion.  Since  we  work  only  with  propositional  programs,  the 
Clark completion  is particularly simple.  The Clark comple­
tion  of  P  is  the  following  set  of equivalences  in  infinitary 
propositional  logic:  for each atom A in P, 

•  if A  does  not  appear  as  head  of any  clause  in  P,  then 

A <~> false 

comp(P). 

•  otherwise  we have 

comp(P),  where 
is  the  set  of clauses  in  P  with  head 

A. 

Let P be a propositional program.  The dependency graph 
of P is the directed graph with  signed edges defined as  fol­
lows.  The  nodes  of the  graph  are  the  atoms  (propositional 
letters)  occurring  in  P excluding the  special  atoms  true  and 
false.  There  is  a  positive  edge  from  A  to  B,  denoted  by 
(A, B, -f),  if and only  if there is a clause  
Ln 
in  P  such  that  LL  -■=  B  for some 
.  If Lt  —  -*B 
then there  is a negative edge  from A to B,  denoted  (A, B,-). 
We say that A depends on B, denoted by A  <  B, if there is a 
proper path from A to B in the graph.  We say that A depends 
negatively on  B,  denoted by 
if there is a path from 
A to B containing at least one negative edge.  A program P is 
called  locally  stratified  if the  relation 
in the dependency 
graph of P is well-founded. 

First-Order  Languages 

2.2 
We  use  L  to  range  over  languages  of  first-order  predicate 
logic.  We take the connectives of first-order logic to be ->, A 
and  When using 
in formulas, these formu­
las are simply abbreviations of formulas containing only ->, A 
and  We  require  all  languages  L  to contain the  one-place 
predicate  symbols  T  and  P.  P  will  be  used  as  a predicate 
that picks  out  a  set of (codes  of)  formulas  in  L.  T will,  de­
pending on the context, be used to express one of our syntac­
tic  attitudes  belief or knowledge.  By  L  -  {T}  we  denote  the 
language  L  with  the  predicate  symbol  T  removed.  We  will 
assume that all considered languages contain a parametrised 
coding.  By  a  parametrised  coding  in  L  we understand  an 
injective map  r _1  from  the  formulas of L  into the terms of L 
satisfying: 
(i)  For any formula 

has the same free 

in  L, the term 
f 

is not itself a variable). 
in  L and any term r which is free 
obtained by substitut­

term 

variables as 

(but 

(ii)  For any formula 
~ 

for x  in 
ing T for all free occurrences of x  in 

is 

(iii)  The  coding  is  well-founded,  that  is,  there  is  no  infinite 
n is 

sequence  of f o r m u l a s s u ch  that-
a term in 

for  all 

 

We  refer  to  [Feferman,  1984]  for  the  construction  of  a 
parametrised coding.  Feferman's coding does not satisfy (ii), 
but  a  simple  variant  of  it  will. 
is  called  the  code  of 

The  intended  interpretation  of a  formula 
is that 
is  known"  or 'V  's  believed".  We  assume  all first-order 
languages  L  to  contain  the  language  of  Peano  arithmetic. 
Throughout the  paper,  by formal arithmetic  we  mean  Robin­
son's  arithmetic,  though any  other standard  formalisation  of 
arithmetic could have been used in its place.  We identify first-
order languages L with their sets of sentences.  By a sentence 
in L we understand a closed formula, that is, a formula with­
out any occurrences of free variables. The set of ground terms 
of L  is denoted Tcrms(L). 

To avoid confusion between formulas of propositional pro­
grams and formulas of first-order languages we will use Latin 
letters for the former and Greek letters for the latter. 

2.3  Regular  Formulas  and  RPQ  Formulas 
Wc now define the sets of first-order sentences which we in­
tend to prove that our axiom schemes of knowledge and belief 
can consistently be instantiated with. 
Definition 1. Let L be a first-order language. The set of reg(cid:173)
ular  formulas  ofL  is  the  least  set  satisfying: 
(i)  Any  atomic  formula  of 
(

is a regular formula. 
) a re  regular  formulas  and  x  is  a  variable,  then 

i

i

and 

:  • are regular formulas. 

(iii) 

is  a  regular formula  then 

If 
mula. 

is  a  regular for(cid:173)

Our definition  differs  slightly from  the one given by Mor-
reau and Kraus [1998].  Instead of using a parametrised cod­
ing,  they  have  an  (n  +  l)-place  predicate  symbol 
for 
, . ..  ,.rn)n), 
each  n,  such  that  instead  of  writing 
w h e r e a re  the  free  variables  of
they  would 
be  writing 
is  then  a  stan­
dard (non-parametrised) Godel coding.  To simplify  matters, 
we  have  chosen  to  take  care  of the  free  variables  by  using 
a  parametrised  coding  rather  than  by  introducing  infinitely 
many predicate  symbols of different arities. 

where 

 

As an example of a regular formula we have, for a suitable 

choice  of L, 

expressing that the agent knows Mike's telephone number.  If 
we have more than one agent,  we can of course  introduce a 
predicate symbol  Ti  for each agent i.  In that case the follow­
ing sentence also becomes regular: 

expressing that agent 1 believes agent 2 to have correct beliefs 
about the departure time of the train. As an example of a non-
regular formula we have 

expressing that the  user believes that the  system only  utters 
what  it  believes  to  be  the  case. 
It  is  non-regular  because 
System  is applied directly to a variable and not to the code of 
a formula. To allow expressing beliefs such as this one, Mor-
reau and Kraus [1998] extended the set of regular formulas to 
a more inclusive class called the RPQ formulas. 

444 

KNOWLEDGE  REPRESENTATION 

Definition 2. Let L be a first-order language. The set of RPQ 
formulas of L is the least set satisfying: 

(i)  Any  atomic  formula  of 
(

i

i

is an RPQ formula. 

) a re  RPQ formulas  and  x  is  a  variable,  then 

and 

are RPQ formulas. 

(iii) If ψ is an RPQ formula then 
(iv)  If  ψ  is  any  formula  in  L,  then 

formula. 

is an RPQ formula. 
is an RPQ 

This definition also differs from the one given by Morreau 
and Kraus [1998].  It defines a slightly more inclusive set of 
formulas,  and at the  same time  it is  simpler,  since  it avoids 
Morreau  and  Kraus'  use  of two  distinct  collections  of vari­
ables. 

By  regular  sentence  we  understand a closed  regular for­

mula, and by RPQ sentence a closed RPQ formula. 

is a theorem in formal arithmetic. 

3  Review of Previous  Results 
Consider the  following  axiom  schemes  in  a  first-order  lan­
guage  L: 
A l. 
A2. 
A3. 
A4. 
A5. 
A6. 
is  intended  to  denote  either 
As  already mentioned, 
'ψ  is  known" or 
is believed".  Thus, for instance, the first 
axiom scheme expresses that everything known (believed) is 
true.  It seems reasonable to characterise knowledge by the ax­
iom schemes A1-A4 and belief by A2-A6.  But the following 
theorem shows that this is not always possible. 
Theorem 3 (Montague |1963|, Thomason  [1980]).  Let  L 
be  a  first-order  language.  Formal  arithmetic  extended  with 
any of the following sets of axioms is inconsistent. 
(a)  The axiom  schemes  of knowledge,  AT A4,  instantiated 

over the sentences of L. 

(b)  The axiom  schemes  of belief,  A2-A6,  instantiated over 

the sentences of L. 

The  inconsistency  of (a)  is Montague's result,  and the  in­
consistency  of (b)  is  Thomason's  result.  A  way  out of these 
inconsistency results is to restrict the set of sentences that we 
instantiate A1-A6 with.  This strategy gives us the following 
positive results. 
Theorem 4 (des Rivieres and Levesque  [19881).  Let L be a 
first-order  language.  Formal arithmetic extended with  any of 
the following sets of axioms is consistent. 
(a)  The  axiom  schemes  of knowledge,  A1-A4,  instantiated 

over the regular sentences of L. 

(b)  The  axiom  schemes  of belief  A2-A6,  instantiated over 

the regular sentences of L. 

Theorem 5 (Morreau and Kraus |1998|).  Theorem  4  still 
holds when we replace  "regular sentences " with  "RPQ sen­
tences ". 

Theorem 4 is proved in Ides Rivieres and Levesque,  1988] 
by  a  careful  translation  from  a  corresponding first-order 
modal  logic.  Theorem  5  is proved  in  [Morreau  and  Kraus, 
1998] by a similar translation from a corresponding second-
order modal  logic.  In  the  following  section  we  give  proofs 
of their results taking a completely different route.  We show 
that the problems can be reduced to problems of consistency 
of particular  logic  programs. 

Instead  of working  directly  with  the  axiom  schemes  A l-
A6,  we  will  most  of  the  time  be  working  with  the  truth 
scheme which is the following axiom scheme: 

This is often sufficient since, as the following lemma shows, 
instances of axiom schemes A1-A6 are logical consequences 
of corresponding instances of the truth scheme. To prove that 
the axiom schemes A1-A6 instantiated over a set of sentences 
S  are  consistent,  it  thus  suffices to  prove  the  consistency  of 
the truth schema instantiated over that same set. 
Lemma 6.  Let L be a first-order language, and let S be a set 
of sentences in  L satisfying: 

if 

and  are in S then 

Let  M  be  a  model  of L  in  which 

in  S.  Then  all  of  AI-A  6  hold  in  M  for  all 

are in S. 

holds for  all 

Proof  That  Al  holds  in  M  when  ψ  is  in  S  is  a  trivial  con­
holds  in  M.  To 
sequence  of  the  fact  that 
is  in  S then 
see that A2  holds  in  M,  we  first  note that  if 
is in S as well, by assumption on S.  This 
so we get that 

sentence is an abbreviation  of 
the  following instance of the truth schema holds  in M: 

Using this together with the fact that Al  holds in  M,  we get 
that 
->  ψ)  holds in M.  That is, A2 holds in M. 
A3-A6 are proved to hold in M  in a similar manner. 

T{rT(ψ) 

4  From LP Semantics to Consistent 

Treatments of Knowledge and  Belief 

The results of this paper are based on the following lemma. 
Lemma 7 (Przymusinski [19871, Sato  [1990]).  /f  a  pro­
gram  P  is  locally  stratified  then  c:omp(P)  has  a  Herbrand 
model. 

Our formulation  is taken from  [Sato,  1990].  It should be 
noted that Sato is not considering infinite programs in his pa­
per,  but  his  proof carries  over  without  modification  to  this 
more  general  framework.  This  is  because  Sato  is  consider­
ing the set of ground instances of non-propositional programs 
rather than these programs themselves.  The set of ground in­
stances of a finite non-propositional program is in general an 
infinite propositional program, that is, the kind of logic pro­
gram we are considering in this paper. 

KNOWLEDGE  REPRESENTATION 

445 

Definition 8.  Let  L be a  first-order  language,  and let S  be 
a  set  of  sentences  in  L.  We  define  an  infinite  program  PL,S 
in  L,  the  program  PL,S 
as follows.  For  every sentence 
contains  a propositional  atom  denoted 
The clauses of 
PL,S  are  given  by: 

The  relation  between  models  of  the  program  PL ,S  and 
models of the first-order language L is given by the following 
lemma. 
Lemma 9.  Let L and S be as above,  /f  comp 
has a 
Herbrand model M  then  L has a Herbrand model  N  satisfy­
ing: 
(i) For every sentence 

in  L, 

(ii) 
Proof Assume M is a model of COHIP(PL.?). comp (PL,S) 
is the following set of equivalences: 

(1) 

(2) 
(3) 
(4) 
(5) 

Edges of the first type are called 
type are called 
edges and edges of the last type T-edges. 

edges of the third type are called 

, edges of the second 

We have to prove that 

in the dependency graph  of 

is locally stratified.  Actually, 
we will be proving something slightly stronger.  We will prove 
that the relation 
is well-
founded.  That is, we will prove that there does not exist any 
path of infinite length in the graph.  Assume the opposite, that 
is, assume the existence of an infinite path 
Claim,  o contains infinitely many T-edges. 
Proof of claim.  Assume  the  opposite.  Then  there  will  be 
containing no T-edges.  Thus all 
an infinite subpath 
edges on o'  must be 
But note that for any 
such edge, the start node will have higher syntactic complex­
the syntactic complexity 
ity than the end node. Thus, along 
will be strictly decreasing, which contradicts  
being infinite. 
This proves the claim. 
With every  formula  p  in L we now associate a natural num­
ber 
The T-degree is defined 
recursively by 

, called the T-degree  of 

of 

Let  N  be the following Herbrand model of L: 

is an atom and . 

• 

wise. 

,  other­

(i) is proved by induction on the syntactic complexity  of  
If 
ψ is an atom then (1) holds by definition of N.  To prove (1) 
for sentences of the  form 
we simply 
use (2), (3) and (4), respectively. For the case  of 
the proof 
is: 

where the first equivalence is by (3) and the third is by induc­
tion hypothesis.  The  two remaining cases  are proved  simi­
larly.  Thus (i) holds.  Furthermore, using (i) and (5), we get 
for all 

proving (ii). 

and thus 
□ 
Lemma 10.  Let L be a first-order language and let R be the 
set of regular sentences in L. The propositional program PL,R 
is  locally  stratified. 
Proof  To  simplify  matters  we  will  throughout this proof be 
identifying every propositional  letter 
with the correspond­
in L.  It should always be clear from 
ing first-order sentence 
the  context  whether 
is used to  denote the  first-order  sen­
tence or the corresponding propositional letter.  Thus, by the 
identification, the nodes of the dependency  grapl  of PL,R  are 
all sentences in L.  The edges are: 

The well-foundedness of the parametrised coding ensures that 
d is well-defined.  By the above claim, 
contains an infinite 
number of T-edges.  Let  t  be the end node of such an edge. 
Then ψ is regular.  Let 
be the infinite subpath of  having 
ψ as its start node.  Then every node on  must be a regular 
formula (c.f. the definition of a regular formula). This implies 
that every edge on 
(i)  either a 
(ii)  or of type 

does not con­

is 

tain T(x)  as a subformula. 

Item (ii) follows from that fact that when x is a variable then 
T(x)  is not a regular formula, and therefore no formula hav­
ing  T(x)  as  a  subformula  can  be  regular  either.  Now  note 
that  on  any  edge  of type  (i)  or (ii),  the  T-degree  of the  end 
node  will  be  less  than  or equal  to  the  T-degree  of the  start 
node.  Thus  the  T-degree  will  be  monotonically  decreasing 
along a' and must therefore be constant from some point.  But 
then from this point it can not contain any T-edges, since the 
T-degree of the end node of such an edge is always one less 
than the T-degree of the start node. This contradicts the claim 
above. 

Lemma 11.  Let  L  be a  first-order  language and let S be a 
locally  stratified  then  any 
set  of sentences  in  L. 
Herbrand model  of. 
can be expanded into a Herbrand 
model of L in which 

holds  for  all 

If  PL,S 

in S. 

446 

KNOWLEDGE  REPRESENTATION 

Proof.  Let  M  denote  a  Herbrand  model  of L  -  {T}.  Let  P 
be the program 

extended with the following clauses: 

true,  if 
false,  if 

is an atom in 
is an atom in 

PL,S  is  assumed  to  be  locally  stratified,  and  since  P  has 
then  P  must  be  lo­
the  same  dependency  graph as 
cally  stratified as well.  Therefore comp(P)  has a Herbrand 
model  M',  by Lemma 7.  Finally, Lemma 9 gives us the exis­
tence of a Herbrand model  N  of L in which the equivalences 
in  S.  To  see that ,V expands M 
is  an  atom  in  L  -  {T}  then 

hold  for all 
we just have to note that  if 

5  Strengthening the Results 
We now strengthen the results  obtained  above.  We  want to 
define a set of formulas more inclusive than the RPQ formulas 
that the truth scheme 
can safely be instantiated 
with.  For this we need a couple of new definitions. 
Definition 14. Let L be a first-order language and let ψ be a 
formula  in  L.  The  set  of  formulas  occurring  in  ψ  is  defined 
as the least set  containing  and  satisfying: 

•If 

• 

a  subformula  of  a  formulaoccuring in 

is occuring  in 

then 

is occurring 

inthen 

is occurring  in 

and 

where the last implications are by (i) in Lemma 9. 
Theorem  12.  Let L be a first-order language and let U be a 
theory  in  L  -  {T}  containing  formal  arithmetic.  If  U  has  a 
Herbrand  model  then  U  extended  with  any  of the following 
sets of axioms has a Herbrand model. 

(i)  The axiom scheme 

regular sentences of L. 

instantiated  over  the 

(ii)  The  axiom  schemes  of knowledge,  A1-A4,  instantiated 

over the regular sentences of L. 

(iii)  The  axiom  schemes  of belief  A2-A6,  instantiated over 

the regular sentences of L. 

Proof  Assume  U  has  a  Herbrand  model  M.  Let  R  denote 
the  set  of regular  sentences  in  L.  By  Lemma  10,  PL,R 
is 
locally stratified.  So by Lemma  11, M can be expanded into 
a  Herbrand  model  N  in  which 
holds  for  all 
This  proves  (i).  (ii)  and  (iii)  then  immediately 
regular 
□ 
follow, using Lemma 6. 

Theorem  4  is  an  immediate  consequence  of  Theorem  12, 
when  taking  U  to  be  formal  arithmetic.  The  machinery  we 
have introduced can also be applied to prove Theorem 5.  It is 
an immediate consequence of the following corollary to The­
orem 12. 
Corollary  13.  Theorem  12 still holds when we replace  "reg(cid:173)
ular sentences" with  "RPQ sentences".  Furthermore,  the ex(cid:173)
tension  of V  in  the  Herbrand model  constructed  will  be  the 
set of codes of regular sentences. 
Proof  Let  S  denote  the  set  of RPQ  sentences  of L.  Modify 
the program 

by removing every clause of the form 

where r is not the code of any regular sentence.  Call the new 
program  QL,S- 
It  is  easy  to  see  that  QL,S  is  locally  strat­
ified,  using  the  argument  given  in  the  proof of Lemma  10. 
Lemma  11  still holds when we use QL,S  instead of  PL,s  so 
any  Herbrand  model  of U  can be  expanded  into  a  model  of 
L  in  which 
holds for all RPQ sentences.  This 
proves  (i)  in  Theorem  12  with  "regular sentences"  replaced 
by "RPQ sentences",  (ii) and (iii) then follows from Lemma 
6. 
D 

is a formula occurring in 

Assume 
to be negative  if  occurs in a formula a where 

,  The occurrence is said 
occurs in 
. Otherwise the occurrence is called positive. An occurence 
is said to  be protected  if  occurs  in  a formula  a 

occurs in 

of 
in 
where 

and 

A 
)  when  A  = 
but  negative 

Thus,  for  instance,  occurs  in  formulas  such  as 

but  not  in 

has positive occurrence  in 

T. 
occurrence  in 
Definition  15.  Let  L  be  a  first-order  language.  A formula 
in  L  is  said  to  be  weakly  RPQ  if for  any  variable  x,  the 

formula  T(x)  only  occurs positively  or protected  in 

Note that in an  RPQ formula, every occurrence of T(x)  for 
some  variable x  is  protected,  so  every  RPQ  formula  is  also 
weakly  RPQ.  Thus  the  set  of RPQ  formulas  is  a  subset  of 
the  set  of weakly  RPQ  formulas.  It  is  furthermore  a  proper 
subset,  since among the weakly RPQ formulas we have e.g. 
which is not RPQ. The previously 
obtained results can be extended to the weakly RPQ formulas. 
Theorem  16.  Let  L  be  a  first-order  language  and let  U  be 
a  theory  in 
If U  has  a  Herbrand  model,  then  U 
extended with the axiom scheme 

instantiated over the set of weakly RPQ sentences has a Her­
brand model. 

Proof  Let  S  denote  the  set  of weakly  RPQ  formulas.  Us­
ing Lemma  11,  it suffices to prove that  PL,S  is  locally strat­
ified.  As  in  the  proof of Corollary  13,  we  can  consider the 
modified  program  QL,S  instead.  To  obtain  a  contradiction, 
assume  QL,S  is not locally stratified.  Then 
in the depen­
is not well-founded, that is, there must 
dency graph  of 
exist  an  infinite path 
containing  infinitely  many  negative 
edges.  As in the proof of Lemma  10, we get that  must con­
be the end node of such 
tain infinitely many T-edges.  Let 
an edge.  Then 
be the infinite sub-
path  of  having this node as its start node.  Then every node 
on  must be weakly RPQ.  As noted in the proof of Lemma 
10, if every edge on 
(i)  either a 
(ii)  or of type 

where  a(x)  does  not  con­

is weakly  RPQ.  Let 

is 

tain T(x)  as a subformula, 

KNOWLEDGE  REPRESENTATION 

447 

.  Thus,  in every  formula 

then 
can not be infinite. Thus, every node on _  must have 
an  occurrence  of T(x)  for  some  variable  x.  Since  all  nodes 
arc  weakly  RPQ,  in  each  of these  T(x)  is  either positive  or 
protected.  But  if T(x)  occurs protected  in 
there can be no 
infinite path  starting at 
T(x)  must  occur  positively  (for  some  variable  x).  But  this 
implies that all edges in the path are positive, which contra­
dicts our assumption. 
The  above theorem  also  relates to a result by  Perlis  [1985]. 
Perl is showed that a modified truth scheme 
is consistent  with arithmetic.  It  is easily seen that the set of 
instances of the (unmodified) truth scheme shown to be con­
sistent  by  Perlis'  result  is  contained  in  the  set  of instances 
shown to be consistent by Theorem  16. 

In view of the results by Montague and Thomason (Theo­
rem 3),  there  is a limit to how many  instances of our axiom 
schemes  we  can  add  while  still  retaining  consistency.  The 
set of weakly RPQ sentences is quite close to this limit, as is 
made clear by the following example. 
Example.  Let  L  be  a  first-order  language  containing  three 
one-place predicate symbols A, V and T. One of the simplest 
examples of a formula which is  not  weakly  RPQ in  L  is the 
formula 
In 
ψ,  T(x)  occurs  negatively  and  unprotected  (since 
Let U be the theory consisting of the following axioms 

.  Let us call this formula 

(7) 

(6) 

U obviously has a Herbrand model M, but we will show that 
U extended with the single axiom 

(8) 
does not have a Herbrand model.  This shows that Theorem 
16 no longer holds if we to the weakly RPQ sentences add a 
sentence such as 
Assume, to obtain a contradiction, that 
there exists a Herbrand model  N  in which all of (6), (7) and 
(8) holds. Then we obtain the following contradiction: 

6  Conclusion 
We have been showing that results on the consistency of the 
predicate  approach  to  knowledge  and  belief can  be  proved 
through  the  use  of well-known  results  from  logic  program­
ming  semantics.  This connects  the two research  fields  in  a 
new and interesting way, and have furthermore allowed us to 
strengthen the previously known results on the consistency of 
the predicate approach.  It is expected that the connection be­
tween the two fields can be pursued further to get even better 
consistency results. This might be done by using some of the 
results  from  the  literature  on  logic  programming  semantics 
that strengthen Lemma 7. 

Acknowledgments 
I would like to thank the following persons for guiding me in 
the  direction that  led to  this paper:  J0rgen  Fischer Nilsson, 
Mai  Gehrke,  Joao Alexandre  Leite  and Ken  Satoh.  Special 
thanks  to  Roy  Dyckhoff for his  interest  in  my  work  and  his 
many valuable comments. 

References 
[Attardi and Simi,  1995]  Guiseppe Attardi  and  Maria  Simi. 
A  formalization of viewpoints.  Fundamenta Informaticae, 
23(2-4): 149-173, 1995. 

[Carlucci  AIELLO  et  al,  1995]  Luigia  Carlucci  Aiello,  Marta 
Cialdea,  Daniele Nardi,  and Marco  Schaerf.  Modal  and 
meta languages: consistency and expressiveness.  In Meta-
logics and logic programming, pages 243-265. MIT Press, 
1995. 

[Davies,  1990]  Nick  Davies.  A  first  order  logic  of truth, 
knowledge  and  belief.  Lecture  Notes  in  Artificial  Intel-
ligence, 478:170-179, 1990. 

[des Rivieres and Levesque,  1988]  Jim  des  Rivieres  and 
Hector J.  Levesque.  The  consistency  of syntactical  treat­
ments  of knowledge.  Computational Intelligence,  4:31— 
41,  1988. 

[Feferman,  1984]  Solomon Feferman.  Toward useful  type-
free theories I. The Journal of Symbolic Logic, 49( 1 ):75-
111,1984. 

[Grant etal, 2000]  John  Grant,  Sarit  Kraus,  and  Donald 
Perlis.  A logic for characterizing multiple bounded agents. 
Autonomous Agents and Multi-Agent Systems,  3(4):351— 
387, 2000. 

[McCarthy,  1997]  John  McCarthy.  Modality  si!  Modal 

logic, no!  Studia Logica, 59(l):29-32,  1997. 

[Montague,  1963]  Richard  Montague. 

Syntactical  treat­
ments  of modality,  with  corollaries  on  reflection  princi­
ples  and  finite  axiomatizability.  Acta  Philosophica  Fen-
nica,  16:153-166,  1963. 

[Morreau and Kraus,  1998]  Michael  Morreau  and  Sarit 
Kraus.  Syntactical  treatments  of propositional  attitudes. 
Artificial Intelligence,  106(1): 161-177,  1998. 

[Perlis,  1985]  Donald Perlis.  Languages with self-reference 

I.  Artificial Intelligence,  25:301-322,  1985. 

[Przymusinski,  1987]  T.  Przymusinski.  On  the  declarative 
semantics  of deductive  databases  and  logic  programs.  In 
J. Minker, editor, Foundations of Deductive Databases and 
Logic Programming,  pages  193-216.  Morgan  Kaufmann, 
1987. 

[Sato,  1990]  Taisuke  Sato. 

and  their  consistency. 
9(l):33-44, 1990. 

Completed  logic  programs 
Journal  of Logic  Programming, 

[Thomason,  1980]  Richmond H. Thomason.  A note on syn­
tactical treatments of modality.  Synthese, 44(3):391-395, 
1980. 

448 

KNOWLEDGE  REPRESENTATION 

