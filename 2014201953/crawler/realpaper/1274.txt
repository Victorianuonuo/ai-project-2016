A  DEFINITION-DRIVEN  THEOREM  PROVER 

Session  3 
Logic; 
I 

Theorem  Proving  and 

George  W.  Ernst 

Department  of  Computing  and 

Information  Sciences 

Case  Western  Reserve  University 

Cleveland,  Ohio 

44106 

Abstract 

This  paper  describes  a 

theorem  prover,  running  on 

t h at  can  prove  some  theorems 

Involve  a  r e l a t i v e ly 

large  number  of 

theorems  require  special  methods  be(cid:173)

t h e ir  statements  contain  a 

t h e ir  proofs  are  quite 

large  number  of 
long  although 

a  PDP-10-TENEX  system, 
whose  statements 
d e f i n i t i o n s. 
cause 
clauses  and 
s t r a i g h t - f o r w a r d. 

Such 

(2) 

(1) 

it 

i n to 

A 

theorem 

is  proven  by 

f i r st  subdividing 

The 

to  prove 
Involves 

then  using  a  standard  r e s o l u t i on 

f or  defined  q u a n t i t i es  and 

"simple"  subgoals  and 
the  subgoals. 
theorem  prover 
the  s u b s t i t u t i on  of  d e f i n i(cid:173)
of 
t h is  process 
l o g i c al 
tions 
s i m p l i f i c a t i o n. 
is  more  s i m i l ar 
a  natural  deduction  system  than  a  r e s o l u t i on  system, 
shown 
l o g i c.  However, 
i n t e r e s t i ng  higher-order 
example. 

to  be  complete  when  r e s t r i c t ed 

the  theorem  prover  can  deal  with  some 

This  process  which 

is  shown  by  an 

theorems  as 

f i r s t - o r d er 

the  use  of 

f i r st  part 

to 

to 
is 

1. 

Introduction 

from  our 
in  solving 

The  motivation 

f or 

t h is  research  stems 

to  us 

they  can 

t r u ly  d i f f i c u lt  problems  on 
It  also  seems 

theorem  provers  w i ll  be  used 

view  of  how 
r e a l - l i fe  problems.  We  believe  t h at  the  f i r st  few  ap(cid:173)
p l i c a t i o ns  of 
oriented  because,  at 
theorem  provers  can  only  solve  r e l a t i v e ly  easy  problems 
and  1t  w i ll  probably  be  q u i te  a  while  before 
solve 
t h e ir  own. 

theorem  provers  w i ll  be  man-machine 
the  a r t, 

the  current  s t a te  of 

i n to 
to 
terms  of 

that  theorem  provers  w i ll  be 
large  number  of  problem-oriented  p r e d i(cid:173)
Some  of 
that 

to  d i v e r s i ty  of  real  world  data. 

faced  with  a 
cates  due 
these  predicates  w i ll  be  s u f f i c i e n t ly  basic 
w i ll  of  necessity  be  b u i lt 
However,  most  of 
them,  due 
have 
to  be  defined  1n 
l o g i c al  connectives. 
On  the  basis  of 

the 
theorem  prover. 
t h e ir  abundance,  w i ll 
the  basic  predicates  and 

these  assumptions,  we  feel 

that 
the  machine  w i ll  be  p r i m a r i ly  a  big  data 

r e l a t i v e ly  s t r a i g h t - f o r w a rd  part  of 

theorem  proving  which  might  be  q u i te 
to  "wading" 
theorems 

the  r o le  of 
f i l t e r,  doing 
the 
the  most  p a r t, 
t h is  amounts 
t i o ns  and  previously  proven 
theorems),  many  of  which  are  q u i te 
proving 
parts. 
then  would  select  a  n o n - t r i v i al  part  to 
work  on  next  and  would  give  the  machine  " h i n t s"  on  how 
to  go  about  proving 
forms,  such  as  conjecturing 
lemmas, 

lengthy. 
For 
through  d e f i n i(cid:173)
(and  perhaps  meta-

the  easy  parts  and 
The  man 

The  hints  w i ll  be  of  various 

tedious; 
the  n o n - t r i v i al 

important  v a r i a b l e s,  etc. 

induction  hypothesis, 

the  value  of 

i s o l a t i ng 

long  and 

they 

the 

i t. 

This  paper  describes  a 

theorem  prover,  TPI, 

that 

lengthy  but  straightforward 

contains  defined  q u a n t i t i e s. 

can  prove  some 
whose  statement 
TPI  1s  a 
theorem  prover, 
the 
designed  are  s i m i l ar 
of  problems 
a p p l i c a t i on  of 
TPI  1s  somewhat  d i f f e r e nt 

t o t a l ly  mechanical,  and  not  a  man-machine 
f or  which  1t 

types  of  problems 
to  what  we  feel  w i ll  be 

is 
the  kind 

that  a  machine  should  do  1n  a  man-machine, 
the  approach  of 

theorem  proving. 

Since 

than  a  standard  r e s o l u t i on 

theorems 

Although 

theorem  prover,  1n  the  next  section  we  will  give  an 
example  of  how  1t  proved  a  particular  theorem.  This 
will  motivate  Sec.  3  which  describes  TPI  1n  fair  de(cid:173)
t a i l. 

2.  An  Example  of  TPI 

In  this  section  we  give  an  example  of  how  TPI 

proved  the  theorem  that  the  direct  product  of  2  groups 
1s  a  group.  The  statement  of  this  theorem  1s* 

The  operator  and  inverse  of  the  product  group  are  ° 
and  J,  respectively,  and  are  defined  below. 
In  the 
f i r st  line  of  (1)  (G  univ)  Indicates  that  G  is  some 
element  of  the  universe,and (+(FNG  G  G))  indicates  that 
+  is  a  binary  operator  on  6.  The  remainder  of  the 
f i r st  line  indicates  that  -:G   G and 0 1s  some element 
of  G.  The  second  line  of  (1)  states  the  same  things 
about  H,*,I  and  E.  Thus  the  f i r st  two  lines  univer(cid:173)
sally  quantify  8  variables  subject  to  the  restrictions 
that  they  must  lie  1n  certain  domains.  Gr  1s  a  de(cid:173)
fined  predicate  having  4  arguments,  a  group,  Its  oper(cid:173)
ator,  its  Inverse  and  Its  Identity,  respectively.  Thus, 
the  last  line  of  (1)  states  that,  If  G  and  H  are 
groups  then  so  is  GXH  (cartesian  product  of  G  and  H). 
The  operator  °  of  the  latter  1s 

is  the  usual  operator  of  abstrac(cid:173)
In  this  expression 
tion.  The  meaning  of  (2)  1s  that  1t  1s  a  two-place 
function.  The  string  (u  GXH)  Indicates  that  the  f i r st 
argument  which  gets  substituted  for  u  must  be  1n  the 
set  GXH.  1 
(u)  is  the  f i r st  element  of  the  ordered 
pair  u  while  2nd(u)  is  the  second  element  of  u.  The  . 
1n  (2)  1s  the  operator  which  takes  two  terms  and  makes 
an  ordered  pair  out  of  them.  An  example  of  the  use  of 
(2)  is  a°b.  This  expression  1s  defined  1f  both  a  and 
b  are  1n  GXH  and  the  term  a°b  evaluates  to  the  ordered 
pair 
+,  *  are  free  variables  1n  (2)  which  are  quantified  by 
the  quantifiers  1n  (1)  because  °  occurs  in  (1). 

(1s t(a)+1s t(b),2n d(a)2n d(b)).  Note  that  G,  H, 

The  Inverse  J  of  the  product  group  1s  defined  1n  a 

manner  similar  to  (2)  as 

(3) 

The  Identity  of  the  product  group  1s  given  1n  (1)  as 
the  ordered  pair  (0,E). 

To  prove  {1)»  TPI  must  know  the  definition  of 

group,  1s t,  etc.  TPI  has  a  repertoire  of  definitions 
and  previously  proven  theorems  which  includes  these 
definitions  and  other  definitions,  such  as  definition 
of  homomorphlsm,  that  are  not  relevant  to  proving  (1). 
We  will  not  state  the  definitions  because  their  con(cid:173)
tent  will  become  clear  by  their  use. 

First  of  a l l,  TPI  simplifies  (1)  which  1n  this 

•There  are  3  differences  between  (1)  and  the  formula  given  to  TPI:  An  example  of  the  f i r st  Is  that 

Gr(G,+,-,0)  1s  given  to  the  machine  as  (Gr  G  +  -  0).  The  second  1s  that  infix  notation  1s  used  1n  (1)  and  thirdly 
parentheses  are  omitted  in  (1)  if  their  omission  causes  no  ambiguity. 

51 

case  Involves  putting  Skolem  functions  1n  for  the  uni(cid:173)
versally  quantified  variables  in  (1).  For  notational 
purposes  we  will  use  the  same  names  as  the  variables 
and  thus  (1)  becomes 

In  this  formula  G,  +,  etc.  are  constants  and  their 
domains  are  known  because  of  the  f i r st  2  lines  of  (1), 
e.g.,  +  Is  a  binary  operator  on  G.  Next,  TPI  sees  from 
the  definition  of  group  that  1t  is  sufficient  to  prove 
that  o  1s  associative;  J  is  a  right  inverse;  and  (0,E) 
is  a  right  identity.  The  resulting  formula  is  imme(cid:173)
diately  simplified  and  stated  as  the  following  three 
subgoals  (or  lemmas)  which  TPI  will  work  on  separately: 

(5) 

(6) 

(7) 

In  these  formulae  a,  b,  c,  d,  e  are  Skolem  functions 
that  are  elements  of  GXH. 
(5),  (6),  (7)  state  respec(cid:173)
tively  that  (0,E)  is  a  right  identity,  J  is  a  right 
inverse  and  °  Is  associative.  The  reader  will  note 
that  (5),  (6)  and  (7)  are  more  complicated  than  text-
book  formulae  because  they  contain  terms  that  can  ob(cid:173)
viously  be  simplified  such  as  lst(0,E)  which  is  just  0. 
However,  these  formulae  were  produced  directly  from  the 
definition  of  a  group  and  such  simplification  will  oc(cid:173)
cur  later  in  the  proof. 

TPI  next  processes  (5)  1n  much  the  same  way  that 

It  sees  from  the  definition  of  an 

it  processed  (1). 
ordered  pair  that  two  ordered  pairs  are  equal  if  their 
f i r st  components  are  equal  and  if  their  second  compon(cid:173)
ents  are  equal.  Using  this  definition  on  (5),  the 
following  two  new  subgoals  are  produced: 

(8) 

(9) 

When  TPI  processes  (8)  it  notes  that  (8)  cannot 
be  further  divided  into  subgoals,  and  thus  calls  on  a 
resolution-based  theorem  prover  called  the  subgoal 
solver  (SGS),  to  solve  1t.  But  f i r st  1t  replaces  de(cid:173)
fined  quantities  by  their  definitions  and  then  reduces 
the  formula  to  normal  form.  Fig.  1  gives  the  result 
of  processing  (8)  1n  this  way.  In  Fig.1  the  variable  x 
is  restricted  to  be  1n  G.  This  information  1s  checked 
implicitly  in  TPI  whereas  a  standard  resolution  theo(cid:173)
rem  prover  would  append an 
ing  an  x,  e.g.,  the  f i r st  clause  in  Fig.  1  would  be 
V  x+0=x.  Similarly y  1s  restricted  to  be  1n  H 

to  each  clause  contain(cid:173)

while  u  and  v  are  not  restricted. 

The  definition  of  a  group  Indicates  that  +  and  * 
Instead  of  representing  this  Infor(cid:173)

are  associative. 
mation  as  clauses,  the  operators  are  "flagged"  and  the 
SGS  processes  them  as  n-ary  operators. 

As  the  reader  can  easily  see,  F1g.  1  gives  a 

52 

contradiction  in  just  two  steps.  From  clauses  9  and  12 
in  F1g.  1  we  get 
l s t ( a ) + 0 = { a ).  From  this  and  clause 
1  In  F1g.  1  we  get  1st{a)^ist(a)  which  1s  contradiction. 
TPI  processes  (9)  almost  identically  to  the  way  in 
which  1t  processed  (8).  The  normal  form .of  (9)  1s  the 
f i r st 11 clauses In Fig. 1 and 
which  also  has  a  two-step  contradiction. 

2nd(a)+2nd(O,E)=2nd(n) 
TPI  then  proceeds  to  (6)  and  uses  the  definition 

of  ordered  pair  to  divide  (6)  and  Into  the  following 
two  subgoals: 

(10) 

(11) 
(10)  equates  the  f i r st  components  of  the  left  and  right 
sides  of  the  =  in  (6)  while  (11)  equates  their  2nd  com(cid:173)
ponents. 

Since  (10)  cannot  be  divided  into  subgoals,  it  is 

reduced  to  normal  form,  which  is  just  the  f i r st  11 
clauses  in  F1g.  1  and 

(12) 

This  is  passed  to  the  SGS  which  easily  solves  1t  in  3 
steps.  From  (12)  and  clause  9  1n  Fig.  1,  lst(b)+-(lst 
(b))=lst(o,E)  1s  deduced.  This  and  clause  3  1n  F1g.  1 
gives  O=1st(0,E)  which  by  clause  9  in  Fig.  1  implies 
0=0 which  is  a  contradiction. 

TPI  processes  (11)  in  much  the  same  way  as  (10) 
proving  it  also  1n  three  steps.  Proceeding  onto  (7), 
TPI  breaks  it  Into  2  subgoals  by  separately  equating 
the  two  components  of  the  left  and  right  of  the  =  1n 
(7).  Since  the  generation  of  these  subgoals  is  so  sim(cid:173)
ilar  to  the  generation  of  the  above  subgoals  we  will 
not  state  the  subgoals  1n  this  paper.  Also  their 
proofs  will  be  omitted  because  they  are  just  3  steps 
apiece. 

This  concludes  the  proof  of  (1). 

In  summary  then, 
TPI  divides  (1)  into  6  terminal  subgoals  or  lemmas  and 
proves  these  6  subgoals  independently  which  constitutes 
a  proof  of  (1).  The  purpose  (5),  (6)  and  (7),  which 
are  intermediate  subgoals,  is  to  facilitate  the  genera(cid:173)
tion  of  the  6  terminal  subgoals;  i . e .,  (5),  (6)  and  (7) 
are  not  directly  proven  by  the  SGS. 

3.  Description  of  TPI 

The  purpose  of  this  section  1s  to  describe  the  in(cid:173)
ternal  mechanisms  of  TPI  which  is  a  LISP  program  cur(cid:173)
rently  running  on  a  PDP-10  under  TENEX.  Due  to  space 
limitations,  the  description  will  be  very  brief.  For 
this  reason  the  Interested  reader  1s  referred  to  ! 
which  is  a  f a i r ly  detailed  description  of  TPI. 

TPI  operates  from  a  repertoire  of  definitions  not 

all  of  which  are  needed  in  any  particular  theorem.  Cur(cid:173)
rently,  there  are  over  a  dozen  defined  quantities  1n 
TPI's  repertoire. 
Incorporated  into  the  definitions 
are  also  some  previously  proven  theorems.  All  of  this 
Information  Is  contained  on  two  l i s ts  BD  (backward  de(cid:173)
finitions)  and  FD  (forward  definitions). 

All  statements  on  BD  are  of  the  form  Q(A-+B)  while 
FD  statements  are  of  the  form  q(B=C).  B  1s  the  defined 
quantity  and  Q  1s  a  string  of  restricted  quantifiers.  A 
together  with  C  comprises  the  definition  of  B. 
In  ad(cid:173)
dition,  certain  previously  proven  theorems  about  B  may 
also  be  Incorporated  into  these  statements  as  described 
1n  Sec.  4.  As  an  example,  consider  the  definition  of  a 
group  on  BD. 

In  this  case  B  1s  Gr(G,+,-,0)  and  A  1s 

53 

Most  contemporary  theorem  provers  have  difficulty 

proving  a  theorem  whose  proof  is  relatively  long  or 
whose  statement  is  relatively  long  (i.e., 
large  number 
of  clauses).  The  goal  of  our  research  1s  to  develop  a 
theorem  prover  which  is  somewhat  insensitive  to  the 
length  of  the  proof  and  the  length  of  the  statement  of 
the  theorem. 

The  three  main  methods  In  TPI  for  achieving  this 
goal  are: 
(1)  dividing  the  theorem  into  independent 
subgoals,  (2)  the  special  treatment  of  definitions, 
and  (3)  Implicit  use  of  restricted  quantification.  The 
purpose  of  (1)  is  to  make  TPI  sensitive  to  the  length 
of  the  proof  of  the  "longest"  subgoal  as  opposed  to  the 
length  of  the  total  theorem.  Empirical  results  Indi(cid:173)
cate  that  (1)  achieves  this  purpose  quite  well. 

The  main  purpose  of  (2)  1s  to  disregard  those  de(cid:173)

finitions  that  are  not  necessary  for  the  proving  the(cid:173)
orem.  Currently,  TPI  is  given  14  definitions  and  no 
theorem  has  used  more  than  4.  Thus,  the  extraneous 
definitions  are  considerably  longer  than  the  theorem 
and  the  pertinent  definitions.  The  processing  of  de(cid:173)
finitions  also  Interfaces  very  nicely  with  (1),  a l(cid:173)
lowing  TPI  to  subdivide  subgoals  into  Independent  sub-
goals. 

The  purpose  of  (3)  is  to  give  high  priority  to  in-
ferences  which  prove  that  variables  are  in  the  correct 
domain.  This  heuristic  allows  TPI  to  discover  longer 
proofs  because  such  Inferences  are  done  Implicitly.  Of 
course,  the  price  paid  for  this  ability  is  an  Increase 
in  the  amount  of  time  for  each  explicit  Inference. 

The  example  1n  Sec.  2  shows  that  TPI  has  achieved, 

to  some  extent,  Its  goal.  The  statement  of  the  theo(cid:173)
rem  given  to  TPI  (including  extraneous  definitions)  1s 
48  clauses,  and  the  shortest  proof  that  we  know  of  1s 
27  binary  resolutions. 

The  methods  of  TPI  form  a  complete  system  of 

first-order  logic.  Although  TPI  cannot  process  higher-
order  terms  1n  a  complete  way,  its  methods  are  suffi(cid:173)
cient  for  some  interesting  theorems  containing  higher-
terms.  I n i t i al  results  indicate  that  the  use  of  lambda 
notation  and 
normal-form  are  very  powerful  theorem-
proving  techniques. 

Other  theorem  provers  have  used  methods  which  are 

quite  similar  to  those  of  TPI.  Subdividing  a  theorem 
into  parts  has  been  used  by  Bledsoe,1  Nivens,5  Norton,6 
and  Slagle  and  Koniver,7  and  probably  others.  Norton' 

54 

uses  definitions  In  a  way  which  1s  very  similar  to  TPI 
and  Bledsoe'sI  use  of  definitions  1s  somewhat  similar. 
Although  the  overall  characteristics  of  a ll  these  theo(cid:173)
rem  provers  (Including  TPI)  are  quite  different,  they 
In 
all  proved  some  relatively  impressive  theorems. 
particular,  each  can  prove  theorems  that  the  others 
cannot  prove.  However,  this  author  believes  that  1n 
each  case  much  of  the  power  stems  from  the  same  few 
basic  principles  even  though  the  methods  of  these  theo(cid:173)
rem  provers  were  independently  developed  along  quite 
different lines. 

Acknowledgments 

This  research  was  supported  by  the  National 

Science  Foundation  under  grant  GJ-1135,  and  the  Air 
Force  Office  of  Scientific  Research  under  grant  AFOSR-
71-211OC. 

References 

Figure  1  Subgoal  (8)  after  negation  and  reduction  to 
normal  form.  The  domain  of  x  is  G  and  the  domain  of  y 

is  H  whereas  u,  v  and  w  are  not  restricted. 

1.  Bledsoe,  W.  W.,  "Splitting  and  Reduction  Heuris(cid:173)

tics  in  Automatic  Theorem  proving,"  Artificial 
Intelligence  2,  1971,  pp.  55-77. 

2.  Ernst,  G.  W.,  "The  U t i l i ty  of  Independent  Subgoals 

in  Theorem  Proving,"  Information  and  Control, 
April,  1971. 

3.  Ernst,  G.  W,  "A  Definition-Driven  Theorem 

Prover,"  Report  No.  1124,  Computing  and  Informa(cid:173)
tion  Sciences,  Case  Western  Reserve  University, 
1973. 

4.  Huet,  G.  P.,  "The  Undecidabillty  of  the  Existence 
of  a  Unifying  Substitution  in  the  Simple  Theory  of 
Types,"  Report  1120,  Jennings  Computing  Center, 
Case  Western  Reserve  University,  1972. 

5.  Nevins,  A,  J .,  "A  Human  Oriented  Logic  for  Auto(cid:173)
matic  Theorem  Proving,"  AI  Memo  No.  268,  Mass. 
Inst,  of  Tech.,  Cambridge,  Mass.,  1972. 

6.  Norton,  L.  M.,  "Adept;  A  Heuristic  Program  for 

Proving  Theorems  of  Group  Theory,"  Report  MAC-TR-
33,  Mass.  Inst,  of  Tech.,  Cambridge,  Mass.,  1966. 

7.  Slagle,  J.  R.,  and  Konlver,  D.,  "Finding  Resolu(cid:173)
tion  Graphs  and  Using  Duplicate  Goals  1n  AND/OR 
Trees,"  Information  Sciences,  Vol.  3,  No.  4,  Oct., 
197.,  pp.  315-342. 

Figure  2  The  General  Form  of  the  AND/OR  Tree 

Generated  by  TPI 

Figure  3  The  consequents  of  6  terminal  sugboals  whose 
conjunction  1s  equivalent  to  (15).  All  of  the  symbols 
1n  this  figure  are  constants, 
f,  g  and  h  are  homomor-

phlsms  while  a  and  b  are  elements  of  G. 

55 

