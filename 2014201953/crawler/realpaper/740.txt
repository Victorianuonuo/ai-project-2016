Generalized Interval Projection: A New Technique for Consistent Domain

Extension

Carlos Grand´on and Gilles Chabert and Bertrand Neveu

Projet Coprin, INRIA, 2004 route des Lucioles,

{carlos.grandon, gilles.chabert, bertrand.neveu}@sophia.inria.fr

06902 Sophia Antipolis, France.

Abstract

This paper deals with systems of parametric equa-
tions over the reals, in the framework of inter-
val constraint programming. As parameters vary
within intervals, the solution set of a problem may
have a non null volume. In these cases, an inner
box (i.e., a box included in the solution set) instead
of a single punctual solution is of particular inter-
est, because it gives greater freedom for choosing
a solution. Our approach is able to build an inner
box for the problem starting with a single point so-
lution, by consistently extending the domain of ev-
ery variable. The key point is a new method called
generalized projection.
The requirements are that each parameter must oc-
cur only once in the system, variable domains must
be bounded, and each variable must occur only
once in each constraint. Our extension is based on
an extended algebraic structure of intervals called
generalized intervals, where improper intervals are
allowed (e.g. [1,0]).

1 Introduction

The purpose of this paper will be illustrated on a simple ex-
ample of signal relay positioning.

The situation is as follows. m units are deployed on an
area, each of them being equipped with a transceiver. Because
of the limited power of their transceivers, the units cannot
communicate. The question is to position a relay such that all
units get connected.

We denote (ai, bi) the coordinates of the ith

unit position,
and di its distance from the relay. Assume ﬁrst that all ai, bi
and di are ﬁxed. Then, the model consists in m simple dis-
tance equations and is easily solved by any traditional alge-
braic or numerical technique. Since the system is probably
unfeasible, a least-square method can provide a point making
each distance being as close as possible to the desired value
di.

Unfortunately, this model suffers from three serious limi-

tations:

• Distances should not be ﬁxed. The distance di must be

neither more than the transceiver range di, nor less than

a lower bound di, say, because of the damaging loop ef-
fect. Hence, distances must rather be assigned intervals
d1, ...,dm.

• Positions of units are not ﬁxed neither. They usually
patrol around their position and can move in a box ai ×
• Providing a single solution (x, y) is often not realistic.

bi to pick up the signal.

E.g., an antenna cannot be installed exactly at a pre-
cise position in presence of obstacles. Therefore, one

is rather interested by a box x× y such that any position

chosen in this box is appropriate. Obviously, the wider
the box, the better.

Finally, our problem is deﬁned as a set of constraints ci(x, y)
(1 ≤ i ≤ m), with ci(x, y) iff
∃(ai, bi, di) ∈ (ai×bi×di) (x − ai)2 + (y − bi)2 = d2
i .
A solution of our problem is a tuple (x, y) such that for all
i ∈ [1..n], ci(x, y) is true and our goal is to build a so-called
inner box x × y, in which each point (x, y) is a solution
[Ward et al., 1989]. Classical interval analysis and constraint

y

b

2

a

2

position of the
second unit

position of the
first unit

b

1

a

1

inner box

solutions

x

Figure 1: The relay positioning problem

programming over the reals provide well-known algorithms
for handling systems of equations with continuum of solu-
tions [Benhamou and Goualard, 2000; Silaghi et al., 2001;
Vu et al., 2002]. Nonetheless, they are not adapted for build-
ing inner boxes when the system involves existentially quan-
tiﬁed parameters (especially when the system is not square

IJCAI-07

94

w.r.t.
the parameters). Some techniques either based on
modal intervals [Herrero et al., 2005], or Newton-like ex-
istence theorems [Goldsztejn, 2006] can detect inner boxes
in presence of parameters, but one needs to enforce a whole
branch-and-bound process to get an answer. Such a process is
heavy and leads to disastrous computation time as the dimen-
sion n increases (merely because it tries to describe a (n-1)-
dimension frontier with very small boxes). Worse, it is never
sure that an inner box will be returned at the end.

We propose in this paper an original method for building
an inner box around an initial solution of the parameter-free
problem. This method starts with a degenerate box (a box
reduced to a point, that can be obtained using a least-square
method, for example) and tries successively to enlarge the
dimensions of the box, while proving that the current box
remains an inner box. Domain extension has already been
achieved in case of parameter-free inequalities by deﬁning an
univariate extrema function and computing its left most and
right most solutions of a selected variable, using a Newton
like method [Collavizza et al., 1999]. Our new extension al-
gorithm works for parametric equations, thus subsuming in-
equalities and addressing more situations. It essentially ex-
tends one variable at a time and the resulting box depends
on the order in which variables are selected. First of all, the
functions we can handle are arithmetical functions.
Deﬁnition 1.1 (Arithmetical function) f is said to be an
arithmetical function, if the formal expression f (x) matches
the following recursive deﬁnition:

• f (x) = xi, with i ∈ [1..n].
• f (x) = c, where c is a constant in R.
• f (x) = φ(g(x)), where g is an arithmetical function,
and φ is a “basic” function such as sqr, sqrt, sin, . . .
• f (x) = g(x)(cid:3)h(x) where g and h are arithmetical func-
tions, and (cid:3) is a binary operator in {+,−,×, /}.

The keystone of our domain extension is the generalized
projection which will be introduced in the theoretical con-
text of modal interval analysis.
Informally, our method
uses an inner box characterized by a generalized inclusion

as f (x) ⊆ [2,−1]. We know that, as long as f (x) ⊆ [0, 0], x

is an inner box. Hence, we “enlarge” x as much as we can by
considering a right-hand side “enlarged” to [0, 0]. We propa-
gate this enlargement through the syntactic tree of f down to
the leaf representing x.

2 Modal interval analysis
The theory of modal intervals has been developed by Span-
ish researchers since the 1980’s [Garde˜nes et al., 1985;
2001]. It is a nice framework to deal with quantiﬁers in inter-
val computations.

A simpler widely-adopted formulation of this theory has
recently been proposed [Goldsztejn, 2005], and our next out-
line of modal intervals shall conform to this proposal.

First, let us deﬁne the general situation. Given a function
and a set of parameters

f of variables x = (x1, . . . , xn)T
(cid:3)
v = (v1, . . . , vp)T

n | (cid:2)∃v ∈ v

{x ∈ R

f (x, v) = 0}.

, the solution set under study is

With classical interval arithmetics, evaluating a real-valued
component fi with interval vector operands x and v yields an
interval z satisfying

(cid:2)∀x ∈ x
(cid:2)∀z ∈ z

(cid:3)(cid:2)∀v ∈ v
(cid:3)(cid:2)∀x ∈ x

(cid:3)(cid:2)∃z ∈ z
(cid:3)(cid:2)∃v ∈ v

(cid:3) | z = f (x, v).
(cid:3) | z = f (x, v),

Such a relation is not adequate for detecting an inner box.
One would rather look for an interval z satisfying

thus 0 ∈ z implies that x is an inner box.

Modal intervals analysis is an efﬁcient tool for handling
expressions built from intervals with associated quantiﬁers,
paying special attention to the semantics behind the expres-
sion. The underlying structure of this theory is an extended
set of intervals, called generalized intervals.

2.1 Generalized intervals
A generalized interval [Kaucher, 1980; Shary, 2002] is any
pair [a, b] of reals, without imposing a ≤ b.
[0, 1], [1, 0], [−1, 1], [1,−1], [0, 0].
interval [a, b], we denote x := a and x := b.

Here are some examples of generalized intervals:
If x is a generalized

KR stands for the set of generalized intervals. It can be
split into two subsets: the set IR of so-called proper inter-
vals, those whose bounds are in increasing order, and the set
of improper intervals, those whose bounds are in strictly de-

creasing order. Hence, x is proper if x ≤ x and x is improper
if x > x. It is convenient to swap the endpoints of a gen-
eralized interval. For this end, the dual operator has been
introduced :

dual (x) := [x, x]

The pro operator for an interval is also deﬁned to refer to
its underlying set of reals (once the endpoints have been re-
ordered properly).

(cid:4)

pro (x) :=

if x ∈ IR
x
(dual x) otherwise

Finally, KR is equipped with the following inclusion order:

x ⊆ y ⇐⇒ x ≥ y ∧ x ≤ y.

(1)

x

meet and join of two intervals are respectively

KR is a complete lattice with respect to this inclusion. The

E.g., [2,−4] ⊆ [1,−3] ⊆ [0, 0] ⊆ [−3, 1] ⊆ [−4, 2].
(cid:5)
(cid:6)

y = max{z | z ⊆ x∧z ⊆ y} = [max{x, y}, min{x, y}]
y = min{z | x ⊆ z∧y ⊆ z} = [min{x, y}, max{x, y}]
A generalized interval arithmetic is deﬁned in [Kaucher,
1980]. Every binary operator and basic function (see Deﬁni-
tion 1.1) is deﬁned is such a way that it extends its counterpart
in classical interval arithmetic. E.g., the addition in KR is :

x

x + y := [x + y, x + y],

so that [1, 2] + [3, 5] = [4, 7] matches the result of classical
interval addition, and [1, 2] + [5, 3] = [6, 4]. This extended
arithmetic keeps the fundamental property of inclusion iso-
tonicity (with the inclusion order (1)). Furthermore, KR is
a group for addition and multiplication of zero-free intervals.

The opposite of x is −(dual x), the inverse is (1/(dual x)).
E.g., [−1, 2] + [1,−2] = [0, 0],
[1, 4] × [1, 0.25] = [1, 1].

IJCAI-07

95

using intervals as a way to represent an inﬁnite number of
values, we solve an equation of interval variable and look for
one interval solution.

To be applied, this technique requires that the variable x
has a domain, i.e., a lower bound and an upper bound, w.r.t.
the inclusion order deﬁned by (1). So there must be intervals

xl and xu such that xl × y is the initial inner box we want
to enlarge, and xu is the domain of all possible values for x.
Most of the time, it is easy to provide such an upper bound.
Both bounds are proper. We can ﬁnally write

xl ⊆ x ⊆ xu.

2.2 Main theorem
By chaining the basic arithmetic operators and functions, one
can evaluate any expression with generalized intervals ar-
guments. The theory of modal intervals has provided the
following important interpretation [Garde˜nes et al., 2001;
Goldsztejn, 2005]:
p → R such that each com-
Proposition 2.1 Let φ : R
ponent of v has only one occurrence in φ(x, v). Let x ∈ IR
(cid:3)
(cid:2)∀z ∈ pro (z)
v ∈ IR

n × R
(cid:3)(cid:2)∃v ∈ v

,
If z is improper then

(cid:3)(cid:2)∀x ∈ x

and z := f (x, dual (v)).

z = φ(x, v).

n

p

Up to now, this proposition was mainly used as a test for
inner boxes (e.g., [Grand´on and Goldsztejn, 2006]). We detail
this test in the next subsection.

.

Inner box test

2.3
Consider a set of constraints ci (1 ≤ i ≤ m), each constraint
being a parametric equation fi(x, v) = 0 with fi : Rn × Rp
Assume that every component vj (1 ≤ j ≤ p) only appears
evaluate f (x, dual (v)). The result is a vector z ∈ KR
z ⊆ 0 then x is an inner box. Indeed, for all i ∈ [1..m],
zi = fi(x, v).

once in the whole system. To check if a given box x is inner,
. If

(cid:3)(cid:2)∃v ∈ v
Since zi ⊆ 0 ⇐⇒ 0 ∈ pro (zi) then
(cid:3)
(cid:2)∀x ∈ x

(cid:3)(cid:2)∀x ∈ x
(cid:2)∀zi ∈ pro (zi)
(cid:2)∀x ∈ x
(cid:3)(cid:2)∃v ∈ v
(cid:3)
(cid:3)(cid:2)∃vi ∈ vi
(cid:2)∀x ∈ x
Let us denote vi the vector of parameters involved in ci. Then
fi(x, vi) = 0 is true for all i ∈ [1..m],

(cid:3)(cid:2)∃v ∈ v

and this implies

fi(x, v) = 0.

f (x, v) = 0.

(cid:3)

(cid:3)

m

As a new result, we will show that Proposition 2.1 can also
be used as a constructive tool for inner boxes. Our technique
combines this modal interval analysis result with a constraint
programming concept called projection. Next section intro-
duces the latter and expounds our contribution.

3 A Generalized Interval Projection
Let us ﬁrst consider a real-valued arithmetical function f :
Rn × Rp → R. We split variables into x ∈ R and y ∈ Rn−1,
while v ∈ Rp
of generality, we shall write f (x, y, v).

is the vector of parameters. Thus, with no loss

This section gives a technique to enlarge the domain of a
variable that has only one occurrence1 in the expression of
the function2, with given domains for other variables and pa-
rameters. So we assume x has only one occurrence in f , and
ﬁx once for all y ∈ IR

and v ∈ IR

n−1

p

.

This technique handles x (the domain of x) as a variable
and tries to ﬁnd a solution in KR to some interval relation.
We work at the interval level, which must be sharply distin-
guished from the usual standpoint of interval analysis: In-
stead of solving an equation of real variable/parameters and

1This is a limitation due to the dependency problem of interval
arithmetic. It can be solved by applying a ﬁxed point algorithm over
the multi-ocurrence variable, but this is out of scope of this article.
2This presentation is done for one constraint. In presence of sev-
eral constraints, the same operation is performed for each constraint
and the intersection of the obtained intervals is returned.

IJCAI-07

96

(2)

(3)

(4)

(5)

(6)

Our goal is to ﬁnd a maximal interval x ∈ KR (w.r.t. the

inclusion deﬁned by (1)) such that,

x satisﬁes (2)

and f (x, y, (dual v)) ⊆ [0, 0],

i.e., such that x both satisﬁes the domain constraint and the
inner test. If f is linear, some methods already tackle this
problem [Markov et al., 1996; Shary, 1996; 2002; Sainz et
al., 2002]. Consider now the (slightly) more general problem
of ﬁnding a maximal x such that

and f (x, y, (dual v)) ⊆ z,

x satisﬁes (2)

with z ∈ KR such that

f (xl, y, (dual v)) ⊆ z ⊆ f (xu, y, (dual v)).

Notice that a maximal interval satisfying (3-4) is not neces-
sarily a maximal inner extension of xl in xu.

Using Deﬁnition 1.1, we can recursively solve (3) by iso-
lating the subexpression containing x and applying one of the
three “elementary” projections detailed below.

3.1 Overview
The recursion consists in reducing (3-4) to a simpler relation

x satisﬁes (2)

and g(x, y, (dual v)) ⊆ z(cid:2),

where g is a subexpression of f , and z(cid:2) satisﬁes

g(xl, y, (dual v)) ⊆ z(cid:2) ⊆ g(xu, y, (dual v)).

Relation (5-6) must be a sufﬁcient condition to (3-4) in the

sense that a maximal x ∈ KR satisfying (5-6) must also be a
maximal x ∈ KR satisfying (3-4).

Given f , x, y, v and z, we detail now how to compute
an appropriate z(cid:2), dealing with three different cases. These
cases are related to the syntactic decomposition of f given by
Deﬁnition 1.1. The base case is straightforward. The other
cases lie on three concepts: theoretical projection, selection
and ﬁltering.

3.2 Base case (f (x, y, v) = x)
By hypothesis, (4) holds, i.e., xl ⊆ z ⊆ xu. Hence, a maxi-
mal x such that x satisﬁes (2) and (x ⊆ z) is z itself.
3.3 Basic function (f (x, y, v) = φ(g(x, y, v)))
• Theoretical projection
For clarity, we replace g(x, y, (dual v) by the symbol g.
Since every basic function φ is piecewise strictly monotonic,

hence piecewise invertible, for any z ∈ KR, a disjunction of

inclusions

(g ⊆ z1) or (g ⊆ z2) or . . .

can formally be derived from φ(g) ⊆ z, regardless of condi-

tion (2). For example,

exp(g) ⊆ [1, 2] ⇐⇒ g ⊆ [0, log(2)],
2 ⊆ [4, 0] ⇐⇒ g ⊆ [2, 0] or g ⊆ [0,−2].

g

values, so that the square root is always well deﬁned.
deed, by hypothesis, (4) holds.

Notice that if φ = sqr, pro (z) cannot include negative
In-
If z is proper, then z ⊆
g(xu, y, (dual v))2 and g(xu, y, (dual v))2 ≥ 0 implies
pro (z) ≥ 0. Otherwise, g(xl, y, (dual v))2 ⊆ z, i.e.,
pro (z) ⊆ pro (g(xl, y, (dual v))2) which again implies
pro (z) ≥ 0. This symmetry in the domain of sqrt and the
image of sqr is obviously valid for every basic function.

As soon as φ is trigonometric, the disjunction includes an

inﬁnity of terms (which justiﬁes the “theoretical” qualiﬁer):

cos(g) ⊆ [0.5, 1] ⇐⇒ g ⊆ [π/3, π/2] or . . .

All intervals in the (possibly inﬁnite) sequence share both the
same proper/improper nature and the same diameter. Fur-

thermore, either their proper projections are all disjoint (i (cid:12)=
j =⇒ pro (zi)∩pro (zj ) = ∅), either they all intersect. They

cannot however overlap more than a bound. One may won-
der if two overlapping intervals g1 and g2 can be merged,

i.e., if the condition (g ⊆ z1) or (g ⊆ z2) can be replaced by
g ⊆ (z1 ∨ z2). This is not allowed since g ⊆ (z1 ∨ z2) is
only a necessary condition (as counter-example, g := [−1, 1]
satisﬁes g ⊆ [0, 2] ∨ [−2, 0] = [−2, 2] but neither satisﬁes
g ⊆ [0, 2] nor g ⊆ [−2, 0]). In contrast, g ⊆ (z1 ∧ z2) is

a sufﬁcient but stronger condition, and maximality is lost (no
solution can even be found). Thus, no merging of any kind
can be done. Summing up, solving (3) boils down to solving

x satisﬁes (2)

and g(x, y, (dual v))) ⊆ zj

(7)

for one zj in the sequence. We can now avail ourselves of the
constraint on the domain of x to select and ﬁlter a feasible
interval in this sequence. Selection means that we pick an
interval zj such that a solution x of (7) exists. Filtering means

that we ﬁnd the largest z(cid:2) ⊆ zj such that (6) is satisﬁed.

• Selection

Relation (2) allows us to keep only a ﬁnite number of zj
in the theoretical projection. By inclusion isotonicity of
Kaucher arithmetic, xl ⊆ x implies g(xl, y, dual v) ⊆
g(x, y, dual v). So we can detect whether zj (j = 1, 2, . . .)
is feasible or not by checking g(xl, y, (dual v)) ⊆ zj. The

number of feasible zj resulting from this test is necessarily
ﬁnite (see Example 3.2). We can pick any one of them.
Example 3.1 Consider f (x, y, v) = (x + v)2, xl =
[−1,−1], xu = [−2, 3], v = [−1, 2] and z = [4, 1]. Then,
we have φ = sqr, g(x, y, v) = x + v and
x + (dual v) ⊆ [2, 1] or
(x+(dual v))2 ⊆ [4, 1] ⇐⇒
x + (dual v) ⊆ [−1,−2]
But since xl + (dual v) = [1,−2],
[2, 1] is not feasi-
ble (because [1,−2] (cid:12)⊆ [2, 1]) whereas [−1,−2] is feasible
([1,−2] ⊆ [−1,−2]).

(cid:4)

For the sake of simplicity, we performed in the last exam-
ple theoretical projection and selection consecutively, as two
separate steps. With trigonometric functions, this is not pos-
sible as the number of theoretical projections is inﬁnite. So,
we rather use selection as a pre-selecting process. This is il-
lustrated on the next example.

Example 3.2 Consider f (x, y, v) = cos(x + v), xl = [6, 6],
xu = [5, 9], v = [−1, 1] and. Then, we have φ = cos and
g(x, y, v) = x + v. We ﬁrst compute

gl := xl + (dual v) = [7, 5],

It follows that pro (gl) ⊆ [5, 7], which restricts the projection
of cosinus to two half periods, [π, 2π] and [2π, 3π]:

x + (dual v) ⊆ 2π + arccos([0.7, 0.8]) = [6.93, 7.08]
x + (dual v) ⊆ 2π − arccos([0.7, 0.8]) = [5.49, 5.64].
• Filtering

or

Once zj was proven to be feasible, relation (2) can be used

to make zj smaller and fulﬁll (6). Indeed, x ⊆ xu implies
g(x, y, dual v) ⊆ g(xu, y, dual v). Hence we can substi-
tute zj by zj ∧ g(xu, y, (dual v)).
[−1,−2] was feasible. But as xu+(dual v) = [0, 2], we must
actually have x + (dual v) ⊆ [0, 2] ∧ [−1,−2] = [0,−2].

Example 3.3 In Example 3.1, we found out that interval

This condition is indeed stronger.

3.4 Binary Operator

(f (x, y, v) = g(x, y, v) (cid:3) h(y, v))
Put w := h(y, (dual v)) and consider ﬁrst the addition. The
inclusion f (x, y, (dual v)) ⊆ z turns to

g(x, y, (dual v)) + w ⊆ z.

By adding − dual (w) to each side of the latter, we get

g(x, y, (dual v)) ⊆ z − (dual w)

thanks to the group property of Kaucher arithmetic. Filtering

can apply here to narrow (or possibly empty) z − (dual w).

The same idea applies to subtraction and division (by respec-
tively adding and multiplying z by (dual w)).
If 0 (cid:12)∈
Multiplication however requires some precaution.
pro (w), then we can again divide z by (dual w). But if 0 ∈
pro (w), because Kaucher arithmetic does not handle inﬁnite
bounds we need to hand-craft a special division. Similar ex-
tensions of Kaucher’s division are proposed in [Popova, 1994;
Goldsztejn, 2005]. A maximal g satisfying g × w ⊆ z is ob-

tained with the next table.

3
7

2
6

0 ⊆ w
w ⊂ 0

z > 0 z < 0 0 ⊆ z z ⊂ 0
1
4
5
8
1. g = ∅ (no solution)
2. g = ∅ (no solution)
3. g ⊆ [max{z/w, z/w}, min{z/w, z/w}]
4. g = ∅ (no solution)
5. g ⊆ [−∞, z/w] or g ⊆ [z/w, +∞]

IJCAI-07

97

6. g ⊆ [−∞, z/w] or g ⊆ [z/w, +∞]
7. g ⊆ [−∞, +∞]
8. g ⊆ [−∞, min{z/w, z/w}] or [max{z/w, z/w}, +∞]

Applying ﬁltering on g (a consistent extension of (1) to
intervals with inﬁnite bounds is easy) immediately removes
inﬁnite bounds since g is necessarily proper. Hence, inﬁ-
nite bounds are not propagated to subsequent computations
(which would have led to undeﬁned results). They only are
a convenient way to represent arbitrarily large values when
enforcing ﬁltering.

Example 3.4 Consider f (x, y, v) = x × v, xl = [−1, 1],
xu = [−3, 3], v = [−1, 2] and z = [−2, 6]. Then, we have
(cid:3) = ×, g(x, y, v) = x. Thanks to the table, we get

x ⊆ [−∞,−1] or x ⊆ [1, +∞].
tor with xu yields x ⊆ [−3,−1] or x ⊆ [1, 3].

Both contain xl, hence are feasible. Applying “meet” opera-

Remark 1 We have seen that the constraint on the domain
is crucial in presence of trigonometric functions or multipli-
cation with 0 in operands. In the other cases, by removing
domain constraint (i.e., condition (2)), it can be easily proven
that a maximal x satisfying

f (x, y, (dual v)) ⊆ [0, 0]
f (x, y, (dual v)) = [0, 0].

also satisﬁes

It is worth mentioning that functions need not be decom-
posed formally into subexpressions: projections are directly
performed by an automatic projection algorithm [Benhamou
et al., 1999], similar to automatic differentiation.

We detail now a trace of our extension algorithm.

4 Trace
We instantiate our relay example with 4 units. According to
the problem in section 1, the set of constraints are:

∃(ai, bi, di) ∈ (ai×bi×di) (x − ai)2 + (y − bi)2 = d2
i ,

and the domains of the parameters are:

b1 = [0, 1]
b2 = [9, 10]

a1 = [0, 2]
d1 = [1, 8]
a2 = [4, 5]
d2 = [1, 8]
a3 = [13, 15] b3 = [−11,−10] d3 = [1, 14]
d4 = [1, 8]
a4 = [16, 17] b4 = [5, 7]

A least-square solution obtained by ﬁxing each parameter to
the midpoint of its domain is (˜x = 9.04286, ˜y = 2.6494).
We ﬁrst check that this solution can be taken as the starting
point of our domain extension. We compute for all i,

(x − dual (ai))2 + (y − dual (bi))2 − dual (di)2

with x = [˜x, ˜x] and y = [˜y, ˜y]. We get the following image
vector :

[87.8,−11.7], [78.5,−7.3], [220.8,−20.3], [81.2,−10].

As this vector is included in 0, then the initial degenerate box

x × y is an inner box. We can now decide that the posi-
tion (x, y) should not be out of a bounding box xu × yu =
[5, 15] × [0, 20]. The extension of x can start.

We detail the projection of c1 over x. Our goal is to ﬁnd

the biggest x (˜x ⊆ x ⊆ xu) such that
(x − (dual a1))2 + (y − (dual b1))2 − (dual d1)2 ⊆ 0
• Apply Case 3.

Compute w := (y − (dual b1))2 − (dual d1)2. We get
w = (2.6494 − [1, 0])2 − [8, 1]2 = [6.02,−61.28]. Then,
(x−(dual a1))2+w ⊆ 0 ⇒ (x−(dual a1))2 ⊆ −(dual w)
Finally, (x − (dual a1))2 ⊆ [−6.02, 61.28].
(˜x − (dual a1))2 = [81.77, 49.60] and check that
[81.77, 49.60] ⊆ [−6.02, 61.28]. We also compute xu −
(dual a1))2 = [25, 169] and ﬁlter
[25, 61.28].

We apply domain restriction.

We ﬁrst compute

[−6.02, 61.28]

to

(x − (dual a1))2 ⊆ [25, 61.28]

• Apply Case 2.

(x − (dual a1)) ⊆ [5,
∨
(x − (dual a1)) ⊆ [−√
61.28,−5] = [−7.82,−5]

√
61.28] = [5, 7.82]

But (xl − (dual a1)) = [9.04, 7.04] and (xu − (dual a1)) =
[5, 13]. So, by domain restriction, [−7.82,−5] is discarded,
and [5, 7.82] is left intact.

x − (dual a1) ⊆ [5, 7.82]

• Apply Case 3.

x ⊆ [5, 7.82] + a1 ⇐⇒ x ⊆ [5, 9.82] .
• Apply Case 1: the answer is [5, 9.82].

We perform a generalized projection to compute consistent
extension of ˜x w.r.t the other constraints and get three other
intervals: x2 = [5, 9.86], x3 = [7, 15] and x4 = [8.36, 15].
The intersection of the four intervals, [8.36, 9.82], is inner
w.r.t.
the whole system (See Section 2.3). We can per-
form now a generalized projection to compute an extension

over y of the new box [8.36, 9.82] × ˜y and we get respec-
tively for each constraint y1 = [0, 2.6494], y2 = [2.62, 16],
y3 = [0, 3.20] and y4 = [2.64, 9.35]. The intersection
of these extensions is [2.6494, 2.6494]. The ﬁnal inner box
[8.36, 9.82] × [2.6494, 2.6494] is shown in Figure 2(a).

Let us roll back this extension. If we start domain exten-
sion over the variable y at ﬁrst, and then, over x, we obtain
another box, [9.04286, 9.04286] × [2.1, 3.42] shown in 2(b).

We observe that the maximal extension obtained for the ﬁrst
variable we project over generally prevents the other variables
from being extended. In order to obtain more balanced boxes,
we introduce a heuristic of extension in two steps. First, we
extend all variables but the last one to the middle point be-
tween the initial value and the bounds of the maximal ex-
tension. The last variable is extended to the maximal inter-
val. For example, x will be extended to [8.7, 9.43] instead
of [8.36, 9.82], and then y will be extended to [2.35, 3.32].
Second, we perform a maximal extension for all variables (if
they can again be extended). Figures 2(c) and 2(d) show the

IJCAI-07

98

[Collavizza et al., 1999] H. Collavizza, F. Delobel, and
M. Rueher. Extending Consistent Domains of Numeric
CSP. In IJCAI, pages 406–413, 1999.

[Garde˜nes et al., 1985] E. Garde˜nes, H. Mielgo, and Trepat
A. Modal Intervals: Reason and Ground Semantics. Inter-
val Mathematics, 212:27–35, 1985.

[Garde˜nes et al., 2001] E. Garde˜nes, M. ´A Sainz, L. Jorba,
R. Calm, R. Estela, H. Mielgo, and A. Trepat. Modal In-
tervals. Reliable Computing, 7(2):77–111, 2001.

[Goldsztejn, 2005] A. Goldsztejn. D´eﬁnition et Applica-
tions des Extensions des Fonctions R´eelles aux Intervalles
G´en´eralis´es. Phd thesis, Universit´e de Nice-Sophia An-
tipolis, 2005.

[Goldsztejn, 2006] A. Goldsztejn. A Branch and Prune Al-
gorithm for the Approximation of Non-Linear AE-solution
Sets. In Proc. of ACM SAC’06, pages 1650–1654, 2006.

[Grand´on and Goldsztejn, 2006] C. Grand´on and A. Gold-
sztejn. Inner Aproximation of Distance Constraints with
Existentially Quantiﬁed Parameters.
In Proc. of ACM
SAC’06, pages 1660–1661, 2006.

[Herrero et al., 2005] P. Herrero, M.A. Sainz, J. Veh´ı, and
L. Jaulin. Quantiﬁed Set Inversion Algorithm with Appli-
cations to Control. Reliable Computing, 11(5):369–382,
2005.

[Kaucher, 1980] E. Kaucher.

Interval Analysis in the Ex-
tended Interval Space. Computing, Suppl., 2:33–49, 1980.

[Markov et al., 1996] S. Markov, E. Popova, and Ch. Ulrich.
On the Solution of Linear Algebraic Equations Involving
Interval Coefﬁcients. Iterative Methods in Linear Algebra,
II, 3:216–225, 1996.

[Popova, 1994] E. D. Popova. Extended Interval Arithmetic
in IEEE Floating-Point Environment. Interval Computa-
tions, (4):100–129, 1994.

[Sainz et al., 2002] M. ´A Sainz, E. Garde˜nes, and L. Jorba.
Formal Solution to Systems of Interval Linear or Non-
Linear Equations. Reliable Computing, 8(3):189–211,
2002.

[Shary, 1996] S.P. Shary. Algebraic Approach to the Inter-
val Linear Static Systems. Reliable Computing, 3(1):3–33,
1996.

[Shary, 2002] S.P. Shary. A New Technique in Systems
Analysis Under Interval Uncertainty and Ambiguity. Reli-
able Computing, 8(5):321–418, 2002.

[Silaghi et al., 2001] M.C. Silaghi, D. Sam-Haroud, and
B. Faltings. Search Techniques for Non-linear Constraint
Satisfaction Problems with Inequalities. In Canadian Con-
ference on AI, pages 183–193, 2001.

[Vu et al., 2002] X-H Vu, D. Sam-Haroud, and M.C. Silaghi.
Approximation Techniques for Non-linear Problems with
Continuum of Solutions. In SARA, pages 224–241, 2002.

[Ward et al., 1989] A.C. Ward, T. Lozano-Perez, and W.P.
Seering. Extending the Constraint Propagation of Inter-
vals. In IJCAI, pages 1453–1458, 1989.

(a)

(b)

(c)

(d)

Figure 2: (a). Inner box with maximal extension of x and
(b) with maximal extension of y. (c). First step of heuristic
starting with x. (d). First step of heuristic starting with y.

results obtained with the ﬁrst step of the heuristic, starting

with variable x and variable y (boxes [8.7, 9.43]×[2.35, 3.32]
and [8.45, 9.48] × [2.373, 3.039]), respectively. Figure 2(c)

shows a maximal inner box, while ﬁgure 2(d) can be extended
again. Step two will extend y to a maximal interval, which is
[2.373, 3.237].

5 Conclusion
This paper provides a new method for extending consistent
domains with parametric equations over the reals. The key
point is the generalized projection, a new operator that com-
bines a constraint programming concept with theoretical re-
sults from modal interval analysis. This projection can be
computed in linear time w.r.t.
the number of operators and
functions involved in the equations. This makes our approach
cheap and efﬁcient. Furthermore, universally quantiﬁed pa-
rameters can also be included straightforwardly. Some limi-
tations remain: parameters must occur once in the whole sys-
tem, and variables cannot appear more than once in a given
equation. Despite of these limitations, this is an original and
promising approach to handle parametric equations, espe-
cially when existentially quantiﬁed parameters are involved
(problems with uncertainties).

References
[Benhamou and Goualard, 2000] F.

and
F. Goualard. Universally Quantiﬁed Interval Constraints.
In CP 2000, LNCS 1894, pages 67–82, 2000.

Benhamou

[Benhamou et al., 1999] F. Benhamou,

F. Goualard,
L. Granvilliers, and J-F. Puget. Revising Hull and Box
Consistency. In ICLP, pages 230–244, 1999.

IJCAI-07

99

