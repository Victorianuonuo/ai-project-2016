Seseion No.  2 Applications 

27 

HEURISTIC ALGORITHMS  FOR AUTOMATED SPACE  PLANNING 

Charles  M.  Eastman 

Institute  of  Physical  Planning 

Carnegie-Mellon  University 
Pittsburgh,  Penna.,  U.S.A. 

Summary 

This  paper  reviews  the  major  characteristics 

of  existing  programs  for  automatically  solving 
It  outlines  general 
space  planning  problems. 
features  of  this  class  of  problem  and  introduces 
a  set  of  heuristic  decision  rules  called  Con­
straint  Structured  Planning,  which  in  preliminary 
tests  have  efficiently  solved  a  variety  of  prob­
lems.  Developments  allowing  even  greater  e f f i­
ciencies  are  also  outlined. 

Introduction 

I  wish  to  focus  on  computer  programs  allow­

ing  automatic  resolution  of  problems  which  humans 
solve  using  orthographic  drawing.  Typical  prob­
lems  include  the  layout  of  floor  plans,  the  ar­
rangement  of  equipment  in  rooms,  site  planning, 
and  other  forms  of  two-dimensional  design  tasks. 
In  such  problems,  distance,  adjacency,  and  other 
functions  of  arrangement  are  a  principal  concern. 
To  distinguish  spatial  arrangement  tasks  from 
other  types  of  design,  we  call  them  space  planning 
problems. 

Several  programs  are  currently  running  or 
are  under  development  which  allow  formulation 
and  automatic  resolution  of  space  planning  prob­
lems  ( 1,  5,  6,  11,  12).  Within  them,  a  variety 
of  computer  data  structures  have  been  developed 
which  can  represent  space  and  objects,  and  oper­
ations  have  been  implemented  for  manipulating  and 
testing  the  resulting  arrangements.  While  it  is 
straightforward  to  use  such  systems  in  an  inter­
active  design  mode,  the  benefit  and  challenge  of 
such  programs  comes  from  their  potential  for 
automated  space  planning,  for  automatically  com­
bining  manipulation  and  test  operations  in  such 
a  way  that  acceptable  arrangements  are  quickly 
generated.  To  date  the  complex  and  ill-formed 
structure  of  most  space  planning  tasks  has  allow­
ed  the  development  of  algorithms  which  do  only 
poorly  when  compared  with  an  experienced  human 
draftsman. 

The  relationship  between  the  techniques  im­
plemented  in  the  different  programs  for  automatic 
space  planning  has  not  been  at  a ll  clear.  Each 
must  be  considered  an  ad  hoc  attempt  to  build 
from  scratch  a  theory  and  program  with  capabil­
i t i es  originally  only  the  province  of  humans. 

This  paper  examines  the  structure  of  the 

space  planning  task  and  proposes  improved  methods 
for  dealing  with  i t.  Several  general  issues  in­
herent  to  the  task  are  identified  and  the  methods 

used  for  dealing  with  them  in  the  existing  pro­
grams  are  reviewed.  The  space  planning  task 
is  organized  into  i ts  component  decision  rules. 
One  set  of  such  rules  is  described  which  we  c a ll 
Constraint  Structured  Planning.  Aspects  of 
Constraint  Structured  Planning  have  been  imple­
mented  in  the  General  Space  Planner  (GSP)  pro­
gram  in  operation  at  Carnegie-Mellon  University 
( 1,  2). 
Constraint  Structured  Planning  has  significant 
potential  for  efficiently  solving  a  wide  variety 
of  space  planning  problems.  The  logic  behind 
the  aspects  of  GSP  not  yet  implemented  suggest 
that  a  program  incorporating  a ll  i ts  features 
w i ll  be  more  efficient  than  those  now  in  opera­
tion. 

I n i t i al  t r i a ls  with  it  indicate  that 

Problem  Formulation 

In  previously  published  studies  of  how 
humans  solve  space  planning  problems  (3,9)  it 
has  been  recognized  that  designers  do  not  treat 
their  problems  within  the  traditional  framework 
of  optimization.  While  on  the  one  hand  their 
concerns  are  usually  complexly  related  and  i n­
volve  multiple  objectives,  the  small  amount  of 
information  available  about  a  problem  does  not 
permit  meaningful  development  of  linear  or  non­
linear  parameter  weighting  schemes. 

In  a  general  way,  their  problems  are 

normally  self-defined  in  terms  of  constraints. 
The  total  set  of  constraints  defines  a  feasible 
solution  domain.  The  task  is  to  find  a  feasible 
solution  within  this  domain.  Optimization  of 
a  sort  does  take  place  during  iteration  of  the 
search  sequence.  When  the  i n i t i al  set  of  con­
straints  results  in  a  t r i v i al  search,  either 
new  constraints  are  added  or  old  constraints 
are  replaced  with  new  more  restrictive  ones. 
Conversely,  when  a  current  problem  seems  i n­
tractable,  the  constraints  are  often  relaxed. 
Optimization  takes  the  form  of  iteratively 
modifying  the  problem  definition  u n t il  an 
appropriate  balance  between  t r a c t a b i l i ty  and 
quality  of  results  are  achieved.  Problem  solv­
ing  effort  thus  plays  an  important  role  deter­
mining  the  final  problem  formulation. 

Implicit  recognition  of  the  above  pro­
cedure  of  working  has  led  the  designers  of  a ll 
existing  computer  assisted  space  planning  pro­
grams  to  rely  on  the  following  general  formula­
tion.  Some  of  the  current  programs  also  f a c i l­
itate  iterative  definition  and  resolution  of 

28 

a  problem. 

a  Space; 
a  set  of  elements  to 
arrange  in  that  space; 

a  set  of  desired  spatial 
relations  required  for 
any  acceptable  arrange­
ment  of  elements; 

a  set  of  operators  for 
manipulating  the  location 
of  elements  within  the 
S pac e; 

some  i n i t i al  design  con­
dition  (which  simply  may 
be  a) 

Session No.  2 Applications 

the  drawers  can  be  pulled  out.  Other  implementa­
tions  leave  the  prohibition  against  certain  over­
laps  to  be  defined  by  a  relation.  Several  of  the 
space  planning  implementations  also  include 
points  that  may  be  defined  within  a  shape  (e.g. 
the  location  of  an  electrical  outlet)  and  refer­
ence  can  be  made  to  particular  sides  of  objects. 

For  any  particular  problem,  one  can 

identify  a  set  of  relations  that  should  be  satis­
fied  if  an  arrangement  is  to  be  accepted.  For 
automatic  treatment,  the  task  becomes  one  of 
defining  a  general  set  of  tests  with  appropriate 
predicates  which  are  able  to  depict  the  wide 
variety  of  specific  relations  required  in  any 
particular  class  of  space  planning  problems. 
(Throughout  the  rest  of  this  paper,  we  w i ll  c a ll 
such  tests  space  Relations  -  or  S-Relations.) 
In  the  systems  implemented  to  date,  S-Relations 
useful  for  room  arrangement  (5),  equipment 
arrangement  within  a  room  ( 1,  12),  and  building 
arrangement  on  a  site  (6,11),  have  been  con­
sidered.  The  set  of  S-Relations  that  have  been 
implemented  in  the  GSP  space  planning  program  are 
presented  in  Table  One.  The  task  of  defining  a 
set  of  S-Relations  that  are  able  to  depict  the 
whole  set  of  space  planning  tasks,  or  even  a 
single  class  of  such  tasks,  remains  as  a  prob­
lem  for  further  research. 

We  c a ll  this  formulation  the  single  level 
It  can  depict  many  typical 

space  planning  task. 
drafting  problems.  One  example  is  shown  in 
Figure  One. 
room  layout  problem.  The  elements  to  be  included 
in  the  space  and  the  set  of  relations  to  be  satis­
fied  are  shown  at  the  bottom  of  the  figure. 

It  describes  a  typical  mechanical 

The  Representation  of  Objects  and  Relations 

The  representation  of  spaces  and  elements 
that  have  been  implemented  in  the  various  space 
planning  programs  a ll  define  shape.  A  major 
concern  has  been  the  accuracy  with  which  shapes 
are  defined.  Several  are  limited  to  rectangles.* 
Some  implementations  include  predicates  assigned 
to  domains  within  the  shape  to  define  the  type  of 
space  being  represented.  This  information  is 
useful  for  automatically  evaluating  possible  lo­
cations  and  eliminating  those  with  overlap  con­
f l i c t s.  Usually,  only  overlaps  of  certain  kinds 
of  spaces  are  allowed. 
If  domains  of  space  and 
their  type  are  included  in  the  shape  representa­
t i o n,  then  the  shape  can  be  made  up  of  more  than 
one  type  of  space.  This  allows  the  area  adjacent 
to  an  element  and  required  for  i ts  use  to  be  i n­
cluded  in  i ts  i n i t i al  shape  d e f i n i t i o n,  e.g.,  the 
■pace  that  must  remain  free  behind  a  desk  so  that 
*  Of  the  representations  developed  to  date, 
Pfeffercorn's  is  the  most  accurate.  His  is  likely 
to  be  the  model  for  future  sophisticated  space 
planning  systems  (12). 

i.  Most 

(A  few  belong  to  a  single  element, 

"belongs"  to  element 

For  ease  of  description,  we  say  that  a 
S-Relation  which  has  as  one  of  i ts  predicates  an 
element  i 
S-Relations  implemented  in  programs  thus  far 
act  to  disqualify  certain  arrangements  of  pairs 
of  elements.  Thus  most  S-Relations  belong  to 
two  elements. 
e.g.,  requiring  that  the  element  face  southward. 
The  IMAGE  system  by  Johnson  et  al  (6)  incorpor­
ates  two  S-Relations  which  belong  to  three 
elements.)  The  reason  space  planning  is  inher­
ently  d i f f i c u lt  is  the  large  (potentially  i n­
f i n i t e)  number  of  location  and  orientation 
combinations  that  are  available  for  any  single 
element.  The  d i f f i c u l ty  involved  in  evaluating 
locations  for  a  single  element  is  severely 
compounded  by  the  interdependencies  among 
elements  imposed  by  the  S-Relations.  The  ex­
haustive  enumeration  of  a ll  combinations  of 
locations  for  each  element  is  impractical  for 
a ll  but  the  most  t r i v i al  arrangement  problems. 

Location  Operations 

In  any  space  planning  program,  the  types 
of  S-Relations  that  can  be  resolved  and  the  char­
acteristics  of  the  location  operators  available 
are  intimately  related.  Let  us  consider  for  a 
moment  the  kinds  of  locations  that  should  be  gen­
erated  if  different  S-Relations  are  to  be  satis­
fied.  Almost  a ll  S-Relations  that  have  been  i n­
corporated  into  space  planning  programs  accept 
either  a  line  of  locations  (generated  along  the 
perimeter  of  an  element,  for  example)  or  an 
area,  possibly  d i s j o i n t,  in  which  any  location 

Session No.  2 Applications 

29 

1.  Element  2  oriented  toward  supply. 

2.  Element  2  <5  from  supply 

3.  Element  3  adjacent  to  side  3  of 

element  2. 

4.  Element  3  adjacent  to  side  2  of 

element  4. 

5.  Point  A  on  element  4  <1  from 

point  B  on  element  5. 

6.  Point  A  on  element  5  <1  from 

point  B  on  element  6. 

7.  Point  A  on  element  6  <1  from 

from  point  B  on  element  1. 

FIGURE  ONE-  An  example  of  a  space  planning 

building  engineering. 

8.  Point  A  on  element  1  <3 

from  outside  a i r. 

9.  Side  4  on  element  7  adjacent 

to  side  1  on  element  6. 

10.  Point  B  on  element  7  <1  from 

point  B  on  element  8. 

11.  Point  B  on  element  8  <3 

from  return  a i r. 

12.  Side  1  of  element  8  oriented 

toward  return  a i r. 

13.  V i s i b i l i ty  from  door  to  point  C 

on  element  6. 

problem  from  the  area  of 

30 

Session No.  2 Applications 

is  equally  acceptable.  For  example,  the  area 
and  line  allowed  by  a  SIGHT  and  an  ADJACENT  rela­
tion  are  shown  in  Figure  Two.  The  actual  area 
projected  by  a  S-Relation  is  only  defined  if  one 
of  the  elements  it  belongs  to  is  located. 
the  following  discussion,  we  limit  consideration 
to  those  S-Relations  for  which  an  area  can  be 
defined. 
ed  in  the  final  section  of  this  paper.) 

(This  important  limitation  is  consider­

In 

It  is  easily^proved  that 

S-Relations  restricting  the  locations  for 
i  w i ll  define  a  set  of  lines  and 

an  element 
areas,  denoted  as Si  ,. 
the  area  intersection  of  any  set,  S., can  be  found 
by  examining  only  the  points  of  intersection  be­
tween  pairs  of  i ts  areas  or 
lines.*   Of  course, 
if  two  S-Relations  belonging  to 
which  are  not  parallel,  then  only 
defined  by  their  intersections  need  be  considered. 
It  is  important 
to  note  that  it  is  never  necessary 
to  consider  location  points  that  are  not  at  the 
intersection  of  two  boundaries  of  areas  in 

S.  define  lines 

the  point 

S.. 

FIGURE  TWO  -  The  areas  projected 
by  a  sightline  and  an  adjacent 
S-Relation. 

In  theory,  one  should  be  able  to  project 
those  lines  that  define  the  boundaries  of  the 
areas  in  S,  and  to  search  their  point  inter­
sections  for  one  satisfying  a ll  relations.  No 
space  planning  program  has  implemented  such  an 
approach  to  locating  elements.  Two  different 
approaches  have  thus  far  been  relied  upon. 

One  approach  responds  to  the  interdepend-

ency  of  S-Relations  and  locations  by  binding  them 
together,  one-to-one,  much  like  the  recognition 
and  implementation  aspects  of  an  interpreter. 
The  IMAGE  system,  by  Johnson  et  al  at  M.I.T.  (6), 
starts  with  an  i n i t i al  (arbitrary)  arrangement 
and  upon  finding  a  S-Relation  not  satisfied, 
evokes  an  operator  which  satisfies  it  by  finding 
a  new  location  for  an  element.  This  approach 
simplifies  the  control  structure  of  a  space  plan­
ning  system  and  guarantees  that  each  S-Relation 
has  at  least  one  effective  means  for  responding 
that  is  the  intersection  of 

S..  Each  of  i ts  edges  w i ll  becdefined  by  one 

boundary  of  one  area  in 
w i ll  then  be  defined  by  the 
two  of  i ts  edges. 

F. 

. 
Its  corners 
intersection  of 

S.  nor  any  other 

I ts  disadvantage  is  that  the  operators 

to  i t. 
used  are  not  able  to  systematically  explore  the 
area  defined  by  any  S-Relation.g  Thus  neither  the 
intersection  of  the  area  in 
systematic  search  of  locations  can  be  under­
taken.**  Grason's  program  similarly  binds 
S-Relations  to  location  operators,  but  incorpor­
ates  operators  which  generate  a ll  locations 
satisfying  a  S-Relation  (5).  Each  time  an  oper­
ator  is  evoked, 
within  the  area  defined  by  i ts  S-Relation.  To 
f a c i l i t a te  search,  each  S-Relation  operator  pair 
is  contextually  independent.  This  independence 
is  achieved  by  restricting  the  S-Relations  that 
can  be  represented. 

it  produces  another 

location 

Eastman  (1)  and  Pfeffercorn  (12),  on  the 

other  hand,  keep  the  binding  between  S-Relations 
and  location  operators  loose. 
In  their  programs, 
a  limited  number  of  location  operators  are  pro­
vided  which  serve  to  satisfy  whole  sets  of 
S-Relations. 
In  Pfeffercorn's  DPS  program  a ll 
the  possible  locations  for  an  element  are  gen­
erated  in  one  pass  and  stored  on  a  l i st  for 
evaluation.  A  single  location  operator  gener­
ates  the  l i st  and  thus  it  is  relied  on  for  satis­
fying  a ll  S-Relations.  Eastman's,  on  the  other 
hand,  incorporates  operators  which  sequentially 
produce  locations,  one  at  a  time,  like  Crason's. 
A  set  of  operators  is  provided,  each  producing 
a  different  sequence  of  locations  for  an  element. 
Thus  matching  is  possible  between  a  set  of  S-
Relations  belonging  to  an  element  and  the  most 
appropriate  location  operator 
for  locating  i t. 
In  both  programs,  no  one-to-one  relation  exists 
and  thus  each  location  produced  must  be  eval­
uated. 

In  these  programs,  search  of  the  boundary 

of  the  areas  defined  by  different  S-Relations 
is  approximated  by  location  operators  that  re­
spond  to  particular  arrangement  characteristics, 
e.g.,  the  projected  edges  of  elements  and  the 
perimeters  of  elements.  Thus  they  are  usually 
able  to  generate  some  of  the  locations  satisfy­
(The  location  opera­
ing  a  set  of  S-Relations. 
tions  are  described  in  more  detail  later.)  The 
limitation  imposed  by  the  approximations  used 
by  these  programs  has  not  been  determined. 

Algorithms  for  Space  Planning 

Two  alternative  but  fundamental  approaches 

have  been  utilized  thus  far  in  constructing  a l­
gorithms  for  solving  space  planning  problems. 
The  f i r st  takes  AB  i ts  i n i t i al  step  the  gener­
ation  and  storage  of  a ll  the  possible  locations 
for  each  individual  element.  The  second  step  is 
then  to  eliminate  a ll  conflicting  locations  re­
sulting  from  overlaps  or  S-Relations  u n t il  only 
**IMAGE  relies  on  "averaging"  the  locations  pro­
posed  by  each  S-Relation  using  a  least-squares-
means-fit  procedure.  The  new  location  is  likely 
to  be  different  from  any  of  those  that  are  gen­
erated  by  the  S-Relations  (6). 

Session No.  2 Applications 

31 

S-RELATIONS: 

(1) 

(2) 

(3) 

(4) 

(5) 

ADJACENT  (A,  B,  SA,  SB)  -  This  S-Relation  specifies  that 
element  B  must  have  a ll  of  i ts  side  SB  adjacent  to 
side  SA  of  element  A. 
Parameters  SA  and  SB  are  optional; 
are  not  specified,  any  side  of  the  corresponding  element 
may  be  adjacent; 

(A  may  also  be  a  space.) 

if  one  or  both 

SIGHT  (A,  B,  PTA,  PTB)  -  This  S-Relation  specifies  that 
Point  PTA  on  element  A  be  visible  from  Point  PTB 
on  element  B;  no  solids  may  l ie  in  the  space  dirently 
between  them.  Again,  the  points  are  optional  and  if 
not  defined,  a ll  of  the  element  facing  the  other  element 
must  be  visible; 

DISTANCE  (A,  B,  F,  PTA,  PTB)  -  This  S-Relation  defines 
that  Point  PTA  on  element  A  be  less  than  F  units 
away  from  Point  PTB  on  element  B.  PTA  and  PTB  are 
both  optional  parameters. 
If  either  or  both  are  omitted, 
distance  is  measured  from  the  center  of  the  element; 

ACCESS  (A,  B,  F)  -  This  S-Relation  requires  that  a  pathway 
exist  between  element  A  and  element  B.  The  pathway 
must  be  at  least  F  units  wide  along  i ts  whole  length; 

ORIENT  (A,  B,  SA,  SB)  -  This  relation  defines  required 
orientations  between  elements  B  and  A.  Side  SB  of 
element  B  must  face  element  A  and  side  SA  of  element 
A  must  face  element  B.  Either  SA  or  SB 
both)  are  optional  parameters. 

(but  not 

LOCATION OPERATORS: 

SCAN  (A,  B)  -  Sequentially  generates  the  complete  set  of  locations 

identified  by  the  projection  of  edges  in 

for  element  B, 
the  space  A. 
placement  of  the  element  in  each;  a ll  four  orientations 
of  the  element  are  considered.  SCAN  is  the  most  general 
location  operator  available  in  GSP; 

(See  Figure  Three.)  It  sequentially  considers 

PERIMETER  (A,  B,  SB)  -  This  operator  sequentially  generates  the 
significant 
locations  for  element  B  along  the  boundary 
of  a  specified  and  located  element  in  the  space,  denoted 
by  A.  The  side  SB  of  element  B 
is  placed  along  the 
common  border.  One  or  more  calls  of  this  operator  can 
satisfy  the  ADJACENT  S-Relation. 

TABLE ONE 

Elements  of  General  Space  Planner.  The  above 
S-Relations  and  Operators  are  those  implemented 
in  the  most  current  version  of  GSP. 

32 

Session No.  2 Applications 

one  or  more  feasible  sets  remain.  The  d i f f i c u l­
ties  with  this  Approach  are  (a)  the  large  amount 
of  memory  consumed  in  storing  a ll  location  com­
binations;  (b)  the  large  amounts  of  computer 
time  required  to  search  the  combinations;  and 
(c)  the  strong  assumptions  that  must  be  made 
about  which  locations  from  among  a ll  those  pos­
sible  should  be  stored.  Pfeffercorn's  program 
relies  on  this  method  to  locate  single  elements. 
The  one  effort  which  totally  relied  on  this  ap­
proach  utilized  a  grid  for  defining  shapes  and 
potential 

locations  (9).* 

The  second  approach,  and  the  one  we  w i ll  ex­
amine  in  d e t a i l,  views  the  space  planning  task 
as  one  of  sequentially  generating  locations  for 
each  element,  and  adding  elements  or  changing 
their  locations,  one  at  a  time,  u n t il  a  single 
acceptable  arrangement  is  produced. 
In  order 
that  the  perturbation  of  elements  to  locations 
not  be  random,  consider  them  as  i n i t i a l ly  per­
turbed  and  evaluated  in  lexiographic  order. 
The  task  then  is  to  alter  the  i n i t i al  lexio­
graphic  order,  using  available  information,  so 
as  to  make  the  search  sequence  as  efficient  as 
possible. 

The  decisions  defining  the  perturbation  se­

quence  and  thus  the  efficiency  of  space  planning 
in  this  approach  are: 

1. 

the  sequence  of  locations  considered  for 
a  particular  element  when  it  is  added  to 
the  arrangement; 

2. 

3. 

the  sequence  in  which  the  elements  are 
added; 

the  sequence  in  which  S-Relations  are 
applied  to  test  an  arrangement  or  loca­
tion  and  when  in  the  perturbation 
sequence  they  are  applied; 

4.  when  a  location  operator  cannot  find 
a  location,  or  whan  a  S-Relation  is 
tested  and  f a i l s,  the  rule  or  rules 
which  define  what  object/location 
combination  is  to  be  perturbed  to 
allow  further  progress  on  the  problem. 

In  terms  of  the  formulation  represented  in 
eq.  [ 1 ],  this  approach  relies  on  operations  of 
the  form 

*  Recent  contributions  in  the  area  of  constraint 
elimination  using  known  alternatives  suggest  that 
this  approach  may  s t i ll  have  merit.  See  (10). 

In  the 
cision  rules  in  an  efficient  manner.** 
following,  we  present  bases  on  which  efficient 
procedures  may  be  developed  for  responding  to 
the  four  decision  conditions. 
In  most  cases, 
the  concepts  described  have  been  incorporated 
in  the  GSP  program  now  in  operation  at  Carnegie-
Mellon  University.  Thus  the  following  can  be 
considered  a  description  of  the  automated  design 
procedures  in  GSP.  Where  the  decision  rules 
described  have  not  been  implemented,  we  shall 
e x p l i c i t ly  say  so.  Also  included  in  the  dis­
cussion  is  Pfeffercorn's  method  for  treating 
these  four  issues.  To  augment  the  presentation, 
the  S-Relations  and  location  operators  incor­
porated  in  GSP  are  described  in  Table  One. 
Those  interested  in  a  f u l l er  description  of  CSP 
should  refer  to  ( 1,  2). 

The  Sequence  of  Locations 

In  the  previous  discussion  of  location 
operations  i n i t i al  consideration  was  given  to 
the  selection  of  operators  and  appropriate 
locations. 
f u l ly  rules 

In  the  following,  we  examine  more 
for  sequencing  locations. 

The  basis  for  selecting  a  location  oper­

If  the  kinds  of 

ator  and/or  location  for  an  element  is  the  inter­
action  between  two  or  more  of  the  S-Relations 
belonging  to  the  element. 
S-Relations  that  are  used  to  specify  arrangement 
objectives  are  kept  very  simple,  many  general­
izations  concerning  combinations  of  S-Relations 
are  possible.  For  example,  suppose  adjacency 
relations  require  only  that  any  two  sides  of 
the  elements  it  belongs  to  must  be  in  contact. 
If  we  also  assume  that  distance  relations  are 
always  measured  from  the  nearest  perimeter  of 
the  two  objects,  then  a  distance  relation  of 
zero  is  equivalent  to  an  adjacency  relation 
In  cases  where 
between  the  same  two  elements. 
the  distance  relation  is  not  zero,  the  locations 
available  to  the  adjacency  relation  would  be  a 
subset  of  those  defined  by  the  distance  relation 
and  could  be  ignored. 

If  S-Relations  are  defined  in  such  a  way 
as  to  represent  the  f u ll  complexity  of  meaning­
ful  problems,  then  the  interaction  among  them 
cannot  be  so  simply  specified.  For  example, 
in  the  S-Relations  that  have  been  incorporated 
in  GSP,  the  DISTANCE  S-Relations  allows  distance 
between  specified  points;  the  ADJACENT  S-Relation 
allows  specification  of  the  side  to  be  adjacent. 
If  points  and  sides  are  used  as  references,  the 

**  The  breakdown  of  the  remaining  programs  are 
as  follows:  Graaon's  (5)  relies  on  an  exhaust­
ive  search;  Negroponte's  URBAN5  (11)  operates  in 
the  interactive  design  mode  only  (?  );  and 
Johnson's  IMAGE  (6)  relies  on  a  least-squares -
means-fit  procedure  for  combining  S-Relations. 

Session No.  2 Applications 

33 

The  Sequence  of  Elements 

In  general,  an  efficient  space  planner  is 

one  which  can  find  a  feasible  arrangement  as 
quickly  as  possible.  An  equivalent  objective, 
is  to  show  in  as  few  t r i a ls  as  possible  that  no 
arrangement  is  possible.** 
In  the  following 
discussion  we  use  this  second  objective  as  a 
substitute  of  the  f i r s t. 

FIGURE  FOUR  -  Effect  of  order  on 
the  number  of  operations  required 
to  search  a  tree. 

The  sequence  in  which  elements  are  added 

to  an  arrangement  can  significantly  effect 
search  efficiency.  For  instance,  consider  an 
arrangement  involving  two  elements,  A  and  B. 
We  ignore  consideration  of  a ll  issues  but  the 
number  of  locations  for  each  element;  element 
A  can  be  located  in  five  locations,  B  in  two. 
Two  search  trees  are  possible.  Both  are  shown 
in  Figure  Four. 
arrangement  is  possible,  the  number  of  location 
operations  required  to  search  the  A-B  tree  is 
15,  while  the  B-A  tree  requires  12. 
the  number  of  operations  required  to  enumerate 
the  alternating  location  possibilities  of  a  set 
of  elements,  with  a  fixed  number  of  location 

In  order  to  show  that  no 

In  general, 

**  The  relationship  between  these  two  objectives 
may  not  be  obvious.  Consider  each  sequentially 
generated  arrangement  of  elements  as  identified 
by  Its  index  n,  where  1  <  n  <  N. 
In  order  to 
prove  that  no  arrangement  satisfies  a ll  S-Rela­
tions,  a ll  N  arrangements  must  be  generated  and 
evaluated.  On  the  other  hand,  if  M  arrangements 
exist  that  satisfy  the  S-Relations, 
their  loca­
tions  within  the  ordering  of  n  can  be  consid­
ered  random  and  uniformly  distributed  (assuming 
an  exhaustive  enumeration  algorithm).  Thus  the 
average  number  of  locations  that  must  be 
evaluated  is  equal  to 

relation  between  the  two  S-Relations  cannot  be 
easily  specified.  After  careful  analysis  of  the 
interaction  of  the  S-Relations  in  GSP,  the 
author  has  concluded  that  only  four  warrant 
special  attention  in  i ts  space  planning  algo­
rithms.* 

It  is  not  possible  in  GSP  to  generate  the 

boundaries  of  areas  defined  by  S-Relations.  GSP 
relies  instead  on  selecting  a  location  operator 
that  is  likely  to  quickly  generate  some  of  the 
locations  in  the  intersection. 
It  includes  an 
operator  that  generates  locations  responsive  to 
the  one  line  producing  S-Relation,  ADJACENT. 
It 
generates  locations  along  the  perimeter  of  a 
specified  or  element.  Points  on  the  perimeter 
are  selected  that  are  defined  by  projection  of 
the  edges  in  the  current  arrangement.  See 
Figure  Three. 
to  the  element  to  be  located,  a  general  oper­
ator  called  SCAN  which  tries  a ll  corners  defined 
by  projections  of  edges  within  the  space. 
(See  Figure  Three.)  Pfeffercorn's  program  relies 
on  one  operator  similar  to  SCAN  for  making  a ll 
locations. 

If  no  ADJACENT  S-Relation  belongs 

FIGURE  THREE  -  In  the  twenty-four 
locations  shown,  each  element  would 
be  considered  in  i ts  four  orienta­
tions.  PERIMETER  (in  relation  to 
the  space)  would  generate  1-2-3-4-5-
6-12-11-16-20-22-24-23-17-13-7 
that  order. 

in 

*  The  design  of  S-Relations  which  can  depict 
the  complexities  of  the  real  world  and  which 
interact  in  well  specified  ways  is  an  important 
research  problem.  The  interactions  specially 
considered  in  GSP  are  that  ORIENT  defines  a 
subcondition  of  ADJACENT  and  SIGHT.  Only  loca­
tion-orientation  combinations  which  agree  with 
ORIENT  need  be  considered  in  solving  SIGHT. 
Two  ADJACENT  S-Relations  interact  to  define  one 
of  three  conditions: 
(1)  a  single  or  possibly 
two  locations;  (2)  a  null  location  set;  (3)  if 
the  distance  between  the  two  elements  are  the 
exact  width  of  the  t h i r d,  a  line  of  locations 
results.  Last,  two  ORIENT  S-Relations  belong­
ing  to  the  same  element  must  agree,  else  they 
define  a  null  intersection. 

34 

Session No.  2 Applications 

possibilities  is  equal  to  W  where 

is  a  Particular  order­

where  p[1],  P[2]'...p[m] 
ing  of  the  location  possibilities  associated 
with  each  of  the  m  elements. 
It  is  easily 
proved  that  W 
is  minimized  when  elements  are 
added  to  an  arrangement  in  ascending  order  of 
their  p.  Thus  if  we  can  determine  the  number 
of  potential  locations  for  each  element,  we  can 
derive  the  sequence  for  searching  their  com­
binatorial  locations  most  e f f i c i e n t l y .* 

In  r e a l i t y,  no  fixed  number  of  locations  can 
be  specified  for  an  element;  the  number  changes 
according  to  the  arrangement  of  the  other  ele­
ments.  We  may  approximate  the  ascending  order 
of  p  by  dynamically  evaluating  the  relative 
number  of  locations  available  after  each  change 
in  the  existing  arrangement.  After  each  change, 
we  add  to  the  arrangement  next  that  element  with 
the  relatively  fewest  number  of  locations  avail­
able  to  i t. 

The  locations  available  to  an  element  are 

those  within  the  intersection  of  areas  and  lines 
defined  by  each  S-Relation  belonging  to  that 
element.  These  areas  can  be  defined  for  any 
S-Relation  which  has  one  of  i ts  element  pred­
icates  already  located;  for  those  without  one 
the  resulting  acceptable  area  cannot  be  defined. 

We  can  compute  the  approximate  area  for  those 

S-Relations  which  define  them.  We  can  also  com­
bine  these  areas  by  assuming  that  the  points  in 
each  area  are  distributed  independently  of  the 
points  in  other  areas.  (Independence  is  assumed 
for  a ll  but  the  exceptions  listed  in  the  f i r st 
footnote  on  the  previous  page.)  We  c a ll  the 
t o t al  area  available  to  an  element  i,  Si*. 
For  an  unlocated  element 
of  S-Relations  c.,  that  belong  to  i t. 
denotes  the  S-Relations  from  among  the  c 
which  have  their  other  predicate*element  already 
located.c  The  set  of  areas 
by 
equal  to 

identified 
c  w i ll  define  an  intersection  which  is 

c0 

i 

there  is  a  seto 

S 

Because  the  size  of  an  element  also  restricts 
the  number  of  locations  available  to  i t,  we 
divide  the  area  available  to  locate  an  element 
by  i ts  area,  or 

*  In  the  above,  we  assume  that  the  cost  of  gen­
erating  locations  for  a ll  elements  is  equal. 
See  (13). 

which  defines  the  relative  number  of  disjoint 
locations  available  to  element 
given  the 
current  arrangement. 

i, 

For  each  unlocated  element,  GSP  computes 
the  above  function  and  selects  the  element  with 
the  lowest  value  to  locate  in  the  arrangement 
next. 

Pfeffercorn's  program  includes  elements 
in  decreasing  order  of  their  size  (12).  Thus, 
[ 5 ]. 
it  approximates  the  lefthand  part  of  eq. 

Sequencing  of  S-Relations  Applied  to  a  Location 

The  S-Relations  would  then  be  applied  in  increas­
ing  order  of  their  0 
cates  elements  in  order  of  their  severity, 
(though  he  does  not  state  his  function  for  de­
termining  severity). 

.  Pfeffercorn  also  lo­

In  applying  the  S-Relations  to  locations, 
it  is  useful  to  distinguish  between  two  types, 
those  that  are  not  affected  by  the  arrangement 
of  elements  which  are  not  i ts  predicates,  and 
those  that  are.  An  adjacency  relation  between 
two  elements,  no  matter  how  qualified  by  argu­
ments,  w i ll  not  be  affected  by  the  placement  of 
other  elements.  On  the  other  hand  a  sight line 
relation,  defining  that  an  open  line  of  vision 
must  exist  between  two  points  or  areas,  may  be 
affected  by  any  change  in  the  total  arrangement 
of  elements.  We  call  the  f i r st  type  of  S-
Relation  local,  and  the  others  global.  A  local 
S-Relation  can  be  evaluated  immediately  after 
placement  of  the  elements  which  are  i ts  pred­
icates. 
If  it  is  satisfied,  no  later  evalua­
tions  are  required.  Global  relations  can  be 
affected  by  any  perturbation  of  the  arrangement 
and  thus  must  be  tested  after  any  alteration 
of  the  arrangement. 
TION,  and  DISTANCE  are  local  S-Relations. 

In  GSP,  ADJACENT,  ORIENTA­

Session No.  2 Applications 

35 

We  have  found  that  incorporation  of  the  pre­
viously  described  decision  rules  is  facilitated 
if  the  major  information  they  u t i l i ze  is  repre­
sented  in  the  form  of  a  directed  graph,  hence 
the  name  Constraint  Structured  Planning.  Each 
element  or  space  defined  as  part  of  the  problem 
is  represented  as  a  node  in  the  graph.  Each 
S-Relation  is  represented  as  one  or  two  directed 
edges. 
If  a  S-Relation  belongs  to  two  elements, 
it  defines  two  edges,  one  in  each  direction 
between  them. 
If  a  S-Relation  is  unary  or  be­
tween  an  element  and  the  space,  then  only  one 
edge  is  defined.  Each  edge  has  a  value  corres­
ponding  to  the  area  allowed  for  i ts  successor 
element  when  i ts  predecessor  element  is  already 
located.  Each  node  then  takes  a  0  -  1  value 
denoting  whether  it  has  been  located.  For 
example,  the  problem  shown  in  Figure  One  can 
be  represented  by  the  graph  shown  In  Figure 
Five. 

Backup  Procedures. 

When  a  location  operator  fails  to  generate 

an  acceptable  location  for  an  element,  it  is  due 
to  one  of  two  causes.  Either  the  operator  failed 
to  generate  a  location  within  an  existing  inter­
section  of  the  S-Relation  areas,  or  the  inter­
section  of  the  relevant  S-Relations  was  n u l l. 
In  both  GSP  and  Pfeffercorn's  DPS  program, 
the  f i r st  source  of  failure  is  assumed  to  be 
negated  with  careful  selection  of  the  location 
operator. 
(DPS  has  only  one  operator;  thus  no 
mistake  is  possible).  Thus  any  failure  is  assum­
ed  to  be  caused  by  a  null  intersection. 

The  likelihood  that  a  S-Relation  w i ll  cause 

failure  of  a  location  operator  is  inversely 
proportional  to  the  area  it  defines;  the  S-
Relation  with  the  smallest  area  is  thus  most 
c r i t i c a l.  One  way  to  resolve  failure,  then,  is 
to  alter  the  area  defined  by  the  most  c r i t i c al 
S-Relation. 
If  that  S-Relation  happens  to  be 
of  the  local  type,  then  the  only  way  to  change 
i ts  area  is  to  alter  the  location  of  i ts  prev­
iously  located  element. 
If  the  S-Relation  is 
global,  then  moving  any  one  of  several  elements 
may  alter  the  S-Relation's  acceptable  area. 
GSP,  in  both  cases,  selects  to  relocate  f i r st 
the  most  restrictive  element  related  to  the 
failed  one  by  a  local  S-Relation. 
found,  then  the  global  S-Relation  projecting  the 
smallest  acceptable  area  is  considered  and  its 
other  element  selected  for  re-location.  This 
backup  procedure  can  be  applied  recursively. 

If  none  is 

Pfeffercorn's  DPS  program  backtracks  by 

removing  both  elements  of  the  S-Relation  assumed 
to  be  most  r e s t r i c t i v e. 
It  ingeniously  composes 
an  arrangement  of  the  two  elements  that  satisfies 
their  S-Relation  and  attempts  to  relocate  a  com­
posite  pair  back  into  the  arrangement  (12). 

Implementation  of  Constraint  Structured 

Planning  in  GSP 

GSP  incorporates  no  means  for  directly  com­
puting  the  area  projected  by  a  S-Relation.  Thus 
it  cannot 
take  advantage  of  the  location  gener­
ation  method  outlined  in  the  description  of  lo­
cation  operations.  When  considering  which  ele­
ment  to  add  next  to  the  arrangements  GSP  also 
can  only  approximate  the  areas  projected  by  the 
different  S-Relations. 

For  each  S-Relation,  GSP  has  a  heuristic 

function  which  estimates  i ts  allowed  area.  These 
estimates  make  assumptions  about  shapes  (that 
a ll  are  rectangular)  and  the  distribution  of 
elements.  They  are  static,  in  that  they  rely 
on  the  particular  problem  definition  and  not  on 
any  particular  arrangement.  The  current  form 
of  these  estimating  functions  are  presented  in 
Table  Two.  We  expect  to  improve  these  methods 
for  estimating  areas  as  our  experience  with  GSP 
grows. 

FIGURE  FIVE  -  Constraint  Graph 
for  the  problem  described  in 
Figure  One. 

The  Constraint  Graph  depicting  any  particu­

lar  problem  is  treated  not  as  an  alternative 
representation  of  the  problem,  but  as  a  planning 
representation  that  allows  analysis  of  import­
ant  characteristics.  Thus  we  use  the  Constraint 
Graph  in  a  manner  similar  to  Gelernter's  plan­
ning  model  for  geometry  theorem  proving  (4). 

The  matrix  form  of  the  Constraint  Graph  is 

utilized  and  consists  of  an  edge  by  node  matrix, 
denoted  l((n  +  3,  m  +  1).  The  extra  rows  and 
columns  are  used  as  follows:  R(n  + 1,  i)  = 
the  estimated  area  of  element  i;  R(n  +  2,  i) 
denotes  whether  the  element  has  been  located 
and  R  ( j,  m  +  1)  denotes  the  type  of  S-Relation 
involved.  See  Figure  Six. 

On  selecting  a  new  element  to  locate,  GSP 

36 

Session No.  2 Applications 

Current  functions  for  estimating  the  area  allowed 
by  an  S-Relation. 
The  area  is  multiplied  by  the  number  of  orientations 
allowed. 

Session No.  2 Applications 

37 

FIGURE  SIX  -  Matrix  form  of  the  Constraint  Graph  for  the 

problem  in  Figure  One. 

inter­
computes  for  each  element 
section  of  known  areas  belonging  to  i t,  defined 
in  terms  of  the  estimated  disjoint  locations 
allowed,  e.g. 

the 

[7] 

Eq.  [7]  corresponds  to  eq.  [ 5 ]. 

After  an  element  has  been  selected  and  a  loca­

tion  proposed,  we  wish  to  sequentially  evaluate 
[ 6 ], 
it  according  to  Slagle's  c r i t e r i o n,  e.g.  eq. 
Currently,  we  assume  a ll  tests  to  have  the  same 
cost.  Thus  we  make 

largest  area  of  a  S-Relation 
(belonging  to  element 
during  this  iteration. 

i) 

tested 

and  select 

j  which 

In  practice,  we  apply  this  algorithm  to  the 
constraint  graph  twice, 
f i r st  subject  to  the 
additional  constraint  that  R ( j,  m 4+ 1)  desig­
nates  a  local  S-Relation,  then  again  without  i t. 

If  an  element 

i  cannot  be  located  accept­

ably,  the  backup  procedure  is  implemented  by 
relocating  that  element 
among  those  where 

i *,  selected  from 

As  above,  two  iterations  may  be  required,  f i r st 
for  local  then  for  global  S-Relations. 
An  Example 

Constraint  Structured  Planning  seems  to  have 

38 

Session No.  2 Applications 

Seven  (6).  The  intersections  of  allowed  areas 
(eq.  [7])  are  recomputed  for  each  element.  Ele­
ment  Six  is  selected  next,  which  is  located  with 
SCAN  as  shown  in  Figure  Seven  (c).  Of  the  six 
remaining  elements,  Seven  has  the  smallest  allow­
ed  area.  Because  it  must  be  adjacent  to  element 
Six,  PERIMETER  attempts  to  locate  it  but  fails  to 
do  so  for  lack  of  room.  The  backup  algorithm, 
eq. 
[ 9 ],  is  initiated  and  it  identifies  element 
Six  as  the  best  candidate  for  relocation. 
It  is 
moved  to  the  location  shown  in  Figure  Seven  (d), 
the  only  other  acceptable  one.  Element  Seven 
is  then  located,  followed  sequentially  by  Eight, 
Five  and  Four.  The  result  is  shown  in  Figure 
Seven  (e).  The  last  two  elements  are  added, 
f i r st  Three  then  Eight,  after  Eight  is  rotated 
to  satisfy  the  ORIENT  S-Relation.  The  accepted 
arrangement  is  shown  in  Figure  Seven  ( f ),  as 
printed  on  our  plotter. 
In  preliminary  tests, 
specification,  solution,  and  a ll  plotting  for 
this  task  took  about  three  and  a  half  minutes 
of  CPU  time  on  Carnegie-Mellon  University's 
IBM  360/67  computer,  using  TSS  FORTRAN. 

Its  general  performance  indicates  that  Con­

straint  Structured  Planning  works  most  efficient­
ly  when  the  task  is  highly  structured.  Search 
is  significantly  speeded  up  if  many  ADJACENT 
S-Relations  are  involved. 
If  no  S-Relations 
project  areas  for  unlocated  elements,  they  are 
chosen  according  to  their  approximate  size, 
biggest  f i r s t.  GSP  is  known  to  f a il  on  some 
problems,  due  to  poor  handling  of  global  S-
Relations.  Debugging  and  re-coding  are  expected 
to  significantly  lower  current  running  times. 

Conclusion 

While  Constraint  Structured  Planning,  as 

implemented  in  GSP,  begins  to  effectively  deal 
with  several  of  the  issues  inherent  in  space 
planning,  many  remain  for  more  detailed  explor­
ation.  Within  the  problem  domain  considered 
here,  issues  s t i ll  remain  in  each  of  the  four 
decision  processes. 
In  the  element  selection 
process,  only  S-Relations  which  have  one  of 
their  predicate  elements  located  can  currently 
be  brought  into  the  analysis,  yet  the  other 
S-Relations  act  to  delimit  allowed  areas  also. 
No  means  has  yet  allowed  us  to  estimate  the  re­
strictions  imposed  by  a ll  S-Relations. 

GSP  was  implemented  before  the  author  appre­

ciated  or  understood  how  S-Relations  and  loca­
tion  operators  interact.  Thus  no  means  is  built 
into  it  for  projecting  areas  defined  by 
S-
Relations,  nor  for  looking  at  the  boundary 
intersections  between  such  areas.  We  anticipate 
that  a  system  allowing  these  capabilities  would 
greatly  increase  the  efficiency  of  search,  as 
well  as  to  allow  more  varied  shapes  of  elements. 
Pfeffercorn's  method  of  representation  would 
easily  handle  these  requirements. 

Effective  backup  procedures  have  been  devel­

oped  for  treating  local  S-Relations,  but  there 

(f) 

FIGURE  SEVEN  -  Example  problem  and  the 
sequence  of  alternative  states  generated 
by  GSP  to  solve  i t. 

powerful  capabilities  for  dealing  with  a  general 
class  of  space  planning  problems.  Formal  eval­
uation  and  empirical  testing  of  i ts  capabilities 
are  currently  underway. 
In  order  for  the  reader 
to  better  understand  the  characteristics  of  i ts 
operation,  we  offer  a  detailed  description  of  i ts 
operation  on  one  t r i al  problem.  We  use  the  prob­
lem  presented  in  Figure  One  and  whose  Constraint 
Graph  is  shown  in  Figures  Five  and  Six.  We  as­
sign  to  GSP  the  problem  of  arranging  the  machin­
ery  in  Figure  One  to  the  space  shown  in  Figure 
Seven  (a),  subject  to  the  S-Relations  defined  in 
Figure  One. 

Row  n+3 

in  Figure  Six  shows  the  computed 

intersection  areas  for  the  S-Relations  upon 
i n i t i a t i on  of  the  program.  Element  One  is  select­
ed.  Locations  for  it  are  generated  by  SCAN,  which 
rotates  it  and  locates  it  as  shown  in  Figure 

Session No.  2 Applications 

39 

(8)  Krejcirik,  M.  -  "Computer-aided  Plant 

Layout",  Computer  Aided  Design  2 : 1,  1969, 
pp  7-19. 

(9)  Miller,  W.  R.  -  "Computer-Aided  Space 
Planning",  Proceedings  of  the  Seventh 
Annual  Design  Automation  Workshop,  San 
Francisco,  C a l i f .,  1970. 

(10)  Montanari,  V.  -  "Networks  and  Constraints: 

Fundamental  Properties  and  Applications 
to  Picture  Processing",  Dept.  of  Computer 
Science  Working  Paper,  Carnegie-Mellon 
University,  January  1971. 

(11)  Negroponte,  N.,  and  L.  Grossier  -  "URBAN5: 

A  Machine  that  Discusses  Urban  Design", 
in  Emerging  Methods  of  Environmental 
Design  and  Planning,  G.  Moore  (ed.), 
The  M.I.T.  Press,  Cambridge,  Mass.  1970. 

(12)  Pfeffercorn,  Charles  -  "Computer  Design  of 
Equipment  Layouts  Using  the  Design  Problem 
Solver",  unpublished  ph.  d.  dissertation, 
Dept.  of  Computer  Science,  Carnegie-Mellon 
University,  May  1971. 

(13)  Slagle,  James  -  "An  Efficient  Algorithm 

for  Finding  Certain  Minimum  Cost  Pro­
cedures  for  Making  Binary  Relations", 
Journal  of  the  Association  for  Computing 
Machinary,  1964,  pp  253-264. 

(14)  Zehna,  Peter  -  Probability  Distributions 

and  Statistics,  Allyn  and  Bacon  Inc., 
Boston  1970. 

has  been  l i t t le  progress  in  characterizing  or 
treating  global  S-Relations;  thev  seem  to  be  the 
cause  of  most  search  d i f f i c u l t i e s. 

Future  efforts  at  expanding  GSP  w i ll  include 
the  introduction  of  variable  shape  elements  and 
the  appropriate  operators  and  tests  to  deal  with 
them.  We  also  propose  to  expand  GSP  so  as  to 
handle  hierarchical  problem  domains,  e.g. 
"arrange  the  equipment  in  the  rooms,  which  are 
arranged  and  shaped  within  a  building,  which  is 
arranged  and  shaped  on  a  site"  (1).  Such  form­
ulations  clearly  open  up  new  problem  domains 
and  exciting  challenges  for  future  research. 

Applications  for  space  planning  programs 

should  be  obvious.  As  greater  capabilities 
develop  for  processing  spatial  arrangement  tasks, 
better  analyzed,  better  structured,  and  even 
more  beautiful  physical  environments  should 
result. 

References 

(1)  Eastman,  C M .-  "Preliminary  Report  on  a 

System  for  General  Space  Planning", 
Communications  of  the  Association  for 
(1971). 
Computing  Machinary  (in  press) 

(2)  Eastman,  C.  M.  -  "GSP:  A  System  for 
Computer  Assisted  Space  Planning", 
Proceedings  Design  Automation  Workshop, 
June  20-30,  1970,  Atlantic  City,  N.  J. 

(3)  Eastman,  C . M .-  "Cognitive  Processes  and 
Ill-Defined  Problems:  a  Case  Study  from 
Design",  Proceedings  of  the  Joint  Inter­
national  Conference  on  A r t i f i c i al  I n t e l l i­
gence",  D.  Walker  and  L.  Norton  eds. 
Washington,  D.  C,  May  7-9,  1969. 

(4)  Gelernter,  H.  -  "Realization  of  a  Geometry-

Theorem  Proving  Machine",  Computers  and 
Thought,  E.  Feigenbaum  and  J.  Feldman  (eds.) 
McGraw-Hill,  N.  Y.  1963,  pp  134-152. 

(5)  Grason,  John  -  "An  Approach  to  Computerized 

Space  Planning  Using  Graph  Theory",  Pro­
ceedings  Design  Automation  Workshop,  June 
28-30,  1971,  Atlantic  City,  N.J. 

(6) 

Johnson,  T.,  G.  Weinzapfel,  et  a l.  -
"IMAGE:  An  Interactive  Graphics-Based 
Computer  System  for  Multi-Constrained 
Spatial  Synthesis".  Report  from  the 
Dept.  of  Architecture,  M.I.T.,  Sept.  1970. 

(7)  Krauss,  R.  and  J.  Myer,  et  a l.  -  "Design: 

A  Case  History"  in  Emerging  Methods  of 
Environmental  Design  and  Planning. 
G.  Moore,  (ed.)  The  M.I.T.  Press,  Cambridge, 
Mass.,  1970. 

