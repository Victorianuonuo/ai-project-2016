A New Look at the Semantics and Optimization Methods of CP-Networks 

Ronen I. Brafman 

Dept. of Computer Science 

Ben-Gurion University 
Beer-Sheva 84105, Israel 

brafman@cs.bgu.ac.il 

Yannis Dimopoulos 

Dept. of Computer Science 

University of Cyprus 
Nicosia 1678, Cyprus 

yannis@cs.ucy.ac.cy 

Abstract 

Preference  elicitation  is  a  serious  bottleneck  in 
many decision support applications and agent spec(cid:173)
ification tasks.  CP-nets were designed to make the 
preference elicitation process simpler and more in(cid:173)
tuitive  for  lay  users  by  graphically  structuring  a 
set of Ceteris Paribus (CP) preference statements -
preference statements most people find natural and 
intuitive.  In various contexts, CP-nets with an un(cid:173)
derlying  cyclic  structure  emerge  naturally.  Often, 
they  are  inconsistent  according  to  the  current  se(cid:173)
mantics, and the user is required to revise them.  In 
this  paper we  show  how  optimization  queries  can 
be  meaningfully  answered  in  many  "inconsistent" 
networks  without  troubling  the  user with  requests 
for revisions.  We also describe a method for focus(cid:173)
ing users' revision process when revisions are truly 
needed. In the process, we provide a formal seman(cid:173)
tics  that  justifies  our  approach  and  we  introduce 
new techniques for computing optimal outcomes. 

Introduction 

1 
Ceteris  Paribus  (CP)  preference  statements  are  among  the 
most  natural  and  most  intuitive  preference  statements  that 
people make.  Thus, it is not surprising that they have drawn 
the attention of many researchers in  philosophy and AI  (e.g., 
[Doyle and Wellman,  1994; Hanson,  1996]).  CP statements 
indicate  a preference for one value over another in  the con(cid:173)
text  of  a  fixed  background.  For  example,  the  statement  "I 
prefer an apple pie to a chocolate cake as a dessert,  ceteris 
paribus" expresses  the  fact  that given  two  identical  contexts 
- i.e., meals - that differ only in their dessert, the one contain(cid:173)
ing an apple pie is preferred to the one containing a chocolate 
cake.  Finer distinctions  can  be  made  using  conditional  CP 
statements.  For example:  "I prefer red wine over white wine 
if the  main  course  is  beef."  In  this  case,  the  preference  for 
red wine to white wine is restricted to comparisons between 
identical meals in which the main course is beef. 

CP-nets iBoutilier et al,  1999] are a graphical tool for rep(cid:173)
resenting and for structuring a set of CP statements.  A  CP-
network consists of a graph describing the preferential depen(cid:173)
dency relationship between different domain variables.  Each 
node is annotated by a conditional preference table (CPT) that 
describes how the user's preference over the different values 

of the variable associated with this node depends on the vari(cid:173)
ables associated with the parents of this node. 

Cyclic CP-nets emerge naturally when there is a set of in(cid:173)
terdependent variables, none of which is more important than 
the other. For example, [Domshlak et al, 2001 ] note that such 
dependency can  emerge  naturally  among  web-page compo(cid:173)
nents  in  their web-personalization  tool.  Cyclic  CP-network 
raise some conceptual and computational problems to which 
we still do not have satisfactory answers. Even worse, accord(cid:173)
ing to the standard semantics of CP-nets, most cyclic CP-nets 
are  inconsistent.  For example,  in  [Domshlak  and Brafman, 
2002], it was shown that the preference ordering induced by 
any simple cycle (i.e, a cycle that does not contain smaller cy(cid:173)
cles) with more than two nodes is inconsistent.  That is, there 
will  be at least two outcomes,  o\  and o2, such that one can 
show that o1 is strictly preferred to o2  and o2  is strictly pre(cid:173)
ferred to  o\.  In  addition,  whereas  for acyclic  networks  one 
can determine the most preferred outcome in linear time even 
in  the  face  of evidential  constraints  (i.e.,  constraints  that fix 
the value of certain variables), no corresponding algorithm is 
known for networks that contain cycles. 

The fact that many cyclic  networks arc  inconsistent raises 
a serious practical concern.  When a user specifies an incon(cid:173)
sistent cyclic network, we must ask him to revise his network. 
To do so, we need to provide information that will  help him 
obtain a consistent network. In this paper we make two prac(cid:173)
tical contributions aimed at improving this process. First, we 
show that various optimization queries can be answered nat(cid:173)
urally even when  the network is  "inconsistent" according to 
the standard semantics.  In such cases,  no additional burden 
is placed on the user.  Second, when revision is required, we 
show how the notion of a partial model, studied in the area of 
logic programming, can be used to identify those aspects of a 
model that require revision. 

While pursuing our more practical goals we make a num(cid:173)
ber of technical  and  semantic  contributions.  First,  we  pro(cid:173)
vide  a  more  flexible  semantics  for CP-nets  that  is  identical 
with the current semantics on those networks the  latter con(cid:173)
siders  consistent.  This  semantics justifies  our  approach  for 
generating optimal outcomes given networks that are incon(cid:173)
sistent under the standard semantics.  Second, we show how 
to answer optimization queries using various approaches that 
include reduction to  SAT,  and  reduction  to  logic  programs. 
This extends current methods which are restricted to acyclic 
nets, and helps us define the notion of a partial outcome. 

QUALITATIVE  REASONING 

1033 

The paper is  structured as  follows:  In  Section  2  we  pro(cid:173)
vide the necessary background on ceteris paribus preference 
statements and CP-nets.  In Sections 3 and 4 we take a closer 
look at the notion of consistency in CP-nets and the problem 
that cyclic  networks  introduce,  we  suggest a  natural defini(cid:173)
tion of a preferred model as one that cannot be improved, and 
explain how the problem of the existence of such models can 
be reduced into a CSP problem.  In Section 5 we discuss an 
alternative translation into nonmonotonic logic programs and 
some of its implications, and in Section 6 we conclude.  The 
full  version of this  paper is  available  from  the  authors'  web 
site.  It contains proofs, an optimization method based on cut(cid:173)
set conditioning, a discussion of constrained optimization and 
other inference tasks, and a comparison with logic programs 
with ordered disjunction  fBrewka et ai, 2002].1 

2  CP-Nets 
We  start  with  a  review  of  ceteris  paribus  preference  state(cid:173)
ments and preferential independence, followed by the defini(cid:173)
tion  of CP-nets. 

2.1  Ceteris  Paribus Preference Statements 
A preference  relation  is  a  total  pre-order (a  ranking) over a 
set of outcomes.  Given two outcomes 
if 
strictly more preferred than 

is at least as preferred as 

and we write 

we write 

if o  is 

The  types  of outcomes  we  are  concerned  with  consist  of 
possible assignments to some set of variables.  More formally, 
of  variables 
we assume some given set 
with corresponding domains 
.  The set of 
possible outcomes is then 
For exam(cid:173)
ple,  in  the  context of the  problem  of configuring a  personal 
computer (PC), the variables may be processor type,  screen 
size, operating system etc., where screen size has the domain 

operating system has the domain 

Windows98, WindowsXP  , etc.  Each assignment to the set of 
variables  specifies  an  outcome  -  a  particular PC  configura(cid:173)
tion.  Thus, a preference ordering over these outcomes speci(cid:173)
fies a ranking over possible PC configurations. 

The  number  of  possible  outcomes  is  exponential  in 

while  the  set  of possible  total  orders  on  them  is  doubly  ex(cid:173)
ponential in 
Therefore, explicit specification and represen(cid:173)
tation  of a  ranking  are  not  realistic.  We  must  find  implicit 
means of describing this preference relation.  The notion of 
conditional preferential independence plays a key role in such 
representations.  Intuitively,  X  and  Y  are  conditionally pref(cid:173)
erentially  independent  given  Z  (where  X, Y ,Z  are  disjoint 
subsets  of V)  if for every fixed assignment  to  Z,  the  ranking 
of X  values  is  independent  of the  value  of Y.  Formally,  let 
X, Y  and Z  be a partition of V  and  let z  P(Z).  X  and  Y 
are  conditionally  preferentially  independent  given  z  iff,  for 

we have that 

X  and  Y  are  conditionally  preferentially  independent given 
Z  if  they  are  conditionally  preferentially  independent  given 

1A  note on notation.  Due to the difficulty of using the logical 
in drawing packages, we use two alternative 

negation operator, 
notations: 

instead of 

and 

instead of 

any assignment z 
In our PC example, the user may 
assess  operating system  to  be  independent of other  features 
given processor type.  That is, it always prefers LINUX given 
an AMD processor and Windows98 given an Intel processor 
(e.g.,  because  he  believes  Windows98  is  optimized  for  the 
Intel processor, whereas LINUX is otherwise better).  Condi(cid:173)
tional preferential independence is a standard notion in multi-
attribute utility theory [Keeney and Raiffa,  1976]. 
2.2  CP-nets 
CP-nets were  introduced in  [Boutilier et  al.,  1999J as a tool 
for  compactly  and  intuitively  representing  qualitative  pref(cid:173)
erence  relations.  This  graphical  model  exploits  conditional 
preferential  independence  in  structuring  a  decision  maker's 
preferences  under  ceteris paribus  (all  else  being  equal)  se(cid:173)
mantics.  CP-net  is  the  first  model  based  on  the  notions  of 
purely qualitative preferential independence, and bears a sur(cid:173)
face similarity to Bayesian  nets [Pearl,  1988].  However, the 
nature of the  relationship  between  nodes  within  a CP-net  is 
generally  quite  weak  compared  with  the  probabilistic  rela(cid:173)
tions in Bayes nets. 

During  preference  elicitation,  for each  variable  Ar  in  the 
variable set V, the decision maker is asked to specify a set of 
parent  variables 
(Ar)  that can  affect her preferences over 
the values of A'.  That is, given a particular value assignment 
to 
(A"), the decision maker should be able to determine a 
preference order over the  domain of  X  (denoted  as  P(A")), 
all other things being equal. 

The  above  information  is  used  to  create  the  graph  of the 
CP-net  in  which  each  node  X  has 
as its immediate 
predecessors.  Given this structural information, the decision 
maker is  asked to explicitly specify  her preferences over the 
(A").  This conditional 
values of X for each instantiation  of 

As  an  example,  consider  the  network  in  Figure  1(a),  in 
which all variables are boolean.  This network has three vari(cid:173)
ables,  A,B,  and  C.  The  preferences  over A  and  B  are  un(cid:173)
conditional,  whereas  the  preferences  for  C's  values  depend 
on  the  values  of A  and  B.  In  Figure  1(b),  we  see  the  pref(cid:173)
erence order induced  by  this  CP-network.  For every  pair of 

1034 

QUALITATIVE  REASONING 

Figure  2:  A  Simple  4-Cycle  CP-network. 

is  obtained  from  

via  a  single  improving  flip.  Natu(cid:173)
rally,  these  definitions  are  with  respect  to  some  CP-network, 
which  we  take  to  be  fixed  by  the  appropriate context. 

Theorem  1 
sequence 

from 

is  valid  iff there  is  an 

improving  flipping 

Figure  1:  A  CP-net and  its corresponding preferential order. 

An  immediate consequence is  the following: 

outcomes 
from i 

we  have  that 

in  this graph. 

is  valid  iff there  is  a  path 

3  The Weak Preference Semantics 
According  to  the  standard  semantics,  the  preferences  ex(cid:173)
pressed  in  the  CPT  of  a  CP-net  are  strict  preferences.  We 
suggest  viewing  them  as  weak  preferences  using  pre-orders 
instead  of strict orders.  As  we  show,  this  leads  to  a  semantics 
that  is  only  slightly  weaker  than  the  standard  semantics. 
In 
fact,  it  leads  to  identical  orderings  on  CP-nets  that  are  con(cid:173)
sistent  according  to  the  standard  semantics.  More  formally, 

valid, no strict preference would be valid.  This is because the 
preference  relation  in  which  all  outcomes  are  equally  desir(cid:173)
able  is  a model  for every  CP-network  according to  the  above 
semantics.  Thus,  all  CP-nets  are  "consistent"  according  to 
our  semantics. 

The above semantics can be related to a more syntactic no(cid:173)
tion  of a  proof of preference, or a  flipping sequence  [Boutilier 
et  al.,  1999].  Let  o  be  an  outcome,  and  suppose  that  o  as(cid:173)
signs  to  X  some  value  
in 
parental  context c  satisfied  in  o.  Then,  we  can  improve o  by 
flipping  the  value  of X  from  
An  improving  flipping 
sequence 
is  a  sequence  of outcomes  such  that 

that the user ranks  lower than  

to 

In the standard semantics we have 

Consequence 1 
ping  sequence 
from 

from 

is  valid  iff there  is  an  improving  flip(cid:173)
flipping  sequence 

to  hut  no  improving 

Another interesting  theorem relates  the  standard,  stronger se(cid:173)
mantics,  and our semantics. 

Theorem  2  Let  G  be  a  CP-network  that  is  consistent  accord(cid:173)
ing  to  the  standard  semantics.  Then,  G  satisfies 
cording  to  our  semantics  iff G 
the  standard  semantics. 

according 

satisfies 

to 

This theorem shows that our semantics  is a direct extension 
of  the  standard  semantics.  To  understand  it  better,  we  will 
soon  take  a  look  at  networks  that  are  inconsistent  according 
to  the  standard  semantics. 

such  that 

Finally,  we  define the  notion  of optimality  in  the  context of 
a  CP-network.  There  are  two  possible  definitions:  An  out(cid:173)
is  said  to  be  strongly  optimal  iff  there  is  no  other 
come 
holds.  An  outcome  o  is  said 
outcome 
to  be  weakly  optimal  iff there  is  no  other  outcome  o'  such  that 
holds.  Thus,  in  the  first  case,  o  is  either  strictly  bet(cid:173)
ter  than  any  other  outcome  or  incomparable. 
In  the  second 
case,  there  may  be other outcomes that are  as preferred as  o, 
but  no  outcome  that  is  strictly  preferred  over  o.  In  networks 
that  are consistent  according to  the  standard semantics,  there 
is  a  unique  best  outcome  that  is  strictly  better than  any  other 
outcome.  However,  when  we  move  beyond  this  class  of net(cid:173)
works,  we  can  have  more  than  one  optimal  outcome,  and  it 
can  be  either  strongly  or  weakly  optimal.  The  latter  class  is 
computationally more challenging to  identify, and  so we con(cid:173)
centrate on  strongly optimal  outcomes. 

4  Optimality in Cyclic Networks 
The  semantics  of  CP-nets  allows  for  cycles.  But  only  the 
consistency of acyclic  CP-nets  is  guaranteed  according to  the 
standard  semantics  [Boutilier  et  al,  1999].  Moreover,  such 
networks  have  a  unique  optimal  outcome.  This  remains  true 
even  if  we  introduce  evidential  constraints,  i.e.,  constraints 
that  fix  the  value  of some  variables. 

QUALITATIVE  REASONING 

1035 

Cyclic networks often  induce an  inconsistent (i.e., cyclic) 
preference order according to the standard semantics. For ex(cid:173)
ample, consider the network in Figure 2 which contains a cy(cid:173)
cle of size 4,  called  a  simple cycle  in  [Domshlak and  Braf-
man, 2002].  The web-personalization applications described 
in  [Domshlak et al., 2001] naturally gives rise to such cyclic 
structures.  There,  variables correspond to articles,  ads,  and 
other content element in  an  online newspaper.  The value of 
each  variable  indicates  whether  it  is  currently  displayed  or 
not. The CP-net captures the preferences of the editor regard(cid:173)
ing  the  presentation  of different elements  on  the  user's  cur(cid:173)
rent screen.  These  preferences together with  user-generated 
content constraints lead to a personalized view that takes into 
account the user's interests and the editor's expertise on pre(cid:173)
ferred combinations of news  items.  For example, in  the CP-
net  in  Figure  2,  A  could  be  a  review  of a  new  Toyota  4x4 
vehicle, B a test-drive of a new BMW series 7 car, C a story 
about a recent Man.  United match, and D a story about Man. 
City's recent success.  Suppose that Man. United is sponsored 
by Toyota, and Man. City by BMW, and the editor would pre(cid:173)
fer not to display stories about competing teams and/or com(cid:173)
panies in the same screen.  This is expressed in the CP-net in 
Figure 2 by stipulating that if A  is present then B should not, 
if A is not present then B should be present, etc. 

In  [Domshlak and Brafman, 2002] it is shown that such a 
network is not consistent, i.e., there is no total order of the set 
of outcomes that satisfies all the preferences embodied in this 
network.  It  is easy  to  see  why this  is  so  when  we examine 
Figure  3  which  describes  the  relationships  among  different 
possible  outcomes.  The  nodes  in  that  figure  correspond  to 
outcomes and the edges correspond to legal  improving (sin(cid:173)
gle) flips.  For example, consider the outcome a2b2c\d2 in the 
lower left-hand side of Figure  3. Given that A is assigned a2, 
we can see from the B's CPT that 61 is a more preferred value 
for B.  Thus,  there is  an  edge from  a2b2cld2  to a2blcld2. 

We can see that Figure 3 contains cycles, making it impos(cid:173)
sible  to  totally  order  its  elements  consistently.  However,  it 
is  also  apparent that  it  contains  two  elements,  alb2cld2  and 
a2blc2dl  that, in  some sense, can be viewed as optimal ele(cid:173)
ments, as  well  as  two elements, alblcldl  and a2b2c2d2, that 
in some sense can be viewed as the worst elements. 

Indeed,  according to  our semantics,  this network  induces 
three  classes  of outcomes  described  in  Figure  4.  The  out(cid:173)
comes  within  each  class  are  either  equally  preferred  or  in(cid:173)
comparable, and there is a strict preference between outcomes 
belonging to different classes.  An  important consequence of 
this  is  that  there  are  clear  candidates  for  the  set  of optimal 
outcomes: the two outcomes in the top class. 

We can see that our semantics is more lenient, allowing for 
specifications that, in some sense, are cyclic. If the cycle con(cid:173)
tains  all  outcomes,  then  all  outcomes are equally  preferred. 
This  specification  is  not  informative,  and  the  user needs to 
be informed of this fact.  However, the example above shows 
that the cycle may contain some, but not all of the outcomes. 
Whereas the standard semantics will dismiss this CP-network 
as  inconsistent, our semantics is more tolerant,  and can use 
this CP-net to determine an optimal outcome. 

We  now  turn  to  the  computation  of an  optimal  outcome 
via a simple reduction to a CSP problem (or a SAT problem 
when the variables are binary). The variables in our reduction 

Figure 3:  Outcome Space for the 4-Cycle Network. 

Figure 4:  Ordered Outcome Classes for 4-Cycle Network 

consist  of  the  variables  in  the  CP-network.  hor every  entry 
in  the  CP  Table  of every  variable 
we  add  the  constraint 
, where  ,  denotes the context (i.e., the assignment to 

As an example, for the CP-network in Figure  1  we obtain 

the following propositional formula. 

the parents  of 

and 

is the preferred value of 

In the case of Figure 2, we get the formula 

Lemma  1  o is a strongly optimal outcome  for  CP-net  iff it 
satisfies the above CSP 

The above algorithm does not work when we have weakly 
optimal outcomes, i.e., when we have a set of outcomes that 
are equally preferred,  but cannot be  strictly  improved.  Fig(cid:173)
ures  5  and  6  show  an  example  of a  network  giving  rise  to 
such a case and the relation over the outcome space it induces. 
From now on, our treatment centers on strongly optimal out(cid:173)
comes only, to which we simply refer as optimal outcomes. 

1036 

QUALITATIVE  REASONING 

NP-complete, but many problems can be solved efficiently in 
practice by state-of-the art systems such as smodels iSurja-
nen and Niemela, 2001]  and DLV iDell'Armi etal, 2001]. 

An alternative semantics for normal logic  programs is  the 
partial  stable  model  semantics  [Sacca  and  Zaniolo,  1990]. 
This  is a three-valued semantics,  where each atom  may as(cid:173)
sume  the  values:  true,  false  or  undefined.  Given  a  three-
valued assignment S  of Atoms(P),  we  say that  S  is a partial 
model  of  P  if  for each 
\  every  rule  with  head  A 
contains at least one literal B in its body, such that 
The reduct Ps  of P w.r.t.  a partial model S is defined as the 
program that is obtained  from P after deleting  (i) every rule 
of P that has a negated atom  not 
(ii) every 
rule where an undefined atom occurs (iii) every negated atom 
from the bodv of the remaining rules.  A partial model S such 
is  called  a founded model of P.  A maxi(cid:173)
that 
mal  founded model  is  called partial stable model of P.  It  is 
not hard to see that every program has a partial stable model. 

with 

The intuition behind a founded model is similar to that be(cid:173)
hind a stable model, except that we are willing to ignore cer(cid:173)
tain variables and the rules that they participate in.  A partial 
stable model  is one where we try to ignore as few variables 
(w.r.t.  set inclusion) as we can. 

Translating  CP-nets  into  Logic  Programs 

5.2 
In this section  we translate CP-nets into nonmonotonic logic 
programs, showing a one-to-one correspondence between the 
net's  optimal  outcomes  and  the  stable  models  of the  corre(cid:173)
sponding logic program. 

Theorem 3 
it is a stable model of its  corresponding logic program. 

is a  strongly  optimal outcome for a  CP-net  iff 

Note  that  only  the  most  preferred  values  of each  prefer(cid:173)
ence statement participate in the translation of a CP-network 
into a logic program.  Furthermore, the not operator appears 
only in the choice rules  set,  a feature that seems to indicate 
a rather weak  link between CP-networks and nonmonotonic 
logic  programs.  However,  in  the  long  version  of the  paper 
we  show  that  in  the  case  of CP-networks  with  constraints, 
the not  operator plays  a  more central  role  in  the translation 
and the relation between CP-networks and logic programs is 
stronger than it may appear here. 

Figure 5:  A Network Without a Strongly Optimal Outcome 

[a1b1dd1 
a2b1c1d1 

a1b1c2d1 
a2b1c2d1 

a1b2c2d1 
a2b2c2d1 

I 
| 

a1b2c1d1 
a2b2c1d1 

t 

Ia1b1c1d2 
a2b1c1d2 

a1b1c2d2 
a2b1c2d2 

a1b2c1d2 
a2b2c1d2 

a1b2c2d2 
a2b2c2d2  J 

Figure 6:  Outcome Classes for Network in Figure 5 

Lemma  1  implies that the problem of finding a single op(cid:173)
timal outcome is in NP. When the CP-network is acyclic, an 
optimal outcome can be found in linear time [Boutilier et a/., 
19991.  Our result indicates a linear time solution for simple-
cycle nets, too, if the variables are binary, because the result(cid:173)
ing CSP is an instance of 2-SAT LAspvall et a/.,  1979]. 

5  Logic Programs and Partial Consistency 
We  start  with  some  background  on  the  semantics  of  logic 
programs, followed by a reduction of CP-net optimization to 
logic  programs.  Then,  using  the  notion  of a  partial  stable 
model of a logic program, we can define a corresponding no(cid:173)
tion  for a CP-net that captures those variables for which we 
have some reasonable candidate for an optimal value. 

or  value  assignment  on  the  atoms  of Atorns(P).  We  denote 
by 
the set of atoms of 5 that are assigned the  value true, 
and S~ the set of atoms that are assigned the value false. The 
reduct Ps  of a logic program P w.r.t.  an assignment S is the 
logic  program  obtained  from  P  after deleting  (i)  every  rule 
of P that has a negated atom 
(ii) every 
negated atom from the body of the remaining rules. 

with 

The resulting program does not contain negated atoms, and 
(P)  denote  the  de(cid:173)
is called a definite logic program.  Let 
ductive  closure  of a  definite  logic  program  P,  which  coin(cid:173)
cides with its minimal model.  A stable model LGelfond and 
Lifschitz,  1988]  of a  logic  program  P  is  an  assignment  5, 
such that 
A normal  logic program may have 
none,  one or several  stable  models.  The problem of decid(cid:173)
ing  whether  a  normal  logic  program  has  a  stable  model  is 

QUALITATIVE  REASONING 

1037 

Example 2  Consider the network: 

5.3  Partial Stable Models and Partial Outcomes 
We showed a direct correspondence between the optimal out(cid:173)
comes of a CP-network and the stable models of its associated 
logic program.  However, some logic programs have no sta(cid:173)
ble model, much like some CP-nets have no strongly optimal 
outcome.  We  can  interpret  the  non-existence of an  optimal 
outcome as an indication that some of the preferences are not 
well-defined.  There are two ways to handle such situations: 
we can isolate the ill-defined preferences and reason with the 
rest of the network, or we can try to revise the ill-defined pref(cid:173)
erences.  In  both case,  we require the ability to  identify the 
problematic parts of the network.  Here  we show how partial 
stable models can provide valuable assistance in this task. 

together with the corresponding choice rules set and unique(cid:173)
ness  constraints.  This program  has no stable  model,  but  it 
has  two  partial  stable  models, 

These partial stable models do not assign a  value 
because the corresponding subnet(cid:173)

to  variables 
work does not possess an optimal outcome. 

We call  the outcomes of a CP-network that correspond to 
the partial stable models of its associated logic program, par(cid:173)
tial optimal outcomes.  Intuitively, a partial stable model cor(cid:173)
responds  to  an  optimal  assignment to  a  coherent sub-net of 
the original CP-net that contains the same preferences as the 
CP-net.  Thus, we attempt to remove certain nodes, until we 
get a coherent specification.  Those nodes that were removed 
are the ones we should point to the user as problematic. 

Existing  knowledge  on  partial  stable  models  (e.g.,  [Di-
mopoulos  et  al,  2002])  implies  that  a  total  partial  optimal 
outcome (i.e., one that assigns a value to every variable) is an 
optimal outcome, and that deciding whether a logic program 
has  a  partial  stable  model  other than  the  empty  set  is  NP-
complete.  Discovering whether a variable appears  in some 
partial  optimal  outcome  is  NP-complete,  whereas  deciding 
whether a variable appears in all partial optimal outcomes is 
Ilp

2-complete. 

6  Conclusion 
We  showed  that the current semantics of CP-network is  too 
conservative in its interpretation of user specification.  This is 
contrary to the aim of research on preference elicitation tech(cid:173)
niques, i.e., reducing the burden on users.  Consequently, we 

suggested a different semantics under which optimization can 
be meaningfully applied to CP-nets that are currently consid(cid:173)
ered inconsistent. We showed how such an optimization pro(cid:173)
cess  can  be  practically  implemented,  extending current op(cid:173)
timization  techniques  to  cyclic  network.  Moreover,  we  de(cid:173)
scribed a computational method for identifying sub-networks 
that are meaningful, providing the first tool that can point out 
to a user what part of her specification requires revision. 

References 
[Aspvall et al.,  1979]  B. Aspvall, M. Plass, and R. Tarjan.  A 
linear-time algorithm for testing the truth of certain quan(cid:173)
tified boolean formulas.  Information Proc.  Letters,  1979. 
[Boutiliere/fl/.,  1999]  C.  Boutilier,  R.  I.  Brafman,  H.  H. 
Hoos,  and D.  Poole.  Reasoning  with conditional ceteris 
paribus preference statements.  In  VAV99,  1999. 

[Brewka etai, 2002]  G. 

Brewka, 
1.  Niemela,  and T.  Syrjanen.  Implementing ordered dis(cid:173)
junction using answer set solvers for normal programs.  In 
J  EUA'02,2002. 

[DeirArmi*/fl/.,2001]  T.  DeH'Armi,  W.  Faber,  G.  Jelpa, 
C.  Koch, N. Leone,  S. Perri, and G. Pfeifer.  System de(cid:173)
scription: DLV. In Proceedings of LPNMR-01, 2001. 

[Dimopoulosetal, 2002]  Y.  Dimopoulos,  B.  Nebel,  and 
F. Toni.  On the computational complexity of assumption-
based argumentation for default reasoning.  Artificial Intel(cid:173)
ligence,  141,2002. 

[Domshlak and Brafman, 2002]  C. Domshlak and R. 1. Braf(cid:173)
In 

man.  CP-Ncts  -  reasoning  and  consistency  testing. 
Proc.  KR'02,  2002. 

iDomshlakera/., 20011  C.  Domshlak,  R.  I.  Brafman,  and 
E.  S.  Shimony.  Preference-based  configuration  of  web 
page content. In Proc. I J CAPO I, 2001. 

[Doyle and Wellman, 1994]  J. Doyle and M. Wellman.  Rep(cid:173)
resenting preferences as  ceteris paribus comparatives.  In 
AAAl Spring  Sym.  on  Decision-Theoretic Planning,  1994. 
iGelfond and Lifschitz,  1988]  M.  Gelfond  and  V.  Lifschitz. 
In 

The  stable  model  semantics  for  logic  programming. 
Proc.  ICSLP-88,  1988. 

[Hanson, 1996]  S. O. Hanson. What is a ceteris paribus pref(cid:173)

erence.  J.  of Philosophical Logic,  25:307-332,1996. 

[Keeney and Raiffa,  1976]  R. L. Keeney and H. Raiffa.  De(cid:173)
cisions  with  Multiple  Objectives:  Preferences  and  Value 
Trade-offs.  Wiley, New York, 1976. 

[Pearl,  1988]  J.  Pearl.  Probabilistic Reasoning in Intelligent 
Systems:  Networks of Plausible Inference.  Morgan  Kauf-
mann, 1988. 

[Sacca and Zaniolo,  1990]  D.  Sacca and C. Zaniolo.  Stable 
models and non-determinism in logic programs with nega(cid:173)
tion.  In  Proc.  PODS'90,1990. 

[Surjanen and Niemela, 2001]  T.  Surjanen  and  I.  Niemela. 
The  Smodels  system.  In  Proceedings ofLPNMR-01,2001. 

1038 

QUALITATIVE  REASONING 

