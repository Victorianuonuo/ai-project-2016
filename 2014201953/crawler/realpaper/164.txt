Declarative and Computational Properties

of Logic Programs with Aggregates(cid:3)

Francesco Calimeri and Wolfgang Fabery and Nicola Leone and Simona Perri

Department of Mathematics, University of Calabria, I-87030 Rende (CS), Italy

Email: fcalimeri,faber,leone,perrig@mat.unical.it

Abstract

We investigate the properties of logic programs
with aggregates. We mainly focus on pro-
grams with monotone and antimonotone aggregates
(LPA
m;a programs). We de(cid:2)ne a new notion of un-
m;a programs, and prove that
founded set for LPA
it is a sound generalization of the standard notion
of unfounded set for aggregate-free programs. We
m;a program are
show that the answer sets of an LPA
precisely its unfounded-free models.
We de(cid:2)ne a well-founded operator WP for LPA
m;a
programs; we prove that its total (cid:2)xpoints are pre-
cisely the answer sets of P, and its least (cid:2)xpoint
P (;) is contained in the intersection of all an-
W !
swer sets (if P admits an answer set). W !
P (;) is
ef(cid:2)ciently computable, and for aggregate-free pro-
grams it coincides with the well-founded model.
We carry out an in-depth complexity analysis in
the general framework, including also nonmono-
tone aggregates. We prove that monotone and anti-
monotone aggregates do not increase the complex-
ity of cautious reasoning, which remains in co-NP.
Nonmonotone aggregates, instead, do increase the
complexity by one level in the polynomial hierar-
chy. Our results allow also to generalize and speed-
up ASP systems with aggregates.

Introduction

1
The introduction of aggregates atoms [Kemp and Stuckey,
1991; Denecker et al., 2001; Gelfond, 2002; Simons et al.,
2002; Dell’Armi et al., 2003; Pelov and Truszczy·nski, 2004;
Pelov et al., 2004] is one of the major linguistic extensions to
Answer Set Programming of the recent years.

While both semantic and computational properties of stan-
dard (aggregate-free) logic programs have been deeply in-
vestigated, only few works have focused on logic programs
with aggregates; their behaviour, their semantic properties,
and their computational features are still far from being fully

clari(cid:2)ed. A recent proposal for answer set semantics is re-
ceiving a consensus [Faber et al., 2004]. However, un-
founded sets and the well-founded operator [Van Gelder et
al., 1991], which are important for both the characterization
and the computation of standard LPs [Leone et al., 1997;
Simons et al., 2002; Calimeri et al., 2002; Koch et al., 2003;
Pfeifer, 2004], have not been de(cid:2)ned in a satisfactory manner
for logic programs with aggregates. Moreover, the impact of
aggregates on the computational complexity of the reasoning
tasks has not been analyzed in depth.

This paper makes a (cid:2)rst step to overcome this de(cid:2)ciency,
improving the characterization of programs with aggregates,
for both declarative and computational purposes. The main
contributions of the paper are as follows.
(cid:15) We de(cid:2)ne the notion of unfounded set for logic programs
with both monotone and antimonotone aggregates (LPA
m;a
programs). This notion is a sound generalization of the con-
cept of unfounded sets previously given for programs without
aggregates. We show that our de(cid:2)nition coincides with the
original de(cid:2)nition of unfounded sets of [Van Gelder et al.,
1991] on the class of normal (aggregate-free) programs, and
shares its nice properties (like, e.g., the existence of the great-
est unfounded set).
(cid:15) We provide a declarative characterization of answer sets in
terms of unfounded sets. In particular, answer sets are pre-
cisely unfounded-free models of an LPA
(cid:15) We de(cid:2)ne a well-founded operator WP for logic programs
with aggregates, which extends the classical well-founded op-
erator [Van Gelder et al., 1991]. The total (cid:2)xpoints of WP are
exactly the answer sets of P, and its least (cid:2)xpoint W !
P (;) is
contained in the intersection of all answer sets. Importantly,
W !
(cid:15) We analyze the complexity of logic programs with arbi-
trary (also nonmonotone) aggregates and fragments thereof.
Both monotone and antimonotone aggregates do not affect
the complexity of answer set semantics, which remains co-
NP-complete (for cautious reasoning). Nonmonotone aggre-
gates, instead, do increase the complexity, jumping to the sec-
ond level of the polynomial hierarchy ((cid:5)P
For space limitations, some proofs are sketched.

P (;) is polynomial-time computable.

m;a program.

2 ).

(cid:3)This work was partially supported by the EC under projects IST-
2002-33570 INFOMIX and IST-2001-37004 WASP, and by FWF
under projects P16536-N04 and P17212-N04.

yFunded by APART of the Austrian Academy of Sciences.

2 Logic Programs with Aggregates
In this section, we recall syntax, semantics, and some basic
properties of logic programs with aggregates.

2.1 Syntax
We assume that the reader is familiar with standard LP; we
refer to atoms, literals, rules, and programs of LP, as stan-
dard atoms, standard literals, standard rules, and standard
programs, respectively. Two literals are said to be comple-
mentary if they are of the form p and not p for some atom
p. Given a literal L, ::L denotes its complementary literal.
Accordingly, given a set A of literals, ::A denotes the set
f::L j L 2 Ag. For further background, see [Baral, 2002;
Gelfond and Lifschitz, 1991].
Set Terms.
A (LPA) set term is either a symbolic set
or a ground set. A symbolic set is a pair fVars : Conj g,
where Vars is a list of variables and Conj is a conjunction
of standard atoms.1 A ground set is a set of pairs of the form
ht : Conj i, where t is a list of constants and Conj is a ground
(variable free) conjunction of standard atoms.
Aggregate Functions. An aggregate function is of the form
f (S), where S is a set term, and f is an aggregate function
symbol. Intuitively, an aggregate function can be thought of
as a (possibly partial) function mapping multisets of constants
to a constant.
Example 1 (In the examples, we adopt the syntax of DLV to
denote aggregates.) Aggregate functions currently supported
by the DLV system are: #count (number of terms), #sum
(sum of non-negative integers), #times (product of positive
integers), #min (minimum term, unde(cid:2)ned for empty set),
#max (maximum term, unde(cid:2)ned for empty set)2.

Aggregate Literals.
An aggregate atom is f (S) (cid:30) T ,
where f (S) is an aggregate function, (cid:30)2 f=; <; (cid:20); >; (cid:21)g
is a prede(cid:2)ned comparison operator, and T is a term (variable
or constant) referred to as guard.
Example 2 The following aggregate atoms in DLV notation,
where the latter contains a ground set and could be a ground
instance of the former:

#maxfZ : r(Z); a(Z; V )g > Y
#maxfh2 : r(2); a(2; k)i; h2 : r(2); a(2; c)ig > 1

An atom is either a standard (LP) atom or an aggregate atom.
A literal L is an atom A or an atom A preceded by the de-
fault negation symbol not; if A is an aggregate atom, L is an
aggregate literal.
LPA Programs. A (LPA) rule r is a construct
a :(cid:0) b1; (cid:1) (cid:1) (cid:1) ; bk; not bk+1; (cid:1) (cid:1) (cid:1) ; not bm:

where a is a standard atom, b1; (cid:1) (cid:1) (cid:1) ; bm are atoms, and
m (cid:21) k (cid:21) 0. The atom a is referred to as the head of r
while the conjunction b1; :::; bk; not bk+1; :::; not bm is the
body of r. We denote the head atom by H(r), and the set
fb1; :::; bk; not bk+1; :::; not bmg of the body literals by
B(r).

1Intuitively, a symbolic set fX : a(X; Y ); p(Y )g stands
the set of X-values making a(X; Y ); p(Y )
i.e.,

true,

for
fX j 9Y s:t : a(X; Y ); p(Y ) is trueg.

2The (cid:2)rst two aggregates correspond, respectively, to the cardi-

nality and weight constraint literals of Smodels.

A (LPA) program is a set of LPA rules. A global variable
of a rule r is a variable appearing in a standard atom of r; all
other variables are local variables.
Safety. A rule r is safe if the following conditions hold: (i)
each global variable of r appears in a positive standard literal
in the body of r; (ii) each local variable of r appearing in a
symbolic set fVars : Conj g appears in an atom of Conj ;
(iii) each guard of an aggregate atom of r is a constant or a
global variable. A program P is safe if all r 2 P are safe. In
the following we assume that LPA programs are safe.

2.2 Answer Set Semantics

Universe and Base. Given a LPA program P, let UP denote
the set of constants appearing in P, and BP be the set of
standard atoms constructible from the (standard) predicates
X denote the
of P with constants in UP. Given a set X, let 2
set of all multisets over elements from X. Without loss of
generality, we assume that aggregate functions map to I (the
set of integers).

Example 3 #count is de(cid:2)ned over 2
#times over 2

, #min and #max are de(cid:2)ned over 2

UP, #sum over 2
N,
(cid:0) f;g.

N+

N

Instantiation. A substitution is a mapping from a set of vari-
ables to UP. A substitution from the set of global variables
of a rule r (to UP) is a global substitution for r; a substitution
from the set of local variables of a symbolic set S (to UP) is a
local substitution for S. Given a symbolic set without global
variables S = fVars : Conj g, the instantiation of S is the
following ground set of pairs inst(S):
fh(cid:13)(Vars) : (cid:13)(Conj )i j (cid:13) is a local substitution for Sg.3
A ground instance of a rule r is obtained in two steps: (1)
a global substitution (cid:27) for r is (cid:2)rst applied over r; (2) ev-
ery symbolic set S in (cid:27)(r) is replaced by its instantiation
inst(S). The instantiation Ground(P) of a program P is
the set of all possible instances of the rules of P.
Example 4 Consider the following program P1:

q(1) _ p(2; 2):
t(X):(cid:0)q(X); #sumfY : p(X; Y )g > 1:

q(2) _ p(2; 1):

The instantiation Ground(P1) is the following:
q(1) _ p(2; 2):t(1):(cid:0)q(1); #sumfh1 : p(1; 1)i; h2 : p(1; 2)ig > 1:
q(2) _ p(2; 1):t(2):(cid:0)q(2); #sumfh1 : p(2; 1)i; h2 : p(2; 2)ig > 1:

Interpretations. An interpretation for a LPA program P is
a consistent set of standard ground literals, that is I (cid:18) (BP [
::BP ) such that I \ ::I = ;. A standard ground literal L
is true (resp. false) w.r.t I if L 2 I (resp. L 2 ::I). If a
standard ground literal is neither true or false w.r.t I then it is
unde(cid:2)ned w.r.t I. We denote by I + (resp. I (cid:0)) the set of all
standard positive (resp. negative) literals occurring in I. We
also denote with (cid:22)I the set of unde(cid:2)ned standard literals w.r.t
I. An interpretation I is total if (cid:22)I is empty (i.e., I + [::I (cid:0) =
BP), otherwise I is partial.

3Given a substitution (cid:27) and a LPA object Obj (rule, set, etc.),
we denote by (cid:27)(Obj) the object obtained by replacing each variable
X in Obj by (cid:27)(X).

An interpretation also provides a meaning for aggregate lit-
erals. Their truth value is (cid:2)rst de(cid:2)ned for total interpretations,
and then induced for partial ones.

Let I be a total interpretation. A standard ground conjunc-
tion is true (resp. false) w.r.t I if all its literals are true. The
meaning of a set, an aggregate function, and an aggregate
atom under an interpretation, is a multiset, a value, and a
truth-value, respectively. Let f (S) be a an aggregate func-
tion. The valuation I(S) of S w.r.t. I is the multiset of
the (cid:2)rst constant of the elements in S whose conjunction is
true w.r.t. I. More precisely, let
I(S) denote the multiset
[t1 j ht1; :::; tn : Conj i 2 S^ Conj is true w.r.t. I ]. The val-
uation I(f (S)) of an aggregate function f (S) w.r.t. I is the
result of the application of f on I(S). If the multiset I(S)
is not in the domain of f, I(f (S)) = ? (where ? is a (cid:2)xed
symbol not occurring in P).4

An instantiated aggregate atom A = f (S) (cid:30) k is true
w.r.t. I if: (i) I(f (S)) 6= ?, and, (ii) I(f (S)) (cid:30) k holds; oth-
erwise, A is false. An instantiated aggregate literal not A =
not f (S) (cid:30) k is true w.r.t. I if (i) I(f (S)) 6= ?, and, (ii)
I(f (S)) (cid:30) k does not hold; otherwise, A is false.

If I is a partial interpretation, an aggregate literal A is true
(resp. false) w.r.t. I if it is true (resp. false) w.r.t. each total
interpretation J extending I (i.e., 8 J s.t. I (cid:18) J, A is true
w.r.t. J); otherwise it is unde(cid:2)ned.
Example 5 Consider the atom A = #sumfh1 : p(2; 1)i; h2 :
p(2; 2)ig > 1 from Example 4. Let S be the ground set in
A. For the interpretation I = fp(2; 2)g, each extending total
interpretation contains either p(2; 1) or not p(2; 1). There-
fore, either I(S) = [2] or I(S) = [1; 2] and the application of
#sum yields either 2 > 1 or 3 > 1, hence A is true w.r.t. I.

Minimal Models. Given an interpretation I, a rule r is satis-
(cid:2)ed w.r.t. I if the head atom is true w.r.t. I whenever all body
literals are true w.r.t. I. A total interpretation M is a model of
a LPA program P if all r 2 Ground(P) are satis(cid:2)ed w.r.t.
M. A model M for P is (subset) minimal if no model N for
P exists such that N + (cid:26) M +. Note that, under these def-
initions, the word interpretation refers to a possibly partial
interpretation, while a model is always a total interpretation.
Answer Sets. We now recall the generalization of the
Gelfond-Lifschitz transformation for LPA programs from
[Faber et al., 2004].
De(cid:2)nition 1 ([Faber et al., 2004]) Given a ground LPA
program P and a total interpretation I, let P I denote the
transformed program obtained from P by deleting all rules
in which a body literal is false w.r.t. I. I is an answer set of a
program P if it is a minimal model of Ground(P)I.
Example 6 Consider the following two programs:

P1 : fp(a):(cid:0)#countfX : p(X)g > 0:g
P2 : fp(a):(cid:0)#countfX : p(X)g < 1:g

Ground(P1) = fp(a):(cid:0)#countfha : p(a)ig > 0:g and
Ground(P2) = fp(a):(cid:0)#countfha : p(a)ig < 1:g, and
interpretation I1 = fp(a)g, I2 = ;. Then, Ground(P1)I1 =

4In this paper, we assume that the value of an aggregate function
can be computed in time polynomial in the size of the input multiset.

Ground(P1), Ground(P1)I2 = ;, and Ground(P2)I1 = ;,
Ground(P2)I2 = Ground(P2) hold.

I2 is the only answer set of P1 (because I1 is not a minimal
model of Ground(P1)I1), while P2 admits no answer set (I1
is not a minimal model of Ground(P2)I1, and I2 is not a
model of Ground(P2) = Ground(P2)I2).

Note that any answer set A of P is also a model of
P because Ground(P)A (cid:18) Ground(P), and rules in
Ground(P) (cid:0) Ground(P)A are satis(cid:2)ed w.r.t. A.
Monotonicity. Given two interpretations I and J we say
that I (cid:20) J if I + (cid:18) J + and J (cid:0) (cid:18) I (cid:0). A ground literal ‘
is monotone, if for all interpretations I; J, such that I (cid:20) J,
we have that: (i) ‘ true w.r.t. I implies ‘ true w.r.t. J, and (ii)
‘ false w.r.t. J implies ‘ false w.r.t. I. A ground literal ‘ is
antimonotone, if the opposite happens, that is, for all inter-
pretations I; J, such that I (cid:20) J, we have that: (i) ‘ true w.r.t.
J implies ‘ true w.r.t. I, and (ii) ‘ false w.r.t. I implies ‘ false
w.r.t. J. A ground literal ‘ is nonmonotone, if it is neither
monotone nor antimonotone.

Note that positive standard literals are monotone, whereas
negative standard literals are antimonotone. Aggregate lit-
erals may be monotone, antimonotone or nonmonotone, re-
gardless whether they are positive or negative. Nonmonotone
literals include the sum over (possibly negative) integers and
the average.
Example 7 All ground instances of #countfZ : r(Z)g > 1
and not #countfZ : r(Z)g < 1 are monotone, while for
#countfZ : r(Z)g < 1, and not #countfZ : r(Z)g > 1 they
are antimonotone.

a /LPA

m (LPA

We denote by LPA

n ) the fragment of LPA
where only monotone (antimonotone/nonmonotone) aggre-
m;a allows for both monotone and anti-
gates are allowed; LPA
monotone aggregates.
Remark 1 Observe that our de(cid:2)nitions of interpretation and
truth values preserve (cid:147)knowledge monotonicity(cid:148). If an inter-
pretation J extends I (i.e., I (cid:18) J), then each literal which
is true w.r.t. I is true w.r.t. J, and each literal which is false
w.r.t. I is false w.r.t. J as well.

3 Unfounded Sets
In this section, we extend the notion of unfounded sets, given
in [Van Gelder et al., 1991] for aggregate-free programs,
a;m programs. Let us denote by
to the framework of LPA
S1 _[ ::S2 the set (S1 (cid:0) S2) [ ::S2, where S1 and S2 are
sets of standard ground literals.
De(cid:2)nition 2 (Unfounded Set) A set X of ground atoms is
an unfounded set for an LPA
I if, for
each rule r 2 P having the head atom belonging to X, at least
one of the following conditions holds: 1. some antimonotone
body literal of r is false w.r.t. I, and 2. some monotone body
literal of r is false w.r.t. I _[ ::X.
Example 8 Consider the following program P :

a;m program P w.r.t.

r1 : a(1):(cid:0)#countfh1 : a(1)i; h2 : a(2)i; h3 : a(3)ig > 2:
r2 : a(2):
r3 : a(3):(cid:0)#countfh1 : a(1)i; h2 : a(2)i; h3 : a(3)ig > 2:

and I = fa(1); a(2); a(3)g. Then X = fa(1)g is an un-
founded set w.r.t. I; P, since condition 2 holds for r1. Also
fa(3)g, and fa(1); a(3)g are unfounded.

We can show that De(cid:2)nition 2 generalizes the one given in

[Van Gelder et al., 1991] for aggregate-free programs.
Theorem 9 For an aggregate-free LPA
a;m program P, De(cid:2)-
nition 2 is equivalent to the one of [Van Gelder et al., 1991].
Thus, De(cid:2)nition 2 is an alternative characterization of un-
founded sets for standards literals. In fact, while condition 1
of De(cid:2)nition 2 does not exactly cover the (cid:2)rst one in [Van
Gelder et al., 1991], condition 2 catches all cases of the sec-
ond in [Van Gelder et al., 1991] and those (cid:148)lost(cid:148) by condi-
tion 1. This separates positive and negative literals, allowing
to distinguish between the behavior of monotone and anti-
monotone literals.
Theorem 10 If X1 and X2 are unfounded sets w.r.t. an inter-
a;m program P, then also X1 [ X2 is an
pretation I for a LPA
unfounded set w.r.t. I for P.
Proof sketch. For Condition 2 of Def. 2, observe that
I _[ ::(X1 [ X2) (cid:20) I _[ ::X1. Therefore, if a mono-
tone literal ‘ is false w.r.t. I _[ ::X1, then it is false w.r.t.
I _[ ::(X1 [ X2). Symmetrically for X2.
2
By virtue of Theorem 10, the union of all unfounded sets
for P w.r.t. I is an unfounded set. We call it the Greatest
Unfounded Set of P w.r.t. I, and denote it by GU SP (I).
Proposition 1 Let I and J be interpretations for an LPA
program P. If I (cid:18) J, then GU SP (I) (cid:18) GU SP (J).
Proof sketch. Follows from Remark 1, since I _[ ::X (cid:18)
J _[ ::X.

a;m

2

4 Answer Sets and Unfounded Sets
In this section, we provide a couple of characterizations of
answer sets in terms of unfounded sets.
De(cid:2)nition 3 (Unfounded-free Interpretation) Let I be an
interpretation for a program P. I is unfounded-free if I\X =
; for each unfounded set X for P w.r.t. I.

The next lemma gives an equivalent characterization of the

unfounded-free property for total interpretations.
Lemma 11 Let I be a total interpretation for a program P. I
is unfounded-free iff no nonempty set of atoms contained in
I is an unfounded set for P w.r.t.I.
Proof sketch. If I is not unfounded-free, an unfounded set X
for P w.r.t. I s.t. X \ I 6= ; exists. Then, X \ I is also
an unfounded set.
2
Theorem 12 A model M is an answer set of an LPA
gram P if and only if M is unfounded-free.
Proof sketch. If M is a model and X (cid:18) M is a non-empty
unfounded set w.r.t. M, then it can be shown that M _[ ::X
is a model of P M , hence M is no answer set. On the other
hand, if M is an unfounded-free model but not an answer set,
a model N of P M s.t. N + (cid:26) M + must exist. We can show
that M + (cid:0) N + is an unfounded set.
2
Now we give another interesting characterization of answer
sets. A total interpretation is an answer set if and only if its
false literals are unfounded.

a;m pro-

Lemma 13 A total interpretation M is a model for P iff
::M (cid:0) is an unfounded set for P w.r.t. M.
Proof sketch. The result follows from the fact that M =
M _[ ::(::M (cid:0)).
Theorem 14 Let M be a total interpretation for a program
P. M is an answer set iff ::M (cid:0) = GU SP (M ).
Proof sketch. Can be shown using Lemmata 13 and 11 and
Theorem 12.

2

2

5 Well-Founded Semantics
In this section we extend the WP de(cid:2)ned in [Van Gelder et
al., 1991] for aggregate-free programs to LPA
a;m programs.
Then, we show that the answer sets of an LPA
a;m program P
coincide exactly with the total (cid:2)xpoints of WP.
We start by providing an extension to LPA

a;m programs
of the immediate consequence operator TP de(cid:2)ned in [Van
Gelder et al., 1991] for three-valued interpretations of stan-
dard logic programs.
De(cid:2)nition 4 Let P be a LPA
a;m program. De(cid:2)ne the oper-
ators TP and WP from 2BP [::BP to 2BP and 2BP [::BP ,
respectively, as follows.

TP (I) = fa 2 BP j 9r 2 Ground(P) s:t: a = H(r)

and B(r) is true w:r:t: Ig

WP (I) = TP (I) [ ::GU SP (I):

Theorem 15 Let M be a total interpretation for a program
P. M is an answer set for P iff M is a (cid:2)xpoint of WP.
Proof sketch. M (cid:0) = ::GU SP (M ) holds by virtue of The-
orem 14, M + = TP (M ) can be shown using Lemma 11 and
De(cid:2)nition 2.
2
The WP operator is clearly monotone on a meet semilat-
tice, and it therefore admits a least (cid:2)xpoint [Tarski, 1955].
This (cid:2)xpoint can be computed iteratively starting from the
empty set, and approximates the intersection of all answer
sets (if any).
Theorem 16 Given an LPA
m;a program P, let fWngn2N be
the sequence whose n-th term is the n-fold application of
the WP operator on the empty set (i.e., W0 = ;, Wn =
WP (Wn(cid:0)1)). Then (a) fWngn2N converges to a limit
P (;).
W !
Proof sketch. (a) follows from the monotonicity of WP and
the (cid:2)niteness of BP. (b) holds since all atoms computed by
TP belong to any answer set and because of Theorem 14. 2

P (;), and (b) for each answer set M for P, M (cid:19) W !

From Theorem 15 and 16, the following easily follows.

Corollary 17 If W !
unique answer set of P.

P (;) is a total interpretation, then it is the

The following proposition con(cid:2)rms the intuition that Def-
inition 4 extends the WP operator, as de(cid:2)ned in [Van Gelder
et al., 1991] for standard programs , to LPA
Proposition 2 Let P be an aggregate-free program. Then the
WP operator of De(cid:2)nition 4 exactly coincides with WP op-
erator de(cid:2)ned in [Van Gelder et al., 1991].
Corollary 18 On aggregate-free programs, W !
with the well-founded model of [Van Gelder et al., 1991].

m;a programs.

P (;) coincides

Moreover, there are simple cases where W !

the intended meaning of the program.
Example 19 Consider the following program P:
a(1) :(cid:0) #sumfh1 : a(1)i; h2 : a(2)ig > 1:
b :(cid:0) not a(1):

a(2) :(cid:0) b:

b :(cid:0) not c:

P (;) captures

We have WP (;) = fnot cg, then WP (fnot cg) =
fb; not c; not a(1)g, then WP (fb; not c; not a(1)g) =
fb; not c; not a(1); a(2)g = W !
It is easy to verify that W !
swer set for P.

P (;) (which here is total) is an an-

P (;).

6 Computational Complexity
We (cid:2)rst show the tractability of the well-founded semantics
m;a, and we then analyze the complexity of answer
for LPA
set semantics for general LPA programs. We consider the
propositional case, hence, throughout this section we assume
that programs are ground.
Theorem 20 Given a ground LPA
m;a program P: 1. The
greatest unfounded set GU SP (I) of P w.r.t. a given inter-
pretation I is polynomial-time computable; 2. W !
P (;) is
polynomial-time computable.
Proof sketch. We de(cid:2)ne an operator (cid:8)I from BP to BP as
follows: (cid:8)I (Y ) = fa j 9 r 2 P with a = H(r)
s.t. no antimonotone body literal of r f alse w:r:t: I ^
all monotone body literals of r are true w:r:t: Y (cid:0) ::I (cid:0)g.
The sequence (cid:30)0 = ;, (cid:30)k = (cid:8)I ((cid:30)k(cid:0)1) is monotonically
increasing and converges (cid:2)nitely to a limit (cid:30)(cid:21), for which
(cid:30)(cid:21) = BP (cid:0) GU SP (I) can be shown. Furthermore, each
application of (cid:8)I is polynomial in our setting5, and also (cid:21) is
polynomial in jBP j. From this, the result follows.

2
This result has a positive impact also for the computation of
the answer set semantics of logic programs with aggregates.
P (;) approximates the
Indeed, as stated in Theorem 16, W !
intersection of all answer sets from the bottom, and can be
therefore used to ef(cid:2)ciently prune the search space.

We next analyze the complexity of the answer set seman-
tics of general LP A programs. In [Faber et al., 2004], the
authors have shown that arbitrary (including nonmonotone)
aggregates do not increase the complexity of disjunctive pro-
grams. However, nonmonotone aggregates do increase the
complexity of reasoning on Or-free programs.6
Theorem 21 Cautious reasoning over LPA
complete.
Proof. Membership follows directly from the results in
[Faber et al., 2004]. Concerning hardness, we provide a
reduction from 2QBF. Let (cid:9) = 8x1; : : : ; xm9y1; : : : ; yn : (cid:8),
where w.l.o.g. (cid:8) is a propositional formula in 3CNF format,
over precisely the variables x1; : : : ; xm; y1; : : : ; yn. Observe
that (cid:9) is equivalent to :9x1; : : : ; xm8y1; : : : ; yn : :(cid:8), and
that :(cid:8) is equivalent to a 3DNF where every literal has
reversed polarity w.r.t. (cid:8). Let the LPA

m;a;n program (cid:5)(cid:9) be:

m;a;n is (cid:5)P
2 -

5Recall that we are dealing only with aggregates whose function

is computable in polynomial time.

6In [Ferraris, 2004] it was independently shown that deciding
answer set existence for a program with weight constraints (possibly
containing negative weights) is (cid:6)P

2 -complete.

t(xi; 1) : (cid:0)#sumfV : t(xi; V )g >= 0:
t(xi; (cid:0)1) : (cid:0)#sumfV : t(xi; V )g <= 0:
t(yi; 1) : (cid:0)#sumfV : t(yi; V )g >= 0:
t(yi; (cid:0)1) : (cid:0)#sumfV : t(yi; V )g <= 0:
t(yi; 1) : (cid:0)unsat:
t(yi; (cid:0)1) : (cid:0)unsat:

For each clause ci = li;1 _ li;2 _ li;3 of the original (cid:8), we
add: unsat : (cid:0)(cid:22)(li;1); (cid:22)(li;2); (cid:22)(li;3), where (cid:22)(l) is t(l; (cid:0)1) if l
is positive, and t(l; 1) otherwise.

The query not unsat? holds for (cid:5)(cid:9), iff (cid:9) is satis(cid:2)able. 2
Monotone and antimonotone aggregates, instead, behave

m;a is co-NP-

as in the disjunctive case, not causing any complexity gap.
Theorem 22 Cautious reasoning over LPA
complete.
Proof. Hardness follows from the co-NP-hardness of cau-
tious reasoning over normal (aggregate-free) logic programs
[Marek and Truszczy·nski, 1991; Schlipf, 1995]. For mem-
bership, we guess a total interpretation M, and check that: (i)
A 2 M, and (ii) ::M (cid:0) = GU SP (M ) (by Theorem 14 M is
then an answer set). By Theorem 20, the checks are feasible
in polynomial time.
2

7 Related Work
To our knowledge, the only other work in which the notion
of unfounded set has been de(cid:2)ned for programs with ag-
gregates is [Kemp and Stuckey, 1991]. However, their def-
inition ignores aggregates in the second condition for un-
founded sets. For the program a(1):(cid:0)#countfX : a(X)g > 0:
the well-founded model of [Kemp and Stuckey, 1991] is ;,
leaving a(1) unde(cid:2)ned. Our well-founded model is f:a(1)g.
Most of the results reported in this paper do not hold for un-
founded sets as de(cid:2)ned in [Kemp and Stuckey, 1991].

There have been several attempts to de(cid:2)ne well-founded
semantics for programs with aggregates, not relying on un-
founded sets. Several early approaches which are de(cid:2)ned
on a limited framework are discussed in [Kemp and Stuckey,
1991]. In [Van Gelder, 1992] a semantics is de(cid:2)ned by com-
piling aggregates to rules with standard atoms. This approach
was generalized in [Osorio and Jayaraman, 1999].
In any
case, this strategy works only for certain classes of programs.
In [Ross and Sagiv, 1997] an operator-based de(cid:2)nition is
given, which also works only on a restricted set of programs.
In [Pelov, 2004] a well-founded semantics has been de(cid:2)ned
based on an approximating operator. Since this de(cid:2)nition is
substantially different from the one in this paper, we leave a
comparison for future work.

Other works attempted to de(cid:2)ne stronger notions of well-
founded semantics (also for programs with aggregates),
among them the Ultimate Well-Founded Semantics of [De-
necker et al., 2001] and W F S 1 and W F S 2 of [Dix and Oso-
rio, 1997]. Whether a characterization in terms of unfounded
sets can exist for these semantics is not clear, and even if such
generalized unfounded sets would exist, it is likely that some
of the theorems in this paper will no longer hold, given that
these semantics assign truth or falsity for more atoms.

In [Ferraris, 2004] it was shown that the semantics of
Smodels programs with positive weight constraints is equal
to answer sets as de(cid:2)ned in [Faber et al., 2004] on the respec-
tive fragment. Since by Theorem 16 W !
P (;) approximates

answer sets of [Faber et al., 2004], W !
P (;) can be used also
as an approximating operator for the respective Smodels pro-
grams. Indeed, we can show that the AtMost pruning operator
of Smodels [Simons et al., 2002] is a special case of the (cid:8)I
operator (de(cid:2)ned in the proof sketch for Theorem 20).

8 Applications and Conclusion
The semantics of logic programs with aggregates is not
straightforward, especially in presence of recursive aggre-
gates. The declarative and (cid:2)xpoint characterizations of an-
swer sets, provided in Sections 4 and 5, allow for a better
understanding of the meaning of programs with aggregates,
and provide a handle on effective methods for computing an-
swer sets for programs with (recursive) aggregates. In partic-
ular, the operator W !
P (;) can be used (cid:2)rst to compute what
must be in any answer set. Later in the computation, it can
be used as a pruning operator and for answer set checking (as
described in [Koch et al., 2003; Pfeifer, 2004]).

Furthermore, since loop formulas encode unfounded sets
[Lee, 2004], our results should be adaptable also to SAT-
based ASP systems, all of which rely on loop formulas.

The complexity results make a clear demarcation between
aggregates from the computational viewpoint, which is very
useful to pick the appropriate techniques to be employed for
the computation. The well-founded semantics of LPA
m;a is
ef(cid:2)ciently computable. Answer set semantics is in co-NP for
LPA
m;a, while nonmonotone aggregates bring about a com-
plexity gap, and cannot be easily accommodated in NP sys-
tems.

A main concern for future work is therefore the exploita-
tion of our results for the implementation of recursive aggre-
gates in ASP systems.

References
[Baral, 2002] C. Baral. Knowledge Representation, Reason-

ing and Declarative Problem Solving. CUP, 2002.

[Calimeri et al., 2002] F. Calimeri, W. Faber, N. Leone, and
G. Pfeifer. Pruning Operators for Answer Set Program-
ming Systems. In NMR’2002, pp. 200(cid:150)209, 2002.

[Dell’Armi et al., 2003] T. Dell’Armi, W. Faber, G. Ielpa,
N. Leone, and G. Pfeifer. Aggregate Functions in DLV.
In ASP’03, pp. 274(cid:150)288, Messina, Italy, 2003. Online at
http://CEUR-WS.org/Vol-78/.

[Denecker et al., 2001] M. Denecker, N. Pelov,

and
M. Bruynooghe. Ultimate Well-Founded and Stable
Model Semantics for Logic Programs with Aggregates. In
ICLP-2001, pp. 212(cid:150)226. 2001.

[Dix and Osorio, 1997] J. Dix and M. Osorio. On Well-
Behaved Semantics Suitable for Aggregation. In ILPS ’97,
Port Jefferson, N.Y., 1997.

[Faber et al., 2004] W. Faber, N. Leone, and G. Pfeifer. Re-
cursive aggregates in disjunctive logic programs: Seman-
tics and complexity. In JELIA 2004, pp. 200(cid:150)212. 2004.

[Ferraris, 2004] P. Ferraris. Answer Sets for Propositional
Theories. http://www.cs.utexas.edu/users/
otto/papers/proptheories.ps, 2004.

M. Truszczy·nski.
toepistemic Expansions.
1991.

and
Computing Intersection of Au-
In LPNMR’91, pp. 37(cid:150)50,

Marek

[Gelfond and Lifschitz, 1991] M. Gelfond and V. Lifschitz.
Classical Negation in Logic Programs and Disjunctive
Databases. NGC, 9:365(cid:150)385, 1991.

[Gelfond, 2002] M. Gelfond. Representing Knowledge in A-
Prolog. In Computational Logic. Logic Programming and
Beyond, LNCS 2408

[Kemp and Stuckey, 1991] D.B. Kemp and P.J. Stuckey. Se-
mantics of Logic Programs with Aggregates. In ISLP’91,
pp. 387(cid:150)401. MIT Press, 1991.

[Koch et al., 2003] C. Koch, N. Leone, and G. Pfeifer. En-
hancing Disjunctive Logic Programming Systems by SAT
Checkers. Arti(cid:2)cial Intelligence, 15(1(cid:150)2):177(cid:150)212, 2003.
[Lee, 2004] J. Lee. A Model-Theoretic Counterpart of Loop
Formulas. http://www.cs.utexas.edu/users/
appsmurf/papers/mtclf.pdf, 2004.

[Leone et al., 1997] N. Leone, P. Rullo, and F. Scarcello.
Disjunctive Stable Models: Unfounded Sets, Fixpoint Se-
mantics and Computation. Information and Computation,
135(2):69(cid:150)112, 1997.

[Marek and Truszczy·nski, 1991] V.W.

[Osorio and Jayaraman, 1999] M. Osorio and B. Jayaraman.
Aggregation and Negation-As-Failure. NGC, 17(3):255(cid:150)
284, 1999.

[Pelov and Truszczy·nski, 2004] N.

and
M. Truszczy·nski.
Semantics of disjunctive programs
with monotone aggregates - an operator-based approach.
In NMR 2004, pp. 327(cid:150)334, 2004.

Pelov

[Pelov et al., 2004] N.

M. Bruynooghe.
grams with aggregates. In LPNMR-7, LNCS 2923

Pelov, M. Denecker,

and
Partial stable models for logic pro-

[Pelov, 2004] N. Pelov. Semantics of Logic Programs with
Aggregates. PhD thesis, Katholieke Universiteit Leuven,
Leuven, Belgium, 2004.
[Pfeifer, 2004] G. Pfeifer.

Improving the Model Genera-
tion/Checking Interplay to Enhance the Evaluation of Dis-
junctive Programs.
In LPNMR-7, LNCS, pp. 220(cid:150)233.
2004.

[Ross and Sagiv, 1997] K. A. Ross and Y. Sagiv. Monotonic
Aggregation in Deductive Databases. JCSS, 54(1):79(cid:150)97,
1997.

[Schlipf, 1995] J.S. Schlipf. The Expressive Powers of Logic

Programming Semantics. JCSS, 51(1):64(cid:150)86, 1995.

[Simons et al., 2002] P. Simons, I. Niemel¤a, and T. Soininen.
Extending and Implementing the Stable Model Semantics.
Arti(cid:2)cial Intelligence, 138:181(cid:150)234, 2002.

[Tarski, 1955] A. Tarski. A lattice-theoretical (cid:2)xpoint theo-
rem and its applications. Paci(cid:2)c J. Math, 5:285(cid:150)309, 1955.
[Van Gelder et al., 1991] A. Van Gelder, K.A. Ross, and J.S.
Schlipf. The Well-Founded Semantics for General Logic
Programs. JACM, 38(3):620(cid:150)650, 1991.

[Van Gelder, 1992] Allen Van Gelder. The Well-Founded
In PODS’92, pp. 127(cid:150)138.

Semantics of Aggregation.
ACM Press, 1992.

