Complete MCS-Based Search:

Application to Resource Constrained Project Scheduling

Philippe Laborie

ILOG

9, rue de Verdun, 94253 Gentilly Cedex, France

plaborie@ilog.fr

Abstract

This paper describes a simple complete search for
cumulative scheduling based on the detection and
resolution of minimal critical sets (MCS). The
heuristic for selecting MCSs relies on an estima-
tion of the related reduction of the search space.
An extension of the search procedure using self-
adapting shaving is proposed. The approach was
implemented on top of classical constraint propaga-
tion algorithms and tested on resource constrained
project scheduling problems (RCPSP). We were
able to close more than 15% of the previously open
problems of the PSPLIB [Kolisch and Sprecher,
1996] and improve more than 31% of the best
known lower bounds on those heavily studied prob-
lems. Other new results on open-shop and cumula-
tive job-shop scheduling are reported.

Introduction

1
The resource constrained project
scheduling problem
(RCPSP) is one of the most general scheduling problem that
is extensively studied in the literature. It consists in schedul-
ing a project, which is a set of activities linked with prece-
dence constraints, by means of a set of limited resources
while minimizing the total duration of the project. The de-
cision variant of the RCPSP, i.e., the problem of determining
whether there exists a feasible project of makespan smaller
than a given deadline, is NP-hard in the strong sense. The
RCPSP is a very popular and frequently studied NP-hard op-
timization problem and the last 20 years have witnessed a
tremendous improvement of both heuristic and exact solu-
the recent surveys given in [De-
tion procedures (cf. e.g.
meulemeester and Herroelen, 2002; Hartmann and Kolisch,
2005]). The currently best lower bounds on the makespan
for the general RCPSP are based on solving linear programs
using adequate cutting planes [Brucker and Knust, 2000;
Baptiste and Demassey, 2004]. State-of-the-art techniques
for upper-bounds rely on meta-heuristics such as Genetic Al-
gorithms, Ant Colony Optimization or Large Neighborhood
Search. Many scheduling problems such as job shop, cumula-
tive job shop and open-shop can be modeled as special cases
of RCPSP.

In this article, we present a pure constraint programming
approach based on the exploration of a complete search tree to
prove that the project cannot be achieved within a given dead-
line or to exhibit a feasible project if one exists. The search
procedure is based on the detection and resolution of minimal
critical sets (MCS) [Laborie and Ghallab, 1995] at each node
of the search. MCSs are carefully chosen using a heuristic
that tries to minimize the size of the search space. During
the search, strong constraint propagation is enforced using
classical scheduling constraint propagation techniques such
as time-tabling, edge-ﬁnding, precedence energy and balance
constraints [Laborie, 2003].

Next section recap the deﬁnition of the resource con-
strained project scheduling problem and introduces some no-
tations. Section 3 describes our basic search procedure as
well as the heuristic to select MCSs. Section 4 extends the
basic search procedure to perform self-adapting shaving. The
last part of the paper consists of experimental results on clas-
sical benchmarks (general RCPSP, open-shop and cumulative
jobshop problems). For general RCPSP, we show that our ap-
proach closes more than 15% of previously open instances
and improves more than 31% of best known lower bounds of
the famous PSPLIB instances [Kolisch and Sprecher, 1996].
The same approach using exactely the same settings was used
to close all the hard open-shop instances of [Gu´eret and Prins,
1999] in less than 5s CPU time and to improve the best known
lower bounds and close several instances of cumulative job-
shop [Nuijten, 1996].

2 Model and notations
The resource constrained project
scheduling problem
(RCPSP) can be formally stated as follows. A project is
made of a set of activities A linked by precedence con-
straints. Precedence constraints can be represented by a di-
rected acyclic graph G = (A,E) where each node in A rep-
resents an activity and each arc (A, B) ∈ E represents a
precedence constraint between A and B. Let d(A) denote
the ﬁxed duration of activity A ∈ A and s(A) (resp. e(A))
denote the decision variable representing the start (resp. end)
time of activity A. A set of discrete capacity resources R is
considered, each resource R ∈ R having a maximal avail-
able capacity Q(R) over the entire scheduling horizon. Each
activity A ∈ A requires a non-negative quantity q(A, R) of
resource R. The problem is to ﬁnd a feasible instantiation s

of the activity start times such that precedence and resource
constraints are satisﬁed and the schedule makespan is mini-
mal. More formally:

minimize

subject to :
∀A ∈ A,

∀(A, B) ∈ E,
∀R ∈ R,∀t ∈ Z+,

max
A∈A e(A)

0 ≤ s(A)
e(A) = s(A) + d(A)
e(A) ≤ s(B)

X

q(A, R) ≤ Q(R)

A∈S(t)

where S(t) is the set of activities executing at time t:

S(t) = {A ∈ A, s(A) ≤ t < e(A)}

A resource requirement of activity A on resource R is a
triple u = (A, R, q) where q = q(A, R) > 0.
If u =
(A, R, q) is a resource requirement, we will denote A(u) = A
the activity of u, R(u) = R the required resource, q(u) = q
the required quantity, s(u) (resp. e(u)) will denote the start
(resp. end) time of the activity of u. We will also denote
U(R) = {u/R(u) = R} the set of resource requirements
on resource R. If ϕ ⊆ U(R) is a subset of resource require-
u∈ϕ q(u)

ments on a resource R, we will denote q(ϕ) = P

the global resource consumption of R by activities in ϕ.

3 Search
3.1 Branching scheme
Our branching scheme assumes that a temporal network rep-
resenting the relations between the time-points of all activ-
ities (start and end) using the point algebra of [Vilain and
Kautz, 1986] is maintained during the search.
In our im-
plementation, this is ensured by the precedence graph con-
straint of ILOG SCHEDULER [ILOG, 2005]. We denote
{∅,≺,(cid:22), =,(cid:31),(cid:23),6=, ?} the set of qualitative relations be-
tween time points. If u and v represent two resource require-
ments, we will denote u (cid:22) v if and only if e(u) (cid:22) s(v).

The branching scheme relies on the notion of minimal crit-
ical sets (MCS) and their resolvers as introduced in [Laborie
and Ghallab, 1995]. A MCS is a minimal set of resource re-
quirements on the same resource R that could be executed si-
multaneously and would, in this case, over-consume resource
R. MCSs are a natural generalization to cumulative schedul-
ing of the pairs of activities conﬂicting for the same unary
resource in disjunctive scheduling.
Deﬁnition 1 (Minimal critical set) A minimal critical set on
a resource R is a subset φ ⊆ U(R), such that:
1. Q(R) < q(φ)
2. ∀ϕ ( φ, q(ϕ) ≤ Q(R)

(u,v)∈φ×φ s(u) ≺ e(v) is consistent with the current
temporal network

3. V

Informally, the different ways to resolve a minimal critical
set consist in posting a precedence constraint between any
two of its activities.

Deﬁnition 2 (Resolvers of a minimal critical set) If φ ⊆
U(R) is a MCS, we call resolvers of φ the set of temporal
constraints Res(φ) = {u (cid:22) v : (u, v) ∈ φ2, u 6= v}.

As described in [Laborie and Ghallab, 1995], the set of re-
solvers Res(φ) of a MCS φ can be simpliﬁed so as to remove
those resolvers ρ ∈ Res(φ) for which there exists another
resolver ρ0 ∈ Res(φ) such that ρ ⇒ ρ0 given the current
temporal network. Indeed, in such case, the resolver ρ is re-
dundant. Such a simpliﬁcation procedure can be achieved in
O(k3) if k is the size of the MCS using the naive Algorithm
1. Line 7 allows removing resolver u (cid:22) v if there exists w
such that u (cid:22) v ⇒ u (cid:22) w or u (cid:22) v ⇒ w (cid:22) v. In what fol-
lows, we assume that the set of resolvers of a MCS has been
simpliﬁed.

Res(φ) ← ∅
for all u in φ do

Algorithm 1 Resolver simpliﬁcation algorithm
1: procedure SIMPLIFY RESOLVERS(φ)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:

for all v in φ \ {u} do
keep uv ← TRUE
for all w in φ \ {u, v} do
keep uv ← FALSE
break

Res(φ) ← Res(φ) ∪ (u (cid:22) v)

if keep uv then

return Res(φ)

if s(v) (cid:22) s(w) or e(w) (cid:22) e(u) then

At each search node, our branching scheme consists in se-
lecting a MCS φ and branching on its possible resolvers in
the children nodes until there is no more MCS. This approach
is clearly complete.

3.2 Heuristics
As all the resolvers consist of temporal constraints of the form
x (cid:22) y where x and y are two time-points (start or end of an
activity), we are interested in an estimation of the size of the
search space after posting such a precedence constraint. The
fraction of the search space that is preserved when adding a
precedence constraint is estimated using the complementary
of the commitment measure introduced in [Laborie, 2003].

Let x and y be two time-points with respective lower and
upper bound for time value: [xmin, xmax] and [ymin, ymax].
The size of the search space is estimated by the Cartesian
product of the domain of the two variables, that is, the area
of the rectangle [xmin, xmax], [ymin, ymax]. The size of the
search space that is preserved when adding the constraint
x (cid:22) y is the part of that rectangle above the line x = y as
illustrated in Figure 1. The fraction of the search space that is
preserved can thus be estimated as follows. Let:

A = (ymax − ymin + 1)(xmax − xmin + 1)
B = (ymax − xmin + 1)(ymax − xmin + 2)

Cmin = max(0, (ymin − xmin)(ymin − xmin + 1))
Cmax = max(0, (ymax − xmax)(ymax − xmax + 1))
The fraction is then equal to:

is the preserved search space so far in the current (partial)
MCS; φ∗ is the best MCS so far and p∗ = preserved(φ∗) is
the preserved search space of the best MCS so far. The pro-
cedure at line 1 calls the MCS rating and selection process
on each resource. At line 6, to rate and select MCSs for a
given resource, the procedure ﬁrst sorts the relevant sets of
requirements v at lines 7 and 9 by decreasing order of q(v),
using id(v) to break ties in order to ensure that each MCS is
scanned only once, starting with the smallest MCSs, that is,
the ones containing the most greedy requirements. The pro-
cedure at line 23 returns TRUE if and only if a given require-
ment u can possibly overlap all the requirements of a partial
MCS given the current temporal network. The procedure at
line 28 computes the incremental increase of preserved space
due to the insertion of a new requirement u in the current
MCS φ. The value of preserved has been described in sec-
tion 3.2. The main recursive function for selecting MCSs is
described at line 12.

Algorithm 2 MCS selection algorithm
1: procedure SELECT MCS
2:
3:
4:
5:

p∗ ← +∞
for R in R do
return φ∗

SELECT MCS(R)

6: procedure SELECT MCS(R)
Sort U(R) by decreasing q
7:
for all u in U(R) do
8:
9:
10:
11:

for u in U(R) do

RSELECT MCS(R,(u),q(u),0)

Sort U nranked(u) by decreasing q

if q > Q(R) then
if p < p∗ then

12: procedure RSELECT MCS(R,φ,q,p)
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:

p∗ ← p
φ∗ ← φ
u ← Last(φ)
for all v in Unranked(u) do

if IS UNRANKED(v,φ) then

else

dp ← DELTA PRESERVED(v,φ)
RSELECT MCS(R,φ⊕v,q+q(v),p+dp)

. φ is a MCS
. φ is the best MCS so far

. φ needs to be extended

for all v in φ do

23: procedure IS UNRANKED(u,φ)
24:
25:
26:
27:

if u (cid:22) v or v (cid:22) u then

return FALSE

return TRUE

dp ← 0
for all v in φ do

28: procedure DELTA PRESERVED(u,φ)
29:
30:
31:
32:

dp ← dp + preserved(u,v) + preserved(v,u)

return dp

Figure 1: Preserved search space when adding x (cid:22) y

preserved(x (cid:22) y) = B − Cmin − Cmax

2 · A

In the example of Figure 1, this gives A = 30, B = 56,

Cmin = 6, Cmax = 2, and preserved(x (cid:22) y) = 24/30.

ω ·P
P

If ω is the size of the search space below the current search
node, the size of the search space after posting a temporal
constraint x (cid:22) y can be estimated by ω · preserved(x (cid:22) y).
If φ is the MCS that is selected to be resolved at the cur-
rent search node, the size of the search space to explore be-
low the current node can thus be estimated as the sum of
the sizes of the search space below each child node, that is:
ρ∈Res(φ) preserved(ρ). Therefore, preserved(φ) =
ρ∈Res(φ) preserved(ρ) estimates the fraction of the search
space that is preserved when choosing φ as the next MCS to
solve1. Our heuristic simply chooses to resolve next the MCS
φ that minimizes preserved(φ) that is, the one that mini-
mizes our estimation of the size of the explored search space.
Next section provides more details about the MCS selection
algorithm.

3.3 MCS selection algorithm
At each search node, the MCS selection procedure develops
a tree of partial MCSs where the current partial MCS φ is
extended adding one resource requirement in each child node.
By deﬁnition of preserved(φ), it is clear that φ0 ⊂ φ ⇒
preserved(φ0) ≤ preserved(φ). Thus, if φ∗ is the best MCS
found so far, once a partial MCS φ has been reached such that
preserved(φ∗) ≤ preserved(φ), the sub-tree of the MCS
selection tree rooted at φ can be abandoned.

The algorithm for selecting and branching on a MCS is
more precisely described in Algorithm 2 using the following
notations: id(u) is a unique index associated with resource
requirement u used to break ties. U nranked(u) represents
all the resource requirements v that can possibly overlap u
given the current temporal constraints, and that are such that
q(v) < q(u) or q(v) = q(u) and id(v) < id(u). φ is
the (partial) MCS that is currently being extended. A (par-
tial) MCS is represented by a list of resource requirements:
φ = (u1, ..., uk). We denote uk = Last(φ) and deﬁne the
operator ⊕ as follows: φ⊕u = (u1, ..., uk, u); q = q(φ) is the
consumption of the current (partial) MCS; p = preserved(φ)

1Note that this is of course only a rough estimate and in particu-

lar, the estimated fraction preserved(φ) can be greater than 1.

The best MCS φ∗ that has been scanned by the above pro-

minxmaxminymaxyxxx=yyPreservedsearchspacecedure is selected as the one to be solved at the current search
node. This MCS is simpliﬁed using Algorithm 1 and the
search explores all of its resolvers ρ ∈ Res(φ∗) in the child
nodes by decreasing order of preserved(ρ). This order has
no effect when the schedule is not feasible as in this case the
complete search tree needs to be explored but it helps ﬁnding
a solution quicker when a solution exists.

self-adaptation in such a way that on average, among the last
h shaving attempts, αh lead to the inference of a new prece-
dence. Whenever the number of successful shaving s among
the last h ones deviates from αh, the parameter β is adapted
accordingly: if s < αh, β is decreased by β and if s > αh,
β is increased by β. For all our experiments with shaving,
we took h = 20, α = 0.75,  = 0.01 and start with β = 1.

4 Self-adapting shaving
Shaving techniques [Torres and Lopez, 2000] provide a
good framework for strengthening constraint propagation and
avoiding late failures to be discovered in the search tree. They
are all based on the following principle: if adding a constraint
C in the current node of the search leads to a failure of the
propagation, then, constraint ¬C can be inferred. Due to the
cost of propagating a constraint C and the potential number
of constraints C to try to shave on, shaving techniques are in
general computationally expensive.

To improve the pruning of the search tree, we implemented
the following shaving technique based on MCSs. If a MCS
φ with resolvers Res(φ) = {ρ1, ..., ρk, ρk+1} is such that
∀i ∈ [1..k], adding ρi in the current schedule leads to a
failure of the propagation, then ρk+1 can be inferred. The
complexity for shaving a given MCS φ of size n is thus in
O(n2P ) where P is the cost of full constraint propagation
at the current node. Potentially, there is of course an ex-
ponential number of MCSs to shave on at each search node
and we can expect that many of those MCS do not allow in-
ferring any precedence constraint. An idea to speed-up the
shaving process is thus to only try shaving on a subset of
MCSs for which the probability to infer a precedence con-
straint is greater than a given threshold α. Parameter α is
an input of the shaving algorithm. We can roughly esti-
mate that the probability that adding a precedence constraint
x (cid:22) y in the current schedule will lead to a failure of the
propagation is proportional2 to 1 − preserved(x (cid:22) y). If
ρm = argmaxρ∈Res(φ)preserved(ρ) is the resolver of the
MCS φ with maximal preserved search space, we are inter-
ested in the MCSs that get a high probability that all their re-
solvers but ρm will fail, that is, if we assume all the probabil-
ities are independent, the ones such that Πρ∈Res(φ)\{ρm}(1−
preserved(ρ)) is greater than a given threshold. For those
MCSs, if the threshold is close enough to 1, we can as-
sume that preserved(ρ) is small enough so that the ﬁrst or-
der approximation Πρ∈Res(φ)\{ρm}(1 − preserved(ρ)) ≈

1 −P

ρ∈Res(φ)\{ρm} preserved(ρ) is reasonable.

To summarize, we thus only consider for shaving those
MCS scanned by the procedure described in Algorithm 2 that
are such that preserved(φ) − preserved(ρm) ≤ β, β be-
ing a threshold. The computation of this criterion only adds
a negligible overhead related with the maintenance of ρm for
each MCS in the MCS selection procedure. Due to the nu-
merous approximations, β is not taken to be constant (theo-
retically equal to 1 − α). The threshold β is computed by
2Note that this estimation is exact at the extreme points when
preserved(x (cid:22) y) = 0 (propagation will fail for sure) and when
preserved(x (cid:22) y) = 1 (propagation cannot fail because x (cid:22) y has
already been discovered given the current domains of x and y).

5 Experimental evaluation
The approach has been implemented on top of ILOG
SCHEDULER 6.1 using the timetable, disjunctive, edge-
ﬁnder, precedence energy and balance constraints [ILOG,
2005]. All the experiments described in this section were
run on a Dell Latitude D600 laptop, 1.4 GHz. Detailed
results such as individual
lower bounds for each prob-
lem instance and new optimal solutions are available at
http://scheduler.ilog.fr/.

5.1 Results on general RCPSP
We evaluated our approach on the instances of the PSPLIB
[Kolisch and Sprecher, 1996] with 60, 90 and 120 activities
(resp. sets J60, J90, J120). For each instance, we solve the
feasibility problem of ﬁnding a schedule with a makespan
lower than T , starting with a legal lower bound for T 3 and
incrementing T until either the problem is shown to be feasi-
ble (in this case, T is the optimal makespan) or a given time
limit for solving the problem with makespan T is exceeded
(in this case, T is a legal lower-bound but the search stops
without providing any legal upper-bound).

In a ﬁrst series of experiments, we use the basic search de-
scribed in section 3 without shaving with a time limit of 300s.
The previous best lower and upper bounds we compare with
are the ones reported in the PSPLIB together with the recent
improvements on the J60 instances reported in [Baptiste and
Demassey, 2004]. The results are summarized on Table 1
with the following columns:

#O :
#I
:
AGR:

#C :

number of instances previously open
number of improved lower bounds (% of #O)
average gap (distance from the lower to the upper
bound) reduction when a bound is improved
number of closed instances (% of #O)

Inst.
J60
J90
J120
ALL

#O
98
129
390
617

#I
39
51
88
178

(%I)
(39.8%)
(39.5%)
(22.6%)
(28.8%)

AGR
62.9%
58.4%
47.0%
53.0%

#C
21
26
38
85

(%C)
(21.4%)
(20.2%)
(9.7%)
(13.8%)

Table 1: Results on RCPSP without self-adapting shaving
with a time-limit of 300s

Out of the 617 previously open instances, we are able to
improve 178 lower-bounds with an average gap reduction of
53% and to close 85 instances.

To show the effect of self-adapting shaving, we run a ver-
sion of our approach using self-adapting shaving with the

3For instance the lower-bound of the PERT of temporal con-

straints

Inst.
J60
J90
J120
ALL

#O
98
129
390
617

#I
40
52
90
182

(%I)
(40.8%)
(40.3%)
(23.1%)
(29.5%)

AGR
62.6%
58.3%
47.3%
53.1%

#C
22
26
38
86

(%C)
(22.4%)
(20.2%)
(9.7%)
(13.9%)

Inst.
J60
J90
J120
ALL

#O
98
129
390
617

#I
44
54
95
193

(%I)
(44.9%)
(41.9%)
(24.4%)
(31.3%)

AGR
72.4%
66.0%
48.1%
61.1%

#C
26
30
40
96

(%C)
(26.5%)
(23.3%)
(10.3%)
(15.6%)

Table 2: Results on RCPSP with a self-adapting shaving and
a time-limit of 300s

Table 3: Results on RCPSP with a self-adapting shaving and
a time-limit of 1800s

same time-limit of 300s. The results are summarized on Ta-
ble 2. Out of the 617 previously open instances, we are able
to improve 182 lower-bounds with an average gap reduction
of 53.1% and to close 86 instances. The main conclusion is
that, within the same time-limit, the addition of self-adapting
shaving slightly increases the performances. The two curves
below respectively show, on a particular instance (J60 5 2),
the number of search nodes with a given depth in the search
tree and, for each node depth, the ratio between the number
of selected MCSs that effectively lead to the inference of a
new precedence and the total number of MCSs selected for
shaving. One clearly see that in the region of the search space
where most of the nodes are concentrated (between depths
10 and 35), this ratio is effectively close to the target ratio
of 0.75. In this instance, 4667 nodes where explored, 4843
MCSs where selected for shaving and among them, 3291 ef-
fectively lead to the inference of a new precedence.

350
300
250
200
150
100
50
0

1
0.8
0.6
0.4
0.2
0

Number of nodes

0

5

10

20

15
25
Search depth

30

35

40

Actual shaving ratio
Target shaving ratio

0

5

10

20

25
15
Search depth

30

35

40

Given that self-adapting shaving slightly improves the per-
formances within the same time limit of 300s, we used this
conﬁguration with an extended time-limit of 1800s. The re-
sults are summarized on Table 3. Out of the 617 previously
open instances, we improve 193 lower-bounds (that is more
than 31% of the previously open instances) with an average
gap reduction of 61.1% and close 96 instances (that is more
than 15% of the previously open instances).

5.2 Results on open-shop problems
Open-shop problems can be represented as a special cases
of RCPSP where all resources have a unit capacity and ad-
ditional unary resources are used to model the fact that ac-
tivities of the same job cannot not overlap. We tested our

Instance
gp06-03
gp06-07
gp06-09
gp06-10
gp07-01
gp07-02
gp07-04
gp07-06
gp07-08
gp07-09
gp08-02
gp08-04
gp08-06
gp08-07
gp08-08
gp08-10
gp09-01

UB
1255
1290
1243
1254
1159
1185
1167
1193
1180
1220
1135
1154
1116
1126
1148
1161
1135

Optim.
1255*
1290*
1243*
1254*
1159*
1185*
1167*
1193*
1180*
1220*
1135*
1153*
1115*
1126*
1148*
1161*
1129*

Instance
gp09-02
gp09-03
gp09-06
gp09-07
gp09-08
gp09-09
gp09-10
gp10-01
gp10-02
gp10-03
gp10-04
gp10-05
gp10-06
gp10-07
gp10-08
gp10-09
gp10-10

UB
1112
1117
1093
1097
1106
1126
1120
1099
1099
1081
1089
1080
1072
1081
1098
1120
1092

Optim.
1110*
1115*
1093*
1090*
1105*
1123*
1110*
1093*
1097*
1081*
1077*
1071*
1071*
1079*
1093*
1112*
1092*

Table 4: Results on open-shop with a self-adapting shaving
and a time-limit of 5s

approach, with the same settings as in previous section on
the open-shop problems instances proposed in [Gu´eret and
Prins, 1999]. Those instances are considered to be very
hard instances of open-shop problems and serve as classi-
cal benchmark in open-shop scheduling (see for instance re-
cent work in [Blum, 2005]). The benchmark consists of 80
instances ranging from 3 jobs × 3 machines problems until
10 jobs × 10 machines problems. Out of these 80 problems,
34 instances are still open. Using our approach, we were able
to close all those instances in less than 5s CPU time. The op-
timal makespan for the 34 previously open instances is sum-
marized on Table 4 where the column U B corresponds to the
currently best known upper-bound for which no optimality
proof did exist.

We also experimented with the open instances of the
benchmark of [Brucker et al., 1997]. We closed 3 of
these 6 open instances:
namely j8-per0-2 (optimal
makespan: 1052), j8-per10-0 (optimal makespan 1017)
and j8-per10-1 (optimal makespan 1000).

5.3 Results on cumulative jobshop problems

We tested our approach, with the same settings, on the cu-
mulative job-shop problem benchmark described in [Nuijten,
1996]. These instances are derived from classical jobshop
scheduling problems by multiplying the number of jobs (and
thus the number of activities) and the capacity of the re-
sources by a given factor (×2 or ×3). Our results are summa-
rized on Table 5 where LB is the lower bound using the con-
sistency checking described in [Nuijten, 1996] and N ewLB
the new lower bound of our approach. We were able to close
the ft06×2 and ft06×3 instances as well as to improve
12 lower bounds out of these 38 open instances.

Instance
ft06×2
ft10×2
la03×2
la04×2
la16×2
la17×2
la18×2
la19×2
la20×2
la21×2
la22×2
la24×2
la25×2
la29×2
la36×2
la37×2
la38×2
la39×2
la40×2

LB
53
835
593
572
888
754
783
731
830
1017
913
885
907
1117
1229
1378
1092
1221
1180

New LB
55*
837
593
572
892
754
803
756
849
1017
913
885
907
1117
1229
1378
1092
1221
1180

Instance
ft06×3
ft10×3
la03×3
la04×3
la16×3
la17×3
la18×3
la19×3
la20×3
la21×3
la22×3
la24×3
la25×3
la29×3
la36×3
la37×3
la38×3
la39×3
la40×3

LB
53
828
590
570
884
753
776
724
829
1010
913
884
903
1116
1227
1370
1087
1221
1176

New LB
55*
828
590
570
887
753
783
740
842
1012
913
884
903
1116
1227
1370
1087
1221
1176

Table 5: Results on cumulative job-shop with a self-adapting
shaving and a time-limit of 1800s

6 Conclusions

We presented a simple complete search procedure imple-
mented on top of classical constraint propagation algorithms
and applied it to resource constrained project scheduling
problems. In average, this approach outperforms the best al-
gorithms for ﬁnding lower bounds on those scheduling prob-
lems, even with a time limit of 300s per optimization step4.
Using this approach in conjunction with a self-adapting shav-
ing procedure, we were able to close more than 15% of the
previously open problems of the PSPLIB and improve more
than 31% of the best known lower bounds. What is even more
remarkable is that this very same approach allows closing all
the hard open-shop instances of [Gu´eret and Prins, 1999] in
less than 5s CPU time although the approach was not partic-
ularly designed to tackle disjunctive scheduling and does not
exploit the open-shop nature of the problems.

The understanding of why our method works so well on the
instances of the PSPLIB and on many open-shop problems
would deserve a deeper study. From one hand, if the prob-
lems are highly cumulative, our approach is clearly limited by
the explosion of the number of MCSs to consider. From the
other hand, when problems are highly disjunctive, we could
expect other approaches dedicated to disjunctive scheduling
to work better. A ﬁrst possible explanation could be a good
ﬁt between our approach and the ”disjunctivity” degree of the
hard instances of the PSPLIB as suggested by some recent
work [Garaix et al., 2005]. A result of this study could be
some kind of hybridizing of MCS-based search with tech-
niques more adapted to highly cumulative problems, MCS-
based search being restricted to the resolution of MCSs with
small preserved search space (thus small MCSs) at the top of
the search tree. A second direction for future work is the gen-
eralization of the notion of self-adapting shaving introduced
in this paper to other shaving techniques in scheduling.

4When this time limit is exceeded at an optimization step, usu-
ally, the previous steps where fairly quick so that the overall time for
computing the lower bound is close to 300s.

References
[Baptiste and Demassey, 2004] P. Baptiste and S. Demassey.
Tight LP bounds for resource constrained project schedul-
ing. OR Spectrum, 26:251–262, 2004.

[Blum, 2005] C. Blum. Beam-ACO - hybridizing ant colony
optimization with beam search: an application to open-
shop scheduling. Computers & Operations Research,
32(6):1565–1591, 2005.

[Brucker and Knust, 2000] P. Brucker and S. Knust. A lin-
ear programming and constraint propagation-based lower
bound for the RCPSP. European Journal of Operational
Research, 127:355–362, 2000.

[Brucker et al., 1997] P. Brucker, J. Hurink, B. Jurisch, and
B. W¨ostmann. A branch & bound algorithm for the open-
shop problem. Discrete Applied Mathematics, 76:43–59,
1997.

[Demeulemeester and Herroelen, 2002] E. Demeulemeester
and W. Herroelen. Project scheduling - A research hand-
book. Kluwer Academic Publishers, 2002.

[Garaix et al., 2005] T. Garaix, C. Artigues, and S. De-
massey. Bornes bas´ees sur les ensembles interdits pour le
probl`eme d’ordonnancement de projet `a moyens limit´es.
In ROADEF’2005, 2005.

[Gu´eret and Prins, 1999] C. Gu´eret and C. Prins. A new
lower bound for the open-shop problem. Annals of Op-
erations Research, 92:165–183, 1999.

[Hartmann and Kolisch, 2005] S. Hartmann and R. Kolisch.
Experimental evaluation of state-of-the-art heuristics for
the resource-constrained project scheduling problem: An
update. European Journal of Operational Research, 2005.
ILOG SCHEDULER 6.1 Reference

[ILOG, 2005] ILOG.

Manual, 2005. http://www.ilog.com/.

[Kolisch and Sprecher, 1996] R. Kolisch and A. Sprecher.
PSPLIB - A project scheduling problem library. European
Journal of Operational Research, 96:205–216, 1996.

[Laborie and Ghallab, 1995] P. Laborie and M. Ghallab.
Planning with Sharable Resource Constraints. In IJCAI-
95, pages 1643–1649, 1995.

[Laborie, 2003] P. Laborie. Algorithms for propagation re-
source constraints in AI planning and scheduling: Exist-
ing approaches and new results. Artiﬁcial Intelligence,
143:151–188, 2003.

[Nuijten, 1996] W. Nuijten.

A computational study of
constraint satisfaction for multiple capacitated job shop
scheduling. European Journal of Operational Research,
90(2):269–284, 1996.

[Torres and Lopez, 2000] P. Torres and P. Lopez. Overview
and possible extensions of shaving techniques for Job-
Shop problems. In CP-AI-OR’2000, pages 181–186, 2000.
[Vilain and Kautz, 1986] M. Vilain and H. Kautz. Constraint
propagation algorithms for temporal reasoning.
In Fifth
National Conference on Artiﬁcial Intelligence, pages 377–
382, 1986.

