Grounding for Model Expansion in k-Guarded Formulas

with Inductive Deﬁnitions

Murray Patterson, Yongmei Liu, Eugenia Ternovska, Arvind Gupta

School of Computing Science

Simon Fraser University, Canada

{murrayp,y liu,ter,arvind}@cs.sfu.ca

Abstract

Mitchell and Ternovska [2005] proposed a con-
straint programming framework based on classical
logic extended with inductive deﬁnitions. They for-
mulate a search problem as the problem of model
expansion (MX), which is the problem of expand-
ing a given structure with new relations so that it
satisﬁes a given formula. Their long-term goal is
to produce practical tools to solve combinatorial
search problems, especially those in NP.
In this
framework, a problem is encoded in a logic, an
instance of the problem is represented by a ﬁnite
structure, and a solver generates solutions to the
problem. This approach relies on propositionali-
sation of high-level speciﬁcations, and on the efﬁ-
ciency of modern SAT solvers. Here, we propose
an efﬁcient algorithm which combines grounding
with partial evaluation. Since the MX framework
is based on classical logic, we are able to take ad-
vantage of known results for the so-called guarded
fragments. In the case of k-guarded formulas with
inductive deﬁnitions under a natural restriction, the
algorithm performs much better than naive ground-
ing by relying on connections between k-guarded
formulas and tree decompositions.

1 Introduction

NP search and decision problems occur widely in AI; mod-
elling these problems as SAT, CSP and ASP and then us-
ing a corresponding solver are perhaps the most successful
declarative approaches (in practice) to solving these prob-
lems. While each approach has made valuable contributions,
they also have limitations. Modelling in propositional logic
and then using a SAT solver is the oldest and the most de-
veloped of these approaches; the simplicity of the semantics
has been the key driver in its success. However, propositional
logic provides a poor modelling language in which there are
no quantiﬁers, nor recursion. Moreover, in modelling a prob-
lem as SAT, there is no clear separation of instance and prob-
lem description. CSP provides somewhat better modelling
capabilities, and CSP solvers rely on a number of solution
techniques such as no-good learning and backjumping. CSP
solvers, however, have found success primarily as compo-

nents of general purpose programming languages, and are
thus not purely declarative. ASP emerged from logic pro-
gramming, and is based on the stable model semantics [Gel-
fond and Lifschitz, 1991]. The main advantage of ASP is that
its language allows an implicit use of quantiﬁers and has a
built-in recursion mechanism. However, some concepts that
are natural in classical logic are difﬁcult to express in ASP.

Mitchell and Ternovska [2005] proposed a declarative con-
straint programming framework based on classical logic ex-
tended with inductive deﬁnitions. They cast search problems
as the classical problem of model expansion (MX), which is
the problem of expanding a given structure with new relations
so that it satisﬁes a given formula. Their long-term goal is to
develop tools for solving hard combinatorial search problems,
especially those in NP. In this framework, a problem is en-
coded in a logic such as ﬁrst-order logic (FO) or an extension
of FO, a problem instance is represented by a ﬁnite struc-
ture, and a solver generates extensions of initially unspeciﬁed
predicates, which represent solutions to the problem.

The MX framework combines many strengths of these
three mentioned approaches, as well as addresses their limi-
tations. Its features include: a high-level modelling language
that supports quantiﬁcation and recursion, and a clear sep-
aration of the instance (a ﬁnite structure) from the problem
description (a formula). Most importantly, the framework
is based on classical logic, making it possible to exploit the
many existing results from ﬁnite model theory and descrip-
tive complexity [Kolokolova et al., 2006]. In addition, ax-
iomatizations are easier to understand, and we need not rely
on stable model semantics to imitate the ‘classical’ part of the
program, a common practice in ASP.

A key component in building practical solvers for the MX
framework is propositionalisation (or grounding) of high-
level speciﬁcations and the use of efﬁcient SAT solvers. The
idea is to ﬁrst obtain a ground formula that contains only ini-
tially unspeciﬁed predicates and is satisﬁable iff the original
MX problem has a solution, and then call a propositional sat-
isﬁability solver. Two prototype solvers for propositional for-
mulas with inductive deﬁnitions have been developed [Pelov
and Ternovska, 2005; Mari¨en et al., 2005].

The goal of this paper is to develop an efﬁcient ground-
ing algorithm for the MX framework. Since the frame-
work is based on classical logic, we take advantage of re-
sults known for the guarded fragments [Andr´eka et al., 1998;

IJCAI-07

161

Gottlob et al., 2001]. We present a polytime algorithm for
grounding k-guarded FO sentences with inductive deﬁnitions
provided that all predicates in the guards are initially speciﬁed
(a fragment which we call IGFk). As explained later, this re-
striction is necessary for polytime grounding, and IGFk con-
tains (in terms of expressive power) sentences with treewidth
at most k. In practice, most sentences have small treewidth
and thus can be put into IGFk with small k. Our algorithm
runs in O((cid:2)2nk) time, where (cid:2) is the size of the sentence, and
n is the size of the structure.

2 Grounding for Model Expansion (MX)
We formulate search problems as the problem of model ex-
pansion (MX).
Deﬁnition 2.1 (MX) Given a sentence φ and a ﬁnite struc-
ture A with vocabulary σ ⊆ vocab(φ), ﬁnd a structure B that
is an expansion of A to vocab(φ) such that B |= φ.
Example: Let A be a graph G = (V ; E), and let φ be:
∀x[(R(x) ∨ B(x) ∨ G(x)) ∧ ¬(R(x) ∧ B(x))
(cid:2)

∧¬(R(x) ∧ G(x)) ∧ ¬(B(x) ∧ G(x))]

∀x∀y[E(x, y) ⊃ (¬(R(x) ∧ R(y))

∧¬(B(x) ∧ B(y)) ∧ ¬(G(x) ∧ G(y)))]

Let B be an expansion of A to vocab(φ). Then B |= φ iff it
corresponds to a 3-coloring of G.

In the MX framework, there is a clear separation between
problem instance (ﬁnite structure) and problem description (a
formula). In grounding, we bring domain elements into the
syntax by expanding the vocabulary and associating a new
constant symbol with each element of the domain. For do-
˜A. As nota-
main A, we denote the set of such constants by
tional conventions, we use σ to denote the instance vocabu-
lary and ε the expansion vocabulary.
Deﬁnition 2.2 (Reduced Grounding for MX) A formula ψ
is a reduced grounding of a formula φ over a σ-structure A =
(A, σA) if (1) ψ is a ground formula over ε ∪ ˜A; and (2) for
every expansion structure B = (A, σA, εB) over vocab(φ),
B |= φ iff (B, ˜AB) |= ψ, where
denotes the interpretation
of the new constants

˜AB

˜A.

During grounding, the symbols of the instance vocabulary are
“evaluated out” and a reduced grounding is obtained.

Obviously, by the above deﬁnition, we have

Proposition 2.3 Let ψ be a reduced grounding of a formula
φ over a σ-structure A. Then A can be expanded to a model
of φ iff ψ is satisﬁable.
Thus, through grounding, the model expansion problem is re-
duced to the satisﬁability problem.

In our grounding algorithm for a sentence, we must deal
with subformulas φ of the original sentence (φ may contain
free variables). For a σ-structure A, we compute a formula
ψ for each instantiation of the free variables of φ, such that
each ψ is a reduced grounding of φ under the corresponding
instantiation. We call such a representation an answer to φ
wrt A. We compute an answer to a formula, by computing
answers to its subformulas and combining them according to
the connectives. To represent such answers, we introduce the
concept of an extended relation (extending the notion of a
relation from relational database theory).

Deﬁnition 2.4 (extended X-relation) Let A = (A; σA),
and X be the set of free variables of formula φ. An extended
X-relation R over A is a set of pairs (γ, ψ) s.t. (1) ψ is a
ground formula over ε ∪ ˜A and γ : X → A; (2) for every γ,
there is at most one ψ s.t. (γ, ψ) ∈ R.
An extended X-relation R is intended to represent a unique
mapping (denoted by δR) from all possible instantiations of
variables in X to ground formulas. For γ’s not appearing in
R, the associated formula is f alse. We write γ ∈ R to mean
that there exists ψ such that (γ, ψ) ∈ R.
Deﬁnition 2.5 (answer to φ wrt A) Let φ be a formula in
σ ∪ ε with free variables X, A a σ-structure with domain
A, and R an extended X-relation over A. We say R is an
answer to φ wrt A if for any γ : X → A, we have that δR(γ)
is a reduced grounding of φ[γ] over A. Here, φ[γ] denotes
the result of instantiating free variables in φ according to γ.
where φ(cid:2) = P (x, y, z)∧
E(x, y) ∧ E(y, z), σ = {P }, and ε = {E}. Let A be a
σ-structure such that P A = {(1, 2, 3), (3, 4, 5)}. Then this
extended relation R

As an example, let φ = ∃x∃y∃zφ(cid:2)

ψ

z
3 E(1, 2) ∧ E(2, 3)
5 E(3, 4) ∧ E(4, 5)

x
1
3

y
2
4
wrt A.

is an answer to φ(cid:2)
It is easy to see, for example,
that δR(1, 2, 3) = E(1, 2) ∧ E(2, 3) is a reduced ground-
ing of φ(cid:2)[(1, 2, 3)] = P (1, 2, 3) ∧ E(1, 2) ∧ E(2, 3), and
δR(1, 1, 1) = f alse is a reduced grounding of φ(cid:2)[(1, 1, 1)].
The following extended relation is an answer to φ(cid:2)(cid:2) = ∃zφ(cid:2)

x
1
3

ψ

y
2 E(1, 2) ∧ E(2, 3)
4 E(3, 4) ∧ E(4, 5)

Here, for example, E(1, 2) ∧ E(2, 3) is a reduced grounding
of φ(cid:2)(cid:2)[(1, 2)]. Finally, the following represents an answer to
φ, where the single formula is a reduced grounding of φ.

[E(1, 2) ∧ E(2, 3)] ∨ [E(3, 4) ∧ E(4, 5)]

ψ

Just as relations in databases have an algebra, i.e., a set of
operations whose semantics correspond to the connectives of
FO logic, we deﬁne an algebra for extended relations. Our
algebra consists of join, join with complement, projection,
intersection and union.
Deﬁnition 2.6 (join, join with complement) Let R be an
extended X-relation and S an extended Y -relation, both over
domain A. Then

1. the join of R and S is the extended X ∪ Y -relation

R 1 S = {(γ, ψ) | γ : X ∪ Y → A, γ|X ∈ R,
γ|Y ∈ S, and ψ = δR(γ|X ) ∧ δS (γ|Y )};

2. the join of R with the complement of S is the extended

X ∪ Y -relation R 1
γ|X ∈ R, and ψ = δR(γ|X ) ∧ ¬δS(γ|Y )}.

c S = {(γ, ψ) | γ : X ∪ Y → A,

Proposition 2.7 Suppose that R is an answer to φ1 and S is
an answer to φ2, both wrt structure A. Then (1) R 1 S is
an answer to φ1 ∧ φ2 wrt A; (2) R 1
c S is an answer to
φ1 ∧ ¬φ2 wrt A.

IJCAI-07

162

(cid:3)

Deﬁnition 2.8 (Y -projection) Let R be an extended X-
relation and Y ⊆ X. The Y -projection of R, denoted
is the extended Y -relation {(γ(cid:2), ψ) | γ(cid:2) =
by πY (R),
γ|Y for some γ ∈ R and ψ =
Proposition 2.9 Suppose that R is an answer to φ wrt A,
and Y is the set of free variables of ∃¯zφ. Then πY (R) is an
answer to ∃¯zφ wrt A.
Deﬁnition 2.10 (intersection, union) Let R and S be ex-
tended X-relations. Then

{γ∈R|γ|Y =γ (cid:2)} δR(γ)}.

1. the intersection of R and S is the extended X-relation
γ ∈ R and γ ∈ S, and ψ =

R ∩ S = {(γ, ψ) |
δR(γ) ∧ δS(γ)};

2. the union of R and S is the extended X-relation R∪S =
{(γ, ψ) | γ ∈ R or γ ∈ S, and ψ = δR(γ) ∨ δS(γ)}.
Proposition 2.11 Let φ1 and φ2 be formulas with the same
set of free variables. Suppose that R is an answer to φ1 and S
is an answer to φ2, both wrt A. Then (1) R ∩ S is an answer
to φ1 ∧ φ2 wrt A; (2) R ∪ S is an answer to φ1 ∨ φ2 wrt A.

In traditional relational algebra, projection can be done in
linear time, and join can be done in time linear in the sum of
the size of the input and output relations. Detailed algorithms
and proofs for this can be found in the appendix of [Flum et
al., 2002]. The essential idea is this: ﬁrst encode domain el-
ements appearing in the input relations by natural numbers;
then sort the encoded input relations using the bucket sort al-
gorithm; next, compute the projection or join of the encoded
input relations; ﬁnally, decode the resulting output relation.
In our implementation of the operations on extended rela-
tions, we use the same idea except that we also need to copy
formulas from the input relations to the output relation.

Let R be an extended X-relation. The size of R, denoted
by (cid:12)R(cid:12), is the sum of the size of each pair (γ, δR(γ)) in
R. Thus (cid:12)R(cid:12) = |X||R| +
γ∈R (cid:12)δR(γ)(cid:12), where |R| de-
notes the cardinality of R as a set, and (cid:12)δR(γ)(cid:12) is the size of
the formula associated with γ. It is easy to see that projec-
tion takes O((cid:12)R(cid:12)) time, and intersection and union take time
O((cid:12)R(cid:12) + (cid:12)S(cid:12)). In general, join and join with complement
take time O((cid:12)R(cid:12) · (cid:12)S(cid:12)). However, in our grounding algo-
rithm in the next section, whenever we perform an R 1 S or
R 1
c S operation, it is always the case that the set of vari-
ables of S is a subset of that of R, every formula in R is true,
and every formula in S is of size O((cid:2)), where (cid:2) is the size of
the formula to be grounded. So the relation part (the set of
tuples) of the resulting extended relation is a subset of that of
R. Thus both operations can be done in time O((cid:2)n), where n
is the size of the relation part of R.

(cid:4)

3 An Algorithm for Grounding FO Formulas

The guarded fragment GF of FO was introduced by Andr´eka
et al. [1998]. Here, any quantiﬁed subformula φ must be rel-
ativized by a guard, i.e., an atomic formula over all free vari-
ables of φ. Gottlob et al. [2001] extended GF to the k-guarded
fragment GFk where the conjunction of up to k atoms may act
as a guard, and proved that k-guarded sentences can be eval-
uated in time O((cid:2)2nk) where (cid:2) is the size of the formula, and
n is the size of the structure. The proof is by transforming

GFk-sentences into k-guarded Non-Recursive Stratiﬁed Dat-
alog (NRSD) programs.

k

k

A fragment related to GFk is the bounded variable frag-
ment of FO – FO
, which denotes FO formulas that use at
most k distinct variables. Kolaitis and Vardi [1998] showed
that conjunctive queries in FO
have the same expressive
power as conjunctive queries of treewidth at most k. Gottlob
et al. [2001] obtained a similar logical characterization for the
notion of hypertreewidth, a generalization of treewidth. They
noted that hypertreewidth is bounded above by treewidth and
showed that GFk has the same expressive power as FO sen-
tences of hypertreewidth at most k.
Deﬁnition 3.1 (GFk) The k-guarded fragment GFk of FO is
the smallest set of formulas s.t. (1) GFk contains atomic for-
mulas; (2) GFk is closed under Boolean operations; (3) GFk
contains ∃¯x(G1 ∧ . . . ∧ Gm ∧ φ), if the Gi are atomic formu-
las, m ≤ k, φ ∈ GFk, and the free variables of φ appear in
the Gi. Here G1 ∧ . . . ∧ Gm is called the guard of φ.

Note that this deﬁnition also includes universal quantiﬁca-
tion, since by (2), GFk is closed under negation. Also note
that the above mentioned complexity result O((cid:2)2nk) only ap-
plies to k-guarded sentences, not k-guarded formulas in gen-
eral. To see why, by the deﬁnition, ¬R(x, y, z) is a 1-guarded
formula, but it cannot be evaluated in O(n) time. However,
the same complexity result applies to strictly k-guarded for-
mulas, deﬁned as follows:

strictly k-guarded fragment
Deﬁnition 3.2 (SGFk) The
SGFk is the fragment of GFk with formulas of the form
∃¯x(G1 ∧ . . . ∧ Gm ∧ φ).
Here, we are including the degenerate cases where ¯x is empty
(no leading existential quantiﬁer), m = 0 (no free variables
and therefore no guards), or φ is true. Thus any k-guarded
sentence is strictly k-guarded (take ¯x as empty and m = 0).
Liu and Levesque [2003] presented a polytime algorithm
for evaluating strictly k-guarded formulas: Given a structure
A and a formula φ ∈ SGFk, the algorithm computes the an-
swer to φ wrt A, that is, {γ | A |= φ[γ]}, in time O((cid:2)nk).
A reason that they considered strictly k-guarded formulas in-
stead of just k-guarded sentences is that their algorithm is
recursively deﬁned. In this section, we adapt their algorithm
for grounding formulas in the following fragment:
Deﬁnition 3.3 (RGFk) RGFk denotes the set of strictly k-
guarded formulas such that no expansion predicate appears
in any guard.

Note that the restriction that “no expansion predicate ap-
pears in any guard” is necessary for polytime grounding. In-
deed, there is no polytime grounding algorithm for 1-guarded
sentences; otherwise, we would have a polytime reduction to
SAT from MX for 1-guarded sentences, and hence the com-
bined complexity of this problem would be in NP. However,
it is NEXP-complete since MX for FO can be reduced to MX
for 1-guarded sentences [Kolokolova et al., 2006], and the
combined complexity of MX for FO is NEXP-complete.

k
It is easy to see that any FO

formula can be rewritten in
linear time into an equivalent one in RGFk, by using atoms
of the form x = x as parts of the guards when necessary. For

IJCAI-07

163

example, the formula ∃x∃y[R(x) ∧ E(x, y)] can be rewritten
into ∃x∃y[R(x) ∧ y = y ∧ E(x, y)], where R is an instance
predicate, and E is an expansion predicate. Extending the re-
sult of [Kolaitis and Vardi, 1998], Flum et al. [2002] showed
that FO
has the same expressive power as FO formulas of
treewidth at most k. Thus any FO formula with treewidth at
most k can be put into an equivalent one in RGFk. In prac-
tice, most formulas have small treewidth and thus can be put
into RGFk with small k.

k

Our grounding algorithm uses extended relations and oper-
ations on them. If φ is an atomic formula R(¯t ), we use φ(A)
to denote the extended relation {(γ, true) | ¯t [γ] ∈ RA}.
Procedure Gnd(A, φ)
Input: A structure A and a formula φ ∈ RGFk
Output: An answer to φ wrt A
Suppose φ(¯x) = ∃¯y(G1 ∧ . . . ∧ Gm ∧ ψ).
Return
π¯xGnd(A, R, ψ(cid:2)), where R is G1(A) 1 . . . 1 Gm(A), and
ψ(cid:2)
is the result of pushing ¬’s in ψ inward so that they are in
front of atoms or existentials.
Procedure Gnd(A, R, φ) is deﬁned recursively by:

1. If φ is a positive literal of an instance predicate,

then Gnd(A, R, φ) = R 1 φ(A);

2. If φ is ¬φ(cid:2)

, where φ(cid:2)

is an atom of an instance predicate,

then Gnd(A, R, φ) = R 1

c φ(cid:2)(A);

3. If φ is a literal of an expansion predicate,

then Gnd(A, R, φ) = {(γ, φ[γ]) | γ ∈ R};

c Gnd(A, ∃¯yφ).

4. Gnd(A, R, (φ ∧ ψ)) = Gnd(A, R, φ) ∩ Gnd(A, R, ψ);
5. Gnd(A, R, (φ ∨ ψ)) = Gnd(A, R, φ) ∪ Gnd(A, R, ψ);
6. Gnd(A, R, ∃¯yφ) = R 1 Gnd(A, ∃¯yφ);
7. Gnd(A, R, ¬∃¯yφ) = R 1
Unfortunately, the running time of Gnd is not O((cid:2)nk) any-
more. The reason is that Gnd may generate intermediate ex-
tended relations whose size is not O(nk). To see why, let φ be
the 1-guarded formula ∃x[R(x) ∧ ∃y(S(y) ∧ E(y))], where
E is an expansion predicate, and let A be a structure such that
RA = {2i + 1 | 0 ≤ i ≤ m}, and SA = {2i | 0 ≤ i ≤ m}.
E(2i) is a reduced grounding of
Obviously, the formula
φ over A, and it has size O(n). However, when we use Gnd,
the intermediate extended relation corresponding to the sub-
formula R(x) ∧ ∃y(S(y) ∧ E(y)) has size O(n2), as shown
in the following table (on the left):

(cid:3)m
i=0

W
W
W

x
1
3
...

2m + 1

ψ

m

i=0 E(2i)
i=0 E(2i)

m

...

m

i=0 E(2i)

x
1
3
...

2m + 1

ψ
p
p
...
p

To solve this problem, we let IGnd be the algorithm which
is the same as Gnd except for the following: After each pro-
jection operation, we replace each formula in the resulting
extended relation by a new propositional symbol. We also
save the deﬁnitions of these new symbols. The output of the
algorithm is the ﬁnal extended relation together with the def-
initions of all the new symbols. For instance, in the above
example, we will introduce a new propositional symbol p

(cid:3)m
i=0

and save the deﬁnition p ≡
E(2i). Then the inter-
mediate extended relation corresponding to the subformula
R(x) ∧ ∃y(S(y) ∧ E(y)) will be as in the table on the right,
and it has size O(n).

To illustrate the algorithm, let φ be the formula

∃yzuv.R(x, y, z) ∧ S(z, u, v) ∧ ¬{T (x, u, v)∧

A = {(1, 2, 1), (1, 2, 2), (7, 0, 2), (7, 0, 3)},
A = {(2, 2, 5), (2, 3, 9), (4, 0, 2), (6, 7, 8)},

A = {(1, 2), (2, 2), (5, 2), (6, 2), (6, 3), (9, 6)},
A = {(1, 2), (1, 3), (5, 7), (7, 3), (8, 8)}.

∃f gh.A(x, y, f ) ∧ B(z, g, h) ∧ [¬C(f, z) ∨ D(x, g) ∧ E(y, h)]},
where T and E are expansion predicates, and let A be
R
S
AA = {(1, 2, 6), (7, 0, 2), (7, 0, 5)}, BA = {(2, 3, 4), (3, 7, 5)},
C
D
Then φ ∈ RGF2, where the underlined parts are guards. First,
we push negation symbols inward until they are in front of
atoms or existentials. The following ﬁgure represents the re-
sulting formula by a tree, where rectangular internal nodes
stand for guarded existentials, circular internal nodes for dis-
junctions or conjunctions, and leaves for literals.

yzuv. R(x,y,z)     S(z,u,v)
                            

         

T(x,u,v)

 fgh. A(x,y,f)     B(z,g,h)

C(f,z)

D(x,g)

E(y,h)

Now we process existentials from bottom to top. To process
the bottom existential, we ﬁrst evaluate the guard by a join
operation. Then we process leaves C, D and E wrt this guard
relation using rules 2, 1 and 3 of IGnd respectively. The result
of the guard relation joined with the complement of C is

x
7
7

y
0
0

f
2
5

z
3
3

g
7
7

h
5
5

ψ

true
true

Next, we perform an intersection for conjunction, a union for
disjunction, and a projection for existential, resulting in

x
1
7
7

y
2
0
0

z
2
2
3

ψ
p1
p2
p3

p1 ≡ E(2, 4)
p2 ≡ E(0, 4)
p3 ≡ true

Now that we have an answer to this bottom existential, we
process the top existential in a similar way for the ﬁnal answer

x
1
7

ψ
q1
q2

q1 ≡ (¬T (1, 2, 5) ∨ ¬p1) ∨ (¬T (1, 3, 9) ∨ ¬p1)
q2 ≡ (¬T (7, 2, 5) ∨ ¬p2) ∨ (¬T (7, 3, 9) ∨ ¬p2)

Theorem 3.4 Given a structure A and a formula φ ∈ RGFk,
IGnd returns an answer to φ wrt A in O((cid:2)2nk) time, where
(cid:2) is the size of φ, and n is the size of A. (Hence if φ is a
sentence, IGnd returns a reduced grounding of φ over A.)
Proof Sketch: Rewrite φ into an equivalent formula φ(cid:2)
by
pushing negations inwards. Correctness then follows by in-
duction on the formula according to the algebra for extended

IJCAI-07

164

relations. As to complexity, for each intermediate extended
relation, there are O(nk) tuples (each guard is composed of
at most k atoms), and each formula has size O((cid:2)), due to the
introduction of new propositional symbols. By the complex-
ity analysis from Section 2, each of the O((cid:2)) operations on
extended relations can be done in time O((cid:2)nk).

4 Grounding Inductive Deﬁnitions

While FO MX is often sufﬁcient, modelling often requires
recursion and recursion through negation. The solution is to
use FO(ID) logic, which is FO extended with inductive def-
initions [Denecker, 2000; Denecker and Ternovska, 2004].
Fortunately, adding inductive deﬁnitions does not violate the
main complexity-theoretic results [Mitchell and Ternovska,
2005; Kolokolova et al., 2006].

The syntax of FO(ID) is that of FO extended with a rule
saying that an inductive deﬁnition (ID) is a formula. An ID
Δ is a set of rules of the form ∀¯x(X(¯t) ← φ), where X is a
predicate symbol, ¯t is a tuple of terms, and φ is an arbitrary
FO formula. The connective ← is called the deﬁnitional im-
plication. In the rule ∀¯x(X(¯t) ← φ), X(¯t) is called the head
and φ the body. A deﬁned predicate of an FO(ID) formula
is a predicate symbol that occurs in the head of a rule in an
ID. The semantics of FO(ID) is that of FO extended with one
additional rule saying that a structure A satisﬁes an ID Δ if
it is the 2-valued well-founded model of Δ, as deﬁned in the
context of logic programming [van Gelder et al., 1993].

For example, the problem of ﬁnding the transitive closure
of a graph can be conveniently represented as an MX prob-
lem for FO(ID). The formula consists of a deﬁnition with two
rules, deﬁning the predicate T . The instance vocabulary has
a single predicate E, representing the binary edge relation.

j

ﬀ

∀x∀y[T (x, y) ← E(x, y)]

∀x∀y[T (x, y) ← ∃z(E(x, z) ∧ T (z, y))]

This states that the transitive closure of edge set E is the least
relation containing all edges and closed under reachability.

When it comes to MX for FO(ID), the expansion vocab-
ulary usually includes all the deﬁned predicates. All the
deﬁnitions from Section 2, namely deﬁnitions of MX, re-
duced grounding, extended relation, and answer, directly ap-
ply to FO(ID). Also, through grounding, the MX problem for
FO(ID) is reduced to the satisﬁability problem of PC(ID),
which stands for propositional calculus with inductive deﬁ-
nitions. Currently, two prototypes of such solvers have been
developed: one [Pelov and Ternovska, 2005] reduces satisﬁ-
ability of PC(ID) to SAT, and the other [Mari¨en et al., 2005]
is a direct implementation that incorporates SAT techniques.
While, both solvers deal with a restricted PC(ID) syntax, a
solver for the general syntax is under construction in our lab.
Nonetheless, some important problems are represented as
MX for FO(ID) where some deﬁned predicates are in the in-
stance vocabulary. The interpretation of these deﬁned pred-
icates is used to apply restrictions on the possible interpre-
tations of the expansion predicates. In such a case, we will
ﬁrst do grounding treating all deﬁned predicates as expansion
predicates. Let ψ be the resulting ground formula. Then we
add to ψ an extra constraint that encodes the interpretation
of the deﬁned predicates. Suppose G is the set of ground

atoms of interpreted deﬁned predicates that appear in ψ. Let
ϕ be the conjunction of literals of G that are true according
to the interpretation. Then ψ ∧ ϕ is the ﬁnal ground formula
to be passed to the satisﬁability solver. Thus we can restrict
our attention to grounding where all deﬁned predicates are
expansion predicates.

In this section, we extend the algorithm from Section 3 to

ground FO(ID) formulas in the following fragment:

Deﬁnition 4.1 (IGFk) IGFk is the extension of RGFk with
inductive deﬁnitions such that for each rule, the body is in
RGFk and all free variables of the body appear in the head.
As with RGFk, any FO(ID) formula with at most k distinct
variables can be rewritten in linear time into an equivalent
one in IGFk. Here we show how to rewrite each rule so that
it satisﬁes the restriction of the above deﬁnition. First, for
each x that appears in the head but not the body, add x = x
to the body. Now since the body still uses at most k distinct
variables, it can be rewritten into RGFk.

We ﬁrst present a procedure for grounding IDs:

Procedure GndID(A, Δ)
Input: A structure A and an ID Δ ∈ IGFk
Output: An answer to Δ wrt A
For each rule r of Δ, suppose r is ∀¯x(X(¯t) ← φ), let Δr be
{X(¯t)[γ] ← ψ | (γ, ψ) ∈ IGnd(A, φ)}. Return

(cid:5)

r∈Δ

j
To illustrate the procedure, let Δ be the ID

∀x∀y[T (x, y) ← E(x, y)]

∀x∀y[T (x, y) ← ∃z(C(y) ∧ E(x, z) ∧ T (z, y))]

Δr.
ﬀ

where T is an expansion predicate. Then Δ ∈ IGF2. Note
that for the purpose of illustration, we use C(y) instead of
y = y as a part of the second guard so that we can produce a
small grounding. Let A be E
A =
{(3)}. GndID(A, Δ) would proceed as follows:

A = {(1, 2), (2, 3)}, and C

1. Call IGnd(A, E(x, y)) to get R
2. Call IGnd(A, ∃z(C(y) ∧ E(x, z) ∧ T (z, y))) to get S

x
1
2

y
3
3

ψ

T (2, 3)
T (3, 3)

3. Replace rule 1 with {T (x, y)[γ] ← ψ | (γ, ψ) ∈ R}
4. Replace rule 2 with {T (x, y)[γ] ← ψ | (γ, ψ) ∈ S}

The resulting ground ID is

8><
>:

T (1, 2) ← true
T (2, 3) ← true
T (1, 3) ← T (2, 3)
T (2, 3) ← T (3, 3)

9>=
>;

We now extend the grounding algorithm IGnd from Sec-
tion 3 by adding the following clause. We call this enhanced
algorithm for grounding IGFk formulas IGnd

+

.

0. If φ is an ID Δ or its negation ¬Δ, then IGnd(A, R, φ) =
{(γ, p) | γ ∈ R} or {(γ, ¬p) | γ ∈ R}, where p is a new
propositional symbol with the deﬁnition p ≡ GndID(A, Δ).

The following is the main theorem of this paper:

Theorem 4.2 Given a structure A and a formula φ ∈ IGFk,
returns an answer to φ wrt A in O((cid:2)2nk) time, where
IGnd
(cid:2) is the size of φ and n is the size of A.

+

IJCAI-07

165

5 Related Work

Our grounding algorithm is inspired by the grounding part
of the model-checking algorithm of Datalog LITE [Gottlob
et al., 2002], which is essentially 1-guarded Datalog and ad-
mits model checking in time linear in both the size of the
structure and the size of the formula. However, our ground-
ing is aimed for the more general problem of model expan-
sion. Our algorithm also has similarity with the ground-
ing techniques of the ASP systems Smodels [Syrj¨anen and
Niemel¨a, 2001], Cmodels-2 [Lierler and Maratea, 2004],
and DLV [Leone et al., 2006], and the constraint program-
ming system NP-SPEC [Cadoli and Schaerf, 2001]. These
systems produce efﬁcient groundings in practice, however,
they use logic programming syntax, which is much more re-
strictive. The precise complexity of grounding for these sys-
tems has not been determined, while we give an apriori time
bound. Finally, Ramachandran and Amir [2005] proposed
polytime algorithms to propositionalise certain classes of FO
theories so that satisﬁability is maintained. Their goal is to
solve satisﬁability problem, not MX.

6 Conclusions

Classical logic is perhaps the most natural language for ax-
iomatizing and solving computational problems. It has a long
history, and sophisticated techniques have been developed.
Classical logic has intuitive and well-understood semantics,
convenient syntax, and it is widely used by both theoreti-
cians and practitioners. We therefore believe that tools based
on classical logic to the highest degree possible will have a
strong appeal. The MX framework of Mitchell and Ternovska
[2005] is a constraint programming framework based on clas-
sical logic extended with inductive deﬁnitions. This paper
represents an important progress in making this framework
practical by developing an efﬁcient grounding algorithm. The
algorithm performs well on k-guarded FO sentences with in-
ductive deﬁnitions under the restriction that all predicates in
the guards are initially speciﬁed; it runs in time O((cid:2)2nk),
where (cid:2) is the size of the formula, and n is the size of the
structure. To this end, we have proposed the concept of ex-
tended relations and deﬁned an algebra on them. The essence
of our work is to exploit the structure of FO formulas: In-
deed, k-guarded formulas have the same expressive power as
formulas with hypertreewidth at most k. A grounder based on
the data structure of extended relations has been implemented
in our group. It performs comparably on similar inputs to sys-
tems mentioned in related work.

References
[Andr´eka et al., 1998] H. Andr´eka, J. van Benthem, and
I. N´emeti. Modal languages and bounded fragments of
predicate logic. J. Phil. Logic, 49(3):217–274, 1998.

[Cadoli and Schaerf, 2001] M. Cadoli and A. Schaerf. Com-
piling problem speciﬁcations into SAT. In the European
Symp. On Programming (ESOP), pages 387–401, 2001.

[Denecker and Ternovska, 2004] M. Denecker and E. Ter-
novska. A logic of non-monotone inductive deﬁnitions
and its modularity properties. In LPNMR, pages 47–60,
2004.

[Denecker, 2000] M. Denecker. Extending classical logic
with inductive deﬁnitions. In Comput. Logic, pages 703–
717, 2000.

[Flum et al., 2002] J. Flum, M. Frick, and M. Grohe. Query
evaluation via tree-decompositions. J. ACM, 49(6):716–
752, 2002.

[Gelfond and Lifschitz, 1991] M. Gelfond and V. Lifschitz.
Classical negation in logic programs and disjunctive
databases. New Generation Computing, 9:365–385, 1991.

[Gottlob et al., 2001] G. Gottlob, N. Leone, and F. Scarcello.
Robbers, marshals, and guards: game theoretic and logical
characterizations of hypertree width. In Proc. of the 20th
ACM Symp. on Principles of Database Systems (PODS),
pages 195–206, 2001.

[Gottlob et al., 2002] G. Gottlob, E. Gr¨adel, and H. Veith.
Datalog LITE: a deductive query language with linear time
model checking. ACM Trans. Comput. Logic, 3(1):42–79,
2002.

[Kolaitis and Vardi, 1998] P. Kolaitis

and M. Vardi.
Conjunctive-query containment and constraint
satis-
faction. In Proc. of the 17th ACM Symp. on Principles of
Database Systems (PODS), pages 205–213, 1998.

[Kolokolova et al., 2006] A.

Y.

Liu,
D. Mitchell, and E. Ternovska.
Complexity of ex-
panding a ﬁnite structure and related tasks, 2006. The 8th
Int. Workshop on Logic and Comput. Complexity (LCC).

Kolokolova,

[Leone et al., 2006] N. Leone, G. Pfeifer, W.Faber, T. Eiter,
G. Gottlob, S. Perri, and F. Scarcello. The DLV system
for knowledge representation and reasoning. ACM Trans.
Comput. Logic, 7(3):499–562, 2006.

[Lierler and Maratea, 2004] Y. Lierler and M. Maratea.
Cmodels-2: SAT-based answer set solver enhanced to
non-tight programs. In LPNMR, pages 346–350, 2004.

[Liu and Levesque, 2003] Y. Liu and H. Levesque.

A
tractability result for reasoning with incomplete ﬁrst-order
knowledge bases. In IJCAI, pages 83–88, 2003.

[Mari¨en et al., 2005] M. Mari¨en, R. Mitra, M. Denecker, and
In

M. Bruynooghe. Satisﬁability checking for PC(ID).
LPAR, pages 565–579, 2005.

[Mitchell and Ternovska, 2005] D. Mitchell and E. Ter-
novska. A framework for representing and solving NP
search problems. In AAAI, pages 430–435, 2005.

[Pelov and Ternovska, 2005] N. Pelov and E. Ternovska. Re-
ducing inductive deﬁnitions to propositional satisﬁability.
In ICLP, pages 221–234, 2005.

[Ramachandran and Amir, 2005] D. Ramachandran

and
E. Amir. Compact propositional encodings of ﬁrst-order
theories. In AAAI, pages 340–345, 2005.

[Syrj¨anen and Niemel¨a, 2001] T. Syrj¨anen and I. Niemel¨a.

The smodels system. In LPNMR, pages 434–438, 2001.

[van Gelder et al., 1993] A. van Gelder, K. A. Ross, and
J. Schlipf. The well-founded semantics for general logic
programs. J. ACM, 38(3):620–650, 1993.

IJCAI-07

166

