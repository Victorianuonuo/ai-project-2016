Epistemic Reasoning in Logic Programs

Yan Zhang

Intelligent Systems Laboratory

School of Computing & Mathematics

University of Western Sydney

Penrith South DC NSW 1797, Australia

E-mail: yan@scm.uws.edu.au

Abstract

Although epistemic logic programming has an en-
hanced capacity to handle complex incomplete in-
formation reasoning and represent agents’ epis-
temic behaviours, it embeds a signiﬁcantly higher
computational complexity than non-disjunctive and
disjunctive answer set programming. In this paper,
we investigate some important properties of epis-
temic logic programs. In particular, we show that
Lee and Lifschitz’s result on loop formulas for dis-
junctive logic programs can be extended to a spe-
cial class of epistemic logic programs. We also
study the polysize model property for epistemic
logic programs. Based on these discoveries, we
identify two non-trivial classes of epistemic logic
programs whose consistency checking complexity
is reduced from PSPACE-complete to NP-complete
and ΣP
2 -complete respectively. We observe that
many important applications on epistemic repre-
sentation fall into these two classes of epistemic
logic programs.

1 Introduction

As a new logic programming paradigm developed by Gel-
fond, epistemic logic programming integrates epistemic no-
tions such as knowledge and belief into disjunctive answer
set semantics [Gelfond, 1994], which has an enhanced ca-
pacity to handle complex incomplete information reasoning
and represent agents’ epistemic behaviours. However, re-
cently Zhang has shown that epistemic logic programming
embeds a signiﬁcantly higher computational complexity than
non-disjunctive and disjunctive answer set programming (as-
suming that P (cid:2)= NP and the polynomial hierarchy does not
collapse) [Zhang, 2006]. Therefore, the question of whether
there are some useful classes of epistemic logic programs that
have a lower computational complexity becomes crucial to
apply epistemic logic programming to practical domains.

In this paper, we undertake a deep study on this topic. We
ﬁrst reﬁne some key notions of Gelfond’s epistemic seman-
tics and show its essential complexity properties. We then
show that Lee and Lifschitz’s result on loop formulas for dis-
junctive logic programs can be extended to a special class of
epistemic logic programs. We also study the polysize model

property for epistemic logic programs. Based on these dis-
coveries, we eventually identify two non-trivial classes of
epistemic logic programs whose consistency checking com-
plexity is reduced from PSPACE-complete to NP-complete
and ΣP
2 -complete respectively. We observe that many impor-
tant applications on epistemic representation fall into these
two classes of epistemic logic programs.

2 Gelfond’s Semantics for Epistemic

Reasoning

2.1 Language, Structure and Satisfaction
We consider a language LG
which is a propositional language
augmented with two modal operators K and M to represent
knowledge and belief respectively. Formulas of LG
are stan-
dard propositional formulas augmented with Kϕ and M ϕ
and are closed under ∧, ∨ and ¬. A G-structure V is a collec-
tion of sets of propositional literals called the set of possible
states of an agent. A situation in a G-structure V is a pair
(V, s), where s ∈ V. The satisfaction in LG
is deﬁned in
terms of the truth relation and falsity relation between a for-
mula and a situation. The truth of a formula ϕ in a situation
(V, s), denoted as (V, s) |= ϕ, and the falsity, denoted as
(V, s) =| ϕ, are deﬁned as follows.
(V, s) |= p iff p ∈ s where p is a propositional atom.
(V, s) |= Kϕ iff (V, si) |= ϕ for all si ∈ V.
(V, s) |= M ϕ iff (V, si) |= ϕ for some si ∈ V.
(V, s) |= ϕ ∧ ψ iff (V, s) |= ϕ and (V, s) |= ψ.
(V, s) |= ϕ ∨ ψ iff (V, s) |= ϕ or (V, s) |= ψ.
(V, s) |= ¬ϕ iff (V, s) =| ϕ.
(V, s) =| p iff ¬p ∈ s where p is an atom.
(V, s) =| Kϕ iff (V, s) |= Kϕ does not hold1.
(V, s) =| M ϕ iff (V, s) |= M ϕ does not hold.
(V, s) =| ϕ ∧ ψ iff (V, s) =| ϕ or (V, s) =| ψ.
(V, s) =| ϕ ∨ ψ iff (V, s) =| ϕ and (V, s) =| ψ.

It is clear that if a formula is of the form Kϕ, ¬Kϕ, M ϕ
or ¬M ϕ where ϕ does not contain operator K or M , that is,
ϕ is an objective formula, then its truth value in (V, s) will
not depend on s, and we call this formula subjective. In this
case, (V, s) |= Kϕ (or (V, s) |= M ϕ) can be simply written
as V |= Kϕ (or V |= M ϕ resp.) On the other hand, it is easy
to see that an objective formula’s truth value in (V, s) will

1In this case, we will denote (V, s) (cid:2)|= Kϕ.

IJCAI-07

647

only depend on s. Therefore, notion (V, s) |= ϕ may also
be simpliﬁed as s |= ϕ. A propositional literal is also called
an objective literal, and formulas KL, ¬KL, M L, ¬M L are
called subjective literals where L is a propositional literal.

It

is important to notice that

in Gelfond’s semantics,
(V, s) =| ϕ is not equivalent to (V, s) (cid:2)|= ϕ in general. This is
because by allowing s to be a set of propositional literals, an
atom is not assigned a truth value in s if neither of the atom
nor its negation is presented in s. Consequently, K and M
are not dual modal operators2 in LG
. For instance, consider
V = {{a, b}, {a, b, ¬c}}. Clearly we have V |= ¬K¬c. But
we do not have V |= M c.

A G-structure V is called consistent if for each s ∈ V, s
does not contain a propositional atom as well as its negation.
Otherwise, V is inconsistent and is denoted as V = {Lit}
where Lit denotes the inconsistent set of all propositional lit-
erals.

Given a G-structure V, we say a formula ϕ is satisﬁed in V
if there is some s ∈ V such that (V, s) |= ϕ. A formula ϕ is
satisﬁable if ϕ is satisﬁed in some consistent G-structure V.
A consistent G-structure V is called a model of ϕ if for every
s ∈ V, (V, s) |= ϕ, denoted as V |= ϕ. We may use M od(ϕ)
to denote the set of all models of ϕ.
Lemma 1 A formula ϕ of LG
is satisﬁable if and only if it is
satisﬁed in a consistent G-structure with at most |ϕ| states,
where |ϕ| denotes the length of formula ϕ.

Theorem 1 Deciding whether a formula is satisﬁable is NP-
complete.

such that V (cid:2) |= ϕ and V ⊂ V (cid:2)

Given a satisﬁable formula ϕ, very often the maximal
model of ϕ is of a special interest in our study, as will be
shown in section 3. Formally a G-structure V is a maximal
model of ϕ if V is a model of ϕ and there does not exist an-
other consistent V (cid:2)
. Con-
sider formula K(a ≡ ¬b), it has three models {{a, ¬b}},
{{¬a, b}} and {{a, ¬b}, {¬a, b}}, where only the last one is
a maximal model. On the other hand, formula ((a ∧ ¬b) ≡
¬M b) ∧ ((¬a ∧ b) ≡ ¬M a) has two models {{a, ¬b}} and
{{¬a, b}} and both are maximal models.
and let V be a G-
Proposition 1 Let ϕ be a formula of LG
structure. Deciding whether V is a maximal model of ϕ is
co-NP-complete.

2.2 World View Semantics for Epistemic Logic

Programs

We specify an epistemic logic program in language LG
a ﬁnite set of rules of the form:

to be

F1 ∨ · · · ∨ Fk ← G1, · · · , Gm,
not Gm+1, · · · , not Gn,

(1)

and constraints of the form:

← G1, · · · , Gm, not Gm+1, · · · , not Gn.

(2)
In (1) and (2), F1, · · · , Fk are objective literals, G1, · · · , Gm
are objective or subjective literals, and Gm+1, · · · , Gn are
objective literals. Sometimes, we also present a rule in the

2K and M are called dual if ¬K¬ϕ is equivalent to M ϕ.

form head ← body, where head = {F1, · · · , Fk} and
body = {G1, · · · , Gm, not Gm+1, · · · , not Gn}. Note that
if head = ∅, then the rule becomes a constraint; and if
body = ∅, i.e. head ←, it means that head should be true
without any condition.

For an epistemic logic program Π without constraints, its
semantics is given by its world view which is deﬁned in the
following steps:
Step 1. Let Π be an epistemic logic program not containing
modal operators K and M and negation as failure not. A
set s of propositional literals is called a belief set of Π iff
s is a minimal set of satisfying conditions: (i) for each rule
F ← G1, · · · , Gm from Π such that s |= G1 ∧ · · · ∧ Gm we
have s |= F (F is F1 ∨ · · · ∨ Fk); and (ii) if s contains a pair
of complementary literals then we write s = Lit.
Step 2. Let Π be an epistemic logic program not containing
modal operators K and M and s be a set of propositional
literals in the language of Π. By Πs we denote the result of
(i) removing from Π all the rules containing formulas of the
form not G such that s |= G and (ii) removing from the rules
in Π all other occurrences of formulas of the form not G. We
call s is a belief set of Π if it is a belief set of Πs.
Step 3. Finally, let Π be an arbitrary epistemic logic program
and V a collection of sets of propositional literals in its lan-
guage. By ΠV we denote the epistemic logic program ob-
tained from Π by (i) removing from Π all rules containing
formulas of the form G such that G is subjective and V (cid:2)|= G,
and (ii) removing from rules in Π all other occurrences of
subjective formulas.

Now we deﬁne that a collection V of sets of ground literals
is a world view of Π if V is the collection of all belief sets of
ΠV . Clearly, a world view of an epistemic logic program is
also a G-structure in language LG

.

It is easy to extend the world view deﬁnition above for epis-
temic logic programs Π with constraints: V is a world view of
Π if V is a world view of the program obtained by deleting all
constraints from Π, and for each constraint in Π of the form
(2), either V (cid:2)|= Gi for some 1 ≤ i ≤ m, or V |= Gj for some
(m + 1) ≤ j ≤ n. An epistemic logic program may have
one, more than one, or no world views.

Theorem 2 [Zhang, 2006] Deciding whether an epistemic
logic program has a world view is PSPACE-complete.

It is easy to see that extended/normal logic programs and
disjunctive logic programs are two special classes of epis-
temic logic programs whose world views always exist. Al-
though computing the world view (i.e.
the collection of all
stable models/answer sets) for these types of programs could
be difﬁcult (this will be addressed in section 7), in general,
we are more interested in discoverying non-trivial classes of
epistemic logic programs with a lower computational com-
plexity.

3 Completion for Epistemic Logic Programs

without Positive Knowledge

Let us consider a simple epistemic logic program Π = {a ←
¬M b}. This program has one world view {{a}}. However,

IJCAI-07

648

under the previous G-structure semantics, Π’s equivalent for-
mula ¬b∧(a ≡ ¬M b)3 has a unique model {{a, ¬b}}, which
is obviously different from Π’s world view. This inconsis-
tency can be avoided if we slightly revise the deﬁnitions of
G-structure and the associated satisfaction in LG

.

To begin with, we ﬁrst need to remove negative proposi-
tional atoms from epistemic logic programs. An epistemic
logic program Π is said in canonical form if no negative
propositional atom occurs in Π. Note that this does not ex-
clude occurrences of negative subjective formulas in Π. For
instance, program {a∨b ← ¬M c} is to be in canonical form,
while program {a ∨ b ← ¬M ¬c} is not. For an arbitrary pro-
gram Π, we can always transform it into the canonical form
by introducing new propositional atoms in the language. In
, we introduce a new atom a(cid:2)
particular, for each atom a in LG
to represent literal ¬a. Therefore, by replacing each negative
atom ¬a occurring in Π with the corresponding new atom a(cid:2)
,
the resulting program, denoted as Πc
, is in canonical form. If
V is a G-structure in language LG
is obtained by replac-
ing each negative atom occurring in V with the corresponding
new atom.
Proposition 2 Let Π be an epistemic logic program and Πc
be Π’s canonical form. A consistent G-structure V is a world
view of Π if and only if V c

is a world view of Πc

, V c

.

Due to Proposition 2, in the rest of this paper, we can as-
sume that all epistemic logic programs are in canonical form
in our context. Now we re-deﬁne a G-structure to be a collec-
tion of sets of propositional atoms. Consequently, we revise
as follows: (V, s) =| ¬p iff p (cid:2)∈ s
the falsity relation in LG
(p is a propositional atom), while the truth relation and falsity
relation for all other formulas remain the same. We should
mention that this change will imply that K and M become
dual modal operators in LG
(recall that in section 2.1, we
showed that K and M are not dual operators). Despite this
difference, this new satisfaction will not affect the world view
deﬁnition for epistemic logic programs.

Given an epistemic logic program Π, we use Atom(Π) to
denote the set of all atoms occurring in Π. Now we deﬁne
a class of epistemic logic programs without positive knowl-
edge, denoted as ELP −K
. That is, for each Π ∈ ELP −K
,
no knowledge operator K positively occurs in the body of
each rule. It is easy to obverse that many typical epistemic
logic programs in applications are actually ELP −K
programs
[Gelfond, 1994].
Deﬁnition 1 Let Π be an ELP −K
program. The completion
of Π, denoted as Comp(Π), consists of the following formu-
las: (1) if head ← body is a rule in Π, then the following
formula is in Comp(Π)4:

body ⊃ head;

(3)
(2) for each a ∈ Atom(Π), the following formula is in
Comp(Π):

(cid:2)

(cid:3)

a ⊃

(body ∧

¬p);

(4)

head←body∈Π,a∈head

p∈head\{a}

3Later we will see that this formula is the completion of Π.
4When we view body as a formula in language LG, the negation

as failure not in body is interpreted as the classical negation ¬.

and (3) for each a ∈ Atom(Π), if there is no rule head ←
body in Π such that a ∈ head, then ¬a is in Comp(Π).
Example 1 Let Π consist of the following rules:

a ∨ b ← ¬M c,
d ← ¬Ka.

Clearly, Π is an ELP −K
Comp(Π) consists of the following formulas:

program. From Deﬁnition 1,

¬M c ⊃ (a ∨ b),
a ⊃ (¬b ∧ ¬M c),
b ⊃ (¬a ∧ ¬M c),
d ≡ ¬Ka,
¬c.

is easy to check that Π has a unique world view
It
{{a, d}, {b, d}}, which is also the unique model of
Comp(Π). (cid:2)

In general, Deﬁnition 1 cannot be extended to arbitrary
epistemic logic programs. Consider the following program
Π(cid:2)

:

a ∨ b ← ¬M c,
d ← Ka.

If we apply Deﬁnition 1 to Π(cid:2)
, its completion is the same
as in Example 1 except formula d ≡ ¬Ka is replaced by
d ≡ Ka. We can see that Π(cid:2)
has one world view {{a}, {b}},
where Comp(Π(cid:2)) has two maximal models {{a}, {b}} and
{{a, d}}. Since Π(cid:2)
does not contain any loop (see next sec-
tion), Deﬁnition 1 actually does not provide a precise comple-
tion characterization for arbitrary epistemic logic programs.

The following proposition establishes an important con-

nection between an ELP −K
Proposition 3 Let Π be an ELP −K
view of Π, then it is also a maximal model of Comp(Π).

program and its completion.

program. If V is a world

4 Loop Formulas for ELP −K Programs
Now we show that Lee and Lifschitz’s loop formula result for
disjunctive logic programs [Lee and Lifschitz, 2003] can also
be extended to ELP −K

programs.

Given an epistemic logic program Π, the positive depen-
dency graph of Π, denoted as G+
Π, is the directed graph
constructed in the following way:
the set of vertices is
Atom(Π) ∪ KM (Π), where KM (Π) is the set of all sub-
jective atoms occurring in Π, and for each pair of vertices
x, y ∈ Atom(Π) ∪ KM (Π): (1) there is an edge from x to y
if there is a rule head ← body in Π, such that x ∈ head,
and y positively occurs in body; (2) for each path in the
graph formed from (1), if both a and Ka (or M a) occur in
the path, then for any x(cid:2), y(cid:2) ∈ Atom(Π) ∪ KM (Π) such
that (x(cid:2), a) and (a, y(cid:2)) are edges, add edges (x(cid:2), Ka) and
(Ka, y(cid:2)) ((x(cid:2), M a) and (M a, y(cid:2)) resp.)
respectively; (3)
based the graph formed from (1) and (2), if there is no such
cycle containing vertex a but not Ka (M a resp.), then re-
move vertex a and all its associated edges. We may use
P os(body) to denote the set of all (objective and subjective)
atoms positively occurring in body. We call a nonempty set
L ⊆ Atom(Π) ∪ KM (Π) a loop of Π if for any x and y in
L, there is a path in G+

Π from x to y with length > 0.

IJCAI-07

649

Deﬁnition 2 Let Π be an epistemic logic program and L a
loop of Π. R(L) is denoted as the set of following formulas:

body ∧

¬p,

p∈head\L

(cid:3)

(cid:2)

for each rule head ← body in Π such that head ∩ L (cid:2)= ∅
and P os(body) ∩ L = ∅. Then the loop formula LF (L)
associated with L in Π is speciﬁed as

(cid:2)
(

L) ⊃ (

R(L)).

(5)

We use LF (Π) to denote the set of all loop formulas in Π.

It is easy to see that (5) is equivalent to Lee and Lifschitz’s
disjunctive loop formula [Lee and Lifschitz, 2003] and Lin
and Zhao’s loop formula [Lin and Zhao, 2004] if Π is re-
stricted to a disjunctive logic program and a normal logic pro-
gram respectively.
Example 2 Consider an epistemic logic program Π:

a ∨ b ← M c,
c ← a,
d ← ¬Ka.

Π has one loop L = {a, M c}. Then we have R(L) = ∅, and
LF (L) = {¬(a ∨ M c)}. On the other hand, since Π is an
ELP −K
, Π’s completion Comp(Π) consists of the following
formulas:

M c ⊃ a ∨ b,
a ⊃ ((¬b ∧ M c) ∨ c),
b ⊃ (¬a ∧ M c),
c ⊃ a,
d ≡ ¬Ka.

We can see that Comp(Π) has two (maximal) models
{{a, c}} and {{d}}, where Comp(Π)∪LF (L) has one (max-
imal) model {{d}}, which is also the unique world view of
Π. (cid:2)
Theorem 3 Let Π be an ELP −K
program, C omp(Π) the
completion of Π, and LF (Π) the set of loop formulas of Π. A
G-structure is a world view of Π if and only if it is a maximal
model of C omp(Π) ∪ LF (Π).

4.1 Proof of Theorem 3
In order to prove Theorem 3, we need to ﬁrst show some im-
portant properties of formulas and epistemic logic programs
in language LG
. We ﬁrst introduce the notion of epistemic
reduction for formulas.

Let V be a G-structure and ϕ a formula of LG
. A formula
ϕV
is called the epistemic reduction of ϕ with respect to V
if ϕV
is obtained from ϕ in the following way: (1) for each
ϕ’s subformula of the form Kφ (here φ is objective), Kφ
is replaced by φ if V |= Kφ, otherwise Kφ is replaced by
F; and (2) for each ϕ’s subformula of the form M φ, M φ is
replaced by T if V |= M φ, otherwise M φ is replaced by F.

Consider formula ϕ = Ka ∨ M b. Suppose a and b are
the only propositional atoms in the language. Then V =
{∅, {a}, {b}, {a, b}} is a maximal model of ϕ. Furthermore,
we can see that ϕV = T, where V is exactly the set of all
models of ϕV

.

Proposition 4 Let ϕ be a formula of LG
and let V be a G-
structure. Then V is a maximal model of ϕ if and only if
M od(ϕV ) = {s | s ∈ V}.

Now with a slight change, we may extend the notion of
epistemic reduction to epistemic logic programs. Let Π be an
epistemic logic programs and V be a G-structure in language
LG
. A disjunctive logic program (without containing any K
and M operators) eReduct(Π, V) is called the epistemic re-
duction of Π under V if it is obtained from Π in the following
way: (1) removing all rules from Π where G is a subjective
literal occurring in the rules and V (cid:2)|= G, and (2) removing all
other occurrences of subjective literals in the remaining rules
(i.e. replacing those G with T due to V |= G). Then we have
the following results.
Proposition 5 Let Π be an epistemic logic program and V
. V is a world view of Π if and only if
a G-structure of LG
V is the collection of all stable models of disjunctive logic
program eReduct(Π, V).

The following two lemmas establish an important connec-
program and its completion and

program and V a
Then (Comp(Π) ∪ LF (Π))V ≡

tion between an ELP −K
loop formulas.
Lemma 2 Let Π be an ELP −K
world view of Π.
Comp(eReduct(Π, V)) ∪ LF (eReduct(Π, V)).
Lemma 3 Let Π be an ELP −K
program and V
a maximal model of Comp(Π) ∪ LF (Π).
Then
(Comp(Π) ∪ LF (Π))V ≡ Comp(eReduct(Π, V)) ∪
LF (eReduct(Π, V)).
Proof of Theorem 3: Consider an ELP −K
program Π and
Comp(Π) ∪ LF (Π). We show that V is a world view of Π iff
V is a maximal model of Comp(Π) ∪ LF (Π).
(⇒) Suppose V is
a world view of Π.
Then
from Proposition 5, we know that V is
the col-
lection of all
stable models of disjunctive program
eReduct(Π, V). On the other hand, from Lemma 2, we
have (Comp(Π) ∪ LF (Π))V ≡ Comp(eReduct(Π, V)) ∪
LF (eReduct(Π, V)). On the other hand, from Theorem
1 in [Lee and Lifschitz, 2003], we know that each stable
model of program eReduct(Π, V) is also a model of for-
mula Comp(eReduct(Π, V)) ∪ LF (eReduct(Π, V)). So
we conclude V = M od((Comp(Π) ∪ LF (Π))V ). Finally,
from Proposition 4, it follows that V is a maximal model of
Comp(Π) ∪ LF (Π).

(⇐) Suppose V is a maximal model of Comp(Π) ∪
LF (Π). From Lemma 3, we know (Comp(Π)∪LF (Π))V ≡
Comp(eReduct(Π, V)) ∪ LF (eReduct(Π, V)). According
to Proposition 4, on the other hand, V = M od((Comp(Π) ∪
LF (Π))V ).
Then from Theorem 1 in [Lee and Lif-
schitz, 2003], each model of Comp(eReduct(Π, V)) ∪
LF (eReduct(Π, V)) is also a stable model of disjunctive
logic program eReduct(Π, V). Finally, from Proposition 5, it
follows that V is a world view of Π. This completes our proof
of Theorem 3. (cid:2)

5 Polynomial Bound on Loop Formulas
Since there may be an exponential number of loops in an epis-
temic logic program, the way of transforming an ELP −K

IJCAI-07

650

program into Comp(Π) ∪ LF (Π) and then computing its G-
structures will not have particular computation advantages.
However, we will show that for ELP −K
programs with poly-
nomially bounded numbers of loop formulas, the consistency
check problem will be signiﬁcantly reduced from PSPACE-
complete to NP-complete. Formally, given an epistemic logic
program Π, we say that Π has a polynomial bound on its
loop formulas if the number of cycles in G+
Π is bounded by
O(f (|G+
Π

|) is a polynomial of |G+

|)) where f (|G+

|.

Π

Π

Theorem 4 Let Π be an ELP −K
program that has a poly-
nomial bound on its loop formulas. Deciding whether Π has
a world view is NP-complete.

Proof: Here we only give membership proof. From Theorem
3, Π has a world view iff Comp(Π) ∪ LF (Π) has a maximal
model. Clearly, if the number of cycles in G+
Π is bounded by
O(f (|G+
|)), then the size of formula Comp(Π) ∪ LF (Π)
Π
|)). So we can guess such
is also bounded by O(f (|G+
LF (Π) in polynomial time with a nondeterministic Turing
machine. From Theorem 1, we know that checking whether
Comp(Π) ∪ LF (Π) has a model is in NP. Also it is easy to
see that Comp(Π) ∪ LF (Π) has a model iff it has a maximal
model. (cid:2)

Π

In the following, we provide a polynomial upper bound
on the number of loop formulas for an epistemic logic
program. Given an epistemic logic program Π and a ∈
head(Π), an inference chain of a is a sequence of atoms
(a, b1, · · · , bl−1, bl), where a, b1, · · · , bl are different atoms
in Atom(Π), and there are l different rules r1, · · · , rl in
Π such that a ∈ head(r1), b1 ∈ P os(body(r1)), b1 ∈
head(r2), b2 ∈ P os(body(r2)), · · ·, bl−1 ∈ head(rl) and
bl ∈ P os(body(rl)). For each a ∈ head(Π), it may have
one or more inference chains. The inference depth of a, de-
noted as i-depth(a), is the length of a’s longest inference
chain. The inference depth of Π is deﬁned as i-depth(Π) =
max(i-depth(a) : a ∈ head(Π)).
Proposition 6 Let Π be an epistemic logic program.
If
i-depth(Π) < k for some ﬁxed k, then |LF (Π)| is bounded
by O((2k/k!) · nk), where |Atom(Π)| = n.

Proposition 7 Let Π be an epistemic logic program. For a
ﬁxed k, deciding whether i-depth(Π) < k is solvable in time
O(k · nk+1) where |Atom(Π)| = n.

6 Polysize Model Property

Some special modal logics such as single agent S5 and KD45
[Blackburn et al., 2001] have polysize model property which
brings the consistency check (satisﬁability problem) in these
logics down to NP-complete. We have shown that Gelfond’s
epistemic semantics also has this property (i.e. Lemma 1).
However, epistemic logic programs under the world view se-
mantics do not satisfy the polysize model property in general.
For instance, the following program

xi ∨ x(cid:2)
i ←,
yi ← ¬M y(cid:2)
i,
y(cid:2)
i ← ¬M yi, where i = 1, · · · , n,

has an exponential number of world views and each world
view contains an exponential number of belief sets. Nev-
ertheless, it is easy to observe that many speciﬁc epistemic
logic programs indeed satisfy the polysize model property.
Consequently, we can further identify an important class of
epistemic logic programs whose consistency check is ΣP
2 -
complete.
Deﬁnition 3 An epistemic logic program Π is said to satisfy
the polysize model property if either Π has no world view,
or for each Π’s world view V, |V| is bounded by O(f (|Π|)),
where f (|Π|) is a polynomial of |Π|.
Theorem 5 Let Π be an epistemic logic program satisfying
the polysize model property. Deciding whether Π has a world
view is ΣP
Proof: Since for each world view V of Π, |V| is bounded
by O(f (|Π|)), we can guess, in polynomial time, a k with k
being bounded by O(f (|Π|)) and a collection V consisting
of k different sets of atoms. Then we check whether V is a
world view of Π in the following way: (1) transform Π into a
disjunctive logic program ΠV by performing Step 3 in section
2.2, and (2) for each s ∈ V, check whether s is a stable model
of ΠV . Clearly, (1) can be done in polynomial time, and (2)
is solvable with k queries to an NP oracle.

2 -complete.

Hardness proof. The hardness is proved by a reduc-
tion of the validity of QBF A = ∃x1 · · · ∃xn∀y1 · · · ∀ymA(cid:2)
(n, m ≥ 1), where A(cid:2) = D1 ∨ · · · ∨ Dh and each Dk =
lk,1 ∧ lk,2 ∧ lk,3 is a conjunction of propositional literals
li,j over {x1, · · · , xn, y1, · · · , ym}. We know that deciding
whether A is valid is ΣP
2 -complete [Papadimitriou, 1995].
We construct in polynomial time an epistemic logic program
Π from A and show that Π has a world view and each of
its world views contains exactly one belief set if and only
if A is valid. In particular, Π is constructed on propositional
1, · · · , x(cid:2)
atoms {x1, · · · , xn, y1, · · · , ym}∪{x(cid:2)
m}∪
{valid, invalid}, where x(cid:2)
and y(cid:2)
are used to imitate the
negations of x and y respectively. Π consists of the following
rules:

1, · · · , y(cid:2)

n, y(cid:2)

j ←,

xi ← ¬M x(cid:2)
i,
x(cid:2)
i ← ¬M xi, for i = 1, · · · , n,
yj ∨ y(cid:2)
yj ← Kvalid,
y(cid:2)
j ← Kvalid, for j = 1, · · · , m,
valid ← ρ(lk,1), ρ(lk,2), ρ(lk,3),

for k = 1, · · · , h,

invalid ← ¬M invalid, not valid,
where ρ(l) = a if l = a and ρ(l) = a(cid:2)
if l = ¬a for any
a ∈ {x1, · · · , xn, y1, · · · , ym}. It is easy to see that if Π has
a world view V, then V must only contain one belief set.
Then we can show that Π has a world view if and only if A
is valid. (cid:2)

Now we investigate under what conditions, an epistemic
logic program will satisfy the polysize model property. We
ﬁrst deﬁne the dependency graph for an epistemic logic pro-
gram. The dependency graph GΠ of Π is a directed graph
where the set of vertices is Atom(Π); and for vertices a
and b, there is an edge (a, b) from a to b if there is a rule

IJCAI-07

651

head ← body in Π such that a ∈ head and b ∈ body or
a, b ∈ head (a (cid:2)= b). The edge (a, b) is labeled with + if
b positively occurs in body; (a, b) is labeled with − if not b
occurs in body or b occurs in head (assuming a (cid:2)= b); and
(a, b) is labeled with −K or −M if ¬Kb or ¬M b occurs in
body respectively. A cycle in GΠ is called negative cycle if
the cycle has at least one edge labeled with − while all other
edges in the cycle (if there are some) are labeled with +. A
cycle is called a mixed negative cycle if the cycle has at least
one edge labeled with −K or −M .
Proposition 8 Let Π be an epistemic logic program, GΠ its
dependency graph and k a ﬁxed number. Then the following
results hold:

1. If GΠ has k negative even cycles5 and Π has a world
belief

view, then Π’s each world view contains at most 2k
sets;

2. If GΠ has k mixed negative even cycles, then Π has at

most 2k

world views;

3. If GΠ has k negative even cycles but has no mixed neg-
ative even cycle, then either Π has no world view or has
a unique world view containing at most 2k

belief sets.

Corollary 1 For any epistemic logic program Π where its de-
pendency graph GΠ has a ﬁxed number of negative even cy-
cles, deciding whether Π has a world view is ΣP
2 -complete.

7 Concluding Remarks

As argued by Gelfond, epistemic logic programming has
a rich expressive power for epistemic representation which
other modal nonmonotonic logics do not have. Nevertheless,
as shown in [Zhang, 2006], the enhanced expressive power is
due to a higher computational cost than other nonmonotonic
logics and logic programming paradigms. Although this is
the case in general, as we will observe next, many impor-
tant applications of epistemic representation actually fall into
the two classes of epistemic logic programs that we identiﬁed
earlier.

One important application of epistemic logic program-
ming is to represent the epistemic closed world assumption
(ECWA) which involves a strong introspection. It was noted
that other logic programs and modal nonmonotonic logics
such as autoepistemic logic [Marek and Truszczynski, 1991]
usually have difﬁculties to handle it. As demonstrated in
[Gelfond, 1994], representing ECWA is important when dis-
junctive information is presented in the agent’s knowledge
base. In epistemic logic programs, ECWA can be simply rep-
resented by rules like

a(cid:2) ← ¬M a,

for all atoms in the language6. We observe that adding such
ECWA rules into an epistemic logic program neither intro-
duces any new loop formulas nor increases the size of world
views of the program, although they may generate more
world views. Therefore, in principle ECWA rules do not add

5A cycle contains an even number of edges labeled with −.
6Here a(cid:2) is used to represent the negation of atom a.

an extra burden on the world view computation for an epis-
temic logic program.

Π∗

Now let us examine the following normal logic program
given in [Lifschitz and Razborov, 2006]:
pij ← not qij ,
qij ← not pij,
r1 ←,
rj ← ri, pij, i, j = 1, · · · , n.

If we view Π∗
as an epistemic logic program, then this pro-
gram does not belong to either of the two classes we identiﬁed
earlier. Computing Π∗
’s world view would be hard because
Π∗
has 2n
loop formulas and the unique world view also con-
tains 2n2
belief sets.

Program Π∗

deﬁnes the reachability in arbitrary directed
graphs. Finding a reachable path from r1 to ri is to compute
one answer set containing ri. When we review Π∗
as an epis-
temic logic program, we have to compute the world view that
is the collection of all answer sets of Π∗
. This actually can be
avoided if we rewrite Π∗

as follows:

to Π†

pij ← ¬M qij ,
qij ← ¬M pij,
r1 ←,
rj ← ri, pij, i, j = 1, · · · , n.

Program Π†
has an exponential number of world views but
each one only contains one belief set of size 2n. Then under
program Π†
, to ﬁnd a reachable path from r1 to ri, we only
need to compute one world view of Π†
where its belief set
contains ri. In this way, the computation is the same as that
of program Π∗

under the answer set semantics.

References
[Blackburn et al., 2001] P. Blackburn, M. de Rijke, and
Y. Venema. Modal Logic. Cambridge University Press,
2001.

[Gelfond, 1994] M. Gelfond. Logic programming and rea-
soning with incomplete information. Annals of Mathemat-
ics and Artiﬁcial Intelligence, 12:98–116, 1994.

[Lee and Lifschitz, 2003] J. Lee and V. Lifschitz. Loop for-
mulas for disjunctive logic programs. In Proceedings of
ICLP-2003, pages 451–465, 2003.

[Lifschitz and Razborov, 2006] V.

and
A. Razborov. Why are there so many loop formulas?
ACM Transaction on Computational Logic, 7:261–268,
2006.

Lifschitz

[Lin and Zhao, 2004] F. Lin and Y. Zhao. Assat: computing
answer sets of a logic program by sat solvers. Artiﬁcial
Intelligence, 157:115–137, 2004.
[Marek and Truszczynski, 1991] W.

Marek

and
Journal of

M. Truszczynski. Autoepistemic logic.
ACM, 38:588–619, 1991.

[Papadimitriou, 1995] C.H. Papadimitriou. Computational

Complexity. Addison Wesley, 1995.

[Zhang, 2006] Y. Zhang. Computational properties of epis-
temic logic programs. In Proceedings of KR-2006, pages
308–317, 2006.

IJCAI-07

652

