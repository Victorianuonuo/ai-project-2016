Minimal Change and Maximal Coherence for Epistemic Logic Program Updates 

Yan Zhang 

School of Computing & IT 
University of Western Sydney 

Penrith South DC, NSW 1797, Australia 

E-mail: yan@cit.uws.edu.au 

Abstract 

We  consider  the  problem  of updating nonmono(cid:173)
tonic  knowledge  bases  represented  by  epistemic 
logic programs where disjunctive information and 
notions of knowledge and  beliefs can  be  explic(cid:173)
itly expressed. We propose a formulation for epis(cid:173)
temic  logic program  updates  based  on  a  princi(cid:173)
ple called minimal change and maximal coherence. 
The central feature of our approach is that during 
an update procedure, contradictory information is 
removed on a basis of minimal change under the 
semantics of epistemic logic programs and then co(cid:173)
herent information is maximally retained in the up(cid:173)
date result.  By using our approach, we can char(cid:173)
acterize an update result in both semantic and syn(cid:173)
tactic forms.  We show that our approach handles 
update sequences and satisfies the consistency re(cid:173)
quirement. We also investigate important semantic 
properties of our update approach such as reduc(cid:173)
tion, persistence and preservation. 

Introduction 

1 
Logic programming has been proved to be one of the most 
promising  logic  based  formulations  for  problem  solving, 
knowledge representation and reasoning, and reasoning about 
actions and plans. Recent research on logic program updates 
further shows that logic programming also provides a feasi(cid:173)
ble framework for modeling agents' activities in dynamic en(cid:173)
vironments [Alferes and et al, 2000; Eiter and et al, 2002; 
Sakama and Inoue, 1999; Zhang and Foo, 1998]. 

While all current approaches for logic program updates fo(cid:173)
cus on the problem of updating extended logic programs or 
their variations, updating epistemic logic programs, however, 
has yet to be explored in the research. By combining knowl(cid:173)
edge and  belief operators  into logic rules,  epistemic logic 
programming [Gelfond,  1994] is a powerful representation 
formalism in logic programming paradigm.  It can deal with 
more difficult problems in reasoning with disjunctive infor(cid:173)
mation while traditional disjunctive extended logic programs 
fail to handle.  Furthermore, epistemic logic programs seem 
more feasible for knowledge reasoning than many other au-
toepistemic logics [Gelfond,  1994] and has been used as a 
formal basis for modeling knowledge in action theories, e.g. 

[Lobo et al,  2001].  When we use an epistemic logic pro(cid:173)
gram to represent an agent's knowledge base, it is a nontrivial 
question how the agent's knowledge base (an epistemic logic 
program) can be updated when new information is received. 
In this paper, we propose an approach for epistemic logic 
program updates.  Contrary to other logic programs, notions 
of knowledge and beliefs in epistemic logic programs have 
strong semantic connections to the standard Kripke structures 
of modal logics. On the other hand, epistemic logic programs 
are also sensitive with various syntactic forms. Hence, we be(cid:173)
lieve that a pure model-based or syntax-based approach will 
not be appropriate to handle epistemic logic program updates. 
Instead, we require our update formulation to meet three ma(cid:173)
jor criteria:  (1) an update should be performed on a basis 
of minimal change semantics to remove contradictory infor(cid:173)
mation; (2) based on the minimal change semantics, the up(cid:173)
date result should have a clear syntactic representation and 
contain maximal consistent information from previous pro-
grants); and (3) the underlying update procedure should be 
consistent, that is, updating a consistent program by another 
consistent program (or a  sequence  of consistent programs) 
should generate a consistent result. Our main idea to accom(cid:173)
plish these criteria is so called minimal change and maximal 
coherence which presents both semantic and syntactic fea(cid:173)
tures in an update procedure. 

The paper is organized as follows.  Section 2 presents a 
brief overview on epistemic logic programs.  Section 3 de(cid:173)
velops  a  formulation for epistemic  logic  program updates, 
while section 4 extends this formulation to handle update se(cid:173)
quences. Section 5 investigates important semantic properties 
for our update approach. Finally, section 6 concludes the pa(cid:173)
per with discussions on related work and future research. 
2  Epistemic Logic Programs: An Overview 
In this section, we present a general overview on epistemic 
logic programs.  Gelfond extended the syntax and semantics 
of disjunctive logic programs to allow the correct representa(cid:173)
tion of incomplete information (knowledge) in the presence 
of multiple extensions.  Consider the  following disjunctive 
program about the policy of offering  scholarships in  some 
university [Gelfond, 1994]: 

V: 

r1:  eligible(x)  <-  highGPA(x), 
r2:  eligible(x)  <-  minority(x)ifairGPA(x), 

112 

BELIEF REVISION AND UPDATE 

Rule  r4  can  be  viewed  as  a formalization  of the statement: 
"the  sutdents  whose  eligibility  is  not  decided  by  rules  r1, 
r2  and  r3  should  be  interviewed  by  the  committee". 
It  is 
easy  to  see  that  V  has  two  answer  sets  {highGPA(mike), 
eligible (mike)} 
interview(mike)}. 
Therefore  the answer to query  interview (mike)  is  unknown, 
which  seems  too  weak  from  our  intuition.  Epistemic  logic 
programs will overcome  this kind of difficulties in reasoning 
with incomplete information. 

{fair GPA(mike), 

and 

Now we define that a collection A of sets of ground literals 
is a  world view of V  if A  is the collection of all  belief sets of 
PA*  Consider program V  about the eligibility of scholarship 
discussed  earlier,  if  we  replace  rule  r4  with  the  following 
rule: 

3  Formalizing Epistemic Logic Program 

Updates 

From this section, we start to develop a formulation for epis(cid:173)
temic logic program updates.  Consider the update of an epis(cid:173)
temic  logic program V\  by  another epistemic  logic program 
P2-  Our approach  consists of two stages:  firstly,  we update 
each world view of "P1 by  P2  - this will remove contradictory 
information between P1 and P2 and ensure a minimal change 
for the underlying update semantics;  and secondly,  from the 
first stage result, we will derive a resulting program which re(cid:173)
tains the maximal  consistent information represented by V\. 

Step 1.  Let V  be an epistemic logic program not containing 
modal  operators  K  and  M  and  negation  as  failure  not.  A 
set  W  of ground  literals  is  called  a  belief set  of V  iff  W 

BELIEF REVISION AND UPDATE 

113 

A collection of belief sets  is  consistent if each  of its belief 
sets is consistent.  An epistemic logic program is consistent if 
it has a world view and all of its world views are consistent. 
To simplify our presentation, in the rest of this paper, we will 
simply  call  an  epistemic  logic  program program.  By  V ( P) 
we denote the set of all  collections of belief sets  in which V 
is satisfied.  We also denote the set of all world views of V as 

3.2  M i n i m al  Change  on  W o r ld  View  Updates 

3.3  M a x i m al  Coherence  and  Resulting Programs 
As  discussed  earlier,  during  the  second  stage  of an  update 
procedure,  we  need  to  derive  a  resulting  program  which 
should  contain  the  maximal  consistent  information  repre(cid:173)
sented  by  the  initial  program  in  syntactic  forms.  This  is 
achieved  by  introducing  the  concept  of  coherence. 
Let 

Now the resulting program can be specified by the follow(cid:173)

ing definition. 

114 

BELIEF REVISION AND UPDATE 

4  Handling Update Sequences 

where  the following  conditions  hold: 

decreasing  priorities.  Similarly  to  our  previous  update  for(cid:173)
mulation, we will formalize  this principle from both seman(cid:173)
tic and syntactic considerations. We first illustrate our idea by 
the following example. 

Example 4  Consider an irrigation system which has the fol(cid:173)
lowing general  rules to decide  whether the plants  should be 
watered: 

If there  is  no  evidence  showing that  it  will  not  be 
raining next day,  then  we do not need to water the 
plants; and 
If there is no evidence showing that  the soil is dry, 
then we do not need to water the plants. 

It is also assumed  that the soil is dry or it will not be raining 
next day.  This scenario can be represented by the following 
program  P1: 

BELIEF REVISION AND UPDATE 

115 

from which it is concluded that we do not need  to water the 
plants.  However,  from  a  conservative  viewpoint for plants' 
growth,  this  result  is  rather  optimistic  because  r3  does  not 
represent an exclusive disjunctive information. Therefore, we 
consider to update  P1  by  P2 

which  says  that  if it  is  not known  that  the  soil  is  dry  and  it 
may be believed that it will not be raining next day, then we 
water the plants; and we do not need to water the plants if the 
soil  is not dry  or it will be raining next  day.  After a period 
of time,  suppose new  information  is  further received  that  is 
represented by  P3  as follows: 

5  Semantic Characterizations 

Now  we  investigate  two  specific  properties  called  persis(cid:173)
tence and preservation for epistemic  logic program updates. 
Informally, the persistence property ensures that if a literal is 
derivable from a program, then after updating this program, 
this literal  is still derivable from the resulting program.  The 
preservation property, on the other hand, says that if a literal 
is derivable from a program, then updating other program by 
this program will still preserve  this literal's derivability from 
the resulting program.  While the persistence property is usu(cid:173)
ally not  valid  for classical  belief revision  and  update due  to 
their  nonmonotonicity,  the  preservation  property,  neverthe(cid:173)
less, indeed holds for classical belief revision and update. It is 
not difficult to observe that generally none of these two prop(cid:173)
erties holds for extended  logic program updates or epistemic 
logic  program  updates.  However,  it  is  always  worthwhile 
to explore  their restricted  forms  because  under certain  con(cid:173)
ditions, these properties may significantly simplify the com(cid:173)
putation of a query  to the update result.  We  first  present the 
following lemma. 

Theorem 1  Let P  be an update sequence  with a length of k 
andV  a program.  Then  the following properties  hold: 

4One referee pointed that as a general extension of Lifschitz and 
Turner's result, Watson  also proposed a splitting set theorem for 
epistemic logic programs [Watson, 2000].  It appears that our split(cid:173)
ting theorem has a different feature from Watson's though the later 
may be also used for this proof. 

116 

BELIEF REVISION AND UPDATE 

mantics can  be viewed as a generalization of answer set  se(cid:173)
mantics, our update approach is also applicable for extended 
logic program updates.  Therefore,  it  is important  to charac(cid:173)
terize similarities and differences between  our approach and 
other logic program update approaches from a semantic view(cid:173)
point. Finally, since epistemic logic programs have been used 
as a main component in knowledge based action theories, e.g. 
[Lobo et a/., 2001], we expect that these theories may be sig(cid:173)
nificantly enhanced for representing interactions between ac(cid:173)
tions and knowledge by applying our update approach. 
References 
[Alferes and et a/, 2000]  J.  Alferes  and et ah  Dynamic up(cid:173)
Journal  of 

dates  of  non-monotonic  knowledge  bases. 
Logic Programming, 45( 1 -2):43-70,2000. 

[Baral and Zhang,  2001]  C. Baral and Y. Zhang.  On the se(cid:173)
mantics of knowledge update.  In  Proceedings of the  17th 
International  Joint  Conference  on  Artificial  Intelligence 
(IJCAI-01), pages 97-102. Morgan Kaufmann  Publishers, 
Inc., 2001. 

[Eiter and ct ah 2001]  T  Eiter  and  et  al.  A  framework  for 
In 

declarative  update  specification  in  logic  programs. 
Proceedings of lJCAI-Ol,  pages  649-654, 2001. 

[Eiter and ct ah 2002]  T.  Eiter  and  et  al.  On  properties  of 
update sequences based on causal  rejection.  Theory and 
Practice of Logic Programming, 2:711-767, 2002. 

[Gelfond,  1994]  M.  Gelfond.  Logic  programming and  rea(cid:173)
soning  with  incomplete  information.  Annals  of Mathe(cid:173)
matics  and Artificial Intelligence,  12:98-116,  1994. 

[Katsuno and Mendelzon,  1991]  H. Katsuno and A. Mendel(cid:173)
zon. On the difference between updating a knowledge base 
and  revising  it.  In  Proceedings  of of KR-91, pages  387-
394,  1991. 

[Lifschitz and Turner,  1994]  V.  Lifschitz  and  H.  Turner. 
Splitting a logic program.  In Proceedings of Eleventh In(cid:173)
ternational Conference on Logic Programming, pages 23-
37. MIT Press,  1994. 

[Lobo et al, 2001]  J.  Lobo,  G.  Mendez,  and  S.R.  Taylor. 
Knowledge and the action description language -I. Theory 
and Practice of Logic Programming, 1:129-184, 2001. 

[Sakama and Inoue,  1999]  C. Sakama and K. Inoue.  Updat(cid:173)
ing extended  logic programs through abduction.  In  Pro(cid:173)
ceedings of LPNMR'99, pages 147-161. LNAI, Vol 1730, 
Springer, 1999. 

[Watson, 2000]  R. Watson.  A splitting set theorem for epis(cid:173)
temic specifications. In Proceedings of NMR 2000, 2000. 
[Winslett,  1988]  M. Winslett.  Reasoning about action using 
a  possible  models  approach.  In  Proceedings  of  AAAI-88, 
pages 89-93, 1988. 

[Zhang and Foo,  1998]  Y.  Zhang  and  N.Y.  Foo.  Updating 
logic  programs.  In  Proceedings  of ECAl-98,  pages  403-
407. John Wiley & Sons, Inc.,  1998. 

[Zhang, 2003]  Y.  Zhang.  Minimal  change  and  maximal 
In 

coherence  for  epistemic  logic  program  updates. 
Manuscript,  2003. 

6  Concluding Remarks 
In this paper,  we proposed a formulation for epistemic logic 
program updates. Our update approach was developed based 
on  the principle of minimal change and  maximal  coherence. 
By using our approach, not only a minimal change semantics 
is embedded into the underlying update procedure, but also a 
maximal syntactic coherence is achieved after the update. We 
also investigated  important semantic properties of our update 
approach. This work can be viewed as a further development 
on knowledge update [Baral and Zhang, 2001]. Although all 
current  approaches  of logic program updates  have  their own 
features, it is not clear yet whether they are suitable to handle 
epistemic  logic  program  updates.  For  instance,  in  [Zhang, 
2003]  we  demonstrated  that  a  straightforward  extension  of 
Alferes et al's approach  [Alferes and el a/,  2000J or Eiter et 
ai.'s approach  [Liter and  ct  al, 2002]  to epistemic  logic pro(cid:173)
gram updates may generate incorrect solutions, while the pro(cid:173)
posed generic framework in [Eiter and et a/,  2001]  seems not 
applicable  to our case  either.  On  the other hand,  a syntax-
based approach, e.g.  [Sakama and Inoue, 1999], cannot char(cid:173)
acterize  the  semantics  of epistemic  logic  program  updates, 
and some approaches, e.g.  [Eiter and ct al, 20021, do not obey 
the consistency requirement that is believed to be one of the 
essential  requirements  for  any  revision  and  update  systems 
[Katsuno and Mendelzon, 1991]. 

Several issues remain open for our future research.  First, in 
our update approach, we did not consider the issue of prefer(cid:173)
ence over different resulting programs. In practice, it is possi(cid:173)
ble that one resulting program is more preferred than the other 
in terms of the domain semantics. This problem involves con(cid:173)
flict resolution which is a difficult issue in logic program up(cid:173)
dates  [Zhang  and  Foo,  1998].  Second,  as  world view se(cid:173)

BELIEF REVISION AND UPDATE 

117 

