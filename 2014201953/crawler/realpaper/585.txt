Describing Additive Fluents in Action Language C+ 

Joohyung Lee and Vladimir Lifschitz 

Department of Computer Sciences, 

University of Texas, Austin, TX 78712 
{appsmurf,vl}@cs.utexas.edu 

Abstract 

An additive fluent is a fluent with numerical values 
such that the effect of several concurrently executed 
actions on it can be computed by adding the effects 
of the individual actions.  We propose a method for 
describing effects  of actions  on  additive fluents in 
the declarative language 
An  implementation of 
this language, called the Causal Calculator, can be 
used  for  the  automation  of examples  of common-
sense reasoning involving additive fluents. 

Introduction 

1 
Action languages [Gelfond and Lifschitz,  1998] serve to de(cid:173)
scribe  effects  of actions  on  the  states  of the  world.  For in(cid:173)
stance, the expression 

Walk 

causes  Location(x)  =  / 

(1) 

:  this  action  causes  the  location  of 

is  a  proposition,  or  "causal  law,"  of  action  language 
[Giunchiglia  et  al,  2003]  that  describes  an  effect  of  ac(cid:173)
tion Walk 
to  be(cid:173)
come  /.  The  semantics  of  action  languages  is  defined  in 
terms  of  "transition  systems"—directed  graphs  whose  ver(cid:173)
tices correspond to the states of the world, and whose edges 
correspond to  the  execution  of actions.  The  execution  of a 
sequence of actions can  be represented by  a path  in  such  a 
graph. 

Some  action 

languages, 

including  _ 

,  allow  us  to 
talk  about  the  effects  of  the  concurrent  execution  of  ac(cid:173)
tions.  Causal  law  (1)  is  understood  in 
to  imply  that 
Location 
holds after any event that involves the exe(cid:173)
cution  of Walk 
,  even if other actions are executed con(cid:173)
currently.  To distinguish the events involving the concurrent 
execution of actions a1 and < 
but not 

from the events that involve 

we can write 

In  this paper we  investigate the  possibility  of using i 

to 
represent the  effects  of actions  on  fluents  of a  special  kind, 
called  "additive."  An  additive fluent is  a fluent with numer(cid:173)
ical  values  such  that  the  effect of several  concurrently  exe(cid:173)
cuted  actions  on  it  can  be  computed  by  adding  the  effects 

of the  individual actions.  For example,  the gross  receipts of 
a  store  are  represented by  an  additive  fluent:  when  several 
customers pay to different cashiers simultaneously, the gross 
receipts will increase by the sum of the "contributions" of the 
individual  customers.  The  voltage  of a  battery  is  an  addi(cid:173)
tive fluent: the increase in voltage obtained by adding several 
cells to a battery can be computed by addition.  In  mechan(cid:173)
ics, the velocity of a particle is an additive fluent, because the 
net effect of several  forces on  this fluent over a time interval 
equals the sum of the effects of the  individual forces.  Addi(cid:173)
tive fluents are ubiquitous; this may be the reason why adding 
numbers is such a useful operation. 

Unfortunately, the causes construct  of 

and similar lan(cid:173)
guages is  not directly  applicable to  describing the effects  of 
actions on additive  fluents.  Consider, for instance, the effect 
of the  action  Buy 
books)  on  the 
number of books available at the bookstore. The causal law 

(customerbuys 

(2) 

is  applicable  in  the  case  when  no  customer other than 
is 
buying books  at  the  same time: 
books  are  available 
after  the  event  if there  were 
books in  the  store  before the 
event.  But  (2)  is  not  acceptable  if we  are  interested  in  the 
concurrent execution of such actions. 

We introduce here a syntactic construct, increments, that 
allows us to describe the effects of actions on additive fluents. 
Semantically  this  construct  is  treated  as  "syntactic  sugar" 
the  propositions  involving  that  construct  are 
on  top  of 
viewed as abbreviations for causal laws  of 
The interpre(cid:173)
tation  of increments  described  below  has  been  used  to  ex(cid:173)
tend the implementation  of 
called the Causal  Calculator 
( C C A L C ), to cover additive fluents. 

After a review of transition systems and of the syntax  of 

in the next two sections, we describe the syntax of increment 
laws  (Section  4),  define their semantics  by  showing  how to 
treat them as abbreviations (Section 5), and illustrate the use 
of additive fluents in  the language of CCALC  by  formalizing 
an example that involves buying and selling (Section 6). Two 
other  examples  of commonsense  reasoning  related  to  addi(cid:173)
tive fluents are discussed in Sections 7 and 8.  A proposition 
stated  in  Section  9  confirms  that  additive  fluents  behave  as 
one would expect on  the  basis  of the  informal  discussion of 
additivity above,  and thus provide a justification  for the ap(cid:173)
proach to formalizing additive fluents proposed in this paper. 

REASONING ABOUT ACTIONS AND CHANGE 

1079 

diagonal edges  correspond  to  Alice  and  Bob  buying  books 
concurrently. 

3  Syntax of C+ 
The  review  of  the  syntax  of  C+  in  this  section  follows 
[Giunchigiia et al., 2003, Section 4.2]. An atom is an expres(cid:173)
Dom(c). 
sion of the form 
For instance, the equalities in Figure  1  are atoms.  A formula 
is a propositional combination of atoms.  By a fluent formula 
we mean a formula such that all constants occurring in it are 
fluent constants. An action formula is a formula that contains 
at least one action constant and no fluent constants. 

where c is a constant and 

A static law is an expression of the form 

caused F if G 

(3) 
where F and G are fluent formulas.  An action dynamic law is 
an expression of the form (3) in which F is an action formula 
and G is a formula.  A fluent dynamic law is an expression of 
the form 

caused F if G  after H 

(4) 
where F and G are fluent formulas and H is a formula, pro(cid:173)
vided that F does not contain statically determined constants. 
A causal law is a static law, or an action dynamic law, or a flu(cid:173)
ent dynamic law. 

Here are two examples. The expression 

where 
for the fluent dynamic law 

k 

,  , 

(5) 
is an abbreviation 

is an abbreviation for the fluent dynamic law 

is the 0-place connective "false"). 
Causal laws (5) and (6) describe an effect of action Buy 

and a restriction on its executability.  To get a complete de(cid:173)
scription of Figure 1  in language 
we need two more pos(cid:173)
tulates.  First,  we  should  specify that the  edge  labels  of the 
transition system  may assign truth values to the action con(cid:173)
stants Buy 

arbitrarily. This is expressed by 

exogenous  Buy 

(7) 

which stands for the pair of action dynamic laws 

Action  Buy 
is exogenous in the sense that the action de(cid:173)
scription does not determine whether that action is executed. 
If it is not executed then there is  a cause for this;  if it is ex(cid:173)
ecuted then there is a cause  for that too.  Second,  we need 
to say that the fluent constant Has 
satisfies the "common-
sense  law of inertia":  in the absence of evidence to the con(cid:173)
trary, its value after an event is assumed to be the same as its 
value before the event. This is expressed by 

i n e r t i al  Has  

(8) 

Figure 1: A transition system. 

2  Transition Systems 
Consider a set of symbols, called constants, along with a non(cid:173)
empty  finite  set  of symbols  Dom(c)  assigned  to  each  con(cid:173)
stant c.  We call Dom(c)  the domain of 

The  constants  are  divided  into  two  groups—fluent  con(cid:173)
stants and action constants. Intuitively, a fluent constant rep(cid:173)
resents a fluent, and the elements of its domain are the possi(cid:173)
ble values of that fluent. A state of the world is characterized 
by a function that maps each fluent constant to an element of 
its domain.  In [Giunchiglia et al., 2003, Section 4.2], fluent 
constants are further subdivided into simple and statically de(cid:173)
termined; in the examples below, only fluent constants of the 
first kind will be used. 

A  function that  maps  each  action  constant to  an  element 
of its  domain  characterizes  an  event  occurring  over  a  time 
interval between two successive states.  In many examples of 
the domain of every action constant is the set 
the use  of 
of truth  values 
constants  with  this  domain  are  called 
Boolean.  Intuitively, a Boolean action constant represents an 
action; the value of such a constant is t if the action is one of 
those that are executed as part of the event. 

A  transition system is a directed graph whose vertices are 
functions that map every  fluent  constant to an element of its 
domain, and whose edges are labeled by functions that map 
every action constant to an element of its domain.  The ver(cid:173)
tices of a transition system are called its states. The functions 
labeling  the  edges  of a  transition  system  are  called  events. 
As an example, consider a transition system representing the 
effect of buying a book on the number of books that the per(cid:173)
son  owns  (Figure  1).  It uses two  fluent  constants—Has(A) 
(the  number of books that Alice  has)  and Has(B)  (the  num(cid:173)
ber  of  books  that  Bob  has)—with  the  domain  { 0 , . . ., N}, 
where  N  is  a  fixed  nonnegative  integer,  and  two  Boolean 
action  constants—Buy(A)  (Alice  buys  a  book)  and  Buy(B) 
(Bob buys a book).  Every state is represented by two equa(cid:173)
tions showing the values of the fluent constants.  Every event 
is represented by the set of action constants that are mapped 
to t.  The loops are labeled by the trivial event 0 (no actions 
are executed).  The horizontal edges are labeled by the event 
in which Alice buys a book and Bob doesn't;  along each of 
the vertical edges, Bob buys a book and Alice doesn't.  The 

1080 

REASONING ABOUT ACTIONS AND CHANGE 

which stands for 

fluent dynamic laws 

Notation:  x  ranges  over  {A, B}. 

caused Has 

after an event is the 
same as the value before the event then there is a cause for 
this. Intuitively, inertia is the cause. 

If the  value  of Has 

An action description is a set of causal laws. The semantics 
described  in  [Giunchiglia  et  al,  2003,  Section 4.4], 
of 
specifies the transition  system represented by any given ac(cid:173)
tion description. For instance, action description (5)-(8) rep(cid:173)
resents the transition system shown in Figure 1. 

This action description does not say explicitly that the triv(cid:173)
ial event  has no effect on the values of Has(A)  and Has(B), 
does not  affect  the  value  of Has(B). 
or that event 
Nevertheless, every edge of the transition system labeled 
is 
a loop,  and every edge labeled 
is horizontal, be(cid:173)
cause of the postulates (8) that express, under the semantics 
of 

the  persistence  property  of Has(x). 

Similarly, causal laws (5)-(8) do not say anything about the 
concurrent execution of actions Buy(A)  and Buy(B).  But the 
edges labeled 
in Figure 1 are directed di(cid:173)
agonally, in accordance with our commonsense expectations. 
This  fact  illustrates the convenience of the approach to con(cid:173)
currency incorporated in the semantics of 

However,  as  discussed  in  the  introduction,  this  built-in 
mechanism is not directly applicable to the effects of actions 
on additive fluents. We are now ready to turn to the main sub(cid:173)
ject of this  paper—extending 
with the additional notation 
that resolves this difficulty. 

Increment Laws 

4 
In  our proposed extension  of 
some  of the  simple  fluent 
constants can be designated as additive. The domain of every 
additive fluent constant is assumed to be a finite set of num(cid:173)
bers. We understand "numbers" as (symbols for) elements of 
any set with an associative and commutative binary operation 
that has a neutral element 0.'  Effects of actions on additive 
fluents are described in extended 
by causal laws of a new 
kind—"increment laws."  Accordingly,  we  modify  the  defi(cid:173)
nition of a causal  law reproduced in  Section  3  in two ways. 
First,  in causal  laws (3) and (4) formula F is not allowed to 
contain additive fluent constants. Second, we extend the class 
of causal  laws by  including increment laws—expressions of 
the form 

a increments c  by  

if G 

(9) 

where 

is a Boolean action constant, 
is an additive fluent constant, 
is a number, and 
is a formula that contains no Boolean action constants. 

[Thc additive group of integers is the main example we are inter(cid:173)
ested in, and this is the case that has been implemented. The max 
operation on an ordered set with the smallest element is another in(cid:173)
teresting case. 

Action constants: 
Buy 

Additive fluent constant: 
InStore 

Causal laws: 
Buy 
exogenous Buy 

increments InStore by  —1 

Domains: 
Boolean 

Domain: 

Figure 2: An action description in extended C+. 

Figure 3: The transition system described by Figure 2. 

We will drop 'if G'  in (9) if G is T.  In extended  
an action 
description is a set of causal laws that contains  finitely  many 
increment laws. 

In the next section we define the semantics of extended 

by describing a translation that eliminates increment laws in 
favor of additional action constants. 

As  an  example,  consider  the  effects  of  actions  Buy  (A), 
Buy(B)  on  the  number  of books  available  in  the  bookstore 
where  Alice  and  Bob  are  buying  books.  A  description  of 
these effects in extended 
is shown in Figure 2 (as before, 
TV is a fixed nonnegative integer). The transition system rep(cid:173)
resented by the translation of Figure 2 into the non-extended 
language 
is depicted in Figure 3 (with the auxiliary action 
constants dropped from the edge labels).  The causal laws in 
Figure 2 do not say explicitly that the trivial  event  has no 
effect on the value of InStore, or that the concurrent execution 
of actions  Buy(A)  and  Buy(B)  decrements  the  value  of this 
fluent by  2.  Nevertheless,  every  edge  of the  corresponding 
transition system labeled 
is a loop, and every edge labeled 
goes up 2 levels,  in accordance with our 
commonsense expectations.  This happens because Figure 2 
classifies InStore as an additive fluent constant. 

The causal laws in this action description do not say explic(cid:173)
itly that actions Buy 
are not executable when InStore = 0, 
and that actions Buy(A), Buy(B)  cannot be executed concur(cid:173)
rently when InStore = 1.  This is taken care of by our seman(cid:173)
tics  of increment  laws,  in  view  of the  fact  that  the  domain 
of InStore does not contain negative numbers. 

REASONING ABOUT ACTIONS AND CHANGE 

1081 

5  Translating Increment Laws 
Let D be an action description in extended i 
. In connection 
with the increment laws (9) in /), the following terminology 
will be used: about the Boolean action constant 
the additive 
fluent constant c and the number 
is a c-contributing constant, and that 
to c. 

in (9) we will say that 
is a contribution of 

The auxiliary action constants introduced in the translation 
are expressions of the form Contr 
where c is an additive 
fluent constant, and a is a c-contributing action constant. The 
domain  of  Contr 
to c 
and number 0. 

consists of all  contributions  of 

To translate the increment laws from D, we 
(i)  replace each increment law (9) in D with the action dy(cid:173)

namic law 

Notation: 

ranges  over  {A,  B}. 

Action constants: 
Buy 
Contr(Buy\ 

InStore) 

Additive fluent constant: 
InStore 

(ii)  for every  auxiliary  constant  Contr(a,c),  add  the  action 

dynamic law 

Figure 4:  The result of translating increment laws from Fig(cid:173)
ure 2. 

(10) 

caused 

ConU 

(iii)  add the fluent dynamic laws 

caused 

(11) 

(12) 

for every additive fluent constant 
and  every  function 
contributing constant a to an element of the domain of 
Contr 

is in the domain of c. 

that  maps  each 

so  t h a t ~~  

The sum and the multiple conjunction in (12) range over all 
c-contributing constants 

to  get  the  value 

Causal  law  (10)  interprets  increment  law  (9)  as  the  as(cid:173)
(possibly  along  with  other actions) 
sertion  that executing 
causes constant  Contr 
under some 
conditions characterized by formula G.  Causal laws (11) say 
that  the value of this constant is 0 by default,  that  is to say, 
when  another  value  is  not  required  by  any  increment  law. 
Causal laws (12) say that the value of an additive fluent con(cid:173)
stant after an event can be computed as the sum of the value 
of this constant prior to the event and the contributions of all 
actions to this constant. 

The  result  of  translating  increment  laws  from  Figure  2 
is  shown  in  Figure  4. 
In  this  case,  the  translation  de(cid:173)
scribed  above  introduces  two  auxiliary  action  constants: 
Contr{Buy{A), InStore)  and  Contr{Buy{B), InStore).  The 
domain of each of them has 2 elements:  the contribution  -1 
of #MV(X)  to InStore and number 0. 

The edges of the transition system described by Figure 4, 
and  the  corresponding events,  can  be  computed  using  the 
methods presented in [Giunchiglia et al.n 2003, Sections 4.2, 
2.6].  (This  calculation  involves turning the  action  descrip(cid:173)
tion  into  a  definite  causal  theory  and  computing  the  mod(cid:173)
els  of the  completion  of  this  theory.)  Every  event  assigns 
values to each action constant,  including the  auxiliary con(cid:173)
stants  Contr(Buy 

InStore). For instance, the label 

in Figure 3 represent the following event E: 

The Causal  Calculator,  which  implements 

ment laws, can be downloaded from 

with incre(cid:173)

h t tp : //www.cs.utexas.edu/users/tag/ccalc/ . 

6  Reasoning about Money 
As an application of these ideas to automated commonsense 
reasoning, consider the following example: 

I have $6 in my pocket. A newspaper costs $ 1, and 
a magazine costs $3. Can 1 buy 2 newspapers and a 
magazine? A newspaper and 2 magazines? 

These questions are about the executability of some concur(cid:173)
rently executed actions,  and the answers are determined by 
the effect of these actions on an additive  fluent—the  amount 
of money that 1 have. 

Figure  5  describes  the  relevant  properties  of buying  and 
selling in the input language of C C A L C.  There arc objects 
of four sorts in this domain:  agents, resources,  items (to be 
purchased) and (nonnegative) integers;  items are a subset of 
resources.  The buyer and the  seller are agents;  money is a 
resource; 0,... ,maxlnt are integers. The price of an item is 
an  integer.  The number of units of a resource that an  agent 
has is an integer-valued additive  fluent.  Buying is an exoge(cid:173)
nous action.  The four causal  laws that follow these declara(cid:173)
tions are self-explanatory; decrements  is an abbreviation 
defined in  terms of i n c r e m e n t s.  The  last causal  law ex(cid:173)
presses that the number of units that are being purchased is 
uniquely defined. 

Figure 6 expresses the  first  of the two questions stated at 
the  beginning  of this  section.  The  line  maxstep 
1 
tells CCALC that the query is about paths of length  1  in the 
transition system. The question is whether the transition sys(cid:173)
tem contains an edge that begins in a state in which the buyer 

:  : 

1082 

REASONING ABOUT ACTIONS AND CHANGE 

-  s o r ts 
agent; 

resource  >>  i t e m; 

n n l n t e g e r. 

v a r i a b l es 
Ag 
It 

::  agent; 
:: 

i t e m; 

o b j e c ts 
b u y e r , s e l l er 
money 
0..maxlnt 

: -  constants 
p r i c e ( i t e m) 
has(agent,resource) 

Res 
M,N 

: 
: 

: 
resource; 
:  n n l n t e g e r. 

:  agent; 
: 
resource; 
:  n n l n t e g e r. 

::  n n l n t e g e r; 

b u y ( i t e m , n n l n t e g e r) 

::  a d d i t i v e F l u e n t ( n n l n t e g e r ); 
::  exogenousAction. 

b u y ( I t , N) 
increments  h a s ( b u y e r , I t)  by  N. 
b u y ( I t , N)  decrements  h a s ( s e l l e r , I t)  by  N. 
b u y ( I t , N) 

increments  has(seller,money) 
if  p r i c e ( I t ) =M 

by  M*N 

where  M*N  =<  maxlnt. 

b u y ( I t , N)  decrements  has(buyer,money) 

by  M*N 

if  p r i c e ( I t ) =M 

where  M*N  =<  maxlnt. 

nonexecutable  b u y ( I t , M)  &  b u y ( I t , N) 

where  M\=N. 

Figure 5:  Buying and selling 

:-  o b j e c ts 

newspaper,magazine 

:: 

i t e m. 

price(newspaper)=1. 

price(magazine)=3. 

:-  query 
maxstep 
0:  has(buyer,money)=6, 

::  1; 

buy(newspaper,2), 

buy(magazine,1). 

Figure 6:  Do I have enough cash? 

has $6, and whose label includes buying 2 newspapers and 1 
magazine.  CCALC responds to this query by  finding  such an 
edge.2  Its reply to a similar question about  1  newspaper and 
2 magazines is negative. 

7  Reasoning about Motion 
Some additive fluents mentioned in the introduction—for in(cid:173)
stance, the velocity of a particle—are real-valued, rather than 
integer-valued.  CCALC  cannot deal  with  real  numbers yet, 
and its input language does not allow us to express properties 
of such fluents. 

But  let's imagine a movable object that is  immune to this 
complication—the  spacecraft  Integer.  Far  away  from  stars 

2This example involves the concurrent execution of two actions, 
but in general the CCALC implementation of additive fluents does 
not impose any specific restriction on the number of actions that can 
be executed concurrently. 

and planets, the Integer is not affected by any external forces. 
As its proud name suggests, the mass of the spacecraft is an 
integer. For every integer 
the coordinates and all three com(cid:173)
ponents of the Integer's velocity vector at time  are integers; 
the  forces  applied  to  the  spacecraft  by  its jet  engines  over 
the interval 
for any  integer  are constant vectors 
whose components are integers as well.  If the crew of the In(cid:173)
teger attempts to violate any of these conditions, the jets fail 
to operate! 

Our formalization of the motion of the Integer uses the  flu(cid:173)
ents  Pos  where a ranges over  {X, Y, Z }, to represent the 
current position of the Integer along the a axis.  The additive 
fluents Vel 
are  the components of its  velocity.  According 
to Newton's Second Law, the acceleration created by  firing  a 
jet can be computed by dividing the force by the mass of the 
spacecraft.  This relationship can be expressed without men(cid:173)
tioning the acceleration explicitly—in terms of the change in 
the velocity over a unit time interval: 

Fire(j)  increments  Vel 

by 

/Mass  {{Force 

To test our representation, we instructed C C A LC to answer 

the following question: 

The mass of the Integer is  1.  The Integer has two 
jets,  and the force that  can be applied by each jet 
along each axis is at most 2.  The current position 
of the Integer is  (-1,0,1),  and its current velocity 
is (0,1,1).  How can it get to (0,3,1) within  1  time 
unit? 

One of the solutions found by CCALC is to apply the forces 

(2,2,0)  and  (0,2,-2). 

8  Missionaries and Cannibals with Two Boats 
In the Missionaries and Cannibals Problem (MCP), three mis(cid:173)
sionaries and three cannibals come to a river and find a boat 
that can hold two people.  If the cannibals ever outnumber the 
missionaries on  either bank,  the  missionaries  will  be eaten. 
How shall they cross? The shortest solution involves 11 steps. 
Lifschitz  [2000]  showed  how  to  express  this  puzzle  and 
some of its  elaborations due to  McCarthy  [1999]  in  the lan(cid:173)
guage of C C A L C.  Some  simple elaborations of MCP in  the 
spirit  of  this  work  require  that  the  number  of  members  of 
a  group  (missionaries  or  cannibals)  at  a  given  location  be 
treated as  an  additive  fluent.  This  is the case,  for instance, 
when  several boats are  available  and are  allowed to operate 
concurrently. 

Using the ideas of this paper, we formalized the modifica(cid:173)
tion  of MCP  in  which  the  travelers  find  two  boats:  a  small 
boat that holds one, and a bigger boat that holds two.  Using 
our formalization,  CCALC  has determined that the modified 
problem can be solved in 7 steps. 

9  Properties  of Additive  Constants 
By examining Figure 3 in isolation from its symbolic descrip(cid:173)
tion in Figure 2 we can see that the constant In Store exhibits 
some features typical for additive fluent constants. 

Consider,  for  instance,  the  edges  that  start  at  the  vertex 
InStore  =  2  and  are  labeled  by  the  events  {Buy(A)}  and 

REASONING ABOUT ACTIONS AND CHANGE 

1083 

{Buy(B)}.  Each  of  them  leads  to  the  vertex  InStore  =  1, 
so  that  each  of  these  two  events,  when  it  occurs  in  the 
state  InStore  =  2,  increments  the  value  of InStore  by  - 1. 
In  accordance  with  the  intuitive  idea  of  an  additive  fluent, 
we can  expect that the  "union" of these events,  when  it oc(cid:173)
curs  in  the  same  state,  will  increment  the  value  of InStore 
by 
And this is true, because the edge in Fig(cid:173)
ure  3  that  starts  at  the  vertex  InStore  =  2  and  is  labeled 

leads to the vertex InStore = 0. 

Proposition  1  below generalizes this observation to a class 
of action  descriptions  in  the  language  C+  extended  as  de(cid:173)
scribed in Sections 4, 5.  By D we denote any action descrip(cid:173)
tion in this language. 

About events 

in the transition system 

represented by D we say that eo is a disjoint union of 
if, for every Boolean action constant a, 

t then there exists a unique 

for  this 

boolean action constant 
then, for all 

such that 
= t or  every  non-

In the rest of this section we assume that the set of numbers 

is a commutative group. 

The special case corresponding to 

=0  tells  us  that  ad(cid:173)
ditive fluent constants are not affected by "trivial" events.  In 
this sense,  they are  similar to the  fluent  constants for which 
inertia is postulated: 
Corollary 1  Let  e  be an  event such  that for every  Boolean 
action  constant 
If the  transition  system  repre(cid:173)
sented by  D  contains  an  edge  that  leads from  a  state  s  to 
a  state  $'  and is  labeled e  then, for any additive  fluent  con(cid:173)
stant c,  $'(c)  =  s(c). 

The special case corresponding to n  =  1  implies that the 
effects of any set of actions on an additive fluent is determin(cid:173)
istic: 
Corollary 2  // the  transition  system  represented by  D  con(cid:173)
tains an  edge  that leads  from 
state so and is 
labeled e,  and an  edge  that  leads from  s  to 
state  si  and 
is  also  labeled  e,  then,  for  any  additive  fluent  constant  c, 
So{c)  = 5 i ( c ). 

state s  to 

10  Discussion 
In  this  paper  we  showed  how  an  implemented,  declarative 
language  for  describing  actions  can  be  used  to  talk  about 
the  effects  of actions  on  additive  fluents.  This  was  accom(cid:173)
plished  by  extending  the  syntax  of the  action  language  C+ 
from  iGiunchiglia  et  ai,  2003]  by  increment  laws  and  by 
showing how to treat these laws as abbreviations. 

It  is  interesting  to  note  that  this  treatment  of  additive 
fluents would  have  been  impossible  if,  instead  of C+,  we 
used  its  predecessor  C  from 
IGiunchiglia  and  Lifschitz, 
1998].  Non-Boolean,  non-exogenous action  constants  such 
as Contr(a, c), and action dynamic laws such as (10) and (11) 
are among the features of C+ that were not available in C. 

In literature on planning, fluents with numerical values are 
often referred to as "resources" fKoehler,  1998]. The concur(cid:173)
rent execution of the actions that involve resources is usually 
limited to the "serializable" case, when all  ways of sequenc(cid:173)
ing  the  concurrent  actions  are  well-defined  and  equivalent. 
This condition is not satisfied, however, for many uses of ad(cid:173)
ditive fluents, including the space travel example (Section 7) 
and  the  modified  MCP (Section  8).  Consider,  for instance, 
the state with two cannibals and three missionaries on the first 
bank, and imagine that the missionaries are using both boats 
to cross simultaneously.  The concurrent execution of the ac(cid:173)
tions cannot be replaced by the  larger boat crossing first and 
the smaller boat crossing after that—in the state between the 
two actions, the missionaries on the first bank would be out(cid:173)
numbered by the cannibals. This example shows that crossing 
the river in the modified MCP is not serializable. 

Acknowledgements 
We are grateful to Yuliya Babovich, Jonathan Campbell, Esra 
Erdem, Selim Erdogan, Paolo Ferraris and Wanwan Ren for 
useful  discussions  related  to  the  subject  of this  paper.  This 
work was partially  supported by the  National  Science Foun(cid:173)
dation under Grant IIS-9732744 and by the Texas Higher Ed(cid:173)
ucation Coordinating Board under Grant 003658-0322-2001. 

References 
[Gelfond and Lifschitz,  1998]  Michael 

Vladimir  Lifschitz. 
Transactions on AI, 3:195-210,  1998. 

Action  languages.3 

Gelfond 

and 
Electronic 

IGiunchiglia and Lifschitz,  1998]  Enrico  Giunchiglia  and 
Vladimir Lifschitz.  An  action  language  based  on  causal 
explanation:  Preliminary report.  In  Proc.  AAAI-98, pages 
623-630. AAA1 Press, 1998. 

[Giunchiglia e/ al, 20031  Enrico  Giunchiglia, 

Joohyung 
Lee,  Vladimir  Lifschitz,  Norman  McCain,  and  Hudson 
Artificial 
Turner. 
Intelligence, 2003.  To appear. 

Nonmonotonic  causal 

theories.4 

[Koehler, 1998] J ana Koehler. Planning under resource con(cid:173)

straints.  In Proc.  ECAI-98, pages 489-493,  1998. 

iLifschitz, 2000]  Vladimir Lifschitz.  Missionaries and can(cid:173)
In  Principles  of Knowl(cid:173)
nibals  in  the  Causal  Calculator. 
edge Representation  and Reasoning:  Proc.  Seventh  Int'l 
Conf, pages 85-96, 2000. 

[McCarthy,  1999]  John  McCarthy.  Elaboration  tolerance.5 

In progress, 1999. 

3 h t t p : / / w w w . e p . l
4 h t t p : / / w w w . c s . u t e x a s . e d u / u s e r s / v l / p a p e r s/ 

i u . s e / e a / c i s / 1 9 9 8 / 0 1 6/  . 

nmct.ps 

. 

5http://www-formal.stanford.edu/jmc/ 

e l a b o r a t i o n . h t ml 

. 

1084 

REASONING ABOUT ACTIONS AND CHANGE 

