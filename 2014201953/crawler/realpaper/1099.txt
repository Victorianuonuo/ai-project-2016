Exploiting Inference Rules to Compute Lower Bounds for MAX-SAT Solving

∗

1Department of Computer Science, Sun Yat-sen University, Guangzhou 510275, P. R. China

Han Lin1 and Kaile Su 1,2 †

2IIIS, Grifﬁth University, Brisbane, Qld 4111, Australia

1underchange@yahoo.com, 2k.su@grifﬁth.edu.au

Abstract

In this paper we present a general logical frame-
work for (weighted) MAX-SAT problem, and study
properties of inference rules for branch and bound
MAX-SAT solver. Several rules, which are not
equivalent but Λ-equivalent, are proposed, and we
show that Λ-equivalent rules are also sound. As an
example, we show how to exploit inference rules to
achieve a new lower bound function for a MAX-
2-SAT solver. Our new function is admissible
and consistently better than the well-known lower
bound function. Based on the study of inference
rules, we implement an efﬁcient solver and the ex-
perimental results demonstrate that our solver out-
performs the most efﬁcient solver that has been im-
plemented very recently [Heras and Larrosa, 2006],
especially for large instances.

1 Introduction

In the past few years MAX-SAT solving techniques have
drawn increasing attention [Gramm et al., 2003; de Givry
et al., 2003; Alsinet et al., 2003; Shen and Zhang, 2004;
Li et al., 2005; 2006; Larrosa and Heras, 2005; Xing and
Zhang, 2005; Heras and Larrosa, 2006] in various ﬁelds of
artiﬁcial intelligence, because many problems can be handled
by transforming an original problem instance into a MAX-
SAT instance and solving it with a MAX-SAT solver. These
problems include MAX-CUT, MAX-CLIQUE, as well as prob-
lems in domains such as routing [Xu et al., 2003], bioin-
formatics [Strickland et al., 2005], scheduling [Vasquez and
Hao, 2001], and probabilistic reasoning [Park, 2002].

MAX-SAT is an optimization version of the SAT problem.
In the last decade signiﬁcant progress has been made in the
performance of SAT solvers. A modern SAT solver can han-
dle instances containing up to a million variables within rea-

∗

†

This work has been supported by the Australian Research Coun-
cil grant DP0452628, National Basic Research 973 Program of
China under grant 2005CB321902, National Natural Science Foun-
dation of China grants 60496327, 10410638 and 60473004, and
Guangdong Provincial Natural Science Foundation grants 04205407
and 06023195.

Corresponding author

sonable time [Kautz and Selman, 2005]. Almost every com-
plete SAT solver is based on the DPLL algorithm [Davis et al.,
1962], and almost every DPLL-based solver employs trans-
formation rules, such as unit propagation and resolution, to
achieve high efﬁciency. Such rules improve SAT solvers in
two main aspects. First, it may be used to simplify a formula.
Second, at each internal node of the search tree, the solver
may attempt to use such rules to prove unsatisﬁability of the
formula instantiated by a partial assignment, and if the for-
mula is really unsatisﬁable, the solver will not extend the par-
tial assignment any more. Although such rules are of great
use in SAT solving, it can not be applied directly to MAX-
SAT solvers for several reasons. First, using these rules to
simplify a formula may not preserve the optimal value. Sec-
ond, since the goal of a MAX-SAT solver is to ﬁnd maximum
number of satisﬁed clauses, the proof of unsatisﬁability is
meaningless. This is why there is a big gap between SAT and
MAX-SAT solving. Fortunately, transformation rules can be
used to compute lower bounds during the MAX-SAT search-
ing process. In this paper, we further study the properties of
transformation rules for (weighted) MAX-SAT and propose
several new rules to improve the lower bounds.

Due to the differences between the logic behind the MAX-
SAT problem and that behind SAT, [Larrosa and Heras, 2005]
developed a logical framework to extend the SAT solving
techniques to MAX-SAT. However, because of the simplic-
ity of this framework, we can not study the properties of the
transformation rules intensively. In order to avoid this limi-
tation, we extend the framework by introducing several new
fundamental concepts.

This paper is organized as follows. In Section 2, we de-
scribe our logical framework for MAX-SAT, and intensively
study the properties of inference rules.
In Section 3, we
propose several new inference rules to improve MAX-SAT
solvers. In Section 4, as a case study, we show how to ex-
ploit inference rules to improve the lower bound function of
MAX-2-SAT. Section 5 shows experimental results. Finally
we conclude the paper in Section 6.

2 A Logical Framework for Weighted

MAX-SAT

In this section, we propose a logical framework for weighted
MAX-SAT, which is more general and suitable for study-

IJCAI-07

2334

ing the MAX-SAT solving techniques than the one proposed
in [Larrosa and Heras, 2005; Heras and Larrosa, 2006].

2.1 Basic Notation and Deﬁnitions

For convenience we introduce some notation and deﬁnitions.
In propositional logic, a variable x may take values 1 (for
true) or 0 (for f alse). A literal is either a variable or its nega-
tion. The variable related to literal l is denoted by var(l). The
negation of a variable (or literal) x is denoted by ¯x. A clause
C = l1 ∨ l2 ∨ . . . ∨ lm is a disjunction of literals in which no
variable occurs more than once. A weighted clause is a pair
(C, w) where C is a clause and w is the weight of this clause.
Without loss of generality, we assume w is a natural number
in this paper. A CNF formula is a conjunction of clauses. A
weighted CNF formula is a set of weighted clause. A bounded
formula is a pair (F, k) where F is a weighted CNF formula
and k, a natural number, is the upper bound of this formula.
For a formula F over a variable set V , an assignment for F
is a mapping from V (cid:2) to {0, 1} and is denoted by a vector
(cid:2)X ∈ {0, 1}n
, where n is the number of variables in V (cid:2). The
assignment is complete if V (cid:2) ⊇ V ; otherwise it is partial. An
assignment satisﬁes a clause if it satisﬁes at least one literal
in the clause. An assignment satisﬁes a CNF formula if it
satisﬁes every clause in the formula. The instantiation of a
formula F by forcing literal l to be true, denoted by F [l],
produces a new formula as follows: all clauses containing lit-
¯l is deleted from each clause where
eral l are eliminated, and
it occurs. We use 2 to denote empty clause, which can not be
satisﬁed by any assignment.

Given a weighted CNF formula F and a complete assign-

ment

(cid:2)X for F , we set
COST (F, (cid:2)X) =

(cid:2)

w

(C,w)∈F and (cid:2)X does not satisfy C

which indicates the cost of

(cid:2)X in F .

Given a weighted formula F , weighted MAX-SAT prob-
(cid:2)X such that COST (F, (cid:2)X) is
lem is to ﬁnd an assignment
minimum. We denote such minimal value by OP T (F ).
Since unweighted MAX-SAT problem is a particular case in
which w = 1 for every weighted clause (C, w) in F , we only
consider weighted MAX-SAT problem in this paper.

2.2 The Logical Framework

(cid:2)X is called a model of
Deﬁnition 1 A complete assignment
a bounded formula (F, k), if COST (F, (cid:2)X) < k. A bounded
formula is unsatisﬁable if it has not any model.

Obviously, (F, 0) is unsatisﬁable for any weighted formula

F and if (2, k) ∈ F , then (F, k) is also unsatisﬁable.

Note that in the above deﬁnition, if k = 1, then a model
should satisfy every clause in the formula, which is the same
as the case in the context of SAT problem. So SAT solving
can be considered as a special case in our logical framework.
According to Deﬁnition 1, we can naturally generalize
semantic entailment relation and equivalence relation from
classical positional logic to our logical framework.

Deﬁnition 2 Given two bounded formulas (F1, k1) and
(F2, k2),

(F1, k1) |= (F2, k2)

holds1 if every model of (F1, k1) is also a model of (F2, k2).
(F1, k1) and (F2, k2) are equivalent, denoted by (F1, k1) ≡
(F2, k2), if (F1, k1) |= (F2, k2) and (F2, k2) |= (F1, k1).
Deﬁnition 3 Given two weighted CNF formulas F1 and F2,

F1 |= F2

holds, if (F1, k) |= (F2, k) for any k. Two weighted CNF
formulas F1 and F2 are equivalent, denoted by F1 ≡ F2, if
F1 |= F2 and F2 |= F1.

The following proposition and corollary reveal the relation
between our deﬁnitions and the weighted MAX-SAT prob-
lem.
Lemma 1 Let F1 and F2 be weighted CNF formulas, F1 |=
(cid:2)X of F1 and
F2, if and only if for every complete assignment
F2, we have

COST (F1, (cid:2)X) ≥ COST (F2, (cid:2)X)

Proposition 1 Given two weighted CNF formulas F1 and F2,
if F1 |= F2, then OP T (F1) ≥ OP T (F2).
Corollary 1 Given two weighted CNF formulas F1 and F2,
if F1 ≡ F2, then OP T (F1) = OP T (F2).

Now we describe the procedure MAX-DPLL, which is
slightly different from [Larrosa and Heras, 2005], for solv-
ing weighted MAX-SAT as follows.
function MAX-DPLL((F, k):bounded formula):interger;
1. F :=ApplyEquivalentRules((F, k));
2. F (cid:2):=ApplyNonequivalentRules((F, k));
3.

4.

5.

if (2, k) ∈ F (cid:2) then return k;
if F = ∅ then return 0;
if F = {(2, w)} then return w;
l:=SelectLiteral(F );

6.
7. v:=MAX-DPLL((F [l], k));
8. v:=MAX-DPLL((F [¯l], v));
9. return v;
end function

Procedure 1: The procedure for solving weighted MAX-SAT.

The MAX-DPLL procedure is much like the DPLL, and its

correctness is derived from the recursive equation

OP T (F ) = min{OP T (F [l]), OP T (F [¯l])}

The sub-procedures ApplyEquivalentRules and ApplyNon-
equivalentRules in lines 1 and 2 will be discussed later. For
the moment, they can be considered as procedures just re-
turning the input formula F . The initial value of variable k,

1Of course we can generalize this deﬁnition by replacing
(F1, k1) with more than one bounded formula, but it is meaning-
less in the context of MAX-SAT solving.

IJCAI-07

2335

upper bound of formula F , can be obtained by running a local
search procedure, such as [Borchers and Furman, 1999].

Now let’s pay attention to inference rules for weighted

MAX-SAT. An inference rule is in this form:

P ⇒ Q

where P and Q are weighted CNF formulas. The procedure
for applying an inference rule to a formula can be described
as follows (WCF is short for weighted CNF formula):

if P ⊆ F then F := (F − P ) ∪ Q;

function ApplyRule(P ⇒ Q:inference rule, F :WCF):WCF;
1.
2. return F ;
end function

Procedure 2: The procedure for applying an inference rule to
a weighted CNF formula.

Deﬁnition 4 An inference rule P ⇒ Q is sound if for
any weighted CNF formula R, we have OP T (P ∪ R) =
OP T (Q ∪ R).

An inference rule P ⇒ Q is an equivalent rule if P ≡
Q. The following proposition shows that applying equivalent
rules to a formula can preserve its optimal value.

Proposition 2 All equivalent rules are sound.

For a bounded formula (F, k), [Larrosa and Heras, 2005;
Heras and Larrosa, 2006] incorporated the following infer-
ence rules into their weighted MAX-SAT solvers:

• BR1: {(A, k), (A ∨ B, w)} ⇒ {(A, k)}
• BR2: {(A, w), (A, u)} ⇒ {(A, w ⊕ u)}
• BR3:

If w ⊕ u = k then {(A, w), (A ∨ B, u)} ⇒

{(A, w), (A ∨ B, k)}
• BR4: {(A, 0)} ⇒ { }
• RES: {(x ∨ A, u), (¯x ∨ B, w)} ⇒ {(A ∨ B, m), (x ∨
A, u (cid:13) m), (¯x ∨ B, w (cid:13) m), (x ∨ A ∨ ¯B, m), (¯x ∨ ¯A ∨
B, m)}

where x is any literal, A and B are arbitrary disjunction of
literals, m = min{u, w} in the RES rule, and operators ⊕
and (cid:13) are deﬁned as

a ⊕ b = min{a + b, k}

(cid:3)

a (cid:13) b =

a − b a (cid:14)= k
a = k
k

Note that [Larrosa and Heras, 2005; Heras and Larrosa,
2006] incorporated some special cases of RES rather than the
general RES rule.

By exploiting the above rules, [Heras and Larrosa, 2006]
implemented a weighted MAX-SAT solver that outperforms
other state-of-art solvers. However, we can observe that all
the above rules are equivalent rules. It is no doubt that equiv-
alent rules are sound, that is, preserve the model and the op-
timal value, so it is safe to exploit equivalent rules to produce

a new formula. But if we only consider such rules, very few
rules can be exploited.

An alternative way is to choose rules in this form P ⇒ Q
such that OP T (P ) = OP T (Q). Unfortunately, applying
such kind of rules is not safe, because OP T (P ) = OP T (Q)
does not ensure the validity of OP T (P ∪R) = OP T (Q∪R)
where P , Q, and R are weighted CNF formulas. A counter
example is given as follows.
Example 1 OP T ({(x, 1)}) = OP T ({(x ∨ y, 1)}) =
0, but OP T ({(x, 1), (¯x, 1)}) = 1 while OP T ({(x ∨
y, 1), (¯x, 1)}) = 0.

Thus, if we attempt to incorporate more inference rules to
weighted MAX-SAT solvers, we should ﬁnd rules that are
not necessarily equivalent but can preserve the optimal value
of the original formula. For this purpose, we introduce the
following deﬁnition.
Deﬁnition 5 Let Λ be a non-empty set of variables, two
weighted CNF formulas F1 and F2 are said to be Λ-
equivalent, denoted by F1 ≈Λ F2, if for every weighted CNF
formula P over Λ, F1 |= P if and only if F2 |= P . An infer-
ence rule P ⇒ Q is a Λ-equivalent rule if P ≈Λ Q.

For Λ-equivalent rules, we have the following proposition

and theorem.
Proposition 3 All equivalent rules are Λ-equivalent for any
Λ.
Theorem 1 If P ⇒ Q is a Λ-equivalent rule, and R is
a weighted CNF formula over Λ, then OP T (P ∪ R) =
OP T (Q ∪ R).

Theorem 1 gives the condition under which we can apply
Λ-equivalent rules to the formula. And Proposition 3 shows
that Λ-equivalent is a weaker notation than equivalent, that
is, the set of equivalent rules is the subset of the set of Λ-
equivalent rules. So, theoretically, considering Λ-equivalent
rules will provide more choices than considering equivalent
rules only. Thus, it is promising to employ Λ-equivalent rules
in weighted MAX-SAT solvers. In Section 3, we will propose
several Λ-equivalent rules.

Now let us pay attention to nonequivalent rules which are
neither equivalent nor Λ-equivalent. We note that every in-
ference rule P ⇒ Q considered in this paper should satisfy
P |= Q. So although applying a nonequivalent rule to a for-
mula may not preserve its optimal value, we may exploit it
to compute a lower bound. From Proposition 1, we can con-
clude that lower bounds that are computed in this way are
admissible, namely the lower bound is always less than or
equal to the optimal value. In fact, sometimes it is easier to
use nonequivalent rules to obtain conﬂict clauses. For exam-
ple, [Shen and Zhang, 2004; Li et al., 2005] apply inference
rules like {(¯x, 1), (x ∨ y, 1), (¯y, 1)} ⇒ {(2, 1)}. However,
since such rules are not equivalent, they can not be used to
achieve a tight lower bound usually. In Section 4, we will
discuss this problem.

3 Some Λ-Equivalent Inference Rules
In this section we present two Λ-Equivalent Rules and show
in which situation they can be applied.

IJCAI-07

2336

The ﬁrst Λ-equivalent rule we propose is

1-RES: {(x ∨ A, u), (¯x ∨ B, w)} ⇒ {(A ∨ B, min{u, w})}2
where x is a literal, and A and B are arbitrary clauses (may
be empty).
Theorem 2 Let Λ be a non-empty set of variables.
var(x) /∈ Λ, then 1-RES is a Λ-equivalent rule.
Proof Without loss of generality, we may consider A and
It is easy to verify that {(x ∨ A, u), (¯x ∨
B as variables.
B, w)} |= {(A ∨ B, min{u, w})}, so for any weighted for-
mula P, whenever {(A ∨ B, min{u, w})} |= P , we also have
{(x∨A, u), (¯x∨B, w)} |= P . Now suppose {(x∨A, u), (¯x∨
B, w)} |= P , where P is a weighted formula not containing
x. There are four cases.

If

• Case 1: A = 0 and B = 0, if x = 0, the cost is u,
otherwise the cost is v, from Lemma 1, the cost of P
in this case should be less than min{u, v}, which is not
greater than the formula {(A ∨ B, min{u, w})} in this
case.

• Case 2: A = 0 and B = 1, if x = 0 the cost is u,
otherwise is 0, from Lemma 1, the cost of P should be
0, which is also not greater than {(A∨B, min{u, w})}.
• Case 3: A = 1 and B = 0, analysis is similar with above

cases.

• Case 4: A = 1 and B = 1, analysis is similar with above

cases.

To sum up, we can conclude that no matter in which case,
the cost of P is less than or equal to {(A ∨ B, min{u, w})},
so we also have {(A ∨ B, min{u, w})} |= P .
(cid:2)

According to Theorem 1 and Theorem 2, if a formula F
contains (x ∨ A, u) and (¯x ∨ B, w), and var(x) does not
occur in other clauses in F, we can apply 1-RES to F .
Example 2 Let F = {(x ∨ y, 2), (¯x ∨ z, 3)}. If we apply the
RES rule, we will get {(y ∨z, 2), (¯x∨z, 1), (x∨y ∨ ¯z, 2), (¯x ∨
¯y∨z, 2)}, which is too complicated. But if we apply the 1-RES
rule, we will get a much simpler formula {(y ∨ z, 2)}.

The second Λ-equivalent rule we propose is

2-RES: {(x, u), (x ∨ y, v), (¯x ∨ A, w)} ⇒

{(y ∨ A, min{u ⊕ v, w}), (¯y ∨ A, min{u, w})}

where x and y are literals, and A is the conjunction of arbi-
trary literals (may be empty).

Note that we can apply the RES rule to the right side of the

2-RES rule to get simpler formula further.
Theorem 3 Let Λ be a non-empty set of variables.
var(x) /∈ Λ, then 2-RES is a Λ-equivalent rule.

If

Proof The proof is similar with Theorem 1, so we omit it
here.
2

According to Theorem 1 and Theorem 3, if a formula F
contains {(x, u), (x ∨ y, v), and (¯x ∨ A, w), and var(x) does
not occur in other clauses in F, we can apply 2-RES to F .

2This rule can be considered as an extension of the elimination

rule [Bansal and Raman, 1999] to weighted MAX-SAT.

4.

5.

6.

7.

8.

9.

10.

11.

12.

13.

14.

15.

IJCAI-07

2337

Example 3 Let F = {(x, 3), (x ∨ y, 2), (¯x ∨ z, 1), (¯z, 1)}.
The 2-RES rule transforms F into {(y ∨ z, 1), (¯y ∨
z, 1), (¯z, 1)}. And the RES rule transform the resulting for-
mula into {(z, 1), (¯z, 1)}, which can be simpliﬁed to {2, 1}.

4 A New Lower Bound Function for

MAX-2-SAT

MAX-2-SAT is a special case of weighted MAX-SAT, in
which each clause has weight 1 and at most two literals.
[Shen and Zhang, 2004] studied several lower bound func-
tions for MAX-2-SAT, and proposed a lower bound function
lower bound4a, which is proved to be admissible and consis-
tently better than others. The procedure for calculating this
function is as follows (LB1 is the number of conﬂicting (or
empty) clauses by the current partial assignment).

function lower bound4a(i:integer):integer;
1. LB4:=LB1;
2. while (i ≤ n) do
3.

LB4:=LB4+min(μ(¯i),μ(i));
t := |μ(¯i) − μ(i)|;
if μ(¯i) > μ(i) then Y := B(i) else Y := B(¯i);
S := φ;
for j ∈ Y if (t > 0) do

if (μ(j) > μ(¯j)) then S := S ∪ {j} else

t := t − 1; μ(j) := μ(j) + 1;

end if

end for
for j ∈ S if (t > 0) do

t := t − 1; μ(j) := μ(j) + 1;

end for
i := i + 1;

16. end while

17. return LB4;

end function

Procedure 3: The procedure for computing LB4a.

The main idea of this procedure is to exploit the inference
rule {(¯x, 1), (x ∨ y, 1), (¯y, 1)} ⇒ {(2, 1)} to obtain a lower
bound (Due to limited space, for more details, please refer to
the original paper). However, this rule is not equivalent, so
the tight may be not tight enough. According to the RES rule,
{(¯x, 1), (x ∨ y, 1), (¯y, 1)} ≡ {(¯x ∨ ¯y), (2, 1)}, so we exploit
the rule {(¯x, 1), (x ∨ y, 1), (¯y, 1)} ⇒ {(¯x ∨ ¯y, 1), (2, 1)} to
get a better lower bound. Procedure 4 illustrates our algo-
rithm. Line 12 and 17 change the formula by deleting x ∨ y
and adding the clause ¯x∨ ¯y. k can be considered as a constant
number, in our code, we choose k = 3. So the time complex-
ity of lower bound5 is the same as lower bound4a. In order
to compare with lower bound4a, we write the pseudo code in
the same style as procedure 3. Note that the real code is far
from this pseudo code.

function lower bound5(i, k:integer):integer;
1. LB5:=LB1;

i1 := i;

2.
3. while (k > 0) do
4.

while (i ≤ n) do

5.

6.

7.

8.

9.

10.

11.

12.

13.

14.

15.

16.

17.

18.

19.

20.

21.

22.

LB5:=LB5+min(μ(¯i),μ(i));
t := |μ(¯i) − μ(i)|;
if μ(¯i) > μ(i) then Y := B(i) else Y := B(¯i);
S := φ;
for j ∈ Y if (t > 0) do

if (μ(j) > μ(¯j)) then S := S ∪ {j} else

t := t − 1; μ(j) := μ(j) + 1;
B(i) := B(i) − {j}; B(¯i) := B(¯i) ∪ {¯j};

end if

end for
for j ∈ S if (t > 0) do

t := t − 1; μ(j) := μ(j) + 1;
B(i) := B(i) − {j}; B(¯i) := B(¯i) ∪ {¯j};

end for
if μ(¯i) > μ(i) then μ(¯i) := t else μ(i) := t;
i := i + 1;

end while
i := i1; k := k − 1;

23. end while

24. return LB5;

end function

Procedure 4: The procedure for computing LB5.

The following theorem shows that LB5 is admissible and

consistently better than LB4a.
Theorem 4 LB4a ≤ LB5 ≤ OP T (F ).

5 Experimental Results

The experimental results are presented in this section. Our
solver, called Λ-SAT, is compared with the solver Tool-
bar (http://carlit.toulouse.inra.fr/cgi-bin/awki.cgi/SoftCSP),
which implemented by [Larrosa and Heras, 2005; Heras
and Larrosa, 2006]. Other solvers are not freely available
and [Heras and Larrosa, 2006] showed that Toolbar outper-
forms others. So we only compare our solver with Toolbar.

Our solver implements the variable selection strategy
known as Jeroslow-Wang rule [Jeroslow and Wang, 1990],
which is widely employed in state-of-art SAT solvers. For
inference rules, we choose the same as [Heras and Larrosa,
2006], additionally we also employ the new rules proposed in
this paper. Our tool is implemented in C.

We run two solvers with random MAX-2-SAT (experimen-
tal results are illustrated in Table 1, #var stands for the number
of variables and #cls stands for the number of clauses, #node
stands for the mean number of nodes of the whole search tree,
time stands for the mean running time over 30 instances) and

MAX-3-SAT instances (experimental results are illustrated in
Table 2). The instances are generated by the well-know gen-
erator Cnfgen. Executions are run on a 2.4 Ghz Pentium 4
computer with Linux.

Problem

Toolbar

Λ-SAT

#var
50

100

150

#cls
100
150
200
250
300
350
400
450
500
550
600
650
700
200
250
300
350
400
450
500
300
350
400
450
500

#node
383
541
748
1167
1803
2771
4213
5214
7264
8761
13140
18160
24973
1877
5135
10405
28698
60210
115093
244641
13608
62872
216731
575106
1358349

time(s)
0.00
0.01
0.02
0.04
0.07
0.13
0.22
0.29
0.42
0.54
0.82
1.14
1.61
0.09
0.42
1.05
3.39
7.48
15.10
33.26
2.28
13.14
47.83
128.77
320.63

#node
6
37
150
289
685
997
1887
2815
3674
4530
7365
10523
14378
155
967
3217
9759
26931
54202
116368
3961
20706
89632
202468
527558

time(s)
0.03
0.04
0.05
0.06
0.09
0.11
0.17
0.24
0.30
0.38
0.58
0.81
1.09
0.09
0.18
0.46
1.31
3.74
7.39
16.01
0.94
4.57
19.99
47.44
127.43

Table 1: The experimental results on random MAX-2-SAT.

Problem

Toolbar

Λ-SAT

#var
50

80

120

#cls
150
200
250
300
350
400
450
500
550
600
650
700
300
350
400
450
500
450
500

#node
209
657
4087
9889
26836
51133
77010
141339
208578
383773
434565
673423
2283
21204
115956
552097
1412277
39008
386564

time(s)
0.00
0.01
0.12
0.35
1.09
2.28
3.74
7.18
11.32
22.31
25.71
40.80
0.08
1.09
7.07
37.65
104.62
3.23
39.04

#node
0
51
1320
5051
13329
28257
41410
72781
129703
188048
276834
368897
0
2566
29980
218965
604266
0
48689

time(s)
0.00
0.00
0.10
0.25
0.63
1.37
2.13
4.03
7.34
11.07
16.91
23.42
0.00
0.18
1.90
15.18
45.93
0.00
4.85

Table 2: The experimental results on random MAX-3-SAT.

The results demonstrate that for small instances, the perfor-
mance of the our solver is nearly the same as Toolbar, while

IJCAI-07

2338

for large instances the former outperforms the latter, and es-
pecially for some larger instances, our solver can be orders of
magnitude faster than Toolbar.

6 Conclusions and Future Work

The main contributions of this paper are in two aspects. First,
we develop a general logical framework that is suitable for
studying weighted MAX-SAT problem. This is because many
concepts in SAT are easy to be extended in our framework.
This may provide more chances to extend techniques taken
by SAT solvers to MAX-SAT solvers. Second, we propose
several new inference rules, which can be exploited to get
lower bound of better quality. The experimental results sup-
port our conclusion.

For future work, we will further study how to extend SAT
techniques to MAX-SAT solver, such as clause learning and
restarts. Moreover, for unweighted MAX-SAT, we notice
that several lower bound computation techniques [Li et al.,
2006], which focus on searching for disjoint inconsistent
subformulas, have been proposed. Based on our logical
framework, we will attempt to generalize such techniques
to compute lower bounds for weighted MAX-SAT efﬁ-
ciently. Recently, a simple model have been presented
for generating random weighted MAX-2-SAT instances
(http://www.nlsde.buaa.edu.cn/
kexu/benchmarks/max-sat-
benchmarks.htm).
Such instances are transformed from
forced satisﬁable SAT instances of Model RB [Xu and Li,
2006; Xu et al., 2005] and are, unfortunately, too hard for
both toolbar and our solver. We will try to improve our solver
to handle these benchmarks within reasonable time.

References

[Alsinet et al., 2003] T. Alsinet, F. Many`a, and J. Planes. Im-
proved branch and bound algorithms for max-sat. In Pro-
ceedings of the 6th International Conference on the Theory
and Applications of Satisﬁability Testing, 2003.

[Bansal and Raman, 1999] N. Bansal and V. Raman. Upper
bounds for maxsat: further improved. In Proceedings of
ISAAC 1999, pages 247–258, 1999.

[Borchers and Furman, 1999] B. Borchers and J. Furman. A
two-phase exact algorithm for max-sat and weighted max-
sat problems.
Journal of Combinatorial Optimization,
2(4):299–306, 1999.

[Davis et al., 1962] M. Davis, G. Logemann, and G. Love-
land. A machine program for theorem proving. Commu-
nications of the ACM, 5:394–397, 1962.

[de Givry et al., 2003] S. de Givry, J. Larrosa, P. Meseguer,
and T. Schiex. Solving max-sat as weighted csp. In Proc.
of the 9th CP, pages 363–376, Kinsale, Ireland, 2003.
Springer LNCS 2833.

[Gramm et al., 2003] J. Gramm, E.A. Hirsch, R. Nieder-
meier, and P. Rossmanith. Worst-case upper bounds for
max-2-sat with application to max-cut. Discrete Applied
Mathematics, 130(2):139–155, 2003.

[Heras and Larrosa, 2006] Federico Heras and Javier Lar-
rosa. New inference rules for efﬁcient max-sat solving.
In Proceedings of the 21st AAAI, Boston, Massachusetts,
July 2006.

[Jeroslow and Wang, 1990] R.G. Jeroslow and J. Wang.
Solving propositional satisﬁability problems. Annals of
Mathematics and Artiﬁcial Intelligence, 1:167–187, 1990.
[Kautz and Selman, 2005] Henry Kautz and Bart Selman.

The state of sat. Discrete and Applied Math, 2005.

[Larrosa and Heras, 2005] Javier Larrosa

and Federico
Heras. Resolution in max-sat and its relation to local
consistency in weighted csps. In Proceedings of the 19th
IJCAI, Edinburgh, Scotland, 2005.

[Li et al., 2005] Chu Min Li, Felip Many`a, and Jordi Planes.
Exploiting unit propagation to compute lower bounds in
branch and bound max-sat solvers. In Proceedings of the
11th International Conference on Principles and Prac-
tice of Constraint Programming, pages 403–414, Sitges,
Spain, 2005. Springer LNCS 3709.

[Li et al., 2006] Chu-Min Li, Felip Many`a, and Jordi Planes.
Detecting disjoint inconsistent subformulas for comput-
ing lower bounds for max-sat. In Proceedings of Twenty-
First National Conference on Artiﬁcial Intelligence (AAAI
2006), July 2006.

[Park, 2002] J. D. Park. Using weighted max-sat engines to
solve mpe. In Proceedings of 18th AAAI, pages 682–687,
2002.

[Shen and Zhang, 2004] H. Shen and H. Zhang. Study of
lower bound functions for max-2-sat. In Proceedings of
AAAI-2004, pages 185–190, 2004.

[Strickland et al., 2005] Dawn M. Strickland, Earl Barnes,
and Joel S. Sokol. Optimal protein structure alignment
using maximum cliques. Operations Research, 53(3):389–
402, May–June 2005.

[Vasquez and Hao, 2001] M. Vasquez and J. Hao. A logic-
constrained knapsack formulation and a tabu algorithm for
the daily photograph scheduling of an earth observation
satellite. Journal of Computational Optimization and Ap-
plications, 20(2), 2001.

[Xing and Zhang, 2005] Z. Xing and W. Zhang. Maxsolver:
An efﬁcient exact algorithm for (weighted) maximum sat-
isﬁability. Artiﬁcial Intelligence, 164(1-2):47–80, 2005.

[Xu and Li, 2006] Ke Xu and Wei Li. Many hard examples
in exact phase transitions. Theoretical Computer Science,
355:291–302, 2006.

[Xu et al., 2003] H. Xu, R. Rutenbar, and K. Sakallah.
sub-sat: a formulation for relaxed boolean satisﬁabil-
ity with applications in routing.
IEEE Transactions on
Computer-Aided Design of Integrated Circuits and Sys-
tems, 22(6):814–820, June 2003.

[Xu et al., 2005] Ke Xu, Frederic Boussemart, Fred Hemery,
and Christophe Lecoutre. A simple model to generate hard
satisﬁable instances. In Proceedings of 19th International
Joint Conference on Artiﬁcial Intelligence (IJCAI 2005),
pages 337–342, Edinburgh, Scotland, 2005.

IJCAI-07

2339

