Session  14  Natural  Language: 
Semantics  and  Parsing 

Abstract 

A  LINGUISTICS  ORIENTED  PROGRAMMING  LANGUAGE 

Vaughan  R.  Pratt 

Massachusetts 

I n s t i t u te  of  Technology 

Cambridge,  Massachusetts 

A  programming  language  for  natural 

language  pro(cid:173)

is  described.  Examples  of  the  output 

cessing  programs 
of  programs  w r i t t en  using 
for  various  design  decisions  are  discussed.  An  actual 
session  with  the  system  is  presented,  in  which  a  small 
fragment  of  an  English-to-French  t r a n s l a t or  is  devel(cid:173)
oped.  Some  of  the  l i m i t a t i o ns  of  the  system  are  d i s(cid:173)
cussed,  along  with  plans  for  further  development. 

it  are  given.  The  reasons 

1.  Overview 

This  paper  presents  some  aspects  of  work  done  at 

language 

odd  intervals  over  the  past  two  years, 
f i r st  at  Stan(cid:173)
ford  and  then  at  MIT,  on  a  project  to  develop  a  pro(cid:173)
gramming  language  suitable  for  w r i t i ng  natural 
processing  programs.  The  relevant  acronym  is  LINGOL, 
for  Linguistics  Oriented  Language.  Similar  projects 
such  as  COMIT21  and  i ts  successors  METEOR2  and  SNOBOL5 
no  longer  r e f l e ct  the  state  of  the  a rt  of  computational 
l i n g u i s t i c s; 
indeed,  they  do  not  r i se  above  the  remark 
that  computational 
cessing  text  s t r i n g s.  The  issue  addressed  in  these 
pages 
to  the  syntax-semaotics 
arises 
languages.  A  secondary  issue,  to  be  dealt  with  else(cid:173)
the  r e l a t i ve  merits  of  various  parsing 
where,  concerns 
strategies  for  phrase-structure  oriented  grammars,  and 
the  development  of  a  parsing  algorithm  superior  to 
both 
(See  Aho  and  Ullman1  ,  p.  314). 

interface,  an  a r t i f i ce  that 
the  phrase-structure  paradigm  for  natural 

is  that  of  the  programming  technology  appropriate 

the  Barley  and  Cocke-Kasami-Younger  procedures. 

is  concerned  with  pro(cid:173)

l i n g u i s t i cs 

in 

Following  Winograd's 

lead,  we  begin  by  giving 

in 

f or  a ll  concerned.  The 

some  examples  of  the  output  of  programs  w r i t t en 
LINGOL.  The  point  of  having  a  programming  language  is 
to  make  programming  less  painful 
interesting  property  of  these  programs 
them  were  w r i t t en  in  quite  a  short  space  of  time  by 
students  with  no  experience  in  either  LINGOL  or  l i n(cid:173)
g u i s t i c s.  Another  program  (the  French  translator)  was 
designed,  w r i t t en  and  debugged  from  scratch  for  demon(cid:173)
stration  purposes  by  the  author  from  3:00  a.m. 
8:00  a.m.  of  the  morning  he  was  scheduled  to  give  a 
t a lk  on 

that  two  of 

i t. 

to 

is 

The  f i r st  program  was  w r i t t en  in  September  1970, 
It  was  a  sort 

to  test  out  the  f i r st  version  of  LINGOL. 
of  "deep  structure"  analyzer  which  attempted  to  make 
syntactic  remarks  about  sentences  (Figure  1).  The  gram(cid:173)
mar  used  in 
programs. 

the  basis  for  the  next 

it  served  as 

two 

The  system  languished  for  six  months  u n t il  a  grad(cid:173)

uate  student,  B i ll  Faught, 
project  in  an  A . I.  workshop.  He  took  two  weeks  to 
w r i te  an  English-to-German  t r a n s l a t or  (Figure  2). 

took  advantage  of 

it  for  a 

Later,  Faught  decided  to  do  some  serious  work  on 

questioning-answering  systems,  and  soon  produced  a  com(cid:173)
prehension  program  (Figure  3)  that  r e l i ed  on  a  r e l a(cid:173)
tional  model  of  the  world  in  which  a ll 
related  concepts 
were  represented  in  a  graph  as  vertices  linked  by  two-
way  labeled  edges.  Recently  he  has  produced  considera(cid:173)
bly  more 
it  is  more  appropriate 
that  Faught  himself  report  on  them. 

impressive  r e s u l t s,  but 

The  French  translator  (Figure  4)  was  w r i t t en  by 
the  author  early  in  1972,  f or  demonstration  purposes. 
The  program  consisted  of  a  page  of  grammar  and  seman(cid:173)
t i c s,  a  page  of  dictionary  and  a  page  of  useful 
func(cid:173)
tions  f or  conjugating  verbs,  arranging  agreements  of 
a r t i c l es  and  adjectives,  performing  liason  and  so  on,  so 
it  was  not  p a r t i c u l a r ly  large. 

The  point  of 

it  was 

372 

it  was  easy  to  w r i t e; 
it  was  s u f f i c i e n t ly  succinct  to  be  suitable  for 

i) 
i i) 
e x h i b i t i o n;  and 
( i i i) 
which 

it  dealt  competently  with 
it  was  defined. 
It  is  easy  to  claim  t h a t,  since  t h is 

is  a  toy 

that  part  of  English 

for 

is 

it  says  nothing  about  the  real  world.  This 

t r a n s l a t o r, 
is  c e r t a i n ly  true  with  respect  to  polysemy.  However, 
false  with  respect  to  e x t e n s i b i l i ty  of  grammati-
it 
cla  r u l e s;  we  shall 
l a t er  demonstrate  the  s t r i k i ng  ef(cid:173)
fects  obtained  on  adding  very  simple  rules.  More  re(cid:173)
c e n t l y,  another  four  hours  of  work  gave  a  s e l f - t u t o r(cid:173)
ing  capacity  to  the  program  (Figure  5).  Notice  how 
unknown  words  are  c o r r e c t ly  c l a s s i f i ed  as  to  part  of 
speech  before  the  program  requests 

information. 

We  have  been  basking  in  these  examples  somewhat 

It  is  very  much  l i ke  explaining  the 

v i c a r i o u s l y. 
advantages  and  disadvantages  of  FORTRAN  by  exhibiting 
the  output  of  some  FORTRAN  programs.  Thus  the  reader 
should  only  infer  from  these  examples 
of  LINGOL,  and  a  lower  bound  on  what  can  be  achieved 
with 
i t;  he  should  i n f er  i ts  q u a l i ty  or  lack  of  it  not 
from  here  but  from  the  following. 

the  existence 

2.  Terminology  and  Perspective 

Let  us  set  the  stage  preparatory  to  giving  some 

the 

target 

translators 

language 
the  natural 

d e f i n i t i o n s,  we  need  a  paradigm  for  computational 
translation 
l i n g u i s t i cs  programs,  and  we  choose 
paradigm  as  best  describing  the  LINGOL  system.  The 
t r a n l a t i on  paradigm  characterizes  natural 
processing  programs  as 
from 
source  language  to  some  natural  or  formal 
language,  whether  French,  LISP,  structural  descrip(cid:173)
t i o n s,  predicate  calculus,  conceptual  dependency 
diagrams  or  what  have  you.  No  loss  of  generality  is 
entailed  here,  for  by  simply  making  the  target 
language  a  programming  language,  any  other  paradigm 
may  be  conveniently  emulated.  The  obvious  competitor 
is  the  stimulus-response  paradigm, 
in  which  the  input 
isseen  as  a  stimulus  that  e l i c i ts  an  action.  Again 
no  loss  of  generality  can  occur,  since  a  possible 
action  is  to  emit  an  utterance.  The  main  advocate  of 
t h is  paradigm  is  Narasimhan  13  although 
to 
be  the  i m p l i c it  paradigm  in  many  extant  programs.  We 
prefer  the  former  paradigm  for  no  very  good 
although  we''do  f i nd 
pulate  and  characterize  utterances  rather  than  actions. 
In  p a r t i c u l a r, 
in  the  programming  methodology  to  be 
described,  large  items  are  gradually  b u i lt  up  from 
smaller  ones,  and  it 
stimulus-response 

it  easier  conceptually  to  mani(cid:173)

t r i c ky  to  cast  t h is 

it  appears 

reason, 

format. 

in  a 

is 

Within  the  t r a n s l a t i on  paradigm  we  shall 

i d e n t i fy 

it  is 

in  which  the  input  is  pre-

two  main  phases,  cognitive  and  generative.  The  cog(cid:173)
n i t i ve  phase  is  parsing, 
processed  u n t il 
in  a  form  convenient  for  opera(cid:173)
tion  on  by  the  generative  phase,  which  then  produces 
the  t r a n s l a t i on  as  output.  The  paradigm  i t s e lf  does 
not  require  that  one  phase  run  to  completion  before 
the  other  can  s t a r t. 
program 
makes  e f f e c t i ve  use  of  feedback  from  the  p a r t i al  re(cid:173)
sults  of  his  generative  routines  in  guiding  the  cog(cid:173)
n i t i ve  routines,  by  attempting  to  b u i ld  a  semantic 
structure  f o r,  say,  a  Noun  Group,  before  continuing 
with  the  parsing. 

Indeed,  Winograd's 

We  are  now  prepared  for  the  d e f i n i t i o n s.  By 
syntax  is  meant  a ll  aspects  of  the  source  language 
involved 
as  phrase  structure  rules  and  semantic  markers.  By 
semantics  we  r e f er  to  what  is  involved  1n  going  from 

in  the  cognitive  phase, 

including  such  things 

373 

374 

the  source  language  (after  the  syntactic  preproces(cid:173)
sing)  to  the  target  language  during  the  generative 
phase.  By  pragmatics  we  mean  knowledge about  the 
universe  of  discourse,  and  the  local  context,  that  may 
be  consulted  by  both  the  cognitive  and  generative 
phases  as  they  make  decisions. 

Each  of  these  three  concepts  has  been  used  many 
times  in  the  literature,  with  varying  shades  of  mean(cid:173)
ing  and  precision,  so  we  are  not  redefining  previously 
well-defined  terms.  Rather,  we  see  three  main  aspects 
to  the  programs  written  in  LINGOL,  and  found  three 
reasonably  uncommitted  terms  with  which  to  label  them. 
(The  f i r st  two  definitions  coincide  more  or  less  with 
those  of  Winograd16,  so  we  are  not  too  far  afield.) 
{ It  may  seem  paradoxical  to  include  semantic 

markers  in  syntax,  but  this  is  just  the  consequence 
of  our  usage  of  the  word  semantics  as  opposed  to  that 
of,  say,  Katz  and  Fodor9.  With  respect  to.our  usage, 
semantic  markers  represent  an  attempt  to  encode  a 
tiny  fragment  of  pragmatics  into  syntax  (or  into 
linguistics,  to  use  the  Katz  and  Fodor  terminology, 
and  their  equation  SEMANTICS  =  LINGUISTICS  -  SYNTAX). 
We  do  not  want  to  make  value  judgment;  about  such 
an  encoding;  the  example  simple  serves  to  illustrate 
the  perspective  induced  by  our  definition.) 

3.  Design  Philosophy 

There  is  not  one  philosophy  in  LINGOL,  but  three, 
each  tuned  to  the  requirements  of  the  three  concepts 
defined  above. 
In  the  current  version  of  LINGOL,  the 
philosophies  are  roughly  as  follows. 

3.1  Syntax 

Although  this  paper  1s  concerned  mainly  with  the 

semantic  component  of  LINGOL,  it  behoves  us  to  con(cid:173)
sider  syntax  since  the  cognitive  phase's  output  is 
the  generative  phase's  input.  The  central  decision  to 
be  made  here  is  the  choice  of  representation  for  this 
output. 
It  seems  to  be  necessary  to  discover  the  re(cid:173)
lations  between  the  words  of  the  sentence,  or  the 
phrases  of  the  sentence,  or  the  entities  denoted  by 
those  words  or  phrases.  Corresponding  to  each  of 
these  possibilities  are  dependency  structures8  15 
phrase  structures  (almost  everybody)  and  conceptual 
dependency  networks.14  Actually  the  f i r st  two  are 
not  mutually  exclusive,  since  it  is  perfectly  rea(cid:173)
sonable  to  construct  structures  which  contain  all  the 
information  of  both  techniques.  We  shall  use  the 
term  syntactic  structure  to  refer  to  such  a  coalition, 
to  distinguish  it  from  a  concept  structure. 

LINGOL  is  meant  to  be  a  practical  system  suitable 

for  export  and  immediate  use  by  practising  computa(cid:173)
tional  linguists.  The  technology  for  phrase  struc(cid:173)
ture  is  far  advanced  over  any  other  technology,  and 
every  successful  program  for  the  past  eight  years  or 
so  has  unashamedly  used  i t.  Also,  it  is  fairly  easy 
to  convert  a  phrase  structure  system  to  a  syntactic 
structure  system,  by  tagging  each  phrase  with  the 
corresponding  governing  word  together  with  pointers  to 
the  dependent  phrases  (and  hence  words). 

For  these  reasons,  the  decision  was  made  to  use 
phrase  structure  as  the  output  of  the  cognitive  phase, 
leaving  the  other  representations  as  projects  to  be 
experimented  with  in  the  future. 
It  is  worth  noting 
at  this  point  that  the  Idea  of  a  concept  structure  is 
a  very  powerful  one,  especially  in  combination  with 
Fillmore's6  notion  of  case,  as  suggested  by  Shank14. 
The  notion  of  phrase  concatenation  is  nowhere  near  as 
rich  as  that  of  case-based  relations  between  concepts. 
On  the  other  hand,  this  does  not  make  phrase-structure 
a  hopeless  loser;  1n  principle  it  is  possible  to  con(cid:173)
struct  these  relations  during  the  generative  phase. 
However,  Shank's  point  1s  that  the  information  so 

discovered  1s  vital  to  the  cognitive  phase.  More  re(cid:173)
cent  phrase-structure  systems,  including  those  of 
Bobrow  and  Frazer3,  Woods20  ,  Winograd16  and  the  sys(cid:173)
tem  described  here  make  provision  for  discovering  this 
sort  of  information  while  building  the  phrase  struc(cid:173)
ture.  This  immediately  raises  the  question,  why  not 
build  the  concept  structure  anyway,  since  this  infor(cid:173)
mation  is  being  discovered?  This  point  seems  un-
anwerable,  and  is  an  excellent  area  for  more  research. 
In  the  case  of  LINGOL,  we  have  a  half-answer,  in  that 
we  have  developed  what  we  feel  is  very  nice  program(cid:173)
ming  methodology  for  dealing  with  phrase  structures 
during  the  generative  phrase.  An  avenue  for  research 
is  to  see  if  this  methodology  carries  over  to  concept 
structures. 

Given  that  LINGOL  is  based  on  phrase  structure, 
the  next  issue  is  that  of  the  user's  language  for  des(cid:173)
cribing  how  that  phrase-structure  is  to  be.built.  The 
two  criteria  here  are  expressive  power  and  ease  of  use. 
For  our  f i r st  iteration  of  LINGOL,  since  we  were  more 
interested  in  rapidly  developing  the  semantics  tech(cid:173)
nology,  we  opted  to  sacrifice  expressive  power  for 
ease  of  use  if  necessary.  This  corresponds  in  a  way 
to  Woods19  and  Charnlak*  assuming  the  existence  of 
some  sort  of  parser  and  continuing  from  there.  The 
differences  are  f i r s t ly  that  both  addressed  pragmatic 
issues  while  we  address  semantic,  and  secondly  that 
whereas  they  made  up  their  own  parsed  output,  LINGOL 
is  equipped  with  a  parser,  on  the  philosophy  that  it 
is  easier  to  type  unparsed  than  parsed  sentences,  and 
that  no  harm  is  done  when  the  parser  gangs  agley, 
which  in  practice  occurs  satisfactorily  infrequently 
anyway. 

The  user's  language  for  the  cognitive  component 
was  therefore  chosen  to  be  context-free  rules,  since 
these  are  very  easy  to  write.  They  have  exactly  the 
same  expressive  capacity  as  Wood's  transition  net(cid:173)
works20.  Moreover,  just  as  Woods  extended  the  capaci(cid:173)
ty  of  these  networks  by  allowing  the  user  to  specify 
operations  on  registers,  so  do  we  permit  the  user  to 
supply  code  to  give  hints  to  the  parser  whenever  it  is 
about  to  apply  a  rule.  This  code  has  access  to  the 
part  of  the  tree  built  so  far  by  the  parser  and  re(cid:173)
levant  to  the  rule  in  question,  and  also  to  the  user's 
data  base,  or  pragmatics  (which  seems  to  make  semantic 
markers  unnecessary  as  a  special  feature  of  LINGOL). 
The  form  of  the  hint  is  a  grunt  of  approval  or  disap(cid:173)
proval,  at  a 'volume  appropriate  for  the  particular 
hint,  and  in  this  respect  is  just  like  Winograd's 
numerical  treatment  of  ambiguity18.  So  far,  however, 
none  of  the  programs  written  in  LINGOL  have  made  more 
than  trivial  use  of  this  feature,  in  sharp  contrast 
to  the  use  made  of  the  features  in  the  semantics  stage. 

With  respect  to  the  actual  parser  used,  the  syn(cid:173)
tax  philosophy  is  that  the  parser  should  be  transparent 
to  the  user,  to  within  the  representation  of  the  parts 
of  the  tree  to  which  the  user's  code  has  access  during 
the  cognitive  phase.  This  philosophy  has  enabled  us 
to  run  without  alteration  each  of  a  number  of  different 
LINGOL  programs  in  conjunction  with  various  parsing 
algorithms.  The  details  of  these  parsers  and  experi(cid:173)
ments  are  beyond  the  scope  of  this  paper. 

3-2  Semantics 

In  programming  his  semantics,  the  user  should  be 
able  to  work  without  the  distracting  detail  of  parsing, 
tree  representation,  and  ambiguity.  The  point  of 
identifying  the  cognitive  and  generative  phases  is  to 
isolate  these  issues  logically  in  order  to  achieve 
this  division  of  labor.  Whether  writing  an  English-
to-French  translation  program  or  a  question-answering 
system,  there  are  many  details  to  worry  about  that 
have  absolutely  no  relevance  to  the  cognitive  phase; 
the  myriad  idiosyncrasies  of  French  grammar  and  style, 
the  various  searching  algorithms  and  inference  rules 

375 

that  are  tightly  coupled  in  a  QA  system  to  the  sur(cid:173)
face  structure  information,  and  so  on.  Without  some 
method  in  this  large-scale  madness,  progress  is  bound 
to  be  slow. 

Furthermore,  we  believe  that  a  high  level  of 
performance  will  be  forthcoming  from  the  cognitive 
phase  of,  say,  machine  translation  programs,  long  be(cid:173)
fore  a  similarly  impressive  level  is  attained  by  the 
generative  phase.  This  is  partly  because  comparative(cid:173)
ly  l i t t le  work  is  being  done  on  generative  aspects  of 
MT,  but  more  because  it  is  inherently  harder  to  say 
something  with  good  grammar  and  style  than  it  is  sim(cid:173)
ply  to  understand  what  is  being  said  (at  least  expli(cid:173)
c i t l y ! ).  The  cognitive  phase  can  ignore  most  details 
In  every 
of  style,  and  many  details  of  grammar. 
program  written  so  far  with  LINGOL,  the  generative 
component  has  been  about  three  times  the  size  of  the 
cognitive  component,  and  our  prediction  is  that  this 
ratio  will  increase  as  each  phase  is  improved. 

In  taking  this  point  of  view,  we  are  following 
a  different  philosophy  from  that  of  Winograd18,  who 
makes  use  of  strong  interaction  between  the  syntax 
and  semantics  components,  which  is  one  of  the  more 
notable  features  of  his  program.  However,  the  result 
has  been  to  produce  a  program  whose  details  are  lost 
in  the  richness  of  this  interaction,  and  1  have  heard 
Winograd  mutter  when  looking  at  a  part  of  the  program 
for  "BE",  "I  don't  remember  writing  that". 

For  the  moment  we  are  willing  to  sacrifice  what(cid:173)
ever  additional  power  this  approach  has  to  offer  for 
the  sake  of  being  able  to  write  clean,  modular,  trans(cid:173)
parent  semantic  code.  However,  we  do  not  believe 
that  in  order  to  restore  this  power  we  need  to  restore 
this  interaction. 
Instead,  we  plan  to  rely  eventually 
on  strong  interaction  between  syntax  and  pragmatics, 
leaving  semantics  as  the  cognition-independent  arena. 
This  is  not  just  passing  the  buck;  since  we  see  seman(cid:173)
tics  as  being  more  complex  than  syntax,  we  are  trying 
to  divide  the  work-load  more  evenly  to  keep  all  mod(cid:173)
ules  reasonably  small.  How  syntax  is  to  consult  prag(cid:173)
matics  is  material  for  future  research.  Our  point  is 
that  the  bulk  of  semantics  is  irrelevant  to  syntax. 

The  issue  now  is  simply,  how  does  one  write  pro(cid:173)

grams  that  operate  on  trees(the  output  of  LINGOL's 
cognitive  phase)?  This  issue  has  been  addressed  by 
computer  scientists  in  connection  with  compiling  for 
the  past  ten  years,  and  the  discipline  of  syntax 
directed  translation  has  gradually  emerged.  An  early 
syntax,  directed  translator  is  that  of  Warshall  and 
Shapiro17.  They  used  the  tree-walk  paradigm,  in  which 
the  semantics  consists  of  programs  that  tell  a  pointer 
to  move  up,  down  or  across  the  tree  and  occasionally 
output  information.  Floyd  (conversation)  has  commented 
that  the  technique  was  much  too  clumsy  for  practical 
applications  when  compared  with  techniques  that  tied 
the  semantics  to  the  syntax  rather  than  to  tne  output 
of  the  syntax. 
It  is  alarming  to  find  Winograd  using 
this  approach  in  his  program,  which  we  conjecture 
would  be  made  more  transparent  by  adopting  a  more  rule-
oriented  and  less  tree-oriented  approach. 

Some  theoretical  work  has  been  done  on  syntax-

directed  translation,  notably  by  Lewis  and  Stearns12, 
Knuth11,  and  Aho  and  Ullman1.  Knuth's  paper  is  of 
interest  in  that  it  deals  with  the  problem  of  passing 
information  up  and  down  a  tree,  using  the  notions  of 
inherited  (from  above)  and  synthesized  (from  below) 
attributes.  All  of  these  studies  suffer,  from  the 
computational 
deal  with  the  microcosm  of  computer  source  and  target 
languages,  in  which  the  former  can  be  made  a  compro(cid:173)
mise  between  the  user's  needs  and  the  syntax-directed 
technology,  and  the  latter  is  a  relatively  well-de(cid:173)
fined,  reference-poor  language  when  compared  with, 
say,  French. 

linguist's  point  of  view,  in  that  they 

Knuth's  inherited  and  synthesized  attributes  come 
closest  to  meeting  our  needs.  The  problem  with  these 
attributes  lies  with  his  mechanism  for  moving  them 
around  a  tree.  Every  node  through  which  information 
is  passed  must  make  explicit  provision  for  forwarding 
i t,  even  if  it  is  irrelevant  to  that  node. 

For  example,  consider: 

No  mother  of  such  twins  has  time  to  relax. 
The  mother  of  no  such  twins  has  time  to 

The  mother  of  such  twins  does  not  have  time 

The  mother  of  such  twins  has  no  time  to 

relax. 

to  relax. 

relax. 

relax. 

(The  second  sentence  is  inspired  by  a  study  of  negation 
by  Klima10. 
with  the  emphasis  on  "no",  before  it  sounds  correct.) 
In  each  case,  what  is  being  negated  is  the  whole 

It  should  be  said  in  a  tone  of  horror, 

sentence,  yet  the  negation  marker  can  be  almost  any(cid:173)
where  in  the  sentence.  This  implies  that  a  large  num(cid:173)
ber  of  rules  will  have  to  make  provision  for  passing 
a  negation  marker  up  the  tree. 

This  problem  can  be  circumvented  by  using  global 
variables  instead  of  Knuth's  attributes.  Now  all  that 
is  needed  is  for  the  negation  marker  to  set  a  negation 
variable,  and  for  the  semantics  at  the  syntactic  clause 
level  to  read  i t. 

However,  consider  the  following: 

The  mother  who  has  no  twins  has  time  to 

This  sentence  makes  a  positive  claim  (as  distinct 
from  the  negative  one  of  the  previous  example)  in  that 
it  says  that  there  actually  are  people  who  do  have  time 
to  relax,  namely  those  mothers  who  have  no  twins, 
(moreover,  it.does  not  explicitly  say  what  happens  to 
mothers  of  twins.)  This  seems  to  be  a  situation  where 
synthesized  attributes  outperform  global  variables, 
since  the  rule  at  the  relative  clause  level  can  simply 
refuse  to  pass  on  the  negation  marker. 

Negation  is  not  the  only  such  troublemaker.  Ar(cid:173)
ranging  subject-verb,  adjective-noun  and  determiner-
noun  agreement  also  requires  passing  information 
around  the  tree,  especially  when  translating  into 
French,  where  word-for-word  translation  does  not 
necessarily  result  in  correct  agreement.  Again, 
having  more  than  one  clause  makes  d i f f i c u lt  the  use  of 
global  variables,  particularly  when  a  plural  relative 
clause  is  separating  a  singular  subject  from  its  verb. 
Consider  the  five  subject-verb  agreements  in: 

As  I  walked  into  the  saloon,  the  three  men 

whom  Jim  talked  to  after  I  left  him  yesterday  grt 
up  and  slowly  walked  towards  me. 
All  of  these  problems  are  "marker"  type  problems. 

Even  worse  is  passing  stylistic  information  from  a 
word  at  the  bottom  of  a  tree  to  a  clause  node  higher 
up,  where  this  information  is  to  be  used  to  alter  the 
whole  structure  of  the  translated  clause.  Again  it 
is  important  that  the  appropriate  clause  get  this 
information. 

The  mechanism  we  want  here  is  that  of  the  local 
variable,  whose  scope  is  the  clause  with  which  it  is 
associated.  With  many  clauses  we  will  associate  many 
more  local  variables  corresponding  to  the  various 
markers  and  other  messages  that  each  clause  may  want. 
Similarly,  we  will  associate  other  local  variables  with 
noun  phrases,  to  achieve  adjective-noun  and  determiner-
noun  agreement. 
these  markers 
(person  and  number,  but  not  gender) 
must  be  shared  with  the  clause  as  well,  to  ensure 
subject-verb  agreement,  but  we  do  not  want  the  clause 
to  share  the  object's  variables.  Also,  a  relative 
clause  such  as  "who  sleeps"  needs  the  same  information 
from  its  govenor  as  does  the  principal  clause.  More(cid:173)
over,  we  will  want  to  pass  not  only  markers,  but  also 

In  the  case  of  the  subject,  some  of 

376 

. 

word-specific  programs  written  at  the  dictionary  lev(cid:173)
el 
(Winograd18makes  use  of  this  technique  for  put-
ing  the  right  programs  in  the  right  places.)  The 
implementation  of  local  variables  must  be  able  to 
handle  these  combinations. 

The  f i r st  version  of  LINGOL  implemented  all  of 
this  in  an  unimaginative  and  not  very  general  way. 
Eventually,  we  saw  the  light  and  came  up  with  the 
program  paradigm  for  syntax-directed  translation. 
The  program  paradigm  says  that  the  surface  struc(cid:173)
ture  tree  is  a  program.  At  each  node  of  the  tree 
there  is  a  function,  and  the  subtrees  of  that  node  are 
the  arguments  of  that  function.  For  example,  if  we 
have  a  tree  labelled 

The  cognitive  part  is  a  LISP  s-expression  (or 

this 
It  is  r e l e(cid:173)

that  should  evaluate  to  a  number  to  indicate 

program) 
to  LINGOL  our  satisfaction  or  otherwise  with 
choice  of  interpretation  for  t h is  word. 
vant  only  when  a  given  word  has  two  dictionary  entries 
corresponding  to  two  parts  of  speech.  Under  these 
circumstances,  we  might  write  a  program  for  each 
entry  to  inspect  the  environment  to  see  how  reasonable 
the  corresponding  interpretation  i s.  These  programs 
would  be  executed  if  and  when  both  interpretations 
were  found  to  make  sense  given  the  context  to  the  l e f t, 
e . g ., 
but  not  in  "the  big  f l i e s . . . ",  where  " f l i e s" 
as  both  a  noun  and  a  verb.  This  component  of  the 
entry  need  not  concern  us 
neutral  by  writing  0  everywhere,  unless  we  happen  to 
d i s l i ke  the  entry  i t s e l f, 
in  which  case  we  w i ll  w r i te 
- 1,  or  -2  if  we  are  in  a  bad  mood. 

in  "the  scout  f l i e s . . ." 

further  here;  we  w i ll 

it  would  be  executed 

is  l i s t ed 

remain 

t h is  corresponds 
" p r i nt  (a  +  b ) x ( ( - c ) - d ) ". 

to 

the  program 

Since  LISP  has  a  mechanism  for  local  variables 

(two,  in  fact  -  PROG  variables  and  LAMBDA  variables), 
by  adopting  the  program  paradigm  we  automatically  get 
local  variables.  Moreover,  because  we  can  write  the 
code  f or  each  function  separately,  we  a t t a in  a  very 
high  level  of  modularity,  which  we  have  found  pays 
o ff  handsomely  when  one  t r i es  to  add  new  rules  to  an 
already  operational  LINGOL  program. 

The  mechanism  we  use  for  running  these  programs 

d i f f e rs  s l i g h t ly  from  LISP's  usual  EVAL  operator.  The 
main  difference 
each  node  f i r s t,  giving  the  function  the  r e s p o n s i b i l i(cid:173)
ty  for  evaluating  subtrees  at  i ts 
the  scopes  of  variables 
t r o l l i ng 
trees. 

l e i s u r e,  and  con-
for  d i f f e r e nt  sub(cid:173)

the  function  at 

it  evaluates 

that 

is 

To  i l l u s t r a te  a ll  of  t h i s,  we  shall  develop  a 

small  French  translator. 
computer  console.  The  following  session  has  a ll 
typing  errors  and  stupid  mistakes  edited  out,  since 
they  rapidly  become  boring  and  obscure  the  main  i s(cid:173)
sues.  The  user  input  is  underlined. 

Imagine  we  are  seated  at  a 

F i r st  we  load  the  system. 

The  generative  part  is  a  function  destined  to  be 
tacked  onto  the  surface  structure.  Since  words  are  at 
the  leaves  of  the  t r e e,  they  have  no  arguments. 
In  the 
rase  of  " t h e ",  when  the  tree  is  evaluated,  the  corre(cid:173)
sponding  leaf  w i ll 
return  a  l i st  of  one  element  (LE) 
as  i ts  value.  The  symbol 
'  is  a  quotation  mark,  and 
means  " l i t e r a l l y ",  so  as  LINGOL  w i ll  not  think  (LE) 
a  program  to  be  executed.  The  other  entries  are  a ll 
s i m i l a r ly  structured.  The  reason  we  use  a  l i st  of  one 
word  rather  than  the  word  i t s e lf  is  that  we  are  going 
to  APPEND  these  l i s ts  together  to  form  longer  l i s t s. 
Now  we  want  a  grammar  to  make  sense  out  of  the 

is 

words 

in  combination. 

Each  rule  is  of  the  form  (LEFT  RIGHT  COG  GEN).  The 
f i r st  two  items  should  be  interpreted  as  a  context-
free  r u le  LEFT  ->  RIGHT,  where  RIGHT  is  either  one 
category  or  a  l i st  of  them  if  more  are  needed.  At 
present  LINGOL  only  permits  RIGHT  to  have  at  most  two 
categories;  to  get  more,  one  should  use  extra  names 
and  rules  in  the  standard  way. 

The  item  COG  is  exactly  as  for  the  corresponding 

dictionary  item,  except  that  it  may  be  invoked  for 
more  complex  types  of  ambiguity,  usually  s t r u c t u r a l. 
As  with  the  dictionary,  we  shall  w r i te  no  n o n - t r i v i al 
programs  here,  although  we  may  occasionally  use  a 
negative  number  when  we  w r i te  a  rule  which  we  do  not 
expect  to  need  very  often. 

The  item  GEN  is  a  more  complex  item  than  i ts  dic(cid:173)

tionary  counterpart,  since  it  can  take  arguments, 
if  RIGHT  is  a  syntactic 
which  are  w r i t t en  !D  (down) 
if  RIGHT  is  a 
category,  and 
l i st  of  two  categories. 
These  are  not  variables  but 
programs  which  run  the  program  for  the  corresponding 
subtree. 

!L  ( l e f t)  or 

IR  ( r i g h t) 

The  f i r st  rule  takes  the  translation  of  the  NP  and 

function  which  allows 

the  PRED  and  appends  them  into  a  single  l i s t.  For 
example,  if  the  NP  were  (LE  CHIEN)  and  the  PRED  were 
(AIHE  LE  HER),  then  (APPEND  !L  IR)  would  produce  (LE 
CHIEN  AIME  LE  MER).  The  function  (REPLY  L  T)  is  a 
LINGOL 
type  out  on  the  console  the  words  in  L,  followed  by  the 
value  of  T.  The  variable  CHAR  is  a  LINGOL  variable 
which  makes  available  to  the  generative  phase  the 
character  used  to  terminate  the  input  s t r i n g. 
(In  the 
near  future  we  shall  give  t h is  to  the  cognitive  phase 
instead,  where  it  belongs.) 
In  t h is  case,  we  simply 
echo  CHAR  back  to  the  console. 

the  generative  phase 

to 

377 

378 

379 

successfully  interfaced  his  semantics  to  quite  non-tri(cid:173)
vial  pragmatics. 
should  ever  address  pragmatic  issues. 

It  is  not  yet  clear  whether  LINGOL 

4.  Conclusions 

We  have  described  a  programming  language  for 

natural  language  processing  programs.  We  discussed 
the  reasons  for  each  of  the  major  design  decisions. 
We  presented  a  session  with  the  system  in  which  we 
developed  a  t r i v i al  fragment  of  an  English-to-French 
translator.  With  adequate  imagination,  the  reader 
should  be  able  to  project  at  least  some  of  the  po(cid:173)
tential  of  LINGOL.  What  may  be  more  d i f f i c u lt  to  see 
are  the  present  limitations  of  the  system. 

We  have  already  suggested  that  our  separation  of 

semantics  from  the  syntax  does  not  present  serious 
problems.  Whether  this  is  true  we  leave  to  further 
experiments  with  LINGOL. 
LINGOL  is  s t i ll  in  its  infancy;  so  far  the  author  has 
invested  approximately  three  months'  work  in  i t,  over 
the  two  and  a  half  years  of  its  existence. 

It  should  be  noted  that 

At  present,  conjunction  is  not  handled  at  all  by 

LINGOL,  except  in  so  far  as  one  may  supply  context-
free  rules  for  each  syntactic  category  to  be  conjoined 
(which  is  most).  This  is  tedious  at  best,  and  is  net 
even  always  possible.  One  wants  to  deal  not  only  with 
"The  Chinese  have  short  names  and  the  Japanese  long" 
but  with  "He  eloped  with  and  married  the  farmer's 
daughter."  Neither  of  these  are  at  all  well  handled 
by  context-free  grammars,  regardless  of  what  we  write 
in  the  cognitive  component  of  our  rules.  Winograd's 
system  deals  with  these  sorts  of  problems  simply  by 
being  more  procedure-oriented.  This  provides  the 
necessary  f l e x i b i l i ty  to  deal  with  pathological  cases. 
Another  d i f f i c u lt  area  is  that  of  adverbs,  which 

may  appear  in  many  places  in  a  sentence,  but  which 
always  modify  the  verb  of  the  clause  they  appear  in 
(unless  they  modify  an  adjective). 
It  should  not  be 
necessary  to  give  rules  for  each  of  the  places  an 
adverb  may  appear. 
It  suffices  to  rely  mainly  on 
semantic  connections  to  establish  the  role  of  the  ad(cid:173)
verb,  and  this  is  one  place  where  concept  structures 
(Schank14) 
It  is  perhaps  significant 
that  Winograd18  makes  no  attempt  to  deal  with  adverbs. 

are  of  value. 

Both  of  these  problems  will  be  studied  in  the 

near  future,  to  see  how  best  to  change  LINGOL  to  deal 
with  them  without  losing  the  attractive  programming 
convenience  afforded  by  context-free  rules  in  con(cid:173)
junction  with  LISP  semantics. 
In  the  meantime,  the 
system  as  it  stands  at  present  is  available  from  the 
author  for  experimental  use.  A  LISP  environment  is 
required,  with  at  least  20K  words  of  memory.  An  ob(cid:173)
vious  application  for  LINGOL  is  as  a  pedagogical  tool 
in  a  computational  linguistics  course,  for  Introduc(cid:173)
ing  students  painlessly  to  one  method  of  writing  actu(cid:173)
al  programs  that  do  something  useful  with  English 
other  than  parsing  it  for  the  sake  of  the  parse  tree. 
We  have  used  it  for  this  purpose  during  the  Independ(cid:173)
ent  Activities  Period  at  MIT  this  January.  One  stu(cid:173)
dent  wrote  an  English-to-unpointed-Hebrew  translator! 
We  ask  only  that  users  keep  us  up-to-date  with  the 
uses  to  which  they  put  LINGOL. 

Also  we  need  a  new  PERSON  and  NO  for  the  object, 

although  GENDER  is  all  right  because  it  is  in  the  NP 
rule. 

The  reason  we  keep  finding  errors  is  because  we 
are  writing  the  program  as  though  we  were  beginners. 
With  a  l i t t le  experience,  the  user  can  learn  to  anti(cid:173)
cipate  most  of'these  problems  at  the  start. 

It  has  another  advantage  in  that 

This  scheme  has  the  advantage  that  the  user  is 
not  constrained  to  any  one  morphological  system,  but 
can  write  his  own  in  the  same  language  as  he  writes 
his  semantics. 
morphological  processing  can  be  interleaved  with  se(cid:173)
mantic  processing.  For  example,  when  LINGOL  gives  up 
on  a  word  altogether,  it  assigns  it  the  category  UN(cid:173)
KNOWN  and  supplies  the  word  in  the  generative  phase. 
If  we  want  to  implement  Thome's  closed-class  dic(cid:173)
tionary1 6,  in  which  unknown  words  are  parsed  as  nouns, 
verbs  or  adjectives  depending  on  which  interpretation 
makes  the  best  syntactic  sense,  then  we  could  write 
rules  such  as 

Notice  how  the  issue  of  deciding  what  part  of 

speech  the  word  is  dealt  with  independently  of,  e.g., 
making  "CAT"  plural.  Also  notice  that  the  parser  cor(cid:173)
rectly  guessed  the  parts  of  speech,  and  went  on  to  con(cid:173)
jugate  "correctly"  the  unknown  verb,  However,  "cats" 
is  a  bit  of  an  Anglicism.  Our  program  is  starting  to 
look  quite  clever  already  without  our  having  done  very 
much  to  it  yet.  We  have  only  seven  grammar  rules,  one 
function  (REG)  and  a  few  dictionary  entries. 

In  the  example  of  Figure  5  (section  1),the  rules 
involving  UNKNOWN  have  for  their  generative  component 
a  program  that  queries  the  user  about  the  translation. 
These  examples  could  go  on  indefinitely.  To  see 

what  can  be  achieved  with  a  few  more  hours  work,  re(cid:173)
fer  back  to  Figure  5.  That  example  s t i ll  has  very 
l i t t le  grammar  -  approximately  twenty  rules.  However, 
it  has  a  page  of  LISP  functions  for  doing  liason,  vari(cid:173)
ous  agreements,  and  handling  tricky 
versus  DES  in  the  object  position. 

things  like  LES 

These  examples  bring  this  section  to  an  end. 

There  1s  no  section  3.3  on  Pragmatics  -  this  is  en(cid:173)
tirely  the  user's  problem.  Figure  3  (section  1)  gives 
examples  from  a  LINGOL  program  in  which  the  user 

380 

Bibliography 

Work  reported  herein  was  supported  in  part  at  Stan(cid:173)
ford  by  the  National  Science  Foundation  under  grant 
no.  GJ  992,  and  the  Office  of  Naval  Research  under 
grant  number  N-00014-67-A-0112-0057  NR  044-402;  by 
IBM  under  a  post-doctoral  fellowship  at  Stanford;  and 
at  the  A r t i f i c i al  Intelligence  Laboratory,  a  Massa(cid:173)
chusetts  Institute  of  Technology  research  program 
supported  in  part  by  the  Advanced  Research  Projects 
Agency  of  the  Department  of  Defense  and  monitored  by 
the  Office  of  Naval  Research  under  Contract  Number 
N00014-70-A-0362-0003. 

Reproduction  of  this  document  in  whole  or  in  part  is 
permitted  for  any  purpose  of  the  United  States  Gov(cid:173)
ernment . 

381 

