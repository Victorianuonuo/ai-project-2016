A Greedy Approach to Establish Singleton Arc Consistency

Christophe Lecoutre and St·ephane Cardon

CRIL-CNRS FRE 2499,

Universit·e d’Artois

Lens, France

flecoutre; cardong@cril.univ-artois.fr

Abstract

In this paper, we propose a new approach to estab-
lish Singleton Arc Consistency (SAC) on constraint
networks. While the principle of existing SAC al-
gorithms involves performing a breadth-(cid:2)rst search
up to a depth equal to 1, the principle of the two
algorithms introduced in this paper involves per-
forming several runs of a greedy search (where at
each step, arc consistency is maintained). It is then
an original illustration of applying inference (i.e.
establishing singleton arc consistency) by search.
Using a greedy search allows bene(cid:2)ting from the
incrementality of arc consistency, learning relevant
information from con(cid:3)icts and, potentially (cid:2)nding
solution(s) during the inference process. Further-
more, both space and time complexities are quite
competitive.

Introduction

1
Inference and search are two categories of techniques for pro-
cessing constraints [Dechter, 2003]. On the one hand, infer-
ence is used to transform a problem into an equivalent form
which is either directly used to show the satis(cid:2)ability or un-
satis(cid:2)ability of the problem, or simpler to be handled by a
search algorithm. Inference aims at modifying a constraint
network by employing structural methods such as variable
elimination and tree clustering, or (cid:2)ltering methods based on
properties such as arc consistency and path consistency. On
the other hand, search is used to traverse the space delim-
ited by the domains of all variables of the problem. Search
can be systematic and complete by relying on breadth-(cid:2)rst or
depth-(cid:2)rst exploration with backtracking, or stochastic and
incomplete by relying on greedy exploration and randomized
heuristics.

One of the most popular systematic search algorithms to
solve instances of the Constraint Satisfaction Problem (CSP)
is called MAC [Sabin and Freuder, 1994]. MAC interleaves
inference and search since at each step of a depth-(cid:2)rst ex-
ploration with backtracking, a local consistency called arc
consistency is maintained. However, since the introduction
of stronger consistencies such as max-restricted path consis-
tency [Debruyne and Bessi(cid:30)ere, 1997a] and singleton arc con-
sistency [Debruyne and Bessi(cid:30)ere, 1997b], one issue has been

the practical interest of utilizing such consistencies, instead
of arc consistency, before or during search.

There is a recent focus about singleton consistencies, and
more particularly about SAC (Singleton Arc Consistency), as
illustrated by recent works of [Debruyne and Bessi(cid:30)ere, 1997b;
Prosser et al., 2000; Bartak, 2004; Bessi(cid:30)ere and Debruyne,
2004; 2005]. A constraint network is singleton arc consistent
iff any singleton check does not show unsatis(cid:2)ability, i.e., iff
after performing any variable assignment, enforcing arc con-
sistency on the resulting network does not entail a domain
wipe-out.

In this paper, we propose two new algorithms, denoted
SAC-3 and SAC-3+, to establish singleton arc consistency.
While SAC algorithms introduced so far perform a breadth-
(cid:2)rst search up to a depth equal to 1, these two new algorithms
perform several runs of a greedy search (where at each step,
arc consistency is maintained). However, unlike SAC-3+,
SAC-3 does not record the context of performed runs.

We have identi(cid:2)ed several advantages to adopt this ap-

proach:

(cid:15) extra space requirement is limited,
(cid:15) both algorithms bene(cid:2)t from the incrementality of arc

consistency,

(cid:15) using a greedy search enables learning relevant informa-

tion from con(cid:3)icts,

(cid:15) it is possible to (cid:2)nd solution(s) while establishing the

consistency,

(cid:15) time complexity of both algorithms is quite competitive.
More precisely, the good space complexity of both algo-
rithms allows to use them on large constraint networks. In
particular, SAC-3 admits the space complexity of the under-
lying arc consistency algorithm. Next, when a greedy search
maintaining arc consistency is used, we naturally bene(cid:2)t from
the incrementality of arc consistency, i.e., the fact that itera-
tively establishing arc consistency on a more and more re-
duced search space is less penalizing than repeatedly estab-
lishing it on the original search space. Besides, when a dead-
end is encountered during a greedy search, a no-good can be
recorded and/or the origin of the failure taken into account.
Also, some solutions may be found by the algorithm. Finally,
if the instance contains a large under-constrained part, a very
ef(cid:2)cient time complexity can be expected.

2 Preliminaries
A constraint network consists of a (cid:2)nite set of variables such
that each variable X has an associated domain dom(X) de-
noting the set of values allowed for X, and a (cid:2)nite set of
constraints such that each constraint C has an associated rela-
tion rel(C) denoting the set of tuples allowed for the variables
vars(C) involved in C. A solution to a constraint network is
an assignment of values to all the variables such that all the
constraints are satis(cid:2)ed. A constraint network is said to be
satis(cid:2)able if it admits at least a solution.

The Constraint Satisfaction Problem (CSP), whose task is
to determine whether or not a given constraint network is sat-
is(cid:2)able, is NP-complete. A constraint network is also called
CSP instance. To solve a CSP instance, a depth-(cid:2)rst search al-
gorithm with backtracking can be applied, where at each step
of the search, a variable assignment is performed followed
by a (cid:2)ltering process called constraint propagation. Usually,
constraint propagation algorithms, which are based on some
constraint network properties such as arc consistency, remove
some values which can not occur in any solution.
De(cid:2)nition 1 Let P = (X ; C ) be a constraint network, C 2
C , X 2 vars(C) and a 2 dom(X). (X; a) is said to be
arc consistent wrt C iff there exists a support of (X; a) in C,
i.e., a tuple t 2 rel(C) such that t[X] = a. P is said to
be arc consistent iff 8X 2 X , dom(X) 6= ; and 8C 2 C ,
8X 2 vars(C), 8a 2 dom(X), (X; a) is arc consistent wrt
C.

AC(P ) will denote the constraint network obtained after
enforcing Arc Consistency (AC) on a given constraint net-
work P . AC(P ) is such that all values of P that are not arc
consistent have been removed. Note that a value will usu-
ally refer to a pair (X,a) with X 2 X and a 2 dom(X).
If there is a variable with an empty domain in AC(P ), de-
noted AC(P ) = ?, then P is clearly unsatis(cid:2)able. P jS with
S (cid:26) fX = ajX 2 X ^ a 2 dom(X)g is the constraint
network1 obtained from P by restricting the domain of X to
the singleton fag for any variable assignment X = a 2 S.
De(cid:2)nition 2 Let P = (X ; C ) be a constraint network, X 2
X and a 2 dom(X). (X; a) is said to be singleton arc
consistent iff AC(P jX=a) 6= ?. P is said to be singleton arc
consistent iff 8X 2 X , dom(X) 6= ; and 8a 2 dom(X),
(X; a) is singleton arc consistent.

X will be called the domain of P = (X ; C ). We will
note (X; a) 2 P (respectively, (X; a) =2 P ) iff X 2 X and
a 2 dom(X) (respectively, a 62 dom(X)).

3 Overview of SAC algorithms
The (cid:2)rst algorithm that has been proposed to establish single-
ton arc consistency is called SAC-1 [Debruyne and Bessi(cid:30)ere,
1997b]. The principle of this algorithm is to check the sin-
gleton arc consistency of all variables whenever a value is
detected singleton arc inconsistent and then removed. Worst-
case space and time complexities of SAC-1 are respectively

1It will be assumed that X = a 2 S ^ Y = b 2 S ) X 6= Y
and, for convenience, P jfX=ag will be simply denoted by P jX=a.

O(md) and O(mn2d4) where n denotes the number of vari-
ables, d the size of the largest domain and m the number of
constraints.

A second algorithm, denoted SAC-2, has been proposed
by [Bartak, 2004]. The idea is to check (again) the singleton
arc consistency of a value (Y ,b) after the removal of a value
(X,a) only if (X,a) does not support (Y ,b), i.e., does not be-
long to AC(P jY =b). Hence, this algorithm allows avoiding
usefulness singleton checks by recording, for each value, the
set of values supported by it. As expected and supported by
the experimentation of [Bartak, 2004], SAC-2 offers a signif-
icant improvement of practical time ef(cid:2)ciency with respect
to SAC-1. Worst-case space and time complexities of SAC-2
are respectively O(n2d2) and O(mn2d4).

[Bessi(cid:30)ere and Debruyne, 2004] have remarked that SAC-2
does not present any improvement in terms of worst-case time
complexity because whenever the singleton arc consistency
of a value (X,a) must be checked again, one has to perform
the arc consistency enforcement on P jX=a from scratch. In
other words, SAC-2 does not exploit the incrementality of arc
consistency. An arc consistency algorithm is said incremen-
tal if its worst-case time complexity is the same when it is ap-
plied one time on a given network P and when it is applied up
to nd times on P where, between two consecutive executions,
at least one value has been deleted. All current arc consis-
tency algorithms are incremental. To bene(cid:2)t from the incre-
mentality of arc consistency, [Bessi(cid:30)ere and Debruyne, 2004;
2005] have proposed a new algorithm, SAC-OPT, that dupli-
cates the original constraint network into nd dedicated con-
straint networks, one for each value (X,a) of the instance.
Simply, whenever the singleton consistency of a value (X,a)
must be checked, the dedicated constraint network is used.
Worst-case space and time complexities of SAC-OPT are re-
spectively O(mnd2) and O(mnd3) which is the best time
complexity that can be expected from an algorithm enforc-
ing singleton arc consistency [Bessi(cid:30)ere and Debruyne, 2004].
Finally, from the observation that a space complexity in
O(mnd2) prevents the use of SAC-OPT on large constraint
networks, [Bessi(cid:30)ere and Debruyne, 2005] have proposed an-
other algorithm called SAC-SDS which represents a trade-off
between time and space. With respect to each value, only
the domain (called SAC-support) is recorded as well as a
propagation list used for arc consistency. In return, the data
structures required to establish arc consistency are no more
dedicated but shared. An experimental study on random in-
stances have highlighted the good performance of this algo-
rithm. Worst-case space and time complexities of SAC-SDS
are respectively O(n2d2) and O(mnd4).

4 SAC-3
All algorithms previously mentioned involve performing a
breadth-(cid:2)rst search up to a depth equal to 1. Each branch
(of size 1) of this search corresponds to check the singleton
arc consistency of a value, and allows removing this value if
an inconsistency is found (after establishing arc consistency).
One alternative is to check the singleton arc consistency of a
value in the continuity of previous checks. In other words, we
can try to build less branches of greater sizes using a greedy

search (where at each step, arc consistency is maintained).
As long as, for a current branch, no inconsistency is found,
we try to extend it. When an inconsistency if found, either
the branch is of size 0 and a value is detected inconsistent, or
all but last variable assignments correspond to singleton arc
consistent values. This last statement relies on Proposition 1.
Proposition 1 Let P = (X ; C ) be a constraint network and
let S (cid:26) fX = ajX 2 X ^ a 2 dom(X)g. If AC(P jS) 6= ?
then any pair (X,a) such that X 2 X and dom(X) = fag in
AC(P jS) is singleton arc consistent.

Proof. If AC(P jS) 6= ? then, clearly any element X =
a 2 S is singleton arc consistent. It is a consequence of the
monotony of arc consistency. One should observe that we can
also (cid:2)nd some values (Y ,b) such that Y 2 X and dom(Y )
= fbg in AC(P jS) with Y = b 62 S. These values are also
clearly singleton arc consistent. (cid:3)

As mentioned in the proof above, some values can be de-
tected singleton arc consistent while checking the singleton
arc consistency of another one(s). Proposition 1 can then be
seen as a generalization of Property 2 in [Chmeiss and Sais,
2000], and is also related to the exploitation of singleton-
valued variables in [Sabin and Freuder, 1997].

Although the primary goal of our approach was to exploit
incrementality of arc consistency, other nice features have
been observed. Indeed, using a greedy search, one may (cid:2)nd
solutions and one can learn from con(cid:3)icts by recording no-
goods or weighting failure culprits.

Below, we give the description of a (cid:2)rst algorithm that uses
a greedy search in order to establish singleton arc consistency.
The description is given in the context of using an underlying
coarse-grained arc consistency algorithm (e.g. AC3 [Mack-
worth, 1977] or AC3.2/3.3 [Lecoutre et al., 2003]) with a
variable-oriented propagation scheme.

First, let us introduce some notations. If P = (X ; C ), then
AC(P ,Q) with Q (cid:18) X means enforcing arc consistency on
P from the given propagation set Q. For a description of
AC, see, for instance, the function propagateAC in [Bessi(cid:30)ere
and Debruyne, 2005]. Qsac is the set of values whose sin-
gleton arc consistency must be checked. A branch corre-
sponds to a set of values that have been assigned. For any
set of values S (cid:18) f(X; a) j X 2 X ^ a 2 dom(X)g,
vars(S) = fXj(X; a) 2 Sg. Finally, an instruction of the
form Pbef ore   P should not be systematically considered
as a duplication of the problem. Most of the time, it corre-
spond to store or restore the domain of a network (and the
structures of the underlying arc consistency algorithm).

Algorithm 2 starts by enforcing arc consistency on the
given network. Then, all values are put in the structure Qsac
and in order to check their singleton arc consistency, succes-
sive branches are built. The process continues until a (cid:2)x-point
is reached. Algorithm 1 allows building a branch by per-
forming successive variable assignments while maintaining
arc consistency (line 6). When an inconsistency is detected
for a non empty branch, one has to put back the last value in
Qsac (line 12) since we have no information about the sin-
gleton arc consistency or inconsistency of this value. If the
branch is empty, we have to manage the removal of a value
and to reestablish arc consistency (lines 16 to 19). Note that

else

add (X,a) to br

pick and delete (X,a) 2 Qsac s.t. X 62 vars(br)
P   AC(P jX=a,fXg)
if P 6= ? then

Algorithm 1 buildBranch()
1: br   ;
2: Pbef ore   P
3: consistent   true
4: repeat
5:
6:
7:
8:
9:
10:
11:
12:
13:
14: until not consistent _ vars(Qsac) (cid:0) vars(br) = ;
15: P   Pbef ore
16: if br = ; then
17:
18:
19: Qsac   Qsac (cid:0)f(Y; b)j(Y; b) 2 dom(Pbef ore)(cid:0)dom(P )g
20: end if

remove a from dom(X)
P   AC(P,fXg)

consistent   false
if br 6= ; then

add (X,a) to Qsac

end if

Algorithm 2 SAC-3(P = (X ; C ) : CSP)
1: P   AC(P ,X )
2: repeat
3:
4: Qsac   f(X; a) j X 2 X ^ a 2 dom(X)g
5:
6:
buildBranch()
7: until P = Pbef ore

while Qsac 6= ; do

Pbef ore   P

no inconsistency is detected when a solution is found or when
there is no way of extending the current branch. Finally, in or-
der to maximally bene(cid:2)t from the incrementality of arc con-
sistency, we have to build branches as long as possible. Hence
(although not indicated in the algorithm), it is important to se-
lect (cid:2)rst values (X,a) 2 Qsac such that a 2 dom(X).
Proposition 2 SAC-3 is a correct algorithm with a worst-
case space complexity in O(md) and a time complexity in
O(bmd2) where b denotes the number of branches built by
SAC-3.

Proof. Correctness results from Proposition 1.

If SAC-
3 uses an optimal coarse-grained arc consistency algorithm
such as AC3.2, then the overall space complexity is O(md)
since space complexity of AC3.2 is O(md), the data struc-
ture Qsac is O(nd) and each branch built is O(n). The over-
all time complexity is O(bmd2) since, due to incrementality,
each branch built by the algorithm is O(md2). (cid:3)

Remark that b must include the (cid:147)empty(cid:148) branches that cor-
respond to the detection of inconsistent SAC values. With
respect to already singleton arc consistent constraint net-
works, Corollary 1 indicates that SAC-3 can outperform
SAC-OPT and SAC-SDS (admitting then a time complexity
in O(mnd3)). More interestingly, it suggests that SAC-3 can
outperform SAC-OPT and SAC-SDS on structured (not nec-
essarily singleton arc consistent) instances that contain large
under-constrained parts as can be expected in real-world ap-
plications.

Corollary 1 SAC-3 admits a worst-case time complexity in
O(mn2d4) but, when applied to an already singleton arc con-
sistent constraint network, SAC-3 admits a best-case2 time
complexity in O(md3) and a worst-case time complexity in
O(mnd3).

2

Proof. In the worst-case, b = n2d2+nd

, hence, we obtain
O(mn2d4). When applied to an already singleton arc consis-
tent constraint network, the best and worst cases correspond
to branches of maximum size and of size 1 (1 consistent as-
signment followed by an inconsistent one), respectively. We
have then respectively b = d (all branches delivering a solu-
tion) and b = nd branches. (cid:3)

5 SAC-3+

It is possible to improve the behaviour of the algorithm
SAC-3 by recording the domain of the constraint networks
obtained after each greedy run, that is to say, for each branch.
When a value is removed, it is then possible to determine
which previously built branches must be reconsidered.
In-
deed, if a removed value does not support a branch, i.e. does
not belong to the domain associated with the branch, all val-
ues of the branch remain singleton arc consistent. On the
other hand, if it supports a branch, we have to verify that the
branch still remains valid by re-establishing arc consistency
from the recorded domain. When a branch is no more valid,
we have to delete it. In summary, SAC-3+ exploits incremen-
tality as SAC-SDS does.

In order to manage domain and propagation of constraint
networks corresponding to branches, we consider two arrays
denoted P [] and Q[]. For a given branch br, P [br] corre-
sponds to the constraint network associated with the branch
br (in fact, we only need to record the domain of the con-
straint network) whereas Q[br] contains the variables that
have lost some value(s) and that should be considered when
re-establishing arc consistency.

After enforcing arc consistency on the given network, Al-
gorithm 6 builds successive branches by calling the function
buildBranch+. Once the singleton arc consistency of all
values of Qsac have been tested, we have to check the valid-
ity of the branches that have been built and recorded in brs
by a call to the function checkBranches since some values
may have been deleted after a branch has been built. For each
branch br, we re-establish arc consistency on P [br] (line 2 of
Algorithm 5) and in case of a domain wipe-out, we delete this
branch and update Qsac (lines 4 and 5).

Algorithm 4 differs from Algorithm 1 on two aspects. First,
we need to record the domain of the constraint network cor-
responding to the branch that is built (line 22) and add this
branch to brs (line 23). Note that if the last variable assign-
ment entails a domain wipe-out, Pstore is not updated (line
9). For the implementation, P [br] can be directly set (back-
tracking one step if necessary) without any duplication of do-
main. Second, after re-establishing arc consistency (line 19),
all values that have been removed including the singleton arc
inconsistent one (line 18) must be taken into account in order

2Even if the worst-case time complexity of the underlying arc

consistency algorithm is considered.

Algorithm 3 update(set : Set of Values)
1: Qsac   Qsac (cid:0) set
2: for each br 2 brs do
3:
4:
5:
6:
7:

remove (X,a) from P [br]
add X to Q[br]

for each (X,a) 2 set do
if (X,a) 2 P [br] then

endif

add (X,a) to br
Pstore   P

pick and delete (X,a) 2 Qsac s.t. X 62 vars(br)
P   AC(P jX=a,fXg)
if P 6= ? then

Algorithm 4 buildBranch+()
1: br   ;
2: Pbef ore   P
3: consistent   true
4: repeat
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15: until not consistent _ vars(Qsac) (cid:0) vars(br) = ;
16: P   Pbef ore
17: if br = ; then
18:
19:
20:
21: else
22:
23:
24: end if

remove a from dom(X)
P   AC(P,fXg)
update(f(Y; b)j(Y; b) 2 dom(Pbef ore) (cid:0) dom(P )g)

consistent   false
if br 6= ; then

P [br]   Pstore
add br to brs

add (X,a) to Qsac

else

end if

Algorithm 5 checkBranches()
1: for each branch br 2 brs do
P [br]   AC(P [br]; Q[br])
2:
if P [br] = ? then
3:
4:
5:
end if
6:
7: end for

Qsac   Qsac[ br
remove br from brs

Algorithm 6 SAC-3+(P = (X ; C ) : CSP)
1: P   AC(P ,X )
2: brs   ;
3: Qsac   f(X; a) j X 2 X ^ a 2 dom(X)g
4: while Qsac 6= ; do
5:
6:
7:
8: end while

while Qsac 6= ; do
buildBranch+()
checkBranches()

to update the state of all branches (line 20). For each branch
(line 2 of Algorithm 3), we have to remove these values (line
5) and update the propagation list (line 6).
Proposition 3 SAC-3+ is a correct algorithm with a space
complexity in O(bmaxnd + md) and a time complexity
in O(bmd2) where bmax denotes the maximum number of
branches recorded by SAC-3+ and b denotes the number of
times a branch is built or checked by SAC-3+.

Proof. Correctness comes from Proposition 1 and the fact
that once, the singleton arc consistency of all values have
been checked and some branches recorded, one verify that the
property still holds by calling checkBranches. In addition
to the space requirement in O(md) of the underlying optimal
coarse-grained arc consistency algorithm, it is necessary to
record the domain of the constraint networks corresponding
to the valid branches that have been built. As recording a
domain is in O(nd), we obtain O(bmaxnd + md). (cid:3)

Remark that Corollary 1 also holds for SAC-3+. However,
one should be optimistic about the average time complexity
of this algorithm since it avoids building new branches when
unnecessary.

6 Experiments
To prove the practical interest of the algorithms introduced
in this paper, we have implemented them as well as the al-
gorithms SAC-1 and SAC-SDS, the latter being considered
as the most current ef(cid:2)cient SAC algorithm [Bessi(cid:30)ere and
Debruyne, 2005]. We have used AC3.2 [Lecoutre et al.,
2003] as an underlying arc consistency algorithms. We have
conducted an experimentation on a PC Pentium IV 2,4GHz
512Mo under Linux with respect to different classes of ran-
dom, academic and real-world instances. Performances have
been measured in terms of the number of singleton arc con-
sistency checks (#scks) and the cpu time in seconds (cpu).
For information, is also given, for each instance, the number
(#(cid:2)) of values removed by any SAC algorithm (when #(cid:2)=0,
it means that the instance is initially singleton arc consistent).
First, we have experimented the two classes of random bi-
nary CSP instances introduced in [Bessi(cid:30)ere and Debruyne,
2005]. However, due to lack of space, we only present the
(cid:2)gure depicting results about the class (100,20,0:05,t) corre-
sponding to sparse constraint networks with 100 variables, 20
values per domain and a density of 0:05 (i.e., 248 constraints).
t denotes the constraint tightness, i.e., the proportion of unal-
lowed tuples in the relations associated with the constraints.
In Figure 1, we can observe that when t < 0:6 (the be-
ginning of a phase transition), SAC-3 and SAC-3+ have the
same behaviour and outperform SAC-1 and SAC-SDS. In the
phase transition, SAC-3 and SAC-SDS respectively become
the worst and the best approaches. For complete networks
of the class (100,20,1,t), similar results (not depicted here)
are obtained, and at the pic of dif(cid:2)culty, SAC-SDS (181 s) is
about three times more ef(cid:2)cient than SAC-1 (478 s) and SAC-
3 (553 s) and two times more ef(cid:2)cient than SAC-3+ (307 s).
It is not really a surprise since the generated instances have
no structure, which corresponds to the worst-case for SAC-3
and SAC-3+ as the average size of the branches that are built
(at the critical point) is quite small ((cid:25) 3).

      10.0

       1.0

       0.1

       0.0

)
s
d
n
o
c
e
s
 

n
i
(
 
e
m

i
t
 

U
P
C

       8.0

       7.0

       6.0

       5.0

       4.0

       3.0

       2.0

       1.0

       0.0

 0.66

 0.68

 0.7

 0.72

 0.74

       0.0

 0.1

 0.2

 0.3

 0.4

 0.5

 0.6

 0.7

 0.8

 0.9

Figure 1: mean cpu time on 50 random instances of class
(100,20,0:05,t) at each value of t

tightness (t)

Next, we have dealt with the following academic instances:
(cid:15) two chessboard coloration instances, denoted cc-20-2

and cc-20-3, involving quaternary constraints,

(cid:15) two Golomb ruler instances, denoted gr-34-8 and gr-34-

9, involving binary and ternary instances,

(cid:15) two prime queen attacking instances, denoted qa-5 and

qa-6, involving only binary constraints.

Table 1 shows that SAC-3, and especially SAC-3+, have
on some instances a much better behaviour than SAC-1 and
SAC-SDS. Roughly speaking, it can explained by the fact that
such instances have some regular structure.

Next, we have tested real-world instances, taken from the
FullRLFAP archive, which contains instances of radio link
frequency assignment problems. Table 2 shows the results
obtained on some representative instances. As expected, on
already singleton arc consistent instances (scen02, graph14),
a signi(cid:2)cant improvement is obtained. But it is also true for
the other instances as they contain large under-constrained
parts.
It clearly appears that, on such structured instances,
using SAC-3 and SAC-3+ is the best approach, especially as
SAC-SDS has been out of memory on some instances.

It is interesting to note that SAC-3 and SAC-3+ can be
much faster than SAC-1 and SAC-SDS even if the number
of singleton checks (see for example, cc-20-2 and scen02) is
similar. It results from the exploitation of the incrementality
of arc consistency (when building branches). Another point

cc-20-2
(#(cid:2)=0)
cc-20-3
(#(cid:2)=0)
gr-34-8
(#(cid:2)=351)
gr-34-9
(#(cid:2)=513)

qa-5
(#(cid:2)=9)
qa-6
(#(cid:2)=48)

cpu
#scks
cpu
#scks
cpu
#scks
cpu
#scks
cpu
#scks
cpu
#scks

SAC-1
14.44
800
22.61
1200
66.08
6335
111.44
8474
2.47
622
27.55
2523

SAC-SDS

14.43
800
22.71
1200
17.43
3340
31.29
4720
2.50
622
14.34
1702

SAC-3
3.46
819
7.01
1200
38.28
5299
91.50
11017

.93
732
8.23
2855

SAC-3+

3.48
819
7.02
1200
18.62
1558
32.03
2013
.96
732
4.38
1448

Table 1: Academic instances

scen02
(#(cid:2)=0)
scen05
(#(cid:2)=13814)
graph03
(#(cid:2)=1274)
graph10
(#(cid:2)=2572)
graph14

(#(cid:2)=0)

cpu
#scks
cpu
#scks
cpu
#scks
cpu
#scks
cpu
#scks

SAC-1
20.97
8004
11.79
6513
215.88
20075
1389.59
74321
154.16
36716

SAC-SDS

20.73
8004
20.03
4865
136.93
17069

-
-
-
-

SAC-3
4.09 (16)

8005
1.55 (1)
4241
74.97
22279
675.64
82503

31.17 (10)

36719

SAC-3+
4.08 (16)

8005
1.87
2389
39.10
8406
349.53
29398

32.72 (10)

36719

Table 2: RLFAP instances

to be mentioned is that some solutions (enclosed in brack-
ets near cpu time) have been found during the inference pro-
cess on some instances. For example, 16 solutions have been
found on scen02 by SAC-3 and SAC-3+.

Finally, we have experimented some realistic scheduling
problems. We have selected 2 representative instances from
the set of 60 job shop instances proposed by [Sadeh and Fox,
1996]. It is quite interesting to note (see Table 3) that SAC-
3 and SAC-3+ have found solution(s) to these two instances
quite more ef(cid:2)ciently than MAC (when run to (cid:2)nd one solu-
tion). It can be explained by the restart aspect of both algo-
rithms.

js-1
(#(cid:2)=0)
js-2
(#(cid:2)=0)

cpu
#scks
cpu
#scks

SAC-1
29.61
5760
40.40
6315

SAC-SDS

29.58
5760
38.58
6315

SAC-3
18.17 (4)

6029

31.13 (1)

6718

SAC-3+
19.04 (4)

6029

31.07 (1)

6718

MAC
181.68

211.52

-

-

Table 3: Job-shop instances

7 Conclusion
Establishing singleton arc consistency can be justi(cid:2)ed if it is
effective (allows some (cid:2)ltering). On the contrary, applying a
SAC algorithm on a constraint network that is already single-
ton arc consistent is a problem as it may involve a large waste
of time. The two algorithms, SAC-3 and SAC-3+, introduced
in this paper combine inference and search and can be under-
stood as an answer to this problem. Indeed, when an instance
is under-constrained or, more generally, contains easy large
parts, as can be expected in real-world applications, exploit-
ing search during inference can pay off. It has been con(cid:2)rmed

by our experimentation. Besides, one should have noted the
limited space requirement of both algorithms which makes
them applicable on large constraint networks.

We believe that this approach deserves further investiga-
tion in order to determine if it could be applied to other local
consistencies and, to what extent, maintaining SAC during
search could be a viable alternative to MAC.
Acknowledgments
This paper has been supported by the CNRS, the (cid:147)programme
COCOA de la R·egion Nord/Pas-de-Calais(cid:148) and by the (cid:147)IUT
de Lens(cid:148).
References
[Bartak, 2004] R. Bartak. A new algorithm for singleton arc

consistency. In Proceedings of FLAIRS’04, 2004.

[Bessi(cid:30)ere and Debruyne, 2004] C. Bessi(cid:30)ere and R. Debru-
yne. Theoretical analysis of singleton arc consistency. In
Proceedings of ECAI’04 workshop on modeling and solv-
ing problems with constraints, pages 20(cid:150)29, 2004.

[Bessi(cid:30)ere and Debruyne, 2005] C. Bessi(cid:30)ere and R. Debru-
yne. Optimal and suboptimal singleton arc consistency
algorithms. In Proceedings of IJCAI’05, 2005.

[Chmeiss and Sais, 2000] A. Chmeiss and L. Sais. About the
use of local consistency in solving CSPs. In Proceedings
of ICTAI’00, pages 104(cid:150)107, 2000.

[Debruyne and Bessi(cid:30)ere, 1997a] R. Debruyne and C. Bes-
si(cid:30)ere. From restricted path consistency to max-restricted
path consistency. In Proc. of CP’97, pages 312(cid:150)326, 1997.
[Debruyne and Bessi(cid:30)ere, 1997b] R. Debruyne and C. Bes-
si(cid:30)ere. Some practical (cid:2)ltering techniques for the constraint
satisfaction problem. In Proceedings of IJCAI’97, pages
412(cid:150)417, 1997.

[Dechter, 2003] R. Dechter. Constraint processing. Morgan

Kaufmann, 2003.

[Lecoutre et al., 2003] C. Lecoutre, F. Boussemart, and
Exploiting multidirectionality in coarse-
In Proceedings of

F. Hemery.
grained arc consistency algorithms.
CP’03, pages 480(cid:150)494, 2003.

[Mackworth, 1977] A.K. Mackworth. Consistency in net-
works of relations. Arti(cid:2)cial Intelligence, 8:118(cid:150)126,
1977.

[Prosser et al., 2000] P. Prosser, K. Stergiou, and T. Walsh.
Singleton consistencies. In Proceedings of CP’00, pages
353(cid:150)368, 2000.

[Sabin and Freuder, 1994] D. Sabin and E. Freuder. Contra-
dicting conventional wisdom in constraint satisfaction. In
Proceedings of the PPCPA’94, 1994.

[Sabin and Freuder, 1997] D. Sabin and E. Freuder. Under-
standing and improving the MAC algorithm. In Proceed-
ings of CP’97, 1997.

[Sadeh and Fox, 1996] N. Sadeh and M.S. Fox. Variable and
value ordering heuristics for the job shop scheduling con-
straint satisfaction problem. Arti(cid:2)cial Intelligence, 86:1(cid:150)
41, 1996.

