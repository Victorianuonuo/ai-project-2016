Compound Effects of Top-down and Bottom-up In(cid:3)uences on Visual Attention

During Action Recognition

Bassam Khadhouri and Yiannis Demiris

Department of Electrical and Electronic Engineering

Email: fbassam.khadhouri, y.demirisg@imperial.ac.uk

Imperial College London

Exhibition Road, London SW7 2BT

Abstract

The limited visual and computational resources
available during the perception of a human ac-
tion makes a visual attention mechanism essential.
In this paper we propose an attention mechanism
that combines the saliency of top-down (or goal-
directed) elements, based on multiple hypotheses
about the demonstrated action, with the saliency of
bottom-up (or stimulus-driven) components. Fur-
thermore, we use the bottom-up part to initialise the
top-down, hence resulting in a selection of the be-
haviours that rightly require the limited computa-
tional resources. This attention mechanism is then
combined with an action understanding model and
implemented on a robot, where we examine its per-
formance during the observation of object-directed
human actions.

1 Introduction
In an attempt to arrive at a de(cid:2)nition for attention, Tsotsos,
in his review paper [Tsotsos, 2001], arrives at the following
proposal: (cid:147)Attention is a set of strategies that attempts to re-
duce the computational cost of the search processes inherent
in visual perception(cid:148). Our work aims at producing a model of
visual attention for dynamic scenes, emphasising the impor-
tance of top-down knowledge in directing the attention during
action recognition.

After introducing the two different (bottom-up and top-
down) elements of attention, we will proceed to review a
model of action understanding [Demiris and Johnson, 2003]
that will make use of our attention model, to correctly allo-
cate the limited resources available to it. Subsequently, we
will proceed to describe how the multiple hypotheses gener-
ated by our model while the human demonstration is unfold-
ing can feed top-down signals to the attention mechanism to
direct attention to the important aspects of the demonstration.
Furthermore, we propose a method for initialising the top-
down part, using the saliency of the bottom-up part in our vi-
sual attention mechanism. We have implemented our model
on an ActivMedia Robot, running experiments observing a
human acting upon various objects. These results will be pre-
sented and discussed, not only in terms of whether our atten-
tion model allocates the resources correctly, but also to see if

it results in a faster recognition of the correct behaviour being
demonstrated in the action understanding model.

2 Background
Work in cognitive science suggests that the control inputs to
the attention mechanism can be divided into two categories:
stimulus-driven (or (cid:147)bottom-up(cid:148)) and goal-directed (or (cid:147)top-
down(cid:148)) [Van Essen et al., 1991]. A number of bottom-up
attention models follow Treisman’s Feature Integration the-
ory [Treisman and Gelade, 1980] by calculating the saliency
for different low-level features of the object, e.g. colour, tex-
ture or movement. A winner-take-all approach is then used
to decide on the most salient part of the scene (as in [Koch
and Ullman, 1985], [Itti et al., 1998], [Breazeal and Scassel-
lati, 1999]). Top-down, on the other hand, covers the goal-
directed factors, essentially the task-dependent part of the vi-
sual attention model. Wolfe [Wolfe and Gancarz, 1996] pro-
duced a biologically inspired Guided Search Model that con-
trols the bottom-up features that are relevant to the current
task by a top-down mechanism, through varying the weight-
ing of the feature maps. However, it is not clear what the task
relevant features are, particularly in the case of action recog-
nition.

Our attention mechanism is inspired by Wolfe’s model,
and integrates bottom-up elements with a top-down mecha-
nism using behaviours1 and forward models that can guide
the robot’s attention according to the current task. A forward
model is a function that, given the current state of the sys-
tem and a control command to be applied on it as given by
the behaviour, outputs the predicted next state. Our top-down
part of the attention model, when observing a demonstration,
will make a prediction of the next state for a number of dif-
ferent possible behaviours, producing a con(cid:2)dence value for
each, based on the observed accuracy of the prediction. These
con(cid:2)dence levels are important values that can be thought of
as saliencies for the top-down mechanism of our attention
model, hence producing a principled method of quantifying
the top-down part of the attention mechanism.

In the experimental section, we will demonstrate that this
attention mechanism improves performance on action under-
standing mechanisms that use multiple behaviours and for-

1Also known as controllers or inverse models in the control liter-

ature

Figure 1: Action understanding model [Demiris and Johnson,
2003].

ward models such as [Demiris and Johnson, 2003]. This will
be done in two ways: (cid:2)rst by cutting down the number of
computational cycles required for identifying the correct be-
haviour and by directing the limited computational resources
to the relevant parts of the human demonstration, instead of
the whole scene. Secondly, by using the saliency from the
bottom-up part of our visual attention mechanism to initialise
the top-down part, enabling it to select only the relevant be-
haviours to the demonstrated action, instead of activating and
running all of them.

3 Action Understanding Model
Demiris’s action understanding model [Demiris and Johnson,
2003], shown in (cid:2)gure 1, identi(cid:2)es the correct behaviour
that is being observed by using forward models for a num-
ber of behaviours. By predicting what will happen next, and
comparing it with what actually does happen next (from the
behaviour that is being demonstrated), con(cid:2)dence levels are
generated for each of the predicted behaviours. From these,
a winner is selected by picking the predicted behaviour with
the highest con(cid:2)dence level.

The attention mechanism we propose in this paper can be
used to cut computational costs on this action understand-
ing model [Demiris and Johnson, 2003]. It would be far too
computationally expensive to direct the attention of the ob-
server towards all the parts of the demonstration to satisfy all
the possible behaviours [Tsotsos, 1989]. Hence, the atten-
tion mechanism is used to restrict this, giving only one of the
behaviours at a time the information it requires. Using this
attention mechanism, we managed to cut down substantially
on the computational costs, yet it was also achieved without
affecting the quality of the system to the extent of producing
wrong outcomes.

The success of our model will be demonstrated through
comparisons of the new results with the results from the orig-
inal action understanding model for a number of different be-
haviours. If, after having cut down on all the computational
costs using our visual attention model, the (cid:2)nal behaviour
chosen in each situation with the previous model [Demiris
and Johnson, 2003] remains the same, then our attention
model will be deemed to have succeeded in its task.

Figure 2: Our Bottom-up model of Visual Attention. The
output is the Focus of Attention (FOA)

4 The Attention Mechanism
In this section we will describe the design of our attention
mechanism, and the integration of both bottom-up and top-
down elements.

4.1 Bottom-up
We have implemented a bottom-up model that is mainly
based on Wolfe’s biologically inspired Guided Search 3.0
model of human visual attention and visual search [Wolfe and
Gancarz, 1996]. This model uses Treisman’s Feature Integra-
tion theory [Treisman and Gelade, 1980] to construct a model
of human visual attention. In this model, low-level (cid:2)lters are
applied to various visual stimuli in order to produce individ-
ual feature maps in which high values indicate areas of inter-
est.

All of the individual feature maps are weighted and then
summed into a single activation map. Attention is guided to
peaks in the activation map, because these represent the most
salient areas in the scene. In our model, top-down task infor-
mation can in(cid:3)uence the bottom-up feature maps by chang-
ing the activation map through the modifying of the weights
that are applied before the summation. Our model is shown
in (cid:2)gure 2. There are certain features that can make objects
salient. For example, brightly coloured objects are a most
typical example, or if they are moving in a way that can attract
attention, e.g a sudden, irregular and fast movement. Each of
the bottom-up blocks in the model represents a certain fea-
ture that contributes towards the calculation of the saliency of
an object. Our implementation focuses on three bottom-up
blocks that are feature detectors. These are: Motion, Colour
and the Size the object occupies in the image, which not only
accounts for the actual size of an object, but also for the dis-
tance of the object from the camera, both of which are impor-
tant in grabbing one’s attention.

The remaining blocks in the model are:
(cid:15) Fovea-effect (cid:150) this models the decrease in resolution
away from the centre of the image, because our eyes’
resolution decreases dramatically with the distance from
the fovea [Farid et al., 2002].

(cid:15) Resource Allocation Algorithms (cid:150) we have performed
experiments with different resource allocation algo-
rithms [Stallings, 2000] that can be employed to decide
on how to distribute resources between the behaviours.
(cid:15) Internal Representations of objects and actions (cid:150) this
block gives information about objects and how they
move, and interact with other objects etc.

(cid:15) Purely bottom-up saliency map (cid:150) this is the saliency map

representing the most salient object in the scene.

From the above (cid:2)ve inputs, one behaviour must be chosen.
The block labelled (cid:147)Where to attend for this Behaviour?(cid:148) in
(cid:2)gure 3 has three inputs:

(cid:15) Output from (cid:147)Selecting ONE Behaviour(cid:148) (cid:150) the winner
behaviour that is selected from the previous stage is
passed on.

(cid:15) Internal Representations of objects and actions (cid:150) this
block gives information about objects and how they
move, and interact with other objects etc.

(cid:15) Bottom-Up Saliency map in(cid:3)uenced by top-down (cid:150) this
is to give current information on where the attention of
the model is.

The output of this block in(cid:3)uences all the bottom-up calcu-
lation blocks in order to direct the attention of our model in
such a way that it serves the current behaviour.

5 Experimental Setup
We implemented our model on an ActivMedia Peoplebot
robot, equipped with a pan-tilt-zoom camera, as well as a two
degrees of freedom gripper, sonar and infrared sensors. Only
the camera was used in the following sets of experiments, and
the saccade generation module was switched off as it was not
needed.

For these experiments, three objects were chosen: A hand,
a coke can, and an orange. Eight behaviours were then de-
(cid:2)ned:

(cid:15) Behaviour 1 - Pick coke can
(cid:15) Behaviour 2 - Move coke can
(cid:15) Behaviour 3 - Move hand away from coke can
(cid:15) Behaviour 4 - Pick orange
(cid:15) Behaviour 5 - Move orange
(cid:15) Behaviour 6 - Move hand away from orange
(cid:15) Behaviour 7 - Drop coke can
(cid:15) Behaviour 8 - Drop orange

Each of these behaviours has a corresponding forward model.
Figure 4 shows the arrangement for Behaviour 1.

Figure 4: Behaviour1 - Picking a coke can

Figure 3: The architecture of the top-down part of the model
and how it integrates with the bottom-up part

(cid:15) Winner takes all (WTA) selection as in Itti’s model [Itti

et al., 1998].

(cid:15) An attention gate mechanism as in Wolfe’s model
[Wolfe and Gancarz, 1996] which keeps a record of the
two most salient areas in the scene.

(cid:15) A saccade generation system as in Wolfe’s model [Wolfe

and Gancarz, 1996].

4.2 Top-down
Figure 3 shows our complete visual attention model which
includes the top-down part. This (cid:2)gure speci(cid:2)cally illustrates
how the top-down information could in(cid:3)uence the bottom-up
part of the model, and vice versa.

Our Top-down part of the model receives the list of be-
haviours from the action understanding model, described in
the previous section, together with their con(cid:2)dence levels and
their forward models. It must select only one behaviour out of
the many behaviours to attend to at any given point in time.
The block labelled (cid:147)Selecting ONE Behaviour(cid:148) in (cid:2)gure 3
has (cid:2)ve inputs:

(cid:15) Behaviours (cid:150) A list of hypotheses (potential behaviours
that explain the demonstration) is passed in, one of
which must be selected.

(cid:15) Con(cid:2)dence Levels (cid:150) The current con(cid:2)dence levels for

each behaviour.

every eighth frame, since there are eight behaviours in
total.

(cid:15) Our Attention model is added to the action understand-
ing model using the strategy of (cid:147)highest con(cid:2)dence level
always wins(cid:148), which means the behaviour with the pre-
vious highest con(cid:2)dence level gets the next computa-
tion.

(cid:15) Our Attention model is added to the action understand-
ing model using a combination of the (cid:147)round robin(cid:148) and
the (cid:147)highest con(cid:2)dence level always wins(cid:148) strategies to
select between the behaviours.

Finally, we also ran another set of experiments by adding to
these implementations initialisation for the top-down part us-
ing bottom-up saliencies.

6 Experimental Results
We used 26 different videos, performing 130 experiments, us-
ing the different scheduling algorithms above, while varying
some of the model’s parameters. The results for behaviour
6 are shown in (cid:2)gure 6 as an example of a typical output to
demonstrate how our system can work on top of the action un-
derstanding model, cutting down its computational costs by
up to 87.5% (because every behaviour is now only being pro-
cessed once in every 8 frames), and still producing the correct
results to determine which behaviour is being demonstrated.
But more importantly, it directs the limited computational re-
sources to the relevant areas in the scene, instead of analysing
the whole scene.

In addition to this, the above results were substantially im-
proved by adding initialisation to the top-down part using the
bottom-up saliencies to our attention model . Therefore, in
the case of a scene where the orange does not exist, as shown
in (cid:2)gure 5, our bottom-up block would detect the coke can
and the hand as being salient objects. Using previously saved
colour histograms, our system recognises that these salient
objects are a coke can and a hand. This result is passed to the
top-down part of our attention model, which in turn will only
select the behaviours that are involved with these objects, as
opposed to previously selecting every behaviour that exists in
the database.

Results from behaviour 1, where no orange was present
in the scene, are shown in (cid:2)gure 7 as an example for this
initialisation process of only selecting the relevant behaviours
using the bottom-up saliencies. The results are compared to
the previous implementation without this initialisation. It can
be seen that this initialisation process speeds up the correct
recognition of the correct behaviour. Furthermore, it will also
serve in allowing scalability to be added to our model.

As can be seen from (cid:2)gure 6, our attention model not only
still gives the correct results for the recognition of behaviour
6, but it does it with the saving of up to 87.5% of the to-
tal computational costs. Furthermore, it returns better results
in recognising the correct behaviour by isolating it from the
other wrong behaviours, due to the focusing on the correct
areas of the scene only, instead of the entire image. These
successful results were also seen for all of the other seven
behaviours that were tested.

Figure 5: Images to show bottom-up block processing a scene
of a hand picking a coke can

All the other behaviours are implemented in the same way.
Forward models were hand coded using kinematic rules to
output the prediction of the next state. The output from the
forward model, which is a prediction of the actual next state,
is compared with the next state. Based on this comparison, a
con(cid:2)dence level is generated for this behaviour by either re-
warding it with one con(cid:2)dence point if the prediction is suc-
cessful, or otherwise punishing it by subtracting one con(cid:2)-
dence point.

Figure 5 shows an input example of what the robot sees
when a behaviour is carried out (in this case, it is the demon-
stration of a hand picking a coke can). A background was
chosen where these object’s colours were minimally present.
These are only snapshots of some frames.

The bottom-up block detects and tracks the presence of the
coke can, the orange and/or the hand in the scene, depending
on what the top-down part of the attention model requires.
The output of this bottom-up block are the corresponding lo-
cations of where the hand, the coke can and/or the orange are
in the scene. This information is then passed to the top-down
part of the model for intelligent processing. The CAMShift
algorithm [Bradski, 1998] was used to assist in doing this.
We used a hue and saturation histogram back-projection of
camera images taken at a pixel resolution of 160 (cid:2) 120 and at
30 frames per second. The corresponding histograms of the
three objects used in our experiments were pre-saved into the
robot’s memory, and used during the experiments as a simple
method of object recognition.

Four different implementations were experimented with

each of the eight behaviours:

(cid:15) A pure implementation of the action understanding
model without our attention model. Hence there was no
layer of intelligence to cut down on computational costs,
i.e. each behaviour gets to carry out all the computations
it requires at each frame.

(cid:15) Our Attention model is added to the action understand-
ing model using a (cid:147)round robin(cid:148) scheduling algorithm
(equal time sharing) [Stallings, 2000] to select between
the behaviours. Therefore, each behaviour is processed

Figure 7: Behaviour 1 - Pick coke can

Behaviour 6 in (cid:2)gure 6 shows that when a (cid:147)round robin(cid:148)
scheduling algorithm is applied, the correct behaviour is still
picked, but it ends up with a lower con(cid:2)dence value that is
quite close to the other resulting con(cid:2)dence values of the
other behaviours. The reduction in computational costs using
this algorithm has resulted in a decrease on the separability
of the behaviours. This is because there are n frames in the
demonstrated scene (in these experiments, n is 60), and each
behaviour is only processed once every m frames, where m
is the number of behaviours (in these experiments, m is 8)
meaning a total number of n=m computations per behaviour
(which is 7 in these experiments, hence, only a maximum
score of 7 for the winning behaviour). Behaviour 6 in this
case scores 5 out of 7, still enough to make it the winning be-
haviour, but much lower than the pure implementation of the
action understanding model without the use of any attention
mechanism.

When (cid:147)highest con(cid:2)dence level always wins(cid:148) is used, the
opposite effect to (cid:147)round robin(cid:148) can be seen: attention acts
like an accelerator to the winning behaviour once it recog-
nises who is the winner, suppressing all the others. The prob-
lem with purely using the scheduling algorithm of (cid:147)highest
con(cid:2)dence level always wins(cid:148), is that it may not always ini-
tialise correctly, as can be seen in (cid:2)gure 6, hence taking some
time before converging on the correct behaviour.

To alleviate this problem, we used the (cid:147)round robin(cid:148)
scheduling algorithm as an initialisation step for the (cid:147)high-
est con(cid:2)dence level always wins(cid:148) which then acts as an ac-

Figure 6: Behaviour 6 - Move hand away from orange

celerator for the winning behaviour. Hence, (cid:147)round robin(cid:148)
is applied only for half the length of the demonstration (30
frames in these experiments). Then the (cid:147)highest con(cid:2)dence
level always wins(cid:148) is applied as an accelerator to the winning
behaviour. As can be seen from (cid:2)gure 6, it returns accurate
and fast results for selecting the winning behaviour. This pro-
cess may be seen as being equivalent to (cid:147)playing it safe(cid:148) at
the beginning by looking everywhere, because we are not yet
sure what is happening. But once we start to understand the
scene better, we are more con(cid:2)dent to focus on the relevant
parts and ignoring the rest.

Results from (cid:2)gure 7 show signi(cid:2)cant improvements when
using the bottom-up saliencies to initialise the top-down se-
lection of the relevant behaviours. Hence as a result, only
the relevant behaviours are picked for processing, instead of
picking all the behaviours in the robot’s database.
In this
experiment, the robot has 8 behaviours in its database, 4 of
which involve a hand and a coke can, and the other 4 involve
a hand and an orange.
In the demonstrated video, the or-
ange is not present, hence, all the 4 behaviours involving the
orange, are immediately punished and not processed. The
remaining 4 behaviours (instead of the total 8) are processed
with the (cid:147)round robin(cid:148) scheduling algorithm at the beginning.
Great improvement can be seen here in (cid:2)nding the correct be-
haviour sooner, at frame 10 instead of the previous frame 31.
This can be thought of as enabling our model to recognise the
correct behaviour being demonstrated easier and quicker in a
less complicated scene with fewer objects.

7 Conclusion

Our attention model utilises both, resource scheduling algo-
rithms, and initialisation of the top-down mechanism to cut
down on the computational costs. We have found that a com-
bination of the (cid:147)round robin(cid:148) and the (cid:147)highest con(cid:2)dence
level always wins(cid:148) strategies, together with using the bottom-
up saliencies for initialising the top-down selection of the
relevant behaviours to the demonstrated scene, worked very
well.

The computational costs needed to run our attention model
are justi(cid:2)ed since the action-understanding model is aimed
at having a large number of behaviours. As the number
of behaviours increases therefore, the resultant search space
makes the model indispensable. This is especially because
the savings on the computational costs will also increase by
(n (cid:0) 1)=n for n behaviours.

We are working towards further optimisation of our model
by considering optimal path algorithms. For example, if the
sequence of planned allocations involves looking at the head,
feet, and arm of a human demonstrator, the algorithm will
try to minimise the saccade required and rearrange the allo-
cations to accommodate that.

Optimisation based on predicting future requests will fur-
ther enhance the performance of our model, and will be our
next step in our investigation between attention and action un-
derstanding, with the ultimate goal of having robots that will
ef(cid:2)ciently understand our human actions.

Acknowledgments
This research was funded by the Donal W Morphy Trust
Scholarship and by the UK Engineering and Physical Sci-
ences Research Council and The Royal Society. The authors
would like to thank the BioART team for their support and
assistance, especially Matthew Johnson who assisted in the
implementation of the camshift tracker.

References
[Bradski, 1998] G. R. Bradski. Computer vision face track-
ing for use in a perceptual user interface. Intel Technology
Journal, Q2:1(cid:150)15, 1998.

[Breazeal and Scassellati, 1999] Cynthia Breazeal and Brian
Scassellati. A context-dependent attention system for a
social robot. In IJCAI ’99: Proceedings of the Sixteenth
International Joint Conference on Arti(cid:2)cial Intelligence,
pages 1146(cid:150)1153, San Francisco, CA, USA, 1999.

[Demiris and Johnson, 2003] Y. Demiris and M. Johnson.
Distributed, predictive perception of actions: a biologi-
cally inspired robotics architecture for imitation and learn-
ing. Connection Science Journal, 5(4):231(cid:150)243, 2003.

[Farid et al., 2002] M. M. Farid, F. Kurugollu, and F. D.
Murtagh. Adaptive wavelet eye-gaze-based video com-
pression [4877-32]. Proceedings- Spie the International
Society for Optical Engineering, (4877):255(cid:150)263, 2002.

[Itti et al., 1998] L. Itti, C. Koch, and E. Niebur. A model
of saliency-based visual attention for rapid scene analysis.
Ieee Transactions on Pattern Analysis and Machine Intel-
ligence, 20(11):1254(cid:150)1259, 1998.

[Koch and Ullman, 1985] C. Koch and S. Ullman. Shifts in
selective visual attention: towards the underlying neural
circuitry. Human Neurobiology, 4:219(cid:150)227, 1985.

[Stallings, 2000] William Stallings. Operating systems : in-
ternals and design principles. Prentice Hall, 4th ed edition,
2000.

[Treisman and Gelade, 1980] A. Treisman and G. Gelade. A
feature-integration theory of attention. Cognitive Psychol-
ogy, 12(1):97(cid:150)136, 1980.

[Tsotsos, 1989] J. K. Tsotsos. Complexity of perceptual
search tasks. In Proceedings of the 11th Int. Joint Conf.
on Arti(cid:2)cial Intelligence, pages 1571(cid:150)1577, 1989.

[Tsotsos, 2001] J. K. Tsotsos. Motion understanding: Task-
directed attention and representations that link perception
with action.
International Journal of Computer Vision,
45(3):265(cid:150)280, 2001.

[Van Essen et al., 1991] D.C. Van Essen, B. Olshausen, C.H.
Anderson, and J.L. Gallant. Pattern recognition, attention,
and information bottlenecks in the primate visual system.
Proc. SPIE Conf. on Visual Information Processing: From
Neurons to Chips, 1991.

[Wolfe and Gancarz, 1996] J. M. Wolfe and G. Gancarz.
Guided search 3.0.
In Basic and Clinical Applications
of Vision Science, pages 189(cid:150)192. Kluwer Academic Pub-
lishers, Dordrecht, 1996.

