Gerhard Brewka
Universit¨at Leipzig
Augustusplatz 10-11

04109 Leipzig, Germany

1012 Amsterdam, Netherlands

Nieuwe Doelenstraat 15

Contextual Default Reasoning

Floris Roelofsen

Luciano Seraﬁni

University of Amsterdam, ILLC

ITC-irst

Via Sommarive 18
38100 Trento, Italy

brewka@informatik.uni-leipzig.de

froelofs@science.uva.nl

luciano.seraﬁni@itc.it

Abstract

In this paper we introduce a multi-context variant of
Reiter’s default logic. The logic provides a syntac-
tical counterpart of Roelofsen and Seraﬁni’s infor-
mation chain approach (IJCAI-05), yet has several
advantages: it is closer to standard ways of repre-
senting nonmonotonic inference and a number of
results from that area come “for free”; it is closer
to implementation, in particular the restriction to
logic programming gives us a computationally at-
tractive framework; and it allows us to handle a
problem with the information chain approach re-
lated to skeptical reasoning.

1 Introduction

Interest in formalizations of contextual information and inter-
contextual information ﬂow has steadily increased over the
last years. Based on seminal papers by McCarthy [1987] and
Giunchiglia [1993] several approaches have been proposed,
most notably the propositional logic of context developed
by McCarthy [1993] and McCarthy and Buvaˇc [1998], and
the multi-context systems devised by Giunchiglia and Ser-
aﬁni [1994], which later have been associated with the lo-
cal model semantics introduced by Giunchiglia and Ghidini
[2001]. Seraﬁni and Bouquet [2004] have argued that multi-
context systems constitute the most general among these for-
mal frameworks.

Intuitively, a multi-context system describes the informa-
tion available in a number of contexts (i.e., to a number of
people/agents/databases, etc.) and speciﬁes the information
ﬂow between those contexts. A simple illustration of the main
intuitions underlying the multi-context system framework is
provided by the situation depicted in Figure 1, one of the
standard examples in the area. Two agents, Mr.1 and Mr.2,
are looking at a box from different angles. The box is called
magic, because neither Mr.1 nor Mr.2 can make out its depth.
As some sections of the box are out of sight, both agents have
partial information about the box. To express this informa-
tion, Mr.1 only uses proposition letters l (there is a ball on the
left) and r (there is a ball on the right), while Mr.2 also uses
a third proposition letter c (there is a ball in the center). To
model situations of this kind, formulas are labeled with the

contexts in which they hold, and so-called bridge rules are
used to represent information ﬂow.

Mr.1

Mr. 2

Figure 1: a magic box.

Most of the existing work in the ﬁeld is based on classical,
monotonic reasoning. The single exception we are aware of is
[Roelofsen and Seraﬁni, 2005]. To allow for reasoning based
on the absence of information from a context, the authors add
default negation to a rule based multi-context system and thus
combine contextual and default reasoning.

This paper presents a related approach. We propose a con-
textual variant of Reiter’s Default Logic DL [Reiter, 1980]
called Contextual Default Logic (ConDL) which shares a lot
of motivation with the Roelofsen/Seraﬁni paper, in particular
the basic idea of keeping information local for conceptual and
computational reasons (as opposed to merging default theo-
ries [Baral et al., 1994]). A major difference is that our de-
scription is syntactical rather than semantical. This has sev-
eral advantages: from a computational perspective, it is more
convenient to manipulate sets of formulas rather than sets of
models; it allows us to link multi-context default reasoning
more closely to earlier work in nonmonotonic reasoning; syn-
tactic restrictions lead directly to contextual variants of logic
programming under answer set and well-founded semantics
and thus to a fully computational approach; and it paves the
way to handle a serious weakness of the approach to skeptical
reasoning developed in [Roelofsen and Seraﬁni, 2005].

The outline of the paper is as follows: we ﬁrst brieﬂy
review the approach of Roelofsen and Seraﬁni and discuss
the weakness of skeptical, well-founded reasoning in this ap-
proach. We then introduce ConDL and show that extensions
of ConDL are in exact correspondence with stable informa-
tion chains in [Roelofsen and Seraﬁni, 2005]. We next show
how well-founded reasoning can be deﬁned for ConDL, es-
caping the difﬁculty of the information chain approach by
appeal to paraconsistent reasoning. We ﬁnally discuss con-
textual logic programming and give various examples to il-
lustrate that our formalism is indeed useful.

IJCAI-07

268

premises. Now c is a stable solution chain iff c is the minimal
solution chain of the c-reduced system.

Based on the observation that stable solution chains may
not exist, Roelofsen and Seraﬁni also deﬁne a skeptical se-
mantics which draws its intuitions from well-founded seman-
tics for logic programs [van Gelder et al., 1991]. It is based
on the construction of the so-called canonical chain cS. We
present this semantics in somewhat more detail because it has
a serious problem which we will later solve.

The canonical chain for a multi-context system S is con-
structed iteratively by applying an operator ΨS to a pair of
chains (cid:5)c, a(cid:6).
Intuitively, the ﬁrst chain c approximates cS
from above: at every stage of the iteration it contains the
models that are possibly in cS (initially, every model may
possibly be in cS , so in each context we start with the set
of all models). The second chain a, which is referred to as
the anti-chain, approximates cS from below: at every stage
it contains the models that are necessarily in cS (initially, no
model is necessarily in cS, so in each context we start with
the empty set of models).

Given a certain chain-anti-chain pair (cid:5)c, a(cid:6), the intended
transformation ΨS ﬁrst determines which rules in S will (not)
be applicable w.r.t. cS, and then reﬁnes (cid:5)c, a(cid:6) accordingly.
The canonical chain cS of S will be the ﬁrst component of the
≤-least ﬁxpoint of ΨS, where (cid:5)c, a(cid:6) ≤ (cid:5)c(cid:2), a(cid:2)(cid:6) iff for every
i (intuitively, iff (cid:5)c, a(cid:6) is “less evolved”
i, c(cid:2)
than (cid:5)c(cid:2), a(cid:2)(cid:6)).

i ⊆ ci and ai ⊆ a(cid:2)

We ﬁrst specify how ΨS determines which rules will (not)
be applicable w.r.t. cS. Let (cid:5)c, a(cid:6) and a rule r in S be given.
If r has a positive premise G, which is satisﬁed by c, then
G will also be satisﬁed by cS. On the other hand, if r has
a negative premise H, which is not satisﬁed by a, then H
will not be satisﬁed by cS either. So if all positive premises
of r are satisﬁed by c and all negative premises of r are not
satisﬁed by a, then r will be applicable with respect to cS:

S +(c, a) =

∀G ∈ prem+(r) : c |= G

and

∀H ∈ prem−(r) : a (cid:2) H

If r has a positive premise G, which is not satisﬁed by a,
then G will not be satisﬁed by cS either. If r has a negative
premise H, which is satisﬁed by c, then H will be satisﬁed
by cS as well. In both cases r will certainly not be applicable
with respect to cS:

S−(c, a) =

∃G ∈ prem+(r) : a (cid:2) G

or

∃H ∈ prem−(r) : c |= H

⎧⎨
⎩r ∈ S

⎧⎨
⎩r ∈ S

⎫⎬
⎭

⎫⎬
⎭

2 The information chain approach

We now give a brief review of the approach in [Roelofsen
and Seraﬁni, 2005]. The authors consider a set of contexts
C = {1, . . . , n} and a language Li for each context i ∈ C.
C and Li are assumed to be ﬁxed, each Li is built over a
ﬁnite set of proposition letters, using standard propositional
connectives.

To state that the information expressed by a formula ϕ ∈
Li is established in context i, the labeled formula (i : ϕ) is
used. A rule r is an expression of the form:

F ← G1 ∧ . . . ∧ Gm ∧ not H1 ∧ . . . ∧ not Hn

(1)

where F , all G’s, and all H’s are labeled formulas. F is
called the consequence of r and denoted by cons(r); all G’s
are called positive premises of r and together constitute the
set prem+(r); all H’s are called negative premises of r and
together make up the set prem−(r). A rule without premises
is called a fact. If a rule has positive premises only, it is called
a positive rule. A normal multi-context system is a ﬁnite set
of rules. Note that not is interpreted as default negation, the
rules are thus nonmonotonic.
Example 1 (Integration) Let d1, d2 be two meteorological
databases collecting data from sensors located in different
parts of the country. Each database sends its data to a third
database d3, which integrates the information obtained. Sup-
pose that d3 regards d1 as more trustworthy than d2: any
piece of information that is established in d1 is included in
d3, but information obtained in d2 is only included in d3 if it
is not refuted by d1. The following rules model this:

3 : ϕ ← 1 : ϕ
3 : ϕ ← 2 : ϕ ∧ not 1 : ¬ϕ

A classical interpretation m of language Li is called a local
model of context i. A set of local models is called a local
information state.
Intuitively, every local model in a local
information state represents a possible state of affairs. If a
local information state contains exactly one local model, then
it represents complete information. If it contains more than
one local model, then it represents partial information: more
than one state of affairs is considered possible.

A distributed information state is a collection of local in-
formation states, one for each context. Distributed informa-
tion states are referred to as chains. For systems without not,
the semantics is deﬁned in terms of minimal solution chains:
starting with the set of all models for all contexts, rule appli-
cation is captured semantically by eliminating those models
from a context in which the consequent of an applicable rule
is not true. Iterating this model elimination process until a
ﬁxpoint is reached yields the unique minimal solution chain.
For the general case, Roelofsen and Seraﬁni use a tech-
nique similar to the Gelfond/Lifschitz reduction for stable
models or answer sets [Gelfond and Lifschitz, 1988; 1991]:
a rule r is defeated by an information chain c = (c1, . . . , cn)
whenever it has a negative premise not (i : p) such that p
is true in all models in ci. By eliminating all c-defeated
rules and all negative premises from the c-undefeated rules,
we obtain a reduced multi-context system without negative

For convenience, we write S∼(c, a) = S \ S−(c, a). Think of
S∼(c, a) as the set of rules that are possibly applicable with
respect to cS, and notice that S +(c, a) ⊆ S∼(c, a).

Next, we specify how ΨS reﬁnes (cid:5)c, a(cid:6), based on S +(c, a)
and S∼(c, a). Every local model m ∈ ci that does not satisfy
the consequence of a rule in S +(c, a) should certainly not be
in cS and is therefore removed from c. On the other hand,
every local model m ∈ ci that satisﬁes the consequences of
every rule in S∼(c, a) should certainly be in cS (S provides
no ground for removing it) and is therefore added to a.

c
ΨS((cid:5)c, a(cid:6)) = (cid:5)Ψ

S((cid:5)c, a(cid:6)), Ψ

a

S((cid:5)c, a(cid:6))(cid:6)

IJCAI-07

269

where:

c

(cid:8)
(cid:9)
m | ∃r ∈ S +(c, a) : m (cid:2) cons(r)

S((cid:5)c, a(cid:6)) = c \
a
S((cid:5)c, a(cid:6)) = a ∪ {m | ∀r ∈ S∼(c, a) : m |= cons(r)}

Ψ

Ψ

Unfortunately, this approach has a serious problem. Con-

sider the following example:

1 : p ← not 1 : ¬p

1 : ¬p ← not 1 : p
2 : t ← not 1 : q

One would expect (2 : t) to be derivable. However, the
canonical chain approach does not give any conclusion. The
problem is that no model can satisfy both p and ¬p, so no
model will ever be added to the anti-chain a and thus it is
never established that (1 : q) cannot be derived. The essential
problem is this: the canonical model approach assumes that
the set of possible conclusions is deductively closed. This is
exactly the problem addressed in [Brewka and Gottlob, 1997]
in the context of default logic. We will later show how the so-
lution presented there can be applied to the problem of well-
founded multi-context reasoning as well.

3 Contextual default logic
As before let C = {1, . . . , n} be the set of contexts/agents
with associated propositional languages Li. A default context
system for C is a tuple

(Δ1, . . . , Δn)

where each Δi = (Di, Wi) is a contextual default theory.
A contextual default theory is like a regular Reiter default
theory, with the exception that default rules may refer in their
prerequisites and justiﬁcations (not in their consequent!) to
other contexts.

More precisely, a contextual default rule is of the form

d = p1, . . . , pm : q1, . . . , qk/r

where p1, . . . , pm, q1, . . . , qk are regular formulas or labeled
formulas, and the consequent r (also denoted cons(d)) is a
regular formula. A contextual default theory (Di, Wi) then is
just a pair consisting of a set of regular formulas Wi (the cer-
tain knowledge) and a set of contextual default rules Di. Wi
and the unlabeled formulas in defaults have to be expressed
in Li. Each context thus has its own language for expressing
its particular view of the world.

Note that if a default rule contains a regular formula, this
formula is implicitly assumed to refer to the context of the
default. We may thus assume without loss of generality that
all prerequisites and justiﬁcations are labeled formulas. The
reason we allow more than one prerequisite for a default –
which is not necessary for Reiter’s logic – is that we want
to be able to refer to more than one context without using
context labels inside logical formulas.

1, . . . , S (cid:2)

Now we can generalize the notion of an extension to de-
fault context systems. Given two tuples (S1, . . . , Sn) and
n) we deﬁne component-wise inclusion ⊆c as
(S (cid:2)
(S1, . . . , Sn) ⊆c (S (cid:2)
i for all i (1 ≤
i ≤ n). When we speak of minimality of tuples in the rest of
the paper we mean minimality with respect to ⊆c.

n) iff Si ⊆ S (cid:2)

1, . . . , S (cid:2)

Deﬁnition 1 Let C = ((D1, W1), . . . , (Dn, Wn)) be a de-
fault context system. Let (S1, . . . , Sn) be a tuple of sets of
formulas. Deﬁne the operator Γ such that

Γ(S1, . . . , Sn) = (S (cid:2)

1, . . . , S (cid:2)

n)

where (S (cid:2)
satisfying for all i (1 ≤ i ≤ n):

1, . . . , S (cid:2)

n) is the minimal tuple of sets of formulas

i is deductively closed (over Li), and

1. Wi ⊆ S (cid:2)
i,
2. S (cid:2)
3. if (c1 : p1), . . . , (ct : pt) : (ct+1 : q1), . . . , (ct+k : qk)/r ∈
ci for all i (1 ≤ i ≤ t), and ¬qj (cid:12)∈ Sct+j for

Di, pi ∈ S (cid:2)
all j (1 ≤ j ≤ k), then r ∈ S (cid:2)
i.

The tuple (S1, . . . , Sn) is a contextual extension of C if it is
a ﬁxpoint of Γ.

In the special case where default rules do not refer to other
contexts, we obtain a tuple consisting of arbitrary extensions
of the individual default theories. In the general case informa-
tion ﬂows, via the default rules, from one context to another.
Defaults thus play the role of bridge rules.

It turns out that each extension corresponds exactly to a
stable solution chain in the information chain approach. The
translation between our default context systems and the sys-
tems used there (which we call RS-systems after their inven-
tors from now on) is straightforward: each default

(c1 : p1), . . . , (ct : pt) : (ct+1 : q1), . . . , (ct+k : qk)/r

in Di is translated to the rule

(i : r) ← (c1 : p1), . . . , (ct : pt),

not (ct+1 : ¬q1), . . . , not (ct+k : ¬qk)

and each formula p ∈ Wi to the rule (i : p) ←. We have the
following proposition:
Proposition 1 Let C be a default context system, R the cor-
responding RS-system. Let S = (S1, . . . , Sn) be a se-
quence of deductively closed sets of formulas and M =
(M1, . . . , Mn) a sequence of sets of models such that for all
i (1 ≤ i ≤ n)

Mi = {m | m |= Si}.

S is a contextual extension of C iff M is a stable solution
chain of R.
We can thus view our approach based on contextual default
logic as a syntactical characterization of the semantical ap-
proach in [Roelofsen and Seraﬁni, 2005]. The advantage of
our characterization is threefold: it is closer to standard ap-
proaches in nonmonotonic reasoning and allows us to trans-
fer results which have been established for default logic quite
easily to the multi-context case; it is more amenable to com-
putation; it allows us to handle the difﬁculty of the semantical
approach with respect to skeptical reasoning, as we will see
in the next section.

As an example of the results we basically get “for free” we

just mention the following:

Proposition 2 (Minimality)
Let E1 and E2 be extensions of a default context system C. If
E1 ⊆c E2 then E1 = E2.

IJCAI-07

270

A normal default context system is one where each default in
each context is of the form:

(c1 : p1), . . . , (ct : pt) : r/r.

Proposition 3 (Existence)
Each normal default context system possesses at least one ex-
tension.

Proposition 4 (Consistency)
Let C = ((D1, W1), . . . , (Dn, Wn)) be a default context sys-
tem, E = (E1, . . . , En) an extension of C. If all Wi are con-
sistent and each default possesses at least one justiﬁcation,
then each Ej is consistent.
A lot more results for which we do not have space here carry
over. For instance, we can give a quasi-inductive deﬁnition of
extensions as in [Reiter, 1980]. We can deﬁne the notion of a
stratiﬁed default context system for which a unique extension
exists. Also complexity results carry over which establish
that the main reasoning tasks for contextual default logic are
on the second level of the polynomial hierarchy.

4 Skeptical contextual default reasoning
The essential problem of the canonical model approach is as
follows:
it assumes that the set of potential conclusions is
deductively closed. Thus, whenever two conﬂicting formulas
p and ¬p are considered as potential conclusions, then this is
also the case for an arbitrary formula q, even if q is entirely
unrelated.

This is exactly the problem addressed in [Brewka and Got-
tlob, 1997] in the context of default logic. The solution is to
apply paraconsistent reasoning in determining potential con-
clusions: both p and ¬p are considered as possible conclu-
sions, but not their deductive closure, i.e. not the set of all
formulae. In the example discussed above, one should detect
that (1 : q) is not a possible conclusion because the only way
to derive this labeled formula is based on an inconsistent set
of potential conclusions. The semantics thus should derive
(2 : t).

In [Brewka and Gottlob, 1997] a sequence of different se-
mantics was introduced which allows to trade-off the effort
spent for consistency checking with the strength of skepti-
cal inference. Rather than presenting the different semantics
here, we focus on a single one (called W F S2 in the cited
paper) and directly describe its generalization to contextual
default theories.
Deﬁnition 2 Let C = ((D1, W1), . . . , (Dn, Wn)) be a de-
fault context system. Let D(cid:2) = (D(cid:2)
n) be a tuple of
subsets of the defaults in C. Let p be a formula. A C-default
proof for p from D(cid:2) in context i is a ﬁnite sequence

1, . . . , D(cid:2)

P = ((c1 : d1), . . . , (cm : dm))

of context/default pairs such that the following conditions are
satisﬁed:

cj , for all j (1 ≤ j ≤ m),

1. dj ∈ D(cid:2)
2. cm = i,
3. for each l and each prerequisite (c : q) of dl, q is a logical

consequence of

Wc ∪ {cons(dk) | k < l, (c : dk) ∈ P },

4. Wi ∪ {cons(dk) | (i : dk) ∈ P } (cid:13) p.
Let S = (S1, . . . , Sn) be a sequence of sets of formulas,
D = (D1, . . . , Dn) a sequence of sets of contextual defaults.
Deﬁne

DS = (D(cid:2)

1, . . . , D(cid:2)

n)

i is the set of defaults from Di not defeated by S
where D(cid:2)
(d is defeated by S iff it has a justiﬁcation (i : q) such that
¬q ∈ Si). With the notion of a default proof, we can express
the Γ operator introduced above as follows: Γ(S1, . . . , Sn) =
(S (cid:2)
i is the set of formulas possessing a
default proof from DS

n) iff each S (cid:2)
.

1, . . . , S (cid:2)

We will now deﬁne a similar operator Γ∗, but with an im-
portant restriction to consistent proofs. This will be sufﬁcient
to handle the problem described above.
Deﬁnition 3 Let P = ((c1 : d1), . . . , (cm : dm)) be a default
proof, S = (S1, . . . , Sn) a sequence of sets of formulas. We
say P is S-consistent iff Si ∪ {cons(dj) | (i : dj) ∈ P } is
consistent, for all i (1 ≤ i ≤ n).
Now let Γ∗(S1, . . . , Sn) = (S (cid:2)
i is the set
of formulas possessing a consistent default proof from DS
.
Note that both Γ and Γ∗ are antimonotone operators. Ap-
plying the two in sequence thus yields a monotone operation
which has a least ﬁxpoint. The least ﬁxpoint can be reached
by iterative applications of the two operators to the sequence
consisting of empty sets only.
Deﬁnition 4 Let C = ((D1, W1), . . . , (Dn, Wn)) be a de-
fault context system. S = (S1, . . . , Sn) is the well-founded
conclusion set of C iff S is the least ﬁxpoint of the operator
ΓΓ∗.

n) iff each S (cid:2)

1, . . . , S (cid:2)

To see how this handles the problem consider the ConDL
variant of the example discussed above. We have the contex-
tual default theory ((D1, W1), (D2, W2)) with W1 = W2 =
∅ and

D1 = {: p/p, : ¬p/¬p}
D2 = {: (1 : ¬q)/t}.

Indeed, application of Γ∗ to the sequence S = (∅, ∅) yields

S (cid:2) = (T h({p}) ∪ T h({¬p}), T h({t})).

Note that context 1 does not contain q. For this reason, apply-
ing Γ to S (cid:2) gives us (T h(∅), T h({t})). This is also a ﬁxpoint
and we establish t in context 2, as intended.

Based on a modiﬁcation of a corresponding proof in
[Brewka and Gottlob, 1997] we can show that well-founded
semantics for contextual default theories is correct with re-
spect to contextual extensions.

Proposition 5 (Correctness)
Let C = ((D1, W1), . . . , (Dn, Wn)) be a default context
system, E = (E1, . . . , En) an extension of C and S =
(S1, . . . , Sn) the well-founded conclusion set of C. We have
Si ⊆ Ei for all i, 1 ≤ i ≤ n.

5 Contextual ASP

A syntax restriction leads to contextual answer set program-
ming (contextual ASP), respectively contextual logic pro-
gramming under well-founded semantics. As before let C =

IJCAI-07

271

{1, . . . , n} be a set of contexts/agents. A logic programming
context system (LPCS) is a tuple (P1, . . . , Pn) where each Pi
is a contextual logic program. A contextual logic program is
a set of rules of the form

a ← b1, . . . bk, not bk+1, . . . , not bm

where a is a literal, each bi is either a literal or a labeled literal
of the form (c : l) where c is a context and l a literal.

For LPCSs where not does not appear in the bodies of any
rule (let’s call them deﬁnite LPCSs), we can deﬁne the notion
of a minimal context model:
Deﬁnition 5 Let C = (P1, . . . , Pn) be a deﬁnite LPCS. An
n-tuple of sets of literals S = (S1, . . . , Sn) is called the mini-
mal context model of C iff S is the smallest n-tuple satisfying
the following conditions:

1. a ∈ Si whenever a ← (c1 : b1), . . . , (ck : bk) ∈ Pi,

b1 ∈ Sc1 , . . ., bk ∈ Sck ,

2. Si is the set Liti of all literals in Li whenever Si con-

tains a pair of complementary literals l, ¬l.

The deﬁnition of stable model is now straightforward:
Deﬁnition 6 Let C = (P1, . . . , Pn) be an (arbitrary) LPCS,
and S = (S1, . . . , Sn) a tuple of sets of literals. The S-reduct
of C, denoted C S

, is obtained from C by

1. deleting in each Pi all rules with body literal not (c : l)

such that l ∈ Sc,

2. deleting from all remaining rules in all programs Pi all

default negated literals.

Deﬁnition 7 Let C = (P1, . . . , Pn) be an (arbitrary) LPCS,
and S = (S1, . . . , Sn) a tuple of sets of literals. S is a stable
context model of C iff it is the minimal context model of C S
.
Well-founded semantics for LPCSs can be deﬁned in the
same spirit as for ConDL. However, consistency checking be-
comes much easier. For C = (P1, . . . , Pn) and a tuple of sets
of literals S = (S1, . . . , Sn) let γ(S) be the minimal context
model of C S
. Deﬁne the minimal context set of a deﬁnite
LPCS like the minimal context model, but without require-
ment 2 (inconsistent sets of literals do not have to be closed).
Let operator γ ∗(S) produce the minimal context set of C S
.
The operators γ and γ ∗ both are anti-monotone, the combined
operator γγ ∗ is thus monotone and possesses a least ﬁxpoint.
We call this ﬁxpoint the well-founded context model of C.

The use of this operator can be illustrated using our earlier

example. We have the LPCS C = (P1, P2) with

and

P1 :

p ← not ¬p

¬p ← not p

P2 :

t ← not (1 : q)

Indeed, γ ∗(∅, ∅) = ({p, ¬p}, {t}). As in the case of con-
textual default logic, context 1 does not contain q. For this
reason, applying γ to S (cid:2) gives us (∅, {t}). This is already a
ﬁxpoint and we establish t in context 2, as intended.

Contrary to well-founded semantics for contextual default
logic, the computation time for well-founded semantics of
LPCSs is polynomial: the number of iterations is bounded
by the total number of literals in all contexts, and so is the
time needed for each iteration.

6 Applications
In this section we illustrate the use of contextual logic pro-
gramming with further examples. Our setting was proposi-
tional so far. In ASP it is common to use variables in rules
as shorthand for the set of all ground instances of the rules.
Users represent their knowledge in terms of programs with
variables, a grounder (like lparse) then generates the purely
propositional ground instantiation of the rules which is then
passed on to an answer set solver like dlv [Leone et al., 2002]
or smodels [Simons et al., 2002].

We will adopt and extend this use of variables for contex-
tual logic programming. We assume three types of variables:
term variables which are common in ASP and will be de-
noted by X, Y , possibly indexed; context variables denoted
by C, possibly indexed; and proposition variables denoted
by P , possibly indexed. Term variables are to be instanti-
ated by ground terms, context variables by contexts (more
precisely, integers denoting contexts), and proposition vari-
ables by ground literals. For convenience, we will also al-
low literals to appear as terms (strictly speaking we would
have to distinguish between a proposition p and a term tp
representing this proposition; we assume the grounder is able
to take care of this). As common in ASP we will also use
rules with empty head of the form ← body as abbreviation
for f ← not f, body where f is a symbol not appearing else-
where in the program. The effect of the rule is that no answer
set exists in which body holds. With these conventions, it is
easy to model several interesting multi-context scenarios.
Information fusion: Assume agent i decides to believe an
arbitrary literal p whenever some other agent believes p and
none of the agents believes −p (−p is the complement of p,
that is ¬p if p is an atom, and r if p = ¬r). This can be
modeled by including in Pi the rules

P ← (C : P ), not rej(P )

rej(P ) ← (C : −P )

Again we assume the grounder handles the complement “−”
adequately. Note that this representation implicitly guaran-
tees that only information consistent with i’s information is
added since in case of conﬂict a proposition will be rejected.
One can also think of scenarios where agent i believes p
whenever the majority of agents does so. Let m = n + 1/2 if
n is odd, m = n + 2/2 otherwise. A corresponding rule is:

P ← (C1 : P ), . . . , (Cm : P ),

C1 (cid:12)= C2, C1 (cid:12)= C3, . . . , Cm−1 (cid:12)= Cm.

Game theory: We show how we can compute Nash equi-
libria for games in normal form using LPCSs.
In general,
we need to represent the choices available to each player, the
best action given a particular choice of the other players, and
a rule that says only the best action should be chosen.

Consider the famous prisoner’s dilemma, a game involving
2 agents which can either cooperate (c) or defect (d). The
gains obtained by the agents for each combination of choices
are described in the following table:

c
3,3
5,0

d
0,5
1,1

c
d

IJCAI-07

272

The single Nash equilibrium is obtained when both players
defect. The game can be modeled as the 2-context system
(P1, P2) where P1 is

choose(d) ← not choose(c)
choose(c) ← not choose(d)
best(d) ← (2 : choose(c))
best(d) ← (2 : choose(d))

← choose(X), not best(X)

and P2 is as P1 with context 2 replaced by 1. The single
contextual answer set is

({choose(d), best(d)}, {choose(d), best(d)})

and corresponds to the Nash equilibrium. In this fashion we
can represent arbitrary games in normal form.

Social choice: So far we have assumed the logic programs
representing contexts are so-called extended programs with
two types of negation. Of course, we can also use other types
of programs. A convenient language extension handled by
the smodels system are cardinality constraints [Simons et al.,
2002] of the form L{a1, . . . , ak}U . Here L and U are inte-
gers representing lower and upper bounds on the numbers of
atoms aj which are true in a model. Cardinality constraints
can appear in the head or body of a rule and are highly con-
venient for many applications.

Without presenting the formal details, we want to mention
that it is not difﬁcult to base contextual answer set program-
ming on such extended programs. Here is an example illus-
trating a possible use in social choice theory. Assume we
have n − 1 voters, each voter has a program describing candi-
dates, and in particular which among the candidates she likes
best. This information may be derived from preference crite-
ria represented in the respective programs. We assume agent
n is not a voter. Her role is to determine the winner based on
the other agents’ votes and a particular rule for selecting the
winner. For example, in a simple majority vote we can use
the program Pn (con stands for context, cand for candidate):
votes(X, N ) ← N {(C : best(X)) : con(C)}N, cand(X)

wins(X) ← not ¬wins(X)

¬wins(X) ← votes(X, N ), votes(Y, M ), M > N

The ﬁrst rule says that candidate X has N votes if best(X)
holds in exactly N contexts. Other voting rules (like the Con-
dorcet rule) can be represented in a similar way.

7 Conclusions
In an attempt to combine the ﬁelds of multi-context systems
and nonmonotonic reasoning we introduced a multi-context
variant of Reiter’s default logic. Contextual default logic has
several advantages over the information chain approach: it is
closer to standard ways of representing nonmonotonic infer-
ence, which allows us to transfer a number of results from
that area; it is closer to implementation, in particular the re-
striction to logic programming gives us a computationally at-
tractive framework for nonmonotonic multi-context reason-
ing; and it allows us to handle a problem with the information
chain approach related to skeptical reasoning. The examples
we discussed suggest a number of interesting applications.

References
[Baral et al., 1994] Chitta Baral, Sarit Kraus, Jack Minker,
and V. S. Subrahmanian. Combining default logic data-
bases. Int. J. Cooperative Inf. Syst., 3(3):319–348, 1994.

[Brewka and Gottlob, 1997] G. Brewka and G. Gottlob.
Well-founded semantics for default logic. Fundamenta In-
formaticae, 31(3/4):221–236, 1997.

[Gelfond and Lifschitz, 1988] M. Gelfond and V. Lifschitz.
The stable model semantics for logic programming. In In-
ternational Conference on Logic Programming (ICLP 88),
pages 1070–1080, 1988.

[Gelfond and Lifschitz, 1991] Michael

Vladimir Lifschitz.
grams and disjunctive databases.
Computing, 9(3/4):365–386, 1991.

and
Classical negation in logic pro-
New Generation

Gelfond

[Ghidini and Giunchiglia, 2001] C.

F. Giunchiglia.
tual reasoning = locality + compatibility.
Intelligence, 127(2):221–259, 2001.

and
Local models semantics, or contex-
Artiﬁcial

Ghidini

[Giunchiglia and Seraﬁni, 1994] F. Giunchiglia and L. Ser-
aﬁni. Multilanguage hierarchical logics, or: how we can
do without modal logics. Artiﬁcial Intelligence, 65(1):29–
70, 1994.

[Giunchiglia, 1993] F. Giunchiglia. Contextual reasoning.

Epistemologia, XVI:345–364, 1993.

[Leone et al., 2002] N. Leone, G. Pfeifer, W. Faber, T. Eiter,
G. Gottlob, S. Perri, and F. Scarcello. The DLV system for
knowledge representation and reasoning. Technical report
cs.AI/0211004, arXiv.org, November 2002.

[McCarthy and Buvaˇc, 1998] J. McCarthy and S. Buvaˇc.
Formalizing context (expanded notes). In Computing Nat-
ural Language, volume 81 of CSLI Lecture Notes, pages
13–50. 1998.

[McCarthy, 1987] J. McCarthy. Generality in artiﬁcial in-
telligence. Communications of ACM, 30(12):1030–1035,
1987.

[McCarthy, 1993] J. McCarthy. Notes on formalizing con-
text. In International Joint Conference on Artiﬁcial Intel-
ligence (IJCAI 93), pages 555–560, 1993.

[Reiter, 1980] R. Reiter. A logic for default reasoning. Arti-

ﬁcial Intelligence, 13:81–132, 1980.

[Roelofsen and Seraﬁni, 2005] F. Roelofsen and L. Seraﬁni.
Minimal and absent information in contexts. In Proc. 19th
International Joint Conference on Artiﬁcial Intelligence,
IJCAI-05, 2005.

[Seraﬁni and Bouquet, 2004] L. Seraﬁni and P. Bouquet.
Comparing formal theories of context in AI. Artiﬁcial In-
telligence, 155:41–67, 2004.

[Simons et al., 2002] P. Simons, I. Niemel¨a, and T. Soininen.
Extending and implementing the stable model semantics.
Artiﬁcial Intelligence, 138(1-2):181–234, 2002.

[van Gelder et al., 1991] A. van Gelder, K. Ross, and J. S.
Schlipf. The well-founded semantics for general logic pro-
grams. Journal of the ACM, 38(3):620–650, 1991.

IJCAI-07

273

