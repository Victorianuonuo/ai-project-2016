On Valued Negation Normal Form Formulas∗

H´el`ene Fargier

IRIT-CNRS, Toulouse
email: fargier@irit.fr

Abstract

Subsets of the Negation Normal Form formulas
(NNFs) of propositional logic have received much
attention in AI and proved as valuable representa-
tion languages for Boolean functions. In this pa-
per, we present a new framework, called VNNF,
for the representation of a much more general class
of functions than just Boolean ones. This frame-
work supports a larger family of queries and trans-
formations than in the NNF case, including opti-
mization ones. As such, it encompasses a number
of existing settings, e.g. NNFs, semiring CSPs,
mixed CSPs, SLDDs, ADD, AADDs. We show
how the properties imposed on NNFs to deﬁne
more “tractable” fragments (decomposability, de-
terminism, decision, read-once) can be extended to
VNNFs, giving rise to subsets for which a number
of queries and transformations can be achieved in
polynomial time.

Introduction

1
For the past few years, several frameworks specializing the
standard propositional one have been developed. Such frame-
works are centered on fragments which are proper subsets of
a full propositional language. Among them is the inﬂuential
DNNF fragment [Darwiche, 2001], and its subsets d-DNNF,
FBDD and OBDD, which have been successfully applied to a
number of AI tasks, including diagnosis, reasoning under un-
certainty, and planning. The success of such languages comes
from the fact that they support a number of queries and trans-
formations in polynomial time and are quite spatially suc-
cinct. The sources of their efﬁciency have been identiﬁed
as formal properties on the corresponding structures, e.g. de-
composability for DNNF, while d-DNNF asks also for deter-
minism [Darwiche and Marquis, 2002].

On the other hand, in the recent years, many algebraic
frameworks generalizing the standard CSP one have been
pointed out; among them are VCSP [Schiex et al., 1995], val-
uation algebra [Shenoy and Shafer, 1988; Kohlas and Shenoy,
The authors would like to thank Sylvie Coste-Marquis for her
help. The second author has been partly supported by the R´egion
Nord/Pas-de-Calais, the IRCICA Consortium and by the European
Community FEDER Program.

∗

Pierre Marquis

CRIL-CNRS, Universit´e d’Artois, Lens

email: marquis@cril.univ-artois.fr

2000] and semiring CSP [Bistarelli et al., 1995]; PFU [Pralet
et al., 2006]. In such frameworks, satisfaction is a more grad-
ual notion than in the standard CSP one; valuations range
over some ordered scale (which can e.g. be interpreted as
a utility/uncertainty scale) and can be aggregated using some
operators. These frameworks consider a number of queries
which extend the ones considered in the standard framework
(mainly, the consistency query); especially, optimization is an
important query in such settings.

At the intersection of those two research lines are a few ap-
proaches, where DAGs are used to represent functions rang-
ing over an ordered scale. Let us mention SLDD [Wilson,
2005], AADD [Sanner and McAllester, 2005], ADD [Bahar
et al., 1993], and arithmetic circuits [Darwiche, 2002].

This work can be viewed as a further, yet more system-
atic attempt to bridge the gap between both research streams.
We present a general framework, called VNNF (for “Valued
NNFs”), suited for the representation of a much more gen-
eral class of functions than just Boolean ones. This frame-
work supports a larger family of queries and transformations
than in the NNF case, including variable elimination, suited
to optimization issues and encompasses a number of existing
representation settings, e.g. NNF, semiring CSP, mixed CSP,
SLDD, ADD, and AADD. We show how the properties im-
posed on NNFs to deﬁne “tractable” fragments (decompos-
ability, determinism, decision, read-once) can be extended to
give rise to subsets of VNNF, for which a number of queries
and transformations can be achieved in polynomial time.

2 The VNNF Framework
The VNNF framework gathers the family of VNNF lan-
guages, and the queries and transformations they support.
Each VNNF language allows the representation of some func-
tions ranging over an ordered scale; such a language is fully
characterized by a representation context (cid:3)E, X, F(cid:4) consist-
ing of a valuation structure E, a set X of variables and a set
F of primitive or “local” functions (the word is taken from
[Pralet et al., 2006] where local functions represent prefer-
ences or plausibility degrees over assignments). Let us ﬁrst
make precise the notion of valuation structure:
Deﬁnition 1 (valuation structure) A valuation structure is a
triple E = (cid:3)E,(cid:5), OP(cid:4) where:
• (E,(cid:5)) is a set ordered by a relation (cid:5) (which is thus

IJCAI-07

360

reﬂexive, antisymmetric and transitive) and such that E
has a greatest element (cid:6) and a least element ⊥;
• OP is a subset of OPE, the set of all binary operators
⊗ on E such that each ⊗ is associative, commutative,
monotonic (∀a, b, c ∈ E, if a (cid:5) b then a ⊗ c (cid:5) b ⊗ c)
and has a neutral element e⊗.
When E is totally ordered by (cid:5), elements of OPE are
generally called uninorms. When ⊥ (resp. (cid:6)) is the neu-
tral element of ⊗, ⊗ is usually called a t-conorm (resp. a
t-norm) on E. We shall use the same terminology here, ne-
glecting the fact that E is not necessarily totally ordered.
For instance, t-conorms on E = [0, 1] include the operations
max(a, b), a + b − a.b, min(a + b, 1). T-norms include the
operations min(a, b), a.b. Max and
are also t-conorms on
is a uninorm on E = R∪{+∞,−∞}.
E = R
We assume that OP contains the following operators ∧ and
∨, which can be viewed as generalizations of the well-known
Boolean connectives:

a ∧ b = ⊥ if a, b (cid:15)= (cid:6)
a ∨ b = (cid:6) if a, b (cid:15)= ⊥.

a ∧ (cid:6) = (cid:6) ∧ a = a,
a ∨ ⊥ = ⊥ ∨ a = a,
When (cid:5) is a total order, min and max are alternative gener-
alizations of the Boolean connectives. Interestingly, ∧ and ∨
are admissible in any valuation structure (hence our assump-
tion is harmless), while min and max are admissible in any
valuation structure with a totally ordered domain:
Proposition 1 1 Let E be any valuation structure. OPE con-
tains ∧ (resp. ∨) which is a t-norm (resp. a t-conorm) on E.
Furthermore, if (cid:5) is a total order, OPE contains min (resp.
max) which is a t-norm (resp. a t-conorm) on E.

+∪{+∞}.

(cid:2)

(cid:2)

simpler notions:

The last two elements of a representation context are much
• X = {x1, . . . , xn} is a ﬁnite set of variables ranging
on ﬁnite domains. dom(x) denotes the domain of vari-
able x ∈ X. When Y ⊆ X, we note dom(Y ) =
Πx∈Y dom(x) and call Y -assignments the elements (cid:2)y ∈
dom(Y ). If Y and Z are disjoint subsets of X, then (cid:2)y+(cid:2)z
is the Y ∪ Z-assignment obtained by ordering the values
the
given in the two tuples in an increasing way w.r.t.
indexes of the associated variables.
• F is a set of functions f ranging over E (the ”local
functions”). When f is a function from Y ⊆ X to E,
scope(f) = Y is called the scope of f. Constant func-
tions are identiﬁed with elements of E without loss of
generality. We assume that F contains all functions f
such that card(scope(f)) ≤ 1, i.e. F contains all ”liter-
als” (cf. Section 5.3) and constants from E.
Let f ∈ F such that scope(f) = Y . Let Z s.t. Y ⊆ Z ⊆
X and (cid:2)z be any Z-assignment. We consider that f((cid:2)z) is equal
to f((cid:2)y) where (cid:2)y is the Y -assignment which coincides with (cid:2)z
for every variable from Y .
Now, let f, f(cid:4) ∈ F ; let ⊗ ∈ OP and x ∈ X; let (cid:2)z be any
Z-assignment s.t. Z ⊆ scope(f). We shall use the following
notations:

1Due to space reasons, proofs are omitted.

• f(cid:2)z denotes the restriction (or conditioning) of f by (cid:2)z,
the function given by scope(f(cid:2)z) = scope(f) \ Z
i.e.
and for any scope(f(cid:2)z)-assignment (cid:2)t, f(cid:2)z((cid:2)t) = f((cid:2)z + (cid:2)t).
Clearly enough, the conditioning of f by (cid:2)z where Z is
any subset of X (and not necessarily of scope(f)) can
also be deﬁned, and considered equal to f(cid:2)y where (cid:2)y is
the Z ∩ scope(f)-assignment which coincides with (cid:2)z for
every variable from Z ∩ scope(f).
• f ⊗f(cid:4) is the ⊗-combination of f and f(cid:4), i.e. the function
given by scope(f ⊗ f(cid:4)) = scope(f)∪ scope(f(cid:4)) and for
any scope(f⊗f(cid:4))-assignment (cid:2)t, f⊗f(cid:4)((cid:2)t) = f((cid:2)t)⊗f(cid:4)((cid:2)t).
• f[x,⊗] is the [x,⊗]-projection of f (or ⊗-elimination of
variable x), i.e. the function given by scope(f[x,⊗]) =
scope(f) \ {x} and for any scope(f[x,⊗])-assignment (cid:2)t,
f[x,⊗]((cid:2)t) =

(cid:2)x∈dom(x) f(cid:2)x((cid:2)t).

(cid:3)

We shall typically consider tractable representation contexts:
Deﬁnition 2 (tractable representation context) A
repre-
sentation context (cid:3)E, X, F(cid:4) where E = (cid:3)E,(cid:5), OP(cid:4) is
tractable iff each element of F ∪ OP is in linear time,2 and
this is also the case for the characteristic function of (cid:5).
If a function f is in linear time, then every conditioning
of f and every ⊗-combination of f with another linear time
function are in linear time as well, provided that ⊗ is in linear
time. and any (cid:2)z, f(cid:2)z ∈ F ). We are now ready to deﬁne in a
formal way the family of VNNF languages:
Deﬁnition 3 (VNNF) Given
context
(cid:3)E, X, F(cid:4) where E = (cid:3)E,(cid:5), OP(cid:4), VNNF is the set of all
ﬁnite, rooted directed acyclic graphs (DAGs) where each
internal node is labeled by the name of an operator of OP
and can have many arbitrarily children and where each leaf
node is labeled by the name of an element of F and by a
Z-assignment where Z ⊆ X.

representation

a

It is important to observe that such DAGs are not concerned
by the representation of local functions (or operators): they
are just given by their names, and can be represented as data
structures or algorithms, but outside the DAG.

Each leaf node N of a VNNF φ labeled by f and (cid:2)z actually
represents f(cid:2)z: (cid:2)z grounds some of the variables of scope(f).
Let vars(N) = scope(f) \ Z denote the set of free vari-
ables of the function associated to N. For any internal node
M, let op(M) denote the label of M, and Children(M) the
set of its children. The set of free variables occurring in the
VNNF φ rooted at node M is thus vars(φ) = vars(M) =
(cid:4)
N∈Children(M ) vars(N). φ is said to be grounded when
vars(φ) = ∅.
Deﬁnition 4 (semantics of a VNNF) Let φ be a VNNF w.r.t.
(cid:3)E, X, F(cid:4). The semantics val(φ) of φ is the function from
scope(val(φ)) = vars(φ) to E recursively deﬁned by:
• If φ is a leaf node labeled by f ∈ F and a Z-assignment
(cid:2)z, then val(φ) = f(cid:2)z;
• Otherwise φ = ⊗(φ1, . . . , φn), and val(φ) = val(φ1)⊗
. . . ⊗ val(φn).
2A function is said to be polytime (resp.

in linear time) when
there exists a polynomial (resp. linear) time algorithm computing it.

IJCAI-07

361

A VNNF is thus simply the structured representation of a
function (val(φ)) that does not necessarily belong to the set
of primitives F . Importantly if (cid:3)E, X, F(cid:4) is tractable, then
val(φ) is a polytime function.

Obviously, a given function over a valuation structure can
be represented by many distinct but equivalent VNNFs. Since
VNNFs are deﬁned as DAGs, subformulas that would have
several occurrences in tree-like representations do not need to
be duplicated. But they can. It is always possible to simplify
a VNNF by merging identical subgraphs. This reduction does
not change the semantics and can be achieved by an algorithm
similar to the one used for OBDDs. However, it does not
lead to a canonical form in the general case (i.e., we do not
necessarily have val(φ) = val(ψ) only if the reduced form
of φ coincides with the reducd form of ψ).
In classical logic, two
quantiﬁers are used: ∃ and ∀. In the VNNF framework, every
operator of OP can be used as a quantiﬁer:
Deﬁnition 5 (Q-VNNF) A (prenex) quantiﬁed VNNF (Q-
VNNF) is a sentence of the form Φ = ⊗1xi1, . . . ⊗j xij
φ
where φ is a VNNF, each variable xij belongs to X,3 and
each ⊗i belongs to OP (i ∈ 1 . . . j). ⊗1xi1, . . . ⊗j xij is
called the preﬁx of Φ and φ its matrix.
The semantics of Φ, denoted val(Φ) is the function from
scope(val(Φ)) = vars(φ) \ {xi1, . . . , xij} to E recursively
deﬁned as follows:

Let us now ”quantify” VNNFs.

• If the preﬁx of Φ is empty, then val(Φ) = val(φ).
• Otherwise, Φ is of the form ⊗yΨ and

(cid:3)

val(Φ) =

(cid:2)y∈dom(y) val(Ψ)(cid:2)y.

Clearly enough, quantiﬁed VNNFs are convenient for rep-
resenting at the syntactic level projections of functions. When
xi1, . . . , xij are pairwise distinct, Φ is said to be polite. When
vars(φ) ⊆ {xi1, . . . , xij}, the Q-VNNF Φ is said to be
closed. Its semantics is an element of E. Computing it is
what is called the evaluation of a (closed) Q-VNNF.

3 Generality of the VNNF Framework
Let us now show how the VNNF framework encompasses
various representation settings pointed out so far.
Negation Normal Forms (NNFs) The propositional lan-
guage NNF (Negation Normal Form formulas) is a well-
known fragment for representing Boolean functions. For re-
covering it as a VNNF language, it is enough to set E =
{0, 1}, (cid:5) is such that 1 (cid:5) 0, dom(x) = E for each x ∈ X, F
is the set of all Boolean functions of arity at most 1 (such
functions can be represented by literals and Boolean con-
stants), OP = {min, max} (min nodes correspond to con-
junctions of formulas and max nodes to disjunctions). Then
val(φ)((cid:2)x) is simply the truth value taken by the boolean func-
tion which is the semantics of φ when applied to (cid:2)x. Quanti-
ﬁed Boolean formulas in negation normal form are also easily
recovered as Q-VNNFs: min x (resp. max x) stands for the
universal (resp. existential quantiﬁcation) on variable x.

3If Y = {y1, . . . , yk} ⊆ X and ⊗ ∈ OP , then we abbrevi-
ate ⊗y1 . . . ⊗ yk by ⊗Y ; this is harmless since each ⊗ ∈ OP is
associative and commutative.

CSPs Recovering the standard CSP framework is also easy,
considering the same valuation structure as for the NNF
framework. No restriction is put on X (it can be any set of
discrete variables), but for getting a CSP as a VNNF language
we must add some restrictions on VNNF formulas. First of
all, the root node has to be a min node. In general CSPs, each
child of the root is a local function f : scope(f) → {0, 1}.
In table-deﬁned CSPs, each child of the root is a max node,
whose children are themselves min nodes connecting func-
tions of the form x == a, that take value 1 if satisﬁed and
value 0 otherwise. Quantiﬁed CSPs can also be viewed as
speciﬁc Q-VNNFs, where min x (resp. max x) stands for the
universal (resp. existential quantiﬁcation) on variable x.
Semiring CSPs and valuation algebras E is equipped
with two operators: OP = {∨,⊗} and (cid:5) is deﬁned by a (cid:5) b
iff a ∨ b = a. It is moreover assumed that (cid:3)E,(cid:5),∨,⊗(cid:4) is
a commutative semiring and ∨ is idempotent.
In a semir-
ing CSP viewed as a VNNF, the root node of the DAG is a ⊗
node and each of its children is a local function. Interestingly,
the deﬁnition of quantiﬁed semiring CSPs follows from our
framework. In particular, if (cid:5) is complete, then computing
the best value of a semiring CSP φ is equivalent to compute
max Xφ (note that min can also be added to OP and used as
a quantiﬁer). Valuation algebras [Shenoy and Shafer, 1988;
Kohlas and Shenoy, 2000] can be more general than VNNF
since valuations can bear on subsets of assignment, e.g. for
representing commonality functions. When restricted to the
distributional case they can be recovered in way similar to the
one used for semiring CSPs.
Other frameworks for decision making under uncertainty
The VNNF framework subsumes many of the constraint-
based frameworks for decision making under uncertainty,
e.g. mixed CSPs (they can be represented by disjunctions
of a conjunction of constraints Ci, i ∈ 1 . . . n representing
what is satisfying and, with a disjunction of constraints Ki,
i ∈ 1 . . . m representing the knowledge about the state vari-
ables) and possibilistic mixed CSPs (each such CSP can be
represented by a VNNF whose root is labeled by max and has
two children: a min-rooted VNNF and a max-rooted one).
Stochastic or more generally expected utility CSP networks
can be represented as well by products between a VNNF φp
representing the probability density over the state variables
(e.g. a bayesian net) and a semiring CSP φu over E = [0, 1]
synthesizing the utility function. Denoting X the set of deci-
sion variables and Y the set of state variables, maximizing
expected utility amounts to compute max X
Y φp . φu.
In the qualitative cases (mixed and possibilistic) a standard
quantifying sequence is rather max X min Y . PFU generic
networks [Pralet et al., 2006]) are not stricto sensu subsumed
by the VNNF framework, since they may involve a non-
commutative combination of utility degrees and plausibility
degrees. Nevertheless, non-commutativity is not a compul-
sory condition and most of the practical instances of PFU
consider a commutative aggregator. Arithmetic circuits, as
considered in [Darwiche, 2002], for the factored representa-
tion of belief networks can also be recovered as VNNFs.

(cid:2)

Finally, we shall see in Section 5.3 that VNNFs also en-
compass decision diagrams like AADDs (and thus ADDs)

IJCAI-07

362

and SLDDs.

4 Queries and Transformations
The VNNF framework includes a number of algorithms for
answering queries about functions represented as VNNFs,
and related functions which can be characterized via the ap-
plication of transformations on functions represented by VN-
NFs. A fundamental difference between the NNF setting and
the VNNF one is that in the VNNF framework, the under-
lying valuation structure does not necessarily reduce to the
Boolean one. Especially, since E may contain more than two
elements, the equivalences a (cid:22) ⊥ iff a = (cid:6) and a ≺ (cid:6) iff
a = ⊥ do not hold anymore. In the NNF framework, the key
queries include consistency (CO), validity (VA), and model
counting (CT), while the key transformations are condition-
ing (CD), conjunction (∧C), disjunction (∨C) and forgetting
(FO). Let us explain how to state related queries and transfor-
mations in the VNNF framework, and point out some addi-
tional ones which make sense in this more general setting.
Full consistency/validity If we consider (cid:6) as the norm, we
get very strong notions of consistency/validity: φ is fully con-
sistent iff there exists (cid:2)x s.t. val(φ)((cid:2)x) = (cid:6) and φ is fully
valid iff for each (cid:2)x, val(φ)((cid:2)x) = (cid:6).
Partial consistency/validity On the contrary, one may con-
sider every value of E except ⊥ as the norm, and this leads to
the following notions of partial consistency and partial valid-
ity: φ is partially consistent iff there exists (cid:2)x s.t. val(φ)((cid:2)x) (cid:22)
⊥ and φ is partially valid iff for each (cid:2)x, val(φ)((cid:2)x) (cid:22) ⊥.
Optimal satisfaction More interesting in practice is the no-
tion of optimal satisfaction, that looks for best assignments;
this query is typically useful when VNNFs encode prefer-
ences or plausibility degrees and calls for optimization: given
a VNNF φ, ﬁnd (cid:2)x and a ∈ E such that val(φ)((cid:2)x) = a and
such that there is no (cid:2)y such that val(φ)((cid:2)y) (cid:22) a. We thus
search for a non-dominated solution. When (cid:5) is a total order,
this is equivalent to classical maximization. The associated
decision problem (deciding whether a value is optimal) con-
sists in determining whether, given a ∈ E and a VNNF φ, a
is the value taken by φ for some non-dominated solution.
Counting extends easily from NNF to VNNF: Given a ∈ E
and a VNNF φ, how many (cid:2)x are such that val(φ)((cid:2)x) = a?
Evaluation of a quantiﬁed form The extended notion of
quantiﬁcation naturally leads to the problem of evaluating
a (closed and polite) Q-VNNF. As a decision problem, this
can be written as determining whether val(Φ) (cid:5) a. This
query is of great importance in many settings: in the NNF
one, this query generalizes the famous PSPACE-complete
problem called QBF. Quantiﬁcation also makes sense when
E (cid:15)= {0, 1}. When (cid:5) is a total order, evaluating a Q-VNNF
is a way to achieve optimization (ﬁnd the best value of φ
amounts to evaluating max Xφ). The relationship between
optimization and quantiﬁed forms is less obvious when par-
tial orders are considered (the identiﬁcation of an operator en-
coding non-domination is not an easy problem and may have
no solution; for instance, computing a non-dominated value
for a semiring CSP represented by a VNNF φ is not equiva-
lent to evaluate the quantiﬁed one ∨Xφ).

We have obtained the following complexity results for
VNNF assuming that the underlying representation context
is tractable (which is a reasonable assumption that we make
from now on up to the end of the paper):
Proposition 2

• Partial and full consistency are NP-complete.
• Partial and full validity are coNP-complete.
• Optimization is NP-hard
• Optimal value is DP-complete.
• Counting is #P-hard.
• Evaluation of a closed Q-VNNF is PSPACE-complete.
Observe that, though VNNF is a much more general frame-
work than the NNF one, the generalization does not lead to a
complexity shift w.r.t. the basic queries under consideration
in [Darwiche and Marquis, 2002]. Note that we could also de-
ﬁne notions of full entailment and full equivalence and show
the corresponding decision problems coNP-complete.

Let us now focus on transformations. Three transfor-
mations are mainly to be considered; conditioning (com-
pute a VNNF representing val(φ)(cid:2)z), ⊗-combination (com-
pute a VNNF representing val(φ1)⊗val(φ2)) and ⊗-variable
elimination (compute a VNNF representing val(φ)[y,⊗] =
val(⊗yφ), or more generally val(⊗Y φ)).
The case of ⊗-combination is obvious since φ1 ⊗ φ2 is a
VNNF and represents val(φ1) ⊗ val(φ2). If the representa-
tion context is tractable, then each ⊗-combination is in linear
time. If φ is a VNNF, then a VNNF representing val(φ)(cid:2)z can
also be obtained in linear time in the size of φ. It is enough to
revise the assignment associated to φ:
Deﬁnition 6 (conditioning a VNNF) Given a VNNF φ, we
denote φ(cid:2)z the VNNF obtained by replacing in the label of
each leaf, the Y -assignment (cid:2)y by (cid:2)y ◦ (cid:2)z, the Y ∪ Z-assignment
which coincides with (cid:2)y on each variable from Y and with (cid:2)z
on each variable from Z \ Y .

It can be easily checked that φ(cid:2)z represents the restriction
of val(φ) by (cid:2)z, i.e. that val(φ(cid:2)z) = val(φ)(cid:2)z. That is why we
call φ(cid:2)z the conditioning of φ by (cid:2)z.
⊗-variable elimination generalizes the transformation
known as forgetting in the NNF case. In contrast to the pre-
vious transformations, it can be very expensive: at each elim-
ination step, the size of the current VNNF φ may increase
(cid:2)x∈dom(x) φ(cid:2)x can be
in a non-constant way (the size of
|dom(x)| larger than the size of φ). Thus, applying the def-
inition directly would lead to an exponentially larger VNNF,
unless a bounded number of variables has to be eliminated.

(cid:3)

5 Determinism, Decomposability, Decision

and Read-Once

The previous sections have shown the VNNF framework
quite general. However, every query under consideration, if
it is no more difﬁcult than in the Boolean case, is intractable
under the standard assumptions of complexity theory. An im-
portant issue is thus to deﬁne restrictions on the VNNF lan-
guages allowing efﬁcient queries and transformations.

IJCAI-07

363

In the NNF framework, a few properties, namely decom-
posability, determinism, decision and read-once are sufﬁcient
to achieve many of them in polynomial time. We shall see that
a third one is valuable in the VNNF framework, namely dis-
tributivity. The key point is that it enables efﬁcient ⊗-variable
elimination, which is an important transformation for several
issues, including the optimization one.
5.1 Distributivity and decomposability
The space explosion inherent to a direct application of ⊗-
variable elimination in the general case does not necessarily
occur; especially, it can be limited when some of the chil-
dren of φ do not depend on the variable x to be eliminated.
Thus, in the DNNF case, at most one child of each ∧ node
may depend on the variable to be forgotten. Actually, in ad-
dition to independence, a further property is implicitly used
in the NNF framework for ensuring polytime forgetting, and
it has to be made explicit in order to be extended to VNNF:
the distributivity of ∧ over ∨. The impact of distributivity
on variable elimination in valuation algebras is known for a
while (see e.g. [Shenoy and Shafer, 1988]) and requiring it is
not so demanding in many representation contexts.
Deﬁnition 7 (⊗-distributivity) A VNNF φ ensures ⊗-
distributivity iff for any (cid:25) labelling an internal node in φ,
(cid:25) distributes over ⊗: ∀a, b, c ∈ E : a (cid:25) (b ⊗ c) =
(a (cid:25) b) ⊗ (a (cid:25) c).
Proposition 3

• Any VNNF w.r.t. any representation context ensures ⊗-
distributivity for ⊗ = ∨ and for ⊗ = ∧.
• Any VNNF w.r.t. any representation context where (cid:5) is
a total order ensures ⊗-distributivity for ⊗ = max and
for ⊗ = min.
We are now ready to deﬁne the fragment of ⊗-

decomposable VNNFs:
Deﬁnition 8 (⊗-decomposability) Let φ be a VNNF:

• A node N of φ is simply decomposable iff for each
Ni, Nj ∈ Children(N), vars(Ni) ∩ vars(Nj) = ∅
when i (cid:15)= j.
• A node N of φ is ⊗-decomposable iff it is simply decom-
posable and op(N) is distributive over ⊗.
• φ is ⊗-decomposable iff each of its (internal) nodes N
is ⊗-decomposable when op(N) (cid:15)= ⊗. ⊗-DVNNF is the
class of all the ⊗-decomposable VNNFs.
As to ⊗-decomposability, the main result is:

Proposition 4 ⊗-DVNNF is linearly closed for ⊗-variable
elimination, i.e., there exists a linear time algorithm for com-
puting a ⊗-DVNNF equivalent to ⊗Y φ when φ ∈ ⊗-DVNNF
and Y ⊆ X.

This generalizes the result of tractability of DNNF for the
forgetting operation. It moreover implies that the optimiza-
tion of any VNNF the nodes of which are either max nodes
or decomposable nodes is tractable.
Proposition 5 The restrictions of full consistency, partial
consistency and optimisation on max-DVNNF are in P.

5.2 Determinism
A second important property in the NNF framework is de-
terminism. More than a property of logical exclusion, it is
linked to the existence of a neutral element for ⊗:
Deﬁnition 9 (determinism) An internal node N in a VNNF
φ is deterministic iff for each (cid:2)y ∈ dom(vars(N)), there is at
most one M ∈ Children(N) such that val(ψ)((cid:2)y) (cid:15)= eop(N ),
where ψ is the VNNF rooted at M.
Deﬁnition 10 (d-DVNNF) d-DVNNF is the class of all VN-
NFs in which each internal node is either simply decompos-
able or deterministic.

As to d-DVNNF, the main result is:

Proposition 6 The restrictions of full validity and partial
validity on d-DVNNF are in P. If φ is a d-DVNNF, then
counting can be achieved in time O(|E| + |φ|).
5.3 Decision diagrams
Let us now focus on other properties that prove useful for
deﬁning another interesting fragment of VNNF: the set of all
decision diagrams. We ﬁrst need a number of deﬁnitions:
Deﬁnition 11 (literals) A literal on x ∈ X is a function f
whose scope is {x}. LX is the set of all the literals that can
be built on variables from X.

By extension, we shall also call literals the leaves labeled

by literals.
Deﬁnition 12 (assignment nodes) An assignment node N
on x ∈ X in a VNNF φ is a node of the form l ⊗ α, where l is
a literal on x and ⊗ is a t-norm on E.
Two assignment nodes N1 and N2 on x ∈ X are exclusive
iff their respective literals f1 and f2 are exclusive, i.e., ∀(cid:2)x ∈
dom(x), either f1((cid:2)x) = ⊥ or f2((cid:2)x) = ⊥.
In any assignment node N of the form l ⊗ α where l is a
literal on x one may assume without loss of generality that α
is not a literal (a literal f can always be replaced by the as-
signment node f ∧(cid:6)). Then dvar(N) can denote the variable
x and tail(N) the formula α in a non-ambiguous way.
Deﬁnition 13 (decision nodes) A decision node N on x in a
VNNF φ is a node of the form N1 (cid:25) . . . (cid:25) Nm where all the
Ni are assignment nodes on the same variable x and (cid:25) is a
t-conorm on E. N is exclusive iff its assignment nodes are
pairwise exclusive.
Deﬁnition 14 (linear node) A node N is linear iff at most
one of its children is not grounded.

Note that leaves are linear nodes. We are now ready to

deﬁne the language of decision diagrams:
Deﬁnition 15 (decision diagrams) A decision diagram is a
VNNF in which each internal node is either an exclusive de-
cision node or a linear node.

Two particular subclasses of decision diagrams are worth-

while noticing, the read-once ones and the ordered ones:
Deﬁnition 16 (read-once and ordered decision diagrams)
• A decision diagram φ is read-once iff for any assignment

node N in φ, dvar(N) does not occur in tail(N).

IJCAI-07

364

• A decision diagram φ is ordered w.r.t. a strict order < on
X iff for every pair of decision nodes M and N in φ, if
M is an ancestor of N in φ, then dvar(M) < dvar(N).
The second property obviously implies the ﬁrst one. Inter-
estingly, AADDs and SLDDs are speciﬁc decision diagrams:
AADD For recovering algebraic decision diagrams, let us
set E = R ∪ {−∞,−∞}, (cid:5)=≥, OP = {min, max, +, .},
∀x ∈ X, dom(x) = {0, 1}, F = LX. The decision
nodes of such decision diagrams are of the form Nx =
max(min(fh, ch + bh.Nh), min(fl, cl + bl.Nl)), where:
• fh (resp. fl) is the literal on x that valuates to −∞ for
x = 0 (resp. x = 1) and to +∞ for x = 1 (resp. x = 0);
• ch, bh, cl, bl are constants of E;
• Nh and Nl are either decision nodes or constant nodes.
The root of an AADD is a linear formula c+b.Nk. The reader
can check that min(fh, ch + bh.Nh) and min(fl, cl + bl.Nl)
are exclusive assignment nodes whose tails are linear ones.
SLDD A SLDD is an ordered decision diagram built on
some set E ordered by some (cid:5) and equipped with two oper-
ators ⊕ and ⊗, where ⊗ is a t-norm and ⊕ is a t-conorm. It is
moreover required that ⊗ distributes over ⊕: (cid:3)E,⊥,(cid:6),⊕,⊗(cid:4)
is a commutative semiring. For recovering SLDD, it is suf-
ﬁcient to set F to the subset of literals of LX ranging over
{⊥,(cid:6)}.
and to consider ordered decision diagrams whose decision
nodes are of the form N = ∨(∧(l1, c1 ⊗ N1), . . . ,∧(lk, ck ⊗
Nk)), where the ci are constants of E.

SLDDs and AADDs are obviously read-once. This is im-
portant enough, since one can prove that the read-once prop-
erty on decision diagrams ensure that they are not only de-
composable but also deterministic:
Proposition 7 Read-once decision diagrams are d-DVNNFs.

As a consequence of Propositions 5, 6 and 7, we get:

Proposition 8 The restrictions of full and partial consis-
tency, optimization, full and partial validity on read-once
(and thus on ordered) decision diagrams are in P. Counting
can be achieved in time O(|E| + |φ|).
Now, it can be shown that the ⊗-elimination of a variable x
can be performed in an efﬁcient way on a decision diagram φ
for which distributivity w.r.t. ⊗ is ensured, provided that x is
ﬁnal in φ (i.e., for any assignment node N on x in φ, tail(N)
is grounded).
Deﬁnition 17 (distributive Q-VNNF) A Q-VNNF is said to
be distributive iff each operator of its matrix distributes over
each operator of its preﬁx.

For instance, when E is totally ordered, any quantiﬁed de-
cision diagram (e.g. a quantiﬁed AADD or a quantiﬁed ADD)
is distributive for a preﬁx composed of existential (max) and
universal (min) quantiﬁers.
Proposition 9 Let < be the total ordering on X deﬁned by
the preﬁx of a (closed and polite) Q-VNNF Φ, i.e. xi1 <
. . . < xij iff Φ = ⊗1xi1, . . . ,⊗jxij φ. The evaluation prob-
lem for a distributive, closed and polite Q-VNNF the matrix
of which is a decision diagram ordered by < is in P.

6 Conclusion
In this paper, we have presented a new framework, VNNF,
which encompasses many representation settings pointed out
so far. We have shown how some properties imposed on
NNFs to deﬁne more “tractable” fragments (namely, decom-
posability, determinism, decision, read-once) can be extended
to VNNFs.

This work calls for a number of perspectives. The more im-
mediate ones are of algorithmic nature: we need algorithms
for compiling VNNFs into ⊗-DVNNFs, d-DVNNFs, or (or-
dered) decision diagrams. From a more theoretical (but not
less important) point of view, a number of issues need to be
addressed as well, including the succinctness one (how do the
VNNF fragments w.r.t. a given representation context relate
w.r.t. spatial efﬁciency?) and the canonicity one (under which
requirements can we guarantee that two VNNFs represent the
same function iff they are identical?).
References
[Bahar et al., 1993] R.I. Bahar, E.A. Frohm, C.M. Gaona,
G.D. Hachtel, E. Macii, A. Pardo, and F. Somenzi. Alge-
braic Decision Diagrams and Their Applications. In Proc.
ICAD’93, pages 188–191, 1993.

[Bistarelli et al., 1995] S. Bistarelli, U. Montanari, and
F. Rossi. Constraint solving over semirings. In Proc. IJ-
CAI’95, pages 624–630, 1995.

[Darwiche and Marquis, 2002] A. Darwiche and P. Marquis.
A knowledge compilation map. Journal of Artiﬁcial Intel-
ligence Research, 17:229–264, 2002.

[Darwiche, 2001] A. Darwiche. Decomposable negation

normal form. JACM, 48(4):608–647, 2001.

[Darwiche, 2002] A. Darwiche. A logical approach to fac-
In Proc. KR’02, pages 409–420,

toring belief networks.
2002.

[Kohlas and Shenoy, 2000] J. Kohlas and P.P. Shenoy. Com-
putation in valuation algebras. In J. Kohlas and S. Moral,
editors, Handbook of DRUMS, Volume 5, pages 5–39.
Kluwer, Dordrecht, 2000.

[Pralet et al., 2006] C. Pralet, G. Verfaillie, and T. Schiex.
Decision with uncertainties, feasibilities, and utilities: to-
wards a uniﬁed algebraic framework. In Proc. ECAI’06,
2006.

[Sanner and McAllester, 2005] S.

and D. A.
McAllester. Afﬁne algebraic decision diagrams (AADDs)
and their application to structured probabilistic inference.
In Proc. IJCAI’05, pages 1384–1390, 2005.

Sanner

[Schiex et al., 1995] T. Schiex, H. Fargier, and G. Verfaillie.
Valued constraint satisfaction problems: Hard and easy
problems. In Proc. IJCAI’05, pages 631–639, 1995.

[Shenoy and Shafer, 1988] P. Shenoy and G. Shafer. Axioms
for probability and belief-function propagation. In Proc.
UAI’88, pages 169–198, 1988.

[Wilson, 2005] N. Wilson. Decision diagrams for the com-
putation of semiring valuations. In Proc. IJCAI’05, pages
331– 336, 2005.

IJCAI-07

365

