A Tractability Result for Reasoning with Incomplete First-Order Knowledge Bases 

Yongmei Liu and Hector J. Levesque 

Department of Computer Science 

University of Toronto 

Toronto, ON, Canada M5S 3G4 
{yliu, hector} @cs.toronto.edu 

Abstract 

In previous work, Levesque proposed an extension 
to classical databases that would allow for a certain 
form  of  incomplete  first-order  knowledge.  Since 
this extension was sufficient to make full logical de­
duction undecidable, he also proposed an  alterna­
tive reasoning scheme with desirable logical prop­
erties.  He  also  claimed  (without  proof)  that  this 
reasoning  could  be  implemented  efficiently  using 
database techniques such as projections and joins. 
In  this  paper,  we  substantiate  this  claim and  show 
how  to  adapt  a  bottom-up  database  query  evalu­
ation  algorithm  for  this  purpose,  thus  obtaining  a 
tractability result comparable to those that exist for 
databases. 

Introduction 

1 
As  argued  in  [Levesque,  1998],  there  is  only  one  deductive 
technique efficient enough to be feasible on knowledge bases 
(KBs) of the size  seemingly  required for common-sense rea­
soning:  the  deduction  underlying  classical  database  query 
evaluation.  And  yet,  databases  by  themselves  are  too  re­
stricted to serve as the representational scheme for common-
sense reasoning, since they require, among other things, com­
plete knowledge of the domain.  Levesque proposed a gener­
alization of databases called proper knowledge bases,  which 
allow  for a  limited  form  of incomplete  knowledge.  Despite 
the  limitations,  however,  the  deduction  problem  for  proper 
KBs  is no longer even decidablc.  Levesque proposed an al­
ternative reasoning procedure V for proper KBs that was logi­
cally sound and, when the query was in a certain normal form, 
logically  complete.  Moreover,  he  argued  that  it  should  be 
possible  to  implement  V  for  very  large  KBs  using  database 
techniques.  However, no proof was given. 

In this paper, we examine proper KBs and the V procedure 
more closely,  and  we prove a tractability result  for this type 
of logical reasoning that are comparable to those that exist for 
classical database query evaluation.  In particular, we adapt a 
bottom-up database retrieval algorithm to the case of proper 
KBs.  Thus,  what  we  show  here  is  that  in  some  cases  it  is 
indeed possible to reason efficiently with  incomplete knowl­
edge  in  a  logically  sound  and  complete  way,  or at  least  as 
efficiently as we can with a database. 

The  rest of the paper is organized as  follows.  In the next 
section, we review proper KBs  and V,  prove a new property 
of  V,  i.e. 
locality,  and  define  answers  to  open  queries.  In 
Section 3, we review the complexity of database query evalu­
ation, and present a polynomial time algorithm for evaluating 
K-guarded formulas. In Section 4, we show how to use this al­
gorithm to evaluate queries wrt proper KBs and hence obtain 
a tractability result.  In Section 5, we illustrate this query eval­
uation  method  for  proper  KBs  with  some  example  queries. 
Finally in Section 6, we describe some future work. 

To illustrate the idea of a proper KB, imagine a scenario in­
volving a robot security guard keeping track of the occupants 
of the rooms of a building.  The robot can find out that some­
one has entered or left a room, and by going into a room, find 
out  who the occupants are.  We  can  express  what the robot 
might know using a proper KB:1 

1We think of these as beliefs about some initial state of the world. 
It should be possible to generalize the notion of proper KB to deal 
with state change. See Section 6 for discussion. 

AUTOMATED  REASONING 

83 

Note that this information cannot be expressed in a traditional 
database where, e.g.  we cannot leave open the occupants of 
Room 2. On the other hand, facts requiring disjunction or ex­
istential quantification cannot be expressed as part of a proper 
KB, e.g. every room having at most three occupants. 

It  is  not  hard  to  see  that  the  problem  of  determining 
whether  a  sentence  is  logically  entailed  by  a  proper  KB  is 
undecidable,  since  when  the  KB  is  empty,  this  reduces  to 
classical  validity.2  Levesque  [1998]  proposed the reasoning 
procedure V  instead.  Given a proper KB and a query,  V re­
turns one of three values 0 (known false),  1  (known true), or 
1/2 (unknown) as follows: 

Proof: Follows from the theorem by taking * as the bijection 
that swaps c and d and leaves the rest constants unchanged. ■ 

2.3  Locality 

Invariance  under renaming 

2.2 
The first difficulty that arises when attempting to reason with 
proper KBs is the fact that unlike with databases, we cannot 
fix the domain in advance, or even put an upper bound on its 

other than  a  behave the  same.  This  will  allow  us  to define 
finite versions of answers to open queries, as shown below. 
Notation Let a be a formula and S a set of formulas.  Let * 
be a bijection from C to C.  We use a* to denote a with each 

2The classical validity problem is undecidable even when there 

are no function symbols. 

2.4  Answers to open  queries 

84 

AUTOMATED  REASONING 

Naturally,  many  research  efforts  have  gone  into  finding 
classes  of queries  that  can  be  proven  tractable,  even  in  the 
worst  cases.  The  earliest  result  of this  form,  due  to  Yan­
nakakis  [1981],  showed that acyclic conjunctive queries can 
be  evaluated  in  polynomial  time.  This  result  has  been  ex­
tended in  several  ways.  The  first  extension, due to Chekuri 
and  Rajaraman  [1997],  showed  that  conjunctive  queries 
with  bounded  tree  width  are  tractable.  Later,  Gottlob  et  al. 
[1999]  introduced the notion of hypertree width and showed 
that  conjunctive  queries  with  bounded  hypertree  width  are 
tractable;  bounded  hypertree  width  generalizes  the  notions 
of acyclicity  and  bounded  treewidth.  Recently,  Flum  et  al 
[2001]  generalized  the  notions  of  acyclicity  and  bounded 
treewidth from conjunctive queries to nonrecursive stratified 
Datalog  (NRSD),  which is  known  to have the  same expres­
sive power as all of first-order logic, and showed that acyclic 
and bounded treewidth NRSD are tractable. Inspired by their 
work, Gottlob et al  [2001] extended the notion of hypertree 
width to NRSD, and obtained a nice logical characterization 
of hypertree width:  they showed that the K-guarded fragment 
of  first-order  logic  has  the same expressive power as NRSD 
of hypertree width at most k.  Thus K-guardcd first-order logic 
turns out to be the largest tractable class of queries so far. 

3.2  An evaluation  algorithm 

In this section, we introduce the K-guarded fragment of £, 
and explicitly  present a polynomial algorithm for evaluating 
K-guarded formulas  against  databases  and  analyze  its  com­
plexity. We will use this algorithm to evaluate K-guarded for­
mulas with respect to proper KBs. 

Note that any /c-guarded sentence is strictly K-guarded. 

The  evaluation  algorithm  below  will  take  a  strictly  K-
guarded formula as  the query.  It  turns out that any  formula 

The  complexity  of database  queries 

3 
3.1  An overview 
The complexity of query evaluation has been one of the main 
pursuits of database theory. Traditionally, there are two com­
plexity measures:  combined complexity and data complexity 
[Vardi,  1982].  Combined  complexity  is  measured  in  terms 
of the  combined size  of the database  and  the  query.  Chan­
dra and Merlin  [1977]  proved that the combined complexity 
of conjunctive queries  (queries  expressed  by  first-order  for­
mulas  that  are  of the  form 
where a,  are 
atoms)  is  NP-complete;  Vardi  L1982]  proved  that  the  com­
bined complexity of first-order queries is PSPACE-complete. 
However, the main factor responsible for this high complexity 
is the size of the query and not the size of the database. This is 
contrary to the situation in practice where we normally eval­
uate small queries against large databases.  Data complexity 
measures the complexity of query evaluation solely  in  terms 
of the size of the database and treats the size of the query as a 
constant. A folk result is that first-order queries can be evalu­
ated in time  no(1)  where n is the size of the database and / is 
the size of the query.  Thus the data complexity of first-order 
queries is in PT1ME. However, such a complexity can hardly 
qualify as tractable even if the exponent is small, say 5. 

Yannakakis [19951 was the  first  to suggest that parameter­
ized  complexity  [Downey  and  Fellows,  1995]  might  be  an 
appropriate  complexity  measure  for  database  query  evalua­
tion.  Query evaluation is fixed-parameter tractable if there is 
a computable function / : N —► N and a constant c such that 
the problem can be solved in time / ( /) • nc, where / and n are 
the size of the query and the database, respectively. However, 
Papadimitriou and Yannakakis [1999] proved that the param­
eterized complexity of conjunctive queries is W[l]-complete 
and  thus  most  likely  not  fixed-parameter  tractable.  We  re­
fer the reader to [Grohe, 2002] for a survey on parameterized 
complexity in database theory. 

Therefore database query evaluation in general is hard with 
respect to both combined and parameterized complexity. And 
yet,  database  queries  do  work  quite  well  in  practice,  even 
for very large databases.  A careful examination of the hard­
ness results show that they often depend on queries that are 
somewhat atypical in applications, e.g.  databases represent­
ing graphs and queries asking for the existence of cliques. 

AUTOMATED  REASONING 

85 

The evaluation algorithm  will  have  worst-case  time  com­
plexity that is exponential only in the k.  For fixed k, the algo­
rithm is polynomial, but perhaps impractical when k is large. 

Before presenting the evaluation algorithm, we first recall 
some basic notions of relational database theory.  A database 
instance  is simply  a logical  structure (or interpretation) with 
a  finite  domain.  Let  A  be  such  a  structure  with  domain  A. 
Let X  and Y be sets of variables.  An X-relation R over A, is 

4  The complexity of V 
In this section, we consider how hard it is to compute V.  Not 
surprisingly,  V  is  no  easier  than  database  query  evaluation. 
What  is  more  significant  is  that  under  reasonable  assump­
tions, it is not much harder either. 

Intractability  results 

4.1 
Theorem 4.1  The  combined  complexity  of  V  is  NP-hard 
for  conjunctive  queries,  and  PS  PACE-hard  for  first-order 
queries. The parameterized complexity of V is W [1]-hard for 
conjunctive  queries. 
Proof:  The proof is essentially the same as that for database 
query  evaluation.  For  conjunctive  queries,  the  reduction  is 
from the clique problem. For first-order queries, the reduction 
is from QBF (Quantified Boolean Formula). 
■ 

4.2  A  tractability  result 

Here is the algorithm for computing answers: 

relation  that  is  a  subset  of R.  Moreover,  the  R  is  obtained 
from joins of at most A:  guards,  and so  has  size  at most nk. 
Assuming all  relations start in sorted form, the results of all 
operations can be kept in sorted form, and computed in time 
■ 
0(nk).  Thus,  the time overall is  0(lnk). 

We present examples of this transformation in the next sec­

tion. Here we note the following correctness result: 

3 A positive (resp. negative) occurrence of P in a is one within 

the scope of an even (resp. odd) number of negations. 

86 

AUTOMATED  REASONING 

This  theorem  says  that  the  (finite  version  of)  answers  to 
open queries in  C correspond exactly to the answers we get 
for the database constructed as above. This is a consequence 
of locality and the following lemma: 

To obtain a tractability result for open queries over proper 
KBs, we need only ensure that the database queries we con­
struct are k-guarded then use the Eval procedure. 

Now we get our main complexity result: 

Proof: Follows from previous corollary and the fact that V is 
logically sound and complete for queries in 
■ 
Note that these bounds are identical to their database coun­
terparts  modulo the  w  factor.  In  most  cases  of interest,  the 
w will be small  since even in a large KB, we only expect to 
see a large  ep  or e- p  in database-like cases,  where the e is 
relational or co-relational. In the case where none of the e are 
relational or co-relational, we get the following: 

NF. 

5  An example 
To  illustrate  how  query  evaluation  would  work  with  proper 
KBs,  we  return  to  the  example  robotic  scenario  mentioned 
in the first section, involving the predicate ln (person, room). 
We  can  see  from the  example that e/n is  given  in  relational 
form,  while  e-,In,  is  given  in  unrestricted  form.  To  make 
things  interesting,  we  assume  two  more  predicates:  One  is 
Mgr  (person1,person2)  saying that the  first  person  is a man­
ager and that the  second  is  one of his or her employees;  we 
assume that Mgr is given as a closed database predicate. The 
other is  Cmp(person1,person2)  saying  that  the  two persons 
are compatible. We assume that the robot knows that any two 
people are compatible except 77/(>  2) pairs; among these m 
pairs, the robot only knows that two pairs are not compatible. 

Here are some example queries,with the guards underlined. 

AUTOMATED  REASONING 

87 

Observe  that  in  all  cases,  the  queries  are  strictly  2-guarded 
wrt  the  proper  KB.  Also,  because  no  query  contains  a  lit­
eral  and a  unifiable  literal  of opposite polarity,  from  results 
in  [Levesque,  1998],  all  the queries are in NF. 

The corresponding database queries are as follows: 

6  Conclusions 
In this paper, we have shown how a bottom-up query evalua­
tion procedure for databases can be used to answer queries for 
KBs with a certain form of incomplete knowledge.  Although 
this  procedure  can  be  impractical  for  k-guarded  queries 
where A: is large, they would be impractical for databases too. 
A number of questions remain to be addressed.  First of all, 
Lakemeyer and Levesque [2002] have proposed an extension 
to proper KBs that allow disjunctions in the KB.  It would be 
interesting to  see  how  much of the database  retrieval  mech­
anism could be preserved in this case.  We can also imagine 
other extensions to proper KBs,  such as relaxing the unique 
name  assumption  over constants,  or  allowing  a  limited  use 
of function symbols.  Also,  as suggested in the first section, 
we can imagine a dynamic scenario where at any given point 
what a robot or agent knows about the current situation is ex­
pressible as a proper KB. It would then be useful to amalga­
mate regression-based techniques for reasoning about change 
from  [Reiter, 2001] with  the database techniques considered 
here.  Among  other  things,  this  would  require  determining 
those cases  where the successor state  axioms guarantee that 
a  proper  KB  remains  proper  after  an  action  has  been  per­
formed,  perhaps  along  the  lines  of  [Petrick  and  Levesque, 
2002]. It would also be interesting to investigate the relation­
ship between proper KBs and other subsets of logic  to see if 
the  complexity  results  presented  here  can  be  further gener­
alized.  Two immediate candidates are datalog programs and 
stratified  logic  programs that  include  some form of classical 
negation.  Finally,  we note that additional  optimizations can 
be made to our query evaluation procedure that do not change 
the worst-case performance, but would improve its behaviour 
in practice. 

Acknowledgments 
We would like to thank Leonid Libkin for pointing us to the 
relevant database literature.  Financial support was gratefully 
received from the Natural Sciences and Engineering Research 
Council  of Canada. 

References 
[Andreka et a/.,  1996]  H.  Andreka,  I.  Hodkinson,  and  1. 
Nemeti. Modal languages and bounded fragments of pred­
icate  logic.  ILLC Research Report ML-96-03,  University 
of Amsterdam,  1996. 

[Chandra and Merlin,  1977]  A.K. Chandra and P.M. Merlin. 
Optimal  implementation  of  conjunctive  queries  in  rela­
tional  data bases.  In  Conference record of the 9th annual 
ACM Symp.  on Theory of Computing, pages 77-90,  1977. 
[Chekuri and Rajaraman,  1997]  C.  Chekuri  and  A.  Rajara-
man.  Conjunctive query containment revisited.  In  Proc. 
6th Int. Conf. on Database Theory, pages 56-70, 1997. 

[Downey and Fellows,  1995]  R.G.  Downey  and  M.R.  Fel­
lows. Fixed-parameter tractability and completeness 1: Ba­
sic  results.  SIAM Journal on  Computing,  24(4):873-921, 
1995. 

[Flum et al, 2001]  J.  Flum, M. Frick, and M.  Grohe.  Query 
evaluation via tree-decompositions. In Proc. of the 8th Int. 
Conf on Database Theory , pages 22-38, 2001. 

[Gottlob et ai,  1999]  G. Gottlob, N. Leone, and F. Scarcello. 
Hypertree decompositions and tractable queries.  In Proc. 
/8th ACM Symp. on Principles of Database Systems, 1999. 
[Gottlob et ai, 2001]  G. Gottlob, N. Leone, and F. Scarcello. 
Robbers, marshals, and guards:  Game theoretic and logi­
cal  characterizations  of hypertree  width. 
In  Proc.  of the 
20th ACM Symp. on Principles of Database Systems, 2001. 
[Grohe, 2002]  M.  Grohe.  Parameterized complexity for the 

database theorist.  SIGMOD Record 31 (4), 2002. 

[Lakemeyer and Levesque, 2002]  G.  Lakemeyer  and  H.J. 
Levesque. Evaluation-based reasoning with disjunctive in­
formation in  first-order knowledge bases.  In Proc.  of KR-
02, pages 73-81, 2002. 

[Levesque,  1998]  H.J.  Levesque.  A completeness result for 
reasoning with incomplete first-order knowledge bases.  In 
Proc.  ofKR-98, pages  14-23,  1998. 

[Papadimitriou and Yannakakis,  1999]  C.H.  Papadimitriou 
and  M.  Yannakakis.  On  the  complexity  of  database 
queries. 
Journal  of  Computer  and  System  Sciences, 
58(3):407-427,1999. 

IPetrick and Levesque, 2002]  R.  Petrick and  H.J.  Levesque. 
In 

Knowledge equivalence  in  combined  action  theories. 
Proc.  ofKR-02,  pages  303-314,2002. 

[Reiter, 2001]  R.  Reiter.  Knowledge  in  Action:  Logical 
Foundations for  Specifying  and  Implementing  Dynamical 
Systems. MIT Press, 2001'. 

[Vardi,  1982]  M.Y. Vardi. The complexity of relational query 
In  Proc.  of the  14th  Annual ACM  Symp.  on 

languages. 
Theory of Computing, pages  137-146,  1982. 

[Yannakakis,  1981]  M.  Yannakakis.  Algorithms for acyclic 
database schemes.  In Proc.  of the  7th Int.  Conf.  on  Very 
Large Data Bases, pages 82-94, 1981. 

[Yannakakis,  1995]  M.  Yannakakis. 

Perspectives  on 
database  theory. 
In  Proc.  of the  36th  Annual  Symp.  on 
Foundations of Computer Science, pages 224-246,1995. 

88 

AUTOMATED  REASONING 

