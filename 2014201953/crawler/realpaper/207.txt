Representing Flexible Temporal Behaviors in the Situation Calculus

Alberto Finzi and Fiora Pirri

DIS- Universit`a di Roma “La Sapienza”

Via Salaria 113, I-00198 Rome, Italy

{ﬁnzi,pirri}@dis.uniroma1.it

Abstract

In this paper we present an approach to represent-
ing and managing temporally-ﬂexible behaviors in
the Situation Calculus based on a model of time
and concurrent situations. We deﬁne a new hybrid
framework combining temporal constraint reason-
ing and reasoning about actions. We show that the
Constraint Based Interval Planning approach can
be imported into the Situation Calculus by deﬁn-
ing a temporal and concurrent extension of the ba-
sic action theory. Finally, we provide a version of
the Golog interpreter suitable for managing ﬂexible
plans on multiple timelines.

Introduction

1
In real-world domains robots have to perform multiple tasks
either simultaneously or in rapid alternation, employing di-
verse sensing and actuating tools, like motion, navigation,
visual exploration, mapping, and several modes of percep-
tion. To ensure a suitable multiple-task performance, some
approaches (e.g. [14; 23]) have recommended that executive
control processes supervise the selection, initiation, execu-
tion, and termination of actions. From these ideas, a new
paradigm has been proposed, called the Constraint Based In-
terval Planning (CBI), which essentially amalgamates plan-
ning, scheduling and resources optimization for reasoning
about all the competing activities involved in a ﬂexible con-
current plan (see [10; 4; 7]). The CBI approach, and simi-
lar approaches emerged from the planning community, have
shown a strong practical impact when it comes to real world
applications (see e.g. RAX [10], IxTeT [7], INOVA [21],
and RMPL [23]). However, from the standpoint of cognitive
robotics it is important to ensure both optimal performance,
in practical applications, and to provide a logical framework
for ensuring coherence of actions preconditions and effects.
The system coherence emerges as a core issue also when con-
trol processes negotiate resources allocation with individual
perceptual-motor and cognitive processes; indeed, the exec-
utive has to establish priorities among individual processes
to allot resources for multiple-task performance (see the dis-
cussion in [8; 11; 3]). Therefore, different, concurrent, and
interleaving behaviors, subject to switching-time criteria and
current situation needs, lead to a new integration paradigm.
In this paper we suggest that the reactive aspects that have

to cope with ﬂexible behaviors and the cognitive capabilities
enabling reasoning about these processes, can be combined
in the Temporal Flexible Situation Calculus. We present a
new approach to ﬂexible behaviors, that exploits the full ex-
pressiveness of the Situation Calculus (SC) [19; 12], where
computational concerns related to time can be monitored by
a temporal network, obtained via a transformation of added
constraints. To embed many concepts elaborated in the CBI
framework we extend the SC with concurrency and time (ex-
tensions of SC with time was already explored in [15; 17;
16]), deploying Allen’s interval relations [1], and further con-
straining the language to represent concurrent timelines.
In
this framework we can conjugate the advantages of the SC
with the expressive power of the CBI paradigm. Our aim
here is twofold: on the one hand, it is made possible to intro-
duce a separated timeline for each component of the dynamic
system (i.e. each entity, which is part of an autonomous
system, such as a robot), so that concurrency and ﬂexibility
can be clearly addressed; on the other hand the causal rela-
tionships among processes can be dealt with in the SC lan-
guage, which provides a clear framework for preconditions
and postconditions of actions and a simple solution to the
frame problem. We show that the CBI perspective, with
all its arsenal of speciﬁcations in terms of ﬂexible time, al-
ternation constraints, resources optimization, failure recover-
ing, and tasks scheduling, can be imported into the SC ([19;
12]), deﬁning a temporal and concurrent extension of the ba-
sic action theory (related approaches are [15; 17; 16; 8; 20;
6]). Finally, we provide a version of the Golog language and
interpreter for manipulating ﬂexible plans on multiple time-
lines.

2 Preliminaries
2.1 Situation Calculus and Golog
The Situation Calculus [12; 19] is a sorted ﬁrst order lan-
guage for representing dynamic domains by means of ac-
tions, situations, and ﬂuents. Actions and situations are ﬁrst
order terms, and situation-terms stand for history of actions,
compound with the binary symbol do: do(a, s) is the situation
obtained by executing the action a after the sequence s. The
dynamic domain is described by a Basic Action Theory BAT
= (Σ, DS0, Dssa, Duna, Dap). We refer the reader to [19] for
a complete introduction to the SC. Temporal Concurrent Sit-
uation Calculus (T CSC) has been earlier introduced in [15;
18; 17]; actions are instantaneous, and their time is selected

by the function time(.). Durative actions are considered as
processes [15; 19], represented by ﬂuents, and durationless
actions are to start and terminate these processes. For exam-
ple, going(hill, s) is started by the action startGo(hill, t)
and it is ended by endGo(hill, t0).

i.

Golog. Golog is a situation calculus-based programming
language for denoting complex actions composed of the prim-
itive (simple or concurrent) actions deﬁned in the BAT .
Golog programs are deﬁned by means of standard (and not
so-standard) Algol-like control constructs:
action se-
quence: p1; p2, ii. test: φ?, iii. nondeterministic action choice
p1|p2, iv. conditionals, while loops, and procedure calls. An
example of a Golog program is:
while ¬at(hill, 3) do

if ¬(∃x)going(x) do π(t, (t < 3)?; startGo(hill, t))
The semantics of a Golog program δ is a SC formula
Do(δ, s, s0) meaning that s0 is a possible situation reached
by δ once executed from s. For example, Do(a;p, s, s0) .=
Do(p, do(a, s), s0) ∧ P oss(a, s) deﬁnes the execution of an
action a followed by the program p. For more details on the
SC and Golog we refer the reader to [19].
2.2 Constraint Based Interval Paradigm
The constraint based interval framework (CBI) [10; 4], is a
well known framework for temporal planning systems com-
bining temporal reasoning and scheduling, including, e.g.,
RAX [10], IxTeT [7], and INOVA[21]. The CBI paradigm
accounts for concurrency and time, and action instances and
states are described in terms of temporal intervals linked by
constraints. We refer to the timeline-based version of the CBI
[10] where a domain behavior is seen as the continuous inter-
action of different components, and each component is repre-
sented by state variables; a single state variable is a relevant
feature of the components and represents a concurrent thread.
Both states and activities are uniformly treated as temporal
intervals. The history of states for a state variable over a
period of time is called a timeline. Figure 1 illustrates two
timelines (state variables) repr.
the engine and the naviga-
tion processes of a mobile robot: initially, the robot is at(p1)
and stop; when it starts go(p1, p2) the engine is running; the
engine is stop again once the rover arrives at(p2). Some tem-
poral constraints among the activities are: at(x) holds only if
stop holds, go(x, y) is followed by at(y).
Domain Constraints. A CBI model [10] Mcbi=(X, J,R)
i. a set X={x1, . . . , xn} of state variables,
is deﬁned by:
one for each component (e.g. xloc and xeng in Fig. 1); ii. a
set J = {J1, . . . , Jn} s.t. for each xi the set Ji collects the
associated temporal ﬂuents pi,j(~y), e.g. at(x) and go(x, y)
for location state variable in Fig. 1; iii. a set of temporal
constraints R={ri,j}, usually called compatibilities: for each
temporal ﬂuent property pi,j there is a compatibility relation
ri,j representing all its possible legal relations with the other
temporal ﬂuents, i.e. which temporal property must proceed,
follow, be co-temporal, etc. to pi,j in a legal plan. The latter
are speciﬁed in terms of metric version of temporal relations
a la Allen [1]. E.g. the arrows in Fig. 1 illustrate the compat-
ibility associated to the ﬂuent at: at(x) meets go(x, y), and
at(x) during stop.

Figure 1: Timelines and constraints

Planning Problem in CBI. Given the CBI model Mcbi, a
planning problem is deﬁned by Pcbi = (Mcbi, Pc), where Pc
is a candidate plan, representing an incomplete instance of a
plan. The candidate plan deﬁnes both the initial situation and
the goals. In particular, Pc consists of : i. a planning horizon
h; ii. a set of temporal properties to be satisﬁed for each state
variable xi ∈ X (e.g. at(p1) ends before 10 and after 20 in
the timeline of Figure 1); iii. the set of precedence constraints
among ﬂuents pk,1 ≺ pk,2, which are to hold on a timeline,
e.g. at(p1) ≺ at(p2); iv.
the set of constraints R={ri,j}
associated with the temporal properties pi,j mentioned in the
timelines. A ﬂuent pi,j(~x) mentioned in a candidate plan is
fully supported [10] if all its associated constraints ri,j are
in Figure 1 at(p1) and at(p2) are fully sup-
satisﬁed. E.g.
ported. A candidate plan is said to be a complete plan if: i.
each temporal property on each timeline is fully supported;
ii. all timelines fully cover the planning horizon. Given the
planning problem (Mcbi, Pc), the planning task is to provide
a sufﬁcient plan [10], i.e. a complete plan with the maximum
ﬂexibility: the planner is to minimally ground the (temporal)
variables to allow for on-line binding of the values.

3 Temporal Flexible Situation Calculus
In this section we present
the Temporal Flexible Situa-
tion Calculus framework (TFSC), which integrates the CBI
paradigm, introduced above, into the language of SC.
Actions. We deﬁne a partition {αv; v ∈ C} of the set of
actions according to the different components C the system
has to care of. For example, the component Pan-Tilt-Unit
manages actions like start-scan spts(.), or end-scan epts(.).
To induce the partition we introduce a type operator ν, and
extend the SC foundational axioms with the following deﬁ-
i=1 Hi be a set specifying the types of
actions, we assume this set ﬁnite. For each name of action
the following holds:
Hi(a)∧Hj(a0)→¬(a = a0) for i6=j, and ν(A(~x))=ν(A0(~y))
i=1 Hi(A(~x)) ∧ Hi(A0(~y)), together with the unique
name for actions, here the indices stay only for different com-
ponents names, a denotes an action variable, while A denotes
the name of an action function.
Situations.
Typization of actions induces also a partition
on the set of situations whence on the set of histories. Histo-
ries become streams of situations over timelines. Typization
is inherited by situations as follows:

nitions. Let H = Sn
≡ Wn

∀a.
∀a s.

ν(a) = ν(do(a, S0)).
ν(a) = ν(s) ≡
∀a0s0.s = do(a0, s0)→ν(a) = ν(a0) ∧ ν(a0) = ν(s0).

(1)

runningLocationEnginestopstopat(p2)go(p1,p2)at(p1)abbreviates: ∃s1 . . . sn ∃a1 . . . an. Wn
ν(ai) = ν(si)∧Vn

For each component v ∈ C, a timeline is speciﬁed by a his-
tory of actions concerning v. The evolution of the set of time-
lines is a set of situations sc = {sv|v ∈ C}, called situation
class, spanning different types. In other words, ∃s.s ∈ sc
i=1[s = do(ai, si)∧
j=1,i6=j ν(ai) 6= ν(sj)]. Where ν(si) is the
type of situation si corresponding to some component i ∈ C,
n=|C|. The sc class is equipped with the following ≤c rela-
tion:
(2)
do(av, sc) denotes the sequence resulting from adding the
action av to a type-compatible situation mentioned in sc.
Time.
Time is part of the sorted domain of T F SC, as
noted in Section 2; we extend the time selection function from
actions to situations (see [16] for a different notation), and
situation classes as follows:

0 ≤c sc ≡ ∀s
0

s.s ∈ sc ∧ s

0 ∈ sc

0 ≤ s.

0→s

sc

time(S0) = t0.
time(s) ≤ time(s0) ≡ ∃a a0 s00.s = do(a, s0)∧

time(do(a, s)) = time(a).

s0 = do(a0, s00) ∧ time(a) ≤ time(a0).

(3)

The time of a situation class sc, depends on the time of the
situations in sc, so time(sc) = t abbreviates:
∃s∀s0.s ∈ sc ∧ time(s) = t ∧ s0 ∈ sc ∧ time(s0) = t0→t ≥ t0.

(4)

Consistency of the extension. The above axioms concern-
ing types, time and situation classes, are added to the foun-
dational axioms in Σ and are conservative (i.e. obtained by
extending the language), therefore the extended set (which
we still denote with Σ) must be consistent.
Processes. Processes span the subtree of situations, over a
single interval speciﬁed by a start and end action. They are
implicitly typed by the actions process: for each process there
are two actions, starting and ending the process, abbreviated
by sP , meaning starts process P and eP , meaning ends pro-
cess P . A process is denoted by a ﬂuent P (~x, t−, s), (here t−
is its start time). Successor state axioms (SSP ) for processes
extend the set of SSA for ﬂuents and are deﬁned as follows:

P (~x, t−, do(a, s)) ≡ a = sP (~x, t−)∨

P (~x, t−, s) ∧ ∀t.a 6= eP (~x, t).
For example, moving towards θ, can be deﬁned as:

(5)

move(θ, t−, do(a, s)) ≡ a=smove(θ, t−)∨

move(θ, t−, s) ∧ ∀t0.a 6= emove(θ, t0).

Action preconditions axioms deﬁne the conditions for the
start and end actions to be executed. Let P be a process,
we say that it is linear if it does not mention any other pro-
cess in the right-hand side of the deﬁnition. The set Dssp
of successor state axioms for processes is linear if all pro-
cesses mentioned in it are linear. Let Dssp be a set of lin-
ear successor state axioms for processes, let the BAT be
D ∪ Dssp = Σ ∪ DS0 ∪ Duna ∪ Dss ∪ DAP ∪ Dssp then:
Lemma 1 D ∪ Dssp is consistent iff DS0 is.
Proof (sketch). The proof relies on the relative consistency of
the SC. Furthermore, linearity of Dssp ensures that there are
no loops w.r.t. time, hence for each start and end action, as
deﬁned in the processes, it is not possible to introduce depen-
dencies that could lead, for instance, to sP (~x, t) < sQ(~y, t0)
and sP (~x, t) > sQ(~y, t0).

Intervals.
Intervals mention temporal variables, which are
always free, and get assigned only according to a speciﬁed
set of behaviors, in so being very well suited for representing
ﬂexible behaviors. In this paragraph we show how embedding
intervals in the SC leads to the construction of a temporal
network. The following formula Ψ, speciﬁes the conditions
for a process Pi to hold on its induced timeline, from t−
to
t+
i with arg. x:
00
0
i , sc) = ∃sis
i .si ∈ sc∧
−
i , t+
is
00
i )∧
−
i ), s0
i) > do(sPi (x, t
i ), s
00
¬∃t s.s0
i ≥ do(ePi (x, t), s) ≥ s
i

si ≥ do(ePi (x, t+

Ψi(x, t

(6)

i

Let p, m, o, d, s, f , e abbreviate the usual precedes, meets,
overlaps, during, starts, ﬁnishes, equals, as deﬁned in the
temporal intervals literature, started in [1], with op ranging
over all relations, and let γop denote:
−
i = t
j ); γs = (t
j ∧ t
−
−
i = t+
i = t
j );
i ∧ t+
i < t+
j );
i ∨ t
i ≤ t
j ∧ t+
−
−

−
j ); γm = (t+
γp = (t+
i < t
j ); γe = (t+
i = t+
γf = (t+
j ∧ t
−
−
−
j < t+
i < t
γo = (t
j ∧ t+
j ≥ t+
−
−
γd = (t
i > t

−
i = t

j < t+

−
j );

i ).

We represent the interval relations between processes, given
in situation-suppressed form (i.e not mentioning situations),
and taking the “end-time” t+ as argument, according to the
following macro-deﬁnition, where the free variables men-
tioned in Ψi (see (6) above) are just hidden:

Pi(x, t

−
i , t+

i ) op Pj(x, t

−
j , t+

j ) ∆= Ψi→[Ψj ∧ γop].

(7)

g , t+

b , t+

g ]) p beingAt([t−

Note that the metrical version (like in [10]) including durative
relations can be analogously deﬁned. Letting each operator in
the macro being not commutative, inverse can be deﬁned as
Pi op−1 Pj = Pj op P1.
We assume that the domain theory DT is associated with
temporal relations, as those given in (7), specifying the tem-
poral interactions between processes as constraint patterns.
For example, wanting to say that going has always to be
preceded by beingAt we would associate to DT the set
{going([t−
b ]). We call this set the
temporal compatibilities abbreviated by Tc.
We denote I(τ, sc) the set of the (7) interval relations as-
sociated with the situation class sc, where τ is the set of time
variables, varying over the intervals [t+, t−], related to the
set of timelines sc. The I(τ, sc) is obtained by abducing the
time constraints on τ, according to a construction illustrated
in the paragraphs below. For instance, for a suitable sc and
τ = {[t−
4 ]} we can get the set:
3 ], [t−
2 ], [t−
1 ], [t−
4 , t+
3 , t+
2 , t+
I(τ, sc)= {P1(t
−
−
−
2 , t+
1 , t+
2 , t+
2 ),
2 ), P1(t
1 ) s P2(t
−
−
2 , t+
3 , t+
1 ) d P2(t
−
−
4 , t+
4 , t+
3 ) s P4(t

−
1 , t+
1 ) o P2(t
−
2 , t+
3 ) d P2(t
2 ),
2 )},
−
2 , t+
4 ) d P2(t
whose constraints are depicted in the network of Fig. 2.
Temporal Constraint Network. The satisﬁability problem
we are concerned with is the following. Let DT = D∪Dssp∪
I(τ, sc) be a basic theory of actions, extended with time spec-
iﬁcations (see eq. (3) above), successor state axioms for pro-
cesses, time interval constraints, in which time variables are
free, and with an associated set of compatibilities Tc. We
seek an assignment set for time variables, which is a feasi-
ble solution for the constraints, and s.t. a substitution of the

2 ), P3(t
4 ), P4(t

−
1 , t+
−
3 , t+

1 , t+

P3(t

P1(t

ture of SC (where D is a sorted domain and I an interpre-
tation) we extend M with the above deﬁned mapping h, i.e.
Mh=hD, I, hi. Then Mh is a model for D∪I(τ, sc), iff there
is a consistent temporal network h(I(τ, sc)), under some as-
signment V to the free time-variables, satisfying I(τ, sc).
Given the above deﬁnitions we can state the following:
Lemma 2 Let DT be a consistent action theory. DT ∪
I(τ, sc) is consistent iff there exists a consistent temporal con-
straint network h(I(τ, sc)), under the assignment V , such

that Mh, V |=VD ∧ Ψ[τ].
V

00

i), σ0) ≤ σ ≤ do(ePi(t

line in sc. Extend the structure M to one for DT ∪S

Proof(sketch). Let h(I(τ, sc)) be a consistent temporal net-
work, under the assignment V . Consider the formula Ψ[τ] =,
i,j≤m Ψi→(Ψj∧γopij ), with τ the set of free time-variables
in Ψ, and we let M be a model for DT . M can be ex-
tended to a model for all the γopij according to V , as follows.
For each process Pi build a chain of situations of the kind
i ), σ00) ≤ σi}, with
Γi = {do(sPi(t0
σ a sequence such that ePi is not mentioned in σ, and the
free-temporal variables are from τ according to the Pi time-
i Γi by
choosing from V a suitable assignment to the free variables τ,
appearing in each Γi, and according to the constraints in the
γopij , corresponding to those in I(τ, sc), and such that each
sequence is satisﬁed. This is always possible, because each
process is made true of a situation by a start action, and false
by an end action, by the sequence construction, on a timeline.
Then V is an assignment to τ s.t. (Mh, V ) is a model for
i Γi[τ]. Finally it is enough to show that any model
2
By Lemma 1 DT ∪ I(τ, sc) is consistent iff DS0 ∪ I(τ, sc)
is consistent. Logical implication can be now deﬁned as fol-
lows. Let Mh = hD, I, hi, and β(τ) be a formula with all its
free temporal variables among τ:

DT ∪S
for DT ∪S

i Γi[τ], is a model for Ψ[τ].

DT ∪ I(τ, sc) |= β(τ ) iff for any h, for any V,

Mh, V |= DT ∪ I(τ, sc) implies Mh, V |= β(τ ).

(8)

1

1

−
1 , t+

2 ),eP2(t+

2 ), sP1(t0

−), eP1(t0

TCN construction. The T CN construction involves the
i. abduce I(τ, sc) to ob-
following inference mechanisms:
tain the temporal network topology h(I(τ, sc)); ii.
imple-
ment the temporal constraints into situations, according to
the network. We show the inference process through an ex-
ample. Let Tc = {P1 m P2}, be the compatibilities spec-
iﬁed in the domain theory. Let sc = do([sP1(t−
1 ), eP1(t+
1 ),
sP2(t−
+)], S0), then the abduced
constraints, according to Tc, sc and τ, are:
−
I(τ, sc)={P1[t
, t0
+], P1[t0
2
(9)
From the above constraints a three nodes network h(I(τ, sc))
would be constructed. The time range of the solutions to the
network – given the free temporal variables and the situation
class sc – is a ﬂexible situation class, which is a triple of
the kind hsc, τ, ii, where i(τ) is the constraint over the free-
variables, e.g. i(τ) = 7 ≤ t−
Progression. We want to determine if, according to the tim-
ing and advancements of the current situation class, we can
forget about past scheduled processes and think of future re-
sources allocation. This is the well known progression prob-
lem [19] in the SC. We face here a simpliﬁed version of the

+] m P2[t0

1 ∧ t+

2 > 10.

1 ] m P2[t2

−, t2

, t0

−

1

1

2

+]}

Figure 2: A T CN representing a set of interval constraints
on processes P1, P2, P3, P4

n , t+

1 , t+

1 , t+

1 ], . . . [t−

free variables for this set induces an interpretation, which is a
model of DT ∪ I(τ, sc). To ﬁnd such an assignment we ap-
peal to the concept of general temporal constraint networks
(T CN) introduced in Meiri [13] following the one developed
for discrete constraint networks [5]. A T CN involves vari-
ables denoting both intervals and points, together with unary
and binary constraints. A T CN is associated with a direct
constraint graph where each node is labeled by a temporal
variable and labeled-directed edges represent the binary rela-
tions between them (e.g. p, e etc.). According to the underly-
ing temporal algebra, T CN s express different forms of rea-
soning (Allen’s interval algebra [1], the Point Algebra [22],
metric point algebra [5], and so on) see in particular [2]. Let
τ = {X1, . . . , Xn} = {[t−
n ]} be a set of time
variables, denoting intervals (i.e. each variable Xi denotes an
interval [t−
1 ]), and let R be a set of binary relations; the
assignment set V = {[s1, e1], . . . , [sn, en] : si, ei ∈ R, si <
ei} is called a solution set for R, if {X1 = [s1, e1], . . . , Xn =
[sn, en]} satisﬁes all the constraints deﬁning R. The network
is consistent if at least one solution set exists. In the sequel
we shall identify a T CN with its labeled direct graph and de-
note with V a solution set. We also say that V satisﬁes the
constraints.
7→ T CN,
Mapping SC to TCN. Let h :
h(I(τ, sc)) is a temporal network N et, with cardinality m,
speciﬁed by the nodes labeled by the deﬁned processes
{Pi, Pj|PiopPj}, mentioned in I(τ, sc).
By the above deﬁnitions the network N et is consistent if
there exists an assignment V to the temporal variables τ,
which is a feasible solution for I(τ, sc). For example the
set V ={[10, 160], [10, 70], [75, 95], [95, 150]} is a solution
set for the variables τ={[t−
4 ]},
1 ], [t−
of the network depicted in Figure 2, given the relations
{m, p, d, s, f}. Note that,
in the macro deﬁnition (7),
there are two parts, the left-hand component is the deﬁnien-
dum Pi(x, t−
j ), which is mapped into
a temporal network, while the right-hand component is the
deﬁniens Ψi→(Ψj∧γop)[τ], which is interpreted into a struc-
ture of the SC, where the assignments for the free tempo-
ral variables τ are obtained by the T CN. A semantic cor-
respondence, between the network and the formulae of SC,
can be established as follows. Let M=hD, Ii be a struc-

i ) op Pj(x, t−

2 ], [t−

3 ], [t−

I(τ, sc)

i , t+

j , t+

4 , t+

1 , t+

2 , t+

3 , t+

T

Lemma 3 DT ∪ I(τ, sc) |=V(Dmin

progression problem, and with regressable formulas, which
is all we need. Let us state the problem as follows. Given a
sentence ϕ, one needs ﬁrst to determine the set of situations
in sc to which it can be progressed, given the timelines, and
a candidate interval t = [t−, t+]. To this end one has to order
the situation terms in ϕ according to the relation ≤sc intro-
duced in (2), and get the smallest situations set, w.r.t. ≤sc,
mentioning t; let it be min. We now consider the domain
theory Dmin
, which is equal to DT but with DS0 replaced by
a set W min = {ϕ|DT |= ϕ}, where ϕ mentions only ground
situations σ, with {σi}=scmin, but no free variables of sort
time. Let Φ(t1, . . . tn) be a SC formula mentioning situations
{σi} ≥sc min, which are ground but for possible free vari-
able of sort time all among t1, . . . , tn. Then
T ∪ I(τ, sc) ∪ W min).
Theorem 1 DT ∪ I(τ, sc) |= Φ(t1, . . . , tn) iff Dmin
W min ∪ I(τ, sc) |= Φ(t1, . . . , tn)
Proof. (sketch) One direction follows by cut. For the other
direction, suppose DT ∪ I(τ, sc) |= Φ(t1, . . . , tn), let us
regress Φ(t1, . . . , tn) along the different timelines, this can
be done by separating Φ into a DNF, and considering each
conjunct separately, we regress it with respect to min, and let
G be the regressed formula – note that no change is needed
in regression to account for regressed sentences as time vari-
ables will be kept as they are, without turning to quantiﬁed
variables through successor state axioms (as they are univer-
sally quantiﬁed in linear Dssp). Then by deﬁnition of W min,
G ∈ W min hence, by the previous lemma, the claim follows.

∪

T

4 Flexible High Level Programming in Golog
Golog Syntax. Given the extended action theory presented
above, the following constructs inductively build Golog pro-
grams:
1. Primitive action: α.
2. Nondeterministic choice: α|β. Do α or β.
3. Test action: φ?. Test if φ is true in the current sit. class.
4. Nondet. arg. choice: choose ~x for prog(~x).
5. Action sequence: p1; p2. Do p1 followed by p2.
6. Partial order act. choice: p1 ≺ p2. Do p1 before p2.
7. Parallel execution: p1kp2. Do p1 concurrently with p2.
8. Conditionals: if φ then p1 else p2.
9. While loops: while φ do p1.
10. Procedures, including recursion.

Golog Semantics. The macro Do(p, sc, sc0, h) gives the
semantics for the above constructs; where p is a program, sc
and sc0 are situation classes, and h speciﬁes the ﬁnite horizon.
• Null program:

Do(N il, sc, sc0, h) ∆= time(sc) ≤ h ∧ ∀s.[s ∈ sc ≡ s ∈ sc0]

• Primitive ﬁrst program action with horizon:
Do(ai; prog, sc, sc0, h) ∆= ∃si.si ∈ sc ∧ P oss(ai, si)∧
time(si) ≤ h ∧ [time(ai) ≤ h ∧ Do(prog, do(ai, sc), sc0, h)∨
time(ai) > h ∧ Do(prog, sc, sc0, h)]

Here, if the ﬁrst program action is applicable to si ∈ sc,
and ai can be scheduled after the horizon then it is neglected
(i.e. each action, which can be started after the horizon can
be postponed).
• Partial order action choice:
Do(prog1 ≺ prog2, sc, sc0, h) ∆= Do(prog1 : prog2, sc, sc0, h)∨

∃a.select(a, sc) ∧ Do(prog1 ≺ a ≺ prog2, sc, sc0, h)

Here, either the second program can be directly executed, or
it is possible to insert a primitive action a, selected by a suit-
able ﬂuent predicate select(a, s) representing the selection
criterion (set to true if no selection holds).
• Parallel execution:

Do(prog1 k prog2, sc, sc0, h) ∆=

Do(prog1, sc, sc0, h) ∧ Do(prog2, sc, sc0, h)

• Test action:

Do(φ?; prog, sc, sc0, h) ∆= φ[sc] ∧ Do(prog, sc, sc0, h)

Here φ[sc] stands for generalization of the standard φ[s] in the
SC extended to situation classes, e.g. P1[sc] ∧ P2[sc] is for
P1(s1)∧ P2(s2) with s1, s2 ∈ sc, i.e. each ﬂuent is evaluated
w.r.t. its speciﬁc timeline.
• The semantics of nondet. action choice, nondet. argument
selection, conditionals, while loops, and procedures is deﬁned
in the usual way.

Flexible Temporal Behaviors in Golog. The CBI planning
problem (Mcbi, Pc) introduced in Section 2.2 can be easily
coded and solved in the T F SC framework. Given a DT rep-
resenting the timelines and processes in Mcbi, a candidate
plan Pc can be encoded by a Golog program progc. This is
possible once we introduce, for each interval constraint for
pi,j(~r) in Pc, a Golog procedure of the kind:

i (~r, t−, t+) ∧ γ(t−, t+))?) ,

proc(πi,j, (ψj
where ψj
i is the macro (6) associated with the process P j
i
(i.e. i-th process in the j-th timeline), and γ any temporal
constraint. For example, go(d, e) ends in [6, 10] can be repre-
sented as

proc(π1,1, (ψnav

go (d, e, t−, t+) ∧ 6 ≤ t+ ≤ 10)?).
Given the πi,j procedures, a partial speciﬁcation of a single
timeline Tj can be easily deﬁned using the ≺ operator:
proc(plan Tj, π0,j ≺ π1,j ≺ π2,j ≺ . . . ≺ πk,j),

Given a set of timelines {Ti}, a candidate plan Pc can be
represented as a parallel execution of the plan Ti:

proc(progc, plan T1 : N il k . . . k plan Tk : N il ).

Since a CBI complete plan P is associated with a fully sup-
ported set of timelines {T i} and a set of constraints i(τ) (see
Section 2.2), we can introduce a mapping g transforming a
CBI plan P into a ﬂexible situation hsc, τ, ii. The following
holds.
Proposition 1 Given a CBI planning problem (Mcbi, Pc),
where Pc is a candidate plan [10], for any complete plan
P of (Mcbi, Pc), maximally ﬂexible in the time variables τ,
there exists a DT , a Golog program progc, where
DT ∪ I(τ, sc) |= Do(progc, ini, sc[τ], h).
with hsc, τ, ii a ﬂexible situation, and such that:

g(P ) = hsc, τ, ii

The proof is omitted.

Example. We assume an autonomous rover, which has to
explore the environment and perform observations. While
the robot
is moving the pant-tilt unit must be pointing
ahead ptIdle. To point to a location x the rover must
be stopped there, at(x), while the pan-tilt scans in direc-
tion z: ptScan(x, z). Hence, we consider two compo-
nents: pant-tilt, navigation. Each component has a set
of processes: Jpt={ptIdle, ptScan(z, x)}; Jnav={at(x),
go(x, y)}. Each of these is to be encoded in the DT as
in (5), e.g. ptScan(t, z, x, do(a, s)) ≡ a = spts(z, x, t)
∨ptScan(t, z, x, s) ∧ ¬∃t0.a = epts(z, x, t0). The temporal
compatibilities Tc among the activities are deﬁned by a set of
temporal constraints patterns, deﬁned by macros (7), e.g.:

go(x, y, t1, t2) m at(y, t3, t4); at(x, t1, t2) m go(x, y, t3, t4);
go(x, y, t1, t2) d ptScan(z, x, t3, t4);
ptScan(z, x, t1, t2) d at(x, t3, t4).

Consider a partial speciﬁcation for the rover behavior: from
time 0 to 3 it must remain at(p1), and at time 0 the pant-tilt
is ptIdle; the rover mission is to observe p3, in direction θ
before 30 and after 20, and be back at p1 before 50. This can-
didate plan, can be encoded in the following Golog program:

proc(mission,

at (p1, 0, 3)? ≺ (ψnav
ψnav
ψpt
pti(0, t2

1)? ≺ (ψpt

at (p1, t1
2, t3

pts(θ, p3, t2

2 ≤ 50)? : N ilk
2) ∧ t1
1, t1
3) ∧ [t2
3] ⊆ [20, 30])? ≺ N il).
2, t2

Given the horizon h = 50, and an initial situation class
ini, a possible complete plan is a ﬂexible situation hsc, τ, ii,
with sc[τ]={σnav[τ1], σpt[τ2]}, s.t. DT ∪ I(τ, sc)
|=
Do(mission, ini, sc[τ], 50), e.g.

σnav=do([sat(p1, 0), eat(p1, 3), sgo(p3, t1

1), ego(p3, t1

2),

sat(p3, t1

3), eat(p3, t1

4), sgo(p1, t1

σpt=do([spti(0), epti(t2

1), spts(t2

2), epts(t2

5), ego(p1, t1
3), spti(t2

6)], S0);
4), epti(t2

5), s]S0),

and i(τ) is the minimal set of constraints solving the
h(I(sc, τ)) temporal network, i.e.
4 = t1
5
< t1
5; t2

{t1
2 = t1
2 > t1
3, t2
3 < t1

3 < t1
4 }.

6 < 50; t2

3 = t2

1 = t2

2 < t2

4 < t2

Implementation. We provided a constraint logic program-
ming (CLP) [9] implementation of the Golog interpreter.
Since the Golog interpreter is to generate ﬂexible temporal
plans, it must be endowed with a constraint problem solver.
Analogous to [17] we rely on a logic programming language
with a built-in solver for linear constraints over the reals
(CLP(R)). We appeal to the ECRC Common Logic Program-
ming System ECLIPSE 5.7. Currently, we are deploying the
Golog interpreter as the control engine of a monitoring sys-
tems for robotics applications.

References
[1]

James F. Allen. Maintaining knowledge about temporal inter-
vals. Commun. ACM, 26(11):832–843, 1983.

[2] Federico Barber. Reasoning on interval and point-based dis-
junctive metric constraints in temporal contexts. J. Artif. Intell.
Res. (JAIR), 12:35–86, 2000.

[3] Giuseppe de Giacomo, Yves Lesperance, and Hector J.
Levesque. Congolog, a concurrent programming language
based on the situation calculus. Artif. Intell., 121(1-2):109–
169, 2000.

[4] A.K. Jonsson D.E. Smith, J. Frank. Bridging the gap between
planning and scheduling. Knowledge Engineering Review,
15(1), 2000.

[5] Rina Dechter, Itay Meiri, and Judea Pearl. Temporal constraint

networks. Artif. Intell., 49(1-3):61–95, 1991.

[6] Alfredo Gabaldon. Programming hierarchical task networks in

the situation calculus. In AIPS’02, 2002.

[7] Malik Ghallab and Herv Laruelle. Representation and control

in ixtet, a temporal planner. In AIPS 1994, pages 61–67.

[8] H. Grosskreutz and G. Lakemeyer. ccgolog – a logical lan-
guage dealing with continuous change. Logic Journal of the
IGPL, 11(2):179–221, 2003.
Joxan Jaffar and Michael J. Maher. Constraint logic program-
ming: A survey. Journal of Logic Programming, 19/20:503–
581, 1994.

[9]

[10] Ari K. Jonsson, Paul H. Morris, Nicola Muscettola, Kanna Ra-
jan, and Benjamin D. Smith. Planning in interplanetary space:
Theory and practice. In Artiﬁcial Intelligence Planning Sys-
tems, pages 177–186, 2000.

[11] J. Kvarnstrom, P. Doherty, and P. Haslum. Extending talplan-
ner with concurrency and resources. In Proc. ECAI-00, pages
501–505, 2000.

[12] J. McCarthy. Situations, actions and causal laws. Technical
report, Stanford University, 1963. Reprinted in Semantic In-
formation Processing (M. Minsky ed.), MIT Press, Cambridge,
Mass., 1968, pp. 410-417.

[13] Itay Meiri. Combining qualitative and quantitative constraints

in temporal reasoning. Artif. Intell., 87(1-2):343–385, 1996.

[14] Nicola Muscettola, P. Pandurang Nayak, Barney Pell, and
Brian C. Williams. Remote agent: To boldly go where no AI
system has gone before. Artiﬁcial Intelligence, 103(1-2):5–47,
1998.

[15] J.A. Pinto and R. Reiter. Reasoning about time in the situation
calculus. Annals of Mathematics and Artiﬁcial Intelligence,
14(2-4):251–268, September 1995.

[16] Javier Pinto. Occurrences and narratives as constraints in the
branching structure of the situation calculus. Journal of Logic
and Computation, 8(6):777–808, 1998.

[17] Fiora Pirri and Raymond Reiter. Planning with natural actions

in the situation calculus. pages 213–231, 2000.

[18] R. Reiter. Natural actions, concurrency and continuous time in
the situation calculus. In Proceedings of KR’96, pages 2–13,
1996.

[19] Raymond Reiter. Knowledge in action : logical foundations
for specifying and implementing dynamical systems. MIT
Press, 2001.

[20] Tran Cao Son, Chitta Baral, and Le-Chi Tuan. Adding time and
intervals to procedural and hierarchical control speciﬁcations.
In AAAI 2004, pages 92–97, 2004.

[21] Austin Tate. I-n-ova and i-n-ca - representing plans and other

synthesised artifacts as a set of constraints.

[22] Marc B. Vilain and Henry A. Kautz. Constraint propagation
algorithms for temporal reasoning. In AAAI, pages 377–382,
1986.

[23] B. Williams, M. Ingham, S. Chung, P. Elliott, M. Hofbaur, and
G. Sullivan. Model-based programming of fault-aware sys-
tems. AI Magazine, Winter 2003.

