Grid-based SensorDCSP* 

R.Bejar1,  C.Domshlak2,  C.Fernandez1,  C. Gomes2,  B. Selman2  and  M. Vails3 
1 Dept. d'Informatica 
Universitat de Lleida 
Jaume II, 69. Lleida, Spain 

2Dept. of Computer Science 
Cornell University 
Ithaca, NY 14853, USA 

3Dept. de Matematica 
Universitat de Lleida 
Jaume II, 69. Lleida, Spain 

Abstract 

We introduce Grid-based SensorDCSP, a geometri(cid:173)
cally  structured  benchmark  problem  for  the  study 
of distributed  CSP  algorithms.  This  domain  pro(cid:173)
vides  realistic  structure of the  communication and 
tracking constraints.  We formally define this prob(cid:173)
lem, and perform its worst-case complexity analy(cid:173)
sis. Likewise, we provide an average case empirical 
analysis of the AWC algorithm, studying its behav(cid:173)
ior  on  tractable  and  intractable  sub-classes  of our 
problem. 

Introduction 

1 
In  recent  years  we  have  seen  an  increasing  interest  in  Dis(cid:173)
tributed  Constraint  Satisfaction  Problem  (DisCSP)  formula(cid:173)
tions to model combinatorial problems arising in multi-agent 
environments [Yokoo, 2001 J. Recently, an interesting bench(cid:173)
mark  for DisCSP  algorithms,  called  SensorDCSP,  has  been 
introduced in [Fernandez et al, 20021. Inspired by distributed 
applications arising  in  networked  systems,  SensorDCSP  in(cid:173)
volves a network of distributed sensors simultaneously track(cid:173)
ing  multiple  mobile objects.  An  instance  of SensorDCSP is 
defined by a set of sensors, a set of mobiles which are to be 
tracked by the sensors, and two sets of visibility and compat(cid:173)
ibility constraints specifying which sensors can communicate 
one with another and which sensors can track which mobiles, 
respectively.  The  goal  is  to  allocate  three  sensors  to  track 
each  mobile,  such  that  all  these  triplets of sensors  are  pair-
wise disjoint, and the sensors in each such triplet are mutually 
compatible and can track the mobile they are assigned to. The 
analysis in  [Fernandez et al., 2002] addresses the complexity 

* Research supported by AFOSR, grant F49620-01-1-0076 (In(cid:173)
telligent  Information  Systems  Institute)  and  F49620-01-1-0361 
(MURI grant on Cooperative Control  of Distributed Autonomous 
Vehicles  in  Adversarial  Environments),  CICYT,  TIC2001-1577-
C03-03  and  DARPA,  F30602-00-2-0530  (Controlling  Computa-
tional Cost:  Structure, Phase Transitions and Randomization) and 
F30602-00-2-0558 (Configuring Wireless Transmission and Decen(cid:173)
tralized Data Processing for Generic Sensor Networks).  The views 
and conclusions contained herein are those of the authors and should 
not be interpreted as necessarily representing the official policies or 
endorsements, either expressed or implied, of AFOSR, DARPA, or 
the U.S. Government. 

of SensorDCSP, as well  as its empirical evaluation, consid(cid:173)
ering  the  performance  and  scalability  of alternative  DisCSP 
algorithms on various scenarios in a truly networked environ(cid:173)
ment. 

In  this  work  we  extend  SensorDCSP by providing it  with 
an  underlying  spatial  structure. 
In  SensorDCSP,  the  con(cid:173)
straints  of communication  between  sensors  and  visibility  of 
mobiles  are  independent of their  physical  location.  In  con(cid:173)
trast  to  SensorDCSP,  the  spatial  limitations  for  both  com(cid:173)
munication between sensors and visibility of the mobiles are 
captured by  a geometrical  structure  in  our  new  benchmark, 
providing  a  more  realistic  framework.  We  refer  to  our  ge(cid:173)
ometrically enriched benchmark as Grid-based SensorDCSP 
or just  GSensorDCSP.  We  provide both  an  analytical  com(cid:173)
plexity analysis of GSensorDCSP and an empirical study of a 
characteristic  DisCSP algorithm on various  instances of this 
problem. 

2  GSensorDCSP: Definition and Complexity 
GSensorDCSP is  a  specific  variant of the  general  SensorD(cid:173)
CSP, enriched by a spatial structure:  we have multiple sen(cid:173)
multiple  objects  (mobiles)  T  = 
sors 
which are to be tracked by the sensors subject 
to visibility and compatibility constraints,  and the goal  is to 
decide  whether there exists an  allocation  of three  sensors to 
each object, while keeping these triplets of sensors pair-wise 
disjoint.  However, the visibility and compatibility constraints 
in GSensorDCSP relate to the physical limitations of the sen(cid:173)
sors and the terrain on which the sensors are located. 

In GSensorDCSP, the sensors are located on the nodes of a 

Figure  1:  Grid  of  6  x  6  sensors;  black  sensors  stand  for 
the  (a)  2-compatibility  window  of  the  gray  sensor,  and  (b) 
2-visibility window of the  square mobile. 

POSTER PAPERS 

1359 

-compatibility  and 

-compatibility  window  for a  sensor Si,  de(cid:173)
corresponds to the set of all sensors that are 

uniform grid, and the mobiles are located within the surface 
enclosed  by  this grid;  this  way  the grid  specifies the gener(cid:173)
ally  trackable  region.  The  physical  limitations  of the  sen(cid:173)
sors are modeled by the notions  of 
visibility.  The 
noted 
as 
at most kc general (rectilinear and/or diagonal) hops from 
For example, the black sensors in Figure  1 (a) correspond to 
2-compatibility window for the gray sensor.  Similarly, the kv-
visibility window for a mobile 
corre(cid:173)
sponds to the set of all sensors that are at most k general hops 
around 
For example, the black sensors in Figure  1(b) cor(cid:173)
respond to 2-visibility window for the square mobile.  Finally, 
if each  sensor 
of a given GSensorDCSP problem instance 
can  communicate  only  with  some  sensors  within 
then  the  set  of compatibility  constraints  of  this  instance  is 
called 
-restricted  visibility  is 
defined similarly. 

-restricted.  The notion  of 

denoted 

as 

Studying the  worst-case  complexity of GSensorDCSP we 

formally  show  that: 

1.  Any  GSensorDCSP  instance  with  1-restricted  visibility 

is solvable in low polynomial time, and 

2.  GSensorDCSP  with 

complete for all  

-restricted  visibility 

is  NP-

The former is shown by a reduction to the problem of feasible 
integer  flow  in bipartite graphs, while the latter is shown by 
a non-trivial reduction from  3-SAT and is valid even for the 
problems with  1-restricted compatibility. 

3  Connecting Locality and Constrainedness 
While  the  physical  limitations  of the  sensors  in  GSensorD(cid:173)
CSP are modeled via the locality windows, the terrain limita(cid:173)
tions are modeled via incomplete compatibility and visibility 
within the windows.  Problem instances of any GSensorDCSP 
can be ordered according to the local con(cid:173)
sub-class 
strainedness, i.e., the average number of sensors that a sensor 
can communicate with and the average number of sensors that 
can  track a mobile.  In  our experiments,  for each pair of lo(cid:173)
cality parameters 
we define a random distribution of 
GSensorDCSP instances via two  parameters 
that  control  the  density  of visibility  and  compatibility:  The 
probability  that  two sensors 
will  be compatible is 
otherwise,  it  is  equal  to 
given  by 
0.  Clearly,  higher value  for 
correspond to better 
conditions for communication and tracking, respectively. 

and 

and 

if 

For our first experiments with the AWC [Yokoo,  1994] al(cid:173)
gorithm, we consider different sets of instances with 25 sen(cid:173)
sors (grid 5 x 5), and 5 mobiles, with every set generated with 
different values  for the parameters  Pc  and  Pv.  The  parame(cid:173)
ters Pc  and Pv  are ranging from 0.1  to  1  with an increment 
of 0.1,  giving a total  number of  100 data sets,  where every 
set contains  50 instances.  Given  our formal  complexity re(cid:173)
sults,  we consider several hard subclasses of GSensorDCSP 
corresponding to  kv  =  2.  For  instance,  Figure  3(a)  shows 
the ratio of the satisfiable instances  (Psat)  as a function of Pc 
and  Pv  for kv  =  2 with  kc  =  1  and kc  =  2.  As in  the case 
of general  SensorDCSP  [Fernandez et al,  2002],  when both 

probabilities are low, the instances generated are mostly un-
satisfiable,  while for high  probabilities most of the  instances 
are satisfiable.  Both for kc  =  1 and kc  â€” 2, the transition be(cid:173)
tween the satisfiable  and  unsatisfiable regions occurs within 
a narrow range of the density  parameters.  Observe  that,  for 
kc  =  1  this range corresponds to  significantly  higher values 
of Pc  and Pv,  comparatively to these for kc  =  2  and kc  =  2. 
However, the form of the transition for various values of k c  is 
very  similar. 

Figure  2:  Some  experiments  with  AWC  on  instances  of 
GSensorDCSP:  (a)  ratio  of satisfiable  instances  for kv  =  2, 
and mean solution time for (b) 
=  1, as a 
function of the density parameters 

=  2 and (c) 
 

and 

Consistently  with  the  general  SensorDCSP,  we  observe 
that the phase transition of GSensorDCSP coincides with the 
region where the hardest instances occur.  For instance, Fig(cid:173)
ure  3(b)  shows  the  mean  solution  time  with  respect  to  the 
for the problem instances with 
density parameters 
25  sensors,  5 mobiles, 
=  1.  Somewhat 

=  3,  and 

and 

1360 

POSTER  PAPERS 

to track the mobiles in real time.  More formally, a dynamic 
GSensorDCSP problem can be seen as an ordered sequence 
of  static  GSensorDCSP  problems 
The  static 
problems of the  sequence only  differ  in  the  positions  of the 
mobiles and hence the visibility between sensors and mobiles. 
Observe that,  if no assumptions are made about the relation(cid:173)
ship between the positions of the mobiles in 
it 
is  natural  to  solve  these problems  independently  (naive  ap(cid:173)
proach).  However,  mobile  dynamics  are  typically  far  from 
being chaotic.  A first approximation is to consider linear tra(cid:173)
jectories. In this case, changes between the subsequent prob(cid:173)
lems are governed by a clear model. An approach that a priori 
seems  to  be  promising  for dealing  with  the  dynamic  prob(cid:173)
lem is to initialize the search  for 
by the solution  already 
achieved for 

(solution repairing approach). 

and 

In  order  to  compare  the  naive  and  the  solution  repairing 
approach,  we  have  performed experiments  where  we  solve 
dynamic GSensorDCSP problems with both approaches. Fig(cid:173)
ure 3 depicts the cumulative probability distributions of solv(cid:173)
ing  Ui  for two  different problems.  One  of them  is  obtained 
from  the  50  %  Psat  point  of  GSensorDCSP  and  the  other 
from the 70 % P8at point. 

Our results show that we can exploit the previous solution 
and that, assuming certain reasonable constraints on the mo(cid:173)
bile movements, we can benefit from solution repairing over 
the  naive  approach.  More  interestingly,  it  also  follows  that 
the  relative  attractiveness  of  solution  repairing  is  higher  in 
the region of hardest instances. 

Figure 3:  Solving dynamic GSensorDCSP problems with the 
naive and the solution repairing approaches: (a) performance 
for a problem generated from an instance in the 70 %  Psat  (b) 
performance for a problem generated from a hard instance in 
the 50% Psat point. 

less  expected  result  is  depicted  in  Figure  3(c)  for  the  case 
of kv  =  1  (and  kc  =  1),  which  we  showed  to  be  polyno(cid:173)
mial  by  a reduction to  the  problem of feasible  integral flow 
in  bipartite  graphs.  Despite  the  fact that AWC  is  a  general 
purpose algorithm, Figure 3(c) shows that these tractable in(cid:173)
stances are relatively easy for AWC.  able to "detect and ex(cid:173)
ploit" the tractable without being aware of its existence. 

Extending  the  evaluation,  we  consider  different  sets  of 
instances  for  several  orders  of  the  problem  (grids  of  25-
100 sensors),  and several  levels of decomposition (Kc, kv 
{2,3,4,5}).  The  analysis  of these  sets  of instances  clearly 
shows both exponential dependence of the mean solution time 
on  the  size  of the  grid,  and,  somewhat  more  interestingly, 
growth of the slope of this dependence with  

4  Dynamic GSensorDCSP 
As an additional extension of the GSensorDCSP domain, we 
consider the dynamics of the mobiles,  in  order to determine 
under which conditions (number of sensors and mobiles, ve(cid:173)
locities, trajectories, etc.) generic DisCSP algorithms are able 

5  Conclusions and Future Work 
We believe that GSensorDCSP provides a realistic framework 
for  the  analysis  of the  DisCSP  algorithms,  and  we  hope  it 
will  contribute  to  the  further research  in  this  area.  For  the 
dynamic version, a next step would be to consider the effect 
of several  kinds of trajectories in  the performance of the  so(cid:173)
lution repairing approach.  Finally, a further step towards an 
even more realistic DisCSP benchmark would be to consider 
its  optimization  version:  maximizing the number of tracked 
mobiles. In this extended distributed benchmark, it would be 
interesting to  study the existence  of the  easy-hard complex(cid:173)
ity patterns that have been observed in classical optimization 
problems [Slaney and Walsh, 2002]. 

References 
[Fernandez et a/., 2002]  C. Fernandez, R. Bejar, B. Krishna-
machari, and C. P. Gomes. Communication and computa(cid:173)
tion  in distributed CSP algorithms.  In Proc.  of CP-2002, 
pages 664-679,2002. 

[Slaney and Walsh, 2002]  J.  Slaney  and  T.  Walsh.  Phase 
transition behavior: from decision to optimization. In Pro(cid:173)
ceedings of the SAT-2002 Conference, 2002. 

[Yokoo,  1994]  M.  Yokoo.  Weak-commitment  search  for 
solving constraint satisfaction problems.  In Proc.  ofAAAl-
94y pages 313-318,1994. 

[Yokoo, 2001]  M.  Yokoo.  Distributed  Constraint  Satisfac(cid:173)
tion:  Foundations of Cooperation  in Multi-Agent Systems. 
Springer-Verlag,  2001. 

POSTER PAPERS 

1361 

