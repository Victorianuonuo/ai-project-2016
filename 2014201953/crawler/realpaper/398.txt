Session No.  11 Theoretical Foundations 

481 

We  show  also  that  there  is  a  practical 

technique  for  proving  simulation  in  interesting 
cases  -  though  unfortunately  simulation  between 
programs  handling  the  integers,  for  example,  is 
not  a  decidable  (or  even  partially  decidable) 
relation.  Under  a  simple  restriction  simulation 
ensures  the  equivalence  (as  partial  functions)  of 
the  programs,  so  this  is  also  a  technique  for 
proving  equivalence;  however  in  general  equivalent 
programs  w i ll  not  satisfy  the  simulation  relation. 

I  also  claim  that  in  order  to  prove  by 

Floyd's  [1]  method  the  correctness  of  a  program 
A,  in  a  case  where  data  is  represented  unnaturally, 
perhaps  for  efficiency's  sake,  the  easiest  and 
most  lucid  approach  is  rather  close  to  f i r st 
designing  a  program  B  which  is  simulated  by 
program  A  and  which  represents  the  data 
naturally,  and  then  proving  B  correct.  This 
was  in  fact  the  original  motivation  for  studying 
simulation,  and  is  discussed  in  more  detail  in 
Milner  [ 2 ],  which  contains  a  f i r st  attempt  at  the 
definition  of  simulation.  The  sequel  [3]  gener­
alizes  the  definition  and  the  current  paper  is  a 
synthesis  of  the  two,  and  may  be  read  independently 

2.  NOTATION 

AN ALGEBRAIC DEFINITION OF SIMULATION 

BETWEEN PROGRAMS* 

Robin  Milner 

Computer  Science  Department 

Stanford  University 
Stanford,  California 

A  simulation  relation  between  programs  is 

defined  which  is  a  quasi-ordering.  Mutual  simula­
tion  is  then  an  equivalence  relation,  and  by  divid­
ing  out  by  it  we  abstract  from  a  program  such 
details  as  how  the  sequencing  is  controlled  and 
how  data  is  represented.  The  equivalence  classes 
are  approximations  to  the  algorithms  which  are 
realized,  or  expressed,  by  their  member  programs. 

A  technique  is  given  and  illustrated  for 
proving  simulation  and  equivalence  of  programs; 
there  is  an  analogy  with  Floyd's  technique  for 
proving  correctness  oi  programs.  Finally,  necess­
ary  and  sufficient  conditions  for  simulation  are 
given. 

DESCRIPTIVE  TERMS:  Simulation,  weak 

homomorphism,  algorithm,  program  correctness, 
program  equivalence. 
1. 

INTRODUCTION 

One  aim  of  this  paper  is  to  make  precise  a 

sense  in  which  two  programs  may  be  said  to  be 
realizations  of  the  same  algorithm.  We  can  say 
loosely  that 
for  this  to  he  true  it  is  sufficient 
though  perhaps  not  necessary  that  the  programs  do 
the  same  'important'  computations  in  the  same 
sequence,  even  though  they  differ  in  other  ways: 
for  example  1)  we  may  disregard  other  computations 
perhaps  different  in  the  two  programs,  which  arc 
'unimportant'  in  the  sense  that  they  are  only  con­
cerned  with  controlling  the 
'important'  ones,  (2) 
the  data  may  ilow  diiterently  through  the  variables 
or  registers,  (3)  the  data  may  be  differently 
represented  in  the  two  programs.  The  program  pairs 
in  Figures  1  and  2, 
in  Section 
4,  illustrate  points  (1)  and  (5)  respectively;  a 
t r i v i al  illustration  of  (2)  is  the  following  pair 
of  programs: 

studied  in  detail 

Although  the  above  prescription  is  vague,  we  give 
a  relation  of  simulation  between  programs  which  may 
fairly  be  said  to  match  i t.  The  relation  turns  out 
to  be  transitive  and  reflexive  but  not  always 
symmetric;  however  mutual  simulation  is  an  equiva­
lence  relation,  and  it  is  the  equivalence  classes 
under  this  relation  which  may  be  regarded  as 
algorithms  -  at  least  this  is  an  approximation  to 
a  definition  of  algorithm. 

*This  research  was  supported  mainly  by  the  Science 
Research  Council,  Great  Britain  and  In  part  by 
the  Advanced  Research  Projects  Agency  of  the 
Department  of  Defense  (SD-183)  U.S.A. 

482 

Session No.  11 Theoretical Foundations 

we  get  either  an  i n f i n i te  sequence  in  D 
a  f i n i te  sequence  in  D 

,  or 
followed  by  a  single 

comp 

comp 

repeated  member  of  D 
to  keep  F 

t o t a l,  which  the  theory  requires. 

.  We  have 

( i i)  merely 

Why  must  the  domains  be  disjoint?  What  about 

a  program  which  inputs  an  integer  and  outputs  an 
integer?  Here  one  might  argue  that  Din  =  D  out  = 
[integers};  but  we  get  into  no  trouble  having  two 
formally  disjoint  domains  with  for  example  an 
In  fact, 
injection  or  a  bijection  between  them. 
in  practice  we  can  distinguish  between  an  input 
object  and  an  output  object  of  a  program;  for 
example  they  occur  on  different  media,  or  at 
different  spatial  locations.  We  are  concerned 
with  a  level  of  abstraction  ( i . e.  abstraction  from 
real  computers  operating  on  physical  data  symbols) 
lower  than  that  in  which  a  program  is  considered 
as  for  example  a  function  from  integers  to 
integers. 

E 
is  the  set  of  possible  state-vector  values, 
is 
and  for  non-recursive  (flowchart)  programs  N 
the  f i n i te  set  of  nodes  of  the  flowchart  while  for 
recursive  programs  N 
possible  states  of  a  pushdown  store. 

is  the  i n f i n i te  set  of 

Before  dealing  with  simulation,  we  state 

without  proof  some  theorems  concerning  correct­
ness  and  termination  of  programs.  Theorem  3.1 
embodies  Floyd's  [1J  method  of  proving  partial 
correctness  of  programs.  There  is  also  a 
correspondence  with  Manna's  work  -  for  example  in 
[4] ;  our  Theorems 3 .1  ard  3.2  correspond  to 
Theorems  1  and  ?  of  that  paper.  However,  Manna 
is  concerned  with  the  representability  of  v e r i f i­
cations  (as  defined  below)  in  f i r st  order  predi­
cate  calculus;  we  perhaps  gain  in  succinctness  by 
stating  results  algebraically  and  ignoring  the 
question  of  representability. 

Henceforward  we  assume  that  the  suffix  ' i n' 
to  a  symbol  denoting  a  set  implies  inclusion  in 
Din  .  Similarly  for 
i 

'comp'  and 

'out'. 

Session No.  11 Theoretical Foundations 

483 

simulation  of  a  by  a'  we  say  a'  strongly  sim­
ulates  a,  and  it  is  easy  to  show  that  this  is  a 
transitive  reflexive  relation,  i . e .,  a  quasi-
ordering.  Mutual  strong  simulation  is  therefore 
an  equivalence  relation,  and  equivalence  classes 
may  be  thought  of  as  algorithms,  each  of  which 
is  realized  by  its  member  programs.  Moreover, 
if  we  divide  out  by  this  equivalence  relation  we 
obtain  from  the  quasi-ordering  of  programs  a 
partial  ordering  of  algorithms. 

It  is  worth  noticing  that  there  is  always  a 

weak  simulation  between  any  pair  of  programs  -
just  take  R  =  0  -  so  a  similar  definition  of 
"a'  weakly  simulates  a " 

is  vacuous. 

We  finish  this  section  with  two  simple 
results  which  exhibit  the  close  relationship 
between  verifications  and  simulations. 

Theorem  3.5 

(Note  that  in  the  above  we  did  not  use  the  totality 
of  R-1 

,  nor  the  single  valuednesB  of  R,  ). 

out 
Let us return to the discussion of algorithm 

in the introduction.  If there is a strong 

Thus  in  a  precise  sense  a  proof  of  partial 
may  be  factored  into  a  proof 

together  with  a 

correctness  of 
of  partial  correctness  of 
proof  of  simulation  of 

4 .  APPLICATION TO FLOWCHART  PROGRAMS 

In  this  section,  we  show  how  we  may  demonstrate 

484 

Session No.  11 Theoretical Foundations 

485 

486 

Session No.  11 Theoretical Foundations 

a  simulation  between  two  programs  in  a  manner  which 
bears  a  close  relation  to  Floyd's  method  for  proving 
correctness  of  a  single  program.  Of  the  two  examples, 
the  f i r st  has  the  same  data  representation  but  dif­
ferent  control  in  the  two  programs;  the  second  has 
different  data  representations  in  the  two  programs. 
Given  a  flowchart  program  with  input  domain  D. 
in, 
and  node-
:D,   E 
,  it  is  a  simple 

state-vector  domain  E,  output  domain  D 
out 
set  N,  and  given  also  an  input  function  f 
and  output  function 
matter  to  formalize  it  as  a  program  according  to 
our  definition,  with  D 
=  N  x  E  and  F:D  D 
comp 
defined  in  terms  of 
fin 
,fout  and  the  tests  and 
in  out 
assignments  in  the  boxes.  Alternatively,  we  may 
formalize  it  by  selecting  a  subset  M   N  so  that 
every  cycle  in  the  flowchart  contains  a  member  of 
M 
(we  call  such  an  M  a  cycle-breaking  set)  and 
define  D 

instead  as  M  x  E.  The  cycle 

f 
out 

D 
out 

:E 

in 

in 

comp 

breaking  property  ensures  that  F  :  D  D 
again  t o t a l. 

is 

Now  suppose 
a

'

i n a nd 
n

we  have  D 

= 
comp 

comp 

d m ay  have 

Mx  E,  D
been  obtained  by  the  above  formalization  from  flow 
chart  programs,  for  example. 
lation  o f by 
[M/  y  E'),  and  to  exhibit  R 
to  exhibit  R 

for  each  m  f  M,  m'ε  M'  where 

,  we  have  R 

is  sufficient 

is  a  simu­

comp 
it 

If  H 

comp 

i 
J 

J 

/ 
mm 

In  the  following  two  examples  we  exhibit  the  R mm 
and  also  indicate  how  the  proof  of  RF' 
FR  would 
go. 
Example  1. 
each  program  are  pairs 
t
n o d e - s e t h as  been  chosen  to 
and  {l  ," 
denote  integers  and  reals  we  have 

See  F i g u r e A s s u me  that  inputs  to 
,  state  vectors  are 
is  output.  The 
formalize 

i p l e s,  and  only  x 

f o r m a l i z e.  So  if 

to 

r

For  example,  we  may  think  of  R12  as  containing 
a ll  state-vector  pairs  attained  at  the  node-pair 

when 

are  obeyed  synchronously 

starting  from  an  input  pair  in  Rin  .  However,  it 
contains  also  many  other  state-vector  pairs  (since 
there  is  no  constraint  on  x 
of  R 
generous  property.  R-13 
empty  set,  because 
never  reached. 

/ ),  and  simulation  w i ll  normally  have  this 

is  here  taken  as  the 

in  the  definition 

the  node  p a i

is 

r

To  prove  RF' 

FR  we  must  show  for  a ll 

d,d' 
and  this  may  be  done  by  cases 

which  is  a  fairly  routine  matter  using  the  defin­
itions  of  F,F',  and  we  leave  it  to  the  reader. 

Now  since  R 

indeed 
entitles  us  to  conclude 

is  a  strong  simulation,  and 
are  identities,  Theorem 

Thus  if  S 
)J( w h

:See  Figure  " ).  This  example 

Example  _. 
illustrates  simulation  between  two  programs  with 
different  data  representation.  We  describe  this 
example  in  less  detail,  to  save  space.  Each 
program  is  supposed  to  input  a  string  c,  a 
character  F  and  a  string  T,  and  to  output  the 
result  of  substituting  T 

for  P  everywhere  in 

is  the  alphabet  of  characters, 

e

is 

the  set 

handles  strings  and  characters  directly 

re  S* 
I
in 
of  strings  over  S)  and 
Program 
using  the  functions  h d , t l, 
and  the  null  string  
the  program  variables 
and  output  is  from  the  variable 
hand,  program 
represents  each  string  as  a 
segment  of  an  integer-indexed  character  array; 
on  input  the  two  input  strings  are  stored  in 
arrays  s,t  (indexed  from  1),  their  lengths  +  1 
in  integer  variables  h l . kl  and  the  character  in 

(concatenation) 
The  three  inputs  are  to 
respectively, 
.  On  the  other 

Session No.  11 Theoretical Foundations 

487 

and  output  is  the  string  ss(l),ss(2) 

ss (hh-

t

The  flowcharts  are  formalized  as  programs 
node-sets 
he  set  of  possible 

(in  our  sense)  with 
■
and  we  have  D 
comp 
values  for  the  program  variable  vector  of 
similarly  for  D' 
functions,  are  easy  but  tedious  to  define.  We 
now  exhibit  a  simulation  by  giving  R,  ,  R 
out 
the 
an  auxiliary  function  seq;  arrays  x 
integers  →  strings  defined  by 

.  F  and  F' 

and 
using 
integers  x 

and 
the  transition 

comp 

in 

programs  follow  the  same  path. 
In  Example  1  such 
a  statement  would  not  be  meaningful,but  in  Section 
5  we  show  that  a  similar  statement  has  meaning  in 
cases  more  general  then  Example 
:,  and  provides  us 
with  necessary  and  sufficient  conditions  for  the 
existence  of  a  simulation  between  two  programs. 

5.  PARTITIONED  SIMULATION 

We  now  obtain  necessary  and  sufficient 

conditions  for  the  existence  of  simulation  between 
two  programs 

and 

Definition. 

If  J 

is  any  indexing  set  ana 

respectively,  then 

D' 
comp 
pair  for  D 

are  partitions  of  D 

, 
comp 
is  a  partition 
(Of  course  any  two  domains 

,  D' 

comp 

comp 

can  have  a  partition  pair,  but  we  are  only  concerned 
with  computation  domains). 
Definition.  Computation  sequences 

agree  for 

Definition.  A  simulation  R 
if  R 

comp 

respects 

Theorem  5.1 

Now  as  in  Lxaraple  1  the  proof  of  RF' 

FR 
must  proceed  by  cases;  it  w i ll  use  certain  propert­
ies  (or  axioms)  concerning  the  string  handling 
functions,  the  array  and  integer  handling  functions 
and  the  function  seq.  We  leave  it  to  the  reader 
again.  Again,  since  R, 
in 
have  proved  that 

are  identities  we 

,  R 

out 

There  are  some  interesting  points  about  this 

correct  (See 

In  fact,  program 

It  seems  that  program 
, 

is  more 
though  this  asymmetry  was  not 
is 

example. 
(1) 
natural  than 
present  in  Example  1. 
only  a  slight  modification  of  part  of  a  real 
program  written  for  use  rather  than  as  an  example. 
In  the  process  of  proving 
using  Floyd's  technique,  I  found  that  the  assert­
ions  associated  with  parts  of  the  program  were 
most  naturally  expressed  using  the  function  seq. 
Also  (this  is  discussed  in  more  detail  in  
task  of  p r o v i n g c o r r e ct 
two  tasks  -  that  of  proving 
task  since 
programmer's  intuition)  and  that  of  proving  the 
simulation.  This  'factoring'  was  made  precise  by 
Theorem 
(2)  Unlike  in  Example  1,  the  flowcharts  here  have 
identical  shape,  and  it  is  meaningful  iand  even 
true!)  to  say  that  under  identical  inputs  the 

is  more  natural  and  closer  to 

factored  simply  into 

correct  (an  easier 

the 

488 

Session No  11  Theoretical  Foundations 

if  and  only  if  computation  s e q u e n c e s in 
t h a t RT   always 

i n s u ch 

in 
is  defined  as  m i nD 

have  length  either  both  undefined  or  equal  (the 
length  o f

out 
There  is  a  corresponding  corollary  to Theorem 
5._ , which we omit. 

Finally,  we give  a  corollary  for  flowchart 

programs  of  the  same  shape. 

'".  CONCLUSIONS AND POSSIBLE DEVELOPMENTS 

The  idea  of  simulation,  which  is  really  an 
application  of  the  notion  of  weak  homomorphism, 
is  interesting  in  two  ways: 
because  it  allows  one  to  abstract  some  irrelevant 
detail  from  programs  to  come  closer  to  a  definition 
of  algorithm,  and  practically  because  there  is  a 
manageable  technique  for  proving  simulation 
between programs, which in some cases may make 
easier  the  task  of  proving  a  program  correct. 

theoretically, 

There  are  two  possible  directions  for 
development.  First, we have restricted  to a 
single-valued,  total  transition  function  r.  The 
situation  looks  rather  different  when we  relax 
these  conditions  -  for  example we  should  consider 
computation  trees  rather  than  sequences.  Second, 
we  should  consider  simulation  of parallel  programs, 
and  treat  programs which perform the same compu(cid:173)
tations  but  not  necessarily  in  the  same  sequence 
as  serializations  of  the  same  parallel  program  -
or  of  mutually  simulating  parallel  programs.  These 
extensions  may  bear  the  same  relation  to  the work 
of  Manna  [5]  and Ashcroft  and Manna 
correctness  of  nondeterministic  and  parallel 
programs  as  the  present  paper  bears  to  Manna's 
work  on serial  programs [4] . 

on the 

Session No.  11 Theoretical Foundations 

489 

ACKNOWLEDGEMENTS 

This  work  owes  much  to  Peter  Landin  who 
largely  pioneered  the  algebraic  approach  to 
programs.  This  paper  is  in  the  spirit  of  [ 8 ], 
although  that  paper  is  concerned  with  the  structure 
of  a  single  program  (as  a  product  algebra)  rather 
I  also  had 
than  relations  between  programs. 
profitable  discussions  with  Peter  Landin,  Rod 
Burstall and  John  Laski. 

REFERENCES 

1.  Floyd,  R.W.,  "Assigning  Meanings  to  Programs", 
Proceedings  of  Symposia  in  Applied  Mathematics. 
American  Mathematical  Society,  Vol.  19,  19-32 

1967). 
Milner,  R.,  "A  Formal  Notion  of  Simulation 
Between  Programs",  Memo  14,  Computers  and 
Logic  Research  Croup,  University  College  of 
Swansea,  U.K.  (17/0). 

Milner,  R.,  "Program  Simulation:  An  Extended 
Formal  Notion",  Memo  17,  Computers  and  Logic 
Research  Group,  University  College  of  Swansea, 
U.K.  (1961). 

4 .  Manna,  Z.,  "The  Correctness  of  Programs",  J. 
of  Computer  and  Systems  Sciences,  Vol.  3,  No. 
2.  119-127 

(1969). 

S.  Manna,  Z.,  "The  Correctness  of  Non-deterministic 

Programs",  Stanford  A r t i f i c i al  Intelligence 
Project,  Memo  AI-95,  Stanford  University 
(1969). 

6.  Ashcrof  t,  E.A.,  and  Manna,  Z.,  "Formalization 
of  Properties  of  Parallel  Programs",  Stanford 
A r t i f i c i al  Intelligence  Project,  Memo  AI-110, 
Stanford  University,  (1970). 

7.  Ginzburg,  A.,  Algebraic  Theory  of  Automata. 

Academic  Press  (1968). 

8.  Landin,  P.,  "A  Program-Machine  Symmetric 
Automata  Theory",  Machine  Intelligence  5, 
ed.,  D.  Michie,  Edinburgh  University  Press, 
99-120  (1999). 

