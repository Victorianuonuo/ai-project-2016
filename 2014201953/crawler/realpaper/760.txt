A Description Logic of Change

∗

Alessandro Artale University of Bolzano, Italy
Carsten Lutz
David Toman

University of Dresden, Germany clu@tcs.inf.tu-dresden.de
University of Waterloo, Canada

artale@inf.unibz.it

david@uwaterloo.ca

Abstract

We combine the modal logic S5 with the de-
scription logic (DL) ALCQI.
The resulting
multi-dimensional DL S5ALCQI supports reason-
ing about change by allowing to express that con-
cepts and roles change over time. It cannot, how-
ever, discriminate between changes in the past and
in the future. Our main technical result is that
satisﬁability of S5ALCQI concepts with respect to
general TBoxes (including GCIs) is decidable and
2-EXPTIME-complete.
In contrast, reasoning in
temporal DLs that are able to discriminate between
past and future is inherently undecidable. We argue
that our logic is sufﬁcient for reasoning about tem-
poral conceptual models with time-stamping con-
straints.

1 Introduction

An important application of Temporal Description Logics
(TDLs) is the representation of and reasoning about tem-
poral conceptual models [Artale, 2004; Artale et al., 2003;
2002]. Knowledge captured by such models is translated
into a TDL TBox and reasoning algorithms for TDL are
then used to detect inconsistencies and implicit IS-A rela-
tions in the temporal model [Artale and Franconi, 1999;
Artale et al., 2002; Calvanese et al., 1998]. A serious obstacle
for putting this general idea to work is posed by the fact that
for many natural temporal conceptual formalisms and their
associated TDLs, reasoning turns out to be undecidable.

The most prominent witnesses of this problem are the var-
ious temporal entity-relationship (TER) models used to de-
sign temporal databases [Chomicki and Toman, 2005]. TERs
are classical ER data models extended with two additional
classes of constraints that model the temporal evolution of
data in an application domain [Spaccapietra et al., 1998].
First, timestamping constraints are used to distinguish tempo-
ral and atemporal components of a TER model. Timestamp-
ing is usually implemented by marking entities (i.e., classes),
relationships and attributes as snapshot, temporary, or unre-
stricted. The idea behind such a classiﬁcation is to express

∗The research was supported by EU IST-2005-7603 FET Project

TONES and by NSERC.

that object membership in entities, relationships, and attribute
values cannot or must change in time; this is achieved by
snapshot and temporary marks in the diagram, respectively.
Second, evolution constraints govern object migration be-
tween entities and can state, for example, that every instance
of the entity Child will eventually become an instance of the
entity Adult.

TER models with both timestamping and evolution con-
straints can be translated into the TDL DLRU S [Artale et
al., 2002]. Unfortunately, reasoning in this logic is undecid-
able. Moreover, the computational problems are not due to
the translation to TDLs: even direct reasoning in the gener-
ally less powerful TER models is undecidable [Artale, 2004].
There are two principal ways around this problem. The ﬁrst
approach restricts the application of timestamping: it allows
arbitrary timestamping of entities, but gives up timestamp-
ing of relationships and attributes (i.e., all relationships and
attributes are unrestricted). This re-establishes decidability
of TER models with restricted timestamping and evolution
constraints [Artale et al., 2002]. The second approach to re-
gaining decidability allows for full use of timestamping, but
prohibits the use of evolution constraints.

This second alternative is pursued in the current paper. We
devise a multi-dimensional description logic S5ALCQI that
is obtained by combining the modal logic S5 with the stan-
dard DL ALCQI. The S5 modality can be applied to both
concepts and roles; axioms in the TBox are, however, inter-
preted globally. This logic can be viewed as a description
logic of change: it can express that concept and role mem-
berships change in time, but does not permit discriminating
between changes in the past or future. We show that TER
models with full timestamping (i.e., timestamping on entities,
relationships, and attributes) but without evolution constraints
can be captured by S5ALCQI TBoxes.

The main contribution of this paper is to show that rea-
soning in S5ALCQI is decidable. We also pinpoint the ex-
act computational complexity by showing 2-EXPTIME com-
pleteness. Thus, adding the S5 change modality pushes the
complexity of ALCQI, which is EXPTIME-complete, by one
exponential. Our upper bound can be viewed as an extension
of the decidability result for a simpler multi-dimensional DL,
S5ALC, [Gabbay et al., 2003] which is not capable of cap-
turing TER models. However, we had to develop completely
new proof techniques as the decidability proof for S5ALC re-

IJCAI-07

218

lies on the ability to duplicate points in a model, which is im-
possible in the presence of S5ALCQI ’s number restrictions.
Our lower bound applies also to S5ALC, hence we show that
this logic is also 2-EXPTIME-complete.

The paper is organized as follows. Section 2 introduces the
logic S5ALCQI . Section 3 shows that reasoning in S5ALCQI
is decidable in 2-EXPTIME by ﬁrst providing a tree abstrac-
tion of S5ALCQI interpretations and then presenting a 2-
EXPTIME procedure that checks for the existence of such a
tree abstraction. Section 4 illustrates how S5ALCQI is able
to capture conceptual models with timestamping constraints.
Full proofs and the 2-EXPTIME lower bound can be found in
the full version of this paper [Artale et al., 2006].

2 The Logic S5ALCQI
The logic S5ALCQI combines the modal logic S5 and the
description logic ALCQI in a spirit similar to the multi-
dimensional DLs [Gabbay et al., 2003; Wolter and Za-
kharyaschev, 1999]. The syntax of S5ALCQI is deﬁned as
follows. Let NC and NR be disjoint and countably inﬁnite
sets of concept names and role names. We assume that NR
is partitioned into two countably inﬁnite sets Nglo and Nloc of
global role names and local role names. The set ROL of roles
is deﬁned as {r, r−, 3r, 3r−, 2r, 2r− | r ∈ NR}. The set of
concepts CON is deﬁned inductively as follows: NC ⊆ CON;
if C, D ∈ CON, r ∈ ROL, and n ∈ N , then the following are
also in CON: ¬C, C (cid:5) D, ((cid:2) n r C), and 3C. A TBox is
a ﬁnite set of general concept inclusions (GCIs) C (cid:6) D with
C, D ∈ CON.

An S5ALCQI -interpretation I is a pair (W, I) with W
a non-empty set of worlds and I a function assigning an
ALCQI-interpretation I(w) = (Δ, ·I,w) to each w ∈ W ,
with Δ a ﬁxed non-empty set called the domain and ·I,w
a
function mapping each A ∈ NC to a subset AI,w ⊆ Δ and
each r ∈ NR to a relation rI,w ⊆ Δ × Δ; for r ∈ Nglo we ad-
for all w, v ∈ W . We extend
ditionally require rI,w = rI,v
the mapping ·I,w
to complex roles and concepts as follows:

(r−)I,w := {(y, x) ∈ Δ × Δ | (x, y) ∈ rI,w}

(3r)I,w := {(x, y) ∈ Δ × Δ | ∃v ∈ W : (x, y) ∈ rI,v}

(2r)I,w := {(x, y) ∈ Δ × Δ | ∀v ∈ W : (x, y) ∈ rI,v}

(¬C)I,w := Δ \ C I,w

(C (cid:5) D)I,w := C I,w ∩ DI,w

((cid:2) n r C)I,w := {x ∈ Δ | (cid:2){y ∈ Δ | (x, y) ∈ rI,w

and y ∈ C I,w} ≥ n}

(3C)I,w := {x ∈ Δ | ∃v ∈ W : x ∈ C I,v}

An S5ALCQI -interpretation I = (W, I) is a model of a TBox
T iff it satisﬁes C I,w ⊆ DI,w
for all C (cid:6) D ∈ T and w ∈
W . It is a model of a concept C if C I,w (cid:7)= ∅ for some w ∈
W . A concept C is satisﬁable w.r.t. a TBox T if there exists
a common model of C and T . Note that when S5ALCQI is
considered a temporal description logic, the elements of W
correspond to time points. We do not distinguish between
global and local concept names because a concept name A
can easily be enforced to be global using the GCI A (cid:6) 2A.
The concept constructors C (cid:9) D, ∃r.C, ∀r.C, ((cid:3) n r C),
(= n r C), 2C, (cid:12), and ⊥ are deﬁned as abbreviations in the

usual way. For roles, we allow only single applications of S5
modalities and inverse. It is easily seen that roles obtained by
nesting modal operators and inverse in an arbitrary way can
be converted into an equivalent role in our simple form: mul-
tiple temporal operators are absorbed and inverses commute
with temporal operators.

The fragment S5ALC of S5ALCQI is obtained by allowing
only roles of the form r, 3r, and 2r, and replacing the con-
cept constructor ((cid:2) n r C) by ∃r.C. We note that neither
S5ALC nor S5ALCQI enjoys the ﬁnite model property: there
are concepts and TBoxes that are only satisﬁable in models
with both an inﬁnite set of worlds W and an inﬁnite domain
Δ. An example of this phenomenon is the concept ¬C and
the TBox {¬C (cid:6) 3C, C (cid:6) ∃r.¬C, ¬C (cid:6) ∀r.¬C}, with
r ∈ Nglo.

3 Reasoning in S5ALCQI
We show that in S5ALCQI , satisﬁability w.r.t. TBoxes is de-
cidable in 2-EXPTIME. For simplicity, throughout this sec-
tion we assume that only local role names are used. This can
be done w.l.o.g. as global role names can be simulated by 2r,
for r a fresh local role name. Let C0 and T be a concept and
a TBox whose satisﬁability is to be decided. We introduce
the following notation. For roles r, we use Inv(r) to denote
r− if r ∈ NR, s if r = s−, 3Inv(s) if r = 3s, and 2Inv(s)
if r = 2s. We use rol(C0, T ) to denote the smallest set that
contains all sub-roles used in C0 and T and is closed under
Inv. We use cl(C0, T ) to denote the smallest set containing
all sub-concepts appearing in C0 and T that is closed under
negation: if C ∈ cl(C0, T ) and “¬” is not the top level oper-
ator in C, then ¬C ∈ cl(C0, T ).

In the rest of this section we devise tree abstractions of
models of C0 and T which we call (C0, T )-trees. In the sub-
sequent section, we then show how to construct looping tree
automata that accept the (C0, T )-trees and thus reduce satis-
ﬁability in S5ALCQI to the emptiness problem of looping tree
automata, yielding decidability of S5ALCQI .

3.1 Tree Abstractions of S5ALCQI models
Intuitively, for a (C0, T )-tree τ that abstracts a model I of C0
and T , the root node of τ corresponds to an object x in I that
realizes C0. Successors of the root in τ correspond to objects
in I that can be reached from x by traversing a role in some
S5 world. Similarly, further nodes in τ correspond to objects
of I reachable from x by traversing multiple roles. To de-
scribe the concept and role interpretations of I in its abstrac-
tion τ , we decorate the nodes of τ with extended quasistates
as introduced in Deﬁnition 3 below. Extended quasistates are
deﬁned in terms of types and quasistates, which we introduce
ﬁrst. Intuitively, a type describes the concept memberships of
a domain element x ∈ Δ in a single S5 world.
Deﬁnition 1 (Type). A type t for C0, T is a subset of
cl(C0, T ) such that

¬C ∈ t iff C (cid:7)∈ t

C (cid:5) D ∈ t iff C ∈ t and D ∈ t

D ∈ t if C ∈ t

for ¬C ∈ cl(C0, T )
for C (cid:5) D ∈ cl(C0, T )
for C (cid:6) D ∈ T

IJCAI-07

219

We use tp(C0, T ) to denote the set of all types for C0 and T .
To describe the concept memberships of a domain element in
all S5 worlds, we use quasistates:
Deﬁnition 2 (Quasistate). Let W be a set and f : W →
tp(C0, T ) a function such that for all w ∈ W we have:

3C ∈ f (w) iff C ∈ f (v) for some v ∈ W .

We call the pair (W, f ) a quasistate witness and the set
{f (v) | v ∈ W } a quasistate.
To check whether a set of types {t1, . . . , tn} forms a valid
quasistate, we can simply check whether the pair (W, f ), with
W = {t1, . . . , tn} and f the identity function, is a quasistate
witness. Note, however, that each quasistate has many wit-
nesses.

Quasistates only abstract concept membership of a partic-
ular object in all worlds. To capture the role structure relating
objects adjacent in some S5 world in a given S5ALCQI model,
we develop the notion of a extended quasistate. Ultimately, in
the desired tree abstraction these two objects turn into a par-
ent and a child nodes; the child is then labeled by the extended
quasistate in question. Note the similarity to handling inverse
roles using the double blocking technique used in tableau al-
gorithms for ALCQI [Horrocks et al., 1999].
Deﬁnition 3 (Extended Quasistate). Let W be a set, (W, f )
and (W, g) quasistate witnesses, and h : W → rol(C0, T ) ∪
{2ε} for ε (cid:7)∈ rol(C0, T ) such that, for every r ∈ NR ∪ {s− |
s ∈ NR}:

1. if h(w) = 3r, for some w ∈ W , then h(v) = r, for

some v ∈ W ;

2. if h(w) = r, for some w ∈ W , then either h(v) = 3r

or h(v) = r, for all v ∈ W ;

3. it is not the case that h(w) = r for all w ∈ W ;
4. if h(w) = 2r, for some w ∈ W , then h(v) = 2r, for

all v ∈ W .

We call (W, f, g, h) an extended quasistate witness and the
set of triples Q(W, f, g, h) = {(f (v), g(v), h(v)) | v ∈ W }
an extended quasistate. Elements of Q(W, f, g, h) are called
extended types and etp(C0, T ) denotes the set of all extended
types for C0 and T . We say that Q(W, f, g, h) realizes a
concept C if C ∈ f (w) for some w ∈ W ; we say that
Q(W, f, g, h) is root if h(w) = 2ε for all w ∈ W .
Intuitively, given a node labeled with the extended quasistate
witness (W, f, g, h), the quasistate witness (W, f ) describes
the node which is labeled with the extended quasistate, (W, g)
describes the predecessor of this node, and h describes the
role connections between the two nodes. Conditions 1 to 4
ensure that the mapping h assigns roles in a way that respects
the semantics of modal operators. To fully understand these
conditions, note that we assume an ordering 3r ≤ r ≤ 2r
between roles which allows us to use a single role in the ex-
tended quasistate to capture all the implied roles. The dummy
role ε is intended only for use with the root object, which does
not have a predecessor.

We now introduce the concept of a matching successor.
The main difﬁculty is to properly capture the effects of qual-
iﬁed number restrictions ((cid:2) n r C) which constrain the pos-
sible combinations of extended quasistates in (C0, T )-trees:

the extended quasistates assigned to children nodes must sat-
isfy the qualiﬁed number restrictions of the parent node.
Deﬁnition 4 (Matching Successor). Let W and Γ be sets,
x /∈ Γ, and let e be a function mapping each y ∈ Γ∪{x} to an
extended quasistate witness (W, fy, gy, hy) such that gy = fx
for all y ∈ Γ. We call (W, Γ, x, e) a matching successor
witness if for all w ∈ W :

1. if ((cid:2) n r C) ∈ fx(w) and C (cid:7)∈ gx(w) or Inv(r) (cid:7)≤

hx(w) then |{y ∈ Γ | r ≤ hy(w), C ∈ fy(w)}| ≥ n,

2. if ((cid:2) n r C) ∈ fx(w), then |{y ∈ Γ | r ≤ hy(w), C ∈

fy(w)}| ≥ n − 1,

3. if ((cid:2) n r C) ∈ cl(T , C0), C ∈ gx(w), and Inv(r) ≤
hx(w), and |{y ∈ Γ | r ≤ hy(w), C ∈ fy(w)}| ≥ n − 1
then ((cid:2) n r C) ∈ fx(w),

4. if ((cid:2) n r C) ∈ cl(T , C0) and |{y ∈ Γ | r ≤

hy(w), C ∈ fy(w)}| ≥ n then ((cid:2) n r C) ∈ fx(w).

The pair (Q(W, fx, gx, hx), {Q(W, fy, gy, hy) | y ∈ Γ}) is
called a matching successor,.

We say that two matching successor witnesses are equiva-

lent if they deﬁne the same matching successor.

The intuition behind this deﬁnition is as follows: the object
x stands for a parent node (described by fx) and the set of
objects Γ for all its children (described by fy). The extended
quasistates are chosen in a consistent way w.r.t. the informa-
tion that is represented twice: the parent part of the extended
quasistates labeling the children matches the quasistate at-
tached to the parent itself (i.e., gy = fx for all y ∈ Γ). A
matching successor witness is then a witness such that the ex-
tended quasistates attached to x and to all elements of Γ can
be used to build a part of a model of C0 and T without violat-
ing any qualifying number restrictions. Also, the domain of
such a model is eventually built from the objects {x} ∪ Γ. As
already mentioned, matching successors are the most crucial
ingredient to the deﬁnition of (C0, T )-trees.
Deﬁnition 5 ((C0, T )-tree). Let τ = (N, E, G, n0) be a tu-
ple such that (N, E) is a tree with root n0 ∈ N and G a
mapping of τ ’s nodes to extended quasistates. Then τ is a
(C0, T )-tree if:

1. G(n0) realizes C0;
2. G(n0) is root;
3. for all n ∈ N , the pair (G(n), {G(m) | (n, m) ∈ E}) is

a matching successor.

Note that the matching successor witnesses induced by the
matching successors consisting of the extended quasistates
associated with a node and its children in the (C0, T )-tree do
not necessarily share the same set W . This poses a difﬁculty
when showing that (C0, T )-trees are proper abstractions of
models of C0 and T : when we want to convert such a tree
into an interpretation, we need to decide on a common set of
worlds W . This difﬁculty can be overcome using the follow-
ing lemma, which shows that we can assume that all extended
quasistate witnesses are based on sets of world W of identical
cardinality.

Lemma 6 (Compatible Matching Successor). There exists an
inﬁnite cardinal α such that the following holds: for every

IJCAI-07

220

x

w νx

y1 y2

ν1 ν2

· · ·

yl yl+1

νl νl+1

· · ·

ym−1 ym

· · ·

yn yn+1

· · · ∈ Γ

νm−1 ν

ν νn+1

· · ·

⏐
(cid:3)

world w is replaced by worlds {v1, . . . , vl}

v1

v2

vl

νx

νx
...
νx

ν1 ν

ν ν2 ν

ν νl+1

ν νl+1

νm−1

νm−1

...

...

ν

ν νl νl+1

νm−1

Figure 1: Reducing the size of a Matching Successor Witness.

matching successor witness (W, Γ, x, e), there is a matching
successor witness (W (cid:2), Γ, x, e(cid:2)) such that

• (W, Γ, x, e) and (W (cid:2), Γ, x, e(cid:2)) deﬁne the same matching

successor and;

• for all y ∈ Γ ∪ {x} and all extended types ν ∈

Q(W (cid:2), f (cid:2)

y, g(cid:2)

y, h(cid:2)

y), we have:

|{w ∈ W (cid:2) | (f (cid:2)

y(w), g(cid:2)

y(w), h(cid:2)

y(w)) = ν}| = α.

Intuitively, the Lemma is proved by replicating elements of
W a sufﬁcient number of times. When all extended quasis-
tate witnesses for a (C0, T )-tree are based on a set of worlds
of identical cardinality, we can connect these extended qua-
sistate witnesses to a model by simply permuting the set W
in an appropriate way. In this way, we can prove the difﬁcult
right-to-left direction of the following theorem.
Theorem 7. C0 is satisﬁable w.r.t. T iff a (C0, T )-tree exists.

3.2 Decidability and Complexity of S5ALCQI
We now develop an effective procedure to check whether
there exists a (C0, T )-tree for a given concept C0 and TBox
T . We also show that the procedure runs in 2-EXPTIME.
Since it is easy to see that the number of all possible match-
ing successors (q, Q) is 3-exponential, we cannot simply
generate all of them and check whether they give rise to a
(C0, T )-tree. Instead, we start by showing that if a (C0, T )-
tree exists, then there is one with slim matching successors
witnesses only, i.e., all matching successors in this tree are
witnessed by matching successor witnesses whose size is at
most exponential. In the rest of the paper, let maxC0,T =
(cid:4)

((cid:2)m r C)∈cl(C0,T ) m, and n = |cl(C0, T )|.

Lemma 8. Let (W, Γ, x, e) be a matching successor witness
for a matching successor (q, Q). Then there is a Q(cid:2) ⊆ Q and
a matching successor witness (W (cid:2), Γ(cid:2), x, e(cid:2)) for (q, Q(cid:2)) such
that: |Γ(cid:2)| ≤ n · 22n · (maxC0,T + 1), and |W (cid:2)| ≤ (1 + |Γ(cid:2)|) ·
n · 22n
We call a matching successor witness slim if it satisﬁes the
cardinality bounds given in the above Lemma. We call a
matching successor slim if it has a slim matching successor
witness.

.

To prove Lemma 8, we need to construct the required slim
matching successor witness (W (cid:2), Γ(cid:2), x, e(cid:2)) from (W, Γ, x, e).
To this end, we choose a set Γ(cid:2) ⊆ Γ and a function μ that
associates an extended type μ(y) with every y ∈ Γ(cid:2) such that

• μ(y) ∈ Q(W, fy, gy, hy) and
• if ν ∈ Q(W, fz, gz, hz) for some z ∈ Γ \ Γ(cid:2) then we

have |{y ∈ Γ(cid:2) | μ(y) = ν}| = maxC0,T + 1.

The function μ tells us which objects in Γ(cid:2) can, in every par-
ticular world w, be used to fulﬁll number restrictions that
have been originally fulﬁlled by (extended types of) objects
in Γ \ Γ(cid:2).

The set Γ(cid:2), in turn, is the basis to constructing a slim wit-
ness as it can always be chosen in a way such that |Γ(cid:2)| ≤
|etp(C0, T )|·(maxC0,T +1) ≤ n·2n ·(maxC0,T +1). Finally,
for a witness in which |Γ| is bounded as above, we can simply
eliminate superﬂuous worlds of W to obtain a slim witness.
This can be done by keeping at most |etp(C0, T )| ≤ n · 22n
worlds for each element of {x} ∪ Γ(cid:2); those worlds can be
chosen from W independently.

The crucial step of the actual construction is illustrated
in Figure 1: consider a particular world w.
In the origi-
nal witness the number restrictions in the parent object are
fulﬁlled, e.g., by the objects yl+1, . . . , yn with ym, . . . , yn
falling outside of the set Γ(cid:2). Assume ﬁrst, for simplicity,
that the objects ym, . . . , yn have been assigned a common ex-
tended type ν. We then pick objects y1, . . . , yl ∈ Γ such that
μ(y1) = · · · = μ(yl) = ν. Since n − m + 1 ≤ maxC0,T
we can always ﬁnd l ≤ maxC0,T + 1 of such objects in Γ(cid:2)
such that l = n − m + 2; follows from the deﬁnition of Γ(cid:2).
Thus we can transform the old witness to a new one as de-
picted in Figure 1. Whenever more than one extended type is
associated with ym, . . . , yn in the original witness, we simply
pick objects in Γ(cid:2) with an appropriate matching μ value and
proceed similarly to the above example. To construct a slim
matching successor witness we ﬁx the set Γ(cid:2) and apply this
transformation to all w ∈ W independently. Note that the
transformation preserves quasistates associated with all ob-
jects in Γ(cid:2) (hence all S5 modalities are preserved) and that all
number restrictions are met.

Lemma 9. There is a procedure that runs in 2-EXPTIME to

IJCAI-07

221

generate all slim matching successors.

We simply use a brute-force approach to enumerate all can-
didates for slim matching successor witnesses up to exponen-
tially sized Γ and W and test for satisfaction of the conditions
in Deﬁnition 4.

As the next step, we show that whenever a (C0, T )-tree ex-
ists, then there is a (C0, T )-tree constructed solely from slim
matching successors, i.e., (G(n), {G(m) | (n, m) ∈ E}) is
a slim matching successor for all n ∈ N . We call such a
(C0, T )-tree slim.
Lemma 10. For any C0 and T , a slim (C0, T )-tree exists
whenever a (C0, T )-tree exists.
Since the children in a slim matching successor are a subset
of the children in the original matching successor, it is easy
to convert an arbitrary (C0, T )-tree into a slim one.

Finally, to check whether a slim (C0, T )-tree exists we de-
ﬁne a looping tree automaton AC0,T that accepts exactly the
slim (C0, T )-trees. To check satisﬁability of C0 w.r.t. T , it
then sufﬁces to check whether this looping automaton accepts
at least one such tree. This observation yields a 2-EXPTIME
decision procedure for satisﬁability in S5ALCQI as the empti-
ness problem for looping tree automata is decidable in time
linear in the size of the automaton [Vardi and Wolper, 1986].
We use extended quasistates as states of the automaton
AC0,T and slim matching successors to deﬁne the transition
relation. Since C0, T -trees do not have a constant branch-
ing degree, we use amorphous looping automata which are
similar to the automata model introduced in [Kupferman and
Vardi, 2001] except that in our case the branching degree is
bounded and thus the transition relation can be represented
ﬁnitely in a trivial way.

.

Deﬁnition 11 (Looping Tree Automaton). A looping tree au-
tomaton A = (Q, M, I, δ) for an M -labeled tree is deﬁned
by a set Q of states, an alphabet M , a set I ⊆ Q of initial
states, and a transition relation δ ⊆ Q × M × 2Q
Let T = (N, E, (cid:7), r) be a tree with root r ∈ N and label-
ing function (cid:7) : N → M . A run of A on T is a mapping
γ : N → Q such that γ(r) ∈ I and (γ(α), (cid:7)(α), {γ(β) |
(α, β) ∈ E}) ∈ δ for all α ∈ N . A looping automaton A
accepts those labeled trees T for which there exists a run of
A on T.
We construct an automaton for C0 and T as follows.
Deﬁnition 12. Let C0 be a concept and T an S5ALCQI
TBox. The looping automaton AC0,T = (Q, M, I, δ) is de-
ﬁned by setting M = Q = etp(C0, T ), I := {q ∈ Q |
q realizes C0 and q is root}, and δ to the set of those tuples
(q, q, Q) such that Q ∈ 2Q
and (q, Q) is a slim matching
successor for C0 and T .
The following Lemma states that the obtained looping au-
tomata behaves as expected.
Lemma 13. τ is a slim (C0, T )-tree iff τ is accepted by
AC0,T .
It is easily seen that there are at most 2-EXP many extended
quasistates and thus AC0,T has at most 2-EXP many states.
To construct the transition function of the automaton, we
need to construct all slim matching successors which can be

done in 2-EXPTIME by Lemma 9. Since emptiness of loop-
ing automata can be checked in polynomial time, the overall
decision procedure for satisﬁability in S5ALCQI runs in 2-
EXPTIME. This holds regardless of whether numbers inside
number restrictions are coded in unary or in binary.
Theorem 14. Satisﬁability in S5ALCQI w.r.t TBoxes is de-
cidable and 2-EXPTIME-complete.

The lower bound in Theorem 14 is obtained by reducing the
word problem of exponentially space-bounded, alternating
Turing machines. Since the reduction does not use inverse
role and qualifying number restrictions, we also obtain a 2-
EXPTIME lower bound for satisﬁability on S5ALC .
Corollary 15. Satisﬁability in S5ALC w.r.t TBoxes is decid-
able and 2-EXPTIME-complete.

4 Capturing Conceptual Schemata
It is known that the TDL ALCQI U S is able to capture the
temporal conceptual model ERV T , a TER model that sup-
ports timestamping and evolution constraints, IS-A links, dis-
jointness, covering, and participation constraints [Artale et
In ERV T , timestamping is implemented using
al., 2003].
a marking approach as sketched in the introduction. The
translation of atemporal constructs is similar to the one us-
ing ALCQI U S ; see [Artale et al., 2003] for full details and
examples. In the following we brieﬂy recall the translation
of atemporal constructs and then show that S5ALCQI is sufﬁ-
cient to capture the fragment of ERV T that has timestamping
as the only temporal construct.

When translating ERV T to TDLs, entities E—denoting
sets of abstract objects—are mapped into concept names AE
and attributes P —denoting functions associating mandatory
concrete properties of entities—are mapped into roles names
rP interpreted as total functions, which is enforced by the
GCI (cid:12) (cid:6) (= 1 rP (cid:12)). In S5ALCQI , unrestricted entities and
attributes need no special treatment. Properties of snapshot
or temporary entities and attributes are captured as follows:

AE (cid:6) 2AE
AE (cid:6) 3¬AE
AE (cid:6) ∃2rP .(cid:12)
AE (cid:6) ∀2rP .⊥

snapshot entity
temporary entity
snapshot attribute
temporary attribute

Relationships—n-ary relations between abstract objects—are
translated using reiﬁcation: each n-ary relationship R is
translated into a concept name AR with n global role names
I,w
r1, . . . , rn. Intuitively, for each instance x ∈ A
R , the tuple
I,w
(y1, . . . , yn) with (x, yi) ∈ r
is a tuple in the relationship
i
R at a time point w. To ensure that every instance of AR gives
rise to a unique tuple in R, we use GCIs (cid:12) (cid:6) (= 1 ri (cid:12)),
for 1 ≤ i ≤ n. To capture snapshot relationships, we assert
AR (cid:6) 2AR, while for temporary relationships, we assert
AR (cid:6) 3¬AR in the TBox.

Note that the latter GCIs do not fully capture tempo-
rary relationships. As an example, consider the interpreta-
I,w1
tion I = ({w1, w2}, I), with Δ = {a, a(cid:2), b, c}, A
=
R
I,w1
I,w1
I,w2
{a}, A
= {a(cid:2)}, r
= {(a, b)}, r
= {(a, c)},
1
2
R
I,w2
I,w2
= {(a(cid:2), c)}. Although the GCI
= {(a(cid:2), b)}, and r
r
2
1

IJCAI-07

222

AR (cid:6) 3¬AR (expressing temporary relationships) is satis-
ﬁed, (b, c) is constantly in the temporary relationship R. This
is due to a mismatch between the models of an ERV T schema
and the models of its translation into S5ALCQI . In particu-
lar, in models of ERV T , tuples belonging to relationships are
unique while in models of the reiﬁed translation there may
be two distinct objects connected through the global roles ri
to the same objects, thus representing the same tuple (e.g.
the objects a, a(cid:2) in the above interpretation). Then, S5ALCQI
models in which the above situation occurs do not directly
correspond to any ERV T model. Similarly to [Calvanese et
al., 1999], however, it is possible to show that: (i) there are so
called safe models of S5ALCQI that are in one-to-one cor-
respondence with ERV T models, and (ii) every satisﬁable
S5ALCQI concept is also satisﬁed in a safe model. When
reasoning about ERV T schemas, we can thus safely ignore
non-safe models. An S5ALCQI interpretation I = (W, I) is
safe for an ERV T schema if, for every n-ary relationship R
reiﬁed with the global functional roles ri, and every w ∈ W ,
we have the following:

∀x, y, x1, . . . , xn ∈ Δ : ¬((x, x1) ∈ rI,w
(x, xn) ∈ rI,w

∧ (y, x1) ∈ rI,w
n ∧ (y, xn) ∈ rI,w

1

∧ . . . ∧

1

n ).

It is not hard to see that: (1) the model in the example above is
not safe, and (2) given a safe model, the above GCIs correctly
capture the temporal behavior of relationships.

5 Conclusions
This work introduces the modal description logic S5ALCQI
as a logic for representing and reasoning in temporal con-
ceptual models with timestamping constraints. A novel
technique is used to show decidability and 2-EXPTIME-
completeness for S5ALCQI . This is also the ﬁrst decidability
result that allows reasoning in temporal conceptual models
with timestamping for entities, relationships, and attributes.
Furthermore, reasoning on the less expressive logic S5ALC is
also shown to be 2-EXPTIME-complete.

This paper leaves several interesting open problems for
further investigation. The ﬁne line separating the decidable
TDLs from the undecidable ones is not fully explored: we
plan to investigate further extensions of S5ALCQI that still
enjoy decidability. Two natural candidates are S5ALCQI that
allows, in addition to S5 modalities, an irreﬂexive 2 (thus en-
abling statements about everywhere else) and S5ALCQI with
temporalized axioms (enabling TBox statements to appear in
scope of S5 operators). Another open issue concerns decid-
ability and complexity of S5ALCQI in ﬁnite models.

On the knowledge representation side, we believe that a
converse translation—from TER with full timestamping to
S5ALCQI —is also possible; this result would allow to fully
characterize the complexity of reasoning in TER with times-
tamping. The limits of the expressive power of S5ALCQI
w.r.t. various constraints that have appeared in literature on
temporal models other than timestamping also remain to be
determined.

References
[Artale and Franconi, 1999] A. Artale and E. Franconi. Tem-
In Proc. of

poral ER modeling with description logics.

the Int. Conference on Conceptual Modeling (ER’99), vol-
ume 1728 of Lecture Notes in Computer Science. Springer-
Verlag, 1999.

[Artale et al., 2002] A. Artale, E. Franconi, F. Wolter, and
M. Zakharyaschev. A temporal description logic for rea-
soning about conceptual schemas and queries. In S. Flesca,
th
S. Greco, N. Leone, and G. Ianni, editors, Proc. of the 8
Joint European Conference on Logics in Artiﬁcial Intelli-
gence (JELIA-02), volume 2424 of LNAI, pages 98–110.
Springer, 2002.

[Artale et al., 2003] A. Artale, E. Franconi, and F. Man-
dreoli. Description logics for modelling dynamic infor-
mation.
In Jan Chomicki, Ron van der Meyden, and
Gunter Saake, editors, Logics for Emerging Applications
of Databases. LNCS, Springer-Verlag, 2003.

[Artale et al., 2006] A. Artale, C. Lutz, and D. Toman. A
description logic of change. Technical report, LTCS-
Report 05-06, Technical University Dresden, 2006. see
http://lat.inf.tu-dresden.de/research/reports.html.

[Artale, 2004] A. Artale. Reasoning on temporal conceptual
schemas with dynamic constraints. In 11
Int. Symposium
on Temporal Representation and Reasoning (TIME04).
IEEE Computer Society, 2004. Also in Proc. of DL’04.

th

[Calvanese et al., 1998] D. Calvanese, M. Lenzerini, and
D. Nardi. Description logics for conceptual data modeling.
In J. Chomicki and G. Saake, editors, Logics for Databases
and Information Systems, pages 229–263. Kluwer, 1998.

[Calvanese et al., 1999] D. Calvanese, M. Lenzerini, and
D. Nardi. Unifying class-based representation formalisms.
J. of Artiﬁcial Intelligence Research, 11:199–240, 1999.

[Chomicki and Toman, 2005] J. Chomicki and D. Toman.
Temporal Databases.
In M. Fischer, D. Gabbay, and
L. Villa, editors, Handbook of Temporal Reasoning in Ar-
tiﬁcial Intelligence, pages 429–467. Elsevier Foundations
of Artiﬁcial Intelligence, 2005.

[Gabbay et al., 2003] D. Gabbay, A. Kurucz, F. Wolter, and
M. Zakharyaschev. Many-dimensional modal logics: the-
ory and applications. Studies in Logic. Elsevier, 2003.

[Horrocks et al., 1999] I. Horrocks, U. Sattler, and S. Tobies.
Practical reasoning for expressive description logics.
In
Proc. of LPAR’99, number 1705 in LNAI, pages 161–180.
Springer, 1999.

[Kupferman and Vardi, 2001] O. Kupferman and M. Y.
Vardi. On bounded speciﬁcations. In Proc. of the Int. Con-
ference on Logic for Programming and Automated Rea-
soning (LPAR’01), LNAI, pages 24–38. Springer-Verlag,
2001.

[Spaccapietra et al., 1998] S. Spaccapietra, C. Parent, and
E. Zimanyi. Modeling time from a conceptual perspective.
In Int. Conf. on Information and Knowledge Management
(CIKM98), 1998.

[Vardi and Wolper, 1986] M. Y. Vardi and P. Wolper.
Automata-theoretic techniques for modal logic of pro-
grams. Journal of Computer and System Sciences, 32:183–
221, 1986.

[Wolter and Zakharyaschev, 1999] F. Wolter and M. Za-
kharyaschev. Modal descriptiopn logics: modalizing roles.
Fundamentae Informaticae, 39:411–438, 1999.

IJCAI-07

223

