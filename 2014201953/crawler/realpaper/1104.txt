Near-Optimal Anytime Coalition Structure Generation

Talal Rahwan, Sarvapali D. Ramchurn, Viet Dung Dang, and Nicholas R. Jennings

IAM Group, School of Electronics and Computer Science,

University of Southampton, SO17 1BJ, UK

{tr03r,sdr,vdd,nrj}@ecs.soton.ac.uk

Abstract

Forming effective coalitions is a major research
challenge in the ﬁeld of multi-agent systems. Cen-
tral to this endeavour is the problem of determin-
ing the best set of agents that should participate
in a given team. To this end, in this paper, we
present a novel, anytime algorithm for coalition
structure generation that is faster than previous any-
time algorithms designed for this purpose. Our al-
gorithm can generate solutions that either have a
tight bound from the optimal or are optimal (de-
pending on the objective) and works by partition-
ing the space in terms of a small set of elements
that represent structures which contain coalitions of
particular sizes. It then performs an online heuris-
tic search that prunes the space and only considers
valid and non-redundant coalition structures. We
empirically show that we are able to ﬁnd solutions
that are, in the worst case, 99% efﬁcient in 0.0043%
of the time to ﬁnd the optimal value by the state of
the art dynamic programming (DP) algorithm (for
20 agents), using 66% less memory.

Introduction

1
Coalition formation (CF) is the coming together of distinct,
autonomous agents in order to act as a coherent grouping. It
has long been studied in cooperative game theory [Osborne
and Rubinstein, 1994] and has recently become an impor-
tant topic in multi-agent systems where a team of agents of-
ten need to maximise their individual or their collective ef-
ﬁciency. For example, agents often have to form efﬁcient
groups to buy goods in bulk or sensors have to decide on how
to group together to monitor a given area [Dang et al., 2006].
Given a set of agents 1, 2, .., i, .., a ∈ A, the CF process in-
volves three computationally challenging stages:

1. Coalition value calculation: for each subset or coalition
C ⊆ A, calculate a value v(C) indicating how beneﬁcial
that coalition would be if it was formed. Note here that
this requires processing 2a possible coalitions.

2. Coalition structure generation:

is the equivalent of
the complete set partitioning problem [Yeh, 1986].
This means computing the optimal set of coalitions

∗ = arg maxCS∈CS V (CS), where a coalition struc-
CS
ture CS ∈ CS is a partition of A into disjoint ex-
haustive coalitions, CS is the set of all such partitions
(i.e. each agent belongs to exactly one coalition), and
C∈CS v(C). The search space here is
V (CS) =
O(aa) and ω(a
2 ).

(cid:2)

a

3. Payment calculation: compute the transfers between the
agents such that they are incentivised to stay in the coali-
tion to which they are assigned. These payments will
depend on the stability concept used (e.g. Bargaining
set, Kernel, or the Core) and ﬁnding these is usually NP-
Complete.

In this paper, we focus on the coalition structure generation
problem. As in common practice in the literatrue [Sandholm
et al., 1999; Dang and Jennings, 2004], we focus on char-
acteristic function games (CFGs), where the value of every
coalition C is given using a characteristic function v(C). Up
to now, the most widely used algorithm to solve this problem
is due to [Yeh, 1986; Rothkopf et al., 1998]. Their algorithm
(which runs in Θ(3a)) is guaranteed to ﬁnd the optimal solu-
tion and is based on dynamic programming (DP). However,
the DP approach becomes impractical for agents with limited
computational power (e.g. computing the optimal CS for 20
agents requires around 3.4×109 operations). Moreover, in the
dynamic environments that we consider, agents do not typi-
cally have sufﬁcient time to perform such calculations and, in
many cases, an approach that gives a good approximation, in
a reasonable time, is more valuable.

Against this background, this paper describes a novel any-
time search algorithm that uses heuristics to to generate the
optimal or near-optimal (with a very tight bound) coalition
structure. In more detail, the algorithm works by grouping
the coalition structures according to the sizes of coalitions
they contain (which we here term a conﬁguration). For ex-
ample, coalition structures {{1},{2, 3}} and {{3},{1, 2}}
both follow the conﬁguration {1, 2}. Hence, the space of all
coalition structures is partitioned into smaller subsets where
every element of a given subset have the same conﬁgura-
tion. This is different from previous representations used
by other anytime algorithms which looked at the space of
interconnected coalition structures [Sandholm et al., 1999;
Dang and Jennings, 2004] (which necessitates searching a
much bigger portion of the space than our method in order

IJCAI-07

2365

having to maintain the list of coalitions in memory. Here, we
build upon this approach to compute coalition structure val-
ues as well.
3 Basic Deﬁnitions
We now deﬁne the basic constructs used by our algorithm.
Let CLs ∈ 2A be the list of coalitions of size s ∈ {1, 2, ..., a}
such that CL is the set of coalition lists CLs (see ﬁg-
ure 1 for the conﬁgurations for 4 agents). Moreover, let
G1, G2, ..., G|GCS| ∈ GCS be the set of all possible unique
conﬁgurations (i.e. there are no two elements with the same
coalition sizes). Then, let F : GCS → 2CS be a function
that takes a particular conﬁguration and returns all the coali-
tion structures of that conﬁguration. We will denote N as
a list where each element is a set of coalition structures of
the same conﬁguration. Formally, N is deﬁned as follows:
N = {F (G1), F (G2), ..., F (G|GCS|)}. Where appropriate
we will use N1, N2, ..., N|GCS| ∈ N to note every element
of N (see ﬁgure 1 for a graphical representation of N for 4
agents). Finally, the optimal coalition structure is noted as
In the next section, we further expand on the above
CS
notation and describe how our algorithm searches the space.

∗.

to ﬁnd only integral worst case guarantees from the optimal
solution). Now, using the list of conﬁgurations of coalition
structures and by estimating the average and upper bound of
the solutions that exist within each conﬁguration in this list,
we are able to zoom in on the best conﬁgurations after search-
ing a relatively minute portion of the search space (typically
3 × 2a−1 coalition structures). Moreover, by reﬁning the up-
per bound of every other conﬁguration after searching the
coalition structures of one conﬁguration, we are able to re-
duce the time to ﬁnd the optimal conﬁguration still further by
discarding those conﬁgurations that have a lower upper bound
than the best value found so far.

This paper advances the state of the art in the following
ways. First, we provide an anytime algorithm to compute
the optimal coalition structure that is faster than any previ-
ous (anytime) algorithm designed for this purpose. Second,
we provide a novel representation for the search space based
on coalition structure conﬁgurations. This approach permits
the selection of a solution based either on the selection of
coalition structures of particular conﬁgurations or on the time
available to ﬁnd the solution. Third, our algorithm can pro-
vide non-integral worst case guarantees on the quality of any
computed solution since it can estimate an upper bound for
the optimal solution (and improve this estimate as it searches
the space). Finally, our algorithm is empirically shown to
give solutions which are, at worst, 99% of the optimal value
in 0.0043% of the time (in seconds) it takes the DP approach
to ﬁnd the optimal value (for 20 agents).

The rest of the paper is structured as follows. Section 2
describes related work, work and section 3 details the formal
model. Section 4 details the algorithm and section 5 empiri-
cally evaluates it. Section 6 concludes.

2 Related Work
Yun Yeh’s DP algorithm (later rediscovered by Rothkopf et al.
for combinatorial auctions) is widely regarded as the fastest
algorithm for coalition structure generation and so we use it
to benchmark our algorithm. However, for the reasons out-
lined earlier, a number of researchers have sought to develop
heuristics or anytime algorithms. In particular, [Shehory and
Kraus, 1998] devised an algorithm to ﬁnd coalition structures
constrained by certain coalition sizes. However, their algo-
rithm does not guarantee to return the optimal value at any
point, nor does it provide any means of measuring the efﬁ-
ciency of the coalition structure chosen. Another approach
is to assume that only V (CS) is known (as opposed to v(C)
In this case, improving on [Sandholm et al.,
in our case).
1999], Dang and Jennings [2004] devised an algorithm that
provides guarantees of the worst case bound from the optimal.
In such algorithms, the search space consists of all coalition
structures (see section 1) even if they are given the values of
v(C). Moreover, they only guarantee integral bounds up to 3,
which means they can guarantee, in the best case, to produce a
bound which is only 33% of the optimal value. Furthermore,
as opposed to ours, their approach cannot avoid searching the
whole space, in all cases, in order to guarantee the optimal
solution. Recently, our work [Rahwan and Jennings, 2005]
reduced the time taken to cycle through these values without

Figure 1: N for 4 agents with the elements F (G) expanded.
4 Anytime Coalition Structure Generation
In this section we describe our algorithm for coalition struc-
ture generation. Its input is the set CL for which v(C) for
all C ∈ CLs and all CLs ∈ CL is given, as well as the ac-
ceptable bound β ∈ [0, 1] from the optimal value (if β = 1,
we stop when the optimal solution is found and if β = 0 any
known CS is returned). Given this, our algorithm proceeds
in three main stages. The ﬁrst is a pre-processing stage that
involves scanning the input to obtain the maximum and aver-
age values of every CLs ∈ CL. These values are then used in
the second stage which involves generating the list of unique
G ∈ GCS and selecting the element F (G) to search for CS
∗.
The third and most computationally costly stage involves de-
termining the values of the CS ∈ F (G) to ﬁnd CS
∗. We
detail each of these stages in the following subsections. Note
that, within the ﬁrst stage, a solution (the best found so far)
can be returned and its quality is guaranteed to be |A|/2 of
the optimal (i.e. 10% in the case of 20 agents).1 In either of
1This bound was proven by [Sandholm et al., 1999] as the pro-
cedure in our stage 1 equates to searching the second layer in their

IJCAI-07

2366

(cid:2)

the last two stages the optimal (i.e. β = 1) or a good enough
(i.e. β < 1) solution may be found and guarantees about the
quality of the solution can be given in cases where the second
stage completes.
4.1 Stage 1: Pre-processing
We will denote a coalition at index c in the list CL as CLc
where c ∈ 1, ...,|CL| and an agent in a coalition at index k
as C[k]. Also, the vectors containing the maximum and av-
erage value of each CLs are noted as maxs and avgs. The
pre-processing stage (detailed in algorithm 1) calculates the
maximum and average value of every CLs ∈ CL. However,
in so doing, it is also possible to search some elements of
N . To start with, it is possible to get the value of the CS
containing 1 coalition (i.e. the grand coalition {1, 2, . . . , a})
from CLa and the coalitions containing a coalitions (i.e.
{{1},{2}, . . . ,{a}} by summing up the values of all coali-
tions in CL1. These are depicted as levels 1 and 4 in ﬁgure
(cid:4)
1). We therefore note the best of these two structures as CS
since this is the most efﬁcient CS found so far.

C∈CLs

Then, for each CLs, we go through every element and
record the maximum maxs = maxC∈CLs(v(C)), as well
v(C). Moreover, it
as the average avgs = 1|CLs|
is possible to cycle through CLs and CLa−s at the same
time since a pair of elements from each of these lists forms a
coalition structure (see CL3 and CL1 in ﬁgure 1 and line 18
in algorithm 1). However, in so doing, we must ensure that
only pairs of disjoint coalitions (i.e. not containing the same
agent) are chosen to form a CS. We ensure this property is
upheld by indexing CLs as per [Rahwan and Jennings, 2005]
(see ﬁgure 1).2 This indexing mechanism actually results in
each element C ∈ CLs at index c ∈ [1, ..., s] being exactly
(cid:4) ∈ CLa−s at index |CLs| − c + 1.
matched to an element C
Moreover, at the same time, it is possible to compute, the
value of all CS that follow a conﬁguration G such that G =
{1, ..., 1, i} This is achieved by looking into each coalition
in the pair when cycling through CLs and CLa−s. For each
such coalition, we retrieve the value of the coalitions of size
1 for each element in the coalition (i.e. the coalition is split
into its constituent parts), sum these up and add them to the
value of the other coalition and vice versa (see lines 18 and
19 in algorithm 1).

In searching coalition structures in the two ways shown
above (i.e. evaluating complementary sizes and coalitions
containing 1s), we can actually search a part of the space
(which gets smaller as the a increases). This is illustrated by
ﬁgure 2 for 8 agents where the shaded conﬁgurations repre-
sent those that will be fully searched after scanning the input.
Moreover we will have already covered all coalition struc-
tures in case |A| ≤ 4 after the pre-processing stage. Since the
size of the input is of order O(2a), and the algorithm scans all
of it, then it is bound to perform at least this many operations.
The operations performed within the two loops (at lines 1 and
10 in algorithm 1) are all linear in time. Hence, the complex-
ity of the above algorithm is O(2a). Note that we cannot yet

search space.

2In [Rahwan and Jennings, 2005], we use heuristics that guaran-
tee that C as well as CLs are in ascending order lexicographically.

4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:

Require: CL, v(C) for all C ∈ CL and all CL ∈ CL, CS
1: for s = 1 to (cid:5)a/2(cid:6) do
2:
3:

= a − s

(cid:2)

(cid:2)

(cid:2)

)

(cid:2) ∈ max

(cid:2) , avgs

(cid:2) to 0, where maxs, maxs

let s
Initialise maxs, avgs, maxs
(cid:2) ∈ avg
and avgs, avgs
Initialise νmax to V (CS
if (a mod 2 = 0) & (s = a/2) then
cend ← |CLs|/2 % Because the complement of s is actually s
else
cend ← |CLs|
end if
for c = 1 to cend do

(cid:2)

(cid:2)

(cid:2)

(cid:2)

(cid:2)

)

s

s

, c

, s

to calculate

(cid:2) ← (|CLs| − c + 1), C ← CLc

(cid:2) , sums

let c
if v(C) > maxs then
maxs ← v(C)
end if
sums ← sums + v(C)
Repeat lines 12 to 15, after replacing C, c, s with C
maxs
% Calculate the values of some coalition structures in lines
17,18, and 19 below.
let ν1 ← v(C) + v(C
(cid:2)
17:
P
(cid:2)[k]
(cid:2)
k=1 v(CLa−C
let ν2 ← v(C) +
18:
P
k=1 v(CLa−C[k]
let ν3 ← v(C
19:
) +
1
20:
if max(ν1, ν2, ν3) > νmax then
νmax ← max(ν1, ν2, ν3), smax ← s, and cmax ← c
21:
22:
end if
23:
end for
avgs ← sums
24:
25: end for
max ← (a − smax), c
max ← (|CL|smax − cmax + 1)
(cid:2)
(cid:2)
26: s
27: Cmax ← (CLcmax
max ← (CL
(cid:2)
smax ), C
28: CS1 ← {Cmax, C
max}
(cid:2)
29: CS2 ← {Cmax ∪ S
S
i∈C
30: CS3 ← {C
31: return max, avg and CS

{{i}}}
{{i}}}
= arg

(cid:2)
(cid:2) ← sum
|CL
(cid:2) |
s
s

(cid:2)
max
i∈Cmax

|CLs| and avgs

(cid:2)
max
(cid:2)
max

(cid:2)
max,

max

c

s

)

)

)

CS∈{CS1,CS2,CS3,CS

(cid:2)} V (CS)

s

1

Figure 2: GCS with 8 agents where F (G) for the shaded Gs
have been searched after scanning the input.

(cid:2)

Algorithm 1: The pre-processing stage.

(cid:4) returned
guarantee that the best CS found so far (i.e. CS
∗ since we have not yet ensured that all
by algorithm 1) is CS
other unsearched conﬁgurations (i.e. other than the ones with
two elements and those with repeated coalitions of size 1)
(cid:4)). Having obtained the values
have a value lower than V (CS
of the maximum and average of every coalition list, as well as
(cid:4) found so far, we next describe
the best possible solution CS
how to construct GCS and how to choose which element in N
to search.

IJCAI-07

2367

4.2 Stage 2: Constructing and Choosing

Conﬁgurations

for

√

It is crucial that the algorithm ﬁnds the F (G) which con-
tains the CS we seek (which is not necessarily optimal) as
quickly as possible (since N is large). There are two possible
ways of doing this. First, we can choose those conﬁgurations
to search which are most likely to contain the optimal value
and, at the same time, allow us to prune the search space in
case the optimal is not found. Second, by updating the max-
(cid:4) with more precise information
imum value of every other G
gathered from previously searched G, it is possible to further
prune the search space. Before carrying out these operations,
however, it is necessary that we ﬁrst identify all possible con-
ﬁgurations in GCS.
Constructing Unique Conﬁgurations in GCS. The set
the integer parti-
of all conﬁgurations is equal
tions that can be generated for the number of agents
|A|
the num-
ber 5,
the possible integer partitions or conﬁgurations
G is {5},{4, 1},{3, 2},{3, 1, 1},{2, 2, 1},{2, 1, 1, 1}, and
{1, 1, 1, 1}. The growth rate of the set of conﬁgurations is
2a/3/a) (which is much lower than that
known to be Θ(eπ
of the input i.e. O(2a)) where a is the number to be parti-
tioned. Fast recursive algorithms to generate such partitions
already exist and we chose a standard algorithm from [Kreher
and Stinson, 1999] to do so.

For example,

[Skiena,

1998].

to all

Having obtained all possible conﬁgurations and given that
we have computed all the maximum and average values of
each coalition size in the pre-processing stage, it is now pos-
sible to calculate the upper bound (U BG), and average value
(AV GG) of every G corresponding to F (G) ∈ N as well.
This can be achieved by cycling through F (G) and sum-
ming up the maximum and average values for every coalition
size in the conﬁguration. For example, for a conﬁguration
G = {1, 2, 4}, we obtain U BG = max1 + max2 + max4
and AV GG = avg1 + avg2 + avg4 (which is actually the
minimum3 value that a coalition structure with that conﬁgu-
ration can take). Moreover, for those sizes that are repeated,
we can use the second best, third best, and so on until the end
of the list. For example, for a conﬁguration {2, 2, 1, 1, 1},
we would sum the maximum of CL2 with the second best
of CL2 and the maximum of CL1 with the second and third
best of CL1. This procedure gives us a more precise U B for
the element, but requires searching the coalition lists for these
values (which are not ordered in the input) which for size s is
(a−s)!s!. The latter grows very quickly with s and since most
elements of GCS will contain more of the smaller elements
(such as 1, 2 or 3), meaning we get more precise updates for
most of the elements. We stop at s = 3 to limit the cost of
searching values lower than maxs.
N , we compare the value V (CS

Having obtained the U BG and AV GG of all elements in
(cid:4)) found so far, with the
3This is because every element in CL appears the same num-
ber of times in all possible coalition structures of a given conﬁgura-
tion. In the case of repeated coalitions of size 1, while the coalitions
are not repeated an equal number of times at the same position in
the structure, they do repeat equally when considering all positions
where they could occur in a coalition structure.

a!

U B

(cid:4)) > U BG

(cid:2) × β for all G

(cid:4)
G (i.e. excluding previously searched conﬁgurations). If
U B
(cid:4), it means we have found
V (CS
a suitable solution. Otherwise, we proceed according to the
steps described below.
Choosing a Conﬁguration. Having computed all possible
conﬁgurations and knowing that it is possible to search each
element of N (using the search procedure described in sec-
tion 4.3), we now consider the procedure to choose the ele-
ment of N to search. First, if it is found that the AV GG for
∗
G) is
the element(s) with the highest upper bound (i.e. U B
≥ β we choose the smallest of these ele-
such that AV GG
∗
G
ments. Otherwise, we need to choose F (G) that will prune
most of the search space and, at the same time, be more
likely to contain the required solution. To do this, we need
to compute the expected gain (the amount of space that can
be avoided after searching the element) and cost in searching
each F (G) ∈ N (one time). To estimate such parameters,
we ﬁrst need to estimate arg maxCS∈F (G)(V (CS)). This
equates to the value lying between U BG and AV GG of that
element under absolute uncertainty.4 Then, we need to com-
pute, given estimates of other U Bs, the size of the space that
will be pruned as a result of the value obtained being greater
than the U Bs of other elements. This is performed for each
(cid:4) ∈ GCS /G and the one with the maximum gain is chosen
G
to be searched. The details are outlined in algorithm 2. Next
we consider how to improve our estimates of the U B which
should allow us to further reduce the space to be searched
online.
Require: GCS,U BG and AV GG for all G ∈ GCS.
≥ β} (cid:10)= ∅ where U B
1: if Gβ = {G| AV GG
∗
G = maxG∈GCS (U BG) then
∗
G
G → arg minG∈G
β (|F (G)|)
2:
3:
return G
4: end if
5: Initialise M AXgain to 0
6: for all G ∈ GCS do
+U BG
“P
7:
let Emax = AV GG
2
8:
(cid:2)∈GCS /G,U B
let Egain =
expected gain in choosing this element.
if Egain > M AXgain then

9:
10:
11:
end if
12: end for
13: return G
Algorithm 2: Selecting an element of GCS to be searched.
Updating U B. As each element of N is being searched
∗ (detailed in section 4.3), it is possible to compute
for CS
the maximum value of certain combinations of sizes or splits
(splitG ∈ 2G). These can be used then to update the U B of
elements of N in a similar way to the procedure described
in section 4.1. For example, while searching an element
with conﬁguration G = {1, 1, 1, 1, 2, 3, 4}, it is possible to
ﬁnd the maximum value of combinations such as {1, 1, 3}
or {1, 2, 3, 4} which can then be used to update the U B of
{1, 1, 1, 3, 3, 4} (and adding max1 + max3 + max4) and
{1, 2, 3, 3, 4} (and adding max3) respectively. If the U B of
4However, as the estimates of U BG become more precise, the
value is more likely to tend towards the upper bound of the element.

M AXgain ← Egain and G

% some configurations satisfy the bound

−|F (G)| % the

% the expected value.

∗ ← G

(cid:2) <Emax

U B

”

|F (G

(cid:2)

)|

G

G

∗

IJCAI-07

2368

that conﬁguration is lowered when using the split, it is up-
dated accordingly.
Since the number of splits can be as large as 2|G| (includ-
ing repeated splits), and computing the maximum value of
each of them every time we compute V (CS) can be costly.
Therefore, we only compute maximum values for those splits
whose value are not known so far. When the search starts,
every G is initialised to be split in half. Then as F (G) is
searched, the value of the splits to be tracked are computed
as V (CS) (see section 4.3). After the search is complete, all
(cid:4) ∈ GCS /G are updated with the newly tracked split. More-
G
(cid:4) add one more element from their own
over, all updated G
conﬁguration to that split to create a new split to be tracked
and remove the previous split from the list to be tracked in
case it was there. These procedures gradually increase each
G’s list of splits to be tracked when searched, but also ensure
all splits are never computed twice. Next we describe how
F (G) is searched and how the value of the coalition struc-
tures and the splits are computed.
4.3 Stage 3: Searching an Element of N
This stage is the main potential bottleneck since it could in-
volves searching a space that could possibly equal the whole
space of coalition structures (if all N is searched). How-
ever, using the heuristics described in section 4.2, we reduce
the possibility of having to search all this space (see section
5 for the impact of this reduction). Moreover, we provide
heuristics here that allow us to minimise any redundant com-
putations when cycling through this space. The latter proce-
dure builds upon our previous work [Rahwan and Jennings,
2005] and allows us to construct coalition structures that are
unique and ﬁt a particular G, and at the same time, calculate
the values of these structures. However, the main problem
in constructing coalition structures is that if the procedure is
performed na¨ıvely, repetitions will occur and cause the for-
mation of redundant, as well as invalid, coalition structures.
Now, there are two main types of repetitions that can occur.
First, a structure could contain coalitions that have the same
agent(s) in different coalitions (i.e. overlapping coalitions)
and this would render the CS invalid. Second, two struc-
tures could actually contain the same coalitions. This can
happen when the conﬁguration requires multiple coalitions
of the same size such that the same coalition appears at dif-
ferent positions (since elements in G are in ascending order).
Our procedure, described below, avoids both types.
Let Ck ∈ G be a coalition located at position 1 ≤ k ≤ |G|
≤ (cid:4)Ai+1
of G, and let (cid:4)Ak be a vector of agents (cid:4)Ak (where (cid:4)Ai
)
k
from which the members of Ck can be selected. Finally, let
Mk : |Mk| = |Ck| be a temporary array that will be used
to cycle through all possible instances of Ck. The use of
Mk here is mainly to show that we do not need to keep in
memory all the coalition structures that can be constructed
(although we do need to cycle through all of the coalition
structures in N). Instead, we just need to maintain in mem-
ory one structure at a time. Since we do not maintain the
complete history of computed solutions, our algorithm has a
memory requirement of O(2a) (i.e. the size of the input) as
opposed to the DP algorithm’s O(2alog23) (see [Yeh, 1986;
Sandholm et al., 1999]) and hence our algorithm would take

k

Figure 3: Composing a coalition structure for 7 agents with
conﬁguration G = {2, 2, 3}.

only 66% less memory than used by DP.
Avoiding Overlapping Coalitions. Basically, for C1 we use
M1 to cycle through all possible instances of C1 (i.e., through
the set of combinations of size |C1| taken from the set (cid:4)A1) and
for each coalition in M1 we use M2 to cycle through all pos-
sible instances of C2 (i.e., through the coalitions of size |C2|
from the vector (cid:4)A2 = (cid:4)A1/C1), and for each of these possi-
ble coalitions, we use M3 to cycle through all the possible
instances of C3 (i.e., through the coalitions of size |C3| out of
the set: (cid:4)A3 = (cid:4)A2/C2), and so on, for every k = 1, ...,|G|. In
so doing, we avoid repeating the agents (i.e., we avoid having
coalition structures such as: {{1, 2},{2, 3}}) in any coalition
ﬁtting the conﬁguration G. Moreover, we use the fast index-
ing techniques provided by our previous work [Rahwan and
Jennings, 2005] to search all instances of Ck.5
Avoiding Redundant Coalition Structures.
Redun-
such as {{1, 2},{3, 4}} and
dant coalition structures,
{{3, 4},{1, 2}}, are only possible when we have repeated
coalition sizes in the conﬁguration (e.g G = {1, 2, 2, 3} or
G = {1, 4, 4, 4, 6}). Formally, this can only happen when
|Ck| = |Cj| where k (cid:8)= j. Now, since (cid:4)Ak is ordered in an as-
cending fashion (see ﬁgure 3), and since we use Mk to cycle
through combinations of {1, 2, ...,|G|} (which ensures that
the combinations are always in an ascending order), we can
k) as a key
use the smallest element in the coalition (i.e., C 1
to identify the coalitions that we have already gone through.
In more detail, as in [Rahwan and Jennings, 2005], Mk will
initially go through the coalitions that contain 1 (see bottom
of left-most column in ﬁgure 3), and this points to the ﬁrst
(smallest) element in (cid:4)Ak. Since (cid:4)Ak+1 = (cid:4)Ak/Ck, then the
smallest element in Ck+1 must be greater than the smallest
element in Ck (i.e. C 1
k), and this ensures that Ck+1 can never
be equal to a previous instance of Ck (particularly in the case
where |Ck+1| = |Ck|).
After Mk has cycled through the coalitions that contain
1, we move on to coalitions that do not contain 1, but con-
k ∈ Mk represents an index that
points to the required agent in (cid:2)Ai (i.e., the required agent is (cid:2)AM i
),
while in [Rahwan and Jennings, 2005], M i
k represents the actual
agent.

5Here, the difference is that M i

k

i

IJCAI-07

2369

tain 2 (see ﬁgure 3 where the arrow moves from elements
starting with one and goes up). This means the smallest ele-
ment in Ck is the second smallest element in (cid:4)Ak and, since
(cid:4)Ak+1 = (cid:4)Ak/Ck, the smallest element in Ck+1 might ac-
tually be the smallest element of (cid:4)Ak. This would, in turn,
certainly lead to a repeated coalition structure, because we
have already been through the coalition structures that con-
tain two coalitions of size |Ck|, where one of them contains
(cid:4)A1
k, and the other does not. In order to avoid this repetition,
Mk+1 needs to cycle through the combinations starting with
2, instead of those starting with 1 (i.e. see that only the top
three boxes in the second column in ﬁgure 3 are connected to
the second box, from the bottom, in the ﬁrst column). Thus,
when Mk cycles through the combinations that do not contain
elements 1, ..., (j − 1), but contain element j, Mk+1 should
cycle through the combinations starting with j and higher val-
ues. This is repeated until we reach the combinations that do
(cid:3) − |Ck+1| + 1, and that is because Mk+1
not contain
cannot contain a combination in which the smallest value is
greater than this value. Similarly, if we have more than two
coalitions of the same size in a coalition structure (i.e., if we
have Ci = Ci+1 = ... = Ci+x), then we repeat the same pro-
cedure until we reach the combinations that do not contain
(cid:3)
(cid:3)
(cid:3) (cid:4)Ai+x

(cid:3) − |Ci+x| + 1.

(cid:3)
(cid:3)
(cid:3) (cid:4)Ak+1

(cid:3)
(cid:3)

(cid:3)
(cid:3)

While cycling through every C using Mk, note that we
also retrieve v(C) and add these as we go through increas-
ing values of k. In so doing we can also compute the value
of splits that need to be tracked for that conﬁguration (as dis-
cussed earlier). This can easily be done by keeping track of
the maximum value of the coalition sizes dictated by the split.
Moreover, if the algorithm ﬁnds a coalition structure that has
the required value (i.e. either within the required bound or
equal to U BG) then it stops. Finally, if after searching all el-
ements of a particular G, the value of the best coalition struc-
(cid:4) ∈ GCS /G,
ture found so far is higher than the U BG
then we guarantee this is the optimal value. We summarise
all the procedures described in section 4 in algorithm 3 and
show how this leads to computing the optimal (or required)
value.
Sketch of Proof of Correctness. The algorithm generates all
unique and valid solutions as described above. The algorithm
is guaranteed to terminate with a solution since it gradually
removes invalid conﬁgurations (in step 14), and searches re-
maining valid ones for the optimal coalition structure, after
which it discards these conﬁgurations (in step 6) until the set
of conﬁgurations is empty (as in step 20).

(cid:2) ∀G

5 Empirical Evaluation
Having described all the parts of our algorithm, we now seek
to evaluate its effectiveness by comparing it against the DP
approach outlined earlier.
In our experiments, the coali-
tion values (i.e. v(C)) are randomly selected and scaled
by the size of the coalition (similar to the distribution of
values used by [Larson and Sandholm, 2000]), thus rep-
resenting the case where coalitions of bigger sizes have,
on average, values that are higher than smaller ones. We
recorded the time taken by our algorithm to ﬁnd the re-

2: return CS
3: set vmax = V (CS
4: repeat
5:
6:
7:

else

(cid:2)

CS/F (GCS ), CS
maxG∈GCS (U BG) % see algorithm 1 and section 4.1.

Require: CL,v(C)∀C ∈ CL, β ∈ [0, 1]
1: Initialise N , U BG,
(cid:2))
∗ ≥ β
) % keep track of the maximum value.

if V (CS
(cid:2)
U B

splits

=

(cid:2)(cid:2)

(cid:2)

∗

,U B

=

(cid:2) where G

CS
if V (CS

← GCS /G

% discard this element for the next

Select G according to algorithm 2.
GCS
iteration.
CSG = arg maxCS∈F (G)(V (CS)) and update all v(splitG
U BG
G, update the value of splits, and the upper bound of other
elements of GCS -- see section 4.3.
if V (CSG) > vmax then

(cid:2) ) and
(cid:2) ∈ GCS % find the coalition structure in this

(cid:2))
∗ ≥ β then % if we have reached β

(cid:2) ← CSG % set the best coalition to this one.

U B
return CS
vmax ← V (CSG) % set the new lower bound
GCS ← {GCS /G
if GCS = ∅ then
return CS
end if

8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20: until GCS = ∅
21: return CS
Algorithm 3: The near-optimal anytime coalition structure
generation algorithm.

) < vmax, ∀G

% the optimal structure.

% the optimal structure.

(cid:2) ∈ GCS}

∗ ← CS

∗ ← CS

(cid:2)|U B(G

(cid:2)

end if

end if

(cid:2)(cid:2)

(cid:2)

quired value which, in the worst case, lies between 95% and
100% of the optimal (i.e. β ∈ [0.95, 1]). By worst case,
we mean that the value selected will be, at worst, equal to
β × V (CS
∗). Thus, it may happen that we ﬁnd the optimal
solution, while only searching for a less efﬁcient one. We
choose to benchmark against the DP approach since the other
existing anytime algorithms (i.e. [Dang and Jennings, 2004;
Sandholm et al., 1999]) only provide integral bounds and
always need to search the whole search space to guaran-
tee optimality. Hence, our algorithm is the ﬁrst to establish
a benchmark for anytime heuristic algorithms that generate
non-integral bounds and which do so without always needing
to search the whole space of solutions.

Here we focus on two experiments to show that our algo-
rithm ﬁnds good enough solutions much faster than the DP
approach takes to ﬁnd the optimal and that the time taken
to ﬁnd near-optimal solutions decreases to a lower gradient
as the number of agents increases. In order to test this, we
recorded the time taken for various degrees of optimality
sought (from 0.95 to 1) using our algorithm and compared
them to the corresponding DP performance (see ﬁgure 4).6
As can be seen, the time taken by our algorithm in the case
where it searches for the optimal (i.e. efﬁciency 1) increases
exponentially faster by a samll constant factor greater than
the DP algorithm and even performs better for small num-
bers of agents (less than 14). Moreover, when the algorithm
seeks an efﬁciency below 1, it ﬁnds the solution much faster
than the DP algorithm and this difference grows exponen-
tially with increasing numbers of agents (since it searches a
much smaller space than 3a). This implies that the trade-off

6We computed the average over 100 runs on a 3GHz Intel Xeon
CPU with 2GB of RAM and computed the 95% conﬁdence intervals
which are plotted as error bars on the graph. For 16 and more agents,
we extrapolated the graph only for the case where β = 1.

IJCAI-07

2370

space (3 × 2a−1). Our solution relies on a number of tech-
niques to achieve this. First, we use a novel representation of
the search space based on conﬁgurations of coalition struc-
tures. Second, we are able to cycle through the list of coali-
tion structures without creating any redundant or invalid ones.
Altogether, these techniques have enabled us to reach a 99%
efﬁcient solution in 0.0043% of the time to compute the op-
timal coalition structure using the DP approach for 20 agents
(for larger numbers of agents, this improvement will be ex-
ponentially bigger). Moreover, our approach also uses 66%
less memory than the DP approach. Future work will look at
different coalition value distributions and identifying the the-
oretical bound established by searching elements of N using
our technique.

Acknowledgements
This research was undertaken as part of the ALADDIN (Au-
tonomous Learning Agents for Decentralised Data and Information
Systems) project and is jointly funded by a BAE Systems and EP-
SRC (Engineering and Physical Research Council) strategic part-
nership. We also thank the anonymous reviewers for their valuable
comments.

References
[Dang and Jennings, 2004] V. D. Dang and N. R. Jennings. Gen-
erating coalition structures with ﬁnite bound from the optimal
guarantees. In AAMAS, pages 564–571, 2004.

[Dang et al., 2006] V. D. Dang, R. K. Dash, A. Rogers, and N. R.
Jennings. Overlapping coalition formation for efﬁcient data fu-
sion in multi-sensor networks. In 21st National Conference on
AI (AAAI, pages 635–640, 2006.

[Kreher and Stinson, 1999] D. L. Kreher and D. R. Stinson. Com-
binatorial Algorithms: Generation, Enumeration, and Search.
CRC Press, Boca Raton, 1999.

[Larson and Sandholm, 2000] K. Larson and T. Sandholm. Any-
time coalition structure generation: an average case study. J. Exp.
Theor. Artif. Intell., 12(1):23–42, 2000.

[Osborne and Rubinstein, 1994] M. J. Osborne and A. Rubinstein.
A Course in Game Theory. MIT Press, Cambridge MA, USA,
1994.

[Rahwan and Jennings, 2005] T. Rahwan and N. R. Jennings. Dis-
tributing coalitional value calculations among cooperative agents.
In AAAI, pages 152–159, 2005.

[Rothkopf et al., 1998] M. H. Rothkopf, A. Pekec, and R. M.
Harstad. Computationally manageable combinatorial auctions.
Management Science, 1998.

[Sandholm et al., 1999] T. Sandholm, K. Larson, M. Andersson,
O. Shehory, and F. Tohm´e. Coalition structure generation with
worst case guarantees. Artif. Intelligence, 111(1-2):209–238,
1999.

[Shehory and Kraus, 1998] O. Shehory and S. Kraus. Methods for
task allocation via agent coalition formation. Artif. Intelligence,
101(1-2):165–200, 1998.

[Skiena, 1998] S. S. Skiena.

The Algorithm Design Manual.

Springer-Verlag, New York, 1998.

[Yeh, 1986] D. Yun Yeh. A dynamic programming approach to the

complete set partitioning problem. BIT, 26(4):467–474, 1986.

Figure 4: Average time taken for β ∈ [0.95, 1].

between the quality of the solution and the time taken gradu-
ally decreases for increasing numbers of agents (112.5ms for
a = 20,β = 0.99 v/s 2594942ms for DP i.e. 0.0043% of
the time taken by DP). To understand why this happens, we
recorded the percentage of the space that is searched in the
worst case for increasing numbers of agents.

Figure 5: Percentage of the space searched in the worst case.

As ﬁgure 5 shows, the percentage of the space searched
in the worst case to ﬁnd the optimal solution as well as for
β < 1, decreases very rapidly as the number of agents in-
creases. This shows that we actually ﬁnd the solution mostly
after scanning the input (see section 4.1) and that has a com-
putational complexity of O(2a)! A possible reason for this
result is the distribution of coalition values. Since we use a
uniform distribution to generate such values, we expect coali-
tion structure values within each F (G) ∈ N to follow a sim-
ilar distribution (piece-wise linear in most cases) such that
the upper bound calculated for each conﬁguration is relatively
close to the actual maximum value that can be found within
an F (G). Hence, it is possible to ﬁnd an approximately opti-
mal value fairly quickly by choosing a F (G) with a very high
U BG (which our algorithm does). We will further investigate
this result in future work and test this hypothesis by trying out
other distributions and using probabilistic techniques.

6 Conclusions
We have shown that it is possible to come up with near-
optimal solutions for extremely large search spaces of coali-
tion structures by examining only a minute portion of the

IJCAI-07

2371

