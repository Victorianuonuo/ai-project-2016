From Answer Set Logic Programming to

Circumscription via Logic of GK

Fangzhen Lin and Yi Zhou

Department of Computer Science

Hong Kong University of Science and Technology

Clear Water Bay, Kowloon, Hong Kong

Abstract

We ﬁrst provide a mapping from Pearce’s equilib-
rium logic and Ferraris’s general logic programs to
Lin and Shoham’s logic of knowledge and justiﬁed
assumptions, a nonmonotonic modal logic that has
been shown to include as special cases both Reiter’s
default logic in the propositional case and Moore’s
autoepistemic logic. From this mapping, we obtain
a mapping from general logic programs to circum-
scription, both in the propositional and ﬁrst-order
case. Furthermore, we show that this mapping can
be used to check the strong equivalence between
two propositional logic programs in classical logic.

Introduction

1
Answer Set Programming (ASP) is a new paradigm of
constraint-based programming based on logic programming
with answer set semantics [Niemel¨a, 1999; Lifschitz, 1999;
Marek and Truszczynski, 1999].
It started out with nor-
mal logic programs, which are programs that can have nega-
tion but not disjunction. Driven by the need of applica-
tions, various extensions have been proposed. These include
disjunctive logic programs [Gelfond and Lifschitz, 1991;
Leone et al., 2006], nested expressions [Lifschitz et al.,
1999], cardinality and weight constraints [Niemel¨a; and Si-
mons, 2000], and others. Recently, Ferraris [2005] proposed
to view formulas in propositional logic as logic programs
and showed that they include as special cases all the above
mentioned classes of logic programs. In particular, Ferraris
[2005] provided a stable model semantics for these formu-
las using a transformation similar to the original Gelfond-
Lifschitz transformation, and showed that this semantics co-
incides with Pearce’s equilibrium logic [Pearce, 1997].

In this paper, we show that this general stable model
semantics can be embedded in Lin and Shoham’s logic
of knowledge and justiﬁed assumptions [Lin and Shoham,
1992], aka logic of GK. Besides showing the generality of Lin
and Shoham’s logic, which was proposed as a general logic
for nonmonotonic reasoning, this embedding allows us to ob-
tain a way to check in classical propositional logic whether
any given two logic programs are strongly equivalent in al-
most the same way as in [Lin, 2002]. It also allows us to ob-
tain a mapping from general logic programs to propositional

circumscription in the same way as Lin and Shoham [1992]
did for mapping normal logic programs to circumscription.
As it turned out, this mapping, when extended to ﬁrst-order
case, yields a semantics to ﬁrst-order general logic programs
that is similar to the one proposed recently by Ferraris et al.
[2007].

We ﬁrst brieﬂy review Lin and Shoham’s logic of GK,
Ferraris’s general logic programs, and Pearce’s equilibrium
logic.

2 Logic of GK
The language of the logic of GK is a modal propositional lan-
guage with two modal operators, K, for knowledge, and A,
for assumption. Given a set Atom of atoms (also called vari-
ables or primitive propositions), formulas in the logic of GK
are deﬁned inductively below in BNF notation:
F ::= ⊥ | p | K(F ) | A(F ) | ¬F | F ∧ F | F ∨ F | F → F,
where p ∈ Atom, and ⊥ is a constant standing for falsity.
Formulas without modal operators are called base formulas.
The semantics of the logic of GK is deﬁned through
Kripke interpretations. A Kripke interpretation M is a tu-
ple (cid:7)W, π, RK, RA, s(cid:8), where W is a nonempty set whose
elements are called possible worlds, π a function that maps
a possible world to a truth assignment on Atom, RK and
RA binary relations over W representing the accessibility re-
lations for K and A, respectively, and s ∈ W , called the
actual world of M. The satisfaction relation |= between a
Kripke interpretation M = (cid:7)W, π, RK, RA, s(cid:8) and a formula
F is deﬁned inductively as follows:

• M (cid:9)|= ⊥;
• M |= p if π(s)(p) = 1, where p ∈ Atom;
• M |= ¬F iff M (cid:9)|= F ;
• M |= F ∧ G iff M |= F and M |= G;
• M |= F ∨ G iff M |= F or M |= G;
• M |= F → G iff M (cid:9)|= F or M |= G;
• M |= K(F ) iff (cid:7)W, π, RK, RA, w(cid:8) |= F for any w ∈
• M |= A(F ) iff (cid:7)W, π, RK, RA, w(cid:8) |= F for any w ∈

W , such that (s, w) ∈ RK;
W , such that (s, w) ∈ RA.

IJCAI-07

441

We say that a Kripke interpretation M is a model of a for-
mula F if M satisﬁes F . In the following, given a Kripke
interpretation M, we let

K(M) = {F | F is a base formula and M |= K(F )}
A(M) = {F | F is a base formula and M |= A(F )}.

Notice that K(M) and A(M) are always closed under clas-
sical logical entailment. In the following, for any set X of
formulas, we let T h(X) be the logical closure of X under
classical logic.
Deﬁnition 2.1 (GK Models) Given a formula F , a Kripke
interpretation M is a minimal model of F if M is a model of
F and there does not exist another model M1 of F such that
A(M1) = A(M) and K(M1) ⊂ K(M). We say that M is
a GK model1 if M is a minimal model of F and K(M) =
A(M).

Lin and Shoham showed that the logic of GK can be used
to capture Reiter’s default logic [Reiter, 1980] and Moore’s
auto-epistemic logic [Moore, 1985]. As a consequence, nor-
mal logic programs under stable model semantics can be cap-
tured in the logic of GK as well. Speciﬁcally, they showed
that a normal rule

r ← p1, ..., pn, not q1, ..., not qm

can be translated into the following sentence in the logic of
GK:

Kp1 ∧ ··· ∧ Kpn ∧ ¬Aq1 ∧ ··· ∧ ¬Aqm → Kr.

(1)

They also showed that this translation extends to disjunction
logic programs.

In this paper, we shall show that general logic programs
proposed by Ferraris [2005] can be captured in the logic of
GK as well.

3 General logic programs
Given a set Atom of atoms, general logic programs [Ferraris
and Lifschitz, 2005] are formulas deﬁned inductively below
in BNF notation:

F ::= ⊥ | p | F ∧ F | F ∨ F | F → F,

where p ∈ Atom. Notice that there is no negation in the
language. Instead, for any formula F , ¬F is considered to be
a shorthand for F → ⊥.
A set X ⊆ Atom of atoms can be considered as a truth

assignment in the straightforward way:

X (cid:9)|= ⊥, X |= p iff p ∈ X,

and the usual deﬁnition for the logical connectives.

The stable models of a formula (general logic program)
are deﬁned by a modiﬁed extended Gelfond-Lifschitz trans-
formation. Given a general logic program F , and a set X
of atoms, the reduct of F under X [Ferraris, 2005], written

1In [Lin and Shoham, 1992], GK models are called preferred

models.

F X, is the formula obtained from F by replacing each maxi-
mal subformula that is not classically satisﬁed by X with ⊥.
Thus for example, (¬F )X =

(cid:2) (cid:13) X |= ¬F
⊥ otherwise

Now a set X of atoms is a stable model of a general logic

program F if:
(i) X |= F X;
(ii) there is no proper subset X1 of X, such that X1 |= F X.
Example 3.1 Consider the following three general logic pro-
gram.

P = ¬p → q,
Q = ¬p ∨ p,
R = p → ¬¬p,

where p, q are atoms. The maximal subformula in P that is
false under {q} is p, thus P {q} is ¬⊥ → q, which is satisﬁed
by {q}, but not by ∅. Therefore, {q} is a stable model of P .
On the other hand, P {p} is ⊥ → ⊥, which is satisﬁed by {p}
as well as its subset ∅. Therefore, {p} is not a stable model
of P . It can be seen that {q} is the only stable model of P .
Similarly, it can be shown that Q has two stable models, {p}
and ∅, and R has exactly one stable model ∅.
4 Pearce’s equilibrium logic
Pearce’s equilibrium logic [Pearce, 1997] is based on the
logic of here-and-there, a non-classical logic. Given a set
Atom of atoms, formulas of Atom are exactly the same as
in the case of general logic programs. Thus, negation in equi-
librium logic is considered a shorthand as well.
The semantics of the logic of here-and-there is deﬁned in
terms of HT-interpretations, which are pairs (cid:7)X, Y (cid:8) of sets
atoms such that X ⊆ Y . The HT satisfaction relation2 |= be-
tween an HT-interpretation (cid:7)X, Y (cid:8) and a formula F is deﬁned
recursively as follows:

• For p ∈ Atom, (cid:7)X, Y (cid:8) |= p if p ∈ X;
• (cid:7)X, Y (cid:8) (cid:9)|= ⊥;
• (cid:7)X, Y (cid:8) |= F ∧ G if (cid:7)X, Y (cid:8) |= F and (cid:7)X, Y (cid:8) |= G;
• (cid:7)X, Y (cid:8) |= F ∨ G if (cid:7)X, Y (cid:8) |= F or (cid:7)X, Y (cid:8) |= G;
• (cid:7)X, Y (cid:8) |= F → G if
(i) (cid:7)X, Y (cid:8) (cid:9)|= F or (cid:7)X, Y (cid:8) |= G, and
(ii) Y |= F → G.

An HT interpretation (cid:7)X, Y (cid:8) is an equilibrium model of a for-
mula F if X = Y , (cid:7)X, Y (cid:8) |= F , and there is no proper subset
X1 of X, such that (cid:7)X1, Y (cid:8) |= F . Ferraris [2005] showed
that the stable models of a formula are essentially the same as
its equilibrium models.
Theorem 1 (Ferraris) Let X be a set of atoms and F a gen-
eral logic program, X is a stable model of F iff (cid:7)X, X(cid:8) is an
equilibrium model of F .

2We overload |=, and use it to stand for satisfaction relations for
modal logic, classical logic, and logic of here-and-there. Which one
it stands for should be clear from the context.

IJCAI-07

442

5 From general logic program and

equilibrium logic to the logic of GK

In this section, we present a translation from a general logic
program (also a formula in equilibrium logic) to a formula in
the logic of GK, and show that under the translation, stable
models (thus equilibrium models) coincide with GK models
in the logic of GK.

Given a general logic program F , we deﬁne two formulas

FA and FGK in the logic of GK as follows:

1. FA is obtained from F by simultaneously replacing each

atom p by Ap.

2. FGK is deﬁned inductively as follows:

• ⊥GK = ⊥;
• For p ∈ Atom, pGK = Kp;
• (F (cid:15) G)GK = FGK (cid:15) GGK ((cid:15) is ∧ or ∨).
• (F → G)GK = (FGK → GGK) ∧ (F → G)A.

It can be shown that for a normal logic program F , FGK is
equivalent to the translation by Lin and Shoahm [1992] given
in Section 2 under (cid:3)
p∈Atom

Kp → Ap,

(2)

and that for any formula W in the logic of GK, M is a GK
model of W iff M is a GK model of W ∧ (2).

This translation is also similar to the mapping from formu-
las in equilibrium logic to quantiﬁed boolean formulas given
in [Pearce et al., 2001]. We shall discuss this in more detail
in a later section.

To illustrate, consider the three programs in Example 3.1.

PGK is

((¬p)GK → qGK) ∧ (¬p → q)A,

which is equivalent (in classical logic) to

((¬pGK ∧ ¬pA) → Kq) ∧ (¬pA → qA),

which is

(¬Kp ∧ ¬Ap) → Kq) ∧ (¬Ap → Aq).

(3)
Now let M be a model of the above sentence. If p ∈ A(M),
then (3) holds no matter what K(M) is, thus its minimal
model is K(M) = T h(∅), so cannot be a GK model. Now if
p (cid:9)∈ A(M), then (3) is equivalent to (¬Kp → Kq) ∧ Aq.
Thus q ∈ A(M). Thus if M is a minimal model, then
K(M) = T h({q}). And if A(M) = K(M), then M is
a GK model. What we have shown here is that in any GK
model M of (3), K(M) = A(M) = T h({q}). The existence
of such a model is apparent.
It can be similarly shown that QGK is equivalent to Ap →
Kp, and that M is a GK model of QGK iff K(M) =
A(M) = T h({p}) or K(M) = A(M) = T h({(cid:13)}). And
RGK is equivalent to Kp → Ap, and that M is a GK model
of RGK iff K(M) = A(M) = T h({(cid:13)}). Thus for these
three programs, their GK models correspond one-to-one with
their stable models. In general, we have the following result.
Theorem 2 Let X be a set of atoms and F a general logic
program. The following three statements are equivalent.

1. X is a stable model of F .
2. (cid:7)X, X(cid:8) is an equilibrium model of F .
3. There is a GK model M of FGK such that K(M) =

A(M) = T h(X).

Proof sketch: Given a general logic program F , two set of
atoms X and Y such that X ⊆ Y and a Kripke structure M
such that K(M) = T h(X), A(M) = T h(Y ), by induction
on the structure of F , we have X |= F Y iff M |= FGK.
From this, 2 ⇔ 3 follows. By Theorem 1, 1 ⇔ 2.

6 From general logic programs and

equilibrium logic to circumscription:
propositional case

Given their mapping (1) from normal logic program to the
logic of GK, Lin and Shoham [1992] showed that stable
model semantics for normal logic programs can be captured
in circumscription [McCarthy, 1986] as follows. Given a set
Atom = {p, q, ...} of atoms, let Atom(cid:3) = {p(cid:3), q(cid:3), ...} be a
new set of atoms. Given a normal logic program F , let C(F )
be the conjunction of the sentences:

p1 ∧ ··· ∧ pn ∧ ¬q(cid:3)

1 ∧ ··· ∧ ¬q(cid:3)

m → r,

for each rule

r ← p1, ..., pn, not q1, ..., not qm

in F . Lin and Shoham [1992] showed that X is a stable model
of F iff X ∪ X(cid:3) is a model of

(p ↔ p(cid:3)) ∧ Circum(C(F ); Atom),

(cid:3)
p∈Atom

where Circum(W ; Q) is the circumscription of the atoms in
Q in W (with all other atoms ﬁxed). Lin and Shoham also
showed that this result can be extended to disjunctive logic
programs. Using the same idea, we can capture the stable
model semantics of general logic program and equilibrium
logic in circumscription as well.
Let Atom be a set of atoms. Again let Atom(cid:3) = {p(cid:3) | p ∈
Atom} be a set of new atoms. Given any general logic pro-
gram F in the language Atom, let C(F ) be the result ob-
tained from FGK by replacing every Kp in it by p and every
Ap in it by p(cid:3), for every p ∈ Atom.
Theorem 3 For any general logic program F in the lan-
guage Atom, any set X ⊆ Atom, the following four state-
ments are equivalent

1. X is a stable model of F .
2. (cid:7)X, X(cid:8) is an equilibrium model of F .
3. There is a GK model M of FGK such that K(M) =
4. X ∪ X(cid:3) is a model of

A(M) = T h(X).

(p ↔ p(cid:3)) ∧ Circum(C(F ); Atom).

(4)

(cid:3)
p∈Atom

IJCAI-07

443

Proof sketch: 3 ⇔ 4 follows from the deﬁnitions of GK
models and circumscription.

Interestingly, our translation C(F ) that embeds general
logic programs and equilibrium logic in circumscription is
exactly the same as the one by Pearce et al. [Pearce et al.,
2001] for embedding equilibrium logic in quantiﬁed boolean
formulas. They showed that (cid:7)X, X(cid:8) is an equilibrium model
of a formula F in equilibrium logic iff X(cid:3) is a model of the
following quantiﬁed boolean formula:

F (cid:3) ∧ ¬∃Atom((Atom < Atom(cid:3)) ∧ C(F )),

where F (cid:3) is the formula obtained from F by replacing every
atom p by p(cid:3), and Atom < Atom(cid:3) stands for

(p → p(cid:3)) ∧ ¬

(p(cid:3) → p).

(cid:3)
p∈Atom

(cid:3)
p∈Atom

While propositional circumscription is also a quantiﬁed
boolean formula,
it is a well studied formalism. There
are many known results about circumscription that we can
use. Mapping logic programs to circumscription helps under-
standing both formalisms.
p∈Atom(p ↔ p(cid:3)) is equivalent to
Notice that the formula

(cid:4)

(p → p(cid:3))] ∧ [

(p(cid:3) → p)].

(cid:3)
[
p∈Atom

(cid:3)
p∈Atom

(p(cid:3) → p)]∧Circum(C(F ); Atom),

(p → p(cid:3))]∧[

(cid:3)
p∈Atom

(p(cid:3) → p)]∧Circum(C(F )∧

(cid:3)
(cid:3)
Thus (4) is equivalent to
[
p∈Atom
p∈Atom
(cid:3)
which is equivalent to
[
p∈Atom
as the atoms (predicates) to be minimized occur only
(cid:4)
Putting the formula
negatively in
p∈Atom(p → p(cid:3)) into the theory in the circumscription is
good as it can be used to simplify C(F ).
p∈Atom(p → p(cid:3)) |= C(F ) ↔ W , then
Proposition 6.1 If
(4) is equivalent to(cid:3)
p∈Atom

p∈Atom(p → p(cid:3)).
(cid:4)

(p ↔ p(cid:3)) ∧ Circum(W ; Atom).

(p → p(cid:3)); Atom),

(cid:4)

Consider again the three programs in Example 3.1. For P ,
C(P ) is equivalent to ¬p ∧ ¬p(cid:3) → q, which is equivalent to
¬p(cid:3) → q under (p → p(cid:3)) ∧ (q → q(cid:3)). Thus for this program,
(4) is equivalent to

(p ↔ p(cid:3)) ∧ (q ↔ q(cid:3)) ∧ Circum(¬p(cid:3) → q;{p, q}),

which is equivalent to

(p ↔ p(cid:3)) ∧ (q ↔ q(cid:3)) ∧ ¬p ∧ (¬p(cid:3) ↔ q),

which has a unique model {q, q(cid:3)}.

For Q = ¬p ∨ p, C(Q) is equivalent to p(cid:3) → p. Thus for

this program, (4) is equivalent to

(p ↔ p(cid:3)) ∧ Circum(p(cid:3) → p;{p}),

which is equivalent to p ↔ p(cid:3), which has two models p and
¬p.

7 From general logic programs and

equilibrium logic to circumscription: ﬁrst
order case

As in [Lin and Shoham, 1992], we can extend the above map-
ping to the ﬁrst-order case. First of all, we extend logic pro-
grams to ﬁrst-order case. Let L be a relational ﬁrst-order lan-
guage with equality, i.e.
it has no proper functions. By an
atom, we mean an atomic formula including equality atoms.
In the following, let Σuna be the set of unique names as-
sumptions on constants: c1 (cid:9)= c2 for any two distinct con-
stants c1 and c2.

A ﬁrst-order general logic program is a ﬁrst-order sentence
in the following set:
F ::= ⊥ | A | F ∧ F | F ∨ F | F → F | ∀xF | ∃xF,
where A is an atom, and x a variable. Again, for any general
logic program F , ¬F is considered to be a shorthand for F →
⊥.
Now let M be a ﬁnite model of Σuna with domain D. Let
σ be the mapping from constants to D under M. Clearly, for
any distinct constants c1 and c2, σ(c1) (cid:9)= σ(c2). We say that
M is a stable model of a ﬁrst-order general logic program F
if T (M), the set of ground facts true in M:

T (M) = {P ((cid:4)u) | P a predicate, (cid:4)u ∈ P M}

(cid:4)

is a stable model of the general logic program FM , which,
called the grounding of F on M, is obtained from F and M
in two steps:

1. First, replace every constant c in F by σ(c), every
subformula of the form ∀xW in it by
u∈D W (x/u),
(cid:5)
and every subformula of the form ∃xW in it by
u∈D W (x/u), where W (x/u) is the result of replac-
ing every free occurrence of x in W by u. The order by
which these subformulas are replaced does not matter.
2. In the expression obtained by the ﬁrst step, replace every
equality atom u = u by (cid:13), and every u = u(cid:3) for distinct
u and u(cid:3) by ⊥.

Example 7.1 Consider the following four programs:

F1 = ∃xp(x) ∧ ∃x(¬p(x) → q),
F2 = ∃xp(x) ∧ [(∃x¬p(x)) → q],
F3 = ∃xp(x) ∧ [¬(∃xp(x)) → q],
F4 = ∃xp(x) ∧ ∀x(¬p(x) → q).

Now consider a structure with two elements {a, b}. The
grounding of the four programs on this domain are

(p(a) ∨ p(b)) ∧ ((¬p(a) → q) ∨ (¬p(b) → q)),
(p(a) ∨ p(b)) ∧ ((¬p(a) ∨ ¬p(b)) → q),
(p(a) ∨ p(b)) ∧ (¬(p(a) ∨ p(b)) → q),
(p(a) ∨ p(b)) ∧ (¬p(a) → q) ∧ (¬p(b) → q),

respectively. So for this domain, F1 and F3 have the same
stable models, {p(a)} and {p(b)}, and F2 and F4 have the
same stable models, {p(a), q} and {p(b), q}. It is easy to see
that this is the case for any given domain: F1 and F3 have
the same stable models, and F2 and F4 have the same stable
models.

IJCAI-07

444

logic programs can be captured in circumscription as well.

We now show that the stable models of ﬁrst-order general
Let Δ be the set of predicates in the language. Let Δ(cid:3) be a
set of new predicates, one for each P in Δ with the same ar-
ity and denoted by P (cid:3). Now given a ﬁrst-order general logic
program F , let C(F ) be the ﬁrst-order sentence deﬁned in-
ductively as follows.

• C(⊥) is ⊥.
• If W is an atomic formula, then C(W ) is W .
• C(W1 (cid:15) W2) is C(W1) (cid:15) C(W2), where (cid:15) ∈ {∧,∨}.
• C(∀xW ) is ∀xC(W ), and C(∃xW ) is ∃xC(W ).
1 → W (cid:3)
• C(W1 → W2) is (C(W1) → C(W2)) ∧ (W (cid:3)
2),
where W (cid:3) is the result of replacing every predicate P in
W by P (cid:3).

The stable models of F is then the circumscription of all
the predicates in Δ in C(F ), together with the following ax-
iom

∀(cid:4)x(P ((cid:4)x) ↔ P (cid:3)((cid:4)x)).

Theorem 4 Let M be a ﬁnite model of Σuna. M is a stable
model of F iff M(cid:3) is a model of

Circum(C(F ); Δ) ∧ (5),

where M(cid:3) is the conservative extension of M under (5).

Similar to Proposition 6.1, we have

Proposition 7.1 If
W , then (6) is equivalent to

P∈Δ ∀(cid:4)x(P ((cid:4)x) → P (cid:3)((cid:4)x)) |= C(F ) ↔

Circum(W ; Δ) ∧ (5).

Interestingly, Ferraris et al. [2007] also proposed a seman-
tics for general ﬁrst-order logic programs and showed that
their semantics is equivalent to (6) when restricted on the
predicates in the original program, that is, when all new pred-
icates P (cid:3) in (6) are existentially quantiﬁed.
Example 7.2 Consider the programs in Example 7.1

• C(F1) is

(cid:3)
P∈Δ

(cid:4)

∃xp(x) ∧ ∃x[(¬p(x) ∧ ¬p(cid:3)(x) → q) ∧ (¬p(cid:3)(x) → q(cid:3))].
which is equivalent to ∃xp(x) ∧ (¬∃xp(cid:3)(x) → q)
under ∀x.p(x) → p(cid:3)(x).
Therefore, under (5),
Circum(C(F1),{p, q}) is equivalent to

∃!xp(x) ∧ ((¬∃xp(cid:3)(x)) ↔ q),

thus equivalent to

∃!xp(x) ∧ ¬q,

• C(F2) is

which can be considered to be the ﬁrst-order semantics
of F1. If D = {a, b}, then there are exactly two models
of this sentence, {p(a)} and {p(b)}.

∃xp(x)∧(∃x(¬p(x)∧¬p(cid:3)(x)) → q)∧(∃x¬p(cid:3)(x) → q(cid:3)),
which is equivalent to

∃xp(x) ∧ (∃x¬p(cid:3)(x) → q)

∀x.p(x)

→

under
Circum(C(F2),{p, q}) is equivalent to
∃!xp(x) ∧ (∃x¬p(cid:3)(x) ↔ q),

p(cid:3)(x).

under (5), thus equivalent to

∃!xp(x) ∧ ((∃x¬p(x)) ↔ q),

Therefore,

• C(F3) is

which can be considered to be the ﬁrst-order semantics
of F2. If D = {a, b}, then there are exactly two models
of this sentence, {p(a), q} and {p(b), q}.
∃xp(x)∧(¬∃xp(x)∧¬∃xp(cid:3)(x) → q)∧(¬∃xp(cid:3)(x) → q(cid:3)),
which is equivalent to C(F1) under (5). Thus F1 and F3
are equivalent.

• C(F4) is

∃xp(x) ∧ ∀x[(¬p(x) ∧ ¬p(cid:3)(x) → q) ∧ (¬p(cid:3)(x) → q(cid:3))],
which is equivalent to C(F2). Thus F2 and F4 are equiv-
alent.

8 Strong equivalence
The notion of strong equivalence [Lifschitz et al., 2001] is
important in logic programming. For disjunctive logic pro-
grams, research by Lin and Chen [2005] and Eiter et al.
[2006] show that interesting programs transformation rules
can be designed based on the notion.

According to Ferraris and Lifschitz [2005], two general
logic programs F and G are said to be strongly equivalent
if for any formula F1 that contains an occurrence of F , F1
has the same stable models as the formula obtained from it
by replacing an occurrence of F by G. They showed that for
any F and G, they are strongly equivalent iff F and G are
equivalent in the logic here-and-there.

As it turns out, our mapping from equilibrium logic to
logic of GK also embeds logic of here-and-there to modal
logic. Thus the problem of deciding whether two programs
are strongly equivalent can be reduced to checking whether
certain modal logic formulas are valid, and that, because of
the special format of these modal formulas, can in turn be re-
duced to checking whether certain propositional formulas are
tautologies.
Theorem 5 Let F be a formula in equilibrium logic, X and
Y two sets of atoms such that X ⊆ Y , and M a Kripke inter-
pretation such that K(M) = T h(X) and A(M) = T h(Y ).
We have that (cid:7)X, Y (cid:8) |= F iff M |= FGK.
Theorem 6 Let F and G be two general logic programs. The
following conditions are equivalent.
1. F and G are strong equivalent.
2. F is equivalent to G in the logic here-and-there.
3.
4.
5.
6.
Corollary 7 The problem of deciding whether two general
logic programs are strongly equivalent is co-NP complete.

p∈Atom(Kp → Ap) |= (F ↔ G)GK.
p∈Atom(Kp → Ap) |= FGK ↔ GGK.
p∈Atom(p → p(cid:3)) |= C(F ↔ G).
p∈Atom(p → p(cid:3)) |= C(F ) ↔ C(G).

(cid:4)
(cid:4)
(cid:4)
(cid:4)

(5)

(6)

IJCAI-07

445

paradigm. In The Logic Programming Paradigm: A 25-Year Per-
spective. K.R. Apt, V.W. Marek, M. Truszczynski, D.S. Warren,
eds, Springer-Verlag, 1999.

[McCarthy, 1986] J. McCarthy. Applications of circumscription
to formalizing commonsense knowledge. Artiﬁcial Intelligence,
28:89–118, 1986.

[Moore, 1985] R. Moore. Semantical considerations on nonmono-

tonic logic. Artiﬁcial Intelligence, 25(1):75–94, 1985.

[Niemel¨a; and Simons, 2000] I. Niemel¨a; and P. Simons. Extend-
ing the smodels system with cardinality and weight constraints.
pages 491–521, 2000.

[Niemel¨a, 1999] I. Niemel¨a. Logic programs with stable model se-
mantics as a constraint programming paradigm. Ann. Math. and
AI, 25(3-4):241–273, 1999.

[Pearce et al., 2001] D. Pearce, H. Tompits, and S. Woltran. En-
codings for Equilibrium Logic and Logic Programs with Nested
Expressions. In Proc. EPIA-01: 306–320, 2001.

[Pearce, 1997] D. Pearce. A new logical characterisation of stable
models and answer sets. In Non-Monotonic Extensions of Logic
Programming: 57–70, 1997.

[Reiter, 1980] R. Reiter. A logic for default reasoning. Artiﬁcial

Intelligence, 13:81–132, 1980.

9 Conclusion
We showed that the logic of GK proposed by Lin and Shoham
is ﬂexible enough to handle stable model semantics of general
logic programs. Because of this, the stable model semantics
of general logic programs can also be formulated in circum-
scription, in both propositional and ﬁrst-order case. For fu-
ture work, we plan to make use of the expressive power of
GK in other applications.

Acknowledgments
We thank Vladimir Lifschitz for stimulating discussions on
topics related to this paper, and for his helpful comments on
earlier versions of this paper. This work was supported in part
by HK RGC under grant HKUST6170/04E, and by China
NSFC under grant 60496322.

References
[Eiter et al., 2006] T. Eiter, M. Fink, H. Tompits, P. Traxler, and S.
Woltran. Replacements in non-ground answer-set programming.
In KR’2006, pages 340–351, 2006.

[Ferraris, 2005] P. Ferraris. Answer sets for propositional theories.

In LPNMR, pages 119–131, 2005.

[Ferraris and Lifschitz, 2005] P. Ferraris and V. Lifschitz. Mathe-
matical foundations of answer set programming. In We Will Show
Them! (1), pages 615–664. 2005.

[Ferraris et al., 2007] P. Ferraris, J. Lee, and V. Lifschitz. A new
perspective on stable models. In Proceedings of IJCAI’07 (this
volume), 2007.

[Gelfond and Lifschitz, 1991] M. Gelfond and V. Lifschitz. Clas-
sical negation in logic programs and disjunctive databases. New
Generation Computing, 9:365–385, 1991.

[Leone et al., 2006] N. Leone, G. Pfeifer, W. Faber, T. Eiter, G.
Gottlob, S. Perri, and F. Scarcello. The DLV system for knowl-
edge representation and reasoning. ACM Transactions on Com-
putational Logic, 2006. To appear.

[Lifschitz et al., 1999] V. Lifschitz, L. R. Tang, and H. Turner.
Nested expressions in logic programs. Annals of Mathematics
and Artiﬁcial Intelligence, 25:369-389, 1999.

[Lifschitz et al., 2001] V. Lifschitz, D. Pearce, and A. Valverde.
Strongly equivalent logic programs. ACM Transactions on Com-
putational Logic, 2(4):526–541, 2001.

[Lifschitz, 1999] V. Lifschitz. Action languages, answer sets and
planning. In The Logic Programming Paradigm: A 25-Year Per-
spective. K.R. Apt, V.W. Marek, M. Truszczynski, D.S. Warren,
eds, Springer-Verlag, 1999.

[Lin and Chen, 2005] F. Lin and Y. Chen. Discovering classes of
strongly equivalent logic programs. In Proc. of IJCAI’95, pages
516–521, 2005.

[Lin and Shoham, 1992] F. Lin and Y. Shoham. A logic of knowl-
edge and justiﬁed assumptions. Artiﬁcial Intelligence, 57:271–
289, 1992.

[Lin, 2002] F. Lin. Reducing strong equivalence of logic programs
to entailment in classical propositional logic. In Proc. of KR’02,
pages 170–176, 2002.

[Marek and Truszczynski, 1999] V. W. Marek and M. Truszczyn-
ski. Stable logic programming - an alternative logic programming

IJCAI-07

446

