In Defense of PDDL Axioms* 

Sylvie Thiebaux 

Computer Sciences Laboratory 

The Australian National University 
Canberra, ACT 0200, Australia 
Sylvie.ThiebauxOanu.edu.au 

Abstract 

There  is  controversy  as  to  whether  explicit  sup(cid:173)
port for PDDL-like axioms and derived predicates is 
needed for planners to handle real-world domains 
effectively.  Many  researchers  have  deplored  the 
lack  of precise semantics  for such axioms,  while 
others have argued that it might be best to compile 
them away. We propose an adequate semantics for 
PDDL axioms and show that they are an essential 
feature by proving that it is impossible to compile 
them away  if we restrict the growth of plans  and 
domain descriptions to be polynomial.  These re(cid:173)
sults suggest that adding a reasonable implementa(cid:173)
tion to handle axioms inside the planner is benefi(cid:173)
cial for the performance. Our experiments confirm 
this suggestion. 

1  Motivation 
It is not uncommon for planners to support derived predi(cid:173)
cates, whose truth in the current state is inferred from that 
of some basic predicates via some axioms under the closed 
world assumption. While basic predicates may appear as ef(cid:173)
fects of actions, derived ones may only be used in precon(cid:173)
ditions,  effect  contexts  and  goals.  Planners  in  this  family 
include the partial order planner UCPOP [3], the HTN plan(cid:173)
ner SHOP [18], and the heuristic search planner GPT [4], to 
cite but a few.  The original version of PDDL [17], the Inter(cid:173)
national Planning Competition language, also featured such 
axioms and derived predicates.  However, these were never 
used in competition events, and did not survive PDDL2.1, the 
extension of the language to temporal planning [8]. 

This is unfortunate, as the lack of axioms impedes the abil(cid:173)
ity to elegantly and concisely represent real-world domains. 
Such domains typically require checking complex conditions 
which  are  best  built  hierarchically,  from  elementary  con(cid:173)
ditions on the state variables to increasingly abstract ones. 
Without  axioms,  preconditions  and effect contexts  quickly 
become unreadable, or postconditions are forced to include 
supervenient properties which are just logical consequences 
of the basic ones—that is when extra actions do not need to 
be introduced or action descriptions customised.  Moreover, 
axioms provide a natural way of capturing the effects of ac(cid:173)
tions on common real world structures such as paths or flows, 
as we then need to reason about how the transitive closure of 
*The  full  proofs  of the  theorems  appear  in  the  techreport: 

http : //csl.anu.edu.au/M;hiebaux/papers/trarp0103.pdi. 

Jorg Hoffmann and Bernhard Nebel 

Institut fur Informatik 
Universitat Freiburg 

D-79110 Freiburg, Germany 

< l a s t - n a m e > @ i n f o r m a t i k . u n i - f r e i b u r g . de 

a basic relation is affected.1  There is no intuitive way to up(cid:173)
date transitive closures in the body of a PDDL action, while 
it is easy to axiomatize them recursively by means of PDDL 
axioms (see [4] for a power flow example). 

The most common criticism of the original PDDL axioms 
was that their semantics was ill-specified, and that the condi(cid:173)
tions under which the truth of the derived predicates could be 
uniquely determined were unclear.  We remedy this by pro(cid:173)
viding a clear semantics for PDDL axioms while remaining 
consistent with the original description in [17].  In particular, 
we identify conditions that arc sufficient to ensure that the ax(cid:173)
ioms have an unambiguous meaning, and explain how these 
conditions can efficiently be checked. 

Another common view is that axioms are a non-essential 
language feature which it might be better to compile away 
than to deal with explicitly, compilation offering the advan(cid:173)
tage of enabling the use of more efficient, simple, standard 
planners without specific treatment  [10; 9; 7]. We bring new 
insight to this issue. We give evidence that axioms add signif(cid:173)
icant expressive power to PDDL. We take "expressive power" 
to be a measure of how concisely domains and plans can be 
expressed in a formalism and use the notion of compilability 
to analyse that [19].  As it turns out, axioms are an essen(cid:173)
tial feature because it is impossible to compile them away-
provided we require the domain descriptions to grow only 
polynomially and the plans to grow only polynomially in the 
size of the original plans and domain descriptions. Of course, 
if we allow for exponential growth, then compilations become 
possible and we specify one such transformation, which, un(cid:173)
like those previously published [10; 9; 7], works without re(cid:173)
striction.  However, the above mentioned results suggest that 
it might be much more efficient to deal with axioms inside the 
planner than to compile them away. In fact, our experiments 
with FF [11] suggest that adding even a simple implementa(cid:173)
tion of axioms to a planner clearly outperforms the original 
version of the planner solving the compiled problem. 

2  Syntax and Semantics 
We  remain  in  the  sequential  planning  setting  of PDDL2.1 
level 1, which is essentially that of the version of PDDL with 
ADL actions used in the 2000 planning competition.  See [2] 
for a description of the syntax. For clarity we do not consider 
types.  Although we see axioms with conditions on numeric 

!In that respect, PDDL axioms offer advantages over the use of 

purely logical axioms as in the original version of STRIPS [14]. 

PLANNING 

961 

when no derived predicate occurs negated in the NNF of the 
antecedent of any axiom, a single stratum suffices.  Several 
planning papers have considered this special case [10; 9; 7]. 
Working through the successive strata, applying axioms in 
any order within each stratum until a fixed point is reached 
and then only proceeding to the next stratum, always leads to 
the same final fixed point independently of the chosen strati(cid:173)
fication [1, p.  116].  It is this final fixed point which we take 
to be the meaning of the axiom set. 

We now spell out the semantics formally. Since we have a 
finite domain and no functions, wc identify the objects in the 
domain with the ground terms (constants) that denote them, 
and states with finite sets of ground atoms. More precisely, a 
state is taken to be a set of ground basic atoms: the derived 
ones will  be treated as elaborate  descriptions of the basic 
state. In order to define the semantics, however, we first need 
to consider an extended notion of "state" consisting of a set S 
of basic atoms and an arbitrary set D of atoms in the derived 
vocabulary. The modeling conditions for extended states are 
just the ordinary  ones of first order logic,  as though  there 
were no relationship between S and D. Where 
denotes a 
vector of variables and  denotes a vector of ground terms, 
we define: 

same state. Unlike traditional implications, these derivations 
are not to be contraposed (the negation of / is not derived 
from the negation of d), and what cannot be derived as true is 
false (closed world assumption). Because of the closed world 
assumption, there is never any need to explicitly derive neg(cid:173)
ative literals, so the constraint that the consequent of axioms 
be positive literals does not make us lose generality. 

In sum, axioms are essentially (function free) logic pro(cid:173)
gram statements [15]. For example, from the basic predicate 
on and the predicate holding in Blocks World, we can define 
the predicate clear, as follows: 

In a planning context, it is natural and convenient to re(cid:173)
strict attention to so-called stratified axiom sets—stratified 
logic programs avoid unsafe use of negation and have an un(cid:173)
ambiguous, well-understood semantics [1].  The idea behind 
stratification is that some derived predicates should first be 
defined in terms of the basic ones possibly using negation, or 
in terms of themselves (allowing for recursion) but without 
using negation. Next, more abstract predicates can be defined 
building on the former, possibly using their negation, or in 
terms of themselves but without negation, and so on. Thus, a 
stratified axiom set is partitionable into strata, in such a way 
that the negation normal form2 (NNF) of the antecedent of an 
axiom defining a predicate belonging to a given stratum uses 
arbitrary occurrences of predicates belonging to strictly lower 
strata and positive occurrences of predicates belonging to the 
same stratum. Basic predicates may be used freely. 

where 

is the set of basic predicates, 

In the following, we take a PDDL  planning domain de(cid:173)
is the 
scription to be a tuple 
set of constant symbols, 
is 
the set of derived predicates, A is a stratified axiom set as in 
Definition 1, and 
is a set of action descriptions (with the 
mentioned restriction on the appearance in atomic effects of 
A PDDL  planning instance or task is 
the symbols in 
a tuple 
is the domain description, 
and  and  are the initial state (a set of ground basic atoms) 
and goal descriptions (a formula),  respectively.  The result 
of applying an action in a (basic) state and what constitutes 
a valid plan (sequence of actions) for a given planning task 
arc defined in the usual way [2], except that the modeling re(cid:173)
lation in Definition 5 is used in place of the usual one.  By 
a PDDL domain description and planning instances we mean 
those without any axioms and derived predicates, i.e., a PDDL 
domain description has the form 

where 

We now use compilation schemes [19] to translate PDDL 
domain  descriptions  to  PDDL  domain  descriptions.  Such 
schemes are functions that translate domain descriptions be(cid:173)
tween planning formalisms without any restriction on their 
computational resources but the constraint that the target do(cid:173)
main should be only polynomially larger than the original.4 

This modeling relation is used when applying an action in 
state S to check preconditions and effect contexts, and to de(cid:173)
termine whether S satisfies the goal. This is the only change 
introduced by  the  axioms  into  the  semantics  of PDDL  and 
completes our statement  of the  semantics.  The rest carries 
over verbatim from [2]. 

when 

Checking that the  axiom  set  in  a  domain  description  is 
stratified and computing a stratification can be done in poly(cid:173)
nomial time in the size of the domain description, using Algo(cid:173)
rithm 1. The algorithm starts by building a 
matrix3 
R such that 
when it follows from the axioms that 
predicate  's stratum must be strictly lower than predicate j 's 
stratum must be lower than 
stratum, 
's stratum but not necessarily strictly, and 
when 
there is no constraint between the two strata (lines 2-15).  R 
is first filled with the values encoding the status (strict or not) 
of the base constraints obtained by direct examination of the 
axioms (lines 5-10). Then, the consequences of the base con(cid:173)
straints arc computed, similarly as one would compute the 
transitive closure of a relation (lines  11-15).  There exists a 
stratification iff the strict relation encoded in R is irreflexivc, 
V (line 16).  In that case, the 
that is iff 
stratification corresponding to the smallest pre-order consis(cid:173)
tent with R is extracted, i.e.  predicates are put in the lowest 
stratum consistent with R (lines 17-26). 
3  Axioms Add Significant Expressive Power 
It is clear that axioms add something to the expressive power 
of PDDL.  In order to determine how much power is added, 
we will use the compilability approach [19]. Basically, what 
we want to determine is how concisely a planning task can 
be represented if we compile the axioms away. Furthermore, 
we want to know how long the corresponding plans in the 
compiled planning task will become. 

for all 

By  we denote the cardinality of a set. 

PLANNING 

From a practical point of view, one can regard compilabil(cid:173)

ity preserving plan size linearly as an indication that the target 
formalism is at least as expressive as the source formalism. 
Conversely, if a super-linear blowup of the plans in the target 
formalism is required, this indicates that the source formal(cid:173)
ism is more expressive than the target formalism—a planning 
algorithm for the target formalism would be forced to gener(cid:173)
ate significantly longer plans for compiled instances, making 
it probably infeasible to solve such instances. If plans are re(cid:173)
quired to grow even super-polynomially, then the increase of 
expressive power must be dramatic. Incidentally, exponential 
growth of plan size is necessary to compile axioms away. 

4 We use here a slightly simplified definition of compilability. 
5The size of an instance, domain description, plan, etc.  is de(cid:173)

noted by 

In order to investigate the compilability between PDDL and 
PDDL  we will analyze restricted planning problems such 
as the J-step planning problem and the polynomial step plan(cid:173)
ning problem.  The former is the problem of whether there 
exists a 1-step plan to solve a planning task, the latter is the 
problem whether there exists a plan polynomially sized (for 
some fixed polynomial) in the representation of the domain 
description.*From the results on the computational complex(cid:173)
ity of pure QATALOG and DATALOG with stratified negation 
16], the next theorem is immediate. 
Theorem 1  The  1-step planning problem for PDDL 
EXPTIME-complete, even if all axioms are in pure DATALOG. 

is 

If we now consider PDDL planning tasks, it turns out that 
the planning problem is considerably easier, even if we allow 
for polynomial length plans.  Since guessing a plan of poly(cid:173)
nomial size and verifying it can easily be done in polynomial 
space, the polynomial step PDDL planning problem is obvi(cid:173)
ously in PSPACE. Taking in addition Vardi's [20] result into 
account that first-order query evaluation over a finite database 
is PSPACE-complete, hardness follows as well. 
Theorem 2 The polynomial step planning problem for PDDL 
is PSPACE-complete. 

From these two statements it follows immediately that it is 
very unlikely that there exists a polynomial time compilation 
scheme from PDDL 
to PDDL preserving plan size polyno(cid:173)
mially.  Otherwise,  it would be possible to solve all prob(cid:173)
lems requiring exponential time in polynomial space, which 
is considered as quite unlikely. As argued, however, by Nebel 
[19], if we want to make claims about expressiveness, then we 
should not take the computational resources of the compila(cid:173)
tion scheme into account but allow for computationally un(cid:173)
constrained transformations. Interestingly, even allowing for 
such unconstrained compilation schemes changes nothing. 
Theorem 3 Unless EXPTIME = PSPACE, there is no compi(cid:173)
lation scheme from PDDL (even restricted to pure DATA LOG 
axioms) to PDDL preserving plan size polynomially 
Proof Sketch. We use a proof idea similar to the one Kautz 
and Selman [13] used to prove that approximations of logi(cid:173)
cal theories of a certain size are not very likely to exist.  By 
using a DATALOG theory in order to describe all instances 
of the linearly bounded alternating Turing machine accep(cid:173)
tance problem up to a certain size, which in its general form 
is EXPTIME-complete [5], we get a polynomial advice string 
[12] if a compilation scheme from PDDL 
to PDDL preserv(cid:173)
ing plan size polynomially exists. This would imply that EX(cid:173)
PTIME 
PSPACE/poly.  However,  by Karp and Upton's 
[12] results, this implies that EXPTIME = PSPACE. 
4  Compilations with Exponential Results 
While it is impossible to find a concise equivalent PDDL plan(cid:173)
ning  instance  that guarantees  short plans,  it  is  possible  to 
come  up with a poly-size  instance which may have expo(cid:173)
nentially longer plans in the worst case.  Such compilation 
schemes have been described by e.g.  Gazen and Knoblock 
[10] and Garagnani [9] under severe restrictions on the use 
of negated derived predicates. Specifically, these schemes do 
not work if negated derived predicates appear anywhere in the 

planning task,6 and the latter scheme [9] is further restricted 
to pure DATALOG axioms. 

An interesting contrasting approach is that of Davidson and 
Garagnani [7].  They propose to compile pure DATALOG ax(cid:173)
ioms solely into conditional effects, which means that the re(cid:173)
sulting plans will have exactly the same length. However, as 
is implied by Theorem 3, their domain description suffers a 
super-polynomial growth. 

We now specify a generally applicable compilation scheme 
producing poly-size instances, which we will use as a base(cid:173)
line in our performance evaluation. In contrast to the schemes 
mentioned  above,  it complies with  the  stratified  semantics 
specified in Section 2 while dealing with negated occurrences 
of derived predicates anywhere in the planning task. 

6This remains true even if negation is compiled away as per the 

Gazen and Knoblock method [10]. 

964 

PLANNING 

encodes each stratum as an extra action stratum, (see lines 
5-15 in Figure 4) which applies all axioms 
at this stratum 
in parallel, records that this was done (done;) and whether 
anything new (new) was derived in doing so.  Each 
is 
encoded as a universally quantified and conditional effect of 
stratuml—see lines 9-15. To ensure that the precedence be(cid:173)
tween strata is respected, stratum* is only applicable when 
the fixed point for the previous stratum has been reached (i.e. 
when f ixed2_i) and the fixed point for the current stratum 
has not (i.e. when (not (fixedi)))—see line 7. f encodes the 
fixpoint computation at each stratum i using an extra action 
f i x p o i n t, which is applicable after a round of one or more 
applications of stratumt  (i.e., when donez  is true), asserts 
that the fixed point has been reached (i.e.  f i x e dj whenever 
nothing new has been derived during this last round, and re(cid:173)
sets new and don for the next round—see lines 16-21. Next, 
the precondition and effect of each action description 
are  augmented  as 
lines  22-30).  be 
the highest stratum of any derived predicate appearing in the 
precondition of o, or 0 if there is no such predicate.  Before 
applying o, we must make sure that the fixed point for that 
stratum has been computed by adding f ixed*. to the precon(cid:173)
dition. Similarly, let 1 
be the lowest stratum 
such that some predicate in the antecedent of some axiom in 
1 if there is none. 
After applying  wc may need to re-compute the fixed points 
for the strata above 
that is, the effect must reset fixed, 
done, and the value of all derived propositions, at strata 
holds initially, and the goal re(cid:173)
and above.  Finally, 
quires 
to be true.  The fact that f preserves domain 
description size polynomially, and the bounds given in theo(cid:173)
rem 4, follow directly from the construction. 

is modified in the effect of o, or 

follows 

(see 

It is obvious that a plan P for a planning task II can be 
recovered  from  a plan 
for the  compiled planning  task 
F(H), by simply  stripping all occurrences of stratum and 
fixpoint  actions. 
In  the  worst  case  of course,  there  is 
no polynomial 
.  Indeed, 
the worst-case is obtained when, initially and after each ac(cid:173)
tion from P, all derived predicates need to be (re)computed 
and only one proposition is ever derived per application of 
stratum  actions.  Even if the planner is able to interleave 
as few fixpointt actions as possible with the stratum ac(cid:173)
tions, this  still  leads  to  a plan of length 

such that 

and 

is not polynomially bounded in 

denotes the set of all instances of predicates in 

where 
Observe that 
5  Planning: With or Without Axioms? 
The absence of a polynomial time compilation scheme pre(cid:173)
serving plan size linearly not only indicates that axioms bring 
(much needed) expressive power, but it also suggests that ex(cid:173)
tending a planner to explicitly deal with axioms may lead to 
much better performance than using a compilation scheme 
with the original version of the planner.  To confirm this hy(cid:173)
pothesis, we extended the FF planner [11] with a straight(cid:173)
forward  implementation  of axioms—we  call  this  extension 
FF  —and compared results obtained by FF  on PDDL 
in(cid:173)
stances with those obtained by FF on the PDDL instances pro(cid:173)
duced via compilation with f. 

PLANNING 

transforms each axiom (: derived 

into 
an operator with parameters 
p r e c o n d i t i o n a nd 
e f f e c t w i th a flag set to distinguish it from a "normal" 
operator,  uuring the relaxed planning process that FF per(cid:173)
forms to obtain its heuristic function, the axiom actions are 
treated as normal actions and can be chosen for inclusion in 
a relaxed plan.  However, the heuristic value only counts the 
number of normal actions in the relaxed plan. During the for(cid:173)
ward search FF performs, only normal actions are considered; 
after each application of such an action, the axiom actions are 
applied so as to obtain the successive fixed points associated 
with the stratification computed by Algorithm 1. 

One  domain  we  chose  for our experiments  is  the usual 
Blocks  World (BW)  with 4  operators.  In  contrast to most 
other common benchmarks, in BW there is a natural distinc(cid:173)
tion between basic and derived predicates; in particular BW is 
the only common benchmark domain we are aware of where 
the stratification of the axioms requires more than one stra(cid:173)
tum.  The basic predicates are on and ontable, and the de(cid:173)
rived ones are above and holding (stratum  1), as well as 
clear  and  handempty  (stratum  2)  whose  axiomatisations 
use the negation of holding,  above  is only  used in goal 
descriptions.  For the experiment labelled  BW-1  in  the fig(cid:173)
ures below, we generated 30 random initial states for each 
size 
.. 10 and took the goal that any block initially 
on the table had to be above all those that were initially not. 
Note that expressing the resulting goal using on and ontable 
would require exponential space, highlighting once more the 
utility of derived predicates.  As shown in the figure, the me(cid:173)
dian run-time  of 
shows a significant improvement over 
that of FF+f. The plans found by FF+ f in this experiment were 
The 
an order of magnitude longer than those found by 
experiment labelled BW-2 shows, for 
, the spe(cid:173)
cial case of those instances for which the initial state has only 
one tower. Here the improvement in run time is dramatic, as 

finds the optimal plans whose length is only linear in 

Another domain we ran experiments on is the challenging 
Power Supply Restoration (PSR) benchmark [4], which is de(cid:173)
rived from a real-world problem in the area of power distribu(cid:173)
tion. The domain description requires a number of complex, 
recursive,  derived predicates to axiomatize the power flow, 
[4].  We considered a version of the benchmark without any 
uncertainty for which the goal is to resupply all resuppliablc 
lines. For each number 
to 7 feeders, we generated 100 
random networks with a maximum of 3 switches per feeder 
and with 30% faulty lines.  The third figure above compares 
and FF+f as a function of n. 
the median run times  of 
Again the improvement in performance resulting from han(cid:173)
dling axioms explicitly is undeniable. In this experiment, the 
plan length does not vary much with n: with our parameters 
for the random instances generation, it is clustered around 5 
actions for 
instances, and around 50 for the compiled 
instances.  Yet this makes all the difference between what is 
solvable in reasonable time and what is not. 

Although  the  domains  in  these  experiments  are  by  no 
means chosen to show off the worst-case for the compilation 
scheme, they nevertheless illustrate its drawbacks.  The dif(cid:173)
ference of performance we observe  is due to the facts that 
compilation increases the branching factor, increases the plan 
length, and obscures the computation of the heuristic. 

Other published  compilation  schemes  [10;  9]  are  not ap(cid:173)
plicable  to  the  above  domains  whose  descriptions  involve 
negated derived predicates.  The exponential  space transfor(cid:173)
mation by Davidson and Garagnani  [7]  is applicable to  BW, 
but was unable to cope with problems larger than 
=  4 be(cid:173)
cause it substitutes for their definitions all occurrences of non-
recursive  derived predicates  until  none  remains.  This  turns 
preconditions  into  ADL  constructs  that  quickly  become  too 
complex  for  FF's pre-processing step to  compile them away 
in reasonable time, in difference to the experiments described 
above where pre-processing time was negligible. 

6  Conclusion 

As  reflected  by  recent  endeavours  in  the  international  plan(cid:173)
ning competitions, there is a growing (and, in our opinion, de(cid:173)
sirable) trend towards more realistic planning languages and 
benchmark domains.  In that context, it is crucial to determine 
which additional  language  features are particularly relevant. 
The main contribution of this paper is to give theoretical and 
empirical evidence of the fact that axioms are important, from 
both an expressivity and efficiency perspective.  In addition, 
we have provided a clear formal semantics for PDDL axioms, 
identified a general and easily testable criterion for axiom sets 
to have  an  unambiguous  meaning,  and given a compilation 
scheme which is more generally applicable than those previ(cid:173)
ously published (and also more effective in conjunction with 
forward heuristic search planners like FF). 

Future  work  will  include  more  extensive  empirical  stud(cid:173)
ies involving a more elaborate treatment of axioms within FF 
and  planners  of different types,  as  well  as  the  extension  of 
derived predicates  and axioms to the context of the numeri(cid:173)
cal and temporal  language  features recently introduced with 
PDDL 2.1.  Axioms have long been an integral part of action 
formalisms in the  field  of reasoning about action and change 
where, much beyond the inference of derived predicate con(cid:173)
sidered here, they form the basis for elegant solutions to the 
frame  and  ramification  problems,  see  e.g. 
It  is  our 
hope  that  the  adoption  of PDDL  axioms  will  eventually  en(cid:173)
courage the planning community to make greater use of these 
formalisms. 

[16]. 

Acknowledgements 
Thanks  to  Blai  Bonet,  Marina  Davidson,  Stefan  Edelkamp, 
Maria Fox, John Lloyd,  and John Slaney for fruitful discus(cid:173)
sions which helped to improve this paper. 

References 
11] K. Apt, H. Blair, and A. Walker. Towards a theory of declara(cid:173)
tive knowledge. In J. Minker, editor, Foundations of Deductive 
Databases and Logic Programming. Morgan Kaufrnann, 1987. 

[2] F. Bacchus. Subset of PDDL for the AIPS2000 planning com(cid:173)

petition.  www.es.toronto.edu/aips2 

000, 

2000. 

[3]  A.  Barrett,  D.  Christianson,  M.  Friedman,  C.  Kwok, 
K. Golden, S. Penberthy, Y. Sun, and D. Weld. UCPOP User's 
Manual. Technical Report 93-09-06d, The University of Wash(cid:173)
ington, Computer Science Department, 1995. 

[4]  B. Bonet and S. Thiebaux. GPT Meets PSR. In Proc. ICAPS. 

to appear, 2003. 

[5]  A. K. Chandra, D. C. Kozcn, and L. J. Stockmcyer.  Alterna(cid:173)

tion. Journal of the ACM,2S(\):\\4-\33, 1981. 

[6]  E. Dantsin, T. Eiter, G. Gottlob, and A. Voronkov. Complexity 
and expressive power of logic programming. ACM Computing 
Surveys, 33(3):374-25, 2001. 

[7]  M. Davidson and M. Garagnani.  Pre-processing planning do(cid:173)
In  Proc.  UK PlanSlG 

mains containing  language axioms. 
workshop, 2002. 

[8]  M.  Fox  and  D.  Long. 

PDDL2.1:  An  Extension 
to  PDDL  for  Expressing  Temporal  Planning  Domains. 
www. dur. ac. u k / d . p. l o n g / I P C / p d d l. html, 2002. 

[9]  M. Garagnani.  A correct algorithm for efficient planning with 
preproccssed domain axioms. In Research and Development 
in Intelligent Systems XVJJ. Springer, 2000. 

[10]  C. Gazen and C.  Knoblock.  Combining the expressivity of 
UCPOP with the efficiency of Graphplan. In Proc. ECP, 1997. 
[11]  J. Hoffmann and B. Nebel. The FF planning system: Fast plan 
generation through heuristic search. JAIR, 14:253-302, 2001. 
[12]  R. M. Karp and R. J. Lipton. Turing machines that take advice. 

L' Enseignement Mathematique, 28:191 210, 1982. 

[13]  H. A. Kautz and B. Selman.  Forming concepts for fast infer(cid:173)

ence. In Proc. AAAI, 1992. 

[14] V. Lifschitz. On the semantics of STRIPS. In Proc. Workshop 

on Reasoning about Actions and Plans, pages 1-9, 1987. 

[15] J.Lloyd. Foundations of Logic Programming. Springer, 1993. 
[16]  N. McCain and H. Turner.  A causal theory of ramifications 

and qualifications. In Proc. IJCAI, 1995. 

[17]  D. McDermott. PDDL - The Planning Domain Definition Lan(cid:173)
guage. Technical Report CVC TR-98-003/DCS TR-1165, Yale 
Center for Computational Vision and Control, 1998. 

[18]  D. Nau, Y. Cao, A. Lotem, and H. Munoz-Avila. SHOP: sim(cid:173)

ple hierarchical ordered planner. In Proc. IJCAI, 1999. 

[19] B. Nebel. On the compilability and expressive power of propo-

sitional planning formalisms. JAIR, 12:271-315, 2000. 

[20] M. Y. Vardi. The complexity of relational query languages. In 

Proc. STOC, 1982. 

966 

PLANNING 

