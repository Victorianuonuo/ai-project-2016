Propagating Logical Combinations of Constraints

∗
Fahiem Bacchus

University of Toronto

Toronto, Canada

fbacchus@cs.toronto.edu

Toby Walsh

†

NICTA and UNSW
Sydney, Australia

tw@cse.unsw.edu.au

Abstract

Many constraint toolkits provide logical connec-
tives like disjunction, negation and implication.
These permit complex constraint expressions to
be built from primitive constraints. However, the
propagation of such complex constraint expres-
sions is typically limited. We therefore present
a simple and light weight method for propagat-
ing complex constraint expressions. We provide
a precise characterization of when this method en-
forces generalized arc-consistency. In addition, we
demonstrate that with our method many different
global constraints can be easily implemented.

1 Introduction
Real world problems often contain logical combinations of
numerical and symbolic constraints. For example, many con-
ﬁguration problems are naturally speciﬁed using implication
and other logical connectives (e.g. if the car is a coupe or a
convertible then a roof rack is not a valid option). To facilitate
the modeling of such problems, constraint toolkits allow log-
ical combinations of primitive constraints to be posted. How-
ever, such combinations are typically not propagated very ef-
fectively. For example, the propagation of a disjunction of
constraints is generally delayed until all but one of the dis-
juncts are falsiﬁed after which the remaining disjunct (which
must now hold) is propagated.

We will present a simple and light weight method to propa-
gate constraint expressions built up from logical connectives
and primitive constraints. This method can be incorporated
into any current constraint toolkit by a simple extension to
the propagators for the primitive constraints. We can there-
fore provide the user with a rich language for specifying prob-
lems, whilst preserving the ability to prune the search space.
To demonstrate the usefulness of such a facility, we show that
many global constraints can be easily speciﬁed and, in some
cases, effectively propagated, using simple constraint expres-
sions. Thus our method can often provide the toolkit user
with a very low cost alternative to the enterprise of designing
and implementing special purpose propagators for unusual
global constraints that might appear in their problem.

∗
†

This research funded by NSERC Canada.
This research funded in part by National ICT Australia.

2 Inconsistent and Valid Assignments
A constraint satisfaction problem consists of a set of vari-
ables, each with a domain of values, and a set of constraints.
Each constraint consists of a scope of variables to which it is
applied, and a relation of allowed values for those variables.
For convenience, we represent the domains D of the variables
by the set of possible assignments. For example, if we have
two 0/1 variables, X and Y then D = {X = 0, X = 1, Y =
0, Y = 1}. We let domain(X) be the set of values in the
domain of the variable X: domain(X) = {a | X = a ∈ D}.
An assignment set τ is a set of assignments to variables such
that no variable is assigned more than one value by τ. The
scope of an assignment set τ (constraint C) is the set of vari-
ables in τ (C) and is denoted by scope(τ) (scope(C)). Given
a constraint C and an assignment set τ with scope(C) ⊆
scope(τ), we write C(τ) iff the assignments in τ satisﬁes C.
That is C(τ) iff there exists X1 = a1, .., Xk = ak ∈ τ with
scope(C) = {X1, .., Xk} and X1 = a1, .., Xk = ak satisﬁes
C. We write ¬C(τ) otherwise.

An assignment is (generalized arc) inconsistent for a
constraint iff no assignment set containing it satisﬁes the
constraint. That is, X = a is inconsistent for C iff
(cid:1)
(cid:2)→ ¬C(τ). A con-
∀τ.
scope(C) ⊆ scope(τ) ∧ X = a ∈ τ
straint C has an unique maximal set of inconsistent assign-
ments MaxInc(C). For example, given the constraint X < Y
with X = {0, 1, 2} and Y = {1, 2}, then {X = 2} is the
maximal set of inconsistent assignments. Assignments that
are consistent have at least one witness falsifying the above
condition; i.e., X = a is consistent iff there is an assignment
set τ (called a support) with scope(τ) = scope(C) ∧ X =
a ∈ τ ∧ C(τ). A constraint C is GAC (Generalized Arc Con-
sistent) iff every value of every variable in scope(C) has at
least one support. If X = a is inconsistent, we can prune a
from the domain of X. A constraint C can be made GAC by
simply pruning all values in MaxInc(C) from the domains of
their respective variables.

An essential notion for our approach is the concept of a
valid assignment. Valid assignments are the dual of incon-
sistent assignments. An assignment is valid for a constraint
iff all assignment sets containing it satisfy the constraint. That
scope(C) ⊆ scope(τ)∧ X =
is, X = a is valid for C iff ∀τ.
(cid:2) → C(τ). As with inconsistent values every con-
a ∈ τ
straint C has a unique maximal set of valid assignments,
MaxValid(C). For example, given the constraint X < Y

(cid:1)

with X = {0, 1, 2} and Y = {1, 2}, the maximal set of valid
assignments is {X = 0}. All possible extensions of X = 0
satisfy the constraint X < Y , but all other assignments to X
can be extended so that they fail to satisfy the constraint.

All of the concepts presented for inconsistent assignments
have dual versions for valid assignments. For example, the
dual of consistent assignments is the notion of non-valid as-
signments. An assignment X = a is non-valid if there is at
least one assignment set τ with scope(τ) = scope(C)∧ X =
a ∈ τ ∧ ¬C(τ). Another example is that the dual of a
support is a non-support. An assignment set τ is a non-
support for an assignment X = a in a constraint C iff
scope(τ) = scope(C)∧ X = a ∈ τ ∧¬C(τ). A non-support
witnesses the non-validity of X = a.

3 Constraint Expressions

To build complex constraints, we combine primitive con-
straints using negation, disjunction and conjunction. A con-
straint expression is either a primitive constraint C or any
well-founded Boolean expression of the form: true, false,
not(C1), or(C1, ..,Ck) or and(C1, ..,Ck), where each Ci is it-
self a constraint expression. true is the primitive constraint
which is always valid, whilst false is always inconsistent.
We also allow the expressions implies(C1,C2), iﬀ (C1,C2),
xor(C1,C2) and ifthen(C1,C2,C3), but regard these addi-
tional connectives to be abbreviations:
implies(C1,C2) ↔ or(not(C1),C2)

iﬀ (C1,C2) ↔ and(or(not(C1),C2), or(not(C2),C1)
xor(C1,C2) ↔ and(or(C1,C2), or(not(C1), not(C2))

ifthen(C1,C2,C3) ↔ and(or(not(C1),C2), or(C1,C3))

Each constraint expression C represents a new constraint
whose scope is equal to the union of the scopes of the prim-
itive constraints in C. An assignment set τ satisﬁes C iff
scope(C) ⊆ scope(τ) and the Boolean expression represent-
ing C evaluates to true given the truth values of the component
primitive constraints under τ. For example, an absolute value
constraint X = abs(Y ) can be written as the constraint ex-
pression ifthen(Y ≥ 0, X = Y, X = −Y ). Similarly, a max
constraint X = max(Y, Z) can be written as the constraint
expression and(X ≥ Y, X ≥ Z, or(X = Y, X = Z)).
Since a constraint expression is itself a constraint, as-
sociated with every constraint expression C is a maximal
set of inconsistent assignments, MaxInc(C), and a maximal
set of valid assignments MaxValid(C). We can make the
constraint expression C generalized arc consistent by prun-
ing all assignments in MaxInc(C).
It is also useful to ob-
serve that the duality between valid assignments and inconsis-
tent assignments implies MaxInc(C) = MaxValid(not(C)):
X=a ∈ MaxInc(C) ↔ (cid:1)∀τ.X=a ∈ tau → (¬C(τ) ↔
not(C)(τ))

(cid:2)↔ X=a ∈ MaxValid(not(C)).

4 Constraint Propagation
Not surprisingly, it is NP-hard to compute MaxInc for an ar-
bitrary constraint expression. More precisely, deciding if a set
of assignments is the maximal inconsistent set for an arbitrary

Inc(not(C1),D)
= Valid(C1,D)
Valid(not(C1),D)
= Inc(C1,D)
(cid:3)
Inc(or(C1, ..,Ck),D)
i Inc(Ci,D)
=
(cid:3)
Valid(and(C1, ..,Ck),D) =
i Valid(Ci,D)
= ItInc(and(C1, ..,Ck),D)
Inc(and(C1, ..,Ck),D)
= ItValid(or(C1, ..,Ck),D)
Valid(or(C1, ..,Ck),D)
ItValid(or(C1, ..,Ck),D)
ItInc(and(C1, ..,Ck),D)
valid := ∅
inc := ∅
repeat
repeat
inc(cid:1)
valid(cid:1)
:=
D := D − inc(cid:1)
D
valid := valid ∪ valid(cid:1)
:= inc ∪ inc(cid:1)
inc
until(valid(cid:1) = ∅)
until(inc(cid:1) = ∅)
return(inc)
return(valid)

:=
:= D − valid(cid:1)

(cid:4)
i Inc(Ci,D)

(cid:4)

i Valid(Ci,D)

Table 1: Functions for computing valid and inconsistent assign-
In addition, Inc(true,D) =
ments of a constraint expression.
Valid(false,D) = ∅, and Valid(true,D) = Inc(false,D) = D.
constraint expression is DP -complete in general.1 There are
results on tractable languages that identify tractable cases for
computing MaxInc and MaxValid . However, we are inter-
ested here in computing inconsistent assignments for arbi-
trary constraint expressions, which is intractable in general.

We propose a simple and light weight method for comput-
ing subsets of MaxInc and MaxValid in polynomial time.
The method is compositional, computing the inconsistent
and valid assignments of a constraint expression from the
inconsistent and valid assignments of its parts. For a con-
straint expression C and variable domains D, the functions
Inc(C,D) and Valid(C,D) return subsets of MaxInc(C) and
MaxValid(C) respectively. These functions recursively apply
the rules in Table 1, until they reach the primitive constraints.
We assume that each primitive constraint has a poly-time al-
gorithm to compute inconsistent and valid assignments.

The algorithm can be optimized by a simple caching
scheme in which we remember the previously computed
value Inc(Ci,D) for each subexpression Ci.
If in a subse-
quent call Inc(Ci,D(cid:1)), D(cid:1)
is identical to D when restricted
to the variables in scope(Ci), then we can reuse the previ-
ously computed result for Inc(Ci,D). A similar optimization
works for Valid(Ci,D). In addition, if we compute and prune
inconsistent values incrementally, we can stop as soon as any
variable has a domain wipeout.

4.1 Entailment and Disentailment
A constraint expression is entailed iff it holds for all possible
assignments. A constraint is disentailed iff it does not hold
for any possible assignment. As we show below, Valid(C,D)
returns only valid assignments. Hence, if Valid(C,D) equals
the domains of all of the variables in the scope of C, C must be
entailed. In such a situation, we modify the computation of
Valid so that Valid(C,D) = D (note that D might include
domains of other variables besides those in the scope(C)).
Similarly, if Inc(C,D) equals the domains of all of the vari-
1The complexity class DP contains problems which are the con-
junction of a problem in NP and one in coNP [Papadimitriou and
Yannakakis, 1984].

Y =1,

ables in the scope of C then C is disentailed; and we modify
the computation of Inc so that Inc(C,D) = D.
To show the beneﬁt, consider implies(even(X), odd(Y ))
with D={X=0, X=2,
Y =2}.
Now
Inc(implies(even(X), odd(Y )), D) = Valid(even(X),D)
∩ Inc(odd(Y ),D).
Using the unmodiﬁed versions,
Valid(even(X), D) will return just valid values for X, whilst
Inc(odd(Y )), D) returns just inconsistent values for Y . Inc
would then compute the empty set of inconsistent assign-
ments for implies(even(X), odd(Y )). Note, however, that
domain(X) only contains even numbers. Hence even(X)
is entailed. Therefore the modiﬁed Valid(even(X), D) can
return D, in which case Inc(implies(even(X), odd(Y ), D)
= D ∩ Inc(odd(Y ), D) = {Y =2}. As required, this is the
maximal set of inconsistent assignments.

(cid:3)

4.2 Correctness
We prove that Inc and Valid are correct. That is, they only
return inconsistent and valid assignments respectively.
Theorem 1 Inc and Valid are correct assuming that incon-
sistent and valid assignments are correctly computed for the
constituent primitive constraints.
Proof: By induction on the structure of the constraint ex-
pression. The base case holds by assumption. The step case
uses case analysis.
For a constraint expression not(C1,D), we have that
Inc(not(C1),D) = Valid(C1,D). By induction, the as-
signments in Valid(C1,D) are valid. Hence all of these as-
signments are inconsistent for not(C1,D). A dual argument
shows that the assignments in Valid(not(C1),D) are valid.
For a constraint expression C = and(C1, ..,Ck), we have
Valid(C,D) =
i Valid(Ci,D). Suppose X = a ∈
Valid(C,D). Then for all i, X = a ∈ Valid(Ci,D). By
the induction hypothesis, the assignments in each Valid(C i)
are valid. Consider any assignment set τ such that X =
a ∈ τ and scope(C) ⊆ scope(τ). Since X = a is valid
for each Ci, τ must satisfy all Ci and thus must satisfy the
conjunction. Hence X = a is also valid for C. For C =
Inc(and(C1, ..,Ck),D) a similar argument shows that the as-
(cid:4)
i Inc(Ci,D) are inconsistent. Deleting these
signments in
assignments from D cannot cause any consistent assignment
to lose its support, hence Inc(Ci,D(cid:1)) on the reduced domain
D(cid:1)
must still return inconsistent assignments. ItInc then re-
computes
form or(C1, ..,Ck). 2
4.3 Termination
The ItInc and ItValid functions only require a linear (in the
size of the CSP) number of iterations to reach their ﬁxed point
in the worst case.
Theorem 2 ItInc and ItValid take O(nd) iterations to reach
their ﬁxed points for a constraint expression with n variables
and domains of size d. There exist constraint expressions
which take Θ(nd) iterations to reach the ﬁxed point.
Proof: As each iteration removes at least one value, we
must reach the ﬁxed point in at most nd steps. We can give

(cid:4)
i Inc(Ci,D) until we reach a ﬁxed point.

Similar arguments hold for constraint expressions of the

a simple example in which this bound is reached. Consider
and(C1, ..,Cn) where Ci is Xi = Xi+1 for i < n and X1 −
Xn = 1 for i = n. Suppose domain(Xi) = {1, .., d} for
every i. Then in the ﬁrst iteration, ItInc returns {X 1 = 1}
as this value is not supported in X1 − Xn = 1. After this
is pruned from D, a second iteration returns {X 2 = 1} as
this value is now not supported in X 1 = X2. And so on
up to the nth iteration which returns {X n = 1}. After this
is pruned, the n + 1th iteration returns {X 1 = 2} as this
value is now not supported in X 1 − Xn = 1. Hence, there
are nd iterations before all the values of all the variables are
removed. Note that even if we stop when the ﬁrst variable has
a domain wipeout, it will still take (n − 1)d + 1 iterations. 2
4.4 Maximality
These functions do not always compute maximal sets, even if
maximal sets are computed for the primitive constraints from
which they are composed. This is not surprising given that
computing maximal sets for an arbitrary constraint expres-
sion is intractable in general. The following result precisely
characterizes when Inc returns the maximal inconsistent set
of assignments. In other words, the following result identiﬁes
exactly when pruning the values returned by Inc ensures that
a constraint expression is GAC.
We start with a number of deﬁnitions. A hypergraph
H = (H, EH) is a set of vertices H and hyperedges E H
each of which is a subset of H. A hypergraph H has an
acyclic tree decomposition [Flum et al., 2002] iff there is
a tree T satisfying: (1) there is a one-to-one correspondence
between the hyperedges of H and the nodes of T ; the hy-
peredge corresponding to a tree node t is called t’s label
(label(t)); (2) for every vertex v ∈ H the set of nodes t of
T such that v ∈ label(t) form a subtree of T . The hyper-
graph of a conjunctive or disjunctive constraint expression,
C = and(C1, ..,Ck) or C = or(C1, ..,Ck), has the variables
in scope(C) as vertices and the sets of variables scope(Ci),
i = 1, .., k as hyperedges. We will relax this deﬁnition to take
account of (dis)entailment. If C = and(C 1, ..,Ck) then we
ignore any entailed subexpression when constructing the hy-
pergraph. Similarly, if C = or(C1, ..,Ck) then we ignore any
disentailed subexpression. Under this relaxation we deﬁne a
conjunctive or disjunctive constraint expression to be acyclic
if its corresponding hypergraph has an acyclic tree decompo-
sition. For example, a conjunction in which the primitive con-
straints are in a chain, and each has only one variable in com-
mon with the previous and next constraint is acyclic. Acyclic-
ity is, however, more general than being a chain. We will use
acyclicity to characterize when Inc computes MaxInc.
Theorem 3 For any constraint expression C and any vari-
able domains D, Inc(C,D) = MaxInc(C,D) if:
1. C is a primitive constraint and Inc(C,D) =
2. C = not(C1) and Valid(C1,D) = MaxValid(C1,D);
3. C = or(C1, ..,Ck) and Inc(Ci,D) = MaxInc(Ci,D) for
i ∈ (1, .., k);
4. C
Inc(Ci,D) =
MaxInc(Ci,D) for i ∈ (1, .., k); (b) C is acyclic;
and (c) |scope(Ci) ∩ scope(Cj)| ≤ 1 for i, j ∈ (1, .., k);

= and(C1, ..,Ck) and (a)

MaxInc(C,D);

5. Inc(C,D) = D.
Proof: 1. Immediate.
2. Suppose Valid(C1,D) is maximal. Then for any X =
a (cid:12)∈ Valid(C1,D), there exists τ with X = a ∈ τ and
¬C1(τ). Hence X = a cannot be in Inc(not(C1),D) as τ
is one assignment that prevents it being inconsistent. Hence
Inc(not(C1),D) is maximal.
3. Suppose Inc(Ci,D) are maximal. Consider X = a (cid:12)∈
Inc(or(C1, ..,Ck),D). Then X = a (cid:12)∈ (cid:3)
1≤i≤k Inc(Ci,D).
That is, X = a (cid:12)∈ Inc(Cj,D) for some j ∈ (1, .., k). As
Inc(Cj,D) is maximal, there exists τ with X = a ∈ τ and
Cj(τ). Thus X = a cannot be in Inc(or(C1, ..,Ck),D) as τ
is one assignment that prevents it being inconsistent. Hence
Inc(or(C1, ..,Ck),D) is maximal.
4. Suppose X ∈ scope(C) with X = a ∈ D, but X = a (cid:12)∈
Inc(C,D). We must show that X = a (cid:12)∈ MaxInc(C,D). Let
Dc = D−Inc(C,D), i.e., the consistent assignments remain-
ing in the variable domains. From Table 1 we observe that
Inc(Ci,Dc) = ∅ and by condition (a) MaxInc(Ci,Dc) = ∅
for all i ∈ (1, .., k). Consider the acyclic tree decomposition
associated with C. Orient this tree so that the root is labeled
with scope(Ci) for some Ci with X ∈ scope(Ci). Note that
by property (2) of an acyclic tree decomposition and condi-
tion (c), each of the subtrees below C i can have at most one
variable in common with the other subtrees. Furthermore if
two subtrees do have a variable in common that variable must
be in the scope(Ci).
Since X = a ∈ Dc it must have some support τ on Ci such
that τ ∈ Dc. Now we extend this support downwards in the
tree decomposition to the children of C i: C1
j . Each such
child Cj shares only one variable with Ci, say Y , and Y must
be assigned some value in τ, say Y = b. Since Y = b ∈ D c
it must have a support τj in Cj such that τj ∈ Dc. Thus we
can extend τ to a support for and(C i,Cj) for each child of Ci.
Furthermore the supports τj for the individual children of C i
cannot be in conﬂict: Cj and Cj(cid:1) can only share a variable al-
ready assigned by τ, hence τj and τj(cid:1) must agree with τ and
with each other on the value assigned to this variable. Thus
we can extend τ to a support for all of C i’s children. Further-
more, by the same argument each support τ j for the child Cj
can be extended to a support for all of the conjuncts in the
subtree below Cj. Hence, τ can be extended to a support for
all of C, and since X = a ∈ τ, X = a (cid:12)∈ MaxInc(C,D).
Note that if and(C1, ..,Ck) contains any entailed conjuncts,
these can be eliminated without changing the maximal set of
inconsistent assignments. We can then apply the argument
above to the remaining acyclic part of the conjunction.

5. Immediate since MaxInc(C,D) ⊆ D. 2
In fact, we can show that these ﬁve cases are the only
ones in which Inc is always guaranteed to be maximal. This
reverse direction needs a little care as Inc may compute
MaxInc by chance. However, these ﬁve cases are the only
ones in which, irrespective of the constraint subexpressions,
Inc is guaranteed to compute MaxInc. A dual result holds,
and characterizes precisely when Valid computes MaxValid .
Previous related results have shown that acyclic database
queries of bounded tree width are tractable. Bounded tree
width (tree width one) is also known to be the condition

j , .., C(cid:1)

that characterizes when arc consistency achieves GAC on
conjunctions of binary constraints. The main difference be-
tween our result and these previous results is that we do not
place any restriction on the arity of the primitive constraints.
Hence, our result does not depend on bounded tree width (the
tree width of the constraint graph is at least as large as the ar-
ity of the primitive constraints). Given primitive constraints
for which GAC can be efﬁciently computed (no matter their
arity), our result characterizes when this efﬁciency can be
lifted to complex combinations of these constraints.

5 Some Applications
To demonstrate the usefulness of constraint expressions and
our propagation algorithm, we show that a wide range of
global and other constraints can be speciﬁed and propagated
using simple constraint expressions. In many cases, our light
weight propagation algorithm is able to achieve GAC. Our
method is then an effective and low cost means to implement
these constraints. This is especially valuable when the con-
straints useful for a particular problem are too specialized to
be in the user’s constraint toolkit.

DOMAIN constraint. This channels between a variable
and a sequence of 0/1 variables representing the pos-
sible values taken by the variable. More precisely,
DOMAIN(X, [X1, .., Xn]) ensures X = i iff Xi = 1 [Refalo,
2000]. We can decompose this into a disjunction:
or(and(X = 1, X1 = 1, .., Xn = 0), ..,
and(X = n, X1 = 0, .., Xn = 1))

The equality constraints in each conjunct again have no vari-
ables in common. Hence pruning the values returned by Inc
enforces GAC.
ELEMENT constraint. This indexes into an array with a
variable [Van Hentenryck and Carillon, 1988]. More pre-
cisely, ELEMENT(I, [X1, .., Xn], J) holds iff XI = J. We
can use this to look up the price of a particular component
included in a conﬁguration problem. It decomposes into a
simple disjunction:

or(and(I = 1, J = X1), .., and(I = n, J = Xn))

The equality constraints within each conjunct share no vari-
ables. Hence pruning the values returned by Inc enforces
GAC.
MEMBER constraint. This ensures that a particular value
is used. More precisely, MEMBER(I, [X1, .., Xn]) holds iff
there exists j with Xj = I. We can decompose this into a
disjunction:

or(X1 = I, .., Xn = I)

Pruning the values returned by Inc enforces GAC.
MAX constraint. This computes the maximum value
taken by a sequence of variables.
More precisely,
MAX(N, [X1, .., Xn]) holds iff there exists i with N = Xi
and Xi ≥ Xj for all j. A MAX constraint can be decom-
posed into a disjunction:

or(and(N = X1, X1 ≥ X2, .., X1 ≥ Xn)

and(N = X2, X2 ≥ X1, X2 ≥ X3, .., X2 ≥ Xn)
.., and(N = Xn, Xn ≥ X1, .., Xn ≥ Xn−1))

Pruning the values returned by Inc on such a decomposition
enforces GAC.
CHANNELLING constraints.
It is often advantageous to
specify multiple viewpoints of a problem. Constraints may
be easier to specify in one viewpoint and propagate better in
another. Channelling constraints are then needed to link the
different viewpoints. For example, multiple viewpoints have
proved useful in the orchestra rehearsal problem, prob039
in CSPLIB. The channelling constraints used here can be
speciﬁed as constraint expressions:

iﬀ (Xi = 1, or(Xi−1 = 1, Yi = 1))
iﬀ (Zk = j, and(Xj = 1, Xj−1 = 0))

The problem also contained a specialized optimality con-
straint which can be speciﬁed as the constraint expression:

implies(X < Y, WX = 1)

Where WX = 1 can itself be speciﬁed with an ELEMENT
constraint.
LEX constraint. This lexicographically orders two vectors
of variables. It has many applications when dealing with sym-
metry [Frisch et al., 2002]. We can decompose it into a dis-
junction:

or(X1 < Y1,

and(X1 = Y1, X2 < Y2),
and(X1 = Y1, X2 = Y2, X3 < Y3), ..,
and(X1 = Y1, .., Xn−1 = Yn−1, Xn ≤ Yn))

As the constraints in each conjunct share no variables, prun-
ing the values returned by Inc enforces GAC on the LEX
constraint. In addition, if we memoize previous results, Inc
will be comparable to the efﬁcient algorithm in [Frisch et al.,
2002].

The choice of decomposition of a global constraint is im-
portant for ensuring as much propagation as possible. For
instance, an alternative decomposition is the conjunction:
and(X1 ≤ Y1,

implies(X1 = Y1, X2 ≤ Y2), ..
implies(and(X1 = Y1, .., Xn−1 = Yn−1), Xn ≤ Yn))
Pruning the values returned by Inc on this decomposition
may not enforce GAC on the LEX constraint. Consider X 1
and Y1 ∈ {0, 1}, X2 = 1 and Y2 = 0. Then X1 = 1 and
Y1 = 0 are both inconsistent assignments. However, Inc ap-
plied to this decomposition will return the empty set.
VALUE PRECEDENCE constraint. This breaks symme-
tries in a sequence of variables, X1 to Xn caused by two
indistinguishable values s and t [Law and Lee, 2004]. We
can decompose it into a simple conjunction:

and(X1 (cid:12)= t, implies(X2 = t, X1 = s), ..,

implies(Xn = t, or(X1 = s, .., Xn−1 = s)))

Theorem 2 of [Law and Lee, 2004] shows that enforcing GAC
on each conjunct achieves GAC on the global constraint. As
each conjunct expands out into a simple disjunction, pruning
the values returned by Inc enforces GAC on the global con-
straint.

AMONG constraint. This limits the number of variables
taking values from a set [Beldiceanu and Contejean, 1994].
More precisely, AMONG([X1, .., Xn], [d1, .., dm], N) holds
iff N = |{i|Xi = dj}|. The constraint is useful in many
resource allocation and scheduling problems. By introducing
additional variables Ni in which to accumulate a count, we
can decompose this into a relatively simple constraint expres-
sion:

and(ifthen(X1 ∈ D, N1 = 1, N1 = 0),

ifthen(X2 ∈ D, N2 = N1 + 1, N2 = N1),
.., ifthen(Xn ∈ D, N = Nn−1 + 1, N = Nn−1)),

where Xi ∈ D is an abbreviation for or(Xi = d1, .., Xi =
dm).
Unfortunately, Inc does not achieve GAC on such a de-
composition. Consider, for example, X 1, X2 ∈ {0, 1},
N ∈ {0, 1, 2} and N1 ∈ {0, 1}. Enforcing GAC on
AMONG([X1, X2], [0, 1], N) will prune 0 and 1 from N
whilst Inc returns the empty set. Similar decompositions
and results hold for the ATMOST, ATLEAST, CHANGE, and
COUNT constraints.
NOTALLEQUAL constraint. This ensures that not all vari-
ables take the same value [Beldiceanu and Contejean, 1994].
More precisely, NOTALLEQUAL([X1, .., Xn]) holds iff there
exists i and j with Xi (cid:12)= Xj. This can be decomposed into
the following constraint expression:

or(X1 (cid:12)= X2, .., X1 (cid:12)= Xn)

Pruning the values returned by Inc enforces GAC.
NVALUE constraint. This counts the number of values
used by a sequence of variables [Pachet and Roy, 1999]. More
precisely, NVALUE([X1, .., Xn], N) holds iff |{Xi|1 ≤ i ≤
n}| = N . The constraint is useful in a wide range of prob-
lems involving resources The ALLDIFFERENT constraint is
a special case of the NVALUE constraint in which N = n.
Unfortunately, it is NP-hard in general to enforce GAC on a
NVALUE constraint [Bessiere et al., 2004].

One way to propagate this constraint in polynomial time is
to decompose it with an additional set of 0/1 variables repre-
senting the characteristic function of the set of values used:

and(iﬀ (S1 = 1, or(X1 = 1, .., Xn = 1)),

.., iﬀ (Sm = 1, or(X1 = m, .., Xn = m)),
(cid:5)m

i=1 Si = N)

Where the domains of the Xi are assumed to be from 1 to m.
Not surprisingly, Inc does not compute the maximal set of
inconsistent assignments for this constraint expression. For
example, suppose X1, X2 ∈ {1, 2}, X3 ∈ {1, 2, 3}, N = 3
and Si = 1 for 1 ≤ i ≤ 3. Then Inc returns the empty set,
even though X3 = 1 and X3 = 2 are inconsistent.

A similar decomposition and result holds for the COMMON

constraint, which is also NP-hard to propagate.
6 Related Work
Lhomme has proposed GAC algorithms for logical combi-
nations of primitive constraints, focused primarily on those
that are given in extension [Lhomme, 2004]. For example,
on a disjunction like or(C1, .., Ck), the algorithm tests each

(cid:3)

i MaxInc(Ci). If the assign-
assignment for membership in
ment is not in MaxInc(Ci) for some i, the remaining MaxInc
sets do not have to be tested. However, in the worst case, we
still have to compute MaxInc for all of the primitive con-
straints, as we require in our method.

Bessi`ere and R´egin have proposed an algorithm for enforc-
ing GAC on a conjunction of primitive constraints [Bessi`ere
and R´egin, 1998]. However, as could be expected, this re-
quires O(dn) time in the worst case.

Other approaches to propagating constraint expressions are
based on reiﬁcation or delaying. It is not hard, however, to
show that Inc provides strictly more pruning. Suppose we
have a disjunction like or(X < 2, X > 4). We can reify this
into B1 ↔ X < 2, B2 ↔ X > 4, and B1 + B2 > 0.
These constraints are delayed until either inequality is en-
tailed or disentailed. However, Inc can prune values imme-
diately. Consider X ∈ {1, 3, 5}. Then neither inequality is
entailed or disentailed. However, Inc will return the incon-
sistent assignment X = 3.

To perform more pruning on such disjunctions, cc(FD)
introduced constructive disjunction [Van Hentenryck et al.,
1998]. If any of the disjuncts, Ci in a constructive disjunc-
tion, C1 ∨c .. ∨c Ck is entailed by the constraint store, then
the constructive disjunction is satisﬁed. Otherwise, each con-
straint Ci is added in turn to the constraint store and propa-
gated. The resulting inconsistent assignments are recorded,
the state restored, and the next constraint is processed. The
intersection of the inconsistent assignments found for each
constraint are then taken to be the inconsistent assignments
for the disjunction. Constructive disjunction can do more
pruning than enforcing GAC. For example, even though both
or(X = 0, Y = 0) and X = Y on 0/1 variable are
GAC, propagating X = 0 ∨c Y = 0 and X = Y prunes
X = Y = 1. This extra pruning arises from interaction be-
tween the disjunctive constraint and the other constraints in
the constraint store. For this reason, constructive disjunction
can be very expensive, and may not justify its costs in practice
[J. W¨urtz and T. M¨uller, 1996].

The cardinality constraint can be used to implement con-
junction, disjunction, negation, as well as a host of other use-
ful constraints [Van Hentenryck and Deville, 1991]. How-
ever, only a very restricted form of consistency is enforced
on the cardinality constraint, and Inc does more pruning in
general. For example, if C1 is X = 0, C2 is X = 1 and
D = {X = 0, X = 1, X = 2} then Inc(or(C1, C2),D) =
{X = 2}. Pruning X = 2 makes the problem GAC. How-
ever, the equivalent cardinality constraint, card(N, [C 1, C2])
where N ≥ 1 is consistent without any prunings.
In contrast to these previous works, we have provided a
tractable method for computing a subset of MaxInc that does
a useful amount of constraint propagation. Our algorithm
is compositional as it uses the propagators provided for the
primitive constraints. Hence it can be applied to complex,
nested logical expressions.

7 Conclusion
We have proposed a simple and light weight method for prop-
agating logical combinations of primitive constraints. Since
computing the maximal set of inconsistent assignments for

such constraint expressions is intractable in general, we have
given a polynomial time function which computes a tractable
subset compositionally. We characterized precisely when this
function computes the maximal set of inconsistent assign-
ments. Finally we have shown that many different global
constraints can be implemented using these methods. There
remain many interesting directions to follow both from a the-
oretical and practical perspective. For example, how do we
compute and use nogoods for constraint expressions?

References
[Beldiceanu and Contejean, 1994] N. Beldiceanu and E. Contejean.
Introducing global constraints in CHIP. Mathl. Comput. Mod-
elling, 20:97–123, no. 12 1994.

[Bessi`ere and R´egin, 1998] C. Bessi`ere and J-C. R´egin. Local con-
In Proc, of ECAI-98

sistency on conjunctions of constraints.
Workshop on Non-Binary Constraints. 1998.

[Bessiere et al., 2004] C. Bessiere, E. Hebrard, B. Hnich, and
T. Walsh. The complexity of global constraints. In Proc. of the
19th National Conf. on AI. AAAI, 2004.

[Flum et al., 2002] J¨org Flum, Markus Frick, and Martin Grohe.
Query evaluation via tree-decompositions. J. ACM, 49(6):716–
752, 2002.

[Frisch et al., 2002] A. Frisch, B. Hnich, Z. Kiziltan, I. Miguel, and
T. Walsh. Global constraints for lexicographic orderings. In 8th
Int. Conf. on Principles and Practices of Constraint Program-
ming (CP-2002). Springer, 2002.

[Law and Lee, 2004] Y.C. Law and J.H.M. Lee. Global constraints
for integer and set value precedence. In 8th Int. Conf. on Prin-
ciples and Practice of Constraint Programming (CP2004), pages
362–376. Springer, 2004.

[Lhomme, 2004] O. Lhomme. Arc-consistency Filtering Algo-
rithms for Logical Combinations of Constraints.
In Proc. of
Int. Conf. on Integration of AI and OR Techniques in Constraint
Programming for Combinatorial Optimisation Problems (CP-AI-
OR’04). Springer, 2004.

[Pachet and Roy, 1999] F. Pachet and P. Roy. Automatic generation
of music programs.
In J. Jaffar, editor, Proc. of 5th Int. Conf.
on Principles and Practice of Constraint Programming (CP99),
pages 331–345. Springer, 1999.

[Papadimitriou and Yannakakis, 1984] C.

and
M. Yannakakis. The complexity of facets (and some facets
of complexity).
Journal of Computer and System Sciences,
28(2):244–259, 1984.

Papadimitriou

[Refalo, 2000] P. Refalo. Linear formulation of constraint program-
ming models and hybrid solvers. In R. Dechter, editor, Proc. of
6th Int. Conf. on Principles and Practice of Constraint Program-
ming (CP2000), pages 369–383. Springer, 2000.

[Van Hentenryck and Carillon, 1988] P. Van Hentenryck and J.-P.
Carillon. Generality versus speciﬁcity: An experience with AI
and OR techniques. In Proc. of 7th National Conf. on Artiﬁcial
Intelligence, pages 660–664. AAAI, 1988.

[Van Hentenryck and Deville, 1991] P. Van Hentenryck

and
Y. Deville. The cardinality operator: a new logical connective
for constraint logic programming. In Proc. of the Int. Conf. on
Logic Programming (ICLP 91), pages 745–759, 1991.

[Van Hentenryck et al., 1998] P. Van Hentenryck, V. Saraswat, and
Y. Deville. Design, implementation and evaluation of the con-
straint language cc(fd). Journal of Logic Programming, 37(1–
3):139–164, 1998.

[J. W¨urtz and T. M¨uller, 1996] J. W¨urtz and T. M¨uller. Construc-
tive disjunction revisited. In Proc. of 20th German Annual Conf.
on Artiﬁcial Intelligence. Springer-Verlag, 1996.

