Reasoning with Inconsistent Ontologies ∗

Zhisheng Huang, Frank van Harmelen, and Annette ten Teije

Department of Computer Science, Vrije Universiteit Amsterdam, The Netherlands

{huang, Frank.van.Harmelen, annette}@cs.vu.nl

Abstract

In this paper we present a framework of reasoning
with inconsistent ontologies, in which pre-deﬁned
selection functions are used to deal with concept
relevance. We examine how the notion of ”concept
relevance” can be used for reasoning with inconsis-
tent ontologies. We have implemented a prototype
called PION (Processing Inconsistent ONtologies),
which is based on a syntactic relevance-based se-
lection function. In this paper, we also report the
experiments with PION.

Introduction

1
There are two main ways to deal with inconsistency in on-
tologies. One is to diagnose and repair it when we en-
counter inconsistency[Schlobach and Cornet, 2003]. Another
approach is to simply avoid the inconsistency and to apply
a non-standard reasoning method to obtain meaningful an-
swers.
In this paper, we will focus on the latter, which is
more suitable for the setting in the web area. For example,
in a typical Semantic Web setting, one would be importing
ontologies from other sources, making it impossible to repair
them, and the scale of the combined ontologies may be too
large to make repair effective.

The classical entailment in logics is explosive: any formula
is a logical consequence of a contradiction. Therefore, con-
clusions drawn from an inconsistent knowledge base by clas-
sical inference may be completely meaningless. The general
task of an inconsistency reasoner is: given an inconsistent on-
tology, return meaningful answers to queries.

Reasoning with inconsistency is a well-known topic in log-
ics and AI. Many approaches have been proposed to deal with
inconsistency [Benferhat and Garcia, 2002; Beziau, 2000;
Lang and Marquis, 2001; Marquis and Porquet, 2003]. The
development of paraconsistent logics was initiated to chal-
lenge the ‘explosive’ problem of the standard logics. Para-
consistent logics [Beziau, 2000] allow theories that are in-
consistent but non-trivial. There are many different para-
consistent logics. Most of them are deﬁned on a semantics
which allows both a letter and its negation to hold for an in-
terpretation. Levesque’s limited inference [Levesque, 1989]
∗The work reported in this paper was partially supported by the

EU-funded SEKT project (IST-506826).

allows the interpretation of a language in which a truth as-
signment may map both a letter and its negation to true. Ex-
tending the idea of Levesque’s limited inference, [Schaerf and
Cadoli, 1995] proposes S-3-entailment and S-1-entailment
for approximate reasoning with tractable results. Based on
Schaerf and Cadoli’s S-3-entailment, [Marquis and Porquet,
2003] presents a framework for reasoning with inconsistency
by introducing a family of resource-bounded paraconsistent
inference relations. Several policies, e.g., the linear order pol-
icy, are proposed. [Chopra et al., 2000] incorporates the local
change of belief revision and relevance sensitivity by means
of Schaerf and Cadoli’s approximate reasoning method, and
shows how relevance can be introduced for approximate rea-
soning in belief revision. Both approaches, Marquis’, and
Chopra’s, depend on syntactic selection procedures for ex-
tending the approximation set.

Our approach borrows some ideas from Schaerf and
Cadoli’s approximation approach, Marquis and Porquet’s
paraconsistent reasoning approach, and Chopra, Parikh, and
Wassermann’s relevance approach. However, our main idea is
relatively simple: given a selection function, which can be de-
ﬁned on the syntactic or semantic relevance, we select some
consistent sub-theory from an inconsistent ontology. Then
we apply standard reasoning on the selected sub-theory to
ﬁnd meaningful answers.
If a satisfying answer cannot be
found, the relevance degree of the selection function is made
less restrictive thereby extending the consistent subtheory for
further reasoning.

The main contributions of this paper are:(1) a set of formal
deﬁnitions to capture reasoning with inconsistent ontologies;
(2) a general framework for reasoning with inconsistent on-
tologies based on selection functions, and (3) some prelimi-
nary experiments with an implementation of this framework
using a rather simple selection function.

This paper is organised as follows: Section 2 overviews in-
consistency in the Semantic Web by examining several typi-
cal examples and scenarios. Section 3 presents the framework
of reasoning with inconsistent ontologies. Section 4 discusses
the selection functions Section 5 presents the algorithms of
PION. Section 6 examines how the syntactic-relevance-based
selection function can be developed. Section 7 describes a
prototype of PION and its evaluation. Section 8 discusses
further work and concludes the paper.

Inconsistency in the Semantic Web

2
Here are several typical scenarios which may cause inconsis-
tencies in the Semantic Web.
• Inconsistency Caused by mis-presentation of de-
faults. A notorious example is the bird ontology in
which penguins are speciﬁed as the birds which cannot
ﬂy, however, it contradicts the default statement ’birds
are ﬂying animals’. Another typical example is the Mad-
Cows ontology1 in which MadCow is speciﬁed as a Cow
which eats brains of sheep, whereas a Cow is considered
as a vegetarian by default.
• Inconsistency Caused by Polysemy Polysemy refers to
the concept of words with multiple meanings. An ex-
ample of an inconsistent ontology which is caused by
polysemy is the MarriedWoman Example[Huang et al.,
2004], in which the concept ’married woman’ is used
to refer both to a woman who has a husband and to a
woman who had a husband but may no longer have one.
• Inconsistency through Migration from Another For-
malism When an ontology speciﬁcation is migrated
from other data sources, inconsistencies may occur. As
has been found in [Schlobach and Cornet, 2003], the
DICE terminology (a DL terminology in the Intensive
Care domain) suffered from a high number of unsatis-
ﬁable concepts due to its migration from a frame-based
system.
In order to make the semantics as explicit as
possible, a very restrictive translation has been chosen
to highlight as many ambiguities as possible. [Schlobach
and Cornet, 2003] shows the inconsistent ontology spec-
iﬁcation in the Brain Example, in which a brain is con-
sidered to be both a body part and a central nervous sys-
tem, whereas body parts and nervous systems are con-
sidered to be disjoint.
• Inconsistency Caused by Multiple Sources. When a
large ontology speciﬁcation is generated from multiple
sources, in particular when these sources are created by
several authors, inconsistencies easily occur. There are
three possibilities for ontology reconciliation: merging,
aligning, or integrating. No matter whether a new on-
tology is generated by merging or integrating multiple
sources, in both cases general consistency objectives are
rather difﬁcult to achieve.

3 Formal Deﬁnitions
We do not restrict ontology speciﬁcations to a particular lan-
guage (although OWL and its underlying description logic
are the languages we have in mind). In general, an ontology
language can be considered to be a set that is generated by
a set of syntactic rules. Thus, we can consider an ontology
speciﬁcation as a formula set. We use a non-classical entail-
ment for inconsistency reasoning. In the following, we use |=
to denote the classical entailment, and use |≈ to denote some
non-standard inference relation, which may be parameterized
to remove ambiguities.

With classical reasoning, a query φ given an ontology Σ
can be expressed as an evaluation of the consequence relation

1http://www.daml.org/ontologies/399

Σ |= φ. There are only two answers to that query: either
‘yes’ (Σ |= φ), or ‘no’ (Σ 6|= φ). A ‘yes’ answer means
that φ is a logical consequence of Σ. A ‘no’ answer, how-
ever, means that φ cannot be deduced from Σ, because we
usually don’t adopt the closed world assumption when using
an ontology. Hence, a ‘no’ answer does not imply that the
negation of φ holds given an ontology Σ. For reasoning with
inconsistent ontologies, it is more suitable to use Belnap’s
four valued logic [Belnap, 1977] to distinguish the following
four epistemic states of the answers:

Deﬁnition 1
(a) Over-determined: Σ |≈ φ and Σ |≈ ¬φ.
(b) Accepted: Σ |≈ φ and Σ 6|≈ ¬φ.
(c) Rejected: Σ 6|≈ φ and Σ |≈ ¬φ.
(d) Undetermined: Σ 6|≈ φ and Σ 6|≈ ¬φ.

For an inconsistency reasoner it is expected that is able to
return meaningful answers to queries, given an inconsistent
In the case of a consistent ontology Σ, classical
ontology.
reasoning is sound, i.e., a formula φ deduced from Σ holds
in every model of Σ. This deﬁnition is not preferable for an
inconsistent ontology Σ as every formula follows from it us-
ing classical entailment. However, often only a small part of
Σ has been incorrectly constructed or modelled, while the re-
mainder of Σ is correct. Therefore, we propose the following
deﬁnition of soundness.
Deﬁnition 2 (Soundness) An inconsistency reasoner |≈ is
sound if the formulas that follow from an inconsistent the-
ory Σ follow from a consistent subtheory of Σ using classical
reasoning, namely, the following condition holds:

Σ |≈ φ ⇒ (∃Σ0 ⊆ Σ)(Σ0 6|= ⊥ and Σ0 |= φ).

In other words, the |≈-consequences must be justiﬁable on
the basis of a consistent subset of the theory. Note however,
that in the previous deﬁnition the implication should not hold
in the opposite direction. If the implication would also hold
in the opposite direction it would lead to an inconsistency
reasoner, which returns inconsistent answers. For example
if {a,¬a} ⊆ Σ, then the inconsistency reasoner would re-
turn that both a and ¬a hold given Σ, which is something
we would like to prevent. Hence, the inconsistency reasoner
should not return answers that follow from any consistent
subset of Σ, but from speciﬁcally chosen subsets of Σ.
In
other words, the selection of speciﬁc subsets on which |≈ will
be based is an integral part of the deﬁnition of an inconsis-
tency reasoner, and will be discussed in more detail in the
next section.

Deﬁnition 3 (Meaningfulness) An answer given by an in-
consistency reasoner is meaningful iff it is consistent and
sound. Namely, it requires not only the soundness condition,
but also the following condition:

Σ |≈ φ ⇒ Σ 6|≈ ¬φ.

An inconsistency reasoner is said to be meaningful iff all of
the answers are meaningful.

Because of inconsistencies, classical completeness is impos-
sible. We suggest the notion of local completeness:

Deﬁnition 4 (Local Completeness) An inconsistency rea-
soner is locally complete with respect to a consistent subthe-
ory Σ0 iff for any formula φ, the following condition holds:

Σ0 |= φ ⇒ Σ |≈ φ.
Since the condition can be represented as:
Σ 6|≈ φ ⇒ Σ0 6|= φ,

local completeness can be considered as a complement to the
soundness property. An answer to a query φi on Σ is said to
be locally complete with respect to a consistent set Σ0 iff the
following condition holds:

Σ0 |= φi ⇒ Σ |≈ φi.

Deﬁnition 5 (Maximality) An inconsistency reasoner
is
maximal iff there is a maximal consistent subtheory such that
its consequence set is the same as the consequence set of the
inconsistency reasoner:
∃(Σ0 ⊆ Σ)((Σ0 6|= ⊥) ∧ (∀Σ00 ⊃ Σ0 ∧ Σ00 ⊆ Σ)(Σ00 |= ⊥)∧

∀φ(Σ0 |= φ ⇔ Σ |≈ φ)).

We use the same condition to deﬁne the maximality for an
answer, like we do for local completeness.
Deﬁnition 6 (Local Soundness) An answer to a query Σ |≈
φ is said to be locally sound with respect to a consistent set
Σ0 ⊆ Σ, iff the following condition holds:
Σ |≈ φ ⇒ Σ0 |= φ.

Namely, for any positive answer, it should be implied by the
given consistent subtheory Σ0 under the standard entailment.
Proposition 3.1
(a) Local Soundness implies Soundness and Meaningfulness.
(b) Maximal completeness implies Local Completeness.
Given a query, there might exist more than one maximal con-
sistent subset and more than one locally-complete consistent
subset. Such different maximally consistent subsets may give
different |≈-consequences for a given query φ. Therefore, ar-
bitrary (maximal) consistent subsets may not be very useful
for the evaluation of a query by some inconsistency reasoner.
The consistent subsets should be chosen on structural or se-
mantic grounds indicating the relevance of the chosen subset
with respect to some query.

4 Selection Functions
An inconsistency reasoner uses a selection function to de-
termine which consistent subsets of an inconsistent ontology
should be considered in its reasoning process. The general
framework is independent of the particular choice of selec-
tion function. The selection function can either be based on
a syntactic approach, like Chopra, Parikh, and Wassermann’s
syntactic relevance [Chopra et al., 2000], or based on seman-
tic relevance like for example in computational linguistics as
in Wordnet [Budanitsky and Hirst, 2001].

Given an ontology (i.e., a formula set) Σ and a query φ,
a selection function s is one which returns a subset of Σ at
the step k > 0. Let L be the ontology language, which is
denoted as a formula set. We have the general deﬁnition about
selection functions as follows:

Figure 1: Linear Extension Strategy.

Deﬁnition 7 (Selection Functions) A selection function s is
a mapping s : P(L)×L×N → P(L) such that s(Σ, φ, k) ⊆
Σ.
Deﬁnition 8 A selection function s is called monotonic if
the subsets it selects monotonically increase or decrease, i.e.,
s(Σ, φ, k) ⊆ s(Σ, φ, k + 1), or vice verse.
For monotonically increasing selection functions, the initial
set is either an emptyset, i.e., s(Σ, φ, 0) = ∅, or a ﬁxed set
Σ0 when the locality is required. For monotonically decreas-
ing selection functions, usually the initial set s(Σ, φ, 0) = Σ.
The decreasing selection functions will reduce some formulas
from the inconsistent set step by step until they ﬁnd a maxi-
mally consistent set.

Monotonically increasing selection functions have the ad-
vantage that they do not have to return all subsets for consid-
eration at the same time. If a query Σ |≈ φ can be answered
after considering some consistent subset of the ontology Σ
for some value of k, then other subsets (for higher values of
k) don’t have to be considered any more, because they will
not change the answer of the inconsistency reasoner.

5 Strategies
An inconsistency reasoner that uses a monotonically increas-
ing/decreasing selection function will be called an inconsis-
tency reasoner that uses a linear extension strategy and a lin-
ear reduction strategy respectively.
A linear extension strategy is carried out as shown in Fig-
ure 1. Given a query Σ |≈ φ, the initial consistent subset Σ0
is set. Then the selection function is called to return a consis-
tent subset Σ00, which extends Σ0, i.e., Σ0 ⊂ Σ00 ⊆ Σ for the
linear extension strategy. If the selection function cannot ﬁnd
a consistent superset of Σ0, the inconsistency reasoner returns
the answer ‘undetermined’ (i.e., unknown) to the query. If the

set Σ00 exists, a classical reasoner is used to check if Σ00 |= φ
holds. If the answer is ‘yes’, the inconsistency reasoner re-
turns the ’accepted’ answer Σ |≈ φ. If the answer is ‘no’,
the inconsistency reasoner further checks the negation of the
query Σ00 |= ¬φ. If the answer is ‘yes’, the inconsistency
reasoner returns the ’rejected’ answer Σ |≈ ¬φ, otherwise the
current result is undetermined (def.1), and the whole process
is repeated by calling the selection function for the next con-
sistent subset of Σ which extends Σ00.

It is clear that the linear extension strategy may result in too
many ‘undetermined’ answers to queries when the selection
function picks the wrong sequence of monotonically increas-
ing subsets. It would therefore be useful to measure the suc-
cesfulness of (linear) extension strategies. Notice, that this
depends on the choice of the monotonic selection function.

In general, one should use an extension strategy that is not
over-determined and not undetermined. For the linear exten-
sion strategy, we can prove that the following properties hold:

Proposition 5.1 (Linear Extension) An inconsistency rea-
soner using a linear extension strategy satisﬁes the following
properties:
(a) never over-determined,
(b) may be undetermined,
(c) always sound,
(d) always meaningful,
(e) always locally complete,
(f) may not be maximal,
(g) always locally sound.

Therefore, an inconsistency reasoner using a linear exten-
sion strategy is useful to create meaningful and sound an-
swers to queries.
It is always locally sound and locally
complete with respect to a consistent set Σ0 if the selec-
tion function always starts with the consistent set Σ0 (i.e.,
s(Σ, φ, 0) = Σ0). Unfortunately it may not be maximal.

We call this strategy a linear one, because the selection
function only follows one possible ‘extension chain’ for cre-
ating consistent subsets. The advantages of the linear strategy
is that the reasoner can always focus on the current working
set Σ0. The reasoner doesn’t need to keep track of the exten-
sion chain. The disadvantage of the linear strategy is that it
may lead to an inconsistency reasoner that is undetermined.
There exists other strategies which can improve the linear ex-
tension approach, for example, by backtracking and heuristics
evaluation. We are going to discuss a backtracking strategy in
Section 6. The second reason why we call the strategy linear
is that the computational complexity of the strategy is linear
with respect to the complexity of the ontology reasoning. Let
n be the cardinality |Σ| of an ontology Σ and let the complex-
ity of |= be E.

Proposition 5.2 (Complexity of Linear Extension) The
complexity of |≈ in the linear extension strategy is n · E.

In other words, the linear extension strategy does not signiﬁ-
cantly increase the complexity of the ontology reasoning, be-
cause typically E is already PSPACE-complete for standard
concept languages [Donini, 2003].

6 Syntactic Relevance-based Selection

Functions

[Chopra et al., 2000] proposes syntactic relevance to measure
the relationship between two formulas in belief sets, so that
the relevance can be used to guide the belief revision based
on Schaerf and Cadoli’s method of approximate reasoning.
Given a formula set Σ, two atoms p, q are directly relevant,
denoted by R(p, q, Σ) iff there is a formula α ∈ Σ such that
p, q appear in α. A pair of atoms p and q are k-relevant with
respect to Σ iff there exist p1, p2, . . . , pk ∈ L such that: (a)
p, p1 are directly relevant; (b) pi, pi+1 are directly relevant,
i = 1, . . . , k − 1; and (c) pk, q are directly relevant (i.e., di-
rectly relevant is k-relevant for k = 0).

The notions of relevance above are based on propositional
logics. However, ontology languages are usually written in
some fragment of ﬁrst order logic. We extend the ideas of rel-
evance to those ﬁrst-order logic-based languages by restrict-
ing relevance to the co-occurrence of only the predicate let-
ters or constant symbols. The following deﬁnition specialises
the general deﬁnition of relevance for the case where φ is a
formula in an ontology.

Given a formula φ, we use I(φ), C(φ), R(φ) to denote the
sets of individual names, concept names, and relation names
that appear in the formula φ respectively.
Deﬁnition 9 (Direct relevance) Two formula φ, ψ are di-
rectly relevant iff there is a common name which appears both
in formula φ and formula ψ, i.e., I(φ) ∩ I(ψ) 6= ∅ ∨ C(φ) ∩
C(ψ) 6= ∅ ∨ R(φ) ∩ R(ψ) 6= ∅.
Deﬁnition 10 (Direct relevance to a set) A formula φ is rel-
evant to a formula set Σ iff there exists a formula ψ ∈ Σ such
that φ and ψ are directly relevant.
We can similarly specialise the notion of k-relevance.
Deﬁnition 11 (k-relevance) Two formulas φ, φ0 are k-
relevant with respect to a formula set Σ iff there exist for-
mulas ψ0, . . . ψk ∈ Σ such that φ and ψ0, ψ0 and ψ1, . . .,
and ψk and φ0 are directly relevant.
Deﬁnition 12 (k-relevance to a set) A formula φ is k-
relevant to a formula set Σ iff there exists a formula ψ ∈ Σ
such that φ and ψ are k-relevant with respect to Σ.
In inconsistency reasoning we can use syntactic relevance to
deﬁne a selection function s to extend the query ‘Σ |≈ φ?’ as
follows: We start with the query formula φ as a starting point
for the selection based on syntactic relevance. Namely, we
deﬁne:
Then the selection function selects the formulas ψ ∈ Σ which
are directly relevant to φ as a working set (i.e. k = 1) to see
whether or not they are sufﬁcient to give an answer to the
query. Namely, we deﬁne:

s(Σ, φ, 0) = ∅.

s(Σ, φ, 1) = {ψ ∈ Σ | φ and ψ are directly relevant}.

If the reasoning process can obtain an answer to the query,
it stops. Otherwise the selection function increases the rel-
evance degree by 1, thereby adding more formulas that are
relevant to the current working set. Namely, we have:
s(Σ, φ, k) = {ψ ∈ Σ | ψ is directly relevant to s(Σ, φ, k−1)},

for k > 1. This leads to a ”fan out” behavior of the selection
function: the ﬁrst selection is the set of all formulae that are
directly relevant to the query; then all formulae are selected
that are directly relevant to that set, etc. This intuition is for-
malized in the following:
Proposition 6.1 The syntactic relevance-based selection
function s is monotonically increasing.
Proposition 6.2 If k ≥ 1, then

s(Σ, φ, k) = {φ|φ is (k-1)-relevant to Σ}

The syntactic relevance-based selection functions deﬁned
above usually grows up to an inconsistent set rapidly. That
may lead to too many undetermined answers. In order to im-
prove it, we can require that the selection function returns a
consistent subset Σ00 at the step k when s(Σ, φ, k) is inconsis-
tent such that s(Σ, φ, k− 1) ⊂ Σ00 ⊂ s(Σ, φ, k). It is actually
a kind of backtracking strategies which are used to reduce the
number of undetermined answers to improve the linear exten-
sion strategy. We call the procedure an over-determined pro-
cessing(ODP) of the selection function. Note that the over-
determined processing need no to exhaust the powerset of the
set s(Σ, φ, k)−s(Σ, φ, k−1), because of the fact that if a con-
sistent set S cannot prove or disprove a query, then nor can
any subset of S. Therefore, one approach of ODP is to re-
turn just a maximally consistent subset. Let n be |Σ| and k be
n − |S|, i.e., the cardinality difference between the ontology
Σ and its maximal consistent subset S (note that k is usually
very small), and let C be the complexity of the consistency
checking. The complexity of the over-determined processing
is polynomial to the complexity of the consistency checking:
Proposition 6.3 (Complexity of ODP) The complexity of
the over-determined processing is nk · C.
Note that ODP introduces a degree of non-determinism: se-
lecting different maximal consistent subsets of s(Σ, φ, k)
may yield different answers to the query Σ |≈ φ. The simplest
example of this is Σ = {φ,¬φ}.

7 Prototype of PION
7.1 Implementation
We are implementing the prototype of PION by using SWI-
Prolog.2 PION implements an inconsistency reasoner based
on an linear extension strategy and the syntactic relevance-
based selection function as discussed in Sections 5 and 6.
The selection function returns the ﬁrst maximal consistent
subset for its over-determined processing. PION is powered
by XDIG, an extended DIG Description Logic interface for
Prolog [Huang and Visser, 2004]. PION supports the TELL
requests in DIG data format and in OWL, and the ASK re-
quests in DIG data format. A prototype of PION is available
for download at the website: http://wasp.cs.vu.nl/sekt/pion.

7.2 Experiments and Evaluation
We have tested the prototype of PION by applying it on sev-
eral example ontologies. These example ontologies are the
bird example, the brain example, the MarriedWoman exam-
ple, and the MadCow Ontolog, which are discussed in Section

2http://www.swi-prolog.org

2. We compare PION’s answers with their intuitive answers
which is supposed by a human to see to what extend PION
can provide intended answers.

tween an answer by PION and its intuitive answer.

intuitive answer;

For a query, there might exist the following difference be-
• Intended Answer: PION’s answer is the same as the
• Counter-intuitive Answer: PION’s answer is opposite
to the intuitive answer. Namely, the intuitive answer is
’accepted’ whereas PION’s answer is ’rejected’, or vice
versa.
• Cautious Answer: The intuitive answer is ’accepted’ or
• Reckless Answer: PION’s answer is ’accepted’ or ’re-
jected’ whereas the intuitive answer is ’undetermined’.
We call it a reckless answer, because under this situa-
tion PION returns just one of the possible answers with-
out seeking other possibly opposite answers, which may
lead to ’undetermined’.

’rejected’, but PION’s answer is ’undetermined’.

For each concept C in those ontologies, we create an instance
’the C’ on them. We make both a positive instance query and
a negative instance query of the instance ’the C’ for some
concepts C0 in the ontologies, like a query ’is the C a C0?’.
PION test results are shown in Figure 2. Of the four test ex-
amples, PION can return at least 85.7% intended answers. Of
the 396 queries, PION returns 24 cautious answers or reck-
less answers, and 2 counter-intuitive answers. However, we
would like to point out that the high rate of the intended
answers includes many ’undetermined’ answers. One inter-
esting (and we believe realistic) property of the Mad Cows
Ontology is that many concepts which are intuitively disjoint
(such as cows and sheep) are not actually declared as being
disjoint (keep in mind that OWL has an open world seman-
tics, and does not make the unique name assumption). As a
result, many queries such as ”is the cow a sheep” are indeed
undetermined on the basis of the ontology, and PION cor-
rectly reports them as undetermined. The average time cost
of the tested queries is about 5 seconds even on a low-end PC
(with 550 mhz CPU, 256 MB memory under Windows 2000).
The counter-intuitive results occurs in the MadCows Ex-
ample. PION returns the ’accepted’ answer to the query ’is
the mad cow a vegetarian?’. This counter-intuitive answer
results from the weakness of the syntactic relevance-based se-
lection function, because it always prefers a shorter relevance
path when a conﬂict occurs. In the mad cow example, the path
’mad cow - cow - vegetarian’ is shorter than the path ’mad
cow - eat brain - eat bodypart - sheep are animals - eat animal
- NOT vegetarian’. Therefore, the syntactic relevance-based
selection function ﬁnds a consistent sub-theory by simply ig-
noring the fact ’sheep are animals’. The problem results from
the unbalanced speciﬁcation between Cow and MadCow, in
which Cow is directly speciﬁed as a vegetarian whereas there
is no direct statement ’a MadCow is not a vegetarian’.

There are several alternative approaches to solve this kind
of problems. One is to introduce the locality requirement.
Namely, the selection function starts with a certain sub-theory
which must always be selected. For example, the statement
’sheep are animals’ can be considered to be a knowledge

Example
Bird
Brain
MarriedWoman
MadCow

Queries

50
42
50
254

IA CA RA CIA IA Rate(%)
50
36
48
236

100
85.7
96
92.9

0
4
0
16

0
2
2
0

0
0
0
2

ICR Rate(%)

100
100
100
99

IA = Intended Answers, CA = Cautious Answers, RA = Reckless Answers, CIA = Counter-Intuitive Answers, IA Rate =
Intended Answers(%), ICR Rate = IA+CA+RA(%).

Figure 2: PION Test Results

statement which cannot be ignored. Another approach is to
add a shortcut path, like the path ’mad cow - eat animal -
NOT vegetarian’ to achieve the relevance balance between
the concepts ’vegetarian’ and ’NOT vegetarian’, as shown in
the second mad cow example of PION testbed. The latter ap-
proach can be achieved automatically by accommodation of
the semantic relevance from the user queries. The hypothe-
sis is that both concepts appear in a query more frequently,
when they are semantically more relevant. Therefore, from a
semantic point of view, we can add a relevance shortcut path
between strongly relevant concepts.

8 Discussion and Conclusions
In this paper, we have presented a framework for reasoning
with inconsistent ontologies. We have introduced the for-
mal deﬁnitions of the selection functions, and investigated
the strategies of inconsistency reasoning processing based on
a linear extension strategy.

One of the novelties of our approach is that the selection
functions depend on individual queries. Our approach dif-
fers from the traditional one in paraconsistent reasoning, non-
monotonic reasoning, and belief revision, in which a pre-
deﬁned preference ordering for all of the queries is required.
This makes our approach more ﬂexible, and less inefﬁcient
to obtain intended results. The selection functions can be
viewed as ones creating query-speciﬁc preference orderings.
We have implemented and presented a prototype of PION.
In this paper we have provided the evaluation report of the
prototype by applying it to the several inconsistent ontology
examples. The tests show that our approach can obtain in-
tuitive results in most cases for reasoning with inconsistent
ontologies. Considering the fact that standard reasoners al-
ways results in either meaningless answers or incoherence er-
rors for queries on inconsistent ontologies, we can claim that
PION can do much better, because it can provide a lot of in-
tuitive, thus meaningful answers. This is a surprising result
given the simplicity of our selection function.

In future work, we are going to test PION with more large-
scale ontology examples. We are also going to investigate
different approaches for selection functions (e.g., semantic-
relevance based) and different extension strategies as alter-
natives to the linear extension strategy in combination with
different selection functions, and test their performance.

References
[Belnap, 1977] N. Belnap. A useful four-valued logic.

In
Modern Uses of Multiple-Valued Logic, pages 8–37, Dor-
drecht, 1977. Reidel.

[Benferhat and Garcia, 2002] S. Benferhat and L. Garcia.
Handling locally stratiﬁed inconsistent knowledge bases.
Studia Logica, pages 77–104, 2002.

[Beziau, 2000] J.-Y. Beziau. What is paraconsistent logic. In
Frontiers of paraconsistent logic, pages 95–111, Baldock,
2000. Research Studies Press.

[Budanitsky and Hirst, 2001] A. Budanitsky and G. Hirst.
An experimental,
Semantic distance
In
application-oriented evaluation of ﬁve measures.
Workshop on WordNet and Other Lexical Resources,
Pittsburgh, PA., 2001.

in wordnet:

[Chopra et al., 2000] S. Chopra, R. Parikh, and R. Wasser-
mann. Approximate belief revision- prelimininary report.
Journal of IGPL, 2000.

[Donini, 2003] F. Donini. Complexity of reasoning. In De-

scription Logic Handbook, pages 96–136, 2003.

[Huang and Visser, 2004] Z. Huang and C. Visser.

Ex-
tended DIG Description Logic Interface Support for Pro-
log. SEKT Deliverable D3.4.1.2, 2004.

[Huang et al., 2004] Z. Huang, F. van Harmelen, A.

ten
Teije, P. Groot, and C. Visser. Reasoning with Inconsistent
Ontologies: framework and prototype. SEKT Deliverable
D3.4.1, 2004.

[Lang and Marquis, 2001] J. Lang and P. Marquis. Remov-
ing inconsistencies in assumption-based theories through
knowledge-gathering actions. Studia Logica, pages 179–
214, 2001.

[Levesque, 1989] H. Levesque. A knowledge-level account
In Proceedings of IJCAI’89, pages 1061–

of abduction.
1067, 1989.

[Marquis and Porquet, 2003] P. Marquis and N. Porquet.
Resource-bounded paraconsistent inference. Annals of
Mathematics and Artiﬁcial Intelligence, pages 349–384,
2003.

[Schaerf and Cadoli, 1995] M. Schaerf and M. Cadoli.
Tractable reasoning via approximation. Artiﬁcial Intelli-
gence, pages 249–310, 1995.

[Schlobach and Cornet, 2003] S. Schlobach and R. Cornet.
Non-standard reasoning services for the debugging of de-
scription logic terminologies.
In Proceedings of IJCAI
2003, 2003.

