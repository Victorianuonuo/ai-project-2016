Fast (Incremental) Algorithms for Useful Classes of Simple Temporal Problems

with Preferences

T. K. Satish Kumar

Computer Science Division

University of California, Berkeley

tksk@eecs.berkeley.edu

Abstract

In this paper, we will provide a fast polynomial-
time algorithm for solving simple temporal prob-
lems (STPs) with piecewise linear convex prefer-
ence functions and a utilitarian objective function.
Our algorithm is motivated by the study of the
linear programming (LP)-dual of a given mincost
circulation problem (MCCP). We will also show
how this duality relationship between simple tem-
poral problems with preferences (STPPs) and MC-
CPs leads to fast incremental algorithms for solving
the former. Our algorithms bear important implica-
tions in planning, scheduling and execution moni-
toring scenarios where (partial) plans are subject to
repeated changes, and the most preferred solutions
to the underlying STPPs have to be computed and
updated fast (incrementally).

1 Introduction
Many applications in AI depend crucially on our ability to ef-
ﬁciently deal with combinatorial problems that involve both
a satisfaction component and an optimization component—
hence requiring us to reason about both hard and soft con-
straints. (The hard and soft constraints capture the satisfac-
tion and optimization components of a problem respectively.)
We are often required to express natural factors like fuzzi-
ness, probabilities, preferences and/or costs, and are subse-
quently interested in ﬁnding an optimal solution with respect
to one or more criteria. Important problems in planning and
scheduling, for example, involve metric temporal constraints
and various kinds of associated preferences.

Simple Temporal Problems (STPs) [Dechter et al, 1991]
constitute a well studied formalism used for reasoning with
metric time. An STP is characterized by a graph G = (cid:2)X , E(cid:3),
where X = {X0, X1 . . . XN } is a set of events (X0 is the
“beginning of the world” node and is set to 0 by conven-
tion), and e = (cid:2)Xi, Xj(cid:3) in E, annotated with the bounds
[LB(e), U B(e)], is a simple temporal constraint between
Xi and Xj indicating that Xj must be scheduled between
LB(e) and U B(e) seconds after Xi is scheduled (LB(e) ≤
U B(e)).1 The formalism of Simple Temporal Problems with

Preferences (STPPs) [Khatib et al, 2001] was introduced to
deal with situations where the factors guiding the relative ex-
ecution times of certain pairs of events are better modeled
(and abstracted) using preference functions rather than hard
constraints. Roughly, an STPP is characterized by a graph
G = (cid:2)X , E(cid:3), where X = {X0, X1 . . . XN } is a set of events
(X0 is the “beginning of the world” node and is set to 0 by
convention), and e = (cid:2)Xi, Xj(cid:3) in E, is either a hard sim-
ple temporal constraint annotated with [LB(e), U B(e)], or a
soft constraint annotated with a preference function Fe(t) :
R → R indicating the preference associated with scheduling
Xj exactly t seconds after Xi. Given such local temporal
preference functions, the objective function can be deﬁned in
a number of ways. One simple way is to maximize the mini-
mum of all the local temporal preferences; this is referred to as
Weakest Link Optimization (WLO). WLO in STPPs has been
shown to be tractable when all the preference functions are
semi-convex2 [Khatib et al, 2001]. The WLO model, how-
ever, corresponds to egalitarianism in utility theory, and it
is easy to illustrate its myopic focus. A much better opti-
mization criterion is to maximize the sum of the preferences
(corresponding to utilitarianism in utility theory).3

A polynomial-time algorithm for solving STPPs with
piecewise linear convex preference functions and a utilitarian
objective function is provided in [Morris et al, 2004]. This
algorithm, however, employs a general LP solver, and there-
fore does not tightly characterize the complexity of solving
such problems. Moreover, the algorithm is not incremen-
tal. We note that there is great value in designing simple and
fast polynomial-time algorithms for solving metric temporal
reasoning problems. This is evident, for example, even in
the simple case of STPs. Although STPs are characterized
by a set of simple linear (difference) constraints amenable
to a polynomial-time algorithm using a general LP solver,
it is well understood that it is much better to solve a given
STP using shortest path computations (say, by employing the
Bellman-Ford algorithm). This is because the latter approach
would lead to a simple and fast polynomial-time algorithm—
tightly characterizing the complexity of solving STPs. In the

Koubarakis, 1998] or RDTPs [Kumar, 2005].

2g(y) is semi-convex iff for any horizontal line L, the set of all

y, such that g(y) is not below L, constitutes a single interval.

1An STP can be solved in polynomial time [Dechter et al, 1991];
but in general, STPs are not as expressive as DTPs [Stergiou and

3In [Kumar, 2004], a polynomial-time algorithm for certain other

useful classes of STPPs is provided.

IJCAI-07

1954

F
F

(7, 5)
(7, 5)

E
E

(3, 1)
(3, 1)

A
A

(2, -5)
(2, -5)

(1, -3)
(1, -3)

(8, 0)
(8, 0)

(3, 2)
(3, 2)

(3, 1)
(3, 1)

D
D

A
A

(2, -1)
(2, -1)

(2, -5)
(2, -5)

B
B

(3, -4)
(3, -4)

C
C

F
F

)
)
3
3
 
 
,
,
1
1
(
(

B
B

(1, -5)
(1, -5)

(6, 5)
(6, 5)

(8, 0)
(8, 0)

E
E

(2, 2)
(2, 2)

(1, -1)
(1, -1)

(2, -4)
(2, -4)

(1, 4)
(1, 4)

C
C

(1, -2)
(1, -2)

D
D

(1, 1)
(1, 1)

Figure 1: Illustrates how ﬂow is augmented along negative cost cy-
cles in the residual graph (for solving a given MCCP). Every edge is
annotated with two numbers: the ﬁrst one being the capacity, and
the second one being the cost.
(a) (left-hand side) shows a sce-
nario where a negative cost cycle BCDEF is chosen to augment ﬂow
along. If a unit amount of ﬂow is pushed along this cycle, then it
leads to a situation as shown in (b) (right-hand side) with the appro-
priate residual edges. We note that there exists a negative cost cycle
even in (b)—namely FAB—therefore indicating that further ﬂow has
to be augmented to achieve optimality.

same spirit, it is imperative for us to develop simple and fast
polynomial-time algorithms for solving STPPs with piece-
wise linear convex preference functions and a utilitarian ob-
jective function—especially because these classes of STPPs
are fairly general and very useful in practice (see [Morris et
al, 2004] for motivating arguments). Further, it is also beneﬁ-
cial to develop incremental algorithms that can readily update
the solutions to (these kinds of) STPPs when (small) changes
are made to them (as in, say, a reﬁnement planner).

In this paper, we will ﬁrst provide a fast polynomial-time
algorithm for solving STPPs of the above mentioned kinds.
Our algorithm is motivated by the study of the LP-dual of
a given mincost circulation problem (MCCP). We will then
show how this duality relationship between STPPs and MC-
CPs leads to fast incremental algorithms for solving the for-
mer. Our algorithms bear important implications in planning,
scheduling and execution monitoring scenarios where (par-
tial) plans are subject to repeated changes, and the most pre-
ferred solutions to the underlying STPPs have to be computed
and updated fast (incrementally).

2 Brief Overview of MCCPs

A class of linear programs that can be solved better (com-
pared to employing a generic LP solver) using a specialized
set of techniques is the class of ﬂow problems; these include
variants like the well studied maxﬂow problems, mincost cir-
culation problems, generalized ﬂow problems, etc. Many in-
sights about a given LP problem can be drawn from study-
ing its dual. Given a primal LP problem, one can construct
its dual LP problem using a prescribed set of rules [Sultan,
1993]. A number of interesting theorems guide the relation-
ship between a given primal LP problem and its dual; these
include the weak duality theorem, the strong duality theorem
and complementary slackness [Sultan, 1993].4

4A well-known technique for designing approximation algo-
rithms, for example, is the so-called primal-dual method; LP-duality
is also extensively used in the study of ﬂows and cuts.

In this section, we will brieﬂy review MCCPs and some
of the well-known results/algorithms associated with solv-
ing them. An MCCP is characterized by a directed graph
G = (cid:2)V, E(cid:3), where V = {v1, v2 . . . vn} is the set of nodes,
and E is the set of edges.5 An edge e = (cid:2)vi, vj(cid:3) ∈ E is anno-
tated with two numbers: (a) a positive real number U (e) rep-
resenting the capacity of the edge (maximum amount of ﬂow
that can be pushed through the edge), and (b) a real number
(not necessarily positive) C(e) representing the cost of push-
ing a unit amount of ﬂow through the edge. The goal is to
come up with a circulation (an amount of ﬂow on each edge)
such that: (a) the conservation constraints hold at every node
(i.e. the total incoming ﬂow is equal to the total outgoing ﬂow
at every node), (b) the capacity constraints hold true for every
edge (i.e. the amount of ﬂow pushed through any edge is less
than or equal to the capacity of that edge), and (c) the overall
cost of the ﬂow is minimized.

Algorithms for solving MCCPs work by augmenting ﬂow
along negative cost cycles in the residual graph. Given a can-
didate circulation f , its residual graph Gf is deﬁned by re-
placing each edge (cid:2)u, v(cid:3) ∈ E by two edges: (a) (cid:2)u, v(cid:3) of
capacity U ((cid:2)u, v(cid:3)) − f ((cid:2)u, v(cid:3)) and cost C((cid:2)u, v(cid:3)), and (b)
(cid:2)v, u(cid:3) of capacity f ((cid:2)u, v(cid:3)) and cost −C((cid:2)u, v(cid:3)). A circula-
tion f ∗
can be shown to be optimal if and only if there are
no negative cost cycles in the residual graph Gf ∗ . Figure 1
shows an example of ﬂow augmentations in an MCCP.

Although repeatedly pushing ﬂow along any negative cost
cycle (in the residual graph) leads us eventually to the optimal
circulation, better running times are achieved by pushing ﬂow
along the min-mean cost cycles [Goldberg and Tarjan, 1989].
The best known algorithms for solving MCCPs work in time
O(m(log n)(m + n(log n))) [Orlin, 1988]. (Here, n is the
number of nodes, and m is the number of edges.) We note,
however, that when all the capacities are integers, there are
two things that characterize the number of (ﬂow-augmenting)
iterations required to solve an MCCP: (a) the strongly poly-
nomial running time of O(m(log n)(m + n(log n))), and (b)
the amount of the ﬂow itself; so, if the amount of the ﬂow
(not the cost of the ﬂow) is itself small, we need only a few
iterations. As we will allude to later, this can be exploited in
designing incremental algorithms for solving STPPs.

The LP formulation of an MCCP is as follows: (f (e) for

e∈E C(e)f (e)

(cid:3)u,v(cid:4)∈E f ((cid:2)u, v(cid:3)) = 0

(cid:3)v,w(cid:4)∈E f ((cid:2)v, w(cid:3)) −
(cid:2)

all e ∈ E are the variables)
(1) ∀e ∈ E: 0 ≤ f (e) ≤ U (e)
(2) ∀v ∈ V :
(3) Maximize −
We note that the capacity constraints and the conservation
constraints are reﬂected in (1) and (2) respectively. The dual
of the above LP is as follows: (l(e) for all e ∈ E, and p(v)
for all v ∈ V are the variables)
(1) ∀e ∈ E: l(e) ≥ 0
(2) ∀(cid:2)u, v(cid:3) ∈ E: l((cid:2)u, v(cid:3)) + p(u) − p(v) ≥ −C((cid:2)u, v(cid:3))
(3) Minimize

(cid:2)

e∈E l(e)U (e)

(cid:2)

(cid:2)

5Unlike in a maxﬂow problem, there are no explicitly nominated
source and/or terminal nodes. However, MCCPs are more general
than maxﬂow problems; a given maxﬂow problem can be modeled as
an instance of the MCCP by adding a back-edge from the terminal
to the source of sufﬁciently large capacity and negative cost.

IJCAI-07

1955

Cost
Cost

slope = U(<u,v>)
slope = U(<u,v>)

l(<u,v>)U(<u,v>)
l(<u,v>)U(<u,v>)

l(<u,v>)
l(<u,v>)

0
0

C(<u,v>)
C(<u,v>)

Xv - Xu
Xv - Xu

cost = C(<u,v>)
cost = C(<u,v>)

capacity = U(<u,v>)
capacity = U(<u,v>)

Xu
Xu

Xv
Xv

+∞∞∞∞
+∞∞∞∞

Cost
Cost

M(<u,v>)
M(<u,v>)

+∞∞∞∞
+∞∞∞∞

slo
slo

p
p

e
e

=
=

-s
-s

Preference
Preference

M(<u,v>)
M(<u,v>)

s
s

=
=

e
e

p
p

slo
slo

a
a

b
b

Xv - Xu
Xv - Xu

a
a

b
b

Xv - Xu
Xv - Xu

Figure 2: (a) (left-hand side) illustrates a primitive kind of cost
function for the time difference between two events Xv and Xu. (b)
(right-hand side) shows the corresponding cost and capacity annota-
tions on the edge (cid:2)Xu, Xv(cid:3) in the dual formulation of the problem.

Xu
Xu

(s, -b) 
(s, -b) 

(∞∞∞∞, b) 
(∞∞∞∞, b) 

(∞∞∞∞, -a) 
(∞∞∞∞, -a) 

Xv
Xv

-∞∞∞∞
-∞∞∞∞

-∞∞∞∞
-∞∞∞∞

We note that each capacity constraint in the primal corre-
sponds to a variable l(e) in the dual; further, the l(e)s are
non-negative because the capacity constraints are inequali-
ties. Similarly, each conservation constraint in the primal cor-
responds to a variable p(v) in the dual; further, the p(v)s are
unrestricted because the conservation constraints are equali-
ties. Each variable in the primal corresponds to an inequal-
ity in the dual. The left-hand sides of these inequalities fol-
low from tracing which variables in the primal participate in
which constraints (and what the respective coefﬁcients are).
The right-hand sides follow from the primal’s objective func-
tion. Finally, the coefﬁcients of the variables in the dual’s
objective function come from the right-hand sides of the cor-
responding constraints in the primal.

p(u) is referred to as the potential of the node u, and p(u)+
C((cid:2)u, v(cid:3)) − p(v) is referred to as the reduced cost Cp((cid:2)u, v(cid:3))
of the edge (cid:2)u, v(cid:3). It is easy to see that the sum of the reduced
costs along a cycle is equal to the sum of the costs (along the
same cycle). Further, it can be shown that a circulation f ∗
is
optimal if and only if there exists a potential function p such
that for all e ∈ Gf ∗ : Cp(e) ≥ 0 (see [Ahuja et al, 1993]).

3 LP-Duality Perspectives on STPPs

Examining the dual of an MCCP more closely, we notice that
the only constraints involving the potentials of the nodes are
difference inequalities of the form: l((cid:2)u, v(cid:3)) + p(u) − p(v) ≥
−C((cid:2)u, v(cid:3)) i.e. p(v) − p(u) ≤ C((cid:2)u, v(cid:3)) + l((cid:2)u, v(cid:3)). These
resemble the inequalities arising in STPs (with a few bene-
ﬁcial differences). First, we notice that if l((cid:2)u, v(cid:3)) is equal
to 0 for all (cid:2)u, v(cid:3), then these inequalities directly correspond
to simple temporal constraints.6
In the more general case
that l((cid:2)u, v(cid:3)) ≥ 0, we can reinterpret l((cid:2)u, v(cid:3)) as indicat-
ing the “amount by which the simple temporal constraint
p(v) − p(u) ≤ C((cid:2)u, v(cid:3)) is violated.” Further, the dual of an
MCCP allows us to minimize a positive linear combination
of the l((cid:2)u, v(cid:3))s (with the weight corresponding to l((cid:2)u, v(cid:3))
being the positive capacity U ((cid:2)u, v(cid:3))). This can be reinter-
preted as minimizing “a positive linear combination of how
much we violate each of the speciﬁed simple temporal con-

6Note that C((cid:2)u, v(cid:3)) is the cost associated with the edge (cid:2)u, v(cid:3),
and is allowed to be negative—maintaining the complete generality
of a difference inequality arising in STPs.

Figure 3: (b) (right-hand side) shows a gadget where a ≤ Xv −
Xu ≤ b, and the preference function in the feasible region has a
positive slope of s between Xv − Xu = a and Xv − Xu = b. (a)
(upper left-hand side) shows the equivalent cost function (ignoring
additive constants like M ((cid:2)u, v(cid:3))). (c) (lower left-hand side) shows
the required MCCP representation (in the dual formulation).

straints by.” In principle, therefore, STPPs with linear cost
functions (as shown in Figure 2) ﬁt the LP-dual model of MC-
CPs. Here (see Figure 2), every edge (cid:2)Xu, Xv(cid:3) is annotated
with a cost function (instead of a preference function) that re-
mains 0 as far as the difference Xv − Xu is ≤ C((cid:2)u, v(cid:3)), but
begins to increase linearly with positive slope U ((cid:2)u, v(cid:3)) be-
yond this bound; and the objective is to minimize the overall
cost (summed over all edges). Figure 2 also shows that such
a cost function translates to the edge (cid:2)Xu, Xv(cid:3) with capacity
U ((cid:2)u, v(cid:3)) and cost C((cid:2)u, v(cid:3)) in the dual formulation of the
problem as an MCCP.

We note/recollect two things before proceeding further.
First, a hard simple temporal constraint of the form p(v) −
p(u) ≤ C((cid:2)u, v(cid:3)) can be handled by modeling it as p(v) −
p(u) ≤ C((cid:2)u, v(cid:3))+l((cid:2)u, v(cid:3)) with U ((cid:2)u, v(cid:3)) being practically
set to ∞. Second, although the ﬂow-based techniques allow
us to efﬁciently solve only the dual LP problem (MCCP), the
strong duality theorem yields the value of the optimal solu-
tion for the (original) primal LP problem (STPP). In the next
section (where we will deal with STPPs having piecewise
linear convex preference functions and a utilitarian objective
function), we will show that the value of the optimal solution
alone can be used to iteratively construct the required optimal
schedule in its entirety.

3.1 Designing Gadgets

We will now introduce combinatorial structures called gad-
gets that will be used later in the paper to handle STPPs with
piecewise linear convex preference functions. These gadgets
are in turn built using the basic building block of Figure 2.7

Consider designing the gadget where a ≤ Xv − Xu ≤ b,
and the preference function in the feasible region is as in-
dicated in Figure 3(b) (with a positive slope of s between

7The introduction of such gadgets is partly inspired by the tech-

niques used in [Morris et al, 2004].

IJCAI-07

1956

+∞∞∞∞
+∞∞∞∞

Cost
Cost

+∞∞∞∞
+∞∞∞∞

slo p e = s
slo p e = s

a
a

b
b

Xv - Xu
Xv - Xu

Preference
Preference

r1
r1

r2
r2

r3
r3

r4
r4

r5
r5

r6
r6

a
a

b
b

slope
slope

=-s
=-s

Xv - Xu
Xv - Xu

L1
L1

L2
L2

L3
L3

[r1,r1]
[r1,r1]
Xi
Xi

[0,L1]
[0,L1]
Y1
Y1

Y2
Y2

[0,L2]
[0,L2]

[0,L3]
[0,L3]

Y3
Y3

Y4
Y4

L4
L4

[0,L4]
[0,L4]

Xj - Xi
Xj - Xi

L5
L5

[0,L5]
[0,L5]

Y5
Y5

Xj
Xj

Xu
Xu

(s, a) 
(s, a) 

(∞∞∞∞, b) 
(∞∞∞∞, b) 

(∞∞∞∞, -a) 
(∞∞∞∞, -a) 

Xv
Xv

-∞∞∞∞
-∞∞∞∞

-∞∞∞∞
-∞∞∞∞

Figure 4: Shows the combinatorial structures relevant to preference
functions with negative slopes. The three diagrams shown above are
in direct analogy with those of Figure 3.

Xv − Xu = a and Xv − Xu = b). Ignoring additive con-
stants, such a preference function is equivalent to a cost func-
tion as shown in Figure 3(a). This cost function is positive
everywhere, and can be modeled using two hard constraints
(namely, a ≤ Xv − Xu and Xv − Xu ≤ b), and one soft con-
straint (namely, Xv − Xu ≥ b with a cost of violation by 1
unit being equal to s). From Figure 2, therefore, the required
MCCP representation (in the dual formulation of the prob-
lem), is as shown in Figure 3(c). Using similar arguments (see
Figure 4), we can design a gadget where a ≤ Xv − Xu ≤ b,
and the preference function in the feasible region is as indi-
cated in Figure 4(b) (with a negative slope of −s between
Xv − Xu = a and Xv − Xu = b).

4 STPPs with Piecewise Linear Convex

Preference Functions

In this section, we will build the ﬁnal algorithm for solving
STPPs with piecewise linear convex preference functions8
and a utilitarian objective function. A key idea in this al-
gorithm involves the transformation of such a given STPP to
one that has preference functions limited to the types in Fig-
ures 3 and 4. The transformation works as follows. For every
piecewise linear convex preference function Fe(t), and cor-
responding to every (intermediate) landmark of this function,
we add a new variable. The difference between such consec-
utive variables is constrained to be between 0 and the length
of the corresponding interval,9 and the associated preference
function is designed to be in direct correspondence with the
slope of Fe(t) within this interval. Figure 5 illustrates this
process for a single preference function. The MCCP repre-
sentation of the new problem can be built by simulating pref-
erence functions with positive and negative slopes using the
gadgets in Figures 3 and 4 respectively. Figure 6 presents an

8For simplicity, we will assume that every such preference func-
tion is deﬁned to be within an interval; for example, Figure 5 is
taken to not only specify a preference function for Xj − Xi, but also
implicitly constrain Xj − Xi to be within [r1, r6].

9Note that we use hard constraints for this purpose.

e
e
c
c
n
n
e
e
r
r
e
e
f
f
e
e
r
r
P
P

0
0

L2
L2

Y3 – Y2
Y3 – Y2

0
0

e
e
c
c
n
n
e
e
r
r
e
e
f
f
e
e
r
r
P
P

L5
L5

Xj – Y5
Xj – Y5

Figure 5: The top diagram shows an example piecewise linear con-
vex preference function with the appropriate landmarks and lengths
deﬁned by it. The second diagram shows the intermediate variables
we would introduce between Xj and Xi.
It also shows the hard
simple temporal constraints we would add between consecutive vari-
ables created for this edge. The third diagram shows the slopes of
the line segments in the corresponding intervals (simply as deﬁned
in the original preference function). The bottom diagram shows two
examples of the kinds of preference functions we would like to con-
struct corresponding to each interval. In each case, the preference
value is 0 at the origin, and either increases or decreases linearly up
to a certain value; everywhere else, the preference value is assumed
to be −∞ (directly corresponding to the gadgets in Figures 3 and 4).

elaborate example of the dual formulation of an STPP (with
piecewise linear convex preference functions) as an MCCP.

1, re

2], [re

2, re

3] . . . [re
ke

, re

ke+1

2 . . . Y e

We will now argue that an optimal solution for the new
problem (with the additional variables) yields an optimal so-
lution for the original problem. The key insight stems from
the fact that in a piecewise linear convex preference func-
tion, the slopes of the line segments (deﬁned by the func-
tion) are monotonically decreasing (from left to right). Con-
sider any edge e = (cid:2)Xi, Xj(cid:3) with the associated prefer-
ence function Fe(t). Let the landmarks deﬁned by Fe(t) be
re
2 . . . re
1, re
ke+1, and let the corresponding intermediate vari-
ables be Y e
1 , Y e
ke (see Figure 5 for an example). The
slopes of the lines segments (deﬁned by Fe(t)) in the intervals
] are monotonically decreasing.
[re
Because of this property, and from the standard arguments as-
sociated with the optimality of the greedy algorithm for solv-
ing the “fractional knapsack problem,” it follows that the op-
timal setting of the intermediate variables Y e
ke for
any values of Xi and Xj is:10 Y ∗e
1, Xj −
2 ); . . . Y ∗e
1 ); Y ∗e
←
Y e
ke
Y ∗e
) (see Figure 7 for
ke−1
an example). For any values of Xi and Xj, therefore, the best
way to set the intermediate variables is to exhaust the slack in
the difference between one consecutive pair of (intermediate)
variables before going to the next pair (left to right). Since

3 ← Y ∗e
+ min(re
ke

3 − re
, Xj − Y ∗e

1 , Y e
1 +min(re

2 . . . Y e
2 −re

2, Xj − Y ∗e

2 + min(re

2 ← Y e

− re

ke−1

ke−1

10Note that Y e

1 is ﬁxed to Xi + LB((cid:2)Xi, Xj (cid:3)); see Figure 5.

IJCAI-07

1957

0.5
0.5

2
2

-3
-3

1
1

2
2

4
4

5
5

1
1

-1
-1

2
2

4
4

6
6

X1
X1

X1 – X0
X1 – X0

X0
X0

]
]
1
1
 
 
,
,
1
1
-
-
[
[

X2 – X0
X2 – X0

X2
X2

[2, 6]
[2, 6]

X3
X3

[1, 5]
[1, 5]

(0.5, -2)
(0.5, -2)

(2, -1)
(2, -1)

(3, 0)
(3, 0)

X1
X1

2
2

2
2

Xj - Xi
Xj - Xi

1.5
1.5

3.75
3.75

2.9
2.9

2.75
2.75

2.5
2.5

2
2

[0,2.5]
[0,2.5]

[0,2]
[0,2]

10.75
10.75
6.5
6.5

[0,6.5]
[0,6.5]

1.75
1.75

16.75
16.75

2.25
2.25

[0,2.25]
[0,2.25]
Y5
Y5

Xj
Xj

[0, 2]
[0, 2]

[0, 1]
[0, 1]

X1
X1

(∞∞∞∞, 1)
(∞∞∞∞, 1)

(∞∞∞∞, -1)
(∞∞∞∞, -1)

X0
X0

(∞∞∞∞, 1)
(∞∞∞∞, 1)

(∞∞∞∞, -2)
(∞∞∞∞, -2)

(∞∞∞∞, -1)
(∞∞∞∞, -1)

[2, 6]
[2, 6]

(∞∞∞∞, 2)
(∞∞∞∞, 2)

(∞∞∞∞, -2)
(∞∞∞∞, -2)

[-1, 1]
[-1, 1]

X3
X3

[1, 5]
[1, 5]

(1, -2)
(1, -2)

(1, 0)
(1, 0)

X2
X2

[0, 1]
[0, 1]

[1, 1]
[1, 1]

X0
X0
[2, 2]
[2, 2]

[0, 2]
[0, 2]

[0, 2]
[0, 2]

X2
X2

[2,2]
[2,2]

[0,1.5]
[0,1.5]
Y1
Y1

Y2
Y2

(∞∞∞∞, 6)
(∞∞∞∞, 6)

X3
X3

(∞∞∞∞, 5)
(∞∞∞∞, 5)

Xi
Xi

Xi
Xi

Xi
Xi

2
2

2
2

1.5
1.5

2.5
2.5

Y1
Y1

Y2
Y2

Y3
Y3

Y3
Y3

2
2

Y4
Y4

Y4
Y4

2.75
2.75

Y5 = Xj
Y5 = Xj

1.5
1.5

2
2

2
2

1.5
1.5

1.75
1.75

Y1
Y1

Y2
Y2

Y3
Y3

Y4
Y4

Y5
Y5

Xj
Xj

Figure 6: The top-left diagram shows an example STPP with hard
simple temporal constraints and two piecewise linear convex pref-
erence functions. The bottom-left diagram shows the intermediate
variables introduced for each preference function and the hard sim-
ple temporal constraints between them (dark nodes indicate newly
added variables). The right-hand side diagram shows the MCCP
representation of the problem. The dark lines indicate edges that en-
code different pieces of the corresponding preference functions. For
clarity, some hard simple temporal constraints that ﬂank the dark
edges are not shown encoded explicitly.

the optimal setting of the intermediate variables is completely
determined by the values assigned to the end-point variables
Xi and Xj, and since the intermediate variables do not par-
ticipate in any constraint of the original problem, an optimal
solution to the original STPP can be obtained simply by tak-
ing the projection of an optimal solution to the new STPP.

(t), Fe2

(t) . . . FeK

be v∗

be an optimal schedule, and let the value of s∗

Figure 8 presents the algorithm for reporting the value of
an optimal solution to a given STPP (with piecewise linear
convex preference functions and a utilitarian objective func-
tion).11 We will now argue that in fact the value of the optimal
solution alone is enough to efﬁciently construct the required
optimal schedule. Suppose we have K preference functions
(t). Let
in the STPP; let us call them Fe1
s∗
. The
idea is to replace the preference functions in the STPP (one
by one) by additional simple temporal constraints that would
serve to rule out all the non-optimal solutions. In each itera-
tion, we will replace an arbitrarily chosen preference function
(t) by a simple temporal constraint such that any optimal
Feh
solution to the new problem (with one less preference func-
tion) has a value ≥ v∗
In the remaining smaller problem
(with respect to the number of preference functions), we will
follow the same procedure to replace another arbitrarily cho-
sen preference function by a simple temporal constraint, and
so forth. After K iterations, therefore, we will be left with an
STP—any solution to which has a value ≥ v∗
. That is, all the
non-optimal solutions would have been ruled out, and an op-
timal solution to the original problem can be obtained simply

.

11We assume that the additive constants that arise in the transfor-

mations involved (like in Figure 3) are appropriately factored in.

Figure 7: Illustrates that for any (values of) Xi and Xj , the opti-
mal way to set the intermediate variables is to exhaust the slack in
one consecutive pair of (intermediate) variables before going to the
next (left to right). When Xj − Xi = 10.75, for example, the ﬁrst
way of setting the variables (third diagram from top) exhausts all
the leftmost slacks, creating a total value of (1.5)((2 − 0)/1.5) +
(2.5)((3.75 − 2)/2.5) + (2)((3.75 − 3.75)/2) + (2.75)((1.75 −
3.75)/6.5) = 2.9. This is indeed equal to the true value of the pref-
erence function at Xj − Xi = 10.75. We note that any other way of
setting the intermediate variables leads to a non-optimal value. For
example, in the second way (bottom diagram), the total preference
is equal to (1.5)((2 − 0)/1.5) + (2)((3.75 − 2)/2.5) + (2)((3.75 −
3.75)/2) + (1.5)((1.75 − 3.75)/6.5) + (1.75)((0 − 1.75)/2.25) =
1.58 which is less than the actual preference value at this point.

by solving the ﬁnal STP using shortest path computations.

The crucial step in the above process, however, is to replace
(t) by an appro-
an arbitrarily chosen preference function Feh
priate simple temporal constraint such that an optimal solu-
tion to the new problem has a value ≥ v∗
. This can essentially
be done by a standard backtrack-free search algorithm that
utilizes the procedure of Figure 8 in every iteration. Suppose
(t) is associated with the edge (cid:2)Xi, Xj(cid:3). It is easy to see
Feh
(Xj − Xi) ≥ v is in fact equivalent
that the requirement Feh
to a simple temporal constraint between Xi and Xj (because
(t) is always a non-
of semi-convexity). Now, suppose Feh
negative integer in the range [0, M ].12 We can consider the
(Xj − Xi) ≥ d,
simple temporal constraint equivalent to Feh
and examine whether d plus the value of the optimal solu-
tion to the smaller problem (that incorporates the new simple
(t)) is equal to the value of
temporal constraint instead of Feh
the optimal solution to the original problem. If it is, then the
newly added simple temporal constraint is the one that can
(t). It is easy to see that ranging over all possi-
replace Feh
ble values of d (viz. from 0 to M ), we will always be able to
ﬁnd an appropriate cutoff value—the corresponding simple
(t).
temporal constraint of which can replace the function Feh
The running time complexity of Figure 8 is dominated by
that of solving the intermediate MCCP (step 3 in Figure 8).

12If Feh

(t) is not always integral, then we can scale all the num-
bers appropriately so that M will be indicative of the precision of
the numbers appearing in the range of the function.

IJCAI-07

1958

ALGORITHM: Solve-Piecewise-Linear-Convex-STPP-Value
INPUT: An STPP with piecewise linear convex preference
functions and a utilitarian objective function.
OUTPUT: Value of an optimal schedule that satisﬁes all hard
constraints (if possible) and maximizes sum of the preferences.
(1) For every preference function Fe(t) (let e = (cid:2)Xi, Xj (cid:3)):

ke+1, and introduce the

2 . . . Y e

2 . . . re
1 , Y e

(a) Identify the landmarks re
1, re
corresponding new variables Y e
ke (see Figure 5).
(b) Create simple temporal constraints between consecutive
points in Y e
1 , and between
Y e
ke and Xj as shown in Figures 5,6.
(c) For each of the linear preference functions thus deﬁned
(see Figures 5,6), build gadgets as shown in Figures 3,4.

ke , between Xi and Y e

1 , Y e

2 . . . Y e

(2) Encode hard constraints as explained in the text.
(3) Solve the resulting MCCP using efﬁcient “ﬂow-based” tech-
niques (see [Orlin, 1988] and [Goldberg and Tarjan, 1989]).
(4) RETURN: the value of the solution.
END ALGORITHM

Figure 8: A fast polynomial-time algorithm for reporting the value
of an optimal solution to a given STPP with piecewise linear convex
preference functions and a utilitarian objective function. We assume
that a value of −∞ is returned when the problem is infeasible.

This complexity is O(m(log n)(m + n(log n))) where n
(number of nodes) and m (number of edges) take into ac-
count the new variables and constraints/edges created for the
landmarks of the preference functions. The total running time
of the algorithm (for constructing the optimal schedule) is
K.R.T where K is the total number of preference functions,
R is the largest value of any preference function, and T is the
complexity of Figure 8 (as analyzed above).

5 Incremental Computation

Since our algorithms for solving STPPs (of the foregoing
kinds) are based on solving MCCPs, they can also readily be
made incremental. Incremental algorithms for ﬂow problems
can be found in [Hartline and Sharp, 2005], and incremental
computation of resource-envelopes based on ﬂow techniques
can be found in [Kumar, 2003] and [Muscettola, 2004]. MC-
CPs can also be solved incrementally using techniques very
similar to that in [Kumar, 2003] (as illustrated in Figures 5
and 6 of that paper). The main idea is the same—reverse the
ﬂow on edges that are not present in the new instance of the
MCCP by ﬁrst computing the amount by which such a reverse
ﬂow would violate the conservation constraints at each of the
nodes; after the excess at each node is measured, a maxﬂow
is staged between two auxiliary nodes S(cid:6)
to regain
conservation consistency; a subsequent optimization phase is
carried out that respects this consistency—hence solving the
new instance of the problem. The running time of this incre-
mental procedure depends on “how much ﬂow remains to be
augmented”—and this characterizes the “difference” between
the original problem instance and the new problem instance
(see [Kumar, 2003] for more details).

and T (cid:6)

It is worth noting that an incremental procedure for solv-
ing MCCPs ﬁnds immense use in iteratively building the op-
timal schedule for an STPP (as explained before). Further,
incremental computation of solutions to STPPs is extremely
important for an active management of planning, scheduling,

and execution monitoring. In a reﬁnement planner, for exam-
ple, an STPP might characterize the various preferences and
temporal constraints in a partial plan—the optimal solution to
which might provide a useful heuristic value in the search for
a good plan. Because reﬁnement operators used to extend a
partial plan include various kinds of incremental changes to
it, an incremental algorithm for solving STPPs is likely to be
much more useful than recomputation (from scratch) at each
node in the search tree.

6 Conclusions and Future Work
We presented a fast polynomial-time algorithm for solving
STPPs with piecewise linear convex preference functions and
a utilitarian objective function. Our algorithm was motivated
by the LP-duality relationships between STPPs and MCCPs,
and could be made incremental—thereby bearing important
implications in many real-life applications. In future work,
we are interested in identifying richer classes of STPPs that
can be analyzed and solved efﬁciently using LP-duality.

References
[Ahuja et al, 1993] Ahuja R. K., Magnanti T. L. and Orlin J. B.
1993. Network Flows: Theory, Algorithms, and Applica-
tions. Prentice Hall, New Jersey.

[Dechter et al, 1991] Dechter R., Meiri I. and Pearl J. 1991. Tem-

poral Constraint Networks. Artiﬁcial Intelligence, Vol. 49.

[Goldberg and Tarjan, 1989] Goldberg A. V. and Tarjan R. E. 1989.
Finding Minimum-Cost Circulations by Cancelling Negative
Cycles. Journal of ACM 36(1989), 873-886.

[Hartline and Sharp, 2005] Hartline J. and Sharp A. 2005.

Incre-

mental Flow. www.cs.cornell.edu/w8/˜jhartlin/incﬂow.pdf

[Khatib et al, 2001] Khatib L., Morris P., Morris R. and Rossi F.
2001. Temporal Constraint Reasoning with Preferences.
Proceedings of IJCAI’2001.

[Kumar, 2003] Kumar T. K. S. 2003. Incremental Computation of
Resource-Envelopes in Producer-Consumer Models. Pro-
ceedings of the 9th International Conference on Principles
and Practice of Constraint Programming (CP’2003).

[Kumar, 2004] Kumar T. K. S. 2004. A Polynomial-Time Algo-
rithm for Simple Temporal Problems with Piecewise Con-
stant Domain Preference Functions. Proceedings of the 19th
National Conference on Artiﬁcial Intelligence (AAAI’2004).
[Kumar, 2005] Kumar T. K. S. 2005. On the Tractability of Re-
stricted Disjunctive Temporal Problems. Proceedings of the
15th International Conference on Automated Planning and
Scheduling (ICAPS’2005).

[Morris et al, 2004] Morris P., Morris R., Khatib L., Ramakrish-
nan S. and Bachmann A. 2004. Strategies for Global Opti-
mization of Temporal Preferences. Proceedings of CP’2004.

[Muscettola, 2004] Muscettola N. 2004.

Incremental Maximum

Flows for Fast Envelope Computation. ICAPS’2004.

[Orlin, 1988] Orlin J. B. 1988. A Faster Strongly Polynomial Min-

imum Cost Flow Algorithm. STOC’1988.

[Stergiou and Koubarakis, 1998] Stergiou K. and Koubarakis M.
1998. Backtracking Algorithms for Disjunctions of Tempo-
ral Constraints. Proceedings of AAAI’1998.

[Sultan, 1993] Sultan A. 1993. Linear Programming: An Introduc-

tion with Applications. San Diego: Academic Press, 1993.

IJCAI-07

1959

