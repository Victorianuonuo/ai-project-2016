Memory-Bounded Dynamic Programming for DEC-POMDPs

Division of Engineering and Applied Sciences

Sven Seuken∗

Harvard University

Cambridge, MA 02138
seuken@eecs.harvard.edu

Shlomo Zilberstein

Department of Computer Science

University of Massachusetts

Amherst, MA 01003
shlomo@cs.umass.edu

Abstract

Decentralized decision making under uncertainty
has been shown to be intractable when each agent
has different partial information about the domain.
Thus, improving the applicability and scalability
of planning algorithms is an important challenge.
We present the ﬁrst memory-bounded dynamic pro-
gramming algorithm for ﬁnite-horizon decentral-
ized POMDPs. A set of heuristics is used to iden-
tify relevant points of the inﬁnitely large belief
space. Using these belief points, the algorithm
successively selects the best joint policies for each
horizon. The algorithm is extremely efﬁcient, hav-
ing linear time and space complexity with respect
to the horizon length. Experimental results show
that it can handle horizons that are multiple orders
of magnitude larger than what was previously pos-
sible, while achieving the same or better solution
quality. These results signiﬁcantly increase the ap-
plicability of decentralized decision-making tech-
niques.

Introduction

1
For over 50 years, researchers in artiﬁcial intelligence and
operations research have been working on decision making
under uncertainty. The Markov decision process (MDP) has
been proved to be a useful framework for centralized deci-
sion making in fully observable stochastic environments. In
the 1960’s, partially observable MDPs (POMDPs) were in-
troduced to account for imperfect state information. An even
more general problem results when two or more agents have
to cooperate to optimize a joint reward function, while hav-
ing different local observations. This problem arises in many
application domains such as multi-robot coordination, manu-
facturing, information gathering and load balancing.

The decentralized partially observable MDP (DEC-
POMDP) framework is one way to model these problems.
It has been shown that ﬁnite-horizon DEC-POMDPs are
NEXP-complete [Bernstein et al., 2000]. Thus, decen-
tralized control of multiple agents is signiﬁcantly harder
This work was done while the author was a graduate student
in the Computer Science Department of the University of Mas-
sachusetts, Amherst.

∗

than single-agent control and provably intractable. Even ε-
approximations are hard [Rabinovich et al., 2003]. Due to
these complexity results, optimal algorithms have mostly the-
oretical signiﬁcance. Consequently, researchers have started
to focus on approximate algorithms to solve signiﬁcantly
larger problems. But scalability remains a major research
challenge and the main question – how to use the available
memory and time most efﬁciently – remains unanswered. A
detailed survey of existing formal models, complexity results
and planning algorithms is available in [Seuken and Zilber-
stein, 2005].

This paper presents a fundamentally new approach to over-
come the time and space complexity of existing optimal and
approximate algorithms. Most of the previous algorithms
cannot solve problems with a horizon larger than 10. Our
goal has been to increase this horizon barrier by several orders
of magnitude. The approach is based on the ﬁrst exact dy-
namic programming (DP) algorithm for ﬁnite-horizon DEC-
POMDPs [Hansen et al., 2004]. The original DP algorithm,
presented in Section 3, builds the ﬁnal solution bottom-up,
starting with a 1-step policy for the last time step and succes-
sively working towards the ﬁrst time step. In every iteration,
it eliminates unnecessary strategies to reduce the total number
of policies kept in memory. Unfortunately, the algorithm runs
out of memory very quickly. The key observation is that this
algorithm keeps too many policies in memory, even though
only very few of them are actually necessary for optimal or
near-optimal behavior. Thus, the main idea is to identify a
small set of policies that are actually useful for the construc-
tion of good joint policies. This is achieved by using a set
of top-down heuristics to identify tentative policies that are
not necessarily optimal, but can be used to explore the belief
space. Section 4 describes how a set of relevant belief states
can be identiﬁed using these heuristics. The DP algorithm
can then select the optimal joint policy trees for those belief
states, leading to a bounded number of good policy trees. Sec-
tion 5 presents the details of our memory-bounded dynamic
programming algorithm and proves its linear time and space
complexity with respect to the horizon length. We have ap-
plied our algorithm to a set of standard test problems from
the literature. Section 6 details the results and shows that the
algorithm can solve problems with horizons that are multiple
orders of magnitude larger than what was previously possible.

IJCAI-07

2009

2 Related Work
Over the last ﬁve years, researchers have proposed a wide
range of optimal and approximate algorithms for decentral-
ized multi-agent planning. In this paper we focus on ﬁnite-
horizon problems;
inﬁnite-horizon problems often require
different solution techniques. One important class of ﬁnite-
horizon algorithms is called “Joint Equilibrium-based Search
for Policies” (JESP), where the algorithms do not search for
the globally optimal solution, but instead aim for local opti-
mality [Nair et al., 2003]. The authors introduce the idea of
focusing on the reachable belief states, but the approach still
leads to exponential complexity.

The approach that is closest to our work is called Point-
Based Dynamic Programming for DEC-POMDPs [Szer and
Charpillet, 2006]. That algorithm computes the policies
based on a subset of the reachable belief states. But in con-
trast to our work, this approach does not employ top-down
heuristics to identify the most useful belief states and it is not
memory-bounded. It still leads to double-exponential worst-
case complexity.

A DEC-POMDP can also be seen as a partially observ-
able stochastic game (POSG) with common payoffs [Emery-
Montemerlo et al., 2004]. In this approach, the POSG is ap-
proximated as a series of smaller Bayesian games. Interleav-
ing planning and execution, this algorithm ﬁnds good solu-
tions for short horizons, but it still runs out of memory after
horizon 10.

Another way of addressing the high complexity of DEC-
POMDPs is to develop algorithms for problem classes that
exhibit certain structure [Becker et al., 2004; Goldman and
Zilberstein, 2005]. However, such techniques still have expo-
nential complexity unless the interaction between the agents
is very limited. A model that is particularly useful if the
agents do not share the same payoff function is the I-POMDP
framework [Gmytrasiewicz and Doshi, 2005].
I-POMDPs
have similar complexity barriers, leading the authors to in-
troduce an approximate algorithm based on particle ﬁltering
[Doshi and Gmytrasiewicz, 2005]. This approach addresses
the belief space complexity, but the policy space complexity
remains too high and limits scalability.

3 Solution Techniques for DEC-POMDPs
We formalize the problem using the DEC-POMDP frame-
work [Bernstein et al., 2000]. Our results, however, apply
to equivalent models such as the MTDP or the COM-MTDP
[Pynadath and Tambe, 2002].
Deﬁnition 1 (DEC-POMDP) A ﬁnite-horizon decentralized
partially observable Markov decision process is a tuple
(cid:2)I, S, b0,{Ai}, P,{Ωi}, O, R, T(cid:3) where

• I is a ﬁnite set of agents indexed 1,...,n.
• S is a ﬁnite set of states.
• b0 ∈ ΔS is the initial belief state (state distribution).
• Ai is a ﬁnite set of actions available to agent i and
(cid:3)A = ⊗i∈I Ai is the set of joint actions, where
(cid:3)a = (cid:2)a1, ..., an(cid:3) denotes a joint action.

• P is a Markovian transition probability table. P (s(cid:3)|s, (cid:3)a)
denotes the probability that taking joint action (cid:3)a in state
s results in a transition to state s(cid:3).
• Ωi is a ﬁnite set of observations available to agent i and
(cid:3)Ω = ⊗i∈IΩi is the set of joint observations, where
(cid:3)o = (cid:2)o1, ..., on(cid:3) denotes a joint observation.
• O is a table of observation probabilities. O((cid:3)o|(cid:3)a, s(cid:3))
denotes the probability of observing joint observation (cid:3)o
given that joint action (cid:3)a was taken and led to state s(cid:3).
• R : S × (cid:3)A → (cid:7) is a reward function. R((cid:3)a, s(cid:3)) denotes
the reward obtained from transitioning to state s(cid:3) after
taking joint action (cid:3)a.

• T denotes the total number of time steps.
Because the underlying system state of a DEC-POMDP is
not available to the agents during execution time, they must
base their actions on beliefs about the current situation. In a
single-agent setting, the belief state, a distribution over states,
is sufﬁcient for optimal action selection. In a distributed set-
ting, each agent must base its actions on a multi-agent belief
state – a distribution over states and over the other agents’
policies. Unfortunately, there is no compact representation
of this multi-agent belief state. It only exists implicitly for
each agent if the joint policy is known and the entire history
of local observations is taken into consideration.

Deﬁnition 2 (Local and Joint Policies for a DEC-POMDP)
A local policy for agent i, δi, is a mapping from local histo-
ries of observations oi = oi1 ··· oit over Ωi, to actions in Ai.
A joint policy, δ = (cid:2)δ1, ..., δn(cid:3), is a tuple of local policies,
one for each agent.

Solving a DEC-POMDP means ﬁnding a joint policy that
maximizes the expected total reward. A policy for a sin-
gle agent i can be represented as a decision tree qi, where
nodes are labeled with actions and arcs are labeled with
observations (a so called policy tree). Let Qt
i denote the
set of horizon-t policy trees for agent i. A solution to a
DEC-POMDP with horizon t can then be seen as a vec-
tor of horizon-t policy trees, a so called joint policy tree
δt = (qt
n), one policy tree for each agent, where
1, qt
i ∈ Qt
qt
i. These policy trees can be constructed in two differ-
ent ways: top-down or bottom-up. If the goal is the optimal
policy, both techniques lead to the same ﬁnal policy. But if
the goal is an approximate solution, the different characteris-
tics of the construction processes can be exploited.

2, ..., qt

Top-down Approach The ﬁrst algorithm that used a top-
down approach, MAA∗, makes use of heuristic search tech-
niques [Szer et al., 2005]. It is an extension of the standard A∗
algorithm where each search node contains a joint policy tree.
For example, if δ2 is a horizon-2 joint policy tree, an expan-
sion of the corresponding search node generates all possible
joint policy trees of horizon 3 that use the joint policy tree δ2
for the ﬁrst two time steps. Using a set of heuristics that are
suitable for DEC-POMDPs, some parts of the search tree can
be pruned. But the algorithm runs out of time very quickly,
because the search space grows double exponentially.

IJCAI-07

2010

Bottom-up Approach: Dynamic Programming The ﬁrst
non-trivial algorithm for solving DEC-POMDPs used a
bottom-up approach [Hansen et al., 2004]. Policy trees were
constructed incrementally, but instead of successively com-
ing closer to the frontiers of the trees, this algorithm starts
at the frontiers and works its way up to the roots using dy-
namic programming (DP). The policy trees for each agent are
kept separately throughout the construction process. In the
end, the best policy trees are combined to produce the optimal
joint policy. The DP algorithm has one iteration per step in
the horizon. First, all policies with horizon 1 are constructed.
In each consecutive iteration, the DP algorithm is given a set
of horizon-t policy trees Qt
is
then created by an exhaustive backup. This operation gener-
ates every possible depth-t+1 policy tree that makes a transi-
tion, after an action and observation, to the root node of some
depth-t policy tree. After the exhaustive backup, the size of
the set of policy trees is |Qt+1
If all pol-
icy trees are generated for every step in the horizon, the total
number of complete policy trees for each agent is of the order
O(|A|(|O|T )). This double exponential blow-up is the reason
why the naive algorithm would quickly run out of memory.

i for each agent i. The set Qt+1

i

| = |A||Qt

i||O|.

i

To alleviate this problem, the algorithm uses iterated elimi-
nation of dominated policies. For two agents i and j, a policy
tree qi ∈ Qi is dominated, if for every possible multi-agent
belief state mb ∈ Δ(S × Qj) there is at least one other policy
tree qk ∈ Qi \ qi that is as good as or better than qi. This test
for dominance is performed using a linear program. Remov-
ing a dominated policy tree does not reduce the value of the
optimal joint policy. If used in every iteration, this technique
signiﬁcantly reduces the number of policy trees kept in mem-
ory, because for every eliminated policy tree q, a whole set of
policy trees containing q as a subtree is implicitly eliminated
as well. But, even with this pruning technique, the number of
policy trees still grows quickly and the algorithm runs out of
memory even for very small problems.

A more detailed analysis of the construction process shows
that most of the policy trees kept in memory are useless.
These policy trees could be eliminated early on, but they are
not. One reason is that a policy tree can only be eliminated
if it is dominated for every belief state. But for many DEC-
POMDPs, only a small subset of the belief space is actually
reachable. Another reason is that a policy tree can only be
eliminated if it is dominated for every possible belief over the
other agents’ policies. But obviously, during the construc-
tion process, the other agents also maintain a large set of pol-
icy trees that will eventually prove to be useless. Inevitably,
these policy trees are also considered in the test for domi-
nance which inhibits the elimination of a large set of policies.
Unfortunately, these drawbacks of the pruning process can-
not be avoided. Before the algorithm reaches the root of the
policy trees, it cannot predict which beliefs about the state
and about the other agents’ policies will eventually be useful.
This observation leads to the idea of combining the bottom-
up and top-down approaches: Using top-down heuristics to
identify relevant belief states for which the dynamic program-
ming algorithm can then evaluate the bottom-up policy trees
and select the best joint policy. Figure 1 illustrates this idea.

a

o1

2o

b

a

1o

b

2o

1o

a

b

o2

a

Top−down
Heuristics

Identify Relevant Belief Points

b

o
1

b

o
2

a

a

2o

a

o
1

b

a

o2

b

1o

b

Bottom−up

DP

Figure 1: The construction process of a single-agent policy
tree combining the top-down and the bottom-up approach.
4 Top-Down Heuristics for DEC-PODMPs
Even though the agents do not have access to the belief state
during execution time, it can be used to evaluate the bottom-
up policy trees computed by the DP algorithm. Policy trees
that are good for a centralized belief state are often also good
candidates for the decentralized policy. Obviously, a belief
state that corresponds to the optimal joint policy is not avail-
able during the construction process. But fortunately, a set of
belief states can be computed using multiple top-down heuris-
tics – efﬁcient algorithms that ﬁnd useful top-down policies.
Once a top-down heuristic policy is generated, the most likely
belief state can be computed. Obviously, this does only lead
to exactly one belief state. But depending on the speciﬁc
problem, the bottom-up DP algorithm can handle up to a few
dozen belief state candidates (at most 50 in our experiments).
A whole set of reachable belief states can be identiﬁed using
standard sampling techniques. The rest of this section de-
scribes several useful heuristics to identify these belief states.
The MDP Heuristic A DEC-POMDP can be turned into a
fully-observable MDP by revealing the underlying state af-
ter each step. A joint policy for the resulting MDP assigns
joint actions to states, thus this policy cannot be used for the
real DEC-POMDP. But during the construction process, it has
proven very useful to identify reachable belief states that are
very likely to occur.
The Inﬁnite-Horizon Heuristic
Inﬁnite-horizon DEC-
POMDPs are signiﬁcantly different from ﬁnite-horizon DEC-
Instead of maximizing expected reward over T
POMDPs.
time steps, the agents maximize the reward over an inﬁnite
time period. Obviously, optimal policies for ﬁnite-horizon
problems with a very short horizon may be very different
from those for inﬁnite-horizon problems. But the longer
the horizon, the more similar the solutions become in gen-
eral. Thus, inﬁnite-horizon policies can be used as top-down
heuristics to identify useful belief states for problems with
sufﬁciently long horizons.
Inﬁnite-horizon DEC-POMDPs
are undecidable and thus it is generally impossible to de-
termine when optimal policies for ﬁnite and inﬁnite horizon
problems match. But because the rewards are discounted over
time, a bound on the difference in value can be guaranteed.
Recently, approximate algorithms have been introduced that

IJCAI-07

2011

can solve those problems very efﬁciently [Bernstein et al.,
2005]. The resulting policies can be used to simulate mul-
tiple runs where the execution is simply stopped when the
desired horizon and a corresponding belief state are reached.
The Random Policy Heuristic The MDP heuristic and the
inﬁnite-horizon heuristic can be modiﬁed by adding some ε-
exploration – choosing random actions with probability ε in
every step. This helps cover a larger area of the belief space,
in particular if the other heuristics are not well suited for the
problem. For the same reason, a completely random heuristic
can also be used – choosing actions according to a uniform
distribution. This provides a set of reachable belief states and
is not dependent on the speciﬁc problem. Obviously, those
random policies achieve low values. But this is not a problem,
because only the belief states and not the policies are used.
Heuristic Portfolio The usefulness of the heuristics and,
more importantly, the computed belief states are highly de-
pendent on the speciﬁc problem. For some problems, the so-
lution computed with the MDP heuristic might be very simi-
lar to the optimal policy and accordingly the computed belief
states are very useful. But for other problems, this heuristic
might focus the algorithm on the wrong parts of the belief
space and consequently it may select poor policy-tree candi-
dates for the decentralized case. This problem can be alle-
viated by using what we call a heuristic portfolio.
Instead
of just using one top-down heuristic, a whole set of heuris-
tics can be used to compute a set of belief states. Thus, each
heuristic is used to select a subset of the policy trees. Learn-
ing algorithms could optimize the composition of the heuris-
tic portfolio, but this aspect is beyond the scope of this paper.

5 Memory-Bounded Dynamic Programming
The MBDP algorithm combines the bottom-up and top-down
approaches. The algorithm can be applied to DEC-POMDPs
with an arbitrary number of agents, but to simplify notation,
the description in Algorithm 1 is for two agents, i and j. The
policy trees for each agent are constructed incrementally us-
ing the bottom-up DP algorithm. But to avoid the double ex-
ponential blow-up, the parameter maxT rees is chosen such
that a full backup with this number of policy trees of length
T − 1 does not exceed the available memory. Every iteration
of the algorithm consists of the following steps. First, a full
backup of the policies from the last iteration is performed.
This creates policy tree sets of size |A||maxT rees||O|. Next,
top-down heuristics are chosen from the portfolio and used
to compute a set of belief states. Then, the best policy tree
pairs for these belief states are added to the new sets of policy
trees. Finally, after the T th backup, the best joint policy tree
for the start distribution is returned.
5.1 Theoretical Properties
Overcoming the complexity barriers of DEC-POMDPs is
challenging, because there is a double exponential number
of possible policy trees, each containing an exponential num-
ber of nodes in the time horizon. Accordingly, an important
feature of the MBDP algorithm is that it can compute and
represent the policy trees using just linear space.

Algorithm 1: The MBDP Algorithm
begin
1
2
3
4
5

maxT rees ← max number of trees before backup
T ← horizon of the DEC-POMDP
H ← pre-compute heuristic policies for each h ∈ H
Q1
i , Q1
for t=1 to T do
, Qt+1

j ← initialize all 1-step policy trees

j ← fullBackup(Qt
, Selt+1

Qt+1
j ← empty
Selt+1
for k=1 to maxTrees do
choose h ∈ H and generate belief state b
foreach qi ∈ Qt+1

, qj ∈ Qt+1

i), fullBackup(Qt
j)

do

i

i

j

i

evaluate each pair (qi, qj) with respect to b

6
7
8
9
10
11
12

13
14

15

16
17
18

end

add best policy trees to Selt+1
delete these policy trees from Qt+1
, Qt+1

j ← Selt+1

, Selt+1

j

i

i

i

Qt+1

i

and Selt+1

j

and Qt+1

j

select best joint policy tree δT from {QT
return δT

j }
i , QT

Theorem 1. The MBDP algorithm has a linear space com-
plexity with respect to the horizon length.

Proof: Once the variable maxT rees is ﬁxed, the number of
policy trees per agent is always between k and K. The lower
limit k is equal to maxT rees, which is the number of trees
after the heuristics have been used to select the k-best pol-
icy trees. The upper limit K is equal to |A||maxT rees||O|,
which is the number of policy trees after a full backup. By
choosing maxT rees appropriately, the desired upper limit
can be pre-set. In every iteration of the algorithm, no more
than K policy trees are constructed. For the construction of
the new policy trees, the algorithm uses pointers to the k pol-
icy trees of the previous level and is thus able to potentially
attach each subtree multiple times instead of just once as il-
lustrated in Figure 2. Due to this efﬁcient pointer mechanism,
a ﬁnal horizon-T policy tree can be represented with k· T de-
cision nodes. Thus, the amount of space grows linearly with
the horizon length. For n agents, this is O(n(k· T + K)).

1

2

T−2

T−1

T

Figure 2: An exponential size policy can be represented using
linear space by re-using policy trees. Here maxT rees = 5.

IJCAI-07

2012

In general, the idea of the pointer mechanism could be ap-
plied to other algorithms and improve them as well.
It re-
duces the number of nodes used for one ﬁnal policy tree from
O(|O|T ) to O(k · T ). However, if k grows double exponen-
tially – as in the optimal DP algorithm – using the pointer
mechanism only has marginal effects. For an improvement in
space complexity it is also necessary that k – the number of
possible policy trees kept in memory – be sufﬁciently small.
Theorem 2. The MBDP algorithm has a linear time com-
plexity with respect to the horizon length.
Proof: The main loop of the algorithm (lines 6-15) depends
linearly on the horizon length T . Inside this loop, all oper-
ations are independent of T once k and K are ﬁxed. The
remaining critical operation is in line 4, where the heuristic
policies are pre-computed. Currently, the only heuristic that
guarantees linear time is the random policy heuristic. The
other heuristics have higher, but still polynomial-time com-
plexity. In practice, the time used by the heuristics is negli-
gible. If a top-down heuristic is used that can be computed
in linear time, the time complexity of the whole algorithm is
linear in the horizon length.
5.2 Recursive MBDP
As pointed out earlier, the effectiveness of any top-down
heuristic may depend on the speciﬁc problem. To alleviate
this drawback, we use a heuristic portfolio. But once the al-
gorithm has computed a complete solution, we have a joint
policy that deﬁnitely leads to relevant belief states when used
as a heuristic. This is exactly the idea of Recursive MBDP.
The algorithm can be applied recursively with an arbitrary
recursion-depth. After the ﬁrst recursion has ﬁnished, the ﬁ-
nal joint policy can be used as a top-down heuristic for the
next run and so on.
5.3 Pruning Dominated Policy Trees
As described in Section 3, the exact DP algorithm uses iter-
ated elimination of dominated strategies to reduce the size of
the policy tree sets. Interestingly, this pruning technique can
be combined with the MBDP algorithm in two different ways.
First, after a full backup is performed, the pruning algorithm
can be used to eliminate dominated policy trees, which re-
duces the set of remaining policy trees. Consequently, no
dominated policy tree will be selected using the top-down
heuristics. Second, the pruning technique can be applied af-
ter the heuristics have been used to select the policy trees for
the next iteration. Pruning dominated policy trees at this step
leads to a more efﬁcient use of memory in the next iteration.

6 Experiments
We have implemented the MBDP algorithm and performed
intensive experimental tests. The algorithm has three key
parameters that affect performance. One parameter is the
maximum number of trees, maxT rees, which deﬁnes the
memory requirements; runtime is quadratically dependent on
maxT rees. Its effect on the value of the solution is analyzed
in Section 6.2. The second parameter is the depth of the recur-
sion, which affects runtime linearly. We deﬁne a trial run of

Horizon

3
4
5
10
100
1,000
10,000
100,000

Time(s)

MABC Problem
Value
2.99
3.89
4.79
9.29
90.29
900.29
9,000.29
90,000.29

0.01
0.01
0.02
0.08
0.26
2.5
50
3000

Tiger Problem

Time(s)

0.19
0.46
0.72
2.19
25.84
289.3
4092
44028

Value
5.19
4.80
5.38
13.49
93.24
819.01
7930
78252

σ
0
0

0.42
1.76
7.79
20.5
52.5
87.9

Table 1: Performance of the MBDP algorithm.

the algorithm as the entire computational process including
all recursive calls. The best solution found during one trial
run is returned as the ﬁnal solution. Because the algorithm
is partly randomized, it is obvious that on average, the higher
the recursion depth, the better the solution value. The third
parameter controls the selection of heuristics from the portfo-
lio. In the following experiments we used a uniform selection
method (giving the same weight to all heuristics) because it
performed well without ﬁne-tuning. We also experimented
with the pruning technique described in Section 5.3, but it
had little impact on the runtime or solution quality. Hence,
we decided not to include it in the following experiments.
6.1 Benchmark Problems
We have applied the MBDP algorithm to two benchmark
problems from the literature:
the multi-access broadcast
channel (MABC) problem involving two agents who send
messages over a shared channel and try to avoid colli-
sions [Hansen et al., 2004], and the multi-agent tiger prob-
lem, where two agents have to open one of two doors, one
leading to a dangerous tiger and the other to a valuable trea-
sure [Nair et al., 2003]. Table 1 presents performance results
of the MBDP algorithm for the two test problems. Shown
are solution value and computation time, which are both av-
eraged over 10 trial runs. For the tiger problem, we also show
the standard deviation σ, because in this case the algorithm
achieved different solution values over the 10 trials. For the
MABC problem, we used maxT rees = 3 and a recursion
depth of 1. For the tiger problem we used maxT rees = 7
and a recursion depth of 5.

To evaluate the MBDP algorithm we compared it to the op-
timal DP algorithm [Hansen et al., 2004], the JESP algorithm
[Nair et al., 2003], the Point-Based Dynamic Programming
algorithm (PBDP) [Szer and Charpillet, 2006] and a random-
policy generating algorithm. These are all ofﬂine planning
algorithms. The computation is performed in a centralized
way and the ﬁnal solution is a complete joint policy tree for
the desired horizon, which can then be executed by multi-
ple agents in a decentralized way. In contrast, the Bayesian
Game Approximation algorithm [Emery-Montemerlo et al.,
2004] interleaves planning with execution. Thus, it allows for
some amount of decentralized re-planning after each step. To
perform a consistent comparison, we also created an online
version of MBDP and in fact it outperformed the other algo-
rithm. But a discussion of the online algorithms is beyond the
scope of this paper and thus the following performance com-
parison does not include results for the online algorithms.

IJCAI-07

2013

MABC Problem
Random

Horizon

2
3
4
5
6
7
8
9
10
100
1,000
10,000
100,000

Optimal

2.00
2.99
3.89

-
-
-
-
-
-
-
-
-
-

PBDP
2.00
2.99
3.89
4.70
5.69
6.59
7.40

-
-
-
-
-
-

1

1.49
1.99
2.47
2.96
3.45
3.93
4.41
4.90
48.39
483.90
4,832.37
48,323.09

MBDP
2.00
2.99
3.89
4.79
5.69
6.59
7.49
8.39
9.29
90.29
900.29
9,000.29
90,000.29

Optimal
-4.00
5.19
4.80

-
-
-
-
-
-
-
-
-
-

JESP
-4.00
-6.00

?
?
?
?
-
-
-
-
-
-
-

Tiger Problem
PBDP
-4.00
5.19
4.80

Random
-92.44
-138.67
-184.89
-231.11
-277.33
-323.56
-369.78
-416.00
-462.22
-4,622.22
-46,222.22
-462,222.22
-4,622,222.22

MBDP
-4.00
5.19
4.80
5.38
9.91
9.67
9.42
12.57
13.49
93.24
819.01
7930.68
78252.18

-
-
-
-
-
-
-
-
-
-

Table 2: Performance comparison of the different algorithms on the MABC problem and the Tiger problem.

Table 2 presents a performance comparison of the differ-
ent algorithms for both test problems. For this comparison,
the same experimental setup as described above was used.
Shown are the solution values achieved for each horizon. A
“?” indicates that the algorithm could compute a solution
for this horizon, but the achieved value was not reported in
the corresponding paper. A “-” indicates that the algorithm
ran out of time or memory for this horizon. Even though
the experiments have been performed on different systems
with different processor speed and available memory, the two
key ﬁndings of this comparison are still applicable: First,
for the horizons where comparison is feasible, the MBDP
algorithm achieves the same or higher value than all previ-
ous approaches. Second, the results match nicely our theo-
retical ﬁndings: They show that the linear complexity of the
MBDP algorithm makes it possible to solve problems with
much larger horizons, improving scalability by multiple or-
ders of magnitude with respect to all existing algorithms.
None of the previous approaches could compute a solution
for the problems with a horizon of 10 whereas the MBDP al-
gorithm can easily compute solutions up to horizon 100,000.
For large horizons, the comparison with the random policy
algorithm shows that the two test problems are non-trivial, as
the difference in achieved value is signiﬁcant. For example,
for the MABC problem the MBDP algorithm achieves ap-
proximately 200% of the value the random policy algorithm
achieves. On the tiger problem random policies lead to ex-
tremely poor performance compared to the MBDP algorithm.
6.2 Trade-off: Recursion Depth vs. MaxTrees
The parameters maxT rees and the recursion depth present
an important trade-off: their increase generally increases both
solution value and runtime. We examine this trade-off below
and identify the best parameters for the test problems.

One interesting experimental result for the MABC prob-
lem is that maxT rees = 3 is sufﬁcient to produce the best
solution for all horizons, even with recursion depth 1. Appar-
ently, this problem exhibits some structure that makes only a
few decision nodes necessary even for long horizons. In this
regard, the tiger problem is more complex: for longer hori-
zons, the best solution is not found in every trial, even with
maxT rees > 50 and a recursion depth of 300. Nevertheless,

just a few policy trees are necessary to ﬁnd near-optimal so-
lutions. Figure 3 shows that when maxT rees is increased,
the solution value levels off very quickly. The values shown
are for the tiger problem with horizon 10, averaged over 10
trials with a recursion depth of 50. Experiments with other
horizons yielded qualitatively similar results.

16

15

14

13

12

11

10

9

8

 

e
u
l
a
V
n
o
i
t
u
o
S

l

4

5

6

7

8

9 10 11 12 13 14 15 16 17 18 19 20

Maximum Number of Trees

Figure 3: A small maximum number of policy trees is sufﬁ-
cient for ﬁnding near-optimal solutions.

The best parameter settings for maxT rees and the recur-
sion depth vary with the available runtime. Table 3 shows
experimental results for the tiger problem with horizon 20,
where the best parameter settings for given time limits up to
120 seconds have been identiﬁed. The solution values shown
are averaged over 10 trial runs. The results illustrate the trade-
off between the recursion depth and the maximum number of
trees. In particular, they show that different parameter set-
tings optimize this trade-off for different time limits.

Time Limit (s) MaxTrees

1
2
3
4
5
10
20
30
60
120

7
7
7
8
8
11
10
12
9
13

Recursion Depth Value
16.37
20.35
22.34
23.67
23.67
24.71
26.98
27.16
28.75
29.02

1
2
4
3
3
1
5
3
27
8

Table 3: The best parameter settings and solution values for
the tiger problem with horizon 20 for given time limits.

IJCAI-07

2014

7 Conclusion and Future Work
We have presented the ﬁrst memory-bounded dynamic pro-
gramming algorithm for ﬁnite-horizon DEC-POMDPs.
It
is the ﬁrst to effectively combine top-down heuristics with
bottom-up dynamic programming. Unlike previous approx-
imate algorithms,
the MBDP algorithm guarantees linear
space and time complexity with respect to the horizon length,
thereby overcoming the high worst-case complexity barrier
of DEC-POMDPs. One particularly attractive feature of the
algorithm is that the policy trees it generates are represented
using linear space due to an efﬁcient pointer mechanism. In
contrast, a single complete policy tree normally contains an
exponential number of decision nodes. Our experimental re-
sults show that the algorithm performs very well. It is truly
scalable in terms of the horizon. It solves problems with hori-
zons that are multiple orders of magnitude larger than what
was previously possible, while achieving the same or better
solution quality in a fraction of the runtime. We have also an-
alyzed the important trade-off between the maximum number
of policy trees kept in memory and the recursion depth of the
algorithm. Interestingly, very few policy trees are sufﬁcient
to produce near-optimal results for the benchmark problems.
We are currently working on a deeper analysis of the theoret-
ical guarantees of the algorithm, i.e. deriving bounds on the
approximation error and analyzing the inﬂuence of different
heuristics on performance.

In future work, we plan to apply the MBDP algorithm to
problems with larger state spaces as well as larger action and
observation sets. A ﬁnite-horizon DEC-POMDP has an ex-
ponential complexity with regard to the number of observa-
tions. Increasing scalability in that regard is thus an impor-
tant challenge. For some problem sizes, additional techniques
will have to be employed to further improve scalability. One
option is to explore the full potential of the pruning tech-
nique. Currently, the MBDP algorithm and the pruning al-
gorithm can only be used as two separate entities, which has
not proven to be very useful. We are investigating ways to use
the top-down heuristics to identify relevant multi-agent belief
states for which the pruning algorithm checks dominance and
then selects the best bottom-up policies. The algorithm and
representations used in this work open up multiple research
avenues for developing effective approximation algorithms
for decentralized decision making under uncertainty.

8 Acknowledgments
We thank Marek Petrik and Daniel Bernstein for helpful dis-
cussions on this paper. This work was supported in part by
the Air Force Ofﬁce of Scientiﬁc Research under Award No.
FA9550-05-1-0254 and by the National Science Foundation
under Grants No. IIS-0219606 and IIS-0535061.

References
[Becker et al., 2004] Raphen Becker, Shlomo Zilberstein, Victor
Lesser, and Claudia V. Goldman. Solving Transition Independent
Decentralized Markov Decision Processes. Journal of Artiﬁcial
Intelligence Research (JAIR), 22:423–255, 2004.

[Bernstein et al., 2000] Daniel S. Bernstein, Shlomo Zilberstein,
and Neil Immerman. The Complexity of Decentralized Control

of Markov Decision Processes. In Proceedings of the Sixteenth
Conference on Uncertainty in Artiﬁcial Intelligence (UAI), pages
32–37, Stanford, California, June 2000.

[Bernstein et al., 2005] Daniel S. Bernstein, Eric A. Hansen, and
Shlomo Zilberstein. Bounded Policy Iteration for Decentralized
POMDPs. In Proceedings of the Nineteenth International Joint
Conference on Artiﬁcial Intelligence (IJCAI), pages 1287–1292,
Edinburgh, Scotland, July 2005.

[Doshi and Gmytrasiewicz, 2005] Prashant Doshi and Piotr

J.
Gmytrasiewicz. A Particle Filtering Based Approach to Approxi-
mating Interactive POMDPs. In Proceedings of the Twentieth Na-
tional Conference on Artiﬁcial Intelligence (AAAI), pages 969–
974, Pittsburg, Pennsylvania, July 2005.

[Emery-Montemerlo et al., 2004] Rosemary Emery-Montemerlo,
Geoff Gordon, Jeff Schneider, and Sebastian Thrun. Approxi-
mate Solutions for Partially Observable Stochastic Games with
Common Payoffs.
In Proceedings of the Third International
Joint Conference on Autonomous Agents and Multi-Agent
Systems (AAMAS), pages 136–143, 2004.

[Gmytrasiewicz and Doshi, 2005] Piotr

and
Prashant Doshi. A Framework for Sequential Planning in
Multiagent Settings. Journal of Artiﬁcial Intelligence Research
(JAIR), 24:49–79, 2005.

J. Gmytrasiewicz

[Goldman and Zilberstein, 2005] Claudia V. Goldman and Shlomo
Zilberstein. Goal-Oriented Dec-MDPs with Direct Communica-
tion. Technical Report 04-44, Department of Computer Science,
University of Massachusetts Amherst, 2005.

[Hansen et al., 2004] Eric A. Hansen, Daniel S. Bernstein, and
Shlomo Zilberstein. Dynamic Programming for Partially Observ-
able Stochastic Games.
In Proceedings of the Nineteenth Na-
tional Conference on Artiﬁcial Intelligence (AAAI), pages 709–
715, San Jose, California, July 2004.

[Nair et al., 2003] Ranjit Nair, David Pynadath, Makoto Yokoo,
Milind Tambe, and Stacy Marsella.
Taming Decentralized
POMDPs: Towards Efﬁcient Policy Computation for Multiagent
Settings.
In Proceedings of the Eighteenth International Joint
Conference on Artiﬁcial Intelligence (IJCAI), pages 705–711,
2003.

[Pynadath and Tambe, 2002] David V. Pynadath and Milind
Tambe. The Communicative Multiagent Team Decision Prob-
lem: Anaylzing Teamwork Theories and Models.
Journal of
Artiﬁcial Intelligence Research (JAIR), 16:389–423, June 2002.
[Rabinovich et al., 2003] Zinovi Rabinovich, Claudia V. Goldman,
and Jeffrey S. Rosenschein. The Complexity of Multiagent Sys-
tems: The Price of Silence.
In Proceedings of the Second In-
ternational Joint Conference on Autonomous Agents and Multi-
Agent Systems (AAMAS), pages 1102–1103, Melbourne, Aus-
tralia, 2003.

[Seuken and Zilberstein, 2005] Sven Seuken and Shlomo Zilber-
stein. Formal Models and Algorithms for Decentralized Con-
trol of Multiple Agents. Technical Report 05-68, Department of
Computer Science, University of Massachusetts Amherst, 2005.
[Szer and Charpillet, 2006] Daniel Szer and Francois Charpillet.
Point-based Dynamic Programming for DEC-POMDPs. In Pro-
ceedings of the Twenty-First National Conference on Artiﬁcial
Intelligence (AAAI), Boston, USA, 2006.

[Szer et al., 2005] Daniel Szer, Francois Charpillet, and Shlomo
Zilberstein. MAA*: A Heuristic Search Algorithm for Solv-
ing Decentralized POMDPs. In Proceedings of the Twenty-First
Conference on Uncertainty in Artiﬁcial Intelligence (UAI), pages
576–583, Edinburgh, Scotland, July 2005.

IJCAI-07

2015

