PROVING  THE  IMPOSSIBLE  IS  IMPOSSIBLE  IS  POSSIBLE: 

Session  15  Robot  Problem  Solving 

DISPROOFS  BASED  ON  HEREDITARY  PARTITIONS* 

L.  Slklossy  and  J.  Roach 

Department  of  Computer  Sciences 

University  of  Texas,  Austin,  U.S.A. 

-which  are  in  fact  impossible-  or  cannot  do  some  other 
things  -which  are  in  fact  possible-.  For  example, 
in 
[ l ], 
same  time.2,3 

the  robot  can  be  in  two  different  places  at 

the 

3.  Some  Techniques 

for  Disproofs. 

l , e. 
Is  not  possible 

Many  systems  of  interest,  such  as  predicate  calculus, 
for  a  given  statement  in  the  sys­
are  undecidable, 
tem  it 
in  general,  whether 
to  determine, 
a  given  statement  in  the  system  can  or  cannot  be  proved. 
I f, 
in  a  particular  case,  we  wish  to  show  that  a  state­
ment  is  not  a  consequence  of  some  axioms,  the  standard 
procedure  is  as  follows: 
axioms  are  true,  but  the  statement  is  known  to  be  f a l s e. 
Such  model  building  is  t r u ly  an  a r t,  and 
through  much  experience.  The  automatic  building  of  dis­
proving  models  appears  beyond  the  present  state  of 
a r t. 

find  a  model  in  which  the 

is  acquired 

the 

Abstract 

It  permits 

is 
A  novel  technique,  called  hereditary  p a r t i t i o n s, 
Introduced. 
in 
the  rigorous  proof  that, 
a  given  axiomatization,  certain  states  can  never  be 
reached.  The  technique  is  implemented  in  a  computer 
program,  DISPROVER,  and  is  applied  to  robot  worlds. 
DISPROVER  cooperates  with  a  path-finding  program  when 
the 
Key  words:  Robot  Planning;  Impossible  Tasks;  Theorem 
Prover;  Statement  Disprover;  Disproof;  Hereditary 
Properties;  Hereditary  P a r t i t i o n s;  Problem  Solving. 

l a t t er  encounters  d i f f i c u l t i e s. 

1 ■  Introduction. 

Theorem  proving  and  problem  solving  programs  are  some­
times  successful 
in  finding  a  proof  to  an  actual  the­
orem,  or  in  solving  a  problem  which  does  have  a  solu­
t i o n.  On  the  other  hand,  presented  with  an  expression 
which  is  not  a  theorem,  or  with  an  unsolvable  problem, 
incapable  of  discovering, 
the  programs  are  generally 
that  the  expression  Is  not  a  the­
in  a  positive  sense, 
indeed  unsolvable.  The 
orem,  or  that  the  problem 
usual  diagnostic  would  be: 
"I  cannot  solve  the  prob­
lem,  because  my  resources  are  exhausted,  or  because  I 
am  stuck  somewhere.  However,  the  problem  may  be  solva­
ble. 

I  just  don't  know." 

is 

i t. 

try 

to  solve 

they  w i ll  try  to  show  that 

We  are  interested  in  developing  programs  which,  given 
a  problem,  w i ll 
If  they  cannot  solve 
it  cannot  be 
the  problem, 
solved,  A  program  which  performs  the  last 
function 
w i ll  be  called  a  disproving  program.  To  build  such 
programs,  we  use  a  technique  which  we  named  hereditary 
p a r t i t i o ns ■  This  technique  has  some  generality  and 
forms  our  basis  for  a  program,  DISPROVER,  which  has 
been  applied 
i . e. 
DISPROVER  proves  rigorously  that, 
for  a  given  set  of 
axioms,  operators  and  an  i n i t i al  world, 
l u t e ly  no  way  to  attain  some  particular  goal. 

to  disprove  goals 

in  robot  worlds, 

there  is  abso­

to  find  paths  to  goal  states.  Sometimes, 

DISPROVER  also  cooperates  with  another  program,  LAWALY, 
which  t r i es 
when  LAWALY  cannot  solve  a  (solvable)  problem,  DIS­
PROVER  -which  clearly  cannot  disprove  the  solvable 
problem-  gives  LAWALY  additional  information  which  per­
mits  a  solution  to  be  found. 
We  shall  now  describe  some  additional  motivation  for 
our  work,  discuss 
technique  of  hereditary 
properties  -which  is  a  degenerate  case  of  hereditary 
p a r t i t i o n s-  and  give  several  examples  of  disproofs, 
terminating  with  examples  of  cooperation  between  DIS­
PROVER  and  LAWALY. 

the  related 

2.  Why  Disproofs? 

it  is  much  more  romantic  and  challenging  to 
Somehow, 
in  the  whole  wide  world,  there  is  absolute­
show  t h a t, 
ly  no  way  that  something  can  be  proved, 
than  to  find 
one,  of  possibly  many,  proofs  to  some  theorem.  More­
over,  work  on  robots  introduces  a  practical  -and  neces­
sary-  application  of  disproving  programs. 
problem  solving  systems,  parts  of  the  physical  world, 
the  robot's  c a p a b i l i t i e s,  are  simu-
including  some  of 
It  is  desirable  that  the  model  con­
lated  as  a  model. 
to  the  physical  world,  other­
form  reasonably  closely 
wise  the  robot  may  " t h i n k" 
that  it  can  do  some  things 
*Work  p a r t i a l ly  supported  by  grant  GJ-34736  irom  the 
National  Science  Foundation. 

In  robot 

Is 

383 

to 

in-

the 
if  the 

in  a r t i f i c i al 

far  surpasses 

the  number  of 

in  category  c ), 

is  by  far  the  most  common, 

In  only  very  few  cases  w i ll 

In  this  case,  -iwff  is  also  in 

then  usually  the  theorem  prover 

for  example,  can  determine  after 
in  general,  cannot  be  calculated 
in  which  of  the  two  categories  the  wff  be­

interest 
Since  predicate  calculus  has  been  of  great 
workers 
i n t e l l i g e n c e,  some  additional 
comments  ore  in  order.  Given  a  well-formed  formula 
wff  in  predicate  calculus, 
three  exclusive  cases  are 
possible: 
a)  wff  is  a  theorem. 
b) 
i w ff  is  a  theorem. 
c)  neither  a)  or  b). 
category  c ),  This  last  case 
in  the  sense  that,  given  a  f i n i te  vocabulary  of  con­
function  and  predicate  names,  the 
stants,  variables, 
formulae  of  a  given  length  in 
number  of  well-formed 
category  c) 
formulae  in 
categories  a)  and  b), 
Given  a  wff  in  categories  a)  or  b ),  a  theorem  prover 
based  on  resolution, 
a  f i n i te  time  -which, 
in  advance- 
the  theorem  prover  could 
longs.  To  obtain  this  r e s u l t, 
time-share 
trying  to  prove 
i ts  efforts  between 
consistencies  of  both  wff  and  -|wff.  However, 
wff 
w i ll  go  on  forever. 
theorem  prover  stop  because  no  new  clauses  are  genera­
a  disproof  of  the  wff  has  then  been  obtained. 
ted: 
A  disproving  program  in  predicate  calculus  would  at­
tempt 
is  not  in  category  a). 
The  above  discussion  shows  that  present  theorem  provers 
are  at  best  very  weak  disproving  programs. 
It  should  also  be  noticed  that  a  proof  of  the  attaina­
b i l i ty  of 
imply 
that  the  statement  i t s e lf  can  be  disproved.  For  exam­
ple, 
if  a  l i g ht  can  be  turned  on  and  off  (at  d i f f e r e nt 
times) 
tion  -STATUS(LIGHT  ON)  are  both  attainable,  and  hence 
neither  can  be  disproved. 
While  the 
far 
too  few  cases,  and  model  building  is  too  often  ad-hoc , 
a  disproving  technique  with  some  generality  has  been 
called  hereditary  properties  (see 
Consider  a  checkerboard  from  which  we  remove  two  oppo­
s i te  squares.  This  mutilated  checkerboard  cannot  be 
covered  by  dominoes.  To  obtain  a  disproof,  we  notice 
that  whenever  we  add  another  domino  on  the  checker­
board, 
been  covered  remains 
equality  between  the  number  of  black  and  white  squares 

the  number  of  white  and  black  squares  that  have 

theorem  proving  approach  gives  results 

the  negation  of  a  statement  does  not 

the  same.  This  property  -the 

then  the  statement  STATUS(LIGHT  ON)  and  i ts  nega­

to  determine  that  a  wff 

the 

in 

[4] 

for  some  examples). 

is  two.) 

is  hereditary, 

(the  difference 

in  the  mutilated  checker­

the  number  of  black  squares  does  not  equal  the 

that  have  been  covered- 
that  is  it  does 
not  change  ae  any  allowable  move  - p u t t i ng  a  domino  on 
the  checkerboard- 
is  performed.  The  disproof  is  com­
plete  when  we  notice  t h a t, 
board, 
number  of  white  squares, 
The  technique  of  hereditary  properties  can  be  summa-
rized  as  follows: 
-the  o r i g i n al  state(s)  of  the  model  has  (have)  some 
property, 
-whenever  a  state  has  this  property,  a ll  states  ob­
tained 
property, 
-the  goal  state  which  we  are  t r y i ng  to  a t t a in  does  not 
have 
Hence  the  goal  is  unattainable.  W.W.W.  (what  we  want­
ed'.) 

from  it  by  a ll  allowable  moves  s t i ll  have 

this  property. 

this 

4.  Hereditary  P a r t i t i o n s. 

idea  of 

the  basic 

Hereditary  p a r t i t i o ns  generalize 
hereditary  properties.  The  technique  of  hereditary 
p a r t i t i o ns  can  be  summarized  as  follows: 
- c a ll  the  set  of  a ll  states  that  can  be  achieved  from 
the  original  state(s)  by  a ll 
legal  sequences  of  moves 
the  attainable  world. 
-the  attainable  world  can  be  p a r t i t i o n ed  into  d i s j o i nt 
p a r t i t i o n s.  Hence  each  o r i g i n al  state  is  in  some  par­
t i t i o n, 
-the  goal  state  which  we  are  t r y i ng  to  a t t a in  does  not 
belong 
unattainable. 

to  any  of  the  p a r t i t i o n s.  Hence 

the  goal 

is 

there 

to  the  case 

is  only  one  p a r t i t i o n. 

Obviously,  hereditary  properties  correspond 
where 
We  notice  that  if  we  apply  a  legal  move  to  a  state  in 
some  p a r t i t i o n,  we  obtain  a  state  in  the  same  or  some 
other  p a r t i t i o n.  We  can  say  that  p a r t i t i o ns  are  closed 
under  legal  moves. 
In  f a c t,  as  long  as  t h is  closure 
property  is  maintained,  we  might  just  as  well  add  to 
the  p a r t i t i o ns  some  unattainable  states  ( i . e.  states 
which  are  "meaningless") 
l i fe  simpler. 
Even  further, 
able  stares  we  can  add  some  p a r t i t i o ns  containing  no 
if 
attainable  states.  The  disproof 
this  expanded  set  of  p a r t i t i o ns 
legal 
moves  - i . e. 
move  leads  us 
to  the  same  or  some  other  p a r t i t i on  in 
the  set-  and  if  the  goal  state  that  we  are  t r y i ng  to 
disprove 
In  practice, 
appropriate  p a r t i t i o n s.  We  shall  see  an  example  in  the 
next  section. 

to  the  p a r t i t i o ns  containing  some  a t t a i n­

from  one  p a r t i t i on  in  the  set  any  legal 

the  problem  i s,  of  course, 

in  any  of  the  p a r t i t i o n s. 

is  s t i ll  complete 

is  closed  under 

to  build  the 

that  makes 

is  not 

if 

is  described 

[ l ].  The  world 
for  example  HEXTT0(R0BOT  B0X2) , 

5.  Example  of  a  Disproof  using  Hereditary  P a r t i t i o n s. 
We  shall  consider  robot  worlds  axiomatized  in  a  manner 
similar 
to  that  used  in 
as  a  set  of  predicates, 
Moves 
in  the  world  are  operators  which  must  satisfy 
some  preconditions,  and  their  effect  on  the  world  is 
specified  by  a  delete  set  and  an  add  set. 
Let  us  consider  a  subworld  of  the  world  in  [ l ]: 
a  r o­
bot  and  three  boxes,  B0X1,  B0X2  and  B0X3,  in  a  room. 
The  only  relevant  operators  for  our  problem  are  (some-
what  s i m p l i f i ed 
goto(object),  meaning: 
Preconditions:  ONFLOOR. 
Delete  set:  ATROB0T($)  NEXTTO(ROBOT  $ ) *. 
Add  set:  NEXTTO(ROBOT  o b j e c t ). 
push(objectl  object2),  meaning: 
next  to  object2. 
Preconditions:  PUSHABLE(objectl)  A  0NFL0OR  *  NEXTTO 
(ROBOT  o b j e c t l ). 
*$  means  everything.  At  least  that  was  the  meaning 
before  a  series  of  devaluations'. 

robot  goes  next  to  an  object. 

robot  pushes  o b j e c tl 

from  [ l ] ). 

i . e. 

i . e. 

i . e.  show 

i  -  1,2,3. 

"IP12  ^  "P23  A  -P31. 

it  cannot  be  achieved. 

get  the  three  boxes  next 

goto(BOXl),  push(BOXl  B0X2),  goto(B0X3), 

Delete  set:  ATROBOT($)  AT(objectl  $)  NEXTTO(R0BOT  $) 
NEXTTO(objectl  $)  NEXTTO($  o b j e c t l ). 
Add  set;  NEXTTO(objectl  object2)  NEXTT0(object2  ob­
j e c t l)  NEXTT0(R0BOT  o b j e c t l ). 
We  assume  that  boxes  are  PUSHABLE,  that  the  robot  could 
climb  on  and  o ff  boxes,  and  possibly  do  a  lot  of  other 
mischievous  actions,  none  of  which  would  help  her  get 
two  boxes  next  to  each  other.  We  now  wish  to  solve  the 
problem: 
to  each  other, 
find  a  path  from  an  o r i g i n al  world  which  includes: 
ONFLOOR  ATROBOT(A)  AT(B0X1  Al)  AT(B0X2  A2)  AT(BOX3  A3) 
to  a  goal  state  which  includes: 
NEXTT0(B0X1  B0X2)  NEXTT0(B0X2  B0X3). 
A  solution  i s: 
push(B0X3  B0X2). 
However,  a  more  symmetric  description  of  the  goal  state 
answering  the  statement  "the  three  boxes  are  next  to 
each  other"  would  be: 
NEXTTO(BOXl  B0X2)  NEXTT0(B0X2  B0X3)  NEXTTO(BOX3  BOXl). 
We  shall  now  give  a  disproof  of  this  goal, 
that 
The  p a r t i t i o ns  are  described  in  terms  of  some  anchor 
predicates  and  their  negations.  As  a  f i r st  choice, 
DISPROVER  chooses  the  three  predicates  from  the  goal  as 
anchors.  We  shall  abbreviate  these  predicates  as  P12, 
P23  and  P31.  The  o r i g i n al  state  belongs  to  the  p a r t i­
t i o n; 
P a r t i t i o n l; 
This  p a r t i t i on  contains  a ll  states,  whether  attainable 
or  not,  which  satisfy  -P12  A  nP23  and  A i P 3 1, 
which  do  not  contain  any  predicate  of  the  form: 
NEXTTO(BOX.,  B O X .^  3 ) + 1), 
If  the  robot  could  juggle  she  would  move  i n to  a  new 
state  which  would  presumably  s t i ll  be  in  the  p a r t i t i o n. 
A ll  goto  operations  do  not, 
of  the  p a r t i t i o n.  But  l et  us  consider: 
This  operator  jl£  applicable 
to  the  o r i g i n al  world,  because 
next  to  B0X1-,  since  the  s t a t e: 
NEXTT0(R0BOT  BOXl)  1V12  -T23  -P31 
is  a  member  of  p a r t i t i o n l.  Hence  by  applying  push(BOXl 
B0X2)  we  move  out  of  p a r t i t i o n l,  and  must  create  a  new 
p a r t i t i o n 2,  specified  by: 
P a r t i t i o n 2:  P12  A  1P23  A  1P31. 
S i m i l a r l y,  we  create  p a r t i t i o n3 
P a r t i t i o n 3:  TP12  AP23  A  * 3 1,  and 
P a r t i t i o n ^:  TP12  A  iP23 A  P31. 
From  p a r t i t i o n 2,  we  can  either  go  to  p a r t i t i o nl  by 
doing, 
for  example,  push(B0X2  B0X3);  or  stay  in  p a r t i-
tion2  by  doing,  among  other  p o s s i b i l i t i e s,  goto(BOX2); 
or  move  to  a  new 
P a r t i t i o n 5:  P12  A P23  A  - P 3 1, 
by  applying  push(B0X3  BOX2) 
NEXTTO(R0BOT  B0X3)  P12  P23  TP31 
of  p a r t i t i o n 2.  S i m i l a r l y,  we  create: 
P a r t i t i o n 6:  P12  TP23  P31,  and 
P a r t i t i o n ?: 
At  that  point,  however,  no  new  p a r t i t i o ns  can  be  created'. 
Every  legal  move  either  leaves 
p a r t i t i o n,  or 
Since 
the  disproof  is  complete.  W.W.W. 
DISPROVER,  programmed  in  LISP  1.5  and  run  interpreted 
on  the  University  of  Texas  CDC  6600  found  the  above 
disproof, 
seconds. 
Another  disproof, 
goal:  AT(B0X1  A)  STATUS(LIGHTSWITCHl  ON),  s t a r t i ng 
from  the  o r i g i n al  state  which  includes:  AT(B0XL  A) 
STATUS(LIGHTSWITCH1  OFF).  The  robot  needs  to  climb  on 
BOXl  to  turn  on  LIGKTSWITCH1,  but  she  is 
incapable 
of  returning  BOXl  to  i ts  o r i g i n al 
proof,  by  DISPROVER, 

-although  not 
the  robot  does  not  start 

to  one  of  the  other  p a r t i t i o n s. 

for  the  complete  world  of  [ l ], 

in  any  of  the  p a r t i t i o n s, 

in  t u r n,  make  her  go  out 

to  the  state  including: 

the  robot  in  the  same 

took  about  3  seconds; 

the  goal  state  is  not 

l o c a t i o n.  The  d i s(cid:173)

push(BOXl  B0X2). 

in  the  world  of 

(see  Figure  1.) 

-P12  P23  P31. 

[ l ],  concerns 

to  p a r t i t i o nl 

three  p a r t i-

in  about  7 

takes  her 

the 

then 

384 

true 

from  the 

i n i t i a l l y, 

is  a  case  in  point. 

the  anchor  predicates 

ii  the  robot  can­
is 

the  simultaneous  realization  of  a ll  sub-
is  impossible,  due  to  "side  effects"  caused  by 

tions  were  b u i lt  using 
goal  s t a t e. 
5.1  Classes  of  Impossible  States. 
Given  some  axiomatization  of  a  world,  namely  an  i n i­
t i al  state  and  a  set  of  legal  moves  -operators-,  we 
can  distinguish  broadly  between  two  main  classes  of 
impossible  goal  states: 
a)  goals  including  a  subgoal  which  is  not  satisfied 
in  the  i n i t i al  state  and  does  not  occur  on  the  add 
set  of  any  operator.  For  example, 
not  paint,  and 
if  COLOR(BOX1  BLUE) 
then  a  goal  including  COL0R(B0Xl  PINK)  cannot  be 
achieved,  and  is  disproved  easily  by  DISPROVER  using 
only  one  p a r t i t i o n. 
A  variation  of  this  class  of  impossible  tasks  occurs 
when  a  subgoal,  subgoal.,  of  the  goal 
is  satisfied  in 
the  i n i t i al  world  but  must  be  destroyed,  i . e.  deleted, 
to  achieve  some  other  subgoaln  .  Moreover,  once  de­
leted,  subgoal  cannot  be  added  by  any  operator.  The 
last  example  in  section  5  above  is  a  case  in  point. 
b)  Each  subgoal.  of  the  goal  can  be  achieved  indepen­
dently,  but 
goals 
the  delete  sets.  The  main  example  in  section  5  of  the 
symmetric  NEXTTO(BOX.  BOX.) 
In  practice,  what  is  most 
else's  world  and  disprove  goal  states  which  " i n t u i­
t i v e l y"  should  be  r e a l i z a b l e! 
5.2  Selection  and  Testing  of  Operators. 
Given  a  set  {U  }  of  anchor  predicates  in  an  attempted 
disproof,  DISPROVER  f i r st  discards  a ll  operators  which 
do  not  add  or  delete  some  predicate  in  {U}  ,  since  these 
operators  are  clearly 
is 
the 
tors  are  applied  to  t h is  p a r t i t i on  in  an  attempt  to 
create  new  p a r t i t i o n s.  Whenever  a  new  p a r t i t i on  is 
created,  a  test  is  made  to  see  whether  the  goal  state 
is 
the  p a r t i t i o n. 
and  DISPROVER  w i ll 
Otherwise, 
operators  w i ll  be  applied 
further  new  p a r t i t i o n s. 
jargon,  DISPROVER  generates  partitions  breadth-first 
u n t il  the  goal  state  is  found  -meaning  the  disproof 
f a i l ed 
the  given  set  of  anchor  predicates  (see 
section  6)-  or  u n t il  no  new  partitions  are  found,  which 
would 
It  should  be  noticed 
tions  used,  only  a  few  simple  set  operations  are  need­
ed  to  determine  whether  an  operator  is  applicable  to  a 
p a r t i t i o n. 
trary  predicate  calculus  expressions,  or 
cedures, 
then  It  may  well  be  impossible  to  decide 
whether  an  operator  is  applicable  to  a  p a r t i t i o n, 

then  complete  the  disproof. 
the 

intersected  with  {V"}  "  {P|P'e{u)v 
remaining 

i n i t i al  world 
I P E ( U }} 
to  give 
(relevant)  opera­

try  to  bootstrap  i t s e lf  (section  6.) 

If  preconditions  are  generalized 

the  p a r t i t i on  is  kept,  and  all 

fun  to  do  is  to  take  someone 

to  it 
In  a r t i f i c i al 

to  a r b i­
include  pro­

to  try  and  obtain  yet 

f i r st  p a r t i t i o n.  A ll 

form  of  precondi­

i r r e l e v a n t.  The 

the  disproof 

intelligence 

that  with 

relevant 

f a i l s, 

If  it 

for 

in 

i s, 

6.  Bootstrapping  in  DISPROVER. 

gotoloc(loc),  meaning: 

for  DISPROVER  to  be  successful. 

The  anchor  predicates  -which  determine  the  p a r t i t i o n s-
are  c r u c i al 
In  some 
cases,  DISPROVER  can  change  i ts  set  of  anchor  predi­
cates.  We  shall  use  a  disproof  as  an  example  of  this 
c a p a b i l i t y.  We  expand  the  world  discussed  previously 
via  an  operator 
to 
location  loc  tn  room  rm. 
Preconditions:  ONFLOOR  A  3rm(  L0CINR00M(loc  rm)  ). 
Delete  set:  ATROBOT($)  NEXTTO(ROBOT  $). 
Add  set:  ATROBOT(loc). 
We  w i ll  disprove  the  state  ATROBOT(Al),  where  Al  was 
used  in  AT(B0X1  A l ).  As  in  [ l ],  there  is  no  predi­
cate  LOCINROOM(A1  x) 
viously 
The  i n i t i al  anchor  predicate  is  obtained 

for  any  x,  hence  the  task  is  ob­

in  the  axiomatization. 

robot  goes 

impossible 

from  the  goal: 

it 

though 

to  obtain 

to  extend 

i ts  set  of 

the  disproof 

is  contained 

lATROBOT(Al) . 

LOCINR00M(Al  x ), 

tn  the  p a r t i t i o n: 

that  were  preconditions  of  the  operator(s) 

ATROBOT(Al). 
The  i n i t i al  state 
P a r t i t i o n! : 
for  x  anything, 
The  state:  ONFLOOR 
is  a  member  of  this  p a r t i t i o nl  -even 
is  unat(cid:173)
tainable-,  and  the  operator  gotoloc(Al)  can  be  applied 
to  this  state, 
P a r t i t i o n 2:  ATROBOT(Al). 
Since  the  goal  we  are  t r y i ng  to  disprove  is  a  member  of 
p a r t i t t o n 2, 
f a i l s. 
At  this  point,  DISPROVER  t r i es 
anchor  predicates  by  adding  to  those  already  used,  a ll 
those 
that 
permitted  a  t r a n s i t i on  to  the  p a r t i t i on  (here  p a r t i-
tion2)  which  we  were  hoping  not  to  reach  in  the  dis(cid:173)
proof.  The  new  set  of  anchor  predicates  i s: 
ATROBOT(Al)  A  ONFLOOR  A  L0CLNR00M(A1  x) . 
DISPROVER  t r i es  again  (and  w i ll  succeed  with  the  d i s(cid:173)
proof,  otherwise  we  would  not  have  chosen  this  example'.) 
The  o r i g i n al  state  is 
P a r t i t i o n l:  1ATR0B0T(A1)  A  ONFLOOR  A  -L0CINR00M(Al  x) . 
From  this  p a r t i t i o n, 
we  can  go  t o: 
P a r t i t i o n 2:  -ATROBOT(Al) 
However,  no  further  p a r t i t i o ns  can  be  generated,  com(cid:173)
p l e t i ng  the  disproof,  W.W.W. 
DISPROVER 
if  -besides 
economic  reasons  of  time  l i m it  or  memory  exceeded-  no 
new  sets  of  anchor  predicates  are  generated  during  boot-
strapping. 

if  the  robot  climbs  on  something, 

ft  10NFL00R  ft  "IL0CINR00M(A1  x) . 

find  a  disproof 

f i n a l ly 

f a i ls 

i n: 

to 

7.  LAWALY  helped  by  DISPROVER. 

find 

INR00M(R0B0T  A)  A  CLOSED 

the  path-finder  we 
,  does  not 

Up  to  tlits  point  we  have  seen  DISPROVER  working  alone. 
Now  we  w i ll  consider  cooperation  between  LAWALY  and 
DISPROVER. 
In  some  cases,  LAWALY, 
use  to  solve  robot  planning  problems 
a  path  even  though  one  e x i s t s.  An  example  w i ll  help  to 
i l l u s t r a te  the  d i f f i c u l t i es  she  encounters.  Figure  2 
shows  the  i n i t i al  and 
final  states  of  the  robot  world. 
The  robot  must  achieve:  CLOSED(DOOR)  A  NEXTTO(ROBOT 
BOX),  from  the  i n i t i al  state: 
(DOOR)  A  INROOM(BOX  B). 
(See  Figure  2.)  LAWALY  may 
decide  to  work  f i r st  on  the  CLOSED(DOOR)  condition,  or 
f i r st  on  the  NEXTTO(ROBOT  BOX)  condition.  Consider  the 
f i r st  case. 
LAWALY  finds  the  door  already  closed  in 
the  i n i t i al  state,  so  she  wants  to  obtain  the  NEXTTO 
condition.  To  do  that,  she  must  enter  Room  B,  and  to 
do  that  go  through  the  DOOR,  But  that  would  mean  open(cid:173)
ing  the  DOOR,  and  hence  undoing  what  she  had  already 
achieved,  -CLOSED(DOOR)-,  and  so  she  decides  to  try  the 
conditions  in  the  reverse  order.  To  be  NEXTT0(R0BOT 
BOX),  she  goes  to  DOOR,  opens  i t,  goes  through  i t,  and 
then  goes  next  to  BOX.  At 
that  she  must  s t i ll  close  the  DOOR,  However, 
that  would 
make  her  undo  something  she  wanted,  namely,  NEXTTO(ROBOT 
BOX),  so  she  q u i t s,  having  f a i l e d. 

that  point,  she  realizes 

The  problem  is  now  passed  to  DISPROVER.  The  anchor 
predicates  are  taken  from  the  goal,  and  the  following 
p a r t i t i o ns  are  b u i l t: 
P a r t i t i o n l:  -iNEXTT0(R0B0T  BOX)  CLOSED(DOOR). 
P aTt t t i o n 2:  1NEXTT0(R0B0T  BOX)  lCLOSED(DOOR) . 
P a r t i t i o n 3:  NEXTTO(ROBOT  BOX)  -CLOSED(DOOR), 
P a r t i t i o n 4:  NEXTTO(ROBOT  BOX)  CLOSED(DOOR). 
Since  P a r t i t i o n4  includes  our  goal, 
the  disproof 
P a r t i t i o n4  was  obtained  by  applying  the  operator: 
gonext(ob.ject),  Preconditions: 
(ROBOT  x)  A  INROOM(object  x)  ), 
d t a r y - s t a t e:  ONFLOOR  A  INRO0M(R0B0T  B)  A  INR00M(B0X  B). 
DISPROVER  suggests  to  LAWALY  that 
the  o r i g i n al  problem 
might  be  solved  by  s p l i t t i ng  It  up  into  two  successive 
problems.  The  f i r st  problem  ie  to  go  from  the  i n i t i al 
state  to  a  state  containing  intermediary-state  above; 
the  second  problem  is  to  go  from  there  to  the  f i n al 

(ONFLOOR)  A  3x(INR00M 
to  the  state  interme-

f a i l s. 

385 

H.  A.  and  Stklossy,  L.  (Eds.)  Representation  and  Mean­
i n g:  Experiments  with  Information  Processing  Systems. 
P r e n t i c e - H a l l,  Englewood  C l i f f s,  N . J .,  1972. 
SIklossy,  L.  and  Dreussi,  J.  A  Hierarchy-Driven  Robot 
Planner  which  Generates  i ts  own  Procedures.  Technical 
Report  1 1,  Computer  Sciences  Dept.,  University  of  Texas 
A u s t i n,  1973. 

Figure  1. 
NEXTT0(B0X2  BOX3)  * NEXYT0(B0X3 B0X1). 

Disproof  of  NEXTT0(B0Xl  BOX2)  * 

s t a t e. 
in 

this  way, 

IAWALY  does  in  fact  solve  the  o r i g i n al  problem 

8.  A  Collaborative  F a i l u r e. 

the  intermediary-state: 

i n i t i al  and  f i n al  states  of  the  task  are  shown  In 

We  now  describe  a  solvable  task  which  is  not  solved 
by  the  collaboration  between  DISPROVER  and  LAWALY. 
The 
Figure  3.  The  f i n al  state  i s:  ON(ROBOT  BOX)  A  INROOM 
for  essentially  the  same  reasons  as 
(ROBOT  B).  Again, 
before,  LAWALY  f a i ls  to  solve  the  problem.  DISPROVER 
cannot  find  a  disproof  (of  course,  since  none  e x i s t s ), 
but  suggests 
INROOM(R0BOT  B)  A  NEXTT0(ROB0T  BOX).  Once  more,  LAWALY 
f a i l s,  again  due  to  her  stubbornness  in  i n s i s t i ng  on 
f i n i s h i ng  a  subtask  completely  before  s t a r t i ng  another 
one.  DISPROVER  finds  no  disproof  ( r i g h t ly  so,  since 
none  exists)  with 
INRO0M(R0BOT  BOX)  NEXTT0(R0BOT  BOX)  ON(R0B0T  BOX). 
Moreover,  DISPROVER  suggests  the  same  intermediary-
state  as  before,  hence  the  system  would  begin  to  re­
peat 
We  are  investigating  the  p o s s i b i l i ty  of  LAWALY  helping 
DISPROVER  by  communicating  information  on  why  she 
thereby  helping  DISPROVER  to 
f a i l ed  to  find  a  path, 
build  a  more  adequate  set  of  anchor  predicates.  The 
results  are  s t i ll  sketchy  and  w i ll  not  be  discussed 
here. 

the  anchor  predicates: 

i t s e l f,  and  f a i l u re 

is  accepted. 

9.  The  Importance  of  Axiomatlzation. 

Imme-
if  It  had 

further  specified  as: 

if  it  had  been  further  specified  as: 
INROOM(BOX  S). 

The  problem  of  section  ?  could  have  been  solved 
diately  by  LAWALY,  without  DISPROVER's  help, 
been 
CLOSED(DOOR)  NEXTTO(ROBOT  BOX)  INROOM(ROBOT  B).  The 
problem  of  section  8  could  have  been  solved  immediately 
by  LAWALY 
imOQM(ROBOT  3)  0N(ROBOT  BOX) 
Also  be  solved  immediately  by  LAWALY  if  the  climbon 
operator  had  specified  as  parts  of  i ts  preconditions 
that 
the  robot  could  climb  on  an  object  only  If  both 
she  and  the  object  were  in  the  same  room.  Thus,  we 
can  see  that  the  d i f f i c u l t i es  encountered  may  be  due 
to  the  axiomatization  used. 
Another  way  of  resolving  the  d i f f i c u l t i es 
to  "patch" 
the  goal  descriptions  to  include  consequences  such  as: 
a  robot  is  in  the  same  room  as 
etc.  Such  a  "patch" 

the  object  she  is  on, 

is  a  t r i v i al  program. 

If  could 

is 

10.  Conclusions. 

the 

technique  of  hereditary  p a r t i t i o ns  permits 

The 
disproofs  of  statements  that  cannot  be  made  true.  We 
have  applied  this  technique  to  a  disproving  program 
(perhaps 
the  f i r st  such  program  in  existence)  which 
operates  in  simulated  robot  worlds.  DISPROVER  can  be 
used 
cannot  occur  in  e  model.  We  give  examples  of  collabo­
r a t i on  between  DISPROVER  and  a  powerful  robot  planning 
system,  LAWALY.  The  axiomatization  chosen  for  the 
world  greatly 
the  performance  of  the  des­
cribed  systems. 

that  physically  undesirable  states 

to  ascertain 

influences 

11.  References. 

to  the  Application  of  Theorem  Proving  in  Prob­

1Fikes,  R.  E.  and  N i l s o n,  N.  J.  "STRIPS:  A  New  Ap­
proach 
lem  Solving,"  A r t i f i c i al  I n t e l l i g e n c e.  2,  189-208, 
1971. 
2Review  of  [ l ].  Computing  Reviews.  _13,  5,  216-217, 

1972. 
SIklossy,  L.  Modelled  Exploration  by  Robot.  Techni­
cal  Report  1,  Computer  Sciences  Dept.,  University  of 
Texas,  A u s t i n,  1972. 
4 
Simon,  H.  A.  On  Reasoning  about  Actions,  i n:  Simon, 

386 

387 

