Coordination to Avoid Starvation of Bottleneck Agents in a Large Network System

Rajesh Gautam

University of Tsukuba, JAPAN

r.gautam@aist.go.jp

Kazuo Miyashita

AIST, JAPAN

k.miyashita@aist.go.jp

Abstract

In this paper, we present a multi-agent control
method for a large-scale network system. We pro-
pose an extension of a token-based coordination
technique to improve the tradeoff between two con-
ﬂicting objectives of the network system: reducing
the lead time and increasing throughput.
In our
system, CABS, information about an agent’s ur-
gency of jobs to fulﬁll demanded throughput and to
maintain its utilization is passed from downstream
agents in the network so that upstream agents can
provide necessary and sufﬁcient jobs to bottleneck
agents whose loss of capacity degrades the to-
tal system performance. We empirically evaluate
CABS performance using a benchmark problem of
the semiconductor fabrication process, which is a
good example of a large-scale network system.

1 Introduction
Network systems have multiple resources that collectively
perform a desired task that is not atomic but rather com-
prises a set of steps to be accomplished in a speciﬁc sequence.
Queueing theory [Allen, 1990] has addressed analysis and
control of network queueing in its steady state. Neverthe-
less, to understand and control its dynamic behavior is con-
sidered critically important for realizing smooth operations of
today’s complicated network system. Transportation, com-
munication and manufacturing are typical examples of such
large networks, for which uninterrupted and stable operations
are required. In this paper, we use a manufacturing problem
as a benchmark for controlling a large-scale network system.
In queueing theory, Little’s Law [Little, 1961] states that
the expected inventory of work in process (WIP) equals
the average lead time multiplied by the average throughput.
Therefore, with a ﬁxed throughput, reducing the lead time re-
quires WIP to be reduced. However, with a variable and un-
predictable manufacturing environment, reducing WIP tends
to decrease throughput by cutting back job stocks of machines
so that machine downtimes have a high probability of forc-
ing idle time of other machines because of a lack of jobs to
process. In this paper, we are concerned with improving the
tradeoff between the lead time and the throughput in a manu-
facturing system with unpredictable machine failure.

In a network system, because of connectivity of the steps to
be processed, even if a system might have many overcapacity
resources, the ﬁnal throughput of the system is limited by the
resource that has the smallest capacity (called a bottleneck).
Maximizing throughput of the system therefore means keep-
ing the maximum utilization of the bottleneck resource. High
utilization of the bottleneck resource is ensured by maintain-
ing a sufﬁcient amount of jobs before it as a safety buffer
against random events that might cause its starvation. Hence,
to improve the tradeoff between lead time and throughput of a
manufacturing system, several methods have been developed
to regulate WIP at the lowest safe level that prevents starva-
tion of bottleneck machines [Fowler et al., 2002]. However,
those methods subsume that the bottleneck machines in the
system are identiﬁable by preliminary static analyses of the
problem and do not evolve over time. However, in the course
of manufacturing, the bottleneck machines might shift tem-
porarily because of unexpected random events such as ma-
chine failures that disturb the smooth ﬂow of jobs. This phe-
nomenon is called wandering bottlenecks. Most existing so-
lutions to the problem are rather philosophical and manage-
rial (such as Kaizen [Imai, 1997] and Theory of Constraint
(TOC) [Goldratt and Cox, 1992]) with a few exceptions of
identifying wandering bottlenecks [Roser et al., 2002].

To prevent starvation of bottleneck machines, lot release
control to regulate workload in front of the bottleneck ma-
chines by controlling the entry of jobs in the system [Glassey
and Resende, 1988] has been widely used in practice. Never-
theless, it has achieved limited success because its centralized
decision-making mechanism at the job entry point cannot re-
spond to dynamics of the manufacturing system (such as wan-
dering bottlenecks). Rather than controlling the job entry, it is
desired that jobs are processed and requested dynamically by
every machine in the system as to maintain a steady ﬂow of
jobs leading to the bottleneck machines. The desired control
(lot ﬂow control) is possible only through coordinated opera-
tions of the machines. Centralized control of all the machines
shares the same weak point with the lot release control. A de-
centralized coordination method is required so that every ma-
chine decides its job request and job processing in harmony
with other machines as an intelligent agent.

In a time-critical manufacturing environment, no machine
(i.e. agent) can afford to search and gather all necessary in-
formation of other machines for deciding its actions. Con-

IJCAI-07

1281

sequently, many coordination techniques proposed in multi-
agent systems [Jennings et al., 2001; Sandholm, 1999; Falt-
ings and Nguyen, 2005; Durfee, 1996] are inappropriate for
our purpose. Just-In-Time (JIT) [Ohno, 1988] is a method
of the distributed manufacturing control by exchanging to-
kens (Kanban cards) among the machines to control ﬂows and
amounts of work (WIP) in the system. In fact, JIT and its ex-
tensions are instances of token-based coordination [Wagner
et al., 2003; Xu et al., 2005; Moyaux et al., 2003] and have
been widely used in manufacturing and other related ﬁelds.
However, because of its simplicity, JIT succeeds only in sta-
ble and leveled environments.

In this paper, we propose an extension of the token-based
coordination method: Coordination for Avoiding Bottleneck
Starvation (CABS) for improving a tradeoff between a lead
time and a throughput in a large-scale and uncertain network
system.
In CABS, agents coordinate with other agents to
maintain the adequate ﬂow of jobs to satisfy the various de-
mands by preventing starvation of bottleneck agents. That
coordination is achieved by efﬁcient passing of messages in
the system. The message includes information that enables
agents to identify the bottleneck agents and hence coordi-
nate with other agents by maintaining the desired ﬂow of
jobs to the bottleneck agents.
In Section 2, we explain a
generic manufacturing problem and the semiconductor fab-
rication process used for experiments. The details of algo-
rithms in CABS are explained in Section 3. Section 4 illus-
trates basic behaviors of CABS using an example manufac-
turing scenario. Section 5 shows results of simulation exper-
iments and validates the higher effectiveness of CABS than
other conventional manufacturing control methods. Finally,
Section 6 concludes the paper.

2 Problem

In this section, we ﬁrst describe a general model of a manu-
facturing problem and then introduce a semiconductor fabri-
cation process as an example of the most complicated systems
in the current manufacturing industry.

2.1 Deﬁnition

1, ..., Sl
sl

j
1 , ..., T

j
tj

The manufacturing problem requires processing a set of jobs
J = {J1, ..., Jn} by a set of workstations, which are mod-
eled as agents A = {A1, ..., Am} in this paper. Each job Jl
consists of a set of steps Sl = {Sl
} to be processed
according to its process routing that speciﬁes precedence con-
straints among these steps. Every lot of the jobs ﬂows through
agents according to its process route. Each agent Aj has iden-
tical pj machines to process its tj tasks T j = {T
}.
Each job Jl has a demand rate drl, which is the number of
lots of Jl to be completed in one hour. Furthermore, when an
j
agent Aj processes its task T
i . A
task of the agents corresponds to a step in the jobs. Hence,
precedence constraints among steps create a complicated di-
rectional network of agents. Presume an agent Aj’s task T j
q
is a step Sl
i. A preceding agent of the agent Aj in terms of the
task T j
i−1 and a succeed-
ing agent, Asuc(j,q), processes a step Sl

q , Apre(j,q), is in charge of a step Sl
i+1.

j
i , it takes a process time pt

In addition to the agents that model the workstations, two
types of synthetic agents exist. One is a sink-agent for each
kind of job, which receives the completed lots from the last
agent of the job’s process route. Another synthetic agent, a
source-agent, releases every job in the system by transferring
it to the agent processing the ﬁrst step of the job.

2.2 Semiconductor Fabrication Process

Semiconductor fabrication is among the most complex man-
ufacturing processes. For example, the production steps for
semiconductor manufacturing usually number a few hundred,
with numerous repetitive reentrant loops. Its lead time ex-
tends over a couple of months [Atherton and Atherton, 1995].

DFB1_ 2

DFE1_ 2

DFA2

DFA4

SOURCE

FSI

DFB3

QLESS1

DRY1_ 2

TEG2

DFB4

C1_ 9

PE1_ 5

D1_ 9

QLESS2

ION1_ 3

BLU1

ASM2

WET5

DFE3_ 4

WET3

DFA1

AME46

AME135

DFC2_ 3

MEG1_ 2

WET1

SCRUB

DFC1

LPS1

OSICD2

DFC4

ANC1

SINK  (Product  2)

SINK  (Product  1)

Figure 1: Network of agents in a semiconductor fab

For empirical validation of CABS, we used the Measure-
ment and Improvement of Manufacturing Capacity (MIMAC)
testbed datasets of the wafer fabrication processes [Fowler
and Robinson, 1995], available from Arizona State univer-
sity (http://www.was.asu.edu/˜masmlab/home.htm). The data
set speciﬁes the production steps of semiconductor manufac-
ture. The factory model that we have chosen for our ex-
periments represents a factory with 38 workstations. Two
products, P roduct1 and P roduct2, are produced in the sys-
tem. P roduct1 has 92 processing steps and P roduct2 has
19 steps. Many cycles exist in the process routes involving
both products. The total process time for P roduct1 is 4, 423
min (73.7 h); for P roduct2, it is 1, 097 min (18.3 h). Fig-
ure 1, which depicts the process ﬂows of products through
the workstations in the experiment problem, can be viewed
as a complex network of agents.

3 Coordination through Requirements

In CABS, actions of the agents are coordinated using the
messages transmitted among agents. An agent uses require-
ment information in the incoming messages from succeeding
agents for making lot processing decisions and for generating
messages to send to its preceding agents.

IJCAI-07

1282

3.1 Action Selection
The CABS system utilizes token-based coordination so that
an agent selects its lot-processing actions based on require-
ments from its succeeding agents in the process ﬂow. CABS
realizes a pull mechanism like a JIT system that does not pro-
cess jobs until they are “pulled” by downstream agents.

Each agent Aj periodically receives a requirement for pro-
cessing a task T j
q from a corresponding succeeding agent
Asuc(j,q). The requirement consists of the following three
types of information (detailed deﬁnitions will be given later
in Section 3.2):
time limit: time by which agent Asuc(j,q) needs another

lot for the next step of the task T j
q .

request rate: rate at which agent Asuc(j,q) needs the
q , starting at time

lots for the next step of the task T j
limit.

criticality: criticality of the agent Asuc(j,q).

In addition to the requirement information from the suc-
ceeding agents, for each task T j
, an agent Aj is as-
sumed to have local information such as the demand rate,
current WIP and a total number of lots already produced.

q ∈ T j

j

j
i

(cid:2)
(cid:2) (T

j
i as current WIP of task T

Algorithm 1 selectTask( message im[ ] ) of agent Aj
1: ∀i ∈ {1, · · · , tj} set t w
2: ET j ← {T
3: sort ET j
4: set F ET j as the ﬁrst task in ET j
5: loop
6:
7: OF T j ← {ET

set start time of F ET j at current time

i ∈ T j) ∧ (t w

i > 0)}

according to time limit (i.e., im[ ].tl) of tasks

(ET

j
i

(cid:2)
(cid:2)

j

j
i

j
i

∈ ET j) ∧
i ) >

j

j

i overlaps F ET j) ∧ (criticality(ET

(ET
criticality(F ETj))}
// im[ ].cr decides criticality of a task
if OF T j (cid:6)= ∅ then

remove F ETj from ET j
set F ETj as the ﬁrst task in ET j

8:
9:
10:
11:
12:
end if
13:
14: end loop

else

return F ETj

Agent Aj uses the requirement information from its suc-
ceeding agents for choosing the next lot to process (i.e.
dispatching) when any machine of the agent Aj becomes
free. Algorithm 1 describes the dispatching algorithm for
It returns a task with the earliest time
the agent Aj .
limit whose dispatching will not delay a task of any higher
criticality beyond its time limit. In algorithms of
the paper, im[ ].tl, im[ ].rr and im[ ].cr respectively de-
note requirement information of time limit, request
rate and criticality for the corresponding tasks in the
incoming messages of the agent. In addition, tasks mutually
overlap when an intersection exists in their processing periods
(i.e., (time limit - process time) of one overlaps
with (current time + process time) of other).

3.2 Message Passing

Dispatching of agents in CABS is decided solely on require-
ments from succeeding agents. Hence, information in the re-
quirement is a key to coordination among agents.

An agent tries to meet the requirements of succeeding
agents for all of its tasks. Aside from meeting the require-
ments of succeeding agents, the agent must also minimize its
workload deﬁcit at all times for satisfying the demand rates of
jobs. For example, Aj ’s workload of a task T j
q is the time re-
quired to process one lot of the task (i.e. ptj
q). Each agent has
aggregated workloads of all of its tasks based on the demand
rates of jobs. The difference between the workloads and the
total processing time of the tasks that have been processed is
a current workload deﬁcit of an agent.

Algorithm 2 calcCriticality( ) of agent Aj
1: ∀i ∈ {1, · · · , tj} set t w
2: t f tj ← current time +

(cid:3)

j
i as current WIP of task T

j
i

∀i∈{1,···,tj }(t w

j
i pt

j

i /pj)

// earliest time to ﬁnish current WIP

3: ∀i ∈ {1, · · · , tj} set t de

as total demand of task T

j
i until t f tj

4: ∀i ∈ {1, · · · , tj} set t pr

j
i

j
i

as total production of task T
j
∀i∈{1,···,tj }(t de

5: t wldj ←

(cid:3)

j
i until current time
i − (t pr

i + t w

i ))pt

j

j

j
i

// current estimated workload deﬁcit of Aj
)pt

∀i∈{1,···,tj } drjob(T j

6: scj ← pj(1.0 −

(cid:3)

i

j

i /pj)

// surplus capacity of Aj

7: return t wldj /scj

An agent can recover its workload deﬁcit by processing
more lots than demand rates of jobs. The time needed to re-
cover the deﬁcit depends on the amount of deﬁcit and surplus
capacity available to the agent. Algorithm 2 calculates an
agent’s criticality as a ratio of its workload deﬁcit and sur-
plus capacity. In CABS, an agent with a large criticality is
considered a bottleneck agent. Dynamic change of an agent’s
criticality represents wandering of bottlenecks.
To maintain a continuous lot ﬂow of a task T

j
i to Asuc(j,i)
at the requested rate im[i].rr, the agent requires an incoming
lot ﬂow at the same rate from the corresponding preceding
agent Apre(j,i). However, the agent itself might need the jobs
earlier and at a higher rate in order to recover its workload
deﬁcit. The agent requires jobs immediately and at the max-
imum rate at which it can process materials to recover the
deﬁcit rapidly. Based on the requirement from the succeed-
ing agent and its current workload deﬁcit, the agent generates
a consolidated outgoing requirement for its preceding agent.
Algorithm 3 describes calculation of outgoing requirement
messages by the agent Aj . For each T
, a requirement
tuple (om[i].tl, om[i].rr, om[i].cr) is generated and sent to
the preceding agent Apre(j,i).

i ∈ T j

j

The agent acts to satisfy the requirement of its succeeding
agent when agent Aj is not critical (i.e., its workload deﬁcit is
less than that of Asuc(j,i)) or has enough WIP of other tasks
In this case, the agent can postpone the time
to process.

IJCAI-07

1283

Algorithm 3 makeRequest( message im[ ] ) of agent Aj
1: ∀i ∈ {1, · · · , tj} set t w
2: t f tj ← current time +

j
i as current WIP of task T

∀i∈{1,···,tj }(t w

j
i pt

i /pj)

(cid:3)

j
i

j

// earliest time to get starved
3: t crj ← calcCriticality()

// current criticality of Aj
4: for all i ∈ {1, · · · , tj} do
5:

j

j

i ← current time + t w

j
t f t
// earliest time to get starved of T
i ← im[i].tl − pt
t tl
// time to replenish T
if (t crj < im[i].cr) ∨ (t tl

j

j

j
i

i ∗ pt

j
i /pj

i /im[i].rr

i + t w
j
i based on request from Asuc(j,i)

j

i < t f tj) then

6:

7:

8:
9:

10:
11:
12:
13:

om[i].tl ← max(t f t
om[i].cr ← max(im[i].cr, t crj)
om[i].rr ← min(im[i].rr, pj/pt
i )

j
i , t tl

i )

j

j

else // Aj is lagging and starving

om[i].tl ← t f tj
om[i].cr ← t crj
om[i].rr ← pj/pt

j
i

14:
end if
15:
16: end for
17: return om[ ]

j
limit of requesting many tasks T
i beyond the earliest pos-
j
sible timing when the current WIP is emptied (i.e., t f t
i ) un-
til the last timing when the succeeding agent’s request ex-
j
hausts the current WIP (i.e. t tl
i ). This situation realizes
lean manufacturing, which is intended to reduce the amount
of WIP and shorten lead times. As for criticality, agent
Aj intends to pass the highest criticality along the pro-
cess route by choosing a higher value of itself or its suc-
ceeding agent. The request rate is truncated only when
the requested value is greater than the maximum capacity of
agent Aj.

The agent prioritizes recovering its workload deﬁcit over
satisfying the succeeding agent’s requirement when agent Aj
is critical and has no sufﬁcient WIP to process. Hence, as a
requirement to its preceding agent, the agent sends the values
of its own time limit, criticality and request
rate for the purpose.

4 Simpliﬁed Example Scenario

The behavior of the algorithms mentioned above is illus-
trated using a simple scenario of a production system, which
produces three job types (A, B, C) according to the process
routes shown in Fig. 2. Five workstation agents (labeled one
to ﬁve) and their utilization according to the demand rate of
jobs is shown with the attached percentage. Two failures
occur in the system around the same time. Agent4 fails at
time 21,000 and recovers at time 60,000. Agent5 fails at time
13,000 and recovers at time 90,000.

y
r
o
t
n
e
v
n
I
 

b
o
J
 

d
e
h
s
i
n
i

F

y
t
i
l
a
c
i
t
i
r

C

 3000

 2000

 1000

 0

-1000

-2000

-3000

-4000

-5000

-6000

 900

 800

 700

 600

 500

 400

 300

 200

 100

 0

 0

JobA
JobB
JobC
Demand Level

1

2

3

4

5

6

 0

 20000

 40000

 60000

 80000

 100000

 120000

 140000

 160000

 180000

 200000

Time

Figure 3: Finished job inventory

Agent3
Agent4
Agent5

1

2

3

4

5

6

 20000

 40000

 60000

 80000

 100000

 120000

 140000

 160000

 180000

 200000

Time

Figure 4: Criticality of agents

The achieved production of the products w.r.t.

to the de-
mand is shown in Fig. 3. The criticality of three agents along
time is shown in Fig. 4 (the criticality of the other two agents
is unimportant this scenario). The time line is divided into six
sections, as shown in the ﬁgures.

In the second time section, when Agent3 stops receiving
JobC because of a failure on Agent5, its criticality rises and
it requests the other job, JobA, at a higher rate from Agent2
to meet its workload requirement. Agent2 propagates this
request to Agent1.

Then, in the third time section, when Agent4 stops request-
ing JobB because of its failure, this information is also prop-

IJCAI-07

1284

Figure 2: Example production system

agated by Agent2 to Agent1. On receiving these updated re-
quirements, Agent1 stops processing JobB and uses its full
capacity to meet the requirement of Agent3 by processing
JobA at a higher rate. Because Agent3’s requirement of JobA
at a high rate is consistently met, its criticality remains low
until the recovery of Agent4 (at time 60,000). Although the
utilization of Agent3 is higher than Agent4 according to the
demand rate, Agent4’s criticality rises during the failure and
it becomes more critical (i.e. bottleneck) than Agent3.

In the fourth time section, after recovery (at time 60,000)
Agent4 requests JobB at a higher rate to recover its work-
load deﬁcit. At time 60,000, Agent1 stops dispatching JobA,
which has a lower criticality (of Agent3) in its requirement,
and uses its full capacity to dispatch JobB, which has a higher
criticality (of Agent4). As Agent4 starts receiving jobs in-
stead of Agent3, Agent4’s workload deﬁcit and criticality de-
crease and those of Agent3 increase.

In the ﬁfth time section, when criticality of Agent3 and
Agent4 become equal at time 75,000, Agent1 uses its capac-
ity to produce both JobA and JobB for balancing the respec-
tive criticalities of Agent3 and Agent4. Then, criticalities of
Agent3 and Agent4 rise at the same rate until Agent5 restarts
processing JobC after its recovery at time 90,000.

In the sixth time section, because Agent3 has a large deﬁcit
of JobC, Agent3 dispatches JobC exclusively to recover this
deﬁcit and reduce its own criticality at the same time. As
Agent1 stops getting requests for additional JobA, it stops
processing JobA and starts processing JobB. Consequently,
Agent1 recovers the inventory deﬁcit of JobB and also re-
duces the criticality of Agent4. The system therefore recov-
ers the deﬁcit of all the jobs and returns to normal by time
200,000. Although Agent1 has the highest utilization in this
example, it is not relevant because it is unaffected by any fail-
ure and its criticality remains low at all times.

5 Experiment
We evaluated performance of CABS using data of the semi-
conductor manufacturing process described in Section 2.2.

A simulation system is developed to model a manufactur-
ing process with agents to test the proposed algorithms in
CABS. The system is built using SPADES [Riley and Riley,
2003] middleware (http://spades-sim.sourceforge.net), which
is an agent-based discrete event simulation environment. It
provides libraries and APIs to build agents that interact with
the world by sending and receiving time-based events.

5.1 Experimental Results
In the experiments, we induced random failures of all the
workstations. The failures occur based on the exponential dis-
tribution with the MTBF value as 5,000 min and the MTTR
value as 400 min. Because of dynamic changes of worksta-
tions’ capacity, bottleneck workstations shifted temporarily
(i.e. criticality of agents changed dynamically).

We compared the performances of CABS to those of a con-
ventional manufacturing control method: constant releasing
with earliest due date ﬁrst (EDD) dispatching. We were un-
able to make a comparison with more sophisticated methods
such as those in [Fowler et al., 2002] because they are inap-
plicable to problems with wandering bottlenecks.

Conventional system
CABS

Demand Rate

132.0
129.4
126.7
118.8
105.6

 15000

 14000

 13000

 12000

 11000

 10000

 9000

 8000

 7000

 6000

e
m

i
t
d
a
e
L

 5000

 104

 106

 108

 110

 114

 112
Throughput

 116

 118

 120

 122

 124

 126

Figure 5: Throughput and lead time of P roduct1

Conventional system
CABS

Demand Rate

151.2
148.2
145.2
136.1
121.0

 9000

 8000

 7000

 6000

 5000

 4000

 3000

 2000

e
m
i
d
a
e
L

 1000

 120

 125

 130

 135

 140

 145

Throughput

Figure 6: Throughput and lead time of P roduct2

Conventional system
CABS

Aggregated Demand

751,142
736,327
721,046
676,046
600,949

 3.5e+06

 3e+06

 2.5e+06

 2e+06

 1.5e+06

 1e+06

e
m

 

i
t
d
a
e
L
d
e
t
a
g
e
r
g
g
A

 500000

 580000

 600000

 620000

 640000

 660000

 680000

 700000

 720000

Aggregated Processing Time

Figure 7: Aggregated result of two products

Figure 5 shows the result of throughputs and lead times
for P roduct1 with different demand rates. When demand
rates are high, some agents become bottlenecks and regulate a
throughput of the system when they become starved. In such
cases, CABS achieved approximately equivalent throughputs
with the conventional method, but required much less lead

IJCAI-07

1285

time (therefore, much less WIP).

Figure 6 depicts the results of throughput and lead times
for P roduct2. This result shows that the performance of
CABS is slightly worse than that of the conventional method.
But because both products have similar demand rates and
P roduct1 has much longer processing time than P roduct2,
the result of P roduct1 must have a greater impact on the per-
formance of the entire manufacturing system. Furthermore,
the result shows that CABS produced P roduct2 more than
demanded because CABS tried to prevent a loss of agents’
capacity caused by failures; the failures did not stop during
the experiments. Over-production of P roduct2 should be de-
creased thereafter if the failures cease at some time point.
(cid:3)

In Fig. 7, the aggregated processing time is calculated as
i P rocess T imeiT hroughputi and the aggregated lead
i LeadtimeiT hroughputi. Because
time is calculated as
Leadtime = P rocess T ime + W ait T ime, this result
shows that as an aggregate performance of the manufacturing
system, CABS required less wait time than the conventional
system, which means that CABS has less WIP than the con-
ventional method to produce comparable outputs. In other
words, CABS prevented starvation of bottleneck agents (i.e.,
achieving a high throughput) without increasing WIP in the
system (i.e., achieving a short lead time).

(cid:3)

6 Conclusion

In this paper, we investigated coordination techniques for
a large-scale agent network system. The proposed system,
CABS, coordinates the action of agents through a message-
passing mechanism that is similar to other token-based coor-
dination methods. By passing and utilizing the information
of criticalities and job requirements of downstream agents,
CABS can produce high throughput by preventing starvation
of wandering bottleneck agents and, simultaneously, achieve
short lead times by reducing the amount of inventories in the
system. In experiments using data of a semiconductor fabri-
cation process, we have validated that CABS can better im-
prove the tradeoff between throughput and lead time than a
conventional manufacturing control method can. We believe
that the mechanism of CABS is suitable not only for manu-
facturing, but also for other network systems.

In the current implementation of CABS, agents might
change their requests to the preceding agents drastically
based on the small ﬂuctuations of information they possess.
Therefore, performance of CABS tends to be unstable during
its execution. We plan to make agents decide their requests
using a probabilistic threshold so that the behavior of CABS
becomes more moderate and controllable.

References
[Allen, 1990] A. O. Allen.

Probability, Statistics, and

Queueing Theory. Academic Press, 1990.

[Atherton and Atherton, 1995] L. Atherton and R. Atherton.
Wafer Fabrication: Factory Performance and Analysis.
Kluwer Academic Publishers, 1995.

[Durfee, 1996] E. H. Durfee. Planning in distributed artiﬁ-
cial intelligence. In G. O’Hare and N. R. Jennings, editors,

Foundations of Distributed Artiﬁcial Intelligence, chap-
ter 8, pages 231–245. John Wiley & Sons, 1996.

[Faltings and Nguyen, 2005] B. Faltings and Q. Nguyen.
Multi-agent coordination using local search. In Proceed-
ings of IJCAI-05, pages 953–958, 2005.

[Fowler and Robinson, 1995] J. Fowler and J. Robinson.
Measurement and improvement of manufacturing capac-
ities (MIMAC): Final report. Technical Report Technical
Report 95062861A-TR, SEMATECH, 1995.

[Fowler et al., 2002] J. Fowler, G. Hogg, and S. Mason.
Workload control in the semiconductor industry. Produc-
tion Planning & Control, 13(7):568–578, 2002.

[Glassey and Resende, 1988] C. Glassey and M. Resende.
Closed-loop job release control for vlsi circuit manufactur-
ing. IEEE Transactions on Semiconductor Manufacturing,
1(1):36–46, 1988.

[Goldratt and Cox, 1992] E. Goldratt and J. Cox. The Goal:
A process of Ongoing Improvement (2nd rev edition).
North River Press, 1992.

[Imai, 1997] M. Imai. Gemba Kaizen: A Commonsense,
Low-cost Approach to Management. McGraw-Hill, 1997.

[Jennings et al., 2001] N. R. Jennings, A. R. Lomuscio
P. Faratin, S. Parsons, C. Sierra, and M. Wooldridge. Au-
tomated negotiation: Prospects, methods, and challenges.
International Journal of Group Decision and Negotiation,
10(2):199–215, 2001.

[Little, 1961] J. D. C. Little. A Proof of the Queueing For-

mula L = λW . Operations Research, 9:383–387, 1961.

[Moyaux et al., 2003] T. Moyaux, B. Chaib-draa,

and
S. D’Amours. Multi-agent coordination based on tokens:
Reduction of the bullwhip effect in a forest supply chain.
In Proceedings of AAMAS-03, pages 670–677, 2003.

[Ohno, 1988] T. Ohno. Toyota Production System: Beyond

Large-Scale Production. Productivity Press, 1988.

[Riley and Riley, 2003] P. Riley and G. Riley. SPADES —
a distributed agent simulation environment with software-
in-the-loop execution. In Proceedings of the 2003 Winter
Simulation Conference, pages 817–825, 2003.

[Roser et al., 2002] C. Roser, M. Nakano, and M. Tanaka.
Shifting bottleneck detection. In Proceedings of the 2002
Winter Simulation Conference, pages 1079–1086, 2002.

[Sandholm, 1999] T. W. Sandholm. Distributed rational de-
cision making.
In G. Weiß, editor, Multiagent Systems:
A Modern Approach to Distributed Artiﬁcial Intelligence,
pages 201–258. MIT Press, Cambridge, MA, 1999.

[Wagner et al., 2003] T. Wagner, V. Guralnik, and J. Phelps.
A key-based coordination algorithm for dynamic readi-
ness and repair service coordination.
In Proceedings of
AAMAS-03, pages 757–764, 2003.

[Xu et al., 2005] Y. Xu, P. Scerri, B. Yu, S. Okamoto,
M. Lewis, and K. Sycara. An integrated token-based
algorithm for scalable coordination.
In Proceedings of
AAMAS-05, pages 407–414, 2005.

IJCAI-07

1286

