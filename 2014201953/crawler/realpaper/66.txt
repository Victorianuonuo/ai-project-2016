Tractable Reasoning with Incomplete First-Order Knowledge

in Dynamic Systems with Context-Dependent Actions

Yongmei Liu and Hector J. Levesque

Department of Computer Science

University of Toronto

Toronto, ON, Canada M5S 3G4
fyliu, hectorg@cs.toronto.edu

Abstract

A basic reasoning problem in dynamic systems is
the projection problem: determine if a formula
holds after a sequence of actions has been per-
formed. In this paper, we propose a tractable1 so-
lution to the projection problem in the presence
of incomplete ﬁrst-order knowledge and context-
dependent actions. Our solution is based on a
type of progression, that is, we progress the ini-
tial knowledge base (KB) wrt the action sequence
and answer the query against the resulting KB.
The form of reasoning we propose is always log-
ically sound and is also logically complete when
the query is in a certain normal form and the agent
has complete knowledge about the context of any
context-dependent actions.

1 Introduction
In the area of Knowledge Representation and Reasoning,
there is a well-known tradeoff between the expressiveness of
the representation language and the computational tractabil-
ity of the associated reasoning task. At one extreme, we
have databases for which queries can be efﬁciently evalu-
ated. But databases are too limited for many AI applica-
tions because they require complete knowledge about the
domains. Levesque [1998] proposes a generalization of a
database called a proper KB, which allows a limited form of
incomplete knowledge, equivalent to a (possibly inﬁnite) con-
sistent set of ground literals. Since the deduction problem for
proper KBs is undecidable, Levesque proposes an evaluation-
based reasoning procedure called V that is logically sound
and, when the query is in a certain normal form called NF,
also logically complete. Moreover, later Liu and Levesque
[2003] show that despite the incomplete knowledge, database
techniques can be used to implement V efﬁciently.

In this paper, we apply the procedure V to reasoning in
dynamic systems where the state of the world changes as a
result of the actions of agents. For such applications, a basic
reasoning problem is the so-called projection problem: given
an action theory that speciﬁes the preconditions and effects of
actions, and an initial KB, determine whether or not a formula

1By “tractable” we mean “solvable in polynomial time”.

holds after a sequence of actions is performed. Two settings
where this problem arises naturally are for planning and for
high-level program execution [Levesque et al., 1997]. A pre-
requisite to planning is the ability to determine if a goal is
satisﬁed after a sequence of actions. To execute a high level
robotic program such as “while there is a block on the table,
pick up a block and put it away”, one needs to determine after
various sequences of actions whether there is still a block on
the table.

In practice, there are two ways to deal with projection: we
can progress the initial KB wrt the action sequence and an-
swer the query against the resulting KB; or we can regress
the query wrt the action sequence and answer the resulting
query against the initial KB. Progression has at least two ad-
vantages: First, it avoids a duplication of effort when mul-
tiple queries need to be answered wrt the same action se-
quence, and especially when that sequence is long. Second,
in a robotics setting, a robot can use its “mental idle time” to
compute a progression while it is busy performing physical
actions. Projection via progression has three main compu-
tational requirements: the new KB must be efﬁciently com-
puted, its size should be at most linear in the size of the initial
KB (to allow for iterated progression), and it must be pos-
sible to answer the query efﬁciently from the new KB. Lin
and Reiter [1997] give a formal study of progression. They
show that progression is not always ﬁrst-order deﬁnable, and
identify a few important cases where progression is ﬁrst-order
deﬁnable and computationally tractable. However, the third
requirement is not addressed in their paper.

In this paper, we propose a tractable, sound, and sometimes
complete solution to the projection problem in the presence
of incomplete ﬁrst-order knowledge and context-dependent
actions. We restrict our attention to actions with only “lo-
cal” effects, and where incomplete knowledge is in the form
of a proper KB. We deﬁne a version of progression where a
proper KB remains proper afterward, and where applying V
to the progressed KB and the query returns the same value as
applying V to the initial KB and a regressed query. We prove
that when the query is in NF and the initial KB has com-
plete knowledge about the context of any context-dependent
actions, our solution is logically complete. It is also logically
complete when the query is in NF and there are sensing ac-
tions that provide dynamic information about the context of
the relevant context-dependent actions.

2 Preliminaries
In this section, we review proper KBs, V, and NF . Also,
we brieﬂy review the situation calculus, and formally deﬁne
local-effect action theories and regression for them.
2.1 Proper KBs, V, and the normal form NF
We use a standard ﬁrst-order logical language L with equal-
ity, a countably inﬁnite set of constants C = fc1; c2; : : :g, and
no other function symbols. We restrict our attention to stan-
dard interpretations, where equality is identity, and there is a
bijection between the set of constants and the domain of dis-
course. This restriction can be captured by a set of axioms E,
consisting of the axioms of equality and the set of formulas
fci 6= cj j i 6= jg. Since we treat equality separately, when
we say “predicate”, “atom” or “literal”, we exclude equality.
We use (cid:26) to range over atoms whose arguments are distinct
variables. We use e to range over ewffs, that is, quantiﬁer-free
formulas with only equalities (i.e. no predicates). We use 8(cid:30)
to denote the universal closure of (cid:30). We write (cid:30)x
c to denote
(cid:30) with all free occurrences of x replaced by constant c. We
write (cid:6) j=E (cid:30) to denote E [ (cid:6) j= (cid:30).
Deﬁnition 1 A KB (cid:6) is proper if E [ (cid:6) is consistent and (cid:6)
is a ﬁnite set of formulas of the form 8(e (cid:27) (cid:26)) or 8(e (cid:27) :(cid:26)):
It is not hard to see that the problem of determining whether a
sentence is logically entailed by a proper KB is undecidable,
since when the KB is empty, this reduces to classical valid-
ity. Levesque [1998] proposes an evaluation-based reasoning
procedure called V instead. Given a proper KB and a query,
V returns one of three values 0 (known false), 1 (known true),
or 1

2 (unknown) as follows:

8>>><
>>>:

1

0

1
2

if there is a 8(e(~x) (cid:27) P (~x))
in (cid:6) such that V [(cid:6); e(~c )] = 1
if there is a 8(e(~x) (cid:27) :P (~x))
in (cid:6) such that V [(cid:6); e(~c )] = 1
otherwise

1. V [(cid:6); P (~c )] =

, and 0 otherwise;

2. V [(cid:6); c = c0] = 1 if c is identical to c0
3. V [(cid:6);:(cid:30)] = 1 − V [(cid:6); (cid:30)];
4. V [(cid:6); (cid:30) _  ] = maxfV [(cid:6); (cid:30)]; V [(cid:6);  ]g;
5. V [(cid:6);9x(cid:30)] = maxc2H+ V [(cid:6); (cid:30)x

c ], where H + is the
union of the constants in (cid:6) or (cid:30), and an extra constant.
This V procedure is logically sound and, when the query is in
a certain normal form called NF , also logically complete:
Theorem 1 ([Levesque, 1998]) Let (cid:6) be proper. Then
1. for every (cid:30) 2 L,
if V [(cid:6); (cid:30)] = 1 then (cid:6) j=E (cid:30);
2. for every (cid:30) 2 NF, V [(cid:6); (cid:30)] = 1 iff (cid:6) j=E (cid:30);

and if V [(cid:6); (cid:30)] = 0 then (cid:6) j=E :(cid:30).
and V [(cid:6); (cid:30)] = 0 iff (cid:6) j=E :(cid:30).

For the interested readers, the following is the deﬁnition of

NF from [Levesque, 1998]:
Deﬁnition 2 A set Γ of sentences is logically separable iff
for every consistent set of ground literals L, if L [ Γ has no
standard model, then L[f(cid:30)g is inconsistent for some (cid:30) 2 Γ.
Deﬁnition 3 The normal form NF is the least set such that

arable, then ^(cid:30)i 2 NF;
Γ = f(cid:30)x

1. if (cid:30) is a ground atom or ewff, then (cid:30) 2 NF ;
2. if (cid:30) 2 NF , then :(cid:30) 2 NF ;
3. if (cid:30)1; : : : ; (cid:30)n 2 NF, and f(cid:30)1; : : : ; (cid:30)ng is logically sep-
4. if Γ (cid:18) NF , Γ is logically separable, and for some (cid:30),
The intuition behind NF is that different parts of a formula
must be logically independent. A simple example of a for-
mula not in NF is (p _ :p), where p is atomic. In the propo-
sitional case, a CNF formula is in NF if its clauses are non-
tautologous and closed under resolution.

c j c 2 Cg, then 8x(cid:30) 2 NF.

Liu and Levesque [2003] show that V can be implemented
efﬁciently using database techniques (projections, joins, etc).
Here we present a cleaner variant of this result.
Let Lk denote the set of formulas from L that use at most
k different variables. Let R = f~c 1; : : : ; ~c mg be a ﬁnite set of
n-tuples. We use ~x 2 R to denote ~x = ~c 1 _ : : : _ ~x = ~c m.
Deﬁnition 4 Let L be P or :P for some predicate P . The
ewff deﬁning L in a proper (cid:6), denoted by (cid:24)L, is the disjunc-
tion of all e such that 8(e(~x) (cid:27) L(~x)) 2 (cid:6). We can write (cid:24)L
in the form of ~x 2 IL _ eL ^ ~x 62 OL so that IL and OL are
ﬁnite relations with as many tuples as possible, and eL is an
ewff. The e-size of (cid:6) is the maximum size of an eL in (cid:6).
Then a corollary to Theorem 4.8 in [Liu and Levesque, 2003]:
Corollary 2 Let (cid:6) be proper, and let (cid:30) 2 Lk. Then V [(cid:6); (cid:30)]
can be computed in time O(lmnk), where l is the size of (cid:30),
m is the e-size of (cid:6), and n is the size of (cid:6).
Although the time complexity scales exponentially with k,
this is typical even of queries over ordinary databases, and so
is perhaps as good as can be expected.

2.2 Situation calculus
Our account of action and change is formulated in the lan-
guage of the situation calculus [McCarthy and Hayes, 1969;
Reiter, 2001]. We will not go over the language here except
to note the following components:
there are three disjoint
sorts for actions, situations, and objects; there is a special
constant S0 denoting the initial situation, namely the one in
which no actions have yet occurred; there is a distinguished
binary function do(a; s) denoting the successor situation to s
resulting from performing action a; relations whose truth val-
ues vary from situation to situation, are called (relational) ﬂu-
ents, and are denoted by predicate symbols taking a situation
term as their last argument; and there is a special predicate
P oss(a; s) stating that action a is executable in situation s.
We relate the language of the situation calculus to L as
follows: There is a set of constants of sort object which are
constants of L. The situation-independent predicates and re-
lational ﬂuents are predicates from L. That is, if P (~x) is a
situation-independent predicate, and F (~x; s) is a relational
ﬂuent, then P (~x) and F (~x) are predicates from L.
We extend the language L to L+ by allowing equalities in-
volving action functions. Let (cid:30) 2 L+, and let (cid:28) be a situation
term. We use (cid:30)[(cid:28)] to denote the situation calculus formula
obtained from (cid:30) by taking (cid:28) as the situation arguments of all
ﬂuents mentioned by (cid:30). We use (cid:11) to range over ground ac-
tions, and we use (cid:14) to range over sequences of ground actions.

Let (cid:14) = h(cid:11)1; : : : ; (cid:11)ni. We use do((cid:14); S0) to denote the end sit-
uation of (cid:14), that is, do((cid:11)n; do((cid:11)n−1; : : : do((cid:11)1; S0) : : :)).

A particular domain of application will be speciﬁed by a

basic action theory of the following form:2

D = Dap [ Dss [ Duna [ DS0 ; where

1. Dap is a set of action precondition axioms, one for
each action function A, with form P oss(A(~x); s) (cid:17)
(cid:5)A(~x)[s],3 where (cid:5)A(~x) 2 L.
2. Dss is a set of successor state axioms (SSAs), one for
each ﬂuent, of the form F (~x; do(a; s)) (cid:17) (cid:8)F (~x; a)[s],
where (cid:8)F (~x; a) 2 L+. Usually, (cid:8)F (~x; a) has the form

F (~x; a) _ (F (~x) ^ :γ−
γ+

F (~x; a)):

SSAs take the place of the so-called effect axioms, and
provide a solution to the frame problem.

3. Duna is the set of unique names axioms for actions:
A(~x) 6= A0(~y); and A(~x) = A(~y) (cid:27) ~x = ~y;

where A and A0

4. DS0 is of the form f(cid:30)[S0] j (cid:30) 2 (cid:6)0g, where (cid:6)0 (cid:18) L.

are distinct action functions.

(cid:6)0 is called the initial KB.

In this setting, the projection task can be deﬁned as follows:
determine if D j=E (cid:30)[do((cid:14); S0)]; where (cid:30) 2 L, and (cid:14) is a
sequence of ground actions.

As a running example, we will use a simple blocks world.4
We use a single action, move(x; y; z), moving a block x from
block y to block z (treating the table as just another block).
We use three ﬂuents: clear(x; s), block x has no blocks on
top of it; on(x; y; s), block x is on block y; eh(x; s), the
height of block x is even. We have the following action pre-
condition axiom and successor state axioms:
P oss(move(x; y; z); s) (cid:17) clear(x) ^ on(x; y) ^ clear(z).
clear(x; do(a; s)) (cid:17) (9y; z)a = move(y; x; z) _
clear(x; s) ^ :(9y; z)a = move(y; z; x);
on(x; y; do(a; s)) (cid:17) (9z)a = move(x; z; y) _
on(x; y; s) ^ :(9z)a = move(x; y; z);
eh(x; do(a; s)) (cid:17) (9y; z)[a = move(x; y; z) ^ :eh(z; s)] _
eh(x; s) ^ :(9y; z)[a = move(x; y; z) ^ eh(z; s)].

2.3 Local effect action theories and regression
Actions in many dynamic domains have only local effects in
the sense that if an action A(~c ) changes the truth value of
an atom F (~d ), then ~d is contained in ~c . This contrasts with
actions having universal effects such as exploding a bomb,
which kills all those near it. We can deﬁne this as follows:
Deﬁnition 5 A successor state axiom is local-effect if both
F (~x; a) and γ−
F (~x; a) are disjunctions of formulas of the
γ+
form 9~z [a = A(~y) ^ (cid:30)(~y)], where A is an action function,
~y contains ~x, ~z is the remaining variables of ~y, and (cid:30) (called
a context formula) is a quantiﬁer-free formula from L. An
action theory is local-effect if each SSA is local-effect.

2We use slightly different notation from that in [Reiter, 2001].
3We omit the leading universal quantiﬁers.
4To justify the concerns for the tractability of reasoning, the

reader should imagine there being a very large number of blocks.

Our blocks world example above is clearly local-effect.

The notion of a successor state axiom being local-effect
is a generalization of that of being strictly context-free de-
ﬁned by Lin and Reiter [1997]. An SSA is strictly context-
F (~x; a) are disjunctions of formulas of
free if γ+
the form 9~z [a = A(~y)], where A, ~y, and ~z are as above. For
instance, the SSA for ﬂuent on is strictly context-free, while
that for ﬂuent eh is not.

F (~x; a) and γ−

By using the unique names axioms, the instantiation of a
local-effect SSA on a ground action can be signiﬁcantly sim-
pliﬁed . Suppose the SSA for F is local-effect. Let (cid:11) = A(~c)
be a ground action, and let (cid:3) be + or −. Then γ(cid:3)
F (~x; (cid:11)) is
equivalent to a formula of the following form:
~x = ~d1 ^  1 _ : : : _ ~x = ~dn ^  n;

where ~di is a vector of constants contained in ~c, and  i is a
sentence. We will use γ(cid:3)
F ((cid:11))(~x) to denote the above formula,
F ((cid:11)) to mean that ~x = ~d ^   is
and we will write (~d;  ) 2 γ(cid:3)
one of the disjuncts. Also, we will use (cid:8)F ((cid:11))(~x) to denote
F ((cid:11))(~x) _ (F (~x) ^ :γ−
F ((cid:11))(~x)): In the case of our blocks
γ+
world, instances of the SSAs can be simpliﬁed as follows:
clear(x; do(move(c1; c2; c3); s)) (cid:17) x = c2 _
on(x; y; do(move(c1; c2; c3); s)) (cid:17) x = c1 ^ y = c3 _
eh(x; do(move(c1; c2; c3); s)) (cid:17) x = c1 ^ :eh(c3; s) _

clear(x; s) ^ :(x = c3):
on(x; y; s) ^ :(x = c1 ^ y = c2):
eh(x; s) ^ :(x = c1 ^ eh(c3; s)):

An important computational mechanism for reasoning
about actions is regression [Reiter, 2001]. Here we deﬁne
a one-step regression operator for local-effect action theories.
Deﬁnition 6 Let (cid:30) 2 L. We use R(cid:11)((cid:30)) to denote the for-
mula obtained from (cid:30) by replacing each ﬂuent atom F (~t )
with (cid:8)F ((cid:11))(~t ). We call R(cid:11)((cid:30)) the regression of (cid:30) wrt (cid:11).
Note that R(cid:11)((cid:30)) remains in L. Let (cid:14) = h(cid:11)1; : : : ; (cid:11)ni. We
use R(cid:14) to denote R(cid:11)1 (cid:14) (cid:1)(cid:1)(cid:1) (cid:14) R(cid:11)n. We now state a simple
form of the regression theorem [Reiter, 2001]. Recall that (cid:6)0
is the initial KB of D.
Theorem 3 (The Regression Theorem)
For every (cid:30) 2 L, D j=E (cid:30)[do((cid:14); S0)] iff (cid:6)0 j=E R(cid:14)((cid:30)).
This theorem shows that regression is a sound and complete
solution to the projection problem. In this paper, we prove all
our results about progression by using regression as a bridge.

3 Progression of Proper KBs
In this section, we deﬁne a variant of classical progression,
and show how to compute it for local-effect action theories.

First consider classical progression. Suppose we have a
KB (cid:6). Let M be a possible state of (cid:6), that is, a model of (cid:6).
Let (cid:11) be a ground action. Then the successor state of M wrt
(cid:11) is the model M0
such that for any ground ﬂuent atom F (~c ),
M0 j= F (~c ) iff M j= (cid:8)F ((cid:11))(~c ). A KB (cid:6)0
is a progression
of (cid:6) wrt (cid:11) if the models of (cid:6)0
are exactly the successor states
of models of (cid:6) wrt (cid:11). A basic property of progression is:
Suppose that (cid:6)0
is a progression of (cid:6) wrt (cid:11). Then for every
(cid:30) 2 L, (cid:6)0 j=E (cid:30) iff (cid:6) j=E R(cid:11)((cid:30)). It is in this sense that we
say classical progression preserves classical entailment.

It would be nice if the classical progression of a proper KB
were proper, so that we could use it and V to solve the pro-
jection problem. However, this is unfortunately not the case
even for very simple action theories. Consider the following
example from [Petrick and Levesque, 2002]:
F (do(a; s)) (cid:17) a = A ^ G(s) _ F (s); G(do(a; s)) (cid:17) G(s):

Then any progression of the empty KB (which is proper) wrt
action A results in disjunctive information, (F _ :G), and
hence is no longer proper. So what we will propose is a vari-
ant of classical progression where the progression of a proper
KB does remain proper and the progression preserves V in-
stead of preserving classical entailment.
Deﬁnition 7 Let (cid:6) and (cid:6)0
is a
(weak) progression of (cid:6) wrt a ground action (cid:11) if for every
(cid:30) 2 L, V [(cid:6)0; (cid:30)] = V [(cid:6);R(cid:11)((cid:30))].

be proper. We say that (cid:6)0

We now show that for local-effect action theories, it is easy

to compute a weak progression of a proper KB.
Deﬁnition 8 Let D be local-effect and (cid:6) be proper.
We deﬁne P(cid:11)((cid:6)) as the set of the following sentences:
8 [~x 2 AF _ (cid:24)F (~x) ^ ~x 62 DF (cid:27) F (~x)];
8 [~x 2 (A:F − D:F ) _ (cid:24):F (~x) ^ ~x 62 D:F (cid:27) :F (~x)];
where F ranges over ﬂuents, (cid:24)F (resp. (cid:24):F ) is the ewff deﬁn-
ing F (resp. :F ) in (cid:6) (c.f. Deﬁnition 4), and
1. AF = f ~d j (~d ;  ) 2 γ+
D:F = f ~d j (~d ;  ) 2 γ+
2. A:F = f ~d j (~d ;  ) 2 γ−
DF = f ~d j (~d ;  ) 2 γ−

F ((cid:11)) and V [(cid:6);  ] = 1g,
F ((cid:11)) and V [(cid:6);  ] 6= 0g;
F ((cid:11)) and V [(cid:6);  ] = 1g,
F ((cid:11)) and V [(cid:6);  ] 6= 0g.

Then we get the following:
Theorem 4 Let D be local-effect and (cid:6) be proper.
Then P(cid:11)((cid:6)) is a weak progression of (cid:6) wrt (cid:11).
Let (cid:14) = h(cid:11)1; : : : ; (cid:11)ni. We use P(cid:14) to denote P(cid:11)n (cid:14) (cid:1)(cid:1)(cid:1) (cid:14) P(cid:11)1.
By a simple induction, we have that for every (cid:30) 2 L,
V [P(cid:14)((cid:6)); (cid:30)] = V [(cid:6);R(cid:14)((cid:30))].
The intuition behind AF and D:F is simple. For ~d 2 AF ,
F (~d ) will become true in every possible successor state,
so we add F (~d ) to (cid:6). For ~d 2 D:F , F (~d ) may be-
come true in some possible successor state, so we delete
:F (~d ) from (cid:6). Now consider our blocks world exam-
ple. Let (cid:6) = fon(c1; c2); clear(c1); clear(c3); eh(c1)g. Af-
ter action move(c1; c2; c3) is performed, we add clear(c2),
:clear(c3), on(c1; c3), and :on(c1; c2) to (cid:6), and delete
clear(c3), :clear(c2), on(c1; c2), :on(c1; c3), eh(c1), and
:eh(c1) from (cid:6). We delete eh(c1) because if eh(c3) holds
in the current state, eh(c1) will become false in the successor
state; similarly, we delete :eh(c1).

We now deﬁne a reasoning procedure P V to solve the pro-
jection task using weak progression and V as follows:
Deﬁnition 9 Let D be a local-effect action theory with a
proper (cid:6)0. We deﬁne P V [(cid:14); (cid:30)] as V [P(cid:14)((cid:6)0); (cid:30)].
Now suppose that P V [(cid:14); (cid:30)] = 1. Then V [(cid:6)0;R(cid:14)((cid:30))] =
V [P(cid:14)((cid:6)0); (cid:30)] = 1. By soundness of V , (cid:6)0 j=E R(cid:14)((cid:30)). By
the Regression Theorem, D j=E (cid:30)[do((cid:14); S0)]. Similarly, if

P V [(cid:14); (cid:30)] = 0, then D j=E :(cid:30)[do((cid:14); S0)]. Thus P V is logi-
cally sound for projection. It is easy to see that P(cid:11)((cid:6)) can be
computed in O(n) time, where n is the size of (cid:6). By Corol-
lary 2, we have the following tractability result:
Theorem 5 Let D be a local-effect action theory with a
proper (cid:6)0, and let (cid:30) 2 Lk. Then P V [(cid:14); (cid:30)] can be computed
in time O(pn + lmnk), where p is the length of (cid:14), l the size
of (cid:30), m the e-size of (cid:6)0, and n the size of (cid:6)0.
Thus P V provides an efﬁcient and logically sound solution to
the projection problem despite the incomplete knowledge. In
the next two sections, we will explore under what conditions,
P V is also logically complete.

4 A Completeness Result
Since P V uses V , it is not surprising that we need a query
to be in normal form for logical completeness. In this sec-
tion, we will show that the only other thing we need is for the
initial KB to have complete knowledge of the context of any
context-dependent actions.
More precisely, we say that a KB (cid:6) is complete wrt a set G
of ground atoms if for all l 2 G, either (cid:6) j=E l or (cid:6) j=E :l.
A KB (cid:6) is complete wrt a predicate P if it is complete wrt all
ground atoms of P . Now let (cid:6) be proper, and (cid:30) a quantiﬁer-
free sentence such that (cid:6) is complete wrt all atoms of (cid:30). Then
it is easy to see that V [(cid:6); (cid:30)] is either 0 or 1.
Deﬁnition 10 A KB (cid:6) is context-complete (wrt D) if it is
F and γ−
complete wrt every predicate appearing in every γ+
F .
So (cid:6) is context-complete if it has complete knowledge about
the predicates in the context of any context-dependent ac-
tions. For example, in our blocks world, a (cid:6) is context-
complete if it is complete wrt eh; it may be incomplete wrt
clear and on. So context-completeness still allows incom-
plete knowledge.

The logical completeness of P V is obtained by show-
ing that progression preserves context-completeness and that
under context-completeness, our progression coincides with
classical progression.
Theorem 6 Let (cid:6) be context-complete. Then
1. P(cid:11)((cid:6)) is context-complete too;
2. P(cid:11)((cid:6)) is a classical progression of (cid:6).
, M0 j= P(cid:11)((cid:6))
Proof: (2) We prove that for every model M0
iff there is a model M s.t. M j= (cid:6) and M0
is the successor
state of M wrt (cid:11). For the only-if direction, we construct M
as follows: for every ﬂuent atom F (~c ), if V [(cid:6); F (~c)] = 1,
then M j= F (~c ); if V [(cid:6); F (~c)] = 0, then M j= :F (~c );
otherwise, M j= F (~c ) iff M0 j= F (~c ). The proof uses the
fact that V [(cid:6); γ(cid:3)

F ((cid:11))(~c )] 2 f0; 1g, where (cid:3) is + or −.

F or γ−

There are two useful special cases where we get context-
completeness. An SSA is equality-only if no predicate ap-
F . Obviously, any (cid:6) is context-complete
pears in γ+
wrt equality-only SSAs. Indeed, many SSAs we come across
are equality-only. An SSA is context-free if no ﬂuent appears
in γ+
It is reasonable to assume that an agent has
complete knowledge about situation-independent predicates.
Under such an assumption, any (cid:6) is context-complete wrt
context-free SSAs.

F or γ−
F .

So under context-completeness, our progression preserves
classical entailment. Now let (cid:6)0 be context-complete. By a
simple induction, we have: for every (cid:30) 2 L, P(cid:14)((cid:6)0) j=E (cid:30) iff
(cid:6)0 j=E R(cid:14)((cid:30)). Now let (cid:30) 2 NF. By completeness of V for
NF, V [P(cid:14)((cid:6)0); (cid:30)] = 1 iff P(cid:14)((cid:6)0) j=E (cid:30) iff (cid:6)0 j=E R(cid:14)((cid:30))
iff D j=E (cid:30)[do((cid:14); S0)]. Thus when the initial KB is context-
complete and the query is in normal form, P V is logically
complete for projection.

5 Incorporating Sensing
In many applications, it is asking too much to require com-
plete knowledge in the initial KB about the context of the
context-dependent actions. In this section, we follow de Gi-
acomo and Levesque [1999] and relax this restriction in two
ways: ﬁrst, we only need context-completeness relative to the
sequence of actions and the query in question; second, we can
achieve this local context-completeness dynamically by re-
sorting to sensing actions, that is, actions that get knowledge
from outside the system. In other words, we show that when
a history of actions and sensing results is “just-in-time” for a
normal form query, P V is once again logically complete.

We ﬁrst extend our account of action and change to in-
corporate sensing. Assume that in addition to ordinary ac-
tions that change the world, we also have binary sensing ac-
tions that do not change the world but tell the agent whether
some condition (cid:30) holds in the current situation. We use
the predicate SF (a; s) to characterize what the sensing ac-
tion tells the agent about the world. Now our basic ac-
tion theory has an extra component Dsf , which is a set of
sensed ﬂuent axioms (SFAs), one for each action, of the form
SF (A(~x); s) (cid:17) (cid:30)A(~x)[s]; where (cid:30)A 2 L. We say that Dsf
is atomic if each (cid:30)A is an atom.

For instance, we may add three sensing actions to the
blocks world example: senseclear(x), senseon(x; y), and
senseeh(x). The axiom SF (senseeh(x); s) (cid:17) eh(x; s) says
that the action senseeh(x) tells the agent if eh(x; s) holds.

To describe a sequence of actions and sensing results, we
use the notion of a history, that is, a sequence of pairs ((cid:11); (cid:22))
where (cid:11) is a ground action and (cid:22) 2 f0; 1g is the sensing
result: when (cid:11) is an ordinary action, we simply let (cid:22) = 1.
We use end((cid:27)) to denote the end situation of history (cid:27), and
Sensed((cid:27)) to denote the situation calculus formula stating
all sensing results of (cid:27). Formally,

(cid:15) end(") = S0, where " is the empty history;
(cid:15) Sensed(") = T rue;

end((cid:27) (cid:1) ((cid:11); (cid:22))) = do((cid:11); end((cid:27))).
Sensed((cid:27) (cid:1) ((cid:11); 1)) = Sensed((cid:27)) ^ SF ((cid:11); end((cid:27)));
Sensed((cid:27) (cid:1) ((cid:11); 0)) = Sensed((cid:27)) ^ :SF ((cid:11); end((cid:27))).
Naturally, we are only interested in consistent histories,

that is, histories with reasonable sensing results. Formally,
Deﬁnition 11 A history (cid:27) is consistent if
E [ D [ fSensed((cid:27))g is a consistent theory.
Now the projection problem including sensing is formu-
lated as deciding if D [ fSensed((cid:27))g j=E (cid:30)[end((cid:27))]; where
(cid:30) 2 L, and (cid:27) is a consistent history.
In the rest of this section, we assume that Dsf is atomic.
To prepare for the deﬁnition of just-in-time-history, we ﬁrst

extend our regression and progression operators to incorpo-
rate sensing. The ideas are quite simple. For example, if we
regress the formula clear(c1) ^ eh(c1) wrt (senseeh(c1); 1),
we should obtain clear(c1). If we progress a proper KB (cid:6)
wrt (senseeh(c1); 1), we should obtain (cid:6) [ feh(c1)g.
Let (cid:11) = A(~c ) be a ground action, and let (cid:22) 2 f0; 1g.
We deﬁne R((cid:11);(cid:22))((cid:30)) as follows:
If (cid:11) is an ordinary ac-
tion, then R((cid:11);(cid:22))((cid:30)) = R(cid:11)((cid:30)). Otherwise, let the SFA be
SF (A(~x); s) (cid:17) F (~x; s). Then R((cid:11);(cid:22))((cid:30)) is the formula ob-
tained from (cid:30) by replacing each atom F (~t ) with ~t = ~c _F (~t )
when (cid:22) = 1 and with F (~t ) ^ ~t 6= ~c when (cid:22) = 0. We have
the following extended regression theorem:
Theorem 7 Let (cid:27) be a consistent history. Then
D [ fSensed((cid:27))g j=E (cid:30)[end((cid:27))] iff (cid:6)0 j=E R(cid:27)((cid:30)).
Now we turn to progression with sensing. Let (cid:6) be proper.
Let (cid:11) = A(~c ) be a ground action, and let (cid:22) 2 f0; 1g.
We deﬁne P((cid:11);(cid:22))((cid:6)) as follows:
If (cid:11) is an ordinary ac-
tion, then P((cid:11);(cid:22))((cid:6)) = P(cid:11)((cid:6)). Otherwise, let the SFA be
SF (A(~x); s) (cid:17) F (~x; s). Then P((cid:11);1)((cid:6)) = (cid:6) [ fF (~c )g,
and P((cid:11);0)((cid:6)) = (cid:6) [ f:F (~c )g. We have the following ex-
tended progression theorem:
Theorem 8 Let (cid:27) be a consistent history. Then
1. E [ P(cid:27)((cid:6)0) is consistent. Hence P(cid:27)((cid:6)0) is proper.
2. For every (cid:30) 2 L, V [P(cid:27)((cid:6)0); (cid:30)] = V [(cid:6)0;R(cid:27)((cid:30))].
Another concept we need is dependency set.

F ((cid:11)) or γ−

Deﬁnition 12 The dependency set of a formula (cid:30) wrt an or-
dinary action (cid:11), denoted by DS(cid:11)((cid:30)), is the set of ground
F ((cid:11)) for some ﬂuent F in (cid:30).
atoms that appear in γ+
For example, let (cid:11) = move(c1; c2; c3). Then DS(cid:11)(clear(x))
is the empty set, and DS(cid:11)(eh(x)) = feh(c3)g.
Deﬁnition 13 Let (cid:27) be a consistent history, and (cid:30) 2 L. We
say that (cid:27) is a just-in-time-history (JIT-history) for (cid:30) if for
every division (cid:27)1 (cid:1) ((cid:11); (cid:22)) (cid:1) (cid:27)2 of (cid:27) such that (cid:11) is an ordinary
action, P(cid:27)1((cid:6)0) is complete wrt DS(cid:11)(R(cid:27)2((cid:30))).
Intuitively, (cid:27) is a JIT-history for (cid:30) if whenever performing an
ordinary action (cid:11), the agent has complete knowledge about
the context of (cid:11) wrt ﬂuents related to (cid:30). This complete
knowledge may come from the sensing actions preceding (cid:11).
For example, let (cid:6)0 = fclear(c1); on(c1; c2); clear(c3)g.
Then the history (senseeh(c3); 1) (cid:1) (move(c1; c2; c3); 1) is a
JIT history for the formula 9x[clear(x) ^ eh(x)]. Note that
here the agent has incomplete knowledge about both ﬂuents
clear and eh. Thus a JIT history does not require complete
knowledge about the component ﬂuents of the query.

By a proof essentially the same as the one in the previous

section, we get the following result:
Theorem 9 Let (cid:27) be a JIT-history for (cid:30).
Then P(cid:27)((cid:6)0) j=E (cid:30) iff (cid:6)0 j=E R(cid:27)((cid:30)).
Now let (cid:27) be a JIT-history for (cid:30) 2 NF. Then we have
V [P(cid:27)((cid:6)0); (cid:30)] = 1 iff P(cid:27)((cid:6)0) j=E (cid:30) iff (cid:6)0 j=E R(cid:27)((cid:30)) iff
D [ fSensed((cid:27))g j=E (cid:30)[end((cid:27))]. Thus when a history is
just-in-time for a normal form query, P V is again logically
complete for projection.

6 Related Work
As mentioned in the introduction, Lin and Reiter [1997] give
a systematic study of classical progression. As a part of their
study, they view STRIPS as a mechanism for computing pro-
gression and thus provide a logical semantics for STRIPS. In
this respect, they consider strictly context-free SSAs and ini-
tial KBs in the form of relational databases or sets of ground
literals. These are special cases of local-effect SSAs and
proper KBs, and our weak progression coincides with clas-
sical progression in these cases. Son and Baral [2001] pro-
pose the so-called 0-approximation semantics for an exten-
sion of action language A. They deﬁne an a-state (approxi-
mate state) as a consistent set of ﬂuent literals, and deﬁne a
transition function which maps an a-state and an action into
the next a-state. So 0-approximation is essentially a kind of
approximate progression. However, their work is restricted
to the propositional case, and our progression coincides with
theirs therein. Amir and Russell [2003] present efﬁcient al-
gorithms for (approximate) logical ﬁltering, where ﬁltering
means updating an agent’s belief state in response to actions
and observations. So logical ﬁltering is essentially progres-
sion. But again, their work is restricted to the propositional
case. De Giacomo and Mancini [2004] study how to exploit
relational database technology to implement progression, but
only when the initial KB has complete knowledge. We get to
use database techniques in the incomplete case via the results
in [Liu and Levesque, 2003].

The idea of progression is widely used in planning under
incomplete knowledge. Most systems use propositional rep-
resentations, for example, BDDs [Cimatti and Roveri, 2000],
and clauses [Brafman and Hoffmann, 2004]. Being proposi-
tional makes it possible for them to consider arbitrary incom-
plete knowledge and perform classical progression. Although
techniques are employed so that the systems can achieve rea-
sonable performance in practice, there is no theoretical guar-
antee of the tractability of their solutions to projection. The
PKS system of Petrick and Bacchus [2002] uses a ﬁrst-order
representation. The form of incomplete knowledge they con-
sider is mainly a set of ground literals but with some other
features. The general idea behind their progression is simi-
lar to ours, but without a semantical characterization of what
it preserves. Moreover, they do not address the issue of the
restrictions they need to get completeness.

The idea of JIT histories in this paper comes from [De Gi-
acomo and Levesque, 1999]. They use JIT histories to ob-
tain complete knowledge about the component ﬂuents of the
query. However, we use JIT histories only to obtain complete
knowledge about the context of actions to be performed.

7 Conclusions
In this paper, we have proposed a tractable, sound, and some-
times complete solution to the projection problem in the pres-
ence of context-dependent actions and incomplete ﬁrst-order
knowledge in the form of a proper KB. Our solution is via a
version of progression that preserves properness and V .

For simplicity of presentation, in this paper we require ac-
tions to have local effects only, and we make the extra require-
ment that context formulas (c.f. Deﬁnition 5) be quantiﬁer-

free. However, the soundness and completeness results in
this paper will still hold if we relax these two requirements.
The tractability result will also hold if context formulas use
a bounded number of variables. As for local effects, the
tractability result only needs them to ensure that the pro-
gressed KB is not much larger than the original KB. We be-
lieve that there are other ways of doing this that would include
a substantial class of actions with universal effects.

For the future, we would like to conduct experimental eval-
uation of our solution to projection, and apply it to ﬁrst-order
planning systems. Also, we would like to extend our work
here to deal with functional ﬂuents and disjunctive incom-
plete knowledge.

References
[Amir and Russell, 2003] E. Amir and S. Russell. Logical ﬁltering.

In Proc. IJCAI-03, pages 75–82, 2003.

[Brafman and Hoffmann, 2004] R. Brafman and J. Hoffmann. Con-
formant planning via heuristic forward search. In Proc. ICAPS-
04, pages 355–364, 2004.

[Cimatti and Roveri, 2000] A. Cimatti and M. Roveri. Conformant
planning via symbolic model checking. Journal of Artiﬁcial In-
telligence Research, 13:305–338, 2000.

[De Giacomo and Levesque, 1999] G. De Giacomo and H. J.
In Proc.

Levesque. Projection using regression and sensors.
IJCAI-99, pages 160–165, 1999.

[De Giacomo and Mancini, 2004] G. De Giacomo and T. Mancini.
Scaling up reasoning about actions using relational database tech-
nology. In Proc. AAAI-04, pages 245–250, 2004.

[Levesque et al., 1997] H. J. Levesque, R. Reiter, Y. Lesp(cid:19)erance,
F. Lin, and R. Scherl. Golog: A logic programming language for
dynamic domains. J. of Logic Programming, 31:59–84, 1997.

[Levesque, 1998] H. J. Levesque. A completeness result for reason-
ing with incomplete ﬁrst-order knowledge bases. In Proc. KR-98,
pages 14–23, 1998.

[Lin and Reiter, 1997] F. Lin and R. Reiter. How to progress a

database. Artiﬁcial Intelligence, 92(1–2):131–167, 1997.

[Liu and Levesque, 2003] Y. Liu and H. J. Levesque. A tractability
result for reasoning with incomplete ﬁrst-order knowledge bases.
In Proc. IJCAI-03, pages 83–88, 2003.

[McCarthy and Hayes, 1969] J. McCarthy and P. Hayes.

Some
philosophical problems from the standpoint of artiﬁcial intelli-
gence. In Machine Intelligence, volume 4, pages 463–502. 1969.
A
knowledge-based approach to planning with incomplete informa-
tion and sensing. In Proc. AIPS-02, pages 212–222, 2002.

[Petrick and Bacchus, 2002] R. Petrick and F. Bacchus.

[Petrick and Levesque, 2002] R. Petrick and H.

Knowledge equivalence in combined action theories.
KR-02, pages 303–314, 2002.

J. Levesque.
In Proc.

[Reiter, 2001] R. Reiter. Knowledge in Action: Logical Founda-
tions for Specifying and Implementing Dynamical Systems. MIT
Press, 2001.

[Son and Baral, 2001] T. C. Son and C. Baral. Formalizing sensing
actions – A transition function based approach. Artiﬁcial Intelli-
gence, 125(1–2):19–91, 2001.

