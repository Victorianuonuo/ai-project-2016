Session  8  Formalisms  f or 
A r t i f i c i al 

Intelligence 

CONVERSION  OF  PREDICATE-CALCULUS  AXIOMS,  VIEWED  AS 

NON-DETERMINISTIC  PROGRAMS,  TO  CORRESPONDING  DETERMINISTIC  PROGRAMS 

E r ik  Sandewall 

Computer  Sciences  Department 

Uppsala  u n i v e r s i ty 

in  p r e d i c a te  c a l c u l us 

A b s t r a c t:  The  paper  c o n s i d e rs 
axioms 
which  are 
s o r. 
" o b j e c t s"  must 
ARG-expressions"  which  are 

is  shown 

t h at 

It 

to  be  used  as  " r u l e s"  by  a  GPS-type  s u p e r v i(cid:173)

t h is  can  be  done,  but 

t h at 

the 

then  c o n t a in  procedure  c l o s u r es  or  "FUN-

the  problem  of  c o n v e r t i ng 
to  d e t e r m i n i s t ic  programs, 

l a t er  a p p l i e d. 

Keywords:  d e d u c t i o n, 
t e r m i n i s t i c,  c l o s u r e,  FUNARC-expression. 

t h e o r e m - p r o v i n g, 

r e t r i e v a l,  n o n - d e(cid:173)

I m p l i c it 

i n f o r m a t i on 

r e s o l u t i o n - s t y le 

in  a  sem(cid:173)
to 
theorem-

is  a  k i nd  of  d e d u c t i o n.  One  approach 

r e t r i e v al  has  been 
l a t er  approach  has  been  h i g h - l e v el  program(cid:173)

Background-  R e t r i e v al  of 
a n t ic  data  base 
doing  such 
p r o v i n g;  a 
languages  such  as  Planner1  and  QA42,  where  n o n - d e(cid:173)
ming 
t e r m i n i s t ic  programs  and  p a t t e r n - d i r e c t ed 
i n v o c a t i on  of 
procedures  are  a v a i l a b l e.  The  use  of  u n i f o rm  p r o of  p r o(cid:173)
cedures 
e . g. 
been  w o r r i ed  because 
to  use4,2  and  because 
to  c o n t r o l 4. 

r e p e a t e d ly  c r i t i c i z e d, 
languages  have  a l so 
t h e ir  systems  are  very  expensive 
is  d i f f i c u lt 

t h is  purpose  has  been 
the  h i g h - l e v el 

the  n o n - d e t e r m i n i sm 

In  3.  Users  of 

f or 

to 

r o o ts 

in  A . 1. 

In  each  c y c l e, 

is  a n o t h er  a p p r o a c h,  which  has 

r e(cid:173)
the  General  Problem  S o l v e r 5,  where  one 

There 
search  back 
has  a  s u p e r v i s or  which  a d m i n i s t r a t es  a 
( r e l a t i v e l y) 
xed  set  of  o p e r a t o r s,  and  a  w o r k i ng  set  of  a c t i ve  ob(cid:173)
j e c t s. 
the  s u p e r v i s or  p i c ks  an  o b j e ct 
( u s i ng  any  h e u r i s t ic 
and  an  o p e r a t or 
to 
it  may  h a v e ),  a p p l i es 
o b t a i ns  back  a  number  of  new  o b j e c ts 
more)  which  are  put 
is  c o n t i n u ed  u n t il  some  goal 
j e ct 

the  w o r k i ng  s e t.  T h is  process 
( e . g .,  an  ob(cid:173)

i n f o r m a t i on 
t h at 
the  o b j e c t,  and 
(none,  o n e,  or 

t a r g et  set  appears 

the  o p e r a t or 

is  achieved 

the  w o r k i ng  s e t ). 

is  a  given 

i n to 

in 

f i(cid:173)

l e v e l.  The  n o n - d e t e r m i n i sm 

T h is  approach  has  c e r t a in  advantages 
s t a n d p o i n t,  The  o p e r a t o rs  are 
be  compiled  or  o t h e r w i se 
chine  code 
to 
r e c t ed 
o b j e c ts 
subset  of 
the  n o n - d e t e r m i n i sm 

the  s u p e r v i s o r.  S t i l l, 

I m p l i ed  by 

t h e re 

is 

t r a n s f o r m ed  a ll 

i n v o c a t i o n,  by 
i n to  a  number  of  c l a s s e s,  and  a s s o c i a t i ng  a 

the  s u p e r v i s or  c l a s s i fy 

l e t t i ng 

the  o p e r a t o rs  w i th  each  c l a s s.  There 

is  a l so 

from  an  e f f i c i e n cy 
f i x ed  programs,  which  can 
to  ma(cid:173)
is  c o n c e n t r a t ed 
f or  p a t t e r n - d i(cid:173)

the  way 

room 

the  s e a r c h. 

is 

is 

t h at 

t h e re 

l i t t le 

l e v e l, 

t h is  scheme 
r i g i d.  For  example,  s i n ce  e v e r y t h i ng  happens  on 

The  major  d i s a d v a n t a g e,  of  c o u r s e, 
is  more 
one 
o p e r a t or  c a l ls  a  p r o c e d u r e,  which  c a l ls  a n o t h e r,  which 
is  no  t r i v i al 
wants 
way 
the  " s e a r ch 
l e v e l"  of 
ment  of 
must  be  kept  a v a i l a b le 

f u n c t i on  c a l l s,  v a r i a b le  b i n d i n g s,  e t c. 

t h at  n o n - d e t e r m i n i sm  back  up 

to  be  n o n - d e t e r m i n i s t i c, 

the  s u p e r v i s o r,  w h i le 

in  a ll  branches. 

t h e re 
to 

the  e n v i r o n-

r e c u r s i o n. 

r e t a i n i ng 

to  map 

If  one 

room 

then 

t h at 

f or 

An 
t h is 
the 

I n t e r e s t i ng  q u e s t i on 

is 

r i g i d i t y? 
l i m i t a t i o ns  of  such  a  s y s t e m,  or 

it  very  awkward 

Is 

t h e r e f o r e:  how  harmful 

is 
to  "program  a r o u n d" 

is 

It  easy? 

is  a  s y s t e m a t ic  way 

t h e re 
conclude 
c o n s i d e r ed  as  a  s e r i o us  c a n d i d a te 
tem  a s s o c i a t ed  w i th  a  data  base. 

t h at 

those  problems.  We 
the  search  s u p e r v i s or  approach  s h o u ld  be 

to  handle 

f or 

the  d e d u c t i ve  s y s(cid:173)

the 

t h at 

to  c o n t a in  procedure  c l o s u r e s 6 ' 7,  a l so 

reader  who  might  not  want 
is 

" o b j e c t s" 

Idea.  For 

Basic 
the  whole  paper,  we  d i s c l o se 
the 
c a l l ed  FUNARG-expressIons, 
gether  w i th  an  environment  of  b i n d i n gs 
r i a b l e s.  The 
of  o p e r a t o r s,  and  can 
the  environment 

lambda-expression 

Is  new 

f or  each  o b j e c t. 

lambda-expressions 

t o(cid:173)
f r ee  v a(cid:173)
the  set 
t h e r e f o re  be  c o m p i l e d,  e t c,  but 

i ts 
f i x ed  as 

to 
to  p e r m it 

is  as 

read 

idea 

I . e. 

the 

f or 

thus  h a v i ng  sketched 

A f t er 
r al 
c a l c u l us  e n v i r o n m e n t. 

l et  us  go 

i d e a, 

I n to 

the  background  and 

the  gene-

the  d e t a i ls  of 

the  p r e d i c a t e-

take  a  common-place  axiom  and 
into  a  p r o g r a m - l i ke  o p e r a t o r.  We  choose 

the 

it 

Simplest  case.  Let  us 
c o n v e rt 
t r a n s i t i v i ty  a x i o m, 
A  R ( y , z) 

R ( x , y) 

)  R ( x , z) 

which  goes 

I n to  a 

r u le  of 

the 

form 

On  a  s u b - q u e s t i on  w i th 
l a m b d a ( x , z)  begin 

l o c al  y; 

the  r e l a t i on  R,  use 

from  R ( x , y ); 

determine  y 
r e t u rn  s u b - q u e s t i on  R ( y , z) 
end 

to  y. 

f or  a 

l o o k - up 

" d e t e r m i ne  y 

is  g i v en  back 

from  R ( y , z )"  c a l ls 

" R e t u rn  s u b - q u e s t i o n"  s p e c i f i es 

Here, 
in 
the  data  b a s e,  and  u s u a l ly  a c ts  as  a  n o n - d e t e r m i n i s t ic 
assignment 
i n f o r m a t i on  which 
s i s t i ng  of  a 
l a t t er 
is  a 
does  n ot  need 
b i n d i n gs 
then 
are  a s s o c i a t ed  w i th  R,  and  a p p ly 
gument 

It 
t h e ir 
t h e ir  c u r r e nt  v a l u e s.  The  s u p e r v i s or  w i ll 
( l a m b d a - e x p r e s s i o n s)  which 
the  g i v en  a r(cid:173)
it  chooses. 

the  c u r r e nt  values  of  x  and  yj 

l i s t,  of  course  at  whatever 

the  names  x  and  y,  or 

look  up  a ll  o p e r a t o rs 

(R)  and  an  argument 

the  s u p e r v i s o r,  con(cid:173)

r e l a t i on 
l i st  of 

to  c o n t a in 

l i s t.  The 

them 

time 

the 

to 

to 

to 

if 

to 

the 

the  LISP 

r e l a t i o n s. 

the  search 

It  does  not 

r u le  d e s c r i b es  what  has 

is  executed  by  a  u n i f o rm 

r o u t i ne  c o n t i n u es  search  a c c o r d i ng 

to  be  done  when  any  data 
the 

f u n c t i o ns 
in  a  h i g h e r - l e v el  system, 

T h is 
base  search 
t r a n s i t i v i ty  p r o p e r ty  of 
m a t t er 
theorem-
p r o v e r,  a  P l a n n e r - t y pe  s y s t e m,  or  by  a  h a n d - t a i l o r ed 
proaram  such  as 
However, 
" i n t e r p r e t" 
time  what 
is 
is  extreme 
In 
is 
to 
about 
t i o n)  what  o p e r a t i o ns  w i ll  be  n e c e s s a r y,  so 
w r i te  o ut 
ming  systems 
do  as  many  d e c i s i o ns  as  p o s s i b le  at  c o m p l l e - t i m e. 

to 
f i nd  o ut  at 
r u n(cid:173)
t h e o r e m - p r o v er 
t h is  paper 
i n f o r m a t i on  o n ly 
t he  a c t u al  sub-ques(cid:173)
t h at  we  can 

the  axioms  or 
I . e. 
to  be  done.  A  r e s o l u t i on 

f i nd  o ut  b e f o re  e x e c u t i on 
the  axiom  or 

in 
the  system  has 

r e s p e c t.  Our  concern 

f or  d o i ng  e x a c t ly 

the  SIR  system8. 

the  axioms,  and 

r u l e,  n ot  about 

t e r m s,  we  want 

tn  program(cid:173)

to  compile 

the  code 

r u l e s, 

( w i th 

t h a t, 

t h is 

In 

t ry 

to  answer 

t h is  paper,  we 

In 
i ng  those  o p e r a t o rs  which  c o r r e s p o nd 
t h at  we  have  a  data  base, 
d i c a te  c a l c u l u s.  We  assume 
l a r ge  number  of  ground  u n it  c l a u s e s, 
which 
p l us  a  number  of  o p e r a t o r s,  which  should  c o r r e s p o nd 
the  non-ground  axioms.  We  show 
problems 

t h at  q u e s t i on  by  s t u d y(cid:173)
in  p r e(cid:173)

t h e re  are  c e r t a in 
t h at 

l a t t er  as  o p e r a t o r s , , b ut 

in  p h r a s i ng 

to  axioms 

l i ke  a 

t h at 

the 

Is 

to 

230 

r e s o l u t i on 

If  a 
s i t i v i ty  a x i o m,  and 

the  axiom 

t h e o r e m - p r o v er  c o n t a i ns 

the  above 

t r a n(cid:173)

R(a,b) 

if 

it  asked 

and 
te 
I l l u s t r a t ed 

it  w i ll  genera(cid:173)
the  s u b - q u e s t i on  M l ( a , c ).  T h is  s t ep  can  be  c l e a r ly 
r e w r i t t en  as 

the  " q u e s t i o n"  ^ ( b . c ), 

t r a n s i t i v i ty  axiom 

the 

Is 

If 

rules 

Thus  one  clause  (In  the  resolution  sense)  usually  cor(cid:173)
responds  to  several 
lambda-expressions 
above.  The  number  of  rules  that  correspond  to  a  clause 
Is  f i n i t e. 
then  the  r e s u l t(cid:173)
ing  system  is  not 
a ll 
ness.  We  shall  not  be  concerned  about  t h i s. 

If  some  rules  are  omitted, 

In  general  complete,  but 

is  s t i ll  not  s u f f i c i e nt 

to  insure  complete(cid:173)

inclusion  of 

like  the 

rules 

f i r st  rule  above, 

Going  back  to  the 
the  reader  should 
imagine  that  the  supervisor  contains  one  queue  of  sub-
questions  for  each  relation  symbol,  and  that  every  sub-
question  contains  an  argument 
l i s t.  Every  relation  sym(cid:173)
bol 
is  associated  with  a  set  of  operators,  written  as 
lambda-expressions  like  the  one  above,  which  can  be 
applied 
that  queue  for  that  relation 
symbol.  The  operator  above  returns  a  sub-question,  and 
t e l ls  what  object  -  argument 
and  which  relation 
be  thought  about  as  "demons",  clustered 
a  common  point  of  i n t e r e s t,  which  is  named  by  the  re(cid:173)
lation  symbol. 

it  should  attend.  The  operators  can 
in  groups  with 

it  should  contain, 

to  the  objects 

l i st 

List  of  problems.  This  organization  raises  a  number  of 
questions.  One  problem  is  how  one  should  integrate  heu(cid:173)
r i s t ic  information  into  the  system.  We  shall  not  go  in(cid:173)
to  that  question  here.  Another  question 
l o(cid:173)
is  to  be  handled.  The 
cal  non-determintsm  in  the  rule 
answer 
loop-free), 
non-deterministic  program  into  a 
looping,  deterministic 
program.  Each  branch-point  starts  a  new  loop  inside  the 
loops  of  the  previous  branch-points.  All 
the  end  of  the  rule.  This 

loops  end  at 
is  quite  straight-forward. 

is  simple:  we  map  the 

linear  ( i . e. 

is  how  the 

involves  some  additional  prob(cid:173)

If  the  PC  (predicate  calculus)  axioms  contain  function 
symbols  (not  merely  r e l a t i o n s ),  we  obtain  " u n i f i c a t i o n ", 
or  in  programming 
language  terms:  pattern-matching  and 
pattern-reconstruction.  Then  the  convers ion  to  remove 
the  local  non-determinism 
lems,  which  however  w i ll  be  the  topic  of  a  l a t er  exten(cid:173)
sion  of  this  paper.  Suffice 
function  should  be  associated  with  one  construction  pro(cid:173)
cedure  and  one  or  more  matching  procedures,  and  that 
the  compiled  version  of  the  axiom  must  contain  a  call 
to  one  of  these  procedures. 
"compilation  time"  which  procedure  shall  be  called.  The 
matching  procedure  for  " p l u s"  may  for  example  match  " 1 *" 
against  " p l u s ( x , l )"  and  assign 

It  can  be  determined  at 

it  to  say  that  every  PC 

to  "x"  the  value  3. 

I.e.  Yes/no 

instead  to  the  question  of  how  open  ques(cid:173)
("Closed  questions"  are  questions 

Let  us  turn 
tions  are  handled. 
which  can  be  answered  with  a  truth-value, 
questions;  "open  questions"  are  questions  which  have  an 
I n d i v i d u a l,  or  n-tuple  of 
wer.)  We  decide  immediately  that  "closed  questions  with 
the  r e l a t i on  R"  shall  be  one  class  of  object  and 
inter(cid:173)
est-point 
for  operators,  and  "open  questions  with  the 
relation  R  and  an  asked-for  second  argument,  R(x,?)" 
shall  be  another  class  of  objects, 
set  of  operators.  We  shall  provisionally  denote 
it  as 
R2(X).  For  example,  the  same  t r a n s i t i v i ty  axiom  for  R 
also  c a l ls 

individuals  as  possible  ans(cid:173)

treated  with  another 

following  operator: 

the 

for 

On  a  sub-question  with  R2,  use 
lambda  (x)  begin 

local  y; 

determine  y  from  R(x,y); 
return  sub-question  Ra(y) 

end 

231 

determine  z  from  Q(y,z).; 
return  answer 
end 

f ( x , z) 

Each  of  these  operators  contains  a  main  block,  where 
each  statement  except  the 
last  one  makes  an  access  to 
the  data  base, 
for  e i t h er  a  closed  or  an  open  question, 
(Every  such  statement  corresponds  to  a  l i t e r al 
in  the 
original  axiom).  We  have  t a c i t ly  assumed  that  thosere-
i . e.  only  use  facts 
references  should  be  "immediate", 
that  are  e x p l i c i t ly  in  the  data  base.  However, 
Is 
intermediate  statements  make 
also  possible  to 
the  ope(cid:173)
t h e ir  own  search. 
rators  should  be  deterministic  programs,  and  a ll  search 
then  the  search 
should  be  managed  by  the  supervisor, 
In 
Intermediate  statement  must  be  brought  to  an  end 
the 
before 
It 
follows  that  in  an  intermediate  statement  we  can  only 
make  a  search  which 
search  done  by  the  supervisor. 

the  execution  of  the  operator  can  continue. 

is  " s h o r t"  compared  to  the  main 

If  we  maintain 

idea  that 

let  such 

the 

it 

the 

latest 

to  use 

it  possible 

it  is7  All  search  would  then  be  done 

intermediate  statements  (both  "look  up  y"  and  "look 

Is 
operator  as 
the 
up  z"  in  the  t r a n s i t i v i ty  axiom,  e t c .)  and  the  opera(cid:173)
tor  can  return  a  f i n al  answer,  rather  than  a  sub-ques(cid:173)
tion 
is  correct,  but  clearly 
the  supervisor 

formulation  of  the 
In 

further  search.  This 

is  not  used  at  a ll 

in  t h is  case. 

for 

the 

last 

In  the  f i r st 

In  the  second  axiom,  our  previous 

intermediate  statement  and  decide  that  that 

However,  given 
formulation  of  the  operators, 
we  can  come  back  to  the  previous  formulation  by  p i c k' 
Ing  out  one 
is  where  the  main  search  shall  be  done. 
the  main  search  Is  most  n a t u r a l ly  done  for  "de(cid:173)
axiom, 
formula(cid:173)
termine  z". 
tion  does  the  main  search  for  "determine  y ",  although 
In  principle 
It  would  also  be  possible  to  determine  y 
In  the  shallow  search  of  an 
then  ask  the  supervisor  to  do  main  search 
prove  Q(x,y) 
for  the  selected  y. 
our  previous 
formulation  does  main  search  to  determine 
z,  although  It  would  also  be  possible  to  do  main  search 
for  y,  and  to  determine  z  and  f ( x , z) 
procedure. 

intermediate  statement,  and 

In  the  t h i rd  axiom, 

the  remainder 

in  order  to 

in 

Conclusion  from  the  discussion.  We  conclude  that  the 
general  method  to  convert  a  pred'cate-calculus  axiom 
to  an  operator  should  be: 

(3)  Decide  which  of  the  statements 

in  the  operator 

shall  be  handled  by  the  extensive,  top-level  search 
Is  called 
which 
a  controlled  statement.  Let  the  statements 
in  the 
operator  be 

is  managed  by  the  supervisor.  This 

H,  s 2 . . . . . . . . . . . . Sk - 1,  Sk, Sk +r  - ..  Sn 

where  s. 

Is  the  controlled  statement. 

{*))  Construct  a  new  operator  where  the  statements  are 

232 

It 

is  easily  seen  that 
in  four  steps  can  be  generalized  to  the 

Multiple  controlled  statements. 
the  above  rule 
cases  where  there  are  several  controlled  statements, 
and  top-level  search 
example, 
search  both 
in  order  to  determine  y  from  P ( x , y ),  and  in 
order  to  prove  Q(x,y).  We  must  then  have  two  nested  re(cid:173)
mainder  procedures.  The  resulting  operator  should  have 
the  form: 

in  axiom  2  we  might  wish  to  make  extensive 

is  performed  for  each  of  them.  For 

On  a  sub-question  with  R2,  use 
lambda  (x)  begin 

return  sub-question  P2(x),  with  remain(cid:173)
der  procedure 
lambda  (y)  begin 

return  sub-question  Q(x,y) 
/a  closed  sub-question/  with 
the  remainder  prodedure 
lambda  ()  return  answer  y 
end 

end 

We  realize  that  "every  answer"  to  a  closed  sub-question 
must  be  a f f i r m a t i v e, 
Q(x,y), 

i.e.  as  soon  as  it  has  proved 

the  above  operator  returns  y. 

the  f i r st 

Chains  of  sub-guestions.  The  operators  as  formulated 
above  return  sub-questions  consisting  of  a  relation 
symbol,  an  argument  l i s t,  and  a  remainder  function,  but 
they  only  accept 
the  supervisor 
responsible 
remainder  procedures.  However, 
where  procedures  are  permitted  as  arguments  (to  other 
procedures), 
the  responsibility  can  easily  be  taken  by 
the  operators  and  the  programming  system.  We  shall  now 
describe  how  this  can  be  done. 

two  items.  This  means 
for  administrating 
in  a  programming  system 

that 
the 

is 

In  closed  and  open  questions,  we  add  one  more  argument 
9,  which 
gument 
objects  which  our  supervisor  shall  handle. 

is  the  remainder  procedure.  The  resulting  ar(cid:173)
for  R2,  e t c .,  are  the 

(x,y,g) 

for  R, 

(x,g) 

l i s ts 

We  then  modify  the  examples  so  that  g  is  introduced  as 
an  argument  and  applied  to  the  returned  answer.  Thus 
the  d e f i n i te  version  of  the  rule 

for  axiom  3 

i a: 

On  a  sub-question  with  R2,  use 
lambda  (x,g)  begin 

local  y; 

determine  y  from  P(x.y); 
return  sub-question 

Q2(y, 

function(lambda 

(z)  g ( f ( x , z )) )) 

end 

The  other  rules  are  modified  s i m i l a r l y.  We  notice  that 
the  sub-questions 
two 
transfer  variables:  x  and  g.  The  bindings  of  these  must 
be  saved  in  the  closure,  and  retained  u n t il 
the  remain(cid:173)
der  procedure 

that  t h is  rule  returns,  contain 

is  used. 

i t s e lf  pfesumably 

is  generated,  where  each  one  refers  to 

Let  g'  be  the  second  argument  of  0.2 
in  one  p a r t i c u l ar 
use  of  the  above  operator.  Clearly  g1  contains  a  refer(cid:173)
ence  to  g,  which 
is  a  procedure  c l o(cid:173)
sure,  which  was  set  up  by  a  previous  sub-question.  As 
one  sub-question  generates  another,  a  chain  of  closu(cid:173)
res 
its  prede(cid:173)
cessor.  When 
in  a 
question, 
the 
its  predecessor  by 
return-answer  statement; 
using  a  procedure  variable,  as  seen  in  the  example, 
predecessor  c a l ls 
its  predecessor,  and  so  on  up  the 
chain. 
as  "return  aeswer". 

f i n a l ly  an  answer 
last  procedure  closure  is  applied 

(top-level)  q j e s t i o n,  q  is  given 

In  the  o r i g i n al 

is  found  to  the  last  sub-

it  calls 

the 

Discussion  of  a p p l i c a b i l i ty  of_the  method.  This  proce(cid:173)
dure  works 
interrupt  points 

In  a ll  cases  where  the  non-determinlstic 

(where  another,  parallel  branch 

is  per(cid:173)

in  recursion, 

in  p r i n c i p l e,  the  t r i ck 

mitted  to  a t t r a ct  attention)  can  be  brought 
to  the  top-
level  block  of  the  "operators",  and  not  be  hidden  deep(cid:173)
er  down 
the  control  stack  (the  stack  of  function  c a l l s) 
one  element  deep  at 
the  c a ll 
the  control  stack 
how  far  we  have  gotten,  can  be  put 
transfer  variable.  With  this  method,  we  have  no  control 
stack  environment,  but  merely  a  variable-binding  envi(cid:173)
ronment  at  the 
what  FUNARG  (or  procedure  closures)  can  handle. 

from  the  supervisor  to  the  operator),  and  then 
information  of 

interrupt  points  (containing 

interrupt  points,  and  t h is 

information,  plus  the 

in  one  additional 

is  exactly 

is  only 

is  that 

the 

We  believe  that  this  method 
is  s u f f i c i e n t ly  powerful 
handle  e.g.  a ll  cases  which  may  occur  when  PC  axioms 
are  mapped  into  rules,  and  probab  1y  also  a  broader  app-
lication. 

to 

A  questionable  feature  of  this  method 
that  one  must 
in  principle  decide  at  "compile-time"  which  retrievals 
are  to  be  done  by  " b i g"  search,  and  which  are  to  be  done 
by  " s h o r t"  intermediate  statement 
(•  non-controlled  sta(cid:173)
tement)  search. 
In  some  applications  t h is  is  OK,  since 
some  relations  are  only  stored  e x p l i c i t ly  or  almost  ex(cid:173)
p l i c i t l y; 

it  may  not  be  acceptable. 

In  others 

is 

is 

If  the  conver-

Requirements  on  the  programming  language. 
sion  from  PC  axiom  to  operator  is  to  be  done  automati(cid:173)
then  the  selected  programming  language  must  of 
c a l l y, 
course  be  able  to  generate  and  manipulate  programs 
in 
the  same  language.  LISP  Is  then  an  obvious  choice.  How(cid:173)
ever,  during  the  execution  of  the  search,  our  require(cid:173)
ment 
instead  that  we  must  be  able  to  create  a  proce(cid:173)
dure  closure,  and  send  it  around  as  data.  Some  simula(cid:173)
tion 
this  f a c i l i t y, 
as  well  as  POP-211  and  ECL12.  LISP1.5  systems  ( a - l i st 
through  the  FUNARG  feature.  Later 
systems)  provide 
LISP  systems 
(LISP  1.6,  original  BBN-LISP)  do  not  pro(cid:173)
vide  i t7.  A  method  for  providing  FUNARG  in  BBN-LISP'type 
systems  without  undue 
posed  I n9. 

languages,  notably  Simula  6710  have 

loss  of  efficiency  has  been  pro(cid:173)

it 

It  has  been  suggested  that  the  notion  of  a  "remainder 
procedure",  as  used 
connected  w i th  the  notion  of  "continuation",  which  has 
recently  proved  helpful 
in  discussing  the  denotational 
languages13. 
semantics  of  programming 

is  rather  closely 

in  t h is  paper, 

Implementation.  The  author  has  participated  in  the  deve(cid:173)
lopment  of  a  program,  called  PCDB  (Predicate  Calculus 
Is  organized  according  to  the  search 
Data  Base),  which 
supervisor  p r i n c i p l e.  This  program  was  described 
in  re(cid:173)
ference  14,  and  contains  a  compiler  which  accepts  PC 
axioms  and  generates  corresponding  LISP  programs. 
so  contains  a  simple  supervisor,  elaborate  data  base 
handling  f a c i l i t i e s,  etc.  which  are  needed.  The  present 
(1972)  version  of  PCDB 
the  supervisor  administrate 
lets 
the  remainder  procedures 
in  an  ad  hoc  and  not  completely 
general  way.  A  new  compiler  is  being  w r i t t e n,  which  w i ll 
administrate  them  with  FUNARG  expressions  as 
indicated 
in 
the  conference. 

this  paper.  We  hope  to  have 

it  working  at  the  time  of 

It  a l(cid:173)

Acknowledgements.  The  following  people 
helped  with  the  PCDB  work:  Lennart  Drugge,  Anders  Harald-
son,  Rene"  Reboh. 

in  Uppsala  have 

Sponsor:  This  research  was  supported  by  IBM  Svenska  AB. 

233 

References 

1 .C  H e w i tt 

D e s c r i p t i on  and 
of  PLANNER,  a 
p u l a t i ng  models 
Ph.D. 
Mass. 

t h e o r e t i c al  a n a l y s is 

language 

f or  p r o v i ng 

( u s i ng  schemata) 
theorems  and  mani-

In  a  robot 

t h e s i s,  Dept.  of  m a t h e m a t i c s,  MIT,  Cambridge, 
(1972) 

2.  J . F.  R u l I f s on  et  a l. 

QA4:  a  p r o c e d u r al  b a s is 
f or 
Al  C e n t e r,  S t a n f o rd  Research 

i n t u i t i ve 
I n s t i t u te 

r e a s o n i ng 

(1972) 

3.  D.B.  Anderson  and  P . J.  Hayes 

l o g i c i a n 's 

The 
in 
S o c i e t y,  1972 

the 

f o l ly 

(European)  AlSB  B u l l e t i n,  B r i t i sh  Computer 

4.  G . J.  Sussman 

Why  c o n n i v i ng 
MIT  Al 

is  b e t t er 
l a b o r a t o r y,  1972 

than  p l a n n i ng 

5.  A.  Newell  et  a l. 

Report  on  a  general  p r o b l e m - s o l v i ng  program 
Proc. 

IFIP  Congress  1959,  p.  256 

6.  P . J.  Landin 

The  mechanical  e v a l u a t i on  of  e x p r e s s i o ns 
Computer  J o u r n a l,  V o l.  6 

( 1 9 6 4 ),  pp.  308-320 

7.  J.  Moses 

The  F u n c t i on  of  FUNCTION 
problem  should  be  c a l l ed 
ACM  SIGSAM  b u l l e t in  No.  15 

(1970) 

in  LISP,  or  why 
the  environment  problem 

the  FUNARG 

9.  B.  Raphe1 

SIR:  a  computer  program 
t r i e v al 
in  M i n s k y,  e d .:  Semantic 
MIT  p r e s s,  1968 

9.  E.  Sandewall 

f or  semantic 

I n f o r m a t i on 

r e(cid:173)

i n f o r m a t i on  p r o c e s s i ng 

A  proposed  s o l u t i on 
ACM  SIGSAM  b u l l e t in  No.  17 

to 

(1971) 

the  FUNARG  problem 

10.  Ole-Johan  Dahl  et  a t. 
Common  Base  Language 
Norwegian  Computing  C e n t e r,  O s l o,  1970 

1.  R.M.  B u r s t a ll  et  a l. 

Programming 
Edlnburhg  Univ.  P r e s s,  1971 

in  POP-2 

2.  B.  Wegbreit  et  a l. 

ECL  Programmer's  Manual 
Harvard  U n i v e r s i t y,  Cambridge,  Mass.  1972 

3.  J.  Reynolds 
D e f i n i t i o n al 
ming 
Proceedings  of  an  ACM  Conference,  Boston,  Mass.,1972 

f or  h i g h er  o r d er  program(cid:173)

i n t e r p r e t e rs 

languages 

4.  E.  Sandewall 
A  programming 
c a l c u l u s - o r i e n t ed  data  base 
in  Proceedings  of 
the  second 
c o n f e r e n ce  on  A r t i f i c i al 
p u t er  S o c i e t y,  London,  1971 

t o ol 

f or  management  of  a  p r e d i c a t e-

I n t e r n a t i o n al 

j o i nt 

i n t e l l i g e n c e,  B r i t i sh  Com(cid:173)

234 

