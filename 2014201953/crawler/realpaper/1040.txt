Planning for Temporally Extended Goals

as Propositional Satisﬁability

Robert Mattm ¨uller

Albert-Ludwigs-Universit¨at

Institut f¨ur Informatik

Freiburg, Germany

Jussi Rintanen

National ICT Australia and

Australian National University

Canberra, Australia

mattmuel@informatik.uni-freiburg.de

Jussi.Rintanen@nicta.com.au

Abstract

Planning for temporally extended goals (TEGs)
expressed as formulae of Linear-time Temporal
Logic (LTL) is a proper generalization of classi-
cal planning, not only allowing to specify prop-
erties of a goal state but of the whole plan exe-
cution. Additionally, LTL formulae can be used
to represent domain-speciﬁc control knowledge to
speed up planning. In this paper we extend SAT-
based planning for LTL goals (akin to bounded LTL
model-checking in veriﬁcation) to partially ordered
plans, thus signiﬁcantly increasing planning efﬁ-
ciency compared to purely sequential SAT plan-
ning. We consider a very relaxed notion of par-
tial ordering and show how planning for LTL goals
(without the next-time operator) can be translated
into a SAT problem and solved very efﬁciently. The
results extend the practical applicability of SAT-
based planning to a wider class of planning prob-
lems. In addition, they could be applied to solving
problems in bounded LTL model-checking more ef-
ﬁciently.

1 Introduction

In classical planning, a goal that an agent has to achieve is
simply a property of a goal state to reach. TEGs are speciﬁ-
cations not only stating desired properties of a ﬁnal state but
of a sequence of states, namely the execution of a plan sat-
isfying the speciﬁcation. Expressing these goals as formulae
of an adequate temporal logic, one can impose more precise
constraints on plans than one could with classical reachabil-
ity goals. So for instance it is possible to specify mainte-
nance goals (some property must be maintained indeﬁnitely),
goals stating how the agent should react to some environmen-
tal condition, and safety goals that impose a restriction on the
agent’s behavior not to change certain properties of the world
state while trying to achieve a reachability goal.

In planning, temporal speciﬁcations are usually either re-
garded as extended goals or as a means of encoding domain-
speciﬁc search control knowledge used to guide the planner.
Different formalisms have been used, e. g. Temporal Ac-
tion Logics (TAL) in TALplanner [Doherty and Kvarnstr¨om,

2001], and Metric Interval Temporal Logic (MITL) and Lin-
ear Temporal Logic (LTL) in TLPlan [Bacchus and Kabanza,
1996; 2000]. Recently, the Planning Domain Deﬁnition Lan-
guage (PDDL) has been extended to express state trajectory
constraints [Gerevini and Long, 2005]. Both TALplanner and
TLPlan are forward-chaining planners, pruning the search
space by progressing the temporal formula. Other approaches
include compiling tasks including LTL goals into classical
tasks [Cresswell and Coddington, 2004; Baier and McIlraith,
2006] before solving them by using a classical planner.

Bounded model-checking [Biere et al., 1999; Latvala et al.,
2004], which is an extension of the planning as satisﬁabil-
ity approach [Kautz and Selman, 1992], can be viewed as a
SAT-based technique for planning with TEGs. Since the ef-
ﬁciency of SAT-based planning techniques is often strongly
dependent on the notion of partially ordered or parallel plans
[Kautz and Selman, 1996; Rintanen et al., 2006], extend-
ing the SAT-based LTL model-checking/planning approach to
parallel plans may in some cases be very critical to obtain efﬁ-
cient planning. The contribution of this paper is an encoding
of constraints that preserve the semantics of LTL formulae
under parallel plans.

In Section 2 we give a formal description of the problem to
be solved. In Section 3 we present the propositional encod-
ing, in which we use the base encoding of planning as sat-
isﬁability [Kautz and Selman, 1992] reproduced in Section
3.1 and the translation of LTL formulae to propositional logic
[Latvala et al., 2004] reproduced in Section 3.2. Section 3.3
shows our adaption of the encoding of parallelism constraints
given in [Rintanen et al., 2006] to tasks with TEGs. Our ex-
periments are described in Section 4.

2 Planning for Temporally Extended Goals as

Propositional Satisﬁability

2.1 Problem Description

Notation
Let A be a set of propositional variables and Φ a proposi-
tional or temporal formula. We write Lit (A) as a shorthand
for A ∪ {¬a | a ∈ A} and Lit (Φ) instead of Lit (var (Φ)),
where var (Φ) is the set of variables in Φ. If Lit is a set of lit-
erals, we write Lit Φ
:= Lit ∩ Lit (Φ). If Φ is a propositional
formula, then a occurs positively (negatively) in Φ iff there

IJCAI-07

1966

is an occurrence of a in Φ nested within an even (odd) num-
ber of negation signs. A negative literal ¬a occurs positively
(negatively) in Φ iff a occurs negatively (positively) in Φ. A
literal (cid:2) occurs in Φ if it occurs positively or negatively in Φ.
We write pos((cid:2), Φ), neg((cid:2), Φ), and occ((cid:2), Φ), respectively.

Linear Temporal Logic
In order to specify TEGs, we have to choose a speciﬁcation
language. Here we use propositional LTL [Emerson, 1990]
without next-time operator because it has a simple and well-
deﬁned semantics and it is sufﬁciently expressive for many
qualitative TEGs.

The set of well-formed LTL−X formulae in negation nor-
mal form over a set A of propositional variables (LTL−X
formulae for short) is inductively deﬁned as follows: for all
a ∈ A, a and ¬a are LTL−X formulae. If ϕ, ϕ1, and ϕ2 are
LTL−X formulae, so are ϕ1 ∧ ϕ2, ϕ1 ∨ ϕ2, Fϕ (“eventually
ϕ”), Gϕ (“always ϕ”), ϕ1Uϕ2 (“ϕ1 until ϕ2”) and ϕ1Rϕ2
(“ϕ1 releases ϕ2”).

An LTL−X formula ϕ over A is evaluated along an inﬁ-
nite path in a state space over A. Formally, a Kripke model
M = (cid:7)Q, →, L(cid:9) is a triple where Q is a set of states,
→ ⊆ Q × Q is a reﬂexive binary relation over Q, the tran-
sition relation, and L : Q → 2A
is a function assigning to
each state a propositional valuation of the variables in A. A
path in M is a function π : N → Q such that for all n ∈ N,
π(n) → π(n + 1). If π is a path in M and i ∈ N, then the ith
sufﬁx of π, πi : N → Q, is deﬁned as πi(j) := π(i + j) for
all j ∈ N.

For k, b ∈ N, k < b, a path π = u · vω

consisting of a ﬁnite
preﬁx u = π(0), . . . , π(k−1) and a loop v = π(k), . . . , π(b−
1), repeated inﬁnitely often, is called a (b, k)-loop. It is called
a b-loop if it is a (b, k)-loop for some k < b.

The truth of an LTL−X formula ϕ along a path π, symbol-

ically π |= ϕ, is now inductively deﬁned as follows:

π |= a :⇔ a ∈ L(π(0))
π |= ¬a :⇔ a /∈ L(π(0))

π |= ϕ1 ∧ ϕ2 :⇔ π |= ϕ1 and π |= ϕ2
π |= ϕ1 ∨ ϕ2 :⇔ π |= ϕ1 or π |= ϕ2

π |= Fϕ :⇔ ∃i ∈ N : πi |= ϕ
π |= Gϕ :⇔ ∀i ∈ N : πi |= ϕ

π |= ϕ1Uϕ2 :⇔ ∃i ∈ N : πi |= ϕ2 and

∀j ∈ {0, . . . , i − 1} : πj |= ϕ1

π |= ϕ1Rϕ2 :⇔ ∀i ∈ N : πi |= ϕ2 or

∃j ∈ {0, . . . , i − 1} : πj |= ϕ1.

If a given path π is a b-loop, the ﬁrst b states of π together
with the value of k contain all the information needed to eval-
uate ϕ along π. In the following, all paths we will deal with
are of that type.

Let ¯q = (cid:7)q0, . . . , qb(cid:9) be a ﬁnite sequence of states such
that qi → qi+1 for all i ∈ {0, . . . , b − 1} and that there is
a k ∈ {0, . . . , b − 1} with qb = qk. In order to be able to
evaluate an LTL−X formula along ¯q, we consider an inﬁnite
unraveling of ¯q: If qb ∈ {q0, . . . , qb−1}, say qb = qk, let
¯q∞
k (i) =
k

k (i) = qi, if i < b, and ¯q∞

: N → Q, where ¯q∞

q[(i−b) mod (b−k)]+k, otherwise. Note that ¯q∞
k is actually a
path, i. e. consecutive states are related by →. An LTL−X
formula ϕ is valid along such a ﬁnite sequence ¯q, written as
¯q |= ϕ, iff there is a k ∈ {0, . . . , b − 1} such that qb = qk and
¯q∞
k |= ϕ.
We make sure that there is a k ∈ {0, . . . , b − 1} such that
qb = qk by allowing idling in a ﬁnal state (enforcing it if there
is no other loop).

Planning
A planning task is a tuple P = (cid:7)A, I, O, ϕ(cid:9), where A is a
ﬁnite set of Boolean state variables, I ∈ 2A
is the initial state,
O is a ﬁnite set of operators, and ϕ is an LTL−X formula with
variables in A. Operators have the form o = (cid:7)p, e, c(cid:9), where p
is a propositional formula over A, the precondition of o, e is a
ﬁnite set of literals over A, the unconditional effects of o, and
c is a ﬁnite set of pairs f (cid:2) d, consisting of a propositional
formula f and a ﬁnite set of literals d. These pairs are the
conditional effects of o.

(cid:2)
The set of all effects of o will be written as [o]♦ :=
{d | f (cid:2) d ∈ c}, the set of unconditional effects as
e ∪
(cid:2)
[o](cid:2) := e, and the set of active effects in a state q as
[o]q := e ∪
{d | f (cid:2) d ∈ c and q |= f } for a single oper-
ator o and [S]q :=

(cid:2)
o∈S [o]q for a set S of operators.

(or q o−→q(cid:4)

A set S of operators is applicable in a state q if q |= p for
all o ∈ S and [S]q is consistent. We identify an operator
o with the singleton set {o}, thus o is applicable in q if its
precondition is satisﬁed and its active effects are consistent.
For a set S of operators, possibly singleton for sequential
plans or empty to model idling, and a state q such that S is
applicable in q, the simultaneous application of S in q results
in the state q(cid:4)
obtained from q by making the literals in [S]q
true and leaving the other state variables unchanged. We then
write q S−→q(cid:4)
if S = {o}). Let ¯S = (cid:7)S0, . . . , Sb−1(cid:9)
be a sequence of sets of operators and q0 a state such that
S1−→ . . . Sb−1−−−→qb is deﬁned. Then the sequence of
q0
states exec(q0, ¯S) := (cid:7)q0, . . . , qb(cid:9) is called the execution
of ¯S in q0. Finally, let ¯S = (cid:7)S0, . . . , Sb−1(cid:9) be a sequence
of sets of operators, ¯≺ = (cid:7)≺0, . . . , ≺b−1(cid:9) a sequence of
binary relations such that ≺t is a total ordering of St, say
ot,0 ≺t · · · ≺t ot,|St|−1, for all t ∈ {0, . . . , b − 1}, and q0
ot,0−−→q1
−−−−−→qt+1
a state. Assume that qt
t
∈
t
is deﬁned for
Then
:=
the
sequence
(cid:7)q0, q1
a
linearized execution of ¯S in q0.

all
of
1, q2
0, . . . , q1, q1

{0, . . . , b − 1}.
exec(q0, ¯S, ¯≺)

1, . . . , q2, . . . , qb−1(cid:9)

ot,2−−→ . . . ot,|St|−1

ot,1−−→q2

A plan of length b for P = (cid:7)A, I, O, ϕ(cid:9) is a tuple ¯S =
(cid:7)S0, . . . , Sb−1(cid:9) with St ⊆ O for all t ∈ {0, . . . , b − 1}
together with a sequence ¯≺ = (cid:7)≺0, . . . , ≺b−1(cid:9) such that
(a) ≺t is a total ordering of St for all t ∈ {0, . . . , b − 1}
and (b) ¯q = exec(I, ¯S, ¯≺) is deﬁned and ¯q |= ϕ in the Kripke
model induced by P.

is

called

t

states

S0−→q1

0, q2

2.2 Reduction to Satisﬁability
Planning as satisﬁability [Kautz and Selman, 1992] roughly
works as follows: given a planning task P = (cid:7)A, I, O, ϕ(cid:9),
propositional formulae Φ0, Φ1, Φ2, . . . are generated such
that there exists a plan of length b for P if Φb is satisﬁable.

IJCAI-07

1967

The Φb are evaluated by using a SAT solver. If Φb is unsatis-
ﬁable, the evaluation will proceed to Φb+1, otherwise a plan
for P can be extracted from a satisfying valuation v for Φb.

(cid:3)b−1

2.3 Solution Quality
The quality of a parallel plan ¯S = (cid:7)S0, . . . , Sb−1(cid:9) can be
measured with respect to its parallel plan length b or its se-
t=0 |St|. We will focus on ﬁnding
quential plan length
plans with a low parallel plan length because the size of the
largest propositional formula to be considered for a given task
is roughly proportional to the parallel length of a plan corre-
sponding to a satisfying valuation. As SAT solver running
times grow exponentially in the formula size in the worst
case, obtaining small formulae is particularly important.

3 Propositional Encoding

3.1 Base Encoding
We ﬁrst give the base encoding (cid:2)P(cid:3)b
base of the transition sys-
tem induced by a planning task P = (cid:7)A, I, O, ϕ(cid:9) for a bound
b on the plan length ﬁrst proposed by [Kautz and Selman,
1992], omitting the reachability goal formula:

(cid:2)P(cid:3)b

base = I0 ∧

(cid:4)b−1

Rt,

t=0

(cid:5)
where Rt is the conjunction of precondition axioms ot →
(cid:5)
(cid:5)
pt, effect axioms ot →
et+1, conditional effect axioms
f (cid:3)d∈c((ot ∧ ft) →
dt+1) for all o = (cid:7)p, e, c(cid:9) ∈ O,
(cid:6)
(cid:6)
and positive and negative frame axioms (¬at ∧ at+1) →
o∈O(ot ∧
o∈O(ot ∧ (EPC a(o))t) and (at ∧ ¬at+1) →
(EPC ¬a(o))t), respectively, for all a ∈ A.
In the frame
(cid:6)
axioms, EPC (cid:3)((cid:7)p, e, c(cid:9)) is deﬁned as (cid:15), if (cid:2) ∈ e, and as
{f | f (cid:2) d ∈ c and (cid:2) ∈ d}, otherwise.
This encoding contains propositional variables at for all
state variables a ∈ A and time points t ∈ {0, . . . , b} as
well as ot for all operators o ∈ O and time points t ∈
{0, . . . , b − 1} with the intended semantics that a holds at
time point t iff at is true, and that operator o is applied at
time point t iff ot is true. Where sets of variables or proposi-
tional formulae are indexed with some t, this actually denotes
the sets or formulae with variables indexed correspondingly.
The following theorem states the correctness of the propo-
sitional translation. A proof can be found in [Rintanen et al.,
2006].
Theorem 1. Let P = (cid:7)A, I, O, ϕ(cid:9) be a planning task.
Then there exists a sequence of sets of operators ¯S =
(cid:7)S0, . . . , Sb−1(cid:9) such that exec(I, ¯S) is deﬁned iff the formula
(cid:2)P(cid:3)b

base is satisﬁable.

3.2 Temporally Extended Goals

In this subsection we reproduce the reduction of the bounded
LTL/LTL−X model-checking problem to propositional satis-
ﬁability given in [Latvala et al., 2004], adding the constraint
that a satisfying sequence of states must contain a loop: let

(cid:2)a(cid:3)t
b
(cid:2)¬a(cid:3)t
b

(cid:2)ϕ1 ∧ ϕ2(cid:3)t
b
(cid:2)ϕ1 ∨ ϕ2(cid:3)t
b

(cid:2)Fϕ(cid:3)t
b
(cid:2)Gϕ(cid:3)t
b

(cid:2)ϕ1Uϕ2(cid:3)t
b

(cid:2)ϕ1Rϕ2(cid:3)t
b

(cid:7)(cid:7)Fϕ(cid:9)(cid:9)t
b
(cid:7)(cid:7)Gϕ(cid:9)(cid:9)t
b

(cid:7)(cid:7)ϕ1Uϕ2(cid:9)(cid:9)t
b

(cid:7)(cid:7)ϕ1Rϕ2(cid:9)(cid:9)t
b

t < b

b

b

b

(cid:2)ϕ1(cid:3)t
(cid:2)ϕ1(cid:3)t
(cid:2)ϕ(cid:3)t
(cid:2)ϕ(cid:3)t
(cid:2)ϕ2(cid:3)t

at
¬at
b ∧ (cid:2)ϕ2(cid:3)t
b ∨ (cid:2)ϕ2(cid:3)t
b ∨ (cid:2)Fϕ(cid:3)t+1
b ∧ (cid:2)Gϕ(cid:3)t+1
(cid:10)
b
(cid:11)
b ∧
b ∨
(cid:2)ϕ1(cid:3)t
(cid:10)
(cid:2)ϕ1Uϕ2(cid:3)t+1
(cid:2)ϕ2(cid:3)t
(cid:2)ϕ1(cid:3)t
∨(cid:2)ϕ1Rϕ2(cid:3)t+1
(cid:2)ϕ(cid:3)t
(cid:10)
(cid:2)ϕ(cid:3)t
b
(cid:2)ϕ1(cid:3)t
(cid:2)ϕ2(cid:3)t
(cid:10)
(cid:7)(cid:7)ϕ1Uϕ2(cid:9)(cid:9)t+1
(cid:2)ϕ2(cid:3)t
(cid:2)ϕ1(cid:3)t
(cid:7)(cid:7)ϕ1Rϕ2(cid:9)(cid:9)t+1

b ∨ (cid:7)(cid:7)Fϕ(cid:9)(cid:9)t+1
b ∧ (cid:7)(cid:7)Gϕ(cid:9)(cid:9)t+1
(cid:11)
b ∨
b ∧

(cid:11)
b ∨

(cid:11)
b∨

b ∧

b ∧

b

b

b

b

t = b

(cid:6)b−1
(cid:6)b−1
j=0(lj ∧ aj)
(cid:6)b−1
j=0(lj ∧ ¬aj)
j=0(lj ∧ (cid:2)ϕ1 ∧ ϕ2(cid:3)j
(cid:6)b−1
b)
j=0(lj ∧ (cid:2)ϕ1 ∨ ϕ2(cid:3)j
(cid:6)b−1
b)
j=0(lj ∧ (cid:7)(cid:7)Fϕ(cid:9)(cid:9)j
(cid:6)b−1
b)
j=0(lj ∧ (cid:7)(cid:7)Gϕ(cid:9)(cid:9)j
(cid:6)b−1
b)
j=0(lj ∧(cid:7)(cid:7)ϕ1Uϕ2(cid:9)(cid:9)j
b)
(cid:6)b−1
j=0(lj ∧(cid:7)(cid:7)ϕ1Rϕ2(cid:9)(cid:9)j
b)

⊥
(cid:15)
⊥

(cid:15)

P = (cid:7)A, I, O, ϕ(cid:9) be a planning task and b ∈ N. Then

(cid:2)P(cid:3)b

bmc := looptoAx b ∧ beforeAx b ∧ uniqueAx b ∧

(cid:7)

inftyAx b ∧ (cid:2)ϕ(cid:3)0
b ,
(cid:4)
(cid:4)b−1
lt →
(cid:7)
(cid:4)b−1

t=0

where

(cid:8)
(at ↔ ab)

,

a∈A

(cid:8)
bef t ↔ (bef t−1 ∨ lt−1)
(cid:9)b−1

(cid:8)

,

t=1

bef t → ¬lt

, inftyAx b :=

lt,

t=0

looptoAx b :=

beforeAx b := ¬bef 0 ∧
(cid:7)
(cid:4)b−1

uniqueAx b :=

t=0

with fresh auxiliary variables lt, bef t, t ∈ {0, . . . , b − 1}
(with the intended semantics that there is a loop from qb−1
back to qt or back to some qt(cid:2), t(cid:4) < t, respectively). The
recursive translation (cid:2)ϕ(cid:3)0

b of ϕ is deﬁned as

b
Notice that the translation (cid:2)·(cid:3)t
b is closely related to the formula
progression procedures used in [Bacchus and Kabanza, 2000;
Doherty and Kvarnstr¨om, 2001].

The following theorem states the correctness and com-
pleteness of the propositional translation. A slightly different
formulation as well as a proof can be found in [Latvala et al.,
2004].
Theorem 2. Let P = (cid:7)A, I, O, ϕ(cid:9) be a planning task and
b ∈ N. Then there exists a sequence of sets of operators
¯S = (cid:7)S0, . . . , Sb−1(cid:9) such that ¯q = exec(I, ¯S) is deﬁned and
¯q |= ϕ iff the formula (cid:2)P(cid:3)b

bmc is satisﬁable.

∧ (cid:2)P(cid:3)b

base

3.3 Parallel Plans
In this section we present our main contribution, being con-
straints which guarantee that the meaning of LTL−X formulae
is preserved under parallel plans, and a propositional encod-
ing of these constraints.

Theorem 2 tells us how to encode the requirement that
there is a sequence ¯S such that exec(I, ¯S) |= ϕ. But we
have not yet made sure that ¯S is in fact a plan, i. e.
there

IJCAI-07

1968

is a sequence ¯≺ of corresponding total orderings such that
exec(I, ¯S, ¯≺) |= ϕ. For such a sequence ¯≺ to yield an admis-
sible linearization, it must ensure that (a) ¯q = exec(I, ¯S, ¯≺)
is deﬁned and if so, that (b) ¯q |= ϕ. In order to state how this
can be achieved, we need some deﬁnitions. The ﬁrst one and
the subsequent lemma are due to [Lamport, 1983].
Deﬁnition 1. Let π = q0, q1, q2, . . . and ˜π = ˜q0, ˜q1, ˜q2, . . .
be two inﬁnite (ﬁnite) paths in a Kripke model (cid:7)Q, →, L(cid:9).
Then π and ˜π are called stuttering equivalent, π ∼ ˜π for
short, if there are two inﬁnite (ﬁnite) sequences of natural
numbers 0 = i0 < i1 < i2 < . . . (< in) and 0 = j0 <
j1 < j2 < . . . (< jn) such that for all 0 ≤ k (< n) :
L(qik ) = L(qik+1) = . . . = L(qik+1−1) = L(˜qjk ) =
L(˜qjk+1) = . . . = L(˜qjk+1−1). A ﬁnite subsequence like
, qik+1, . . . , qik+1−1 of π or ˜π consisting of identically la-
qik
beled states is called a block.
Lemma 3. Let ϕ be an LTL−X formula, M = (cid:7)Q, →, L(cid:9) a
for some A ⊇ var (ϕ), and
Kripke model, where L : Q → 2A
π, ˜π two inﬁnite (ﬁnite) paths in M with π ∼ ˜π. Then π |= ϕ
iff ˜π |= ϕ.

The following deﬁnition, adapted from a similar one by
[Rintanen et al., 2006], is crucial for the rest of this section
in that it describes under which circumstances an operator o
may or may not be applied before an operator o(cid:4)
in a lin-
earization ≺ of a set of operators S if one wants to ensure
that for all time points t the application of St in qt in the or-
dering given by ≺t is deﬁned in the ﬁrst place, and if so, that
exec(I, ¯S, ¯≺) |= ϕ.
Deﬁnition 2. Let P = (cid:7)A, I, O, ϕ(cid:9) be a planning task and
o = (cid:7)p, e, c(cid:9), o(cid:4) = (cid:7)p(cid:4), e(cid:4), c(cid:4)(cid:9) ∈ O. Then o affects o(cid:4)
iff o (cid:21)= o(cid:4)
and either (1.) there is a literal (cid:2) over A such that (a.) (cid:2) ∈ [o]♦
and (b.) (i.) neg((cid:2), p(cid:4)) or (ii.) occ((cid:2), f (cid:4)) for some f (cid:4)
(cid:2) d(cid:4) ∈ c(cid:4)
,
or (2.) [o(cid:4)]

♦ \ [o]

(cid:21)= ∅.

ϕ
(cid:2)

ϕ

ϕ

Here, [o(cid:4)]

♦ is the restriction of [o(cid:4)]♦, i. e. of the set of
all conditional and unconditional effect literals of o(cid:4)
, to those
literals occurring (positively or negatively) in ϕ. Similarly,
ϕ
(cid:2) = e ∩ Lit (ϕ).
for o = (cid:7)p, e, c(cid:9), [o]

The cases correspond to different problems that can poten-
tially arise if o is applied before o(cid:4)
in a linearization, namely
to o falsifying the precondition of o(cid:4)
[(1.a.) + (1.b.i.)], o af-
fecting the set of active effects of o(cid:4)
[(1.a.) + (1.b.ii.)], and o
and o(cid:4)
putting at risk the stuttering equivalence of exec(I, ¯S)
and exec(I, ¯S, ¯≺) [(2.)]. The deﬁnition gives rise to a condi-
tion on the admissibility of a sequence ¯≺ of total orderings.
Lemma 4. Let P = (cid:7)A, I, O, ϕ(cid:9) be a planning task, ¯S =
(cid:7)S0, . . . , Sb−1(cid:9) a sequence of sets of operators such that
exec(I, ¯S) |= ϕ, and ¯≺ = (cid:7)≺0, . . . , ≺b−1(cid:9) a sequence such
that ≺t is a total ordering of St for all t ∈ {0, . . . , b − 1}.
If there are no operators o, o(cid:4) ∈ St such that o affects o(cid:4)
and
o ≺t o(cid:4)
for any t ∈ {0, . . . , b − 1}, then ¯S together with ¯≺ is
a plan for P.
Proof sketch. We have to show that exec(I, ¯S, ¯≺) is deﬁned
and exec(I, ¯S, ¯≺) |= ϕ. As argued in [Rintanen et al., 2006],
in order to show that exec(I, ¯S, ¯≺) is deﬁned, it sufﬁces to
show that no operator o ∈ St can disable another operator
o(cid:4) ∈ St by potentially falsifying its precondition or altering

its set of active effects for any t ∈ {0, . . . , b − 1}. These
two possibilities are ruled out by condition (1.a.) together
with (1.b.i.) and (1.b.ii.) of Deﬁnition 2 respectively (see
[Rintanen et al., 2006] for a detailed proof of that claim).
If exec(I, ¯S, ¯≺) is deﬁned, by using Lemma 3 it is sufﬁ-
cient to show that exec(I, ¯S) ∼ exec(I, ¯S, ¯≺) in the Kripke
model M = (cid:7)Q, →, L(cid:9), where Q and → form the state
space induced by P and L : Q → 2var (ϕ)
is deﬁned by
L(q) = q ∩ var (ϕ). To see that this is true, consider a sin-
gle time point t ∈ {0, . . . , b − 1} ﬁrst. Let ≺t be the total
ordering of St and, say, ot,0 ≺t · · · ≺t ot,|St|−1. Then the
subsequence of the linearized execution exec(I, ¯S, ¯≺)

· · · −→qt

ot,0−−→q1

t

ot,1−−→q2

t

ot,2−−→ . . . ot,|St |−1

−−−−−→qt+1−→ · · ·

corresponds to the subsequence of the execution exec(I, ¯S)

· · · −→qt

St−→qt+1−→ · · ·

ϕ
♦

, [o(cid:4)]

Note that condition (2.) of Deﬁnition 2 together with the fact
that no operator affects an operator applied later in ≺t makes
ϕ
sure that for o ≺t o(cid:4)
⊆ [o]
(cid:2) holds and thus all ef-
fects in [St]qt relevant to ϕ, i. e.
those effects concerning
a variable occurring in ϕ, are effects of ot,0. Therefore, the
operators ot,1, . . . , ot,|St|−1 do not have an additional effect
on the labeling L. Thus, L(q1
t ) = . . . = L(qt+1),
and q1
t , . . . , qt+1 form one block of the stuttering equiv-
alence of exec(I, ¯S, ¯≺) and exec(I, ¯S). The corresponding
block in exec(I, ¯S) is the singleton {qt+1}. The other blocks
are constructed analogously.

t ) = L(q2

t , q2

and o ≺t o(cid:4)

The next step is to ﬁnd a propositional formula encoding
the condition that at no time point t any two operators o, o(cid:4)
such that o affects o(cid:4)
can be applied simultane-
ously. For that purpose we deﬁne the notion of a disabling
graph [Rintanen et al., 2006] for a planning task P.
Deﬁnition 3. Let P = (cid:7)A, I, O, ϕ(cid:9) be a planning task. A
directed graph G = (cid:7)O, E(cid:9), where E ⊆ O × O, is a disabling
graph for P if E contains all edges (o, o(cid:4)) such that (1.) there
is a state q reachable from I with operators in O in which o
and o(cid:4)

are simultaneously applicable and (2.) o affects o(cid:4)

.

t

.

Let St be a set of operators. If the subgraph Gt = (cid:7)St, Et(cid:9),
Et = E ∩ (St × St), of a disabling graph G = (cid:7)O, E(cid:9) for
P induced by St is acyclic, then there is an ordering ≺t of
St in which there are no two operators o ≺t o(cid:4)
with o af-
fecting o(cid:4)
In fact, ≺t can be an arbitrary topological or-
dering of (cid:7)St, E−1
(cid:9). As the strongly connected components
(SCCs) of a directed graph form a directed acyclic graph, in-
stead of ensuring the acyclicity of Gt, it is sufﬁcient to ensure
the acyclicity of the subgraphs of Gt induced by the SCCs
Ci of G, i. e. of Gi
t = St ∩ Ci and
t × Si
Ei

t = (cid:7)Si
t). This can be achieved as follows:

t = Et ∩ (Si
Let G = (cid:7)O, E(cid:9) be a disabling graph, C = {C1, . . . , Cm}
the set of SCCs of G, and ≺i
an arbitrary total ordering
} for all i ∈ {1, . . . , m}, say
of Ci = {oi1
≺i · · · ≺i oi|Ci | . For o1, . . . , on ∈ O, E, R ⊆ O and
oi1
(cid:2) ∈ Lit (A), we deﬁne formulae stating that there are no
oi, oj ∈ {o1, . . . , on}, i < j, such that oi ∈ E, oj ∈ R, and

t(cid:9), where Si

, . . . , oi|Ci |

t, Ei

IJCAI-07

1969

oi, oj are applied simultaneously (intuitively, operators in E
can disable operators in R wrt (cid:2)):
chain(o1, . . . , on; E; R; (cid:2)) :=

oi → aj,(cid:2) | i < j, oi ∈ E, oj ∈ R, {oi+1, . . . , oj−1}∩R = ∅

ai,(cid:2) → aj,(cid:2) | i < j, {oi, oj} ⊆ R, {oi+1, . . . , oj−1}∩R = ∅

¯

ai,(cid:2) → ¬oi | oi ∈ R

,

^˘
˘
˘

∪

∪

¯
¯

where the ai,(cid:3)
are fresh auxiliary variables. Now, the nega-
tion of (1) in Deﬁnition 2 translates to the conjunction of
chain formulae for all time points, SCCs, and literals in ϕ,
if we use the following sets E(cid:3), R(cid:3):

E(cid:2) := {o ∈ O | (cid:2) ∈ [o]♦ }
R(cid:2) := {(cid:8)p, e, c(cid:9) ∈ O | pos((cid:2), p) or ex. f (cid:2) d ∈ c s. t. occ((cid:2), f )}.

and

Similarly, the negation of (2) in Deﬁnition 2 translates to the
conjunction of chain formulae with the sets E∼

(cid:3) , R∼
(cid:3) :

E∼

(cid:2) := {o ∈ O | (cid:2) /∈ [o]

} and R∼

(cid:2) := {o ∈ O | (cid:2) ∈ [o]♦ }.

(cid:2)

So, the parallelism constraints can be encoded in the formula

(cid:2)P(cid:3)b

lin :=

" ^
m^
^

i=1

(cid:2)∈Lit(A)

b−1^

t=0

∧

chain(oi1

, . . . , oi|Ci |

; E(cid:2); R(cid:2); (cid:2))t

#

chain(oi1

, . . . , oi|Ci |

; E∼

(cid:2) ; R∼

(cid:2) ; ˜(cid:2))t

.

(cid:2)∈Lit(ϕ)

t, Ei

Remark 1. If the valuation corresponding to a sequence of
sets of operators ¯S = (cid:7)S0, . . . , Sb−1(cid:9) satisﬁes (cid:2)P(cid:3)b
lin , then
for all time points t and SCCs Ci of the disabling graph
G = (cid:7)O, E(cid:9) used in the construction of (cid:2)P(cid:3)b
lin , all subgraphs
Gi
t(cid:9) are acyclic.1 As the SCCs form an acyclic
t = (cid:7)Si
graph, there is a total ordering ≺C on C such that for all
i, j ∈ {1, . . . , m} with Ci ≺C Cj, there are no o ∈ Ci and
o(cid:4) ∈ Cj such that (o, o(cid:4)) ∈ E. Since Gi
t is acyclic, there is a
total ordering ≺i
t for each t ∈ {0, . . . , b − 1} and i ∈
{1, . . . , m} (consistent with the ordering ≺i
used in the con-
lin ) such that there is no pair o, o(cid:4) ∈ Ci with
struction of (cid:2)P(cid:3)b
(o, o(cid:4)) ∈ E and o ≺i
t, i ∈ {1, . . . , m},
and ≺C can be combined lexicographically, resulting in an or-
dering ≺t of St. It follows that there is no t ∈ {0, . . . , b − 1}
and no o, o(cid:4) ∈ St such that o affects o(cid:4)

. The relations ≺i

and o ≺t o(cid:4)

t of Si

t o(cid:4)

.

The following theorem combines the conclusions from

Theorem 2 and Lemma 4 with the above Remark.
Main Theorem. Let P = (cid:7)A, I, O, ϕ(cid:9) be a planning task
and b ∈ N. If (cid:2)P(cid:3)b
lin is satisﬁable, then
there is a plan of length b for P.

∧ (cid:2)P(cid:3)b

∧ (cid:2)P(cid:3)b

base

bmc

Proof sketch. From Theorem 2 we know that there exists a
sequence of sets of operators ¯S = (cid:7)S0, . . . , Sb−1(cid:9) such that
¯q = exec(I, ¯S) is deﬁned and ¯q |= ϕ. In order to be able to
use Lemma 4, we still need a sequence ¯≺ = (cid:7)≺0, . . . , ≺b−1(cid:9)
of corresponding total orderings such that there is no time
point t ∈ {0, . . . , b − 1} and no pair o, o(cid:4) ∈ St of operators
with o affecting o(cid:4)
. The orderings ≺t constructed

and o ≺t o(cid:4)

1We will not formally prove this here. A similar proof can be

found in [Rintanen et al., 2006].

in Remark 1 form such a sequence. Thus, the precondition
of Lemma 4 is satisﬁed and it follows that ¯S together with ¯≺
is a plan for P, and in particular that exec(I, ¯S, ¯≺) is deﬁned
and exec(I, ¯S, ¯≺) |= ϕ.

4 Experiments

4.1 Setting

We compared the cumulative SAT solver running times un-
til the ﬁrst satisﬁable formula for (a.) the parallel encoding
described in Section 3 and (b.) a sequential encoding derived
from the parallel one by replacing the parallelism constraints
by axioms demanding at most one operator per time point.
The evaluation of the formulae corresponding to increasing
plan lengths was performed sequentially. Additionally, we
compared the (parallel) plan lengths of the resulting plans.

We used two types of planning tasks. First, we considered
a simple hand-crafted logistics-like transportation task with
three portables and trucks each. The goal was to ﬁnd an in-
ﬁnite plan assuring that the portables are shipped back and
forth between two locations indeﬁnitely. The goal formula
we used was ϕ =
, where the
pi are portables and the dij are locations.

(cid:11)
i=1 at(pi, dij)

(cid:10)(cid:5)3

j=1 GF

(cid:5)2

The other tasks were adapted from the 2006 International
Planning Competition. We modiﬁed the qualitative prefer-
ences tasks from the rovers domain by turning the soft tem-
poral constraints (preferences) into hard constraints and by
ignoring the metric function. When changing soft into hard
constraints, it turned out that it was necessary to drop some
of them in order to keep the tasks solvable. This was done by
drawing uniformly at random κ constraints for each task and
only retaining the ones drawn.2 The constraints were trans-
lated to LTL−X as explained in [Gerevini and Long, 2005].
Unlike the ﬁrst task above, the rovers tasks lacked explicit
nesting of temporal operators3 and could, if solvable at all, be
solved by plans always yielding ﬁnite executions, apart from
inﬁnite idling in a ﬁnal state. The reachability goals speci-
ﬁed in the problem deﬁnitions were required to hold in such
a ﬁnal state.

The SAT solver we used was SIEGE V. 4 [Ryan, 2004]. The
experiments were run on a PC with 1.8 GHz AMD ATHLON
64 CPU, 768 MB RAM, and a LINUX operating system.

4.2 Results

Table 1 contains results from the logistics task and the modi-
ﬁed rovers tasks for κ = 3.

The second and third columns show the size M of the
largest SCC of the computed disabling graph compared to its
overall number of nodes |O|. The fourth column shows the
parallel plan lengths bp obtained with our parallel encoding,
compared to sequential plan lengths bs in column ﬁve. Where
an interval (m, n] is given, the shortest sequential plan has
length m < bs ≤ n, but we could not precisely determine bs
because of SAT solver running times exceeding our time-out

2For κ = 3, the tasks r-03, r-05 and r-15 remained unsolvable.
3There is an implicit nesting of depth two to three in the tem-
poral operators sometime-after, sometime-before and
at-most-once.

IJCAI-07

1970

Task

logist.
r-01
r-02
r-03
r-04
r-05
r-06
r-07
r-08
r-09
r-10
r-11
r-12
r-13
r-14
r-15
r-16
r-17
r-18
r-19
r-20

|O| M bp
13
18
63
7
53
7
−
76
86
5
−
144
178
13
6
151
328
6
10
362
382
7
10
436
6
366
749
7
10
525
−
751
671
7
12
1227
6
1837
8
2838
3976
8

12
50
53
49
24
138
122
23
60
139
168
29
98
156
34
240
139
270
157
237
190

bs
21
11
9
−
9
−
(26, 37]
(14, 20]
(13, 41]
(22, 39]
(13, 54]
(21, 43]
(14, 23]
(15, 73]
(21, 35]
−
(14, 61]
(22, 135]
(12, 71]
(14, 108]
(13, 130]

rp
0.1
0.1
0.1
−
0.1
−
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
−
0.3
0.4
0.2
1.0
2.5

rs
5.8
0.2
0.1
−
0.1
−
1639.7
1176.7
3578.0
2243.8
> 1 h
2713.1
1881.3
> 1 h
2214.8
−
> 1 h
> 1 h
> 1 h
> 1 h
> 1 h

Rp
7
6
9
−
9
−
11
10
9
12
13
12
10
24
17
−
21
68
155
265
573

Table 1: Results for logistics task and modiﬁed rovers tasks.

of 10 min. The values rp and rs are the cumulative SAT solver
running times up to the ﬁrst satisﬁable formula in seconds in
the parallel and sequential case, respectively. To obtain these
values, we used a time-out of 120 sec for each single satis-
ﬁability test, proceeding to the next formula after time-out.
Rp denotes the overall running time needed for parallel plan-
ning (PDDL parsing, encoding, SAT solving, decoding) in
seconds. The discrepancy between SAT solver and overall
running times arises because we used an unoptimized SML
program to do the encoding. In particular, for the construc-
tion of the disabling graph and the computation of invariants,
a speed-up by an order of magnitude appears to be possible.

5 Conclusion
We combined existing techniques for planning as satisﬁabil-
ity, bounded LTL model-checking, and parallel planning in
order to obtain an efﬁcient method of planning for TEGs. The
use of a disabling-graph-based encoding of constraints ensur-
ing the stuttering equivalence of a parallel and at least one
corresponding sequential plan execution allowed us to extend
parallel planning to planning for TEGs. Our experimental re-
sults show that, like in classical SAT-based planning [Kautz
and Selman, 1996] and in Graphplan [Blum and Furst, 1995],
admitting parallelism can noticeably speed up planning for
TEGs. By using the non-sequential formula evaluation strate-
gies given in [Rintanen et al., 2006, Sections 5.2, 5.3], which
are orthogonal to the contributions of the present paper, plan-
ner running times might be further reducible.

Acknowledgments

This work was partly supported by the DFG within SFB/TR
14 AVACS, by the EC under contract no. FP6-004250-CoSy,
and by the BMBF through the DESIRE project. Jussi Rin-
tanen’s research was supported by National ICT Australia

(NICTA) in connection with the DPOLP project. NICTA is
funded through the Australian Government’s Backing Aus-
tralia’s Ability initiative, in part through the Australian Na-
tional Research Council.

References
[Bacchus and Kabanza, 1996] F. Bacchus and F. Kabanza.
In Proc. 13th

Planning for Temporally Extended Goals.
AAAI’96, pages 1215–1222, 1996.

[Bacchus and Kabanza, 2000] F. Bacchus and F. Kabanza.
Using Temporal Logics to Express Search Control Knowl-
edge for Planning. Artif. Intell., 116(1-2):123–191, 2000.
[Baier and McIlraith, 2006] J. Baier and S. McIlraith. Plan-
ning with First-Order Temporally Extended Goals Using
Heuristic Search. In Proc. 21st AAAI’06, pages 788–795,
2006.

[Biere et al., 1999] A. Biere, A. Cimatti, E. Clarke, and
In

Y. Zhu. Symbolic Model Checking Without BDDs.
Proc. 5th TACAS’99, pages 193–207, 1999.

[Blum and Furst, 1995] A. L. Blum and M. L. Furst. Fast
Planning Through Planning Graph Analysis. In Proc. 14th
IJCAI’95, pages 1636–1642, 1995.

[Cresswell and Coddington, 2004] S. Cresswell and A. M.
Coddington. Compilation of LTL Goal Formulas into
PDDL. In Proc. 16th ECAI’04, pages 985–986, 2004.

[Doherty and Kvarnstr¨om, 2001] P. Doherty and J. Kvarn-
str¨om. TALplanner: A Temporal Logic Based Planner.
AI Magazine, 22(3):95–102, 2001.

[Emerson, 1990] E. A. Emerson.

Temporal and Modal
Logic.
In Handbook of Theoretical Computer Science,
Volume B: Formal Models and Sematics, pages 995–1072.
MIT Press, Cambridge, MA, 1990.

[Gerevini and Long, 2005] A. Gerevini and D. Long. Plan
Constraints and Preferences in PDDL3. Technical Report
RT 2005-08-47, Dept. of Electronics for Automation, Uni-
versity of Brescia, Italy, August 2005.

[Kautz and Selman, 1992] H. Kautz and B. Selman. Plan-
ning as Satisﬁability. In Proc. 10th ECAI’92, pages 359–
363, 1992.

[Kautz and Selman, 1996] H. Kautz and B. Selman. Pushing
the Envelope: Planning, Propositional Logic, and Stochas-
tic Search. In Proc. 13th AAAI, pages 1194–1201, 1996.

[Lamport, 1983] L. Lamport. What Good is Temporal

Logic? In Inform. Processing 83, pages 657–668, 1983.

[Latvala et al., 2004] T. Latvala, A. Biere, K. Heljanko, and
In

T. Junttila. Simple Bounded LTL Model Checking.
Proc. 5th FMCAD’04, pages 186–200, 2004.

[Rintanen et al., 2006] J. Rintanen, K. Heljanko,

and
I. Niemel¨a.
Planning as Satisﬁability: Parallel Plans
and Algorithms for Plan Search. Artif. Intell., 180(12–
13):1031–1080, 2006.

[Ryan, 2004] L. Ryan. Efﬁcient Algorithms for Clause-
Learning SAT Solvers. Master’s thesis, Simon Fraser Uni-
versity, 2004.

IJCAI-07

1971

