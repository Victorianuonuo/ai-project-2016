DELETION-DIRECTED  SEARCH 

IN  RESOLUTION-BASED  PROOF  PROCEDURES 

David  Gelperin* 

Session  3  Theorem  Proving  and 
Logic: 

I 

Department  of  Computer  and  Information  Science** 

The  Ohio  State  University 

Columbus,  Ohio 

Abstract 

The  operation  of  a  deletion-directed  search 
for  resolution-based  proof  procedures  is 

strategy 
discussed.  The  strategy  attempts  to  determine  the 
s a t i s f i a b i l i ty  of  a  set  of  input  clauses  while  at 
the  same  time  minimizing  the  c a r d i n a l i ty  of  the 
set  of  retained  clauses.  E-representation,  a  new 
clause  deletion  rule  which  is  fundamental  to  the 
operation  of  the  search  strategy, 

is  also  described. 

Descriptive 

terms 

Formal  l o g i c,  automatic  theorem  proving, 
resolution,  heuristic  search,  clause  deletion, 
E-representation,  deletion-directed  search,  mate 
tables. 

1. 

Introduction 

This  report  describes  some  new  techniques  which 

can  be  used  by  resolution-based  proof  procedures. 
Since  a ll  subsequent  references  w i ll  be  to  resolution-
based  procedures, 
In  a d d i t i o n, 
results  of  J.  A.  Robinson1  is  assumed. 

f a m i l i a r i ty  with  the  terminology  and 

the  adjective  w i ll  be  understood. 

(possibly  empty)  set  of  clause  deletion  rules, 

In  order  to  provide  a  framework  for  discussion, 
both  a  s t r u c t u r al  and  an  operational  description  of 
a  proof  procedure  w i ll  be  considered.  From  a 
s t r u c t u r al  viewpoint,  &  proof  procedure  can  be 
denoted  by  a  t r i p le  <T,A,z)  where  T  is  a  f i n i t e, 
non-empty  set  of  clause  generation  rules,  A  is  a 
f i n i te 
and  Z  is  a  search  strategy  i . e.  a  procedure  for 
applying  the  rules  in  TUfi.  A  clause  generation  r u l e, 
e.g.  clash  r e s o l u t i o n2,  specifies  the  conditions 
constraining  the  clauses  of  an  admissible  resolution. 
A  clause  deletion  r u l e,  e.g.  subsumption  deletion, 
specifies  the  conditions  under  which  a  clause  may 
be  eliminated  without  a f f e c t i ng  the  u n s a t i s f l a b i l i ty 
of  a  set  of  clauses.  A  search  strategy,  e.g. 
diagonal  search3,  sequences  the  generation  and 
deletion  of  clauses  as  a  proof  procedure  attempts  to 
determine  the  s a t i s f i a b i l i ty  of  an  input  clause  set. 
Within  a  search  strategy,  clause  generation  is 
controlled  by  a  generation  strategy  and  clause 
elimination  by  a  deletion  strategy. 

Turning  to  an  operational  viewpoint,  a  proof 
precedure  can  be  characterized  as  a  mapping  which 
associates  a  f i n i te  set  of  clauses  ( i . e. 
w i th  a  non-empty  sequence  of  clauses  and  pointers, 
called  a  trace.  A  trace  begins  with  some  ordered 
occurrence  of  the  input  set.  This  is  followed  by  an 
ordered  set  of  generated  clauses  and  pointers  to 
deleted  clauses.  A ll  of  the  parents  of  a  generated 
clause  must  precede  it 
trace  and  a ll  deleted 
clauses  must  precede  t h e ir  respective  pointers. 
Associated  with  each  non-input  trace  element  is  a  set 

in  the 

the  input  set) 

* 

Current  address:  Computer  Science  Department, 

Technion,  Haifa, 

I s r a e l. 

**  This  research  was  supported  by  National  Science 

Foundation  Grant  GN-534.1 

47 

of  retained  clauses  which  is  composed  of  a ll  of 
clauses  in  the  corresponding  p a r t i al  trace  which  have 
not  been  deleted  i . e.  which  do  not  have  corresponding 
pointers  in  the  p a r t i al  trace.  A  trace  records  the 
operation  of  a  proof  procedure  and  in  particular  i ts 
search  strategy  on  a  specific  problem. 

the 

The  search  space  associated  with  a  set  of  input 

clauses  and  a  proof  procedure  <T,A,I>  can  be 
represented  by  a  labelled  tree  in  which  the  input  set 
labels  the  r o o t,  retained  sets  label  the  other  nodes 
and  elements  of  TUA  label  the  edges.  A  trace 
represents  the  p a r t i c u l ar  path  selected  by  Â£  in  the 
search  tree.  Note  that  the  elements  of  TUA  are  not 
well-defined  as  operators  on  clause  sets  but  can  be 
viewed  as  operator  schemata. 

Most  of 

in  part, 

the  work  dealing  with  resolution  has 
concentrated  on  the  problem  of  demonstrating  the 
u n s a t i s f l a b i l i ty  of  an  unsatisfiable  set  of  input 
clauses.  The  problem  of  demonstrating  the 
s a t i s f i a b i l i ty  of  a  s a t i s f i a b le  input  set  has  been 
largely  ignored.  This  is  probably  due, 
to 
the  fact  that  no  procedure  can  i d e n t i fy  a ll 
s a t i s f i a b le  sets.  However,  many  solvable  cases  of 
the  decision  problem  have  been  i d e n t i f i e d4  and  the 
relationship  between  these  cases  and  resolution-
based  proof  procedures  has  not  been  explored.  When 
considering  applications  u t i l i z i ng  resolution-based 
proof  procedures,  such  as  question-answering  systems5 
or  robot  planning  systems6,  situations  involving  the 
absence  of  s u f f i c i e nt  information  make  the  recognition 
of  s a t i s f i a b le  sets  an  area  of  i n t e r e s t. 
S a t i s f i a b i l i ty  is  indicated  by  the  generation  of 
empty  set  of  clauses  and  i ts  demonstration  results 
from  the  u t i l i z a t i on  of  clause  deletion  rules.  A 
proof  procedure  must  u t i l i ze  such  rules  in  order  to 
maximize 
While  deletion  rules  are 
in  the  domain  of  unsatisfiable  formulas, 
practice  t h e ir  use  can  help  to  increase  the 
effectiveness  of  a  proof  search.  Such  rules  can  be 
used  to  reduce  the  number  of  candidate  resolutions 
while  at  the  same  time  preserving  completeness. 
Careful  consideration  is  necessary,  however,  since 
their  indiscriminate  use  may  not  be  cost-effective 
and  can  result  in  a  loss  of  completeness  . 

theoretically  unnecessary 
in  actual 

the  domain  of  formulas 

it  can  c l a s s i f y. 

that 

the 

In  the  next  section,  a  new  clause  deletion  rule 
is  introduced  and  an  example  in  section  3  shows  that 
t h is  rule  allows  a  demonstration  of  s a t i s f i a b i l i ty 
not  previously  possible.  The  main  topic  of  section  3 
is  the  operation  of  a  deletion-directed  search  strategy 
which  is  b u i lt  around 
attempts  to  minimize 

the  new  deletion  rule  and 
the  c a r d i n a l i ty  of  retained  sets. 

2.  E-representation 

In  order  to  motivate  the  formal  presentation 

the  unsatisf iable  set 

below,  consider 
S  -  {AB,  AB,  AC,  BC,  C}.  Notice  that  each  binary 
resolution  which  involves  the  l i t e r al  occurrence  A 
in  AB  produces  a  clause  which  is  already  in  S.  This 
observation,  viewed  as  a  generalization  of  the  notion 

The  concept  of  an  E-represented  clause  is 

u t i l i z ed  in  the  E-representation  TheoremB  which  states: 
If  S  is  a  set  of  clauses  and  C  is  a  clause  which  is 
E-represented  in  S, 
then  S  is  s a t i s f i a b le  i ff  S-{C} 
is  s a t i s f i a b l e. 
l i t e r al  in  a  clause  is  exhausted, 
clause  may  be  deleted  without  affecting 
u n s a t i e f l a b i l i t y. 

that  if  any 
then  the  whole 

theorem  implies 

This 

In  the  next  section,  a  search  strategy  is 

described  which  is  b u i lt  around  the  notion  of 
exhaustion.  The  strategy  operates  by  performing  those 
resolutions  which  cause  some  nearly  exhausted  l i t e r al 
occurrence  to  become  exhausted, 
generates  E-represented  clauses. 

the  strategy 

i . e. 

3.  Deletion-Directed  Search 

Consider  the  following  unsatisfiable  set  of 

clauses  which  resulted  from  an  attempt  to  prove  the 
proposition: 
If  a  diagonal  of  a  trapezoid  bisects  a 
lower  base  angle, 
inscribed 
t r i a n g le 

then  the  corresponding  upper 
is 

Isosceles. 

i . e. 

the  constraint 

that  only  one  l i t e r al 

Let  simple  binary  resolution  denote  a  generation 
rule  with 
occurrence  from  each  parent  can  be  selected  for  a 
u n i f i c a t i on  set, 
key  t r i p l es  are  unit  sets. 
clause  C  be  any  clause  C6  where  O  is  an  mgu  of  exactly 
two  l i t e r a ls  In  C.  A  proof  procedure  u t i l i z i ng  basic 
f a c t o r i n g,  simple  binary  r e s o l u t i o n,  E-representation 
d e l e t i o n,  and  deletion-directed  search  generated  the 
following  modified 

Let  a  basic  factor  of  a 

two  components  of  a ll 

the  f i r st 

trace: 

9.  Padbc 
Delete  1  and  A  by  E-rep. 
10.  Eabdadb 
Delete  3  and  6  by  E-rep. 
1 1.  Eadbdbc 
Delete  5  and  9  by  E-rep. 
12.  EabdxyzEadbxyz 
Delete  10  by  E-rep. 

At 

this  point, 

the  set  of  retained  clauses  contains 

The  p r i n c i p le  which  guides  deletion-directed 

search  can  be  stated  as  f o l l o w s:  Given  a  set  of 
clauses  to  which  no  deletion  rule  can  be  applied, 
attempt  to  derive  another  set  of  clauses  by  adding 
as  few  resolvents  as  possible  such  that  at  least  one 
of  the  o r i g i n al  clauses  can  be  deleted  from  the  new 
set. 
assumes  that 
basic  factoring  and  simple  binary  resolution.  Given 
an  input  set,  search  is  i n i t i a t ed  by  building  a  data 

the  associated  generation  rules  are 

The  following  description  of 

the  search  strategy 

48 

structure  called  a  mate  table  (cf.  classification 
trees9).  Two  l i t e r a ls  L1  and  L2  are  mates  i ff  there 
exist  substitutions  01  and  02  such  that  L101 
L202 are complementary.  A  mate  table  is  constructed 
by  attempting  to  resolve  each  l i t e r al  occurrence  L 
appearing  in  an  input  clause  C  with  every  other 
l i t e r al  occurrence  in  the  input  set.  The  result  is 
a  set  of  l i s ts  such  that  every  l i t e r al  occurrence  has 
an  associated,  l i s t.  Each  l i st  has  two  types  of 
entries  depending  upon  whether  the  l i t e r al  occurrence 
resolving  with  L  i.e.  L's  mate,  is  in  C  or  outside 
of  C.  An  Outside  entry  is  created  when  a ll  of  the 
following  conditions  hold: 
some  clause  D = C  (2)  Neither  the  resolvent  of  C 
and  D  nor  the  associated  instance  of  D  is  a  tautology 
(3)  The  resolvent  is  not  subsumed  by  D.  The  entry 
identifies  a  mate  l i t e r al  in  D  and  contains  the 
corresponding" resolvent.  An  inside  entry,  on  the 
other  hand,  just  identifies  one  of  L's  mate  l i t e r a ls 
within  C  but  doesn't  contain  the  corresponding 
resolvent. 

(1)  C  resolves  on  L  with 

The  pointer  portion  of  the  i n i t i al  mate  table  for 

the  last  example  is  represented  below. 

At  this  point  no  double  eliminations  are  predictable, 
but  an  immediate  single  elimination  results  from 
adding  the  resolvent  of  clauses  7  and  10  to  the 
retained  set  and  leads  to 

The  table  now  indicates  that  a  minimum  of  three 
resolvents  must  be  added  to  the  retained  set  before 
a  deletion  by  E-rep  is  possible.  The  procedure 
arbitrarily  selects  the  f i r st  l i t e r al  in  clause  12 
and  adds  the  shortest  resolvent  corresponding  to  a 
mate  i.e.  the  resolvent  of  clause  2.  The  immediate 
testing  of  a ll  newly  added  unit  clauses  (the  end  test) 
yields  the  null  clause. 

In  the  realm  of  satisfiable  sets,  consider  the 

following  problem  which  results  when 
AT(x,under-bananas,sol)  is  omitted  from  a  formulation 
of  the  monkey  and  bananas  problem  due  to  C.  Green10. 

The  proof  procedure  examines  the  table  looking  for 
Indications  of  a  double  parent  elimination 
possibility  and  finds  that  the  f i r st  l i t e r al  in 
clause  4  is  the  only  candidate  for  resolution  with 
the  f i r st  l i t e r al  in  clause  1  and  vice  versa.  By 
adding  the  corresponding  resolvent  which  is  already 
stored  in  the  table  to  the  retained  set,  a  new  set 
can  be  created  in  which  both  parent  clauses  contain 
an  exhausted  l i t e r a l.  Since  a  double  elimination  is 
the  best  result  that  can  be  planned,  the 
corresponding  resolvent  is  added.  After  deletion, 
the  mate  table  is  updated  and  becomes 

A  proof  procedure  using  basic  factoring,  simple 

binary  resolution,  E~representation  deletion, 
subsumption  deletion,  and  deletion-directed  search 
produced  the  following  modified  trace.  All  of  the 
clauses  generated  while  processing  the  mate  table 
do  not  appear  in  the  trace. 

Two  more  double  eliminations  are  detected  and  the 
corresponding  resolvents  are  added  to  the  retained 
set.  After  the  addition  of  clause  11,  the  table 
becomes 

49 

the  input  set  has  been 

The  s a t i s f i a b i l i ty  of 
demonstrated  since  the  retained  set  is  empty.  The 
notation  following  clause  18  means  that  the  deletion 
of  clause  9  causes  a  l i t e r al  in  clause  10  to  be 
exhausted  and  therefore  permits  the  deletion  of 
clause. 
permits  the  deletion  of  clause  2,  etc. 

that 
the  deletion  of  clause  10 

In  the  same  way, 

Although  not  i l l u s t r a t ed  by  either  of  the  examples 

above,  deletion-directed  search  must  be  constrained 
by  a  l e v el  bound.  As  in  the  case  of  the  u n it 
preference  strategy11  ,  a  level  bound  must  be  imposed 
in  order  to  avoid  an  i n f i n i te  d e p t h - f i r st  search. 

Now  consider  whether  deletion-directed  search  can 

always  f i nd  a  l i t e r al  occurrence  to  exhaust.  Can 
resolvents  always  be  added  to  a  set  of  clauses  so 
that  some  o r i g i n al  clause  w i ll  be  E-represented? 
While  the  answer  is  "no",  e.g.  {Pxpfx,  PxPgx},  a ll  of 
the  counter-examples  contain  neither  an  a ll  p o s i t i ve 
nor  an  a ll  negative  clause  and  are  therefore  easily 
recognized  as  s a t i s f i a b le  sets.  For  a ll  other  sets, 
which  includes  a ll  unsatisfiable  sets,  some 
i d e n t i f i a b le  l i t e r al  occurrence  is  exhaustible  and  the 
required  resolvents  are  i d e n t i f i a b le  and  of  f i n i te 
number.  Therefore, 
deletion-directed  search  w i ll  always  be  able  to  f i nd 
an  exhaustible  l i t e r al  occurrence. 

for  a ll  u n s a t i s f i a b le  sets, 

The 

then  a 

The  preceding  examples  outlined  the  operation 
of  a  deletion-directed  strategy,  but  they  did  not 
reveal  why  and  when  it  works  e f f e c t i v e l y. 
following  observations  give  some  insight  i n to  these 
matters.  Consider  an  a r b i t r a ry  unsatisfiable  set  S 
of  clauses. 
If  some  l i t e r al  occurrence  L  in  a 
clause  C  has  only  one  mate,  then  a  resolution 
involving  L  and  i ts  mate  (or  a  descendant  of  that 
mate)  must  occur  in  every  r e f u t a t i on  of  S  which 
contains  C. 
If  every  r e f u t a t i on  of  S  contains  C 
(e.g.  C  is  the  negation  of  the  theorem) 
resolution  on  L  is  essential  to  a  r e f u t a t i on  of  S. 
In  a  minimal  unsatisfiable  set,  any  resolution  which 
allows  double  parent  elimination  by  E-rep  is  essential 
and  the  eliminations  preserve  minimality.  Any 
resolution  which  allows  single  parent  elimination 
by  E-rep 
in  a  minimal  unsatisfiable  set  is  essential 
but  the  elimination  may  not  preserve  minimality.  A 
sequence  of  resolutions  s t a r t i ng  from  a  minimal 
unsatisfiable  set  and  culminating  in  a  deletion  by 
least  one  essential  resolution. 
E-rep  contains  at 
These  observations  suggest 
that  deletion-directed 
search  w i ll  be  most  e f f e c t i ve  for  a  minimal 
unsatisfiable  set  containing  many  single-mate 
l i t e r a ls  â  as  in  the  f i r st  example. 
effectiveness  w i ll  diminish,  however,  as  the  set  in 
which  it  operates  becomes 
increasingly  non-minimal 
and  as  the  population  of  l i t e r a ls  w i th  only  a  few 
mates  decreases. 

I ts 

If  necessary, 

The  e f f e ct  of  the  absence  of  l i t e r a ls 

the  e f f e ct  of  non-minimality  can  be 
substantially  mitigated  by  using  a  clause  generation 
rule  which  is  r e s t r i c t ed  by  set  of  support 
constraints12. 
having  only  a  few  mates  is  much  more  serious  since  the 
mate  structure  is 
information.  When  the  mate  structure  doesn't 
provide  e f f e c t i ve  guidance,  not  only 
directed  search  b l i n d,  but  it  also  f a i ls 
e f f e c t i v e ly  r e s t r i ct 
clauses.  The  appropriate  action  in  such  a  s i t u a t i on 

the  dominant  source  of  guidance 

the  set  of  retained 

the  growth  of 

is  d e l e t i o n-

to 

is  not  clear  but 
probably  the  best  choice. 

the  use  of  some  other  strategy  is 

The  reader  who  is  f a m i l i ar  w i th  the  Davis-Putnam 
procedure  f or  t e s t i ng  the  consistency  of  propositional 
calculus  expressions13  may  observe  that  the  notion  of 
deletion-directed  search  can  be  viewed  as  a 
generalization  to 
the  predicate  calculus  of 
rule  for  eliminating  atomic  formulas.  Other  approaches 
to  a  general  notion  of  deletion-directed  search  can  be 
found  in  reports  by  B.  Meltzer14  and  R.  Reiter15. 

their 

References 

1.  Robinson,  J.  A.  A  machine-oriented  logic  based  on 
l ( J a n.  1965), 

J.ACM  12, 

the  resolution  p r i n c i p l e. 
23-41. 

2.  Robinson,  J.  A.  A  review  of  automatic  theorem 
proving.  Proc.  of  Symposia  in  Appl.  Math.  19, 
1967,  1-18. 

3.  Kowalski,  R.  Search  strategies  for  theorem-

in  B.  Meltzer  and  D.  Michie  (eds.), 

proving, 
Machine  Intelligence  5,  American  Elsevier  Pub.  Co., 
New  York,  1970,  181-200. 

4.  Ackermann,  W.  Solvable  Cases  of  the  Decision 

Problem,  North-Holland  Pub.  Co.,  Amsterdam,  1954. 

5.  Minker,  J .,  J.  R.  McSkimin  and  D.  H.  Fishman 

MRPPS-An  i n t e r a c t i ve  r e f u t a t i on  proof  procedure 
system  for  question-answering.  Computer  Science 
Center  TR  228,  Univ.  of  Maryland,  1973. 

6.  Fikes,  R.  and  N.  Nilsson  S t r i p s:  A  new  approach 
theorem-proving  to  problem 

I n t.  Joint  Conf.  on  A . I ., 

to  the  application  of 
solving.  Proc, 
London,  1971. 

7.  Kowalski,  R.  Studies  in  the  completeness  and 
theorem  proving  by  r e s o l u t i o n. 

efficiency  of 
Ph.D.  Thesis,  Univ.  of  Edinburgh,  1970. 

8.  Gelperin,  D.  Clause  deletion  in  resolution 

theorem  proving.  Ph.D.  Thesis,  Ohio  State  Univ., 
1973. 

9.  Kowalski,  R.  and  D.  Kuehner  Linear  resolution  w i th 

selection  f u n c t i o n.  A r t i f i c i al  Intellignece  2, 
3-4  (1971),  227-260. 

10.  Green,  C.  The  application  of  theorem  proving  to 

question-answering  systems.  Ph.D.  Thesis, 
Stanford  Univ.,  1969. 

11.  Wos,  L.,  D.  Carson  and  G.  Robinson  The  unit 

preference  strategy  in  theorem  proving.  Proc. 
AFIPS  1964  FJCC  26,  1964,  616-621. 

12.  Wos,  L.,  G.  Robinson  and  D.  Carson  Efficiency 

and  completeness  of 
theorem  proving. 

in 
J.ACM  12,  4(0ct.  1965),  536-541. 
13.  Davis,  M.  and  H.  Putnam  A  computing  procedure  for 

the  set  of  support  strategy 

J.ACM  7,  3  (July  1960), 

q u a n t i f i c a t i on  theory. 
201-215. 

14.  Meltzer,  B.  Some  notes  on  resolution  s t r a t e g i e s, 

in  D.  Michie  ( e d . ),  Machine  I n t e l l i g e n ce  3, 
American  Elsevier  Pub.  Co.,  New  York,  1968, 
71-75. 

15.  Reiter,  R.  The  predicate  elimination  strategy  in 

theorem  proving.  Proc.  2nd  ACM  Symposium  on 
Theory  of  Computing,  1970,  180-183. 

50 

