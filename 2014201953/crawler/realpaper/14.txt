Pushing the EL Envelope

Franz Baader and Sebastian Brandt and Carsten Lutz

Intitute for Theoretical Computer Science

TU Dresden, Germany

lastname@tcs.inf.tu-dresden.de

Abstract

Recently, it has been shown that the small descrip-
tion logic (DL) EL, which allows for conjunction
and existential restrictions, has better algorithmic
properties than its counterpart FL0, which allows
for conjunction and value restrictions. Whereas the
subsumption problem in FL0 becomes already in-
tractable in the presence of acyclic TBoxes, it re-
mains tractable in EL even with general concept
inclusion axioms (GCIs). On the one hand, we ex-
tend the positive result for EL by identifying a set
of expressive means that can be added to EL with-
out sacriﬁcing tractability. On the other hand, we
show that basically all other additions of typical
DL constructors to EL with GCIs make subsump-
tion intractable, and in most cases even EXPTIME-
complete. In addition, we show that subsumption
in FL0 with GCIs is EXPTIME-complete.

Introduction

1
The quest for tractable (i.e., polynomial-time decidable) de-
scription logics (DLs), which started in the 1980s after the
ﬁrst intractability results for DLs were shown [Brachman and
Levesque, 1984; Nebel, 1988], was until recently restricted
to DLs extending the basic language FL0, which allows for
conjunction ((cid:117)) and value restrictions (∀r.C). The main rea-
son was that, when clarifying the logical status of property
arcs in semantic networks and slots in frames, the decision
was taken that arcs/slots should be read as value restrictions
rather than existential restrictions (∃r.C).

For subsumption between concept descriptions, the trac-
tability barrier was investigated in detail in the early 1990s
[Donini et al., 1991]. However, as soon as terminologies
(TBoxes) were taken into consideration, tractability turned
out to be unattainable: even with the simplest form of acyclic
TBoxes, subsumption in FL0 (and thus in all languages ex-
tending it) is coNP-hard [Nebel, 1990]. Subsumption in FL0
is PSPACE-complete w.r.t. cyclic TBoxes [Baader, 1996;
Kazakov and de Nivelle, 2003], and we show in this pa-
per that it becomes even EXPTIME-complete in the presence
of general concept inclusion axioms (GCIs), which are sup-
ported by all modern DL systems.

For these reasons, and also because of the need for expres-
sive DLs supporting GCIs in applications, from the mid 1990s
on the DL community has mainly given up on the quest of
ﬁnding tractable DLs. Instead, it investigated more and more
expressive DLs, for which reasoning is worst-case intractable.
The goal was then to ﬁnd practical subsumption algorithms,
i.e., algorithms that are easy to implement and optimize,
and which—though worst-case exponential or even worse—
behave well in practice (see, e.g., [Horrocks et al., 2000]).
This line of research has resulted in the availability of highly
optimized DL systems for expressive DLs [Horrocks, 1998;
Haarslev and M¨oller, 2001], and successful applications:
most notably the recommendation by the W3C of the DL-
based language OWL [Horrocks et al., 2003] as the ontology
language for the Semantic Web.

Recently, the choice of value restrictions as a sine qua non
of DLs has been reconsidered. On the one hand, it was shown
that the DL EL, which allows for conjunction and existential
restrictions, has better algorithmic properties than FL0. Sub-
sumption in EL stays tractable w.r.t. both acyclic and cyclic
TBoxes [Baader, 2003b], and even in the presence of GCIs
[Brandt, 2004]. On the other hand, there are applications
where value restrictions are not needed, and where the ex-
pressive power of EL or small extensions thereof appear to
be sufﬁcient. In fact, SNOMED, the Systematized Nomen-
clature of Medicine, employs EL [Spackman, 2000] with an
acyclic TBox. Large parts of the Galen medical knowledge
base can also be expressed in EL with GCIs and transitive
roles [Rector and Horrocks, 1997]. Finally, the Gene Ontol-
ogy [Consortium, 2000] can be seen as an acyclic EL TBox
with one transitive role.
Motivated by the positive complexity results cited above
and the use of extensions of EL in applications, we start with
the DL EL with GCIs, and investigate the effect on the com-
plexity of the subsumption problem that is caused by the ad-
dition of standard DL constructors available in ontology lan-
guages like OWL. We prove that the subsumption problem
remains tractable when adding the bottom concept (and thus
disjointness statements), nominals (i.e., singleton concepts), a
restricted form of concrete domains (e.g., references to num-
bers and strings), and a restricted form1 of role-value maps
1Adding arbitrary role-value maps to EL is known to cause un-

decidability [Baader, 2003a].

Syntax

(cid:62)
⊥
{a}
C (cid:117) D
∃r.C

Semantics

I
∆
∅
{a
I}
I ∩ D
I
C
{x ∈∆
I | ∃y ∈ ∆
I
(x, y) ∈ r
I ∧ y ∈ C
I}
I | ∃y1, . . . , yk ∈ ∆
{x ∈∆
Dj :
i (x) = yi for 1 ≤ i ≤ k ∧
I
f
(y1, . . . , yk) ∈ p
Dj}

:

Name
top
bottom
nominal
conjunction
existential
restriction

concrete
domain

GCI
RI

p(f1, . . . , fk)
for p ∈ PDj
C (cid:118) D

I ⊆ D
I
C
1 ◦ ··· ◦ r
r1 ◦ ··· ◦ rk (cid:118) r r
I
Table 1: Syntax and semantics of EL++.

⊆ r

I
k

I

(which can express transitivity and the right-identity rule re-
quired in medical applications [Spackman, 2000]). We then
prove that, basically, all other additions of standard DL con-
structors lead to intractability of the subsumption problem,
and in most cases even to EXPTIME-hardness. Proofs and
further technical details can by found in the accompanying
technical report [Baader et al., 2005].
2 The Description Logic EL++

In DLs, concept descriptions are inductively deﬁned with the
help of a set of constructors, starting with a set NC of concept
names, a set NR of role names, and (possibly) a set NI of
individual names. In this section, we introduce the extension
EL++ of EL, whose concept descriptions are formed using
the constructors shown in the upper part of Table 1. There
and in general, we use a and b to denote individual names,
r and s to denote role names, and C, D to denote concept
descriptions.

a set and PD

The concrete domain constructor provides an interface to
so-called concrete domains, which permits reference to, e.g.,
strings and integers. Formally, a concrete domain D is a pair
,PD) with ∆D
(∆D
a set of predicate names.
Each p ∈ P is associated with an arity n > 0 and an exten-
D ⊆ (∆D)n. To provide a link between the DL and
sion p
the concrete domain, we introduce a set of feature names NF.
In Table 1, p denotes a predicate of some concrete domain
D and f1, . . . , fk are feature names. The DL EL++ may
be equipped with a number of concrete domains D1, . . . ,Dn
such that ∆Di ∩ ∆Dj = ∅ for 1 ≤ i < j ≤ n. If we want to
stress the use of particular concrete domains D1, . . . ,Dn, we
write EL++(D1, . . . ,Dn) instead of EL++.
The semantics of EL++(D1, . . . ,Dn)-concept descrip-
tions is deﬁned in terms of an interpretation I = (∆I
,·I).
The domain ∆I
is a non-empty set of individuals and the in-
terpretation function ·I
maps each concept name A ∈ NC to
, each role name r ∈ NR to a binary rela-
of ∆I
I
a subset A
, each individual name a ∈ NI to an individual
on ∆I
I
tion r
, and each feature name f ∈ NF to a partial function
I ∈ ∆I
to(cid:83)1≤i≤n ∆Di. The extension of ·I
a
I
from ∆I
to arbitrary
f
concept descriptions is inductively deﬁned as shown in the
third column of Table 1.
An EL++ constraint box (CBox) is a ﬁnite set of general
concept inclusions (GCIs) and role inclusions (RIs), whose

I

for all models I of C.

syntax can be found in the lower part of Table 1. Note that a
ﬁnite set of GCIs would commonly be called a general TBox.
We use the term CBox due to the presence of RIs. An inter-
pretation I is a model of a CBox C if, for each GCI and RI
in C, the conditions given in the third column of Table 1 are
satisﬁed. In the deﬁnition of the semantics of RIs, the symbol
“◦” denotes composition of binary relations.
The main inference problem considered in this paper is
subsumption. Given two EL++-concept descriptions C, D
we say that C is subsumed by D w.r.t. the CBox C (C (cid:118)C D)
I ⊆ D
iff C
Some remarks regarding the expressivity of EL++ are in
order. First, though we restrict the attention to subsump-
tion, EL++ is expressive enough to reduce all other standard
reasoning tasks (concept satisﬁability, ABox consistency, in-
stance problem) to the subsumption problem and vice versa
[Baader et al., 2005]. Second, our RIs generalize three means
of expressivity important in ontology applications: role hier-
archies r (cid:118) s; transitive roles, which can be expressed by
writing r ◦ r (cid:118) r; and so-called right-identity rules r ◦ s (cid:118)
s, which are important in medical applications [Spackman,
2000; Horrocks and Sattler, 2003]. Third, the bottom concept
in combination with GCIs can be used to express disjointness
of complex concept descriptions: C (cid:117) D (cid:118) ⊥ says that C, D
are disjoint. Finally, the unique name assumption for individ-
ual names can be enforced by writing {a} (cid:117) {b} (cid:118) ⊥ for all
relevant individual names a and b.
3 Tractability of EL++
Before we can describe a polynomial-time subsumption al-
gorithm for EL++, we must introduce an appropriate normal
form for CBoxes. Given a CBox C, we use BCC to denote
the smallest set of concept descriptions that contains the top
concept (cid:62), all concept names used in C, and all concept de-
scriptions of the form {a} or p(f1, . . . , fk) appearing in C.
Then, C is in normal form if
1. all GCIs have one of the following forms, where

C1, C2 ∈ BCC and D ∈ BCC ∪ {⊥}:

C1 (cid:118) D,
C1 (cid:117) C2 (cid:118) D,

C1 (cid:118) ∃r.C2,

∃r.C1 (cid:118) D.

2. all role inclusions are of the form r (cid:118) s or r1 ◦ r2 (cid:118) s.
By introducing new concept and role names, any CBox C can
be turned into a normalized CBox C(cid:48)
that is a conservative
extension of C, i.e., every model of C(cid:48)
is also a model of C,
and every model of C can be extended to a model of C(cid:48)
by
appropriately choosing the interpretations of the additional
concept and role names. In [Baader et al., 2005] it shown
that this transformation can actually be done in linear time,
yielding a normalized CBox C(cid:48)
whose size is linear in the
size of C.
Lemma 1 Subsumption w.r.t. CBoxes in EL++ can be re-
duced in linear time to subsumption w.r.t. normalized CBoxes
in EL++.
In the following, all CBoxes are assumed to be normalized.
When developing the subsumption algorithm for normalized
EL++ CBoxes, we can restrict our attention to subsumption

CR1 If C

(cid:48) ∈ S(C), C

(cid:48) (cid:118) D ∈ C, and D (cid:54)∈ S(C)

then S(C) := S(C) ∪ {D}

CR2 If C1, C2 ∈ S(C), C1 (cid:117) C2 (cid:118) D ∈ C, and D (cid:54)∈ S(C)

then S(C) := S(C) ∪ {D}

CR3 If C

(cid:48) ∈ S(C), C

(cid:48) (cid:118) ∃r.D ∈ C, and (C, D) /∈ R(r)

then R(r) := R(r) ∪ {(C, D)}

CR4 If (C, D) ∈ R(r), D

(cid:48) ∈ S(D), ∃r.D

(cid:48) (cid:118) E ∈ C,

and E /∈ S(C)
then S(C) := S(C) ∪ {E}

CR5 If (C, D) ∈ R(r), ⊥ ∈ S(D), and ⊥ /∈ S(C),

then S(C) := S(C) ∪ {⊥}

CR6 If {a} ∈ S(C) ∩ S(D), C (cid:32)R D, and S(D) (cid:54)⊆ S(C)

then S(C) := S(C) ∪ S(D)

CR7 If conj(S(C)) is unsatisﬁable in Dj and ⊥ /∈ S(C),

then S(C) := S(C) ∪ {⊥}

CR8 If conj(S(C)) implies p(f1, . . . , fk) ∈ BCC in Dj

and p(f1, . . . , fk) /∈ S(C),
then S(C) := S(C) ∪ {p(f1, . . . , fk)}

(cid:48)
CR9 If p(f1, . . . , fk), p

k(cid:48) ) ∈ S(C), p ∈ PDj ,
(cid:48)
(cid:48)
1, . . . , f
(cid:48) ∈ PD(cid:96), j (cid:54)= (cid:96), fs = f
t for some s, t, and ⊥ /∈ S(C),
(cid:48)
p
then S(C) := S(C) ∪ {⊥}

(f

CR10 If (C, D) ∈ R(r), r (cid:118) s ∈ C, and (C, D) /∈ R(s)

then R(s) := R(s) ∪ {(C, D)}

CR11 If (C, D) ∈ R(r1), (D, E) ∈ R(r2), r1 ◦ r2 (cid:118) r3 ∈ C,

and (C, E) /∈ R(r3)
then R(r3) := Ri(r3) ∪ {(C, E)}

Table 2: Completion Rules

between concept names. In fact, C (cid:118)C D iff A (cid:118)C(cid:48) B, where
C(cid:48) = C∪{A (cid:118) C, D (cid:118) B} with A and B new concept names.
Our subsumption algorithm not only computes subsumption
between two given concept names w.r.t. the normalized input
CBox C; it rather classiﬁes C, i.e., it simultaneously computes
the subsumption relationships between all pairs of concept
names occurring in C.
Now, let C be a CBox in normal form that is to be classiﬁed.
We use RC to denote the set of all role names used in C. The
algorithm computes
• a mapping S from BCC to a subset of BCC∪{(cid:62),⊥}, and
• a mapping R from RC to a binary relation on BCC.

The intuition is that these mappings make implicit subsump-
tion relationships explicit in the following sense:
(I1) D ∈ S(C) implies that C (cid:118)C D,
(I2) (C, D) ∈ R(r) implies that C (cid:118)C ∃r.D.
In the algorithm, these mappings are initialized as follows:

• S(C) := {C,(cid:62)} for each C ∈ BCC,
• R(r) := ∅ for each r ∈ RC.

Then the sets S(C) and R(r) are extended by applying the
completion rules shown in Table 2 until no more rule applies.
Some of the rules use abbreviations that still need to be
introduced. First, CR6 uses the relation (cid:32)R ⊆ BCC ×

BCC, which is deﬁned as follows: C (cid:32)R D iff there are
C1, . . . , Ck ∈ BCC such that
• C1 = C or C1 = {b} for some individual name b,
• (Cj, Cj+1) ∈ R(rj) for some rj ∈ RC (1 ≤ j < k),
• Ck = D.
Second, rules CR7 and CR8 use the notion conj(Si(C)), and
satisﬁability and implication in a concrete domain. If p is a
predicate of the concrete domain Dj, then the EL++-concept
description p(f1, . . . , fn) can be viewed as an atomic ﬁrst-
order formula with variables f1, . . . , fn. Thus, it makes sense
to consider Boolean combinations of such atomic formulae,
and to talk about whether such a formula is satisﬁable in (the
ﬁrst-order interpretation) Dj, or whether in Dj one such for-
mula implies another one. For a set Γ of EL++(D1, . . . ,Dn)-
concept descriptions and 1 ≤ j ≤ n, we deﬁne

(cid:94)

conj(Γ) :=

p(f1,...,fk)∈Γ with p∈PD

p(f1, . . . , fk).

j

For the rules CR7 and CR8 to be executable in polynomial
time, satisﬁability and implication in the concrete domains
D1, . . . ,Dn must be decidable in polynominal time. How-
ever, for our algorithm to be complete, we must impose an
additional condition on the concrete domains. The concrete
domain D is p-admissible iff
1. satisﬁability and implication in D are decidable in poly-
nominal time;
2. D is convex:

if a conjunction of atoms of the form
p(f1, . . . , fk) implies a disjunction of such atoms, then
it also implies one of its disjuncts.

Let us now show that the rules of Table 2 indeed yield a poly-
nomial algorithm for subsumption in EL++(D1, . . . ,Dn)
the concrete domains D1, . . . ,Dn are p-
provided that
admissible.

The following lemma is an easy consequence of the facts
that (i) each rule application adds an element to one of the
sets S(C) ⊆ BCC ∪ {(cid:62),⊥} or R(C, D) ⊆ BCC × BCC,
(ii) the cardinality of BCC is polynomial in the size of C, and
(iii) the relation (cid:32)R can be computed using (polytime) graph
reachability, and (iv) the concrete domains are p-admissible.
Lemma 2 For a normalized CBox C, the rules of Table 2 can
only be applied a polynomial number of times, and each rule
application is polynomial.
The next lemma shows how all subsumption relationships
between concept names occurring in C can be determined
once the completion algorithm has terminated.
Lemma 3 Let S be the mapping obtained after the applica-
tion of the rules of Table 2 for the normalized CBox C has
terminated, and let A, B be concept names occurring in C.
Then A (cid:118)C B iff one of the following two conditions holds:

• S(A) ∩ {B,⊥} (cid:54)= ∅,
• there is an {a} ∈ BCC such that ⊥ ∈ S({a}).

The if-direction of this lemma (soundness) immediately fol-
lows from the fact that (I1) and (I2) are satisﬁed for the initial

deﬁnition of S, R, and that application of the rules preserves
(I1) and (I2). This is trivial for most of the rules. We consider
CR6 in more detail. If {a} ∈ S(C) ∩ S(D), then C, D (cid:118)C
{a}. Now, C (cid:32)R D implies that C (cid:118)C ∃r1.···∃rk−1.D
or {b} (cid:118)C ∃r1.···∃rk−1.D for some individual name b. In
the second case, this implies that D cannot be empty in any
model of C, and in the ﬁrst case it implies that D is non-empty
in any model of C for which C is non-empty. Together with
C, D (cid:118)C {a}, this implies that C (cid:118)C D, which shows that
the rule CR6 is sound since it preserves (I1).

. Basically, the domain ∆I

To show the only-if-direction of the lemma, we assume that
the two conditions do not hold, and then use the computed
mappings S, R to construct a model I of C such that A
I (cid:54)⊆
I
of this model consists of all
B
elements C ∈ BCC such that A (cid:32)R C. However, we identify
elements C, D of BCC if there is an individual name a such
that {a} ∈ S(C) ∩ S(D). The interpretation of concept and
role names is determined by S, R: if D ∈ BCC is a concept
I = {C ∈ BCC | D ∈ S(C)}, and if r is a
name, then D
role name, then (C, D) ∈ r
iff (C, D) ∈ R(r). Finally,
the interpretation of the feature names is determined by the
the assignments satisfying the conjunctions conj(S(C)) (see
[Baader et al., 2005] for a more detailed description of this
construction, and a proof that it indeed yields a countermodel
to the subsumption relationship A (cid:118)C B).
To sum up, we have shown the following tractability result:
Theorem 4 Let D1, . . . ,Dn be p-admissible concrete do-
Then subsumption in EL++(D1, . . . ,Dn) w.r.t.
mains.
CBoxes can be decided in polynomial time.

I

to

of

the

order

obtain

concrete DLs

P-admissibile and non-admissible concrete domains
In
form
EL++(D1, . . . ,Dn) for n > 0 to which Theorem 4 ap-
In
plies, we need concrete domains that are p-admissible.
the following, we introduce two concrete domains that are
p-admissible, and show that small extensions of them are no
longer p-admissible.
The concrete domain Q = (Q,P Q) has as its domain the set
Q of rational numbers, and its set of predicates P Q consists
of the following predicates:
• a unary predicate (cid:62)Q with ((cid:62)Q)Q = Q;
• unary predicates =q and >q for each q ∈ Q;
• a binary predicate =;
• a binary predicate +q, for each q ∈ Q, with
(cid:48)(cid:48)}.
(+q)Q = {(q
(cid:48) + q = q
,P S), where Σ is
The concrete domain S is deﬁned as (Σ∗
the ISO 8859-1 (Latin-1) character set and P S consistes of
the following predicates:
• a unary predicate (cid:62)S with ((cid:62)S)S = Σ∗
;
• a unary predicate =w, for each w ∈ Σ∗
;
• a binary predicate =;
• a binary predicate concw, for each w ∈ Σ∗
(cid:48)(cid:48)) | w
concQ

(cid:48)(cid:48)) ∈ Q2 | q

(cid:48)(cid:48) = w

w = {(w

w}.

, with

, w

(cid:48)

, q

(cid:48)

(cid:48)

Polynomiality of reasoning in Q can be shown by a reduction
to linear programming, and polynomiality of reasoning in S

Syntax Semantics
I \ C
¬C ∆
I
I ∪ D
C (cid:116) D C
I
∀r.C {x | ∀y : (x, y) ∈ r

Name
negation
disjunction
value restriction
at-least restriction ((cid:62) n r) {x | #{y ∈ ∆
at-most restriction ((cid:54) n r) {x | #{y ∈ ∆
inverse roles

.C {x | ∃y : (y, x) ∈ r

∃r

−

I → y ∈ C

I}

I | (x, y) ∈ r
I | (x, y) ∈ r
I ∧ y ∈ C

I} ≥ n}
I} ≤ n}
I}

Table 3: The additional constructors.

has been proved in [Lutz, 2003]. Moreover, we can show
[Baader et al., 2005] that both Q and S are convex.
Proposition 5 Q and S are p-admissible.

Both Q and S are interesting concrete domains since they
allow us to refer to concrete numbers and strings in concepts,
and use the properties of the concrete predicates when rea-
soning. However, the predicates available in these concrete
domains are rather restricted. Unfortunately, p-admissibility
is a fragile property, i.e., we cannot extend Q and S by other
interesting predicates without losing p-admissibility. As an
illustration, we consider one extension of Q and one of S.
≤q,>q extends Q by the additional
The concrete domain Q
unary predicates (≤q)q∈Q. Then the Q
≤q,>q -conjunction
(cid:48)) implies the disjunction ≤0(f) ∨ >0(f) without im-
>0(f
plying one of its disjuncts. Thus, Q
with domain Σ∗
for some ﬁnite alphabet Σ and, for every s ∈ Σ∗
, the unary
predicates prefs and suﬀs with the semantics

∗
Next, consider any concrete domain S

≤q,>q is not convex.

∗

∗

prefS
s
suﬀS
s

:= {s
:= {s

(cid:48) ∈ Σ∗ | s is a preﬁx of s
(cid:48)}
(cid:48)}.
(cid:48) ∈ Σ∗ | s is a sufﬁx of s

∗

Let Σ = {a1, . . . , an}. Then the S
-conjunction suﬀa1(f)
implies the disjunction prefa1(f) ∨ . . . ∨ prefan(f) without
implying any of its disjuncts.
4 Intractable extensions of EL with GCIs
In this section we consider the sublanguage EL of EL++
and restrict the attention to general TBoxes, i.e., ﬁnite sets of
GCIs. Recall that EL is obtained from EL++ by dropping all
concept constructors except conjunction, existential restric-
tion, and top. We will show that the extension of EL with
basically any typical DL constructor not present in EL++ re-
sults in intractability of subsumption w.r.t. general TBoxes.
Syntax and semantics of the additional constructors used in
this section can be found in Table 3, where #S denotes the
cardinality of a set S.

In addition to the subsumption problem, we will sometimes
also consider the satisﬁability problem: the concept descrip-
tion C is satisﬁable w.r.t. the general TBox T iff there exists
a model I of T with C
I (cid:54)= ∅. As in the previous section,
we can restrict the attention to satisﬁability/subsumption of
concept names w.r.t. general TBoxes.
Atomic negation
Let EL¬
be the extension of EL with negation, and let EL(¬)
be obtained from EL¬
by restricting the applicability of nega-
tion to concept names (atomic negation). Since EL¬
is a no-
tational variant of the DL ALC, EXPTIME-completeness of

satisﬁability and subsumption in ALC w.r.t. general TBoxes
[Schild, 1991] carries over to EL¬
. EXPTIME-completeness
even carries over to EL(¬) since ¬C with C complex can be
replaced with ¬A for a new concept name A if we add the
two GCIs A (cid:118) C and C (cid:118) A.
Theorem 6 In EL(¬), satisﬁability and subsumption w.r.t.
general TBoxes is EXPTIME-complete.
Disjunction
Let ELU be the extension of EL with disjunction. Subsump-
tion in ELU w.r.t. general TBoxes is in EXPTIME since ELU
is a fragment of ALC. To obtain a matching EXPTIME lower
bound, we reduce satisﬁability in EL(¬) w.r.t. general TBoxes
to subsumption in ELU w.r.t. general TBoxes. To this end, let
A0 be a concept name and T a general EL(¬) TBox. For each
concept name A occurring in T , we take a new concept name
(i.e., one not occurring in T ). Also ﬁx an additional new
(cid:48)
A
concept name L. Then the general TBox T ∗
is obtained from
T by replacing each subconcept ¬A with A
(cid:48)
, and then adding
the following GCIs:
(cid:48) (cid:118) L for each A ∈ NC in T ;
Note that ∃r.L (cid:118) L is equivalent to ¬L (cid:118) ∀r.¬L. It thus
ensures that L acts as the bottom concept in connected coun-
termodels of A0 (cid:118)T ∗ L. Using this observation, it is not hard
to verify that A0 is satisﬁable w.r.t. T iff A0 (cid:54)(cid:118)T ∗ L.
Theorem 7 In ELU, subsumption w.r.t. general TBoxes is
EXPTIME-complete.
At-least restrictions
Let EL≥2 be the extension of EL with at-least restrictions
of the form ((cid:62) 2 r). Subsumption in EL≥2 w.r.t. general
TBoxes is in EXPTIME since EL≥2 is a fragment of ALC
extended with number restrictions [De Giacomo and Lenz-
erini, 1994]. We establish a matching lower bound by reduc-
ing subsumption in ELU w.r.t. general TBoxes. Let A0 and
B0 be concept names and T a general ELU TBox. Without
loss of generality, we may assume that all concept inclusions
in T have one of the following forms:

• (cid:62) (cid:118) A (cid:116) A
(cid:48)
• ∃r.L (cid:118) L.

and A (cid:117) A

C (cid:118) D, ∃r.C (cid:118) D,

C (cid:118) ∃r.D,

C1 (cid:117) C2 (cid:118) C, C (cid:118) C1 (cid:116) C2,
where C, D, C1, and C2 are concept names or (cid:62). Call the
resulting TBox T ∗
. To convert T into an EL≥2 CBox, we
simulate each GCI C (cid:118) C1 (cid:116) C2 by introducing two new
concept names A and B and a new role name r, and putting

C (cid:118) ∃r.A (cid:117) ∃r.B,

C (cid:117) ∃r.(A (cid:117) B) (cid:118) C1,

C (cid:117) ((cid:62) 2 r) (cid:118) C2.

It is easy to see that A0 (cid:118)T B0 iff A0 (cid:118)T ∗ B0.
Theorem 8 In EL≥2, subsumption w.r.t. general TBoxes is
EXPTIME-complete.
The interested reader may note that similar reductions can be
used to show EXPTIME-completeness for EL extended with
one of the role constructors negation, union, and transitive
closure.

Non-p-admissible concrete domains
P-admissibility of the concrete domains is not only a sufﬁ-
cient condition for polynomiality of reasoning in EL++, but
also a necessary one: if D is a non-convex concrete domain,
then subsumption in EL(D) is EXPTIME-hard, where EL(D)
is the extension of EL with the concrete domain D. The
proof uses a stronger version of Theorem 7: we can show that
subsumption of concept names w.r.t. restricted ELU TBoxes
is EXPTIME-complete, where a restricted ELU TBox is a
general EL TBox extended with a single GCI of the form
A (cid:118) B1 (cid:116) B2 [Baader et al., 2005].
The subsumption problem for such restricted ELU TBoxes
can be reduced to subsumption in EL++(D) as follows. Let
A0 and B0 be concept names and T a restricted ELU TBox.
Since D is not convex, there is a satisﬁable conjunction c of
atoms of the form p(f1, . . . , fk) that implies a disjunction
a1 ∨ . . . ∨ am of such atoms, but none of its disjuncts. If
we assume that this is a minimal such counterexample (i.e.,
m is minimal), then we also know that c does not imply
a2 ∨ . . . ∨ am, and that each of the ai is satiﬁable. Then
we have (i) each assignment of values from D that satisﬁes c
satisﬁes a1 or a2∨. . .∨am; (ii) there is an assignment satisfy-
ing c and a1, but not a2∨ . . .∨ am; (iii) there is an assignment
satisfying c and a2 ∨ . . . ∨ am but not a1. Now, let T ∗
be ob-
tained from T by replacing the single GCI A (cid:118) B (cid:116) B
by
A (cid:118) c, a1 (cid:118) B, and ai (cid:118) B
for i = 2, . . . , m. It is easy to
see that A0 (cid:118)T B0 iff A0 (cid:118)T ∗ B0.
Theorem 9 For any non-convex concrete domain D, sub-
sumption in EL(D) w.r.t. general TBoxes is EXPTIME-hard.
For example, this theorem applies to the non-convex concrete
domains introduced in Section 3.
Inverse roles
Let ELI be the extension of EL with inverse roles. We show
that subsumption in ELI w.r.t. general TBoxes is PSPACE-
hard by reducing satisﬁability in ALE w.r.t. primitive TBoxes:
ALE extends EL with value restrictions and atomic negation;
primitive TBoxes are ﬁnite sets of GCIs whose left-hand side
is a concept name. This satisﬁability problem is known to be
PSPACE-complete [Calvanese, 1996].
Let A0 be a concept name and T a primitive ALE TBox.
We assume without loss of generality that T contains only
concept inclusions of the following forms:

(cid:48)

(cid:48)

A (cid:118) B, A (cid:118) ¬B, A (cid:118) ∃r.B, A (cid:118) ∀r.B,

where A, B, and B
cept name L and deﬁne the general ELI TBox T ∗
of the following GCIs:

are concept names. We take a new con-
to consist

(cid:48)

−

• A (cid:118) D for all A (cid:118) D ∈ T
if D is a concept name or of the form ∃r.B;
.A (cid:118) B for all A (cid:118) ∀r.B ∈ T ;
• ∃r
• A (cid:117) B (cid:118) L for all A (cid:118) ¬B ∈ T ;
• ∃r.L (cid:118) L.

As in the case of ELU, the concept inclusion ∃r.L (cid:118) L is
equivalent to ¬L (cid:118) ∀r.¬L and ensures that L acts as the
bottom concept in connected countermodels of A0 (cid:118)T ∗ L.
Additionally, ∃r
.A (cid:118) B is clearly equivalent to A (cid:118) ∀r.B.

−

0 w.r.t. general TBoxes. FLtf

Thus, it is not hard to verify that A0 is satisﬁable w.r.t. T iff
A0 (cid:54)(cid:118)T ∗ L.
Theorem 10 Subsumption in ELI w.r.t. general TBoxes is
PSPACE-hard.
The exact complexity of this problem is still open (the best
upper bound we know of is EXPTIME, stemming from results
for the DL ALCI [De Giacomo and Lenzerini, 1994]).
At-most restrictions/functional roles/FL0
Let EL≤1 be the extension of EL with at-most restrictions
of the forn ((cid:54) 1 r). As in the case of EL≥2, subsumption
in EL≤1 w.r.t. general TBoxes is in EXPTIME since EL≤1
is a fragment of ALC with number restrictions. We prove a
matching lower bound by reducing subsumption in the DL
FLtf
0 offers only the concept
constructors conjunction and value restriction and requires all
roles to be interpreted as total functions. Subsumption in this
DL w.r.t. general TBoxes was proved EXPTIME-complete in
[Toman and Weddell, 2005].
Let A0 and B0 be concept names and T a general FLtf
TBox. We convert T into a general EL≤1 TBox T ∗
0
by re-
placing each subconcept ∀r.C with ∃r.C in GCI left-hand
sides, and with ((cid:54) 1 r)(cid:117)∃r.C in GCI right-hand sides. Then
A0 (cid:118)T B0 in FLtf
Theorem 11 Subsumption in EL≤1 w.r.t. general TBoxes is
EXPTIME-complete.
Interestingly, the result of Toman and Weddell can also be
used to prove EXPTIME-completeness of subsumption in
FL0 w.r.t. general TBoxes. Recall that FL0 is FLtf
0 without
the restriction that roles be total functions. In [Baader et al.,
2005] we show that A0 (cid:118)T B0 in FL0 iff A0 (cid:118)T B0 in
FLtf
Theorem 12 Subsumption in FL0 w.r.t. general TBoxes is
EXPTIME-complete.
5 Conclusion
We believe that the results of this paper show that—in con-
trast to the negative conclusions drawn from early complex-
ity results in the area—the quest for tractable DLs that are
expressive enough to be useful in practice can be successful.
Our DL EL++ is tractable even w.r.t. GCIs, and it offers many
constructors that are important in ontology applications.
This is in strong contrast to its counterpart with value
restrictions: FL0 is tractable without TBoxes [Brachman
and Levesque, 1984], co-NP-complete for acyclic TBoxes
[Nebel, 1990], PSPACE-complete for cyclic TBoxes [Baader,
1996; Kazakov and de Nivelle, 2003], and EXPTIME-
complete for general TBoxes (as shown above, and, indepen-
dently, in [Hofmann, 2005] ).

0 , i.e., subsumption in FL0 and FLtf

0 iff A0 (cid:118)T ∗ B0 in EL≤1.

0 coincides.

References
[Baader et al., 2005] F. Baader, S. Brandt, and C. Lutz. Pushing
the EL envelope. LTCS-Report LTCS-05-01, Inst. for Theoret-
ical Computer Science, TU Dresden, 2005. See http://lat.inf.tu-
dresden.de/research/reports.html.

[Baader, 1996] F. Baader. Using automata theory for characterizing

the semantics of terminological cycles. AMAI, 18, 1996.

[Baader, 2003a] F. Baader. Restricted role-value-maps in a descrip-
tion logic with existential restrictions and terminological cycles.
In Proc. DL’03, http://CEUR-WS.org/Vol-81/, 2003.

[Baader, 2003b] F. Baader. Terminological cycles in a description

logic with existential restrictions. In Proc. IJCAI’03, 2003.

[Brachman and Levesque, 1984] R.J. Brachman and H.J. Levesque.
The tractability of subsumption in frame-based description lan-
guages. In Proc. AAAI’84, 1984.

[Brandt, 2004] S. Brandt. Polynomial time reasoning in a descrip-
tion logic with existential restrictions, GCI axioms, and—what
else? In Proc. ECAI 2004, 2004.

[Calvanese, 1996] D. Calvanese. Reasoning with inclusion ax-
ioms in description logics: Algorithms and complexity. In Proc.
ECAI’96, 1996.

[Consortium, 2000] The GO Consortium. Gene Ontology: Tool for

the uniﬁcation of biology. Nature Genetics, 25, 2000.

[De Giacomo and Lenzerini, 1994] G. De Giacomo and M. Lenz-
erini. Boosting the correspondence between description logics
and propositional dynamic logics. In Proc. AAAI’94, 1994.

[Donini et al., 1991] F. Donini, M. Lenzerini, D. Nardi, and W.

Nutt. Complexity of concept languages. In Proc. KR’91, 1991.

[Haarslev and M¨oller, 2001] V. Haarslev and R. M¨oller. RACER

system description. In Proc. IJCAR 01, 2001.

[Hofmann, 2005] M. Hofmann. Proof-theoretic approach to de-

scription logic. In Proc. of LICS-05. 2005

[Horrocks and Sattler, 2003] I. Horrocks and U. Sattler. Decidabil-
ity of SHIQ with complex role inclusion axioms. In Proc. IJCAI-
03, 2003.

[Horrocks et al., 2000] I. Horrocks, U. Sattler, and S. Tobies. Prac-
tical reasoning for very expressive description logics. J. of the
IGPL, 8, 2000.

[Horrocks et al., 2003] I. Horrocks, P.F. Patel-Schneider, and F. van
Harmelen. From SHIQ and RDF to OWL: The making of a web
ontology language. J. of Web Semantics, 1, 2003.

[Horrocks, 1998] I. Horrocks. Using an expressive description

logic: FaCT or ﬁction? In Proc. KR’98, 1998.
[Kazakov and de Nivelle, 2003] Y. Kazakov and H. de Nivelle.
Subsumption of concepts in FL0 for (cyclic) terminologies with
respect to descriptive semantics is PSPACE-complete. In Proc.
DL 03. http://CEUR-WS.org/Vol-81/, 2003.

[Lutz, 2003] C. Lutz. NExpTime-complete description logics with
concrete domains. ACM Transactions on Computational Logic,
5(4):669-705, 2004.

[Nebel, 1988] B. Nebel. Computational complexity of terminolog-

ical reasoning in BACK. Artiﬁcial Intelligence, 34, 1988.

[Nebel, 1990] B. Nebel. Terminological reasoning is inherently in-

tractable. Artiﬁcial Intelligence, 43, 1990.

[Rector and Horrocks, 1997] A. Rector and I. Horrocks. Experi-
ence building a large, re-usable medical ontology using a de-
scription logic with transitivity and concept inclusions. In Proc.
Workshop on Ontological Engineering, 1997.

[Schild, 1991] K. Schild. A correspondence theory for terminolog-

ical logics: Preliminary report. In Proc. IJCAI’91, 1991.

[Spackman, 2000] K.A. Spackman. Managing clinical terminology
hierarchies using algorithmic calculation of subsumption: Expe-
rience with SNOMED-RT. J. of the American Medical Informat-
ics Association, 2000. Fall Symposium Special Issue.

[Toman and Weddell, 2005] D. Toman and G. Weddell. On reason-
ing about structural equality in XML: A description logic ap-
proach. TCS, 2005. To appear.

