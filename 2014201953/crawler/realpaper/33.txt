A Uniﬁed Theory of Structural Tractability for Constraint Satisfaction

and Spread Cut Decomposition

David Cohen

Dept of Computer Science

Royal Holloway

University of London
Egham, Surrey, UK
D.Cohen@rhul.ac.uk
Abstract

Peter Jeavons

Computing Laboratory

Oxford University

Marc Gyssens
Department WNI

Limburgs Universitair Centrum

Wolfson Building, Parks Road

Universitaire Campus

Oxford, UK

B-3590 Diepenbeek, Belgium

Peter.Jeavons@comlab.ox.ac.uk

marc.gyssens@luc.ac.be

In this paper we introduce a generic form of struc-
tural decomposition for the constraint satisfaction
problem, which we call a guarded decomposi-
tion. We show that many existing decomposition
methods can be characterized in terms of ﬁnding
guarded decompositions satisfying certain speci-
ﬁed additional conditions.
Using the guarded decomposition framework we
are also able to deﬁne a new form of decompo-
sition, which we call a spread cut. We show that
discovery of width k spread-cut decompositions is
tractable for each k, and that the spread cut decom-
position strongly generalize all existing decomposi-
tions except hypertrees. Finally we exhibit a family
of hypergraphs Hn, for n = 1; 2; 3 : : :, where the
width of the best hypertree decomposition of each
Hn is at least 3n, but the width of the best spread-
cut decomposition is at most 2n.

1 Introduction
A constraint satisfaction problem consists of a set of vari-
ables that must be assigned values subject to certain con-
straints. These constraints restrict the simultaneous assign-
ments to certain speciﬁed subsets of the variables. Many
real-world problems can be represented very naturally in this
framework [Dechter, 2003; Marriott and Stuckey, 1998]

Similar problems arise in the ﬁeld of relational databases,
where they are referred to as conjunctive query evaluation
problems [Kolaitis and Vardi, 2000]. Many of the techniques
developed in this paper can also be applied directly to the
conjunctive query evaluation problem, but we shall not pur-
sue this application here.

The decision problem for the general constraint satisfaction
problem is NP-hard [Mackworth, 1977]. This motivates the
search for more restricted subproblems which are tractable,
that is, solvable in polynomial-time.

This paper considers subproblems of the constraint satis-
faction problem which can be shown to be tractable using so-
called structural methods or decomposition methods. These
methods rely exclusively on using the structural properties of
instances, in other words the way in which the constraints
overlap each other.

A variety of such decomposition methods have been devel-
oped and applied in both the constraint satisfaction commu-
nity, and the database community. Examples include meth-
ods based on the use of treewidth [Freuder, 1985], cycle cut-
sets [Dechter and Pearl, 1988], tree-clustering [Dechter and
Pearl, 1989], hinges [Gyssens et al., 1994], cycle hypercut-
sets and hypertrees [Gottlob et al., 2000]. All of these meth-
ods rely on reducing a given problem instance to an equiv-
alent instance with a simpler structure, which can then be
solved efﬁciently.

In this paper we present a generic, abstract form of decom-
position, which we call a guarded decomposition. We show
that all of the earlier decomposition methods can be viewed
as special cases of guarded decomposition, each character-
ized by some simple additional conditions.

One existing decomposition method, based on the use of
hypertrees [Gottlob et al., 2000; 2002], is of particular im-
portance as it is has been shown to be strictly more general
than many other decomposition methods and that, for each
k, it is tractable to to discover hypertree decompositions of
width at most k. The general framework presented here al-
lows us to identify a new decomposition method, based on
the use of a structure that we call a spread cut. We show
that spread-cut decompositions generalize all of the methods
previously shown to be generalized by hypertree decomposi-
tions, and still it is tractable, for each k to discover spread cut
decompositions of width k. Furthermore, we exhibit a family
of examples for which the spread-cut decomposition method
obtains better decompositions than the hypertree decomposi-
tion method.

2 Constraint Satisfaction, Hypergraphs, and

Tractability

Deﬁnition 2.1 A CSP instance is a triple P = hV; D; Ci
where:

(cid:15) V is a ﬁnite set of variables;
(cid:15) D is a set called the domain of P ;
(cid:15) C is a set of constraints. Each constraint c 2 C is a pair
c = h(cid:31); (cid:26)i where (cid:31) (cid:18) V is a set of variables, called the
scope of c, and (cid:26) (cid:18) D(cid:31) is a set of functions from the
scope to the domain, called the relation of c.

A solution to the CSP instance P = hV; D; Ci is a function
from V to D whose restriction1 to the scope of any constraint
c 2 C is one of the functions in the relation of c.
Example 2.2 Consider the CSP instance PAG = hV; D; Ci
where V = f1; 2; : : : ; 10g, D = f0; 1g, and C =
fc1; c2; : : : ; c8g.

This instance has ten variables which must each be as-
signed the value 0 or 1, subject to 8 constraints. The con-
straints in C are deﬁned as follows:

c1 =(cid:10)f1; 2g; Df1;2g(cid:11) ;
c3 =(cid:10)f3; 4; 10g; Df3;4;10g(cid:11) ;
c5 =(cid:10)f5; 6; 9g; Df5;6;9g(cid:11) ;
c7 =(cid:10)f7; 8; 9g; Df7;8;9g(cid:11) ;

c2 =(cid:10)f2; 3; 9g; Df2;3;9g(cid:11) ;
c4 =(cid:10)f4; 5g; Df4;5g(cid:11) ;
c6 =(cid:10)f6; 7; 10g; Df6;7;10g(cid:11) ;

c8 = hf1; 8; 10g; ff j f (1) = f (8) = 0 ! f (10) = 1gi :

Note that each constraint except c8 allows every assignment
to the variables of its scope. The constraint c8 does not allow
the three variables of its scope all to take the value 0 simulta-
neously, but does allow all other assignments.

A straightforward calculation shows that this instance has

exactly 7 (cid:3) 25 = 224 solutions.
In order to study the structural properties of CSP instances,
that is, the way in which the constraint scopes overlap each
other, we need the standard notion of a hypergraph.
Deﬁnition 2.3 A hypergraph is a pair H = hV; Ei, where V
is an arbitrary set, called the vertices of H, and E is a set of
subsets of V , called the hyperedges of H.
Deﬁnition 2.4 For any CSP instance P = hV; D; Ci,
the structure of P , denoted (cid:27)(P ),
is the hypergraph
hV; f(cid:31) j h(cid:31); (cid:26)i 2 Cgi.

For any hypergraph H, the class of all CSP instances with

structure H is denoted (cid:9)(H).
Example 2.5 Recall the CSP instance PAG deﬁned in Exam-
ple 2.2. The structure of PAG is the hypergraph HAG illus-
trated in Figure 1.

The set of vertices of HAG is the set f1; 2; : : : ; 10g, and the
eight hyperedges of HAG are the following subsets of these
vertices: e1 = f1; 2g, e2 = f2; 3; 9g, e3 = f3; 4; 10g, e4 =
f4; 5g, e5 = f5; 6; 9g, e6 = f6; 7; 10g, e7 = f7; 8; 9g, e8 =
f1; 8; 10g.
As indicated in the Introduction, the decision problem for
the general constraint satisfaction problem is NP-hard [Mack-
worth, 1977], so there has been considerable interest in ﬁnd-
ing more restricted problem classes whose instances can be
recognized and solved in polynomial time.
Deﬁnition 2.6 A class I of CSP instances is called tractable
if there is a polynomial time algorithm to decide membership
of I, and a polynomial time algorithm which solves all in-
stances in I.

A class I of CSP instances is called structural if I =

SH2H (cid:9)(H) for some class of hypergraphs H.

1To simplify the presentation we assume, throughout this paper,
that every variable of a CSP instance is constrained; that is, every
variable occurs in the scope of some constraint.

10

e8

8

e7

7

e6

1

e1

2

e2

9

e5

6

5

e3

3

4

e4

Figure 1: The hypergraph HAG, which is the structure of the
CSP instance PAG, deﬁned in Example 2.2.

3 Guarded Decompositions
Two CSP instances with the same set of variables are called
solution equivalent if they have the same set of solutions.
All known tractable structural classes of CSP instances are
characterized by showing that the instances they contain can
be transformed into solution equivalent instances with sim-
pler structure. The constraints of these transformed instances
are obtained by calculating the relational joins of certain con-
straint relations in the original instances, and then projecting
these onto new scopes. To describe this general transforma-
tion scheme we introduce the following terminology.
Deﬁnition 3.1 A guarded block of a hypergraph H is a pair
h(cid:21); (cid:31)i where the guard, (cid:21), is a set of hyperedges of H, and
the block, (cid:31), is a subset of the vertices of the guard.

Deﬁnition 3.2 For any CSP instance P , and any guarded
block h(cid:21); (cid:31)i of (cid:27)(P ), the constraint generated by P on h(cid:21); (cid:31)i
is the constraint h(cid:31); (cid:26)i, where (cid:26) is the projection onto (cid:31) of the
relational join of all the constraints of P whose scopes are el-
ements of (cid:21).

Given a CSP instance P , with structure H, and a collection
of guarded blocks of H, we can generate constraints on each
of these guarded blocks to obtain a new collection of con-
straints, and hence a new CSP instance. In some cases, if the
guarded blocks are carefully chosen, this new instance will
be solution equivalent to P , and so can be used to solve P .
If this property holds for any CSP instance with structure H,
then the collection of guarded blocks will be called a guarded
decomposition of H, which is formally deﬁned as follows:
Deﬁnition 3.3 A set of guarded blocks (cid:4) of a hypergraph
H is called a guarded decomposition of H if for every
CSP instance P = hV; D; Ci 2 (cid:9)(H), the instance P 0 =
hV; D; C 0i, where C 0 is the set of constraints generated by P
on the members of (cid:4), is solution equivalent to P .
How can we determine whether a given collection of guarded
blocks is in fact a guarded decomposition? Theorem 3.5 be-

low gives a simple and efﬁcient way to answer this question,
based on the following properties.
Deﬁnition 3.4 A guarded block h(cid:21); (cid:31)i of a hypergraph H
covers a hyperedge e of H if e is contained in (cid:31).

A set of guarded blocks (cid:4) of a hypergraph H is called a
guarded cover for H if each hyperedge of H is covered by
some guarded block of (cid:4).

A set of guarded blocks (cid:4) of a hypergraph H is called a
complete guarded cover for H if each hyperedge e of H oc-
curs in the guard of some guarded block of (cid:4) which covers
e.

Theorem 3.5 A set of guarded blocks (cid:4) of a hypergraph H
is a guarded decomposition of H if and only if it is a complete
guarded cover for H.

Proof: Let (cid:4) be a set of guarded blocks of a hypergraph
H = hV; Ei.

Suppose that (cid:4) is not a complete guarded cover for H.
Choose e 2 E such that there is no guarded block h(cid:21); (cid:31)i 2 (cid:4)
for which e 2 (cid:21) and e (cid:18) (cid:31). We will construct an instance
Pe with structure H which will witness the fact that (cid:4) is not
a guarded decomposition of H.

Let the domain of Pe be D = f0; 1g. For each edge
f 2 E; f 6= e, let the constraint of Pe with scope f allow
all mappings from f to D. Finally let the constraint of Pe
with scope e, ce, allow all mappings from e to D except for
the mapping that assigns the value 0 to all the vertices of e
simultaneously.

Now let h(cid:21); (cid:31)i be any guarded block in the set (cid:4). If e 62 (cid:21)
then the constraint generated by Pe on h(cid:21); (cid:31)i allows every
assignment. On the other hand, if e 2 (cid:21), then, by the choice
of e, we know that e 6(cid:18) (cid:31). In this case we observe that any
projection of ce onto any proper subset of e allows all as-
signments. So again the constraint generated by Pe on h(cid:21); (cid:31)i
allows every assignment.

Since all constraints generated by Pe on all elements of
(cid:4) allow every assignment, the resulting CSP instance is not
solution equivalent to Pe, and hence (cid:4) is not a guarded de-
composition of H.

For the converse, suppose that (cid:4) is a complete guarded
cover for H. Let P be an arbitrary CSP instance with struc-
ture H. We have to show that the CSP instance P(cid:4) obtained
by taking the constraints generated by P on each element of
(cid:4) is solution equivalent to P .

Clearly, any solution to P is a solution to P(cid:4). On the other
hand, by the completeness of (cid:4), and the construction of P(cid:4),
the projection of any solution to P(cid:4) onto any edge e 2 E
must be allowed by the constraint of P with scope e. Hence
any solution to P(cid:4) is also a solution to P .

4 Tractability
We have shown that guarded decompositions can be used to
transform a given CSP instance to a solution equivalent in-
stance which may have a different structure.

In order to be able to use guarded decompositions to iden-
tify tractable structural classes we need to impose some addi-
tional conditions to ensure we have the following properties.

Tractable construction It must be possible to generate each

of the new constraints in polynomial time.

Tractable solution It must be possible to solve the resulting

instances in polynomial time.

Tractable discovery It must be possible to obtain a guarded
decomposition of the type we are considering for a given
hypergraph (or else discover that no such decomposition
exists) in polynomial time.

We will now consider extra conditions that can be imposed
on a guarded decomposition to ensure that it has each of these
properties.

4.1 Tractable Construction
The time complexity of a relational join operation is O(rk),
where k is the number of relations being joined, and r is the
maximum number of tuples in any of these relations. Hence
to ensure that we have the tractable construction property, it
is sufﬁcient to bound the number of constraint relations that
need to be combined using the relational join operation. This
can be done by bounding the number of hyperedges in the
guard of any guarded block used in the decomposition.
Deﬁnition 4.1 The width of a set of guarded blocks is the
maximum number of hyperedges in any of its guards.
For any ﬁxed value of k, the class of guarded decompositions
of width at most k has the tractable construction property.

4.2 Tractable Solution
One way to ensure that the new instances obtained by using
a guarded decomposition have the tractable solution prop-
erty, is to ensure that the structure of these new instances is
acyclic [Beeri et al., 1983]. The property of being acyclic can
be deﬁned as follows:
Deﬁnition 4.2 A join tree of a hypergraph H is a connected
tree, T , whose nodes are the hyperedges of H, such that,
whenever the vertex x of H occurs in two hyperedges e1 and
e2 of H then x occurs in each node of the unique path con-
necting e1 and e2 in T . In other words, the set of nodes of T
in which x occurs induces a (connected) subtree of T .

A hypergraph is called acyclic if it has a join tree.

Theorem 4.3 ([Gyssens et al., 1994]) Any CSP instance
whose structure is acyclic can be solved in polynomial time.
Deﬁnition 4.4 A join tree of a set of guarded blocks (cid:4) of H
is a connected tree, T , whose nodes are the elements of (cid:4),
such that, whenever the vertex x of H occurs in two blocks of
(cid:4) then x occurs in each block of the unique path connecting
them in T . In other words, the set of nodes of T for which x
occurs in the block induces a (connected) subtree of T .
A set of guarded blocks is acyclic if it has a join tree.

By Theorem 4.3, any class of acyclic guarded decompositions
has the tractable solution property. Using Theorem 3.5 and
Deﬁnition 4.4 we now show that an acyclic guarded decom-
position can be obtained from an arbitrary acyclic guarded
cover without increasing the width, or signiﬁcantly increas-
ing the number of guarded blocks, by adding appropriate ad-
ditional guarded blocks to make a complete guarded cover.

Theorem 4.5 If the set of guarded blocks (cid:4) is an acyclic
guarded cover for H then the set (cid:4) [ fhfeg; ei j e 2 Eg
is an acyclic guarded decomposition of H.
In view of this result, we shall focus on acyclic guarded cov-
ers and use them to deﬁne classes of decompositions.

4.3 Tractable Discovery
The class of hypergraphs having a guarded cover in some
ﬁxed class (cid:1), with width at most k, will be denoted C((cid:1); k).
Deﬁnition 4.6 A class of guarded covers (cid:1) will be called
parameterized tractable 2 if for each value of k there exists a
polynomial-time algorithm which, given any hypergraph H 2
C((cid:1); k), returns a guarded cover of H with width at most k,
and given any hypergraph H 62 C((cid:1); k), reports failure.
It follows from the results above that if (cid:1) is a class of
acyclic guarded covers, which is parameterized tractable,
then C((cid:1); k) will be a tractable structural class of CSP in-
stances, for each value of k.

5 Known Tractable Structural Classes
We will now show that many existing decomposition methods
for the CSP can be deﬁned in terms of ﬁnding acyclic guarded
covers with particular special properties.

We ﬁrst note that for historical reasons some existing de-
composition methods for the CSP make use of extended
guards that contain both vertices and hyperedges. To be able
to present all of these methods in a uniform way we introduce
the idea of transforming a CSP instance by adding a unary

constraint cv, for each variable v, where cv = (cid:10)fvg; fvgD(cid:11).

This corresponds to extending the structure of the instance to
ensure that it includes a hyperedge for each variable.
Deﬁnition 5.1 Let H = hV; Ei be any hypergraph. A
guarded cover for the hypergraph hV; E [ ffvg j v 2 V gi is
called an extended cover for H.
The following result shows that the existence of an extended
cover of width k is equivalent to the existence of a standard
guarded cover of width k. This means that extended covers
are simply a notational convenience and do not allow better
decompositions.
Theorem 5.2 If a hypergraph H has an acyclic extended
cover of width k, then H also has an acyclic guarded cover
of width at most k with at most the same number of guarded
blocks.
We also note that many existing decomposition methods are
based on guarded covers in which every block is exactly the
union of the edges of its guard.
Deﬁnition 5.3 A guarded cover (cid:4) is edge-deﬁned if the block
of each guarded block in (cid:4) is exactly the set of vertices con-
tained in the hyperedges of its guard.

We can now characterize many known structural decompo-
sition methods (see [Gottlob et al., 2000] for traditional deﬁ-
nitions) in terms of a corresponding class of acyclic guarded
covers with certain additional conditions.

2The notion of being parameterized tractable that we have de-
ﬁned here is strictly weaker than the well-known notion of being
ﬁx ed parameter tractable.

In each of the cases listed below (except for query decom-
positions), it has been shown that the additional conditions
are sufﬁcient to ensure that the corresponding class of acyclic
guarded covers, (cid:1), is parameterized tractable. Hence, in all
cases (except query decompositions), the class of CSP in-
stances in C((cid:1); k) is a tractable structural class.

(cid:15) A biconnected-component decomposition of a hy-
pergraph is an edge-deﬁned acyclic complete guarded
cover, (cid:4), satisfying an articulation condition:

8 h(cid:21)1; (cid:31)1i ; h(cid:21)2; (cid:31)2i 2 (cid:4);

j(cid:31)1 \ (cid:31)2j (cid:20) 1

(cid:15) A cycle-hypercutset decomposition of a hypergraph
H = hV; Ei is an edge-deﬁned acyclic complete
guarded cover, (cid:4), satisfying a simplicity condition:

9C (cid:18) E; 8 h(cid:21); (cid:31)i 2 (cid:4);

j(cid:21) (cid:0) Cj (cid:20) 1

(cid:15) A hinge-tree decomposition of a hypergraph H is an
edge-deﬁned acyclic complete guarded cover, (cid:4), satis-
fying a separation condition:

8 h(cid:21)1; (cid:31)1i ; h(cid:21)2; (cid:31)2i 2 (cid:4); 9e 2 (cid:21)1 \ (cid:21)2; (cid:31)1 \ (cid:31)2 (cid:18) e:

(cid:15) A cycle-cutset decomposition of a hypergraph H is an
edge-deﬁned acyclic extended cover, (cid:4), such that every
hyperedge of every guarded block of (cid:4) consists of a sin-
gle vertex, and (cid:4) satisﬁes a simplicity condition:

9C (cid:18) V; 8 h(cid:21); (cid:31)i 2 (cid:4); 9e 2 E; ((cid:31) (cid:0) C) (cid:18) e

(cid:15) A query decomposition of a hypergraph H = hV; Ei is
a pair h(cid:4); T i where (cid:4) is a complete edge-deﬁned acyclic
extended cover of H and T is a join tree of (cid:4) that satis-
ﬁes a connectedness condition:

8e 2 E; fh(cid:21); (cid:31)i 2 (cid:4) j e 2 (cid:21)g is connected in T:

(cid:15) A hypertree decomposition of a hypergraph H is a pair
h(cid:4); T i, where (cid:4) is an acyclic guarded cover and T is a
rooted join tree of (cid:4), which satisﬁes the following de-
scendant condition:

8 h(cid:21); (cid:31)i 2 (cid:4); 0
@ [e2(cid:21)

e! \

[h(cid:21)i;(cid:31)ii2Dh(cid:21);(cid:31)i

(cid:31)i1
A (cid:18) (cid:31)

where Dh(cid:21);(cid:31)i is the set of all descendants of h(cid:21); (cid:31)i in T .
The minimum width of any hypertree decomposition of
a hypergraph H is called the hypertree width of H.

6 Comparing Decompositions
The relative strengths of different decomposition techniques
derived from acyclic guarded covers can be compared using
the measures developed by Gottlob et al [2000].
Deﬁnition 6.1 Let (cid:1)1 and (cid:1)2 be any two classes of guarded
covers. We say that (cid:1)1 generalizes (cid:1)2 if there exists a value
" > 0 such that, for every k, C((cid:1)2; k) (cid:18) C((cid:1)1; k + ").

We say that (cid:1)1 strongly generalizes (cid:1)2 if (cid:1)1 generalizes
(cid:1)2, and there exists k for which there does not exist " > 0
with C((cid:1)1; k) (cid:18) C((cid:1)2; k + ").

Hypertrees have been shown to strongly generalize all the
other parameterized tractable classes of decompositions de-
ﬁned in the previous section [Gottlob et al., 2000]. Further-
more it has recently been shown that the hypertree width of
any hypergraph is at most three times the minimal possible
width of any acyclic guarded cover [Adler, 2004]. It follows
that hypertrees cannot themselves be strongly generalized by
any other class of acyclic guarded covers.

However, we will show in the next section that it is possible
to deﬁne a parameterized tractable class (cid:1) of acyclic guarded
covers, such that for some families of hypergraphs, the min-
imal width of a guarded cover in (cid:1) is smaller than the hy-
pertree width by some constant factor. Such an improvement
allows the corresponding instances to be solved exponentially
faster than by using hypertree decompositions.
Deﬁnition 6.2 Let (cid:1)1 and (cid:1)2 be any two classes of guarded
covers. We say that (cid:1)1 can be superior to (cid:1)2 if there is some
r > 1, such that for every k, C((cid:1)2; rk) 6(cid:18) C((cid:1)1; k).

7 Spread Cuts
In this section we will deﬁne a new class of acyclic guarded
covers, called spread cuts. We show that classes of instances
with bounded spread cut width are tractable and that spread
cuts can be superior to hypertrees.3

Throughout this section, we will write S (cid:21) to refer to the
vertices of a set of hyperedges (cid:21); that is,S (cid:21) =Se2(cid:21) e.

Deﬁnition 7.1 Let H = hV; Ei be a hypergraph and (cid:31) (cid:18) V
be a set of vertices. We say that two hyperedges e; f 2 E are
(cid:31)-adjacent if e \ f 6(cid:18) (cid:31).

A (cid:31)-path connecting e to f is a sequence e =
e0; e1; : : : ; er(cid:0)1; er = f such that ei is (cid:31)-adjacent to ei+1,
for i = 0; : : : ; r (cid:0) 1.

A set of hyperedges C (cid:18) E is (cid:31)-connected if, for every

pair of hyperedges in C, there is a (cid:31)-path connecting them.

A set of hyperedges is a hyperedge (cid:31)-component of H if it

is a maximal non-empty (cid:31)-connected subset of E.

A non-empty set of vertices C is a vertex (cid:31)-component of
H if there is some hyperedge (cid:31)-component C(cid:31) for which C =

S C(cid:31) (cid:0) (cid:31).

In this paper, unless otherwise stated, a component will

mean a vertex component.
Example 7.2 Consider again the hypergraph HAG deﬁned in
Example 2.5 and illustrated in Figure 1.

Now consider the guarded block h(cid:21); (cid:31)i with (cid:21) = fe2; e6g

and (cid:31) = f3; 6; 7; 9; 10g.

There

are

three hyperedge (cid:31)-components:

fe1; e2; e7; e8g and fe3; e4; e5g. Hence,
vertex (cid:31)-components: f4; 5g and f1; 2; 8g.

fe6g,
there are two

fe1; e7; e8g and fe3; e4; e5g. Hence, there are two vertex

There are four hyperedge S (cid:21)-components: fe2g, fe6g,
S (cid:21)-components: f4; 5g and f1; 8g.
empty intersection with) exactly one vertexS (cid:21)-component.

Notice that each vertex (cid:31)-component meets (has non-

3It is still an open research question whether hypertrees can be

superior to spread-cuts.

This special property of this guarded block relies on (cid:31) be-
ing “large enough”. If (cid:31) were empty, then there would be
just one vertex (cid:31)-component and this component would meet

both vertexS (cid:21)-components.

If we restrict the possible blocks for a given guard appropri-
ately then we can polynomially bound the number of guarded
blocks, whilst still getting effective decompositions. This mo-
tivates the following deﬁnition.
Deﬁnition 7.3 A guarded block h(cid:21); (cid:31)i of a hypergraph H
has unbroken components if each (cid:31)-component of H meets

(cid:21)g (cid:18) (cid:31).

at most one S (cid:21)-component of H and fe1 \ e2 j e1; e2 2

A spread cut of H is an acyclic guarded cover for H in
which all of the guarded blocks have unbroken components.
Example 7.4 Consider again the hypergraph HAG deﬁned in
Example 2.5 and illustrated in Figure 1.

The minimal width of any hypertree decomposition of

HAG is three4.

The following set of guarded blocks

is a spread
hfe2; e6g; f3; 6; 7; 9; 10gi,
hfe2; e8g; f1; 2; 3; 8; 9; 10gi,

cut of HAG of width two:
hfe3; e5g; f3; 4; 5; 6; 9; 10gi,
hfe3; e7g; f3; 7; 8; 9; 10gi.

7.1 Spread Cuts are Parameterized Tractable
We will now deﬁne a canonical form for guarded blocks with
unbroken components, and show that if a hypergraph H has
a spread cut of width k, then it also has a spread cut of width
at most k, in which each guarded block is canonical.
Deﬁnition 7.5 Let (cid:21) be any set of hyperedges of H. We deﬁne
the label, L(cid:21)(v), of any vertex of H to be the set of hyperedge

S (cid:21)-components which include a hyperedge containing v.

We say that a guarded block h(cid:21); (cid:31)i is canonical if for each
hyperedge e 2 (cid:21) the vertices of e outside of (cid:31) are exactly
those with a particular label. That is,

8v 2 e (cid:0) (cid:31); 8w 2 e; w 62 (cid:31) $ L(cid:21)(w) = L(cid:21)(v):

Theorem 7.6 If H has a spread cut of width k then H has a
spread cut of width at most k, in which each guarded block is
canonical.
Proof: Due to space limitations, we can only give an outline
of the proof.

The idea is to show that, for any guarded block h(cid:21); (cid:31)i
with unbroken components, and for any hyperedge e 2 (cid:21),

jSv2e(cid:0)(cid:31) L(cid:21)(v)j (cid:20) 2. Given this fact, we can start with any

spread cut and, for each hyperedge of each guard, remove
from the block any vertex with the same label as any vertices
already outside of the block.
It is straightforward to show
that the result is still an acyclic guarded cover, and hence still
a spread cut with the same width, where each guarded block
is now canonical.

Using this canonical form, we can establish the following

result.
Theorem 7.7 Spread cuts are parameterized tractable.

4This is most easily shown by using the “Robbers and Marshals”
characterization of hypertree width [Gottlob et al., 2003]. However,
due to space restriction we omit this proof.

Proof: Due to space limitations, we can only give an outline
of the proof.

The proof idea is that we only have to establish in polyno-
mial time whether there exists a spread cut of width at most
k in which each guarded block is canonical. We do this by
ﬁrst deﬁning an object called a k-spread, which is a triple,
h(cid:21); (cid:31); Ci, where h(cid:21); (cid:31)i is any canonical guarded block with
unbroken components, j(cid:21)j (cid:20) k, and C is a (cid:31)-component.

We then deﬁne the predicate k-split() (recursively) on k-
spreads. We say that k-split(h(cid:21); (cid:31); Ci) holds if C is empty, or
if there exists some canonical guarded block, h(cid:21)s; (cid:31)si, where
(cid:31)s (cid:18) C [ (cid:31) and, for every k-spread h(cid:21)s; (cid:31)s; Csi:
Cs \ C 6= ; ) 8e 2 E; (e \ Cs 6= ; ) e \ (cid:31) (cid:18) (cid:31)s) ; and
Cs (cid:18) C ) k-split(h(cid:21)s; (cid:31)s; Csi):

It is easy to show that the number of k-spreads of a hyper-
graph H = hV; Ei is at most (jEj + 1)k+2. It follows (as in
the corresponding proof for hypertrees, Lemma 14, Page 30,
of Gottlob et al [2002]) that k-split(h;; ;; V i) can be evalu-
ated in at most jEj4k+5 steps.

Finally, we show that H has a spread cut with canon-
ical guarded blocks of width at most k if and only if
k-split(h;; ;; V i). The only hard part of this proof is to
show that the set of guarded blocks used in the proof of
k-split(h;; ;; V i) is a guarded cover. This proof is exactly
analogous to the corresponding proof for the algorithm that
ﬁnds normal form hypertree decompositions (See the proof
of Property 1 in Lemma 13, Page 28, of Gottlob et al [2002]).

The proof of Theorem 7.7 also shows that classes of in-

stances with bounded spread cut width are tractable.

7.2 Spread Cuts and Hypertrees
To establish that spread cuts strongly generalize all of the pa-
rameterized tractable decomposition methods listed in Sec-
tion 5 excluding hypertrees we simply refer to the proofs of
strong generalization given by Gottlob et al [2000] and ob-
serve that every hypertree (of small width) used to establish
strong generalization in that paper is also a spread cut.

To show that spread cuts can be superior to hypertrees we

establish the following result.
Proposition 7.8 There exists a family of hypergraphs
Hn; n = 1; 2; 3; : : :, such that Hn has a spread cut with width
2n, but the hypertree width of Hn is at least 3n.
Proof: Due to space restrictions we can only give an outline
of the proof.

The idea is to use n copies of the hypergraph HAG de-
ﬁned in Example 2.5 to construct Hn. We add edges link-
ing vertices in different copies if they correspond to vertices
of hyperedges that meet in HAG. Using the “Robbers and
Marshals” characterization of hypertree width [Gottlob et al.,
2003], we then show that the hypertree width of Hn is at least
3n. (If there are fewer than 3n marshals, the robber can al-
ways choose to play in the copy of HAG with at most two
marshals on its hyperedges.)

Finally, the width 2n spread cut is just the spread cut of
HAG with width 2 described in Example 7.4 “multiplied”
over the n copies of HAG.

8 Conclusion
We have introduced the general notion of a guarded decompo-
sition and shown how it can be used to describe many known
tractable structural subproblems of the CSP. We have then de-
ﬁned a new form of decomposition, the spread cut, which
sits in the same place in the generalization hierarchy as hy-
pertrees. We have shown that spread cuts are parameterized
tractable and that they allow us to obtain decompositions with
a smaller width than any hypertree decomposition for some
classes of hypergraphs.

It is an open question whether the general class of all

acyclic guarded covers is itself parameterized tractable.

References
[Adler, 2004] I. Adler. Marshals, monotone marshals, and
hypertree-width. Journal of Graph Theory, 47(4):275–
296, December 2004.

[Beeri et al., 1983] C. Beeri, R. Fagin, D. Maier, and
M. Yannakakis. On the desirability of acyclic database
schemes. Journal of the ACM, 30:479–513, 1983.

[Dechter and Pearl, 1988] R. Dechter and J. Pearl. Network-
based heuristics for constraint satisfaction problems. Arti-
ﬁcial Intelligence, 34(1):1–38, 1988.

[Dechter and Pearl, 1989] R. Dechter and J. Pearl. Tree
clustering for constraint networks. Artiﬁcial Intelligence,
38:353–366, 1989.

[Dechter, 2003] R. Dechter. Constraint Processing. Morgan

Kaufmann, 2003.

[Freuder, 1985] E.C. Freuder. A sufﬁcient condition for
backtrack-bounded search. Journal of the ACM, 32:755–
761, 1985.

[Gottlob et al., 2000] G. Gottlob, N. Leone, and F. Scarcello.
A comparison of structural CSP decomposition methods.
Artiﬁcial Intelligence, 124:243–282, 2000.

[Gottlob et al., 2002] G. Gottlob, N. Leone, and F. Scarcello.
Hypertree decomposition and tractable queries. Journal of
Computer and System Sciences, 64(3):579–627, 2002.

[Gottlob et al., 2003] G. Gottlob, N. Leone, and F. Scarcello.
Robbers, marshals, and guards: game theoretic and logical
characterizations of hypertree width. Journal of Computer
and System Sciences, 66:775–808, 2003.

[Gyssens et al., 1994] M. Gyssens, P.G. Jeavons, and D.A.
Cohen. Decomposing constraint satisfaction problems us-
ing database techniques. Artiﬁcial Intelligence, 66(1):57–
89, 1994.

[Kolaitis and Vardi, 2000] Ph.G. Kolaitis and M.Y. Vardi.
Conjunctive-query containment and constraint satisfac-
tion. Journal of Computer and System Sciences, 61:302–
332, 2000.

[Mackworth, 1977] A.K. Mackworth. Consistency in net-
works of relations. Artiﬁcial Intelligence, 8:99–118, 1977.
[Marriott and Stuckey, 1998] K. Marriott and P. Stuckey.
Programming with Constraints. MIT Press, Cambridge,
Massachusetts, 1998.

