∗
Scalable Diagnosability Checking of Event-Driven Systems

Anika Schumann

Yannick Pencol´e

The Australian National University,

National Center for Scientiﬁc Research

National ICT Australia

anika.schumann@anu.edu.au

LAAS-CNRS, France

yannick.pencole@laas.fr

Abstract

Diagnosability of systems is an essential property
that determines how accurate any diagnostic rea-
soning can be on a system given any sequence of
observations. Generally, in the literature of dy-
namic event-driven systems, diagnosability analy-
sis is performed by algorithms that consider a sys-
tem as a whole and their response is either a pos-
itive answer or a counter example. In this paper,
we present an original framework for diagnosabil-
ity checking. The diagnosability problem is solved
in a distributed way in order to take into account
the distributed nature of realistic problems. As op-
posed to all other approaches, our algorithm also
provides an exhaustive and synthetic view of the
reasons why the system is not diagnosable. Finally,
the presented algorithm is scalable in practice: it
provides an approximate and useful solution if the
computational resources are not sufﬁcient.

1 Introduction
Nowadays, monitoring and diagnosing complex communi-
cating event-driven systems has huge economic impact by
ensuring better reliability, maintenance and safety [Lamperti
and Zanella, 2003]. Such diagnostic capabilities are, for in-
stance, required in aeronautic [Ghelam et al., 2006] or au-
tomotive systems, telecommunications [Pencol´e and Cordier,
2005] and electronic commerce [Yan et al., 2005]. For many
years, the problem of automated fault diagnosis of these kinds
of systems has received constant and considerable attention
from researchers in the ﬁelds of Artiﬁcial Intelligence and
Control. Given a monitor continuously receiving observa-
tions from a system, automated diagnosis methods aim at de-
tecting all possible faults that explain the observations.

However, the resulting diagnosis depends on the diagnos-
ability of the system [Sampath et al., 1995]. If the system is
strongly diagnosable, a diagnostic process will ﬁnd an accu-
rate explanation for any possible set of observations from the

∗This research was supported by National

ICT Australia
(NICTA) in the framework of the SuperCom project (Model-Based
Supervision of Composite Systems). NICTA is funded through the
Australian Government’s Backing Australia’s Ability initiative, in
part through the Australian National Research Council.

system, otherwise the diagnosis will provide an ambiguous
and useless explanation. Consequently, diagnosability analy-
ses should be performed on the system before any diagnostic
reasoning. The diagnosability results then help in choosing
the type of diagnostic algorithm that can be performed and
provide some information of how to change the system to
make it more diagnosable [Pencol´e, 2004].

In this paper, we propose a formal framework for check-
ing diagnosability on event-driven systems which is mainly
motivated by two facts. On the one hand, checking di-
agnosability means determining the existence of two be-
haviours in the system that are not distinguishable. How-
ever, in realistic systems, there is a combinatorial explosion
of the search space that forbids the practical use of classical
and centralised diagnosability checking methods [Sampath
et al., 1995] like the twin plant method [Jiang et al., 2001;
Yoo and Lafortune, 2002]. On the other hand, in the case of
a nondiagnosable system, checking its diagnosability is not
sufﬁcient; the diagnosability analysis should also provide the
reasons why the system is not diagnosable. Given these rea-
sons, either the system speciﬁcation is redesigned or diagnos-
tic reasoning is improved by taking into account the fact that
the diagnosis of a fault may always be ambiguous.

Our proposal makes three contributions to the diagnosabil-
ity problem. The ﬁrst one is the deﬁnition of a new theoreti-
cal framework where the diagnosability problem is described
as a distributed search problem. Instead of searching for not
distinguishable behaviours in a global twin plant, we propose
to distribute the search based on local twin plants and to de-
termine such global behaviours without computing any part
of the global twin plant. The second contribution comprises
the nature of the feedback in case the faults are not diagnos-
able. Since the search is distributed over the whole system,
the analysis provides an exhaustive and synthetic view of the
diagnosability analysis of the system (why a given fault is not
diagnosable). The third contribution is about the practical use
of the algorithm. Since the diagnosability analysis problem is
complex, the complete analysis may not be possible due to
a lack of computational resources. However, the distributed
search makes the computation scalable in the sense that our
algorithm is able to provide an approximate but exhaustive
solution to the diagnosability problem whatever the computa-
tional resources are.

The paper is organised as follows. Section 2 presents some

IJCAI-07

575

background on diagnosability on event-driven systems. Sec-
tion 3 introduces our theoretical framework for diagnosabil-
ity checking. Section 4 presents a scalable algorithm for dis-
tributed diagnosability checking. In section 5, related works
are compared and discussed.

2 Background

2.1 Diagnosability in discrete-event systems
The system is modelled using classical automata:
this for-
malism is aimed at modelling any discrete event system with
multiple faults [Sampath et al., 1995]. We call a fault or a
critical event any event whose occurrence a monitoring agent
aims to identify. We suppose that a fault is not observable
and occurs in one component. The modelling of the system
is modular: each component has a local model and a syn-
chronisation operator Sync is deﬁned in order to implicitly
represent the global model of the system.

Deﬁnition 1 (Model of a component) The
of
is
ﬁnite
Gi = (cid:3)Xi, Σi, x0i , Ti(cid:4), where

component

the

the

i

model
state machine

}),

• Xi is the set of states (Xi = {x1i, . . . , xmi
• Σi is the set of events,
• x0i is the initial state, and
• Ti is the transition set (Ti ⊆ Xi × Σi × Xi).
The set of events Σi is divided into four disjoint parts: Σoi
is the set of observable events, Σsi is the set of events shared
among components (they represent communications between
components), Σfi is the set of unobservable fault events and
Σui is the set of other unobservable events.

G1

f1

s1

x0

x1

s2

x3

o1

x2

o1

x4

s1

o1

x5

G2

y0

s1

o2

s2

o3

y1

y2

Figure 1: Model of a system deﬁned by two components.
Solid lines denote observable transitions, dashed lines shared
transitions and dotted lines failure transitions.

Figure 1 illustrates a system composed of two local mod-
els deﬁned as above. The synchronisation operation, de-
noted Sync({M1, . . . , Mn}, S), is the classical synchronisa-
tion operation on the n ﬁnite state machines {Mi} based on
the set of shared events S. The result M of the synchroni-
sation is the subset of the Cartesian product M1 × . . . × Mn
restricted with the following rules.

• If e ∈ S then from any state (x1, . . . , xn), the event
e can occur if for all machines Mj where e can occur,
there exists in Mj a transition xj

e−→ x(cid:2)
j.

• If e (cid:8)∈ S then from any state (x1, . . . , xn), the event
e can occur if there exists a machine Mj where there
exists a transition xj

e−→ x(cid:2)
j.

The models of components and the operation Sync deﬁne
the decentralized model of the system. The global model G
then results from the synchronised product of the n compo-
nents {Gi} where the shared events are synchronised:

(cid:2)
{G1, . . . , Gn},

n(cid:3)

G = Sync

(cid:4)

Σsi

.

i=1

) of G.

A behaviour of the system is then represented by a
transition path in G starting from the initial state x0 =
(x01 , . . . , x0n
In the following, a path will always
denote a transition path starting from the initial state. More-
over, as in [Sampath et al., 1995], the observable behaviour
of the system is supposed to be live, which means that for
any inﬁnite path p of G, the sequence of observable events
associated with p and denoted obs(p), is inﬁnite.

The classical diagnosability property of the system is a
global property deﬁned on the paths in G [Sampath et al.,
1995]. Two paths p and p(cid:2)
in G are distinguishable iff
obs(p) (cid:8)= obs(p(cid:2)). Let p = pF sF denote a path such that
pF is a path ending with the occurrence of a fault F to a state
xF and sF is a subpath whose initial state is xF . The diag-
nosability of fault F is then deﬁned as follows:

Deﬁnition 2 F is diagnosable iff

∀p = pF sF , ∃l ∈ N, |obs(sF )| > l ⇒

(cid:2)

(∀p

such that obs(p) = obs(p

(cid:2)), F occurs in p

(cid:2))

If a fault is diagnosable then a diagnostic algorithm can
diagnose its occurrence with certainty based on a ﬁnite se-
quence of observations. Diagnosability checking thus re-
quires the search for an inﬁnite path p(cid:2)
, i.e. a path containing
a cycle, with obs(p) = obs(p(cid:2)) such that F is not in p(cid:2)
. The
pair (p, p(cid:2)) is called a critical pair [Cimatti et al., 2003].

2.2 Twin plant method for checking diagnosability
We now recall a centralised method to check whether F is di-
agnosable or not: the twin plant method [Jiang et al., 2001].
For the sake of clarity in the rest of the paper, the twin plant
method is presented in an original manner, based on the de-
centralised model instead of the global model.

Deﬁnition 3 (Local diagnoser) The local diagnoser of a
component Gi is the nondeterministic ﬁnite state machine

(cid:5)Gi = (cid:3) (cid:5)Xi, (cid:5)Σi,(cid:5)x0i , (cid:5)Ti(cid:4) where
• (cid:5)Xi is the set of states (
• (cid:5)Σi is the set of events (
• (cid:5)x0i
• (cid:5)Ti ⊆ (cid:5)Xi × (cid:5)Σi × (cid:5)Xi is the transition set (x, F) σ−→

(cid:5)Xi ⊆ Xi × F with F ⊆ 2Σfi ),
(cid:5)Σi = Σoi

= (x0i , ∅) is the initial state, and

∪ Σsi ),

(x(cid:2), F (cid:2)) such that there exists a transition sequence
i =
x
{σ1, . . . , σm} ⊆ Σfi
).

in Gi with Σ(cid:2)
i ∩ Σfi

∪ Σui and F (cid:2) = F ∪ (Σ(cid:2)

σ1−→ x1 · · ·

σm−−→ xm

σ−→ x(cid:2)

IJCAI-07

576

The top of Figure 2 depicts such a local diagnoser. The
basic idea of a twin plant is to build a machine that compares
every pair of paths (p, p(cid:2)) in the system that have the same
observable behaviour, i.e. obs(p) = obs(p(cid:2)). A local twin
plant is essentially the same type of machine but the paths
are local to a component. A local twin plant is based on the
i (right) of
synchronisation of two instances
the same diagnoser based on the observable events Σoi
=
Σl
oi . Since only observable behaviours are compared,
oi
the shared events must be distinguishable in both instances: in

i (left) and

(cid:5)Gr

(cid:5)Gl

= Σr

(cid:5)Gi is renamed

i ), any shared event σ ∈ Σsi from

si (resp. r:σ ∈ Σr

si ).

(cid:5)Gl

i (resp.
l:σ ∈ Σl

(cid:5)Gr

Deﬁnition 4 (Local twin plant) The local twin plant of Gi
is the ﬁnite state machine

(cid:6)
{(cid:5)Gl
i, (cid:5)Gr

(cid:7)

ˆGi = Sync

i }, Σoi

.

twin plant

One state of a local

is a couple ˆx =
((xl, F l), (xr, F r)) that represents two possible diagnoses
(the left one and the right one) given the same observable se-
quence. If F belongs to F l ∪ F r
then F
cannot be diagnosed in this state with certainty. In this case,
the state ˆx is called F-nondiagnosable. Otherwise it is called
F-diagnosable. Figure 2 illustrates a local twin plant for the
diagnoser shown at the top of the same ﬁgure. Its state labels
1 (middle) and
(top) are composed of the state labels of
(bottom). Circular nodes denote f1-nondiagnosable states.

but is not in F l ∩ F r

(cid:5)Gr

(cid:5)Gl

1

x0, {}

s1

s2

x3, {}

x2, {f1}

o1

o1

x4, {}

x4, {f1}

s1

o1

s1

o1

x5, {}

x5, {f1}

l:s1

ˆx0
x0, {}
x0, {}

ˆx1
x3, {}
x0, {}

r:s1

r:s2

ˆx2

x3, {}
x3, {}

ˆx3
x3, {}
x2, {f1}

o1

o1

ˆx4

x4, {}
x4, {}

ˆx7
x4, {}
x4, {f1}

l:s1

l:s1

ˆx5
x5, {}
x4, {}

o1

ˆx8
x5, {}
x4, {f1}

o1

r:s1

r:s1

ˆx6
x5, {}
x5, {}

ˆx9
x5, {}
x5, {f1}

Figure 2: Local diagnoser
ˆG1 (bottom) of component G1 shown in Figure 1.

(cid:5)G1 (top) and part of the twin plant

In the following, ω represents any set of components Gω =
} of the system with |ω| ≥ 1. The ω-coupled
{Gj1 , . . . , Gj|ω|
twin plant is the twin plant of ω obtained by synchronisation
of the local twin plants.

Deﬁnition 5 (ω-coupled twin plant) The ω-coupled twin
plant is

ˆGω = Sync

(cid:2)
{ ˆGj1, . . . , ˆGj|ω|

},

j|ω|(cid:3)

i=j1

(cid:4)

(Σl
si

∪ Σr
si

)

.

By extension, a state ˆx = (ˆxj1 , . . . , ˆxj|ω|

) is called F-
nondiagnosable if there exists a state ˆxjm which is locally
F-nondiagnosable.

si , Σr

The synchronisation operation Sync is commutative and
si and Σoi are disjoint sets by
associative, moreover Σl
deﬁnition. Therefore any ω-coupled twin plant can be also
obtained by ﬁrst synchronising the local diagnosers over the
set of shared events, to obtain the diagnoser of ω, followed by
the synchronisation of two instances of the later over the set
of observable events.

Consequently, considering ω = G = {G1, . . . , Gn} the
G-coupled twin plant represents exactly the global twin plant
(GTP for short) of the system where all paths of G with the
same observable behaviour are compared, hence the follow-
ing fundamental result.

Theorem 1 F is diagnosable in G iff, in the G-coupled twin
plant, there is no path p with a cycle containing at least one
observable event and one F -nondiagnosable state.

Such a path p represents a critical pair (p1, p2): in the fol-
lowing, p is called a critical path. The twin plant method
searches for such a path in the GTP.

3 Theoretical framework

We now show how to distribute the diagnosability check
for a fault F without computing the GTP. The compo-
nent where F may occur is denoted GF in the following.
The terms diagnosable and nondiagnosable respectively de-
note F-diagnosable and F-nondiagnosable. Furthermore,
Sync(G) denotes, without ambiguity, the product of all ﬁ-
nite state machines in G synchronised over their shared events
only.

Considering the set of local twin plants { ˆG1, . . . , ˆGn} de-
ˆGF contains diagnosability informa-
ﬁned in section 2, only
tion about F . The main idea of the distributed checking is to
propagate ﬁrstly the diagnosability information to the other
local twin plants. After the propagation, it is possible to de-
cide locally which parts of the local twin plants are relevant
to solve the diagnosability problem. Finally, for each local
twin plant, a reduced twin plant is computed by removing all
irrelevant parts.

3.1 Propagation of diagnosability information

ˆGF .

ˆGF
The propagation of the diagnosability information from
to all other local twin plants is based on their connectivity
with respect to
Deﬁnition 6 (α-connectivity Con(α, γ)) The
of
ﬁnite state machines connected to the ﬁnite state ma-
chine γ by distance α is recursively deﬁned as follows.
Con(0, γ) = {γ}
Con(α, γ) = {γ1 | ∃γ2 ∈ Con(α − 1, γ) such that

set

γ1 and γ2 share at least one event and
γ1 /∈ Con(β, γ) for all β < α}.

Components γ1 and γ2 are connected if γ1 ∈ Con(1, γ2).
The set transCon(γ) denotes the set of components whose
behaviour can possibly inﬂuence that of γ (transCon(γ) =

IJCAI-07

577

(cid:8)n−1

α=0

Con(α, γ)) where n is the number of components in

the system.

Reducing a local twin plant

ˆGi consists in ﬁnding a set of
states, denoted P( ˆGi), that can possibly be involved in the
nondiagnosable states of GTP. These possibly nondiagnos-
able states P( ˆGi) are determined by analysing the connectiv-
ity between the component Gi and the component GF .

Deﬁnition 7 (Possibly nondiagnosable states) The set of
possibly nondiagnosable states P( ˆGi) of a local twin plant
ˆGi is determined as follows.
1. P( ˆGi) = {x ∈ ˆXi

| x is nondiagnosable} if Gi ∈

Con(0, GF ) (i.e. Gi = GF )

2. P( ˆGi) = ˆYi if Gi ∈ Con(α, Gf ) with α ∈ N+ and
for all states ˆy ∈ ˆYi and all connected twin plants
Gj ∈ Con(α − 1, GF ) there exists a state (ˆyi, ˆxj) in
the twin plant Sync({ ˆGi, ˆGj}) such that ˆxj is possibly
nondiagnosable.

3. P( ˆGi) = ˆXi if Gi /∈ transCon( ˆGF )
This deﬁnition can then be extended to any state ˆx =

) from any ω-coupled twin plant:

(ˆxj1 , . . . , ˆxj|ω|
Deﬁnition 8 A state ˆx = (ˆxj1 , . . . , ˆxj|ω|
ˆGω is possibly nondiagnosable iff
twin plant
∈ P( ˆGji

∀i ∈ {1, . . . , |ω|}, ˆxji

).

) in a ω-coupled

ˆG2 (see Figure 3). Since

For example, to propagate the diagnosability information
ˆG1, the lo-
of f1 in G1 to G2 (see Figure 1) we compute
cal nondiagnosable states (see Figure 2) and ﬁnally the twin
ˆG1 and
ˆG2 share the events
plant
ˆG2 ∈ Con(1, ˆG1)). Thus
l:s1 and r:s1 they are connected (
to obtain P( ˆG2), a synchronisation of
ˆG1 and
ˆG2 leading to
ˆG(cid:2)
ˆG(cid:2)
only states (ˆx3, ˆy3) and
(ˆx7, ˆy3) are composed of a state in P( ˆG1). Thus only state
ˆG1 is the only
ˆy3 could be possibly nondiagnosable. Since
connected twin plant in Con(1 − 1, ˆG1) there is no need to
consider other local twin plants to check whether ˆy3 is indeed
in P( ˆG2). Therefore the set of possibly nondiagnosable states
in

ˆG2 is P( ˆG2) = {ˆy3}.

is required (see Figure 3). In

r:s2
r:s2

r:s1
r:s1

ˆy3
3

ˆy2
2

l:s1
l:s1

ˆy0
0

ˆy1
1

o2
o2

ˆx0 , ˆy0
 (0, 0) 

l:s1
l:s1

ˆx1 , ˆy1
 (1, 1) 

r:s2
r:s2

ˆx3 , ˆy3
 (3, 3) 

o1
o1

ˆx7 , ˆy3
 (7, 3) 

Figure 3: Part of twin plant
Figure 1) and its synchronisation
ˆG1 depicted in Figure 2.

ˆG2 (left) for component G2 (see
(right) with the part of

ˆG(cid:2)

Every state that is not possibly nondiagnosable is certainly
diagnosable. This results from the following relationship be-
tween nondiagnosable and possibly nondiagnosable states of
the GTP:
Theorem 2 A state ˆx in the GTP is nondiagnosable iff it is
possibly nondiagnosable.

ˆGi ∈ Con(α, ˆGF ).

Proof:
(⇒) Suppose there exists a state ˆx = (ˆx1, . . . , ˆxn) in the GTP
such that ˆx is nondiagnosable and a state ˆxi such that
ˆxi /∈ P( ˆGi). Cond. 3 of def. 7 implies that
ˆGi is in
transCon( ˆGF ). Since ˆx is nondiagnosable the state ˆxF
ˆGF , also contained in ˆx, is nondiagnosable. It fol-
from
lows that ˆxF ∈ P( ˆGF ) (see cond. 1 of def. 7), so
ˆGi
is in transCon( ˆGF ) \ { ˆGF }. Therefore, there exists an
α > 1 such that
Cond. 2 of def. 7 ensures that there is a twin plant
ˆGj ∈ Con(α − 1, ˆGF ) in which all states ˆx(cid:2)
j, for which
j , ˆxi) is in Sync({ ˆGj, ˆGi}), do not belong to P( ˆGj).
(ˆx(cid:2)
ˆGj and
Since GTP results from the synchronisation of
ˆGi, it means that ˆxi /∈ P( ˆGi) implies that ˆxj /∈ P( ˆGj )
where ˆxj denotes the state from
The previous reasoning led from the existence of a state
ˆGi = ˆHα ∈ Con(α, ˆGF )
ˆxi = ˆyα in a twin plant
with ˆyα /∈ P( ˆHα) to the existence of a state ˆxj = ˆyα−1
ˆGj = ˆHα−1 ∈ Con(α − 1, ˆGF ) with
in a twin plant
ˆyα−1 /∈ P( ˆGα−1). By recursively applying α − 1 times
the same reasoning, it follows that there exists a twin
ˆH0 belonging to Con(0, ˆGF ) and a state ˆy0 from
plant
ˆH0 belonging to ˆx such that ˆy0 /∈ P( ˆH0). Since
ˆGF is
the only element in Con(0, ˆGF ) (see def. 6) it means
ˆGF and ˆy0 = ˆxF . It ﬁnally follows
that
that ˆxF /∈ P( ˆGF ), which is a contradiction.

ˆGj contained in ˆx.

ˆH0 is actually

(⇐) Suppose there exists a state ˆx ∈ P(GT P ) containing the
local state ˆxF ∈ ˆGF such that ˆx is diagnosable. This
implies that ˆxF /∈ P( ˆGF ). Therefore ˆx /∈ P(GT P ) (see
def. 7) which contradicts the assumption.

(cid:2)

3.2 Distributed diagnosability veriﬁcation
We now show how we can exploit Theorem 2 ﬁrstly to re-
duce the size of twin plants by removing all states that are
irrelevant to the diagnosability test (see Lemma 1 below) and
secondly to distribute the diagnosability test to a set of twin
plants.

Deﬁnition 9 (Reduced twin plant) A twin plant is reduced
if all its states are either initial or on a path whose target
state is possibly nondiagnosable.

In the following, R( ˆG) denotes the twin plant that is ob-
tained by removing all states ˆx /∈ P( ˆG) of
ˆG that do not
lead to a possibly nondiagnosable state. To simplify the syn-
chronisation of reduced twin plants the event set of the lat-
ter remains unchanged (R( ˆΣ) = ˆΣ), that is, even if R( ˆG)
does not contain any transitions labelled ˆσ ∈ ˆΣ, the event
still belongs to its event set. Thus the following equivalence
: R(Sync({ ˆG, ˆG(cid:2)})) =
holds for any two twin plants
R(Sync({R( ˆG), R( ˆG(cid:2))})) (see also def. 7).

ˆG,

ˆG(cid:2)

Lemma 1 The global twin plant
contains exactly the same critical paths as R( ˆG).

ˆG = Sync({ ˆG1, . . . , ˆGn})

IJCAI-07

578

ˆG is
Proof: Since the target state of every critical path p in
part of a cycle containing at least one nondiagnosable state
ˆx (see Theorem 1), every state in p leads to ˆx and hence to
a state that is entirely composed of possibly nondiagnosable
states. Thus, p is also a path in R( ˆG). Further, since every
path in R( ˆG) is also a path in
ˆG it follows that R( ˆG) contains
only the critical paths deﬁned in

ˆG.

(cid:2)

We now show how we can decide the diagnosability prob-
lem based on a set of distributed twin plants without requiring
the computation of the GTP.

(cid:8)k

Theorem 3 A fault F in system G is diagnosable iff there
ˆGR = { ˆGω1, . . . , ˆGωk
}
exists a set of reduced twin plants
such that

1. {ω1, . . . , ωk} is a partition of the system components

(

i=1 ωi = G and ωi ∩ ωj = ∅ for all ωi (cid:8)= ωj ) and

2. no plant in

ˆGR contains an observable possibly nondi-
ˆσ−→
−−→ ˆx with at least one possibly nondiagnosable

agnosable cycle (OPNC for short) (i.e. a path p = ˆx
ˆx(cid:2) · · · ˆσ(cid:2)(cid:2)
state and one observable transition label).

Proof:
(⇒) Suppose F is diagnosable, but there does not exist such a
set GR
. The GTP, which satisﬁes cond. 1, also contains
an OPNC and thus an observable nondiagnosable cycle
(see Theorem 2). This implies that F is not diagnosable
(see Theorem 1) and thus contradicts the assumption.

(⇐) Suppose now that there exists such a set GR

and F is not
diagnosable. From the nondiagnosability of F it follows
that there exists an observable nondiagnosable cycle in
the GTP and hence an OPNC with an observable event
σ ∈ Σoi (see Theorem 2). Based on the synchronisa-
tion operation (see page 2) it means that every ω-coupled
ˆGω with Gi ∈ ω contains an OPNC. Thus ev-
twin plant
ery set satisfying cond. 1, and therefore involving Gi,
does not satisfy cond. 2. Hence there does not exists
such a set GR
(cid:2)

which contradicts the assumption.

4 Algorithm

This section presents a scalable algorithm that exploits The-
orem 3 to reduce the search space of the diagnosability anal-
ysis by distributing it on several reduced twin plants. Every
set of reduced twin plants GR
represents a partition of the
components of the system and the challenge is to ﬁnd one
that contains no OPNCs and thus proves that F is diagnos-
able. OPNCs can be removed by synchronising connected
twin plants. Therefore this operation is the basis for the dis-
tributed diagnosability check (see Algorithm 1).

The algorithm performs as follows. After the initialisa-
tion and the computation of the local reduced twin plants
(line 3-5), the basic idea is to synchronise them pairwise
using the function Sync(R( ˆGi), R( ˆGi(cid:2) )). The synchroni-
sation is performed only if either R( ˆGi) or R( ˆGi(cid:2) ) has

an OPNC. This pairwise synchronisation and the reduc-
tion of the resulting twin plant is computed using function
RedP airwiseSync( ˆG) (line 7). The selection of pairs to
synchronise is important since it has a strong impact on the
algorithm efﬁciency. Among the different selection heuris-
tics, e.g. [Lamperti and Zanella, 2003], [Pencol´e and Cordier,
2005], a common rule must be respected: a pair of twin plants
to synchronise must be connected otherwise the synchronisa-
tion will not remove OPNCs.

The synchronisation operation is repeated step by step until

the algorithm stops due to one of the following causes.

(1) None of the twin plants in

ˆG contains an OPNC, that is,
has then been determined which veriﬁes

a partition GR
that fault F is diagnosable (see Theorem 3).

(2) A twin plant contains an OPNC that cannot be removed
by further synchronisations. This is the case if the re-
duced GTP has been computed which involves all com-
ponents.

(3) Due to ﬁnite computational resources, the algorithm
must stop.
In this case it returns a set of twin plants
with OPNCs that provides all possible reasons of why
F might not be diagnosable. At this level, the nondiag-
nosability of F is not certain but it can be deduced that
any subset of components involved in an element of the
partition is not sufﬁcient to diagnose F with certainty.

Algorithm 1 Distributed diagnosability check

1: INPUT:

- component models G1, . . . Gn of the system
- fault F that can occur in component GF

2: Initialisations:

ˆG ← ∅

Set of relevant twin plants
ˆGi for all components Gi and

ˆG), and SufﬁcientMemory(

ˆG) and

3: Compute local twin plants

ˆG

add them to
ˆG ← GetN onDiagStateLab( ˆG, ˆGF )

4:
5: Reduce all twin plants in
6: while ExistsOPNC(

ˆG

NrElements(

ˆG) > 1 do

ˆG ← RedP airwiseSync( ˆG)
ˆG) is false then

7:
8: end while
9: if ExistsOPNC(
10:
11: else
12:

return “F is diagnosable”
ˆGcyc ← GetT P sW ithOP N C( ˆG)
return

ˆGcyc

13:
14: end if

In case (2), that is if F is not diagnosable, all critical paths
are returned. They provide a complete diagnosability analy-
sis of the undistinguishable behaviours that cause the nondi-
agnosability of F . This information also contains a synthetic
view of the nondiagnosability of F .

Extracting this

in

consists
ˆx = (ˆxj1 , . . . , ˆxj|ω|

considering

synthetic view from the OPNCs
state
)), . . . ,

nondiagnosable
j1 , F r
j1

every
) = ((xl

j1 , F l
j1

), (xr

IJCAI-07

579

(cid:8)|ω|

F l

i=1

i=1

j|ω| , F l

j|ω|

), (xr

F r

If one label

j|ω| )) in the OPNCs.

j|ω| , F r
((xl
(cid:8)|ω|
contains F (i.e. F l =
i ) and the other label is
i = ∅) it means that there exists
empty (i.e. F r =
an inﬁnite nominal behaviour in the system which cannot
be distinguished from a faulty behaviour. In this case, the
observation of the system does not guarantee that a fault can
be detected, it must be updated (respeciﬁed) in order to guar-
antee the diagnosability of F . If the label F r
is not empty,
then the diagnosability problem results from the fact that the
occurrence of the faults F r
cannot be discriminated from the
occurrence of F . In this case, a designer can decide that the
discrimination of F with F r
is not important and abstract the
set of faults to only diagnose a fault Fabs = F ∨ F r

.

5 Discussion

Diagnosability on DES is a problem that has been introduced
in [Sampath et al., 1995] where the authors solve it by de-
tecting some transition cycles of ambiguous states in a global
diagnoser. The global diagnoser is equivalent to the deter-
mination of the local diagnoser (see Deﬁnition 3) where the
global model G is seen as a component. The main drawback
of this method results from the diagnoser computation which
is exponential in the number of states in the global model (de-
termination) and as a consequence is doubly exponential in
the number of components in the system. [Jiang et al., 2001;
Yoo and Lafortune, 2002] then propose new algorithms which
are only polynomial in the number of states in G and which
introduce the twin plant method. The question of efﬁciency is
raised in [Cimatti et al., 2003] where the authors propose to
use symbolic model-checking to test a restrictive diagnosabil-
ity property by taking advantages of efﬁcient model-checking
tools. But, still the diagnosability problem is seen as a test
on a system and not as a deep analysis of the reasons why a
system is not diagnosable. In [Pencol´e, 2004], the author in-
troduces the problem of analysing diagnosability of a system
in a decentralised way by aggregating local non reduced twin
plants until a critical path is detected. In this method, the di-
agnosability analysis is not scalable and only partial since the
feedback is just about the detected critical path.

6 Conclusion and future work

Our theoretical framework solves the diagnosability problem
in a distributed manner and takes into account the distributed
nature of complex event-driven systems. We have also pro-
posed an algorithm that is scalable in the sense that, if the
problem is too complex to be solved with available computa-
tional resources, it can still provide an approximate analysis
of the diagnosability of the system. In case of a negative an-
swer to the diagnosability problem, we claim that ﬁnding a
counter example is not sufﬁcient to assist any designer of a
system to improve diagnosability. We thus propose a syn-
thetic view of the diagnosability results that summarise the
different reasons why a fault is not diagnosable.

The perspectives of this work are numerous: it is a clear
ﬁrst step to assist any designer to make diagnosable systems
because of the synthetic view of the results instead of a single

counter example. One of our next challenge is the applica-
tion of this framework to provide design recommendations
for improving the diagnosability of health monitoring system
for aircraft maintenance [Ghelam et al., 2006] or to provide
an assistance to the design of composite Web Services [Yan
et al., 2005]. Another challenge is to improve our algorithm
in order to search for optimal partitions where each element
of the partition is as small as possible. From an optimal parti-
tion, we can then derive optimal diagnostic algorithms based
on set of small system parts that still guarantee an accurate
global diagnosis.

Acknowledgments
The authors thank Jussi Rintanen, Alban Grastien and the
anonymous reviewers for useful discussions and comments.

References
[Cimatti et al., 2003] A. Cimatti, C. Pecheur, and R. Cavada.
Formal veriﬁcation of diagnosability via symbolic model
checking.
the 18th International
Joint Conference on Artiﬁcial Intelligence IJCAI’03, pages
363–369, Acapulco, Mexico, 2003.

In Proceedings of

[Ghelam et al., 2006] S. Ghelam, Z. Simeu-Abazi, J.-P. De-
rain, C. Feuillebois, S. Vallet, and M. Glade. Integration
of health monitoring in the avionics maintenance systems.
In Proceedings of SAFEPROCESS’06 , pages 1519–1524,
Beijing, China PR, 2006.

[Jiang et al., 2001] S. Jiang, Z. Huang, V. Chandra, and
R. Kumar. A polynomial time algorithm for diagnosabil-
ity of discrete event systems. IEEE Transactions on Auto-
matic Control, 46(8):1318–1321, 2001.

[Lamperti and Zanella, 2003] G. Lamperti and M. Zanella.
Diagnosis of active systems. Kluwer Academic Publish-
ers, 2003.

[Pencol´e and Cordier, 2005] Y. Pencol´e and M.-O. Cordier.
A formal framework for the decentralised diagnosis of
large scale discrete event systems and its application
to telecommunication networks. Artiﬁcial Intelligence,
164:121–170, May 2005.

[Pencol´e, 2004] Y. Pencol´e. Diagnosability analysis of dis-
tributed discrete event systems. In European Conference
on Artiﬁcial Intelligence (ECAI’04), pages 43–47, Valen-
cia, Spain, 2004.

[Sampath et al., 1995] M. Sampath, R. Sengupta, S. Lafor-
tune, K. Sinnamohideen, and D. Teneketzis. Diagnosabil-
ity of discrete event system. IEEE Transactions on Auto-
matic Control, 40(9):1555–1575, 1995.

[Yan et al., 2005] Y. Yan, Y. Pencol´e, M.-O. Cordier, and
A. Grastien. Monitoring web service networks in a model-
based approach, 3rd european conference on web services
(ecows05). In 3rd European Conference on Web Services
(ECOWS05), V¨axj¨o, Sweden, November 2005.

[Yoo and Lafortune, 2002] T. Yoo

and S. Lafortune.
Polynomial-time veriﬁcation of diagnosability of partially-
observed discrete-event systems.
IEEE Transactions on
Automatic Control, 47(9):1491–1495, 2002.

IJCAI-07

580

