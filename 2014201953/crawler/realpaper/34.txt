Propositional Abduction is Almost Always Hard

Gustav Nordh∗

Bruno Zanuttini

Dept. of Computer & Information Science

GREYC, UMR CNRS 6072

Link¨opings Universitet

S-581 83 Link¨oping, Sweden

gusno@ida.liu.se

Universit´e de Caen, Bd. du Mar´echal Juin

F-14 032 Caen Cedex, France

zanutti@info.unicaen.fr

Abstract

Abduction is a fundamental form of nonmonotonic
reasoning that aims at ﬁnding explanations for ob-
served manifestations. Applications of this pro-
cess range from car conﬁguration to medical diag-
nosis. We study here its computational complex-
ity in the case where the application domain is de-
scribed by a propositional theory built upon a ﬁxed
constraint language and the hypotheses and man-
ifestations are described by sets of literals. We
show that depending on the language the problem is
either polynomial-time solvable, NP-complete, or
2 -complete. In particular, we show that under the
ΣP
assumption P6=NP, only languages that are afﬁne
of width 2 have a polynomial algorithm, and we
exhibit very weak conditions for NP-hardness.

1 Introduction
In this paper we investigate the computational complexity
of abduction, a method of reasoning extensively studied by
Peirce [1955]. Abductive reasoning is used to search for ex-
planations of observed manifestations. The importance of
this problem to Artiﬁcial Intelligence was ﬁrst emphasized
by Morgan [1971] and Pople [1973].

The abductive process has demonstrated its practical im-
portance in many domains.
In particular, it has been used
to formalize processes in medical diagnosis [Bylander et al.,
1991], text interpretation [Hobbs et al., 1993], system diag-
nosis [Stumptner and Wotawa, 2001] and conﬁguration prob-
lems [Amilhastre et al., 2002].

In this paper we are interested in propositional logic-based
abduction, i.e., the background knowledge is represented by a
propositional theory. Even in this framework several formal-
izations of the problem have been studied in the literature,
depending on the syntactic restrictions imposed to the man-
ifestations and on the hypotheses over which explanations
must be formed. We use the following formalization: Given
a propositional theory T formalizing a particular application
domain, a set M of literals describing a set of manifestations,
and a set H of literals containing possible hypotheses, ﬁnd an

∗Supported by the National Graduate School in Computer Sci-

ence (CUGS), Sweden.

explanation for M , that is, a set E ⊆ H such that T ∪ E is
consistent and logically entails M . This framework is more
general than most frameworks studied in the literature; an ex-
ception is the deﬁnition by Marquis [Marquis, 2000], which
allows the manifestation to be encoded by any propositional
formula.

Example 1 Consider the following example from the do-
main of motor vehicles, inspired by [Console et al., 1991].

T

= (¬rich mixture∨¬lean mixture)∧

(rich mixture→ ¬low fuel consumption)∧
(lean mixture→overheating)∧
(low water→overheating),

H = {rich mixture, lean mixture, low water},
M = {¬low fuel consumption, overheating}.

Then E = {rich mixture, low water} is an explanation of
M , while, e.g., {lean mixture,low water} is not because it
does not explain low fuel consumption, and {rich mixture,
lean mixture} is not because it is inconsistent with T .

Formalizations of abduction also differ in the literature
in the notions of preferred explanations: In this setting, the
aim is to compute an explanation that is minimal among all
explanations according to some criteria (e.g., inclusion or
cardinality). A good overview is given by Eiter and Gott-
lob [1995]. However we are not concerned here with these
different notions; we indeed focus on the decision problem
asking whether there exists an explanation at all for a given
instance. This problem is from now on denoted ABDUCTION.
This problem is well studied from the computational com-
plexity perspective [Eshghi, 1993; Selman and Levesque,
1990; Eiter and Gottlob, 1995; del Val, 2000b; 2000a;
Zanuttini, 2003], although with different formalizations of
the problem, as mentioned above. It has been proved that it
2 -complete in the general case [Eiter and Gottlob, 1995],
is ΣP
while propositional deduction is known to be “only” coNP-
complete [Cook, 1971]. This negative result raises the prob-
lem of identifying restricted cases in which ABDUCTION has
computational complexity lower than the general case.

The most natural way to study such restrictions is to study
restrictions on the theories representing knowledge bases.
This is also the approach followed in most of the previous
research in the area. For example, it is known that when the
knowledge base T is a conjunction of Horn clauses, then AB-
DUCTION is NP-complete [Selman and Levesque, 1990].

The ultimate goal of this line of research is to determine the
complexity of every restricted special case of the problem.
The ﬁrst result of this type was proved by Schaefer [1978],
who proved that the satisﬁability problem of conjunctions of
Boolean constraints over a ﬁxed language is either in P or NP-
complete, depending on the language. Recall the result due to
Ladner [1975] stating that if P 6= NP, then there exist decision
problems in NP that are neither in P nor NP-complete. Hence
the existence of dichotomy theorems like Schaefer’s cannot
be taken for granted. Creignou et al.’s book [2001] surveys
such results.

In this paper we completely classify the complexity of AB-
DUCTION in Schaefer’s framework and exhibit a trichotomy.
More precisely, we prove that ABDUCTION is:

• In P if the language is afﬁne of width 2,
• Otherwise, NP-complete if the language is Horn, dual

Horn, bijunctive or afﬁne,
2 -complete.

• Otherwise, ΣP

As far as we know, the (only) polynomial case and the min-
imal NP-hard languages that we exhibit are all new results.
Note that the only property that guarantees a polynomial al-
gorithm is that of being afﬁne of width 2, i.e., the case where
the theory representing the domain is only a conjunction of
constants and (in)equalities between two variables. Thus the
problem is very hard as soon as sets of literals are allowed
as hypotheses and manifestations (instead of atoms or sets of
atoms as in, e.g., [Zanuttini, 2003]).

We do not consider directly the complexity of the search
problem consisting of computing an explanation or asserting
there is none. It is however easily seen that this problem is
hard as soon as ABDUCTION is; as for languages that are
afﬁne of width 2, our proof that ABDUCTION is in P exhibits
an efﬁcient algorithm.

2 Preliminaries
The set of all n-tuples of elements from {0, 1} is denoted by
{0, 1}n. Any subset of {0, 1}n is called an n-ary relation on
{0, 1}. The set of all ﬁnitary relations over {0, 1} is denoted
by BR. A constraint language over {0, 1} is an arbitrary ﬁ-
nite set Γ ⊆ BR. Constraint languages are the way in which
we impose restrictions on the knowledge bases for the AB-
DUCTION problem.

A constraint over the constraint language Γ is an appli-
cation of a relation R in Γ to a tuple of variables, written
R(x1, . . . , xn) (possibly with repeated variables). An assign-
ment m to the variables satisﬁes the constraint R(x1, . . . , xn)
if (m(x1), . . . , m(xn)) is a tuple in R. Such a satisfying as-
signment m is called a model of R(x1, . . . , xn). A theory T
over Γ is a conjunction of constraints over Γ; a model m of
T is an assignment that satisﬁes all its constraints simultane-
ously, denoted m |= T . If there is such a model, T is said to
be satisﬁable. Finally, a theory T entails a theory T ′, written
T |= T ′, if every model of T is a model of T ′.

The unary relations F = {(0)} and T = {(1)}, which
force the value of a variable to 0 and 1 respectively, have
a special role for the ABDUCTION problem. We will often
use the shorthand notation ¬x and x to denote the constraints

F (x) and T (x) respectively. Constraint languages contain-
ing F and T will be of particular importance to us. Given
a constraint language Γ, the idempotent constraint language
corresponding to Γ is Γ ∪ {F, T } which is denoted by Γid.

Given a theory T , V ars(T ) denotes the set of all variables
that occurs in T . Given a set of variables V , Lits(V ) denotes
the set of constraints Sx∈V {F (x) ∪ T (x)} or, equivalently,
the set of all literals formed upon the variables in V . The
opposite of a literal ℓ is written ℓ. Given a set of literals L,
their conjunction is denoted by V L.

The ABDUCTION problem restricted to the ﬁnite constraint
language Γ is denoted by ABDUCTION(Γ) and is deﬁned as
follows; the problem is said to be parameterized by Γ.
Problem 2 (ABDUCTION(Γ)) An
ABDUCTION(Γ) consists of a tuple (V, H, M, T ), where:

instance P of

• V is a set of variables,
• H ⊆ Lits(V ) is the set of hypotheses,
• M ⊆ Lits(V ) is the set of manifestations, and
• T is a theory over Γ with V ars(T ) = V .

The question is whether there exists an explanation for P,
i.e., a set E ⊆ H such that T ∧ V E is satisﬁable and T ∧
V E |= V M .

The size of P = (V, H, M, T ) is the total number of oc-

currences of variables in it.

Recall the following standard restrictions on the constraint

languages (see, e.g. [Creignou et al., 2001]).
Deﬁnition 3 (restrictions on Γ)

• Γ is Horn if every relation R in Γ is the set of models of
a CNF formula having at most one unnegated variable
in each clause,

• Γ is dual Horn if every relation R in Γ is the set of models
of a CNF formula having at most one negated variable
in each clause,

• Γ is bijunctive if every relation R in Γ is the set of models
of a CNF formula having at most two literals in each
clause,

• Γ is afﬁne if every relation R in Γ is the set of models of
a system of linear equations over GF (2), the ﬁeld with
two elements,

• Γ is afﬁne of width 2 if every relation R in Γ is the set
of models of a system of linear equations over GF (2) in
which each equation has at most 2 variables.

We emphasize that Γ is assumed to be ﬁnite in the def-
inition of ABDUCTION(Γ). Moreover, it parameterizes the
problem, and is not part of its input. Thus we can assume
any convenient presentation of the relations in Γ is stored in
a catalog; thus we will assume, e.g., that if Γ is Horn then a
theory T over Γ is given as a CNF formula with at most one
unnegated variable per clause.

We now recall Schaefer’s result, which will be of great im-
portance throughout the paper. Call SAT(Γ) the problem of
deciding whether a given theory over Γ is satisﬁable. Schae-
fer completely classiﬁed the complexity of SAT(Γ); we only
report the result for idempotent constraint languages.

Theorem 4 ([Schaefer, 1978]) SAT(Γid) is in P if Γ is Horn,
dual Horn, bijunctive or afﬁne. Otherwise it is NP-complete.

Finally, we assume that the reader is familiar with the basic
notions of complexity theory, but we brieﬂy recall the follow-
ing. P is the class of decision problems solvable in determin-
istic polynomial time. NP is the class of decision problems
solvable in nondeterministic polynomial time. ΣP
2 = NPNP
is the class solvable in nondeterministic polynomial time with
access to an NP-oracle. A problem is NP-complete (ΣP
2 -
2 ) is polynomial-time
complete) if every problem in NP (ΣP
reducible to it. Throughout the paper we assume P6=NP6=ΣP
2 .

3 Polynomial case
The following proposition gives the only (maximal) polyno-
mial case of ABDUCTION(Γ). Note that, as mentioned in the
introduction, its proof gives a polynomial algorithm that com-
putes an explanation if there exists one.

Throughout the proof we write (ℓ = a) (a ∈ {0, 1}) for the
linear equation (x = a) if ℓ = x, and for the linear equation
x = a ⊕ 1 if ℓ = ¬x. The shorthand (ℓ = ℓ′) is used in the
same manner and is equivalent to (ℓ ⊕ ℓ′ = 0).
Proposition 5 If Γ is afﬁne of width 2, then ABDUCTION(Γ)
is polynomial.
Proof
Let P = (V, H, M, T ) be an instance of
ABDUCTION(Γ), where Γ is afﬁne of width 2. If M ′ is the set
of all manifestations m such that T 6|= m, then obviously the
explanations of P are exactly those of (V, H, M ′, T ). Since
T |= m can be decided efﬁciently with Gaussian elimination
on T ∧ (m = 0), we assume M ′ = M .

For every manifestation m ∈ M write Em for the set of
literals {h ∈ H | T |= (h = m)}; once again every Em can
be computed efﬁciently with Gaussian elimination on T ∧
(h ⊕ m = 1) for every h ∈ H. We show that P has an
explanation if and only if T ∧ Vm∈M V Em is satisﬁable and
no Em is empty. Since the satisﬁability of T ∧ Vm∈M V Em
can be decided efﬁciently with again Gaussian elimination
(on T ∧Vm∈M Vh∈Em(h = 1)), this will conclude the proof.
Assume ﬁrst P has an explanation E. Then T ∧ V M is
consistent; since for every m ∈ M and h ∈ Em we have
T |= (h = m), we also have T ∧ V M |= T ∧ Vm∈M V Em,
and thus T ∧ Vm∈M V Em is satisﬁable. Now we also have
∀m ∈ M, T |= (V E → m). Since T is afﬁne of width 2 it is
bijunctive, thus every clause entailed by T can be minimized
into a bijunctive one; since T ∧V E is satisﬁable and T 6|= m,
the only possibility is a minimal clause of the form h → m
with h ∈ E. But since T is afﬁne this implies that m → h
also is an implicate of it, and ﬁnally we have T |= (h ⊕ m =
0), which shows that Em is nonempty. For more details we
refer the reader to [Zanuttini and H´ebrard, 2002]. Conversely,
assume T ∧ Vm∈M V Em is satisﬁable and no Em is empty.
Then since (h ⊕ m = 0) |= (h → m) it is easily seen that
Vm∈M V Em is an explanation for P.
2

4 NP-complete cases
We now exhibit the NP-complete cases of ABDUCTION(Γ).
Since T ∧ V E |= V M holds if and only if T ∧ V E ∧ ℓ is

unsatisﬁable for every ℓ ∈ M , the following result is obvious.
Lemma 6 If SAT(Γid) is in P, then ABDUCTION(Γ) is in NP.
We ﬁrst establish NP-completeness for particular lan-

guages. In Section 5 we will establish more general results.

Let R¬x∨y = {(1, 1), (0, 1), (0, 0)}, i.e., the set of models
of ¬x ∨ y. Observe that R¬x∨y is both Horn and dual Horn.
Proposition 7 ABDUCTION({R¬x∨y}) is NP-complete.
Proof Membership in NP follows from Theorem 4 and
Lemma 6. As regards hardness, we give a reduction from the
NP-complete problem MONOTONE-SAT [Garey and John-
son, 1979], i.e., the satisﬁability problem for CNF formu-
las where each clause contains either only positive literals
or only negative literals. Let ψ = Vk
i=1 Pi be
such a formula, where each Ni is a negative clause, written
Ni = Wνi
i , and every Pi is a positive clause written
Pi = Wπi
i . We build the instance P = (V, H, M, T ) of
ABDUCTION(R¬x∨y) where:

j=1 ¬xj
j=1 yj

i=1 Ni ∧ Vℓ

• V = {γi

• T = Vk

| i = 1, . . . , k} ∪ {δi

| i = 1, . . . , ℓ} ∪
V ars(ψ); ¬γi will intuitively represent satisfaction of
clause Ni and δi, that of clause Pi
i ∨ ¬γi) ∧ Vℓ

i ∨ δi); this
encodes the implications ¬xj
i → δi, i.e.,
the fact that Ni (Pi) is satisﬁed if at least one of the ¬xj
i
(yj

j=1(¬yj
i → ¬γi and yj

i ), j ∈ {1, . . . , νi} (j ∈ {1, . . . , πi}) is

i=1 Vπi

i=1 Vνi

j=1(xj

• H = Lits(V ars(ϕ))
i=1 ¬γi ∧ Vℓ
• M = Vk

i=1 δi.

Obviously enough,
the theory T is over the language
{R¬x∨y}. Now it is easily seen that if ψ has at least one
model, say m, then E = {ℓ | m |= ℓ} is an explanation for
P, and that if P has an explanation E, then any assignment
m to V ars(ψ) with ∀ℓ ∈ E, m |= ℓ is a model of ψ.
2

Similarly, we now prove that ABDUCTION(Γ) is NP-
complete if Γ is the singleton language containing only
Rx∨y = {(1, 1), (1, 0), (0, 1)}.
Proposition 8 ABDUCTION({Rx∨y}) is NP-complete.
Proof Since Rx∨y is dual Horn, membership in NP fol-
lows from Theorem 4 and Lemma 6. As for hardness, we
give a reduction from MONOTONE-SAT (see the proof of
Proposition 7), where positive clauses in an instance of this
problem are restricted to contain at most two literals. Thus
an instance of this problem is a formula of the form ψ =
Vk
i ’s are variables and
every Ni is a negative clause written Ni = Wνi
i . The
NP-completeness of this restricted problem follows directly
from Schaefer’s result [1978].

i ), where the yj

i=1 Ni ∧ Vℓ

j=1 ¬xj

i=1(y1

i ∨ y2

an

Given

instance ψ of MONOTONE-SAT

as
above we build the instance P = (V, H, M, T ) of
ABDUCTION({Rx∨y}) where:

• V = {γi | i = 1, . . . , k} ∪ V ars(ψ); γi will intuitively

represent satisfaction of clause Ni

• T = Vk

i=1 Vνi

j=1(xj

i ∨ γi) ∧ Vℓ

i=1(y1

(xj

i ∨ γi) encode the implications ¬xj

i ); clauses

i ∨ y2
i → γi

• H = Lits(V ars(ϕ))
• M = Vk

i=1 γi.

We show that ψ has a model if and only if P has an ex-
planation. Assume ﬁrst that ψ has a model m; then it is
easily seen that E = {ℓ | m |= ℓ} is an explanation for
P. Now assume P has an explanation E. Then from
∀i = 1, . . . , k, T ∧ V E |= γi it follows that for every
i = 1, . . . , k E contains at least one ¬xj
i , and thus any as-
signment satisfying E satisﬁes every negative clause of ψ; on
the other hand, since T ∧ V E is satisﬁable there is a model
m of T ∧ V E that satisﬁes every positive clause of ψ, and
this m thus satisﬁes ψ.
2

The following proposition can be shown with the same

proof as Proposition 8 with all variables renamed.
Proposition 9 Let R¬x∨¬y
ABDUCTION({R¬x∨¬y}) is NP-complete.

= {(1, 0), (0, 1), (0, 0)}.

We ﬁnally prove that ABDUCTION(Γ) is NP-complete for
a particular afﬁne language. This will be achieved by re-
ducing to it another important problem in nonmonotonic rea-
soning, namely the inference problem for propositional cir-
cumscription. A model m = (m1, . . . , mn) of a formula
ϕ is said to be a minimal model of ϕ if there is no model
n) of ϕ such that m 6= m′ and ∀i =
m′ = (m′
1, . . . , n, m′

1, . . . , m′
i ≤ mi.

Durand and Hermann proved that the inference problem
for propositional circumscription of afﬁne formulas is coNP-
complete. In the process, they proved the following theorem.
Theorem 10 ([Durand and Hermann, 2003]) The problem
of deciding whether there is a minimal model of a given afﬁne
formula ϕ that does not satisfy a given negative clause (¬q1 ∨
. . . ∨ ¬qn) (∀i = 1, . . . , n, qi ∈ V ars(ϕ)) is NP-complete.

A careful reading of their proof shows that the theorem
remains true even if the linear equations in the input afﬁne
formulas are all restricted to contain at most 6 variables. We
thus deﬁne the language Γ6af f to be the set of all k-ary afﬁne
relations with k ≤ 6. Obviously, Γ6af f is ﬁnite, which is nec-
essary for problem ABDUCTION(Γ6af f ) to be well-deﬁned.
Proposition 11 ABDUCTION(Γ6af f ) is NP-complete.
Proof Membership in NP follows from Theorem 4 and
Lemma 6. As for hardness,
let ϕ be a formula and
q1, . . . , qn ∈ V ars(ϕ). We show that the clause (¬q1 ∨ . . . ∨
¬qn) is false in some minimal model of ϕ if and only if the
abduction problem with T = ϕ, M = {q1, . . . , qn}, and
H = {¬x | x ∈ V ars(ϕ)\{q1, . . . , qn}} has an explanation,
which will conclude by Theorem 10 and the above remark.

Assume ﬁrst that (¬q1 ∨ . . . ∨ ¬qn) is false in a minimal
model m of ϕ. Deﬁne E to be {¬xi | m |= ¬xi}. Since m |=
ϕ by assumption and m |= V E by construction, ϕ ∧ V E is
satisﬁable. Now assume for sake of contradiction that there
is m′ satisfying ϕ ∧ V E ∧ (¬q1 ∨ . . . ∨ ¬qn). Then since
m′ |= V E and E is negative we get ∀x ∈ E, m′(x) ≤ m(x);
now for x ∈ V ars(ϕ) \ V ars(E) we have by assumption

m(x) = 1 and thus m′(x) ≤ m(x) again. Finally, we have
∃qi, m′(qi) = 0 < 1 = m(qi), which contradicts the mini-
mality of m. Thus ϕ ∧ V E |= (q1 ∧ . . . ∧ qn) and E is an
explanation.

Conversely, assume that E is an explanation. Then ϕ ∧
V E is satisﬁable; write m for one of its minimal models.
By assumption the formula ϕ ∧ V E ∧ (¬q1 ∨ . . . ∨ ¬qn) is
unsatisﬁable, thus m 6|= (¬q1 ∨. . .∨¬qk). We also have m |=
ϕ by assumption. Finally, assume for sake of contradiction
that m is not a minimal model of ϕ, and let m′ be such that
m′ |= ϕ, m′ ≤ m and m′ 6= m. Then since E is negative
(because H is) and m |= V E we have m′
|= V E, thus
m′ |= ϕ∧V E, which contradicts the minimality of m among
the models of ϕ ∧ V E.
2

5 Classiﬁcation
We ﬁnally put together the results in the previous sections
for obtaining our complete classiﬁcation. The concept of a
relational clone is central to our approach.
Deﬁnition 12 (relational clone) Let Γ ⊆ BR. The rela-
tional clone of Γ is written hΓi and is the set of all relations
that can be expressed using relations from Γ ∪ {=} (= is
the equality relation on {0, 1}), conjunction, and existential
quantiﬁcation.

Intuitively, the constraints over hΓi are those which can be

simulated by constraints over Γ.

an

be

Let

(V ′, H ′, M ′, T ′)

The following result states that when studying the com-
plexity of ABDUCTION(Γ) it is enough to consider constraint
languages that are relational clones.
Lemma 13 Let Γ be a ﬁnite constraint language and Γ′ ⊆
hΓi ﬁnite. Then ABDUCTION(Γ′) is polynomial-time re-
ducible to ABDUCTION(Γ).
Proof
of
ABDUCTION(Γ′). By the deﬁnition of a relational clone
there is a set of variables W disjoint from V ′ and a theory
T= over Γ ∪ {=} with V ars(T=) = V= = V ′ ∪ W and
such that T ′ is logically equivalent to the formula ∃W, T=.
Since W is disjoint from V ′ there is no variable occurring in
H ′ or M ′ and in W at the same time, and it is then easily
seen that the abduction problem (V=, H ′, M ′, T=) has an
explanation if and only if (V ′, H ′, M ′, T ′) has one. Now for
every constraint (xi = xj) (i < j) it is enough to replace xj
with xi everywhere in V=, T=, M ′ and H ′ and to remove the
constraint from T= for obtaining a still equivalent instance
(V, H, M, T ) of ABDUCTION(Γ), which concludes.
2

instance

We can reduce even further the set of constraints languages

a

is

constraint
time

ﬁnite
polynomial

to be considered, namely to idempotent ones.
Lemma 14 Let Γ be
ABDUCTION(Γid)
ABDUCTION(Γ).
Proof
Let P = (V, H, M, T ) be an instance of
ABDUCTION(Γid).
We build an instance P ′ =
(V, H ′, M ′, T ′) of ABDUCTION(Γ) by removing every con-
straint F (x) or T (x) from T and adding it to H and M . It
is then easy to see that (V, H ′, M ′, T ′) has an explanation if
and only if (V, H, M, T ) has one.
2

language.
to

reducible

BR

IE2

IL2

IV2

IS10

ID2

IS00

IS12

IS3

12

IS2

12

IS3

10

IS2

10

IS3

00

IS2

00

IS02

IS3

02

IS2

02

ID1

IM2

IR2

Figure 1: Lattice of all idempotent Boolean relational clones.

Given these two lemmas, our classiﬁcation of the complex-
ity of ABDUCTION(Γ) heavily relies on Post’s remarkable
classiﬁcation of all Boolean relational clones [Post, 1941].
Post proved in particular that the relational clones form a lat-
tice under set inclusion. An excellent introduction to Post’s
lattice can be found in the recent survey articles [B¨ohler et
al., 2003; 2004].

Lemmas 13 and 14 say that

for any ﬁnite Γ′ ⊆
hΓidi, ABDUCTION(Γ′) is polynomial-time reducible to
ABDUCTION(Γ).
In other words, when studying the com-
plexity of ABDUCTION(Γ) it is enough to consider constraint
languages that are idempotent relational clones. The lattice
of all idempotent Boolean relational clones is given on Fig-
ure 1. Those that are most relevant to our classiﬁcation are
the following:

2 -complete.

Proposition 15 If Γ is not Horn, not dual Horn, not afﬁne
and not bijunctive then ABDUCTION(Γ) is ΣP
Proof It is well-known that for any CNF formula ψ there is a
set of variables W disjoint from V ars(ψ) and a CNF formula
ψ′ over V ars(ψ)∪W with at most 3 variables per clause such
that the formulas ψ and ∃W ψ′ are logically equivalent. That
fact together with a proof similar to that of Lemma 13 show
that the abduction problem for general CNF theories reduces
to ABDUCTION(Γ3), where Γ3 is the (ﬁnite) set of all ternary
relations. Since Γ3 is not Horn, not dual Horn, not afﬁne and
not bijunctive, we have hΓid
3 i = BR, and Lemma 13 and
Lemma 14 concludes.
2

We are ﬁnally able to completely classify the complexity

of ABDUCTION(Γ).
Theorem 16 (classiﬁcation) Let Γ be a constraint language.
ABDUCTION(Γ) is:

• In P if Γ is afﬁne of width 2,
• Otherwise, NP-complete if Γ is Horn, dual Horn, bijunc-

tive or afﬁne,
• Otherwise, ΣP

2 -complete.

02 and IS 2

Proof Proposition 5 shows the result for languages that are
afﬁne of width 2. Now it can be seen that the relations R¬x∨y,
Rx∨y and R¬x∨¬y of Propositions 7, 8 and 9 are in the re-
12, respectively; this can
lational clones IM2, IS 2
be veriﬁed by checking that they are invariant under the op-
erations deﬁning the corresponding clones (for more details
see [B¨ohler et al., 2003; 2004]). Moreover, the language
Γ6af f of Proposition 11 is afﬁne, thus it is in IL2. Con-
sequently, Figure 1 shows that the minimal idempotent re-
lational clones that are not afﬁne of width 2, namely IM2,
12 and IL2 are NP-complete. On the other hand,
IS 2
we know from Theorem 4 and Lemma 6 that the relational
clones IL2 (afﬁne), ID2 (bijunctive), IE2 (Horn) and IV2
(dual Horn) are in NP. Thus ABDUCTION(Γ) is NP-complete
when hΓidi contains IM2, IS 2
12 or IL2 and is con-
tained in IL2, ID2, IE2, or IV2. This covers exactly the
languages that are Horn, dual Horn, bijunctive, or afﬁne and
that are not afﬁne of width 2.

02, IS 2

02, IS 2

Finally, Proposition 15 concludes the proof.

2

• BR, the set of all Boolean relations,
• IE2, the set of all Horn relations,
• IV2, the set of all dual Horn relations,
• ID2, the set of all bijunctive relations,
• IL2, the set of all afﬁne relations,
• ID1, the set of all afﬁne relations of width 2,
• IM2, the set of all relations that are Horn and dual Horn.
Thus, according to Post’s lattice there is only one idempotent
relational clone that is not Horn, not dual Horn, not afﬁne,
and not bijunctive, namely the relational clone consisting of
all Boolean relations BR. Hence the following result follows
intuitively from the result due to Eiter and Gottlob [1995]
stating that ABDUCTION is ΣP
2 -complete for the general case
of theories given by CNF formulas.

6 Discussion and future work
We have completely classiﬁed the complexity of proposi-
tional abduction in Schaefer’s framework when manifesta-
tions and hypotheses are described by sets of literals. This
result can prove useful in helping the designers of knowledge
based systems to deal with the expressivity/tractability trade-
off when choosing a language for their system. Our result
indeed completes the picture of the complexity of reason-
ing for propositional constraint languages. In particular, we
have shown that this problem is very hard, in the sense that
only languages that are afﬁne of width 2 allow for polyno-
mial abduction. Also note that in many cases NP-hardness
remains even when restricting further the problem; e.g., to
H = Lits(V \V ars(M )) (see the proofs of Propositions 7–
9).

It is important to note that the complexity of abduction for
a constraint language given in extension (i.e., by the set of
all tuples in every relation) can be determined efﬁciently; the
case of Theorem 16 in which a language falls can indeed be
determined efﬁciently by using the closure properties of the
concerned co-clones (see, e.g., [B¨ohler et al., 2004]).

It would be interesting to try to extend this work into at
least three directions. First of all, besides the problem of de-
ciding the existence of an explanation for a given instance, of
great importance are the problems of relevance and necessity,
which ask whether a given hypothesis is part of at least one
(resp. of all) preferred explanation(s). These problems in-
volve a preference criterion which can have a great impact on
their complexity; for more details we refer the reader to [Eiter
and Gottlob, 1995]. Hence, it would be interesting to inves-
tigate the complexity of these problems. In the same vein,
Eiter and Makino recently studied the problem of enumerat-
ing all the explanations of a Horn abduction problem [Eiter
and Makino, 2002]; it would be interesting to try to extend
their work to other classes of formulas.

Secondly, although Schaefer’s framework is quite general,
there are restrictions on propositional formulas that it can-
not express. For instance, Eshghi [1993] and del Val [2000a]
study such restrictions that yield polynomial cases of the ab-
duction problem. It would thus be of great interest to try to
identify still more such tractable classes.

Finally, it would be interesting to study the case where the
domains of variables are more general, e.g., for conjunctions
of constraints over ﬁnite domains.

References
[Amilhastre et al., 2002] J. Amilhastre, H. Fargier, and
P. Marquis. Consistency restoration and explanations in
dynamic CSPs - application to conﬁguration. Artiﬁcial In-
telligence, 135(1-2):199–234, 2002.

[B¨ohler et al., 2003] E. B¨ohler, N. Creignou, S. Reith, and
H. Vollmer. Playing with boolean blocks, part I: Post’s lat-
tice with applications to complexity theory. ACM SIGACT-
Newsletter, 34(4):38–52, 2003.

[B¨ohler et al., 2004] E. B¨ohler, N. Creignou, S. Reith, and
H. Vollmer. Playing with boolean blocks, part II: Con-
straint satisfaction problems. ACM SIGACT-Newsletter,
35(1):22–35, 2004.

[Buchler, 1955] J. Buchler. Philosophical Writings of Peirce.

Dover, New York, 1955.

[Bylander et al., 1991] T. Bylander, D. Allemang, M. Tan-
ner, and J. Josephson. The computational complexity of
abduction. Artiﬁcial Intelligence, 49:25–60, 1991.

[Console et al., 1991] L. Console, D. Theseider Dupre, and
P. Torasso. On the relationship between abduction and de-
duction. J. Logic and Computation, 1(5):661–690, 1991.
[Cook, 1971] S. Cook. The complexity of theorem proving

procedures. In Proc. STOC’71, pages 151–158, 1971.

[Creignou et al., 2001] N. Creignou, S. Khanna, and M. Su-
dan. Complexity classiﬁcations of Boolean constraint sat-
isfaction problems. SIAM Monographs on Discrete Math-
ematics and Applications, 2001.

[del Val, 2000a] A. del Val. The complexity of restricted
In Proc. AAAI’00,

consequence ﬁnding and abduction.
pages 337–342, 2000.

[del Val, 2000b] A. del Val. On some tractable classes in
deduction and abduction. Artiﬁcial Intelligence, 116(1-
2):297–313, 2000.

[Durand and Hermann, 2003] A. Durand and M. Hermann.
The inference problem for propositional circumscription
of afﬁne formulas is coNP-complete. In Proc. STACS’03,
pages 451–462, 2003.

[Eiter and Gottlob, 1995] T. Eiter and G. Gottlob. The com-
plexity of logic-based abduction. J. of the ACM, 42(1):3–
42, 1995.

[Eiter and Makino, 2002] T. Eiter and K. Makino. On com-
puting all abductive explanations. In Proc. AAAI’02, pages
62–67, 2002.

[Eshghi, 1993] K. Eshghi. A tractable class of abduction

problems. In Proc. IJCAI’93, pages 3–8, 1993.

[Garey and Johnson, 1979] M.R. Garey and D.S. Johnson.
Computers and Intractability: A Guide to the Theory of
NP-Completeness. Freeman, San Francisco, 1979.

[Hobbs et al., 1993] J. Hobbs, M. Stickel, D. Appelt, and
Interpretation as abduction. Artiﬁcial Intelli-

P. Martin.
gence, 63:69–142, 1993.

[Ladner, 1975] R. Ladner. On the structure of polynomial

time reducibility. J. of the ACM, 22:155–171, 1975.

[Marquis, 2000] P. Marquis. Handbook of Defeasible Rea-
soning and Uncertainty Management Systems (DRUMS),
volume 5, chapter Consequence ﬁnding algorithms, pages
41–145. Kluwer Academic, 2000.

[Morgan, 1971] C. Morgan. Hypothesis generation by ma-

chine. Artiﬁcial Intelligence, 2:179–187, 1971.

[Pople, 1973] H. Pople. On the mechanization of abductive

logic. In Proc. IJCAI’73, pages 147–152, 1973.

[Post, 1941] E. Post. The two-valued iterative systems of
mathematical logic. Annals of Mathematical Studies, 5:1–
122, 1941.

[Schaefer, 1978] T.J. Schaefer. The complexity of satisﬁabil-

ity problems. In Proc. STOC’78, pages 216–226, 1978.

[Selman and Levesque, 1990] B. Selman and H. Levesque.
Abductive and default reasoning: A computational core.
In Proc. AAAI’90, pages 343–348, 1990.

[Stumptner and Wotawa, 2001] M.

and
F. Wotawa. Diagnosing tree-structured systems. Ar-
tiﬁcial Intelligence, 127:1–29, 2001.

Stumptner

[Zanuttini and H´ebrard, 2002] B.

J.-J.
H´ebrard. A uniﬁed framework for structure identiﬁcation.
Information Processing Letters, 81(6):335–339, 2002.

Zanuttini

and

[Zanuttini, 2003] B. Zanuttini. New polynomial classes for
logic-based abduction. J. Artiﬁcial Intelligence Research,
19:1–10, 2003.

