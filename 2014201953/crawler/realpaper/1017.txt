Waiting and Relocation Strategies in Online Stochastic Vehicle Routing

Russell Bent and Pascal Van Hentenryck

Brown University

{rbent,pvh}@cs.brown.edu

Abstract

This paper considers online stochastic multiple ve-
hicle routing with time windows in which requests
arrive dynamically and the goal is to maximize the
number of serviced customers. Contrary to ear-
lier algorithms which only move vehicles to known
customers, this paper investigates waiting and re-
location strategies in which vehicles may wait at
their current location or relocate to arbitrary sites.
Experimental results show that waiting and reloca-
tion strategies may dramatically improve customer
service, especially for problems that are highly dy-
namic and contain many late requests. The deci-
sions to wait and to relocate do not exploit any
problem-speciﬁc features but rather are obtained by
including choices in the online algorithm that are
necessarily sub-optimal in an ofﬂine setting.

1 Introduction
Vehicle routing with time windows is a hard combinatorial
optimization problem with many important applications in
distribution and transportation scheduling.
It has received
considerable attention in the last decades and sophisticated
algorithms are now available to ﬁnd near-optimal solutions in
reasonable time. In recent years, attention has shifted to on-
line and/or stochastic versions of the problem. The stochastic
and online versions are motivated by the inherent uncertain-
ties arising in many industrial problems and technological de-
velopments, such as onboard computers and communication
systems, which give transportation systems the opportunity to
update plans even after the vehicle has been deployed.

In online stochastic problems, customers arrive dynami-
cally as the algorithm proceeds and each customer request
has a time window during which it can be served. The al-
gorithm must decide whether to accept or reject the request
upon arrival. If it is accepted, the online algorithm must serve
the request. The online algorithm typically has two black-
boxes available to make decisions: an optimization algorithm
for the deterministic version of the problem and a conditional
sampling procedure to generate future requests (e.g., [Chang
et al., 2000; Benoist et al., 2001]).

Online stochastic vehicle routing was ﬁrst studied in [Bent
and Van Hentenryck, 2003; Bent and Van Hentenryck, 2004c]

using a sampling-based approach. Their idea is to generate
scenarios consisting of existing and sampled customers, to
solve the scenarios using large neighborhood search [Shaw,
1998], and to make online decisions based on the scenario so-
lutions. Compared to other online stochastic problems such
as packet scheduling [Chang et al., 2000]1 and reservation
systems [Benoist et al., 2001], online stochastic vehicle rout-
ing introduces an additional difﬁculty: it takes time to serve a
request. Indeed serving a request involves moving to the cus-
tomer, and then processing the request. In addition, a rout-
ing plan for a scenario may schedule a “sampled” customer
(in contrast to an actual request) on a vehicle, something that
never occurs in these other applications. How to best proceed
when this situation arises is the key issue studied in this paper.
[Bent and Van Hentenryck, 2004c] took a conservative ap-
proach to this issue: Their algorithm, which is reviewed sub-
sequently, ﬁrst ﬁlters all the “sampled” customers from the
plans, leaving only actual requests. Vehicles, when they be-
come idle, are then sent to actual customers, chosen from the
ﬁltered solutions of the scenarios. Apparently, their design
decision was motivated by the fact that sampled customers
may never actually place a request. However, the fact that a
sampled customer is served next in a scenario solution pro-
vides insight into the nature of the uncertainty and solutions.
The key contribution of this paper is to propose two novel
strategies, waiting and relocation, to address this issue and to
better exploit stochastic information in online vehicle routing.
The waiting strategy recognizes that it is sometimes beneﬁcial
for a vehicle to wait at the current location instead of moving
to a known customer. The relocation strategy goes one step
further and may move vehicles to customer locations where
no requests were placed (yet). These new strategies make
several fundamental contributions:

• The vehicles can wait or relocate anywhere and at
any time during the algorithm execution. This con-
trasts with earlier approaches (e.g., [Larsen et al., 2004;
van Hemert, 2004]) where waiting and relocation points
are deﬁned a priori using knowledge of the distribution,
clustering of the customers, and heuristics.

• The decisions of when and where to wait are systemati-
cally derived from stochastic information. Indeed, wait-

1This paper also contains a comparison between online stochas-

tic optimization and POMDP approaches.

IJCAI07

1816

ing and relocation simply make available to the online
algorithms decisions that are necessarily sub-optimal in
the ofﬂine setting. This contrasts with heuristics to dis-
tribute waiting time in routing plans (e.g., [Mitrovic-
Minic et al., 2004; Mitrovic-Minic and Laporte, 2004])
which do not use stochastic information.

• A decision to wait or relocate solely relies on the sce-
nario solutions, not on speciﬁc properties of the distribu-
tion which is used as a black-box. Hence the strategies
should naturally transfer to a variety of applications.

Experimental results show that the waiting and relocation
strategies may produce dramatic improvements in customer
service compared to earlier algorithms, bridging much of the
gap between the online solution and an ofﬂine, a posteriori
solution where all the uncertainty has been revealed. The im-
provements are particularly impressive for highly dynamic in-
stances with many late customers, which are particular chal-
lenging for earlier algorithms.

The rest of the paper is organized as follows. Sections 2–3
present the ofﬂine and online problems. Sections 4–6 present
the online stochastic algorithm in stepwise reﬁnements, con-
cluding with the waiting and relocation strategies. Section 7
presents the problem instances and the experimental results.

2 The Ofﬂine Problem

The Input Data A vehicle routing problem is speciﬁed by
a number of customers that must be visited by a pool of ve-
hicles. Each customer makes a request that must be served
within a time window and takes some capacity from the vehi-
cle. Each vehicle starts at the depot, serves some customers,
and must return to the depot by the deadline.

Each problem contains a set R of n customers and a depot
o. The set S of sites is thus R ∪ {o}. The travel time between
sites i and j is denoted by d(i, j). Each request is associated
with a customer and, since each customer makes at most one
request, we use customer and request interchangeably. Every
request c has a demand q(c) ≥ 0 and a service time p(c) ≥ 0.
Each instance has a pool of m identical vehicles with capacity
Q. Each vehicle starts from the depot.

Each customer c has a time window speciﬁed by an interval
[e(c), l(c)] satisfying e(c) ≤ l(c). The time window repre-
sents the earliest and latest possible arrival times of a vehicle
serving customer c. In other words, the service for customer
c may start as early as e(c) and as late as l(c). A customer c
may not be served before e(c) but a vehicle arriving early to
serve c may wait at the site until time e(c) before beginning
service. The depot has a time window H = [e0, l0], which
represents the earliest departure and latest possible return for
the vehicles. Typically, e0 denotes the beginning of the day
and l0 is the deadline by which all vehicles must return.

Routing Plans Optimization algorithms for vehicle routing
typically return a routing plan that speciﬁes the order in which
each vehicle visits its customers. A vehicle route, or route for
short, starts at the depot, serves some customers, and returns
to the depot. A customer appears at most once on a route.
Hence a route is a sequence (cid:5)o, c1, . . . , cn, o(cid:6), where ci ∈ R
and all ci are distinct. The capacity of a route ρ is the sum

(cid:2)n

i=1 q(ci). A routing
of its customer capacities, i.e., q(ρ) =
plan is a tuple of routes (ρ1, . . . , ρm) one for each vehicle,
in which each customer appears at most once. We also use
cust(ρ) and cust(γ) to denote the customers of a route ρ and
a plan γ. A routing plan assigns a unique successor and pre-
decessor for each served customer and depot. For a plan γ,
the successor of site c is denoted by c+ and the predecessor
is denoted by c−.

Departure Times Routing plans do not prescribe departure
times for the vehicles. These departure times are typically not
uniquely deﬁned: a vehicle may depart at different times from
speciﬁc customers and still visit all its assigned customers
before the deadline. In addition to the routing plan, a solution
will also consist of an assignment σ : R → H of starting
times to all customers.

The Vehicle Routing Problem We are now in position to
describe the vehicle routing problem. A solution to a vehicle
routing problem with time windows (VRPTW) is a routing
plan γ = (ρ1, . . . , ρm) and a starting time assignment σ sat-
isfying the capacity and time window constraints, i.e.,

q(ρj) ≤ Q
σ(c) − p(c) ≤ l(c)
σ(c) ≥ max(e(c),
σ(c−) + d(c−, c)) + p(c)
σ(c) + d(c, c+) ≤ l(o)

(1 ≤ j ≤ m)
(c ∈ cust(γ))

(c ∈ cust(γ))
(c ∈ cust(γ))

⎧⎪⎪⎪⎨
⎪⎪⎪⎩

C(γ) ≡

The objective is to ﬁnd a solution maximizing the number
of served customers |cust(γ)|. This objective function dif-
fers from the optimization criterion used the Solomon bench-
marks, where the goal is to minimize the number of vehi-
cles and, in case of ties, to minimize the total travel time.
This highlights the difference between strategic planning and
operational decision making. As maximizing the number of
served customers is very difﬁcult on the problems considered
here, the cost associated with relocating or waiting (as fac-
tored into the travel time) is negligible.

If S is a non-empty sequence, FIRST(S) and
Notations
LAST(S) denote the ﬁrst and the last element of a non-empty
sequence. The concatenation of two sequences S1 and S2 is
denoted by S1 : S2. If S is a sequence and S− is a preﬁx of
S, then S −S− denotes the sufﬁx S + such that S = S− : S +.
If S is a sequence and R is a set, FILTER(S, R) denotes the
sequence obtained by removing the elements of R from S.

3 The Online Problem

1 , . . . , ρ−

In the online problem, requests arrive dynamically as the al-
gorithm proceeds. The online algorithm maintains a par-
m(cid:6) consisting of a par-
tial routing plan γ− = (cid:5)ρ−
tial route ρi for each vehicle i.
It also maintains a par-
tial assignment σ− of starting times for all customers in
cust(γ−) \ {LAST(ρ1), . . . , LAST(ρm)}. These times spec-
ify when the vehicle serving a given customer has departed
to the next customer on the same vehicle. The last customers
on the vehicles have no departure times, since they have not
been served yet.

The online algorithms have at their disposal an optimiza-
tion algorithm O. Given a set of customer requests R and

IJCAI07

1817

ONLINE ALGORITHM A((cid:5)R1, . . . , Rh(cid:6))

for t ∈ H

Γ ← UPDATEPLANS(ρt−1, σt−1, At, Γ);
if IDLE(ρt−1, σt−1)

1 ρ0 ← (cid:5)(cid:6);
2 σ0 ← σ⊥;
3 Γ ← GENERATESOLUTIONS(ρ0, σ0, R1);
4
5 do At ← ACCEPTREQUESTS(ρt−1, σt−1, Rt, At−1, Γ);
6
7
8
9
10
11
12
13
14
15 return (ρh, σh);

ρt ← ρt−1 : st;
σt ← σt−1[LAST(ρt−1) ← t];
Γ ← { ρ ∈ Γ | FIRST(ρ − ρt−1) = st };

Γ ← Γ ∪ GENERATESOLUTIONS(ρt, σt, At);

then st ← CHOOSEREQUEST(ρt−1, At, Γ);

else ρt ← ρt−1;
σt ← σt−1;

GENERATESOLUTIONS(ρt, σt, At)
1 Γ ← ∅;
2 repeat
3
4
5
6 return Γ;

R ← SAMPLE(t);
Γ ← Γ ∪ {O(ρt, σt, At, R)};

until time t + 1

Figure 1: Online Stochastic Routing

1

: ρ+

m : ρ+

1 , . . . , ρ−

a pair (γ−, σ−), O(γ−, σ−, R) returns a routing plan γ+ =
m(cid:6) maximizing |cust(γ+)| and satisfy-
(cid:5)ρ−
ing C −(γ+), where C − denotes the problem-speciﬁc con-
straints C where the time windows of each customer c in
cust(γ−) \ {LAST(ρ1), . . . , LAST(ρm)} have been tightened
to [σ−(c), σ−(c)]. The online algorithms also use a proce-
dure SAMPLE(t) to conditionally sample the request distribu-
tion from time t to the time horizon.

The rest of this paper describes the online stochastic algo-
rithms in stepwise reﬁnements using the algorithms of [Bent
and Van Hentenryck, 2004a] as a basis to clearly identify our
contributions. The algorithms are presented for a single ve-
hicle, their generalization to multiple vehicles being obtained
naturally using pointwise decisions [Bent and Van Henten-
ryck, 2004a].

4 Online Vehicle Routing

We now present the generic online routing algorithm. Since
there is only one vehicle, a routing plan is simply the vehi-
cle route and we use both terms interchangeably. The generic
online algorithm is depicted in Figure 1. It maintains a set of
plans Γ representing scenario solutions that are used to make
decisions over the course of the computation. At every time
t, the algorithm also maintains a partial routing plan ρt, its
associated departure times σt, and Rt the requests that be-
come available. Finally, the algorithm assumes that the set of
requests R1 is available before the start of the computation.
The implementation also includes service guarantees: Once a
request is accepted, it must be served.

Lines 1–2 initialize the partial routing plan and the depar-
ture times, while line 3 generates the initial set of plans used
in the decisions. The body of the algorithm (lines 5–15) ﬁrst

(cid:7)t
CHOOSEREQUEST-C(ρt, Rt, Γ)
1 F ←
i=1 Ri;
2 for r ∈ F
3 do f (r) ← 0;
4 for ρ ∈ Γ
5 do r ← FIRST(FILTER(ρ − ρt, F ));
6
7 return argmax(r ∈ F ) f (r);

f (r) ← f (r) + 1;

Figure 2: Consensus for Online Stochastic Routing.

determines whether to accept any new requests that have ar-
rived. Next those plans that cannot accommodate the new
accepted requests At (line 6) are removed from Γ. It is im-
portant to stress that a least one plan p ∈ Γ should be able
to accommodate the requests in At (through insertion or re-
placement of an equivalent sampled customer) since other-
wise the algorithm cannot provide the necessary service guar-
antees. In this paper, customers are accepted greedily when-
ever a routing plan can accommodate them. Using stochastic
information for accepting/rejecting did not bring signiﬁcant
improvements. The algorithm then determines whether the
vehicle is idle, that is whether service is completed for the
last customer in ρt−1 given the departure times in σt−1. If
the vehicle is busy traveling or servicing the last customer in
ρt−1, the routing plan and departure times remain the same
(lines 12–13) and the algorithm simply continues generating
plans (line 14). Otherwise, the vehicle is idle and the algo-
rithm chooses a request st to serve using the plans in Γ (line
8), augments the routing plan (line 9) and the departure times
(line 10), and updates Γ to remove the plans incompatible
with the decisions (line 11). It is useful to review some of the
details of the algorithm.

• a vehicle is idle at time t for a plan (cid:5)s1, . . . , sk(cid:6) and

departure times σ if
k = 0 ∨ max(σ(sk−1)+d(sk−1, sk), e(sk))+p(sk) ≤ t.

In other words, a vehicle is idle when its route has no
customers or when it has ﬁnished serving its last cus-
tomer sk by time t.

• The algorithm assigns the departure time of the last cus-
tomer in ρt−1 to time t in line 10. The vehicle thus de-
parts for customer st at time t.

• A routing plan ρ that next visits a customer other than st
must be removed from Γ since its decisions are incom-
patible with ρt (line 11).

Figure 1 also depicts how to generate plans. Line 3 of func-
tion GENERATESOLUTIONS generates a scenario by sam-
pling the distribution from time t to the horizon (the time
in which the vehicles must return to the depot). Line 4
calls the optimization algorithm with the routing plan and
departure times at time t.
It remains to specify how to
make decisions. Figure 2 shows how to implement function
CHOOSEREQUEST to obtain the consensus algorithm C from
[Bent and Van Hentenryck, 2004d] where the details can be
found. Algorithm C considers all known requests F (line 1)
and initializes their evaluations (lines 2–3). It then considers
each routing plan ρ ∈ Γ (line 4), retrieves the request served

IJCAI07

1818

(cid:7)t
i=1 Ai;

if r ∈ F

CHOOSEREQUEST-CW(ρt, At, Γ)
1 F ←
2 for r ∈ F ∪ {⊥}
3 do f (r) ← 0;
4 for ρ ∈ Γ
5 do r ← FIRST(ρ − ρt);
6
7
8
9 return argmax(r ∈ F ∪ {⊥}) f (r);

then f (r) ← f (r) + 1;
else f (⊥) ← f (⊥) + 1;

Figure 3: The Consensus Algorithm with a Waiting Strategy.

next in ρ, and increments its credit (line 6). The request in F
with the best evaluation is selected in line 7.

It is important to emphasize a critical point in this imple-
mentation. A solution ρ ∈ Γ is a routing plan ρ = ρt−1 : ρ+
starting with partial route ρt−1 followed by a sequence of re-
quests coming from F and the sampling. As a consequence,
there is no guarantee that the request s served next on the ve-
hicle, i.e., s = FIRST(ρ+), is an actual request (s ∈ F ), not
a sampled customer (s /∈ F ). This is precisely why the im-
plementation in Figure 2 uses FILTER(ρ+, F ) to prune plan
ρ+ and keep only the requests in F . This guarantees that
FIRST(FILTER(ρ+, F )) returns a real customer and that the
vehicle departs for a customer who requested service.

5 A Waiting Strategy
The algorithm by [Bent and Van Hentenryck, 2004c] ﬁlters
sampled customers before selecting the request. This conser-
vative approach ensures that the vehicle always moves to a
known customer, not a sampled request. This section investi-
gates a waiting strategy based on the recognition that it may
be beneﬁcial for the vehicle to wait at its current location in-
stead of serving customers too eagerly. For instance, the fact
that the solution ρ to a scenario at time t starts with a sampled
customer, that is

ρ = ρt−1 : ρ+ ∧ FIRST(ρ+) /∈ F,

indicates that it may be beneﬁcial to wait since the sampled
request may materialize, in which case it must be served be-
fore the ﬁrst accepted customer. The difﬁculty is to decide
when to wait in a systematic fashion given that the algorithm
has solved multiple scenarios, all of which may have differ-
ent customers to serve next in their routing plans. Figure 3
depicts a natural implementation. Its key idea is to add a wait
action ⊥ to the accepted requests. When considering a plan
ρ ∈ Γ, the algorithm retrieves the request r to serve next
in the scenario (line 5). In the case of an accepted request
(r ∈ F ), the evaluation of r is incremented. Otherwise, if r is
a sampled customer (r /∈ F ), the evaluation of the wait action
is incremented. The implementation then selects the element
of F ∪ {⊥} with the best evaluation, which may be either an
accepted request or the wait action. The online generic rout-
ing algorithm must also be generalized slightly to wait. When
the request is the wait action, the algorithm modiﬁes neither
the routing plan nor the departure times.

Waiting heuristics have attracted considerable attention
recently (see, for instance, [Mitrovic-Minic et al., 2004;

CHOOSEREQUEST-CR(ρt, At, Γ)
1 for r ∈ Customers
2 do f (r) ← 0;
3 for ρ ∈ Γ
4 do r ← FIRST(ρ − ρt);
5
6 return argmax(r ∈ Customers) f (r);

f (r) ← f (r) + 1;

Figure 4: Consensus with a Relocation Strategy.

Mitrovic-Minic and Laporte, 2004]). The beauty in the al-
gorithm presented here is that the choice of when and where
to wait is fully automatic and guided by the scenarios.

6 A Relocation Strategy

The waiting strategy recognizes that it may be beneﬁcial to
wait at the current location instead of serving an accepted
request. It is especially appropriate for problems in which
the bottleneck is to minimize travel times and it is reason-
ably easy to serve the customers. When the challenge is in
maximizing the number of served requests, it is appealing to
explore a relocation strategy and to consider moving to the
location of sampled customers. Once again, the difﬁculty is
to determine when and where to move. Figure 4 proposes a
natural relocation strategy. Its fundamental idea is to avoid
differentiating between accepted and sampled customers: the
vehicle simply moves to the request with the best evaluation.
Lines 1–2 initialize the evaluation of all customers, lines 4–
5 increments the ﬁrst request, and line 6 selects the request
with the best evaluation. The selected request may be either
an accepted or a sampled request.

A relocation strategy may be beneﬁcial for improving the
number of served requests because it anticipates future re-
quests and positions the vehicle to serve them quickly. It is
never advantageous when minimizing travel times, since it
may move to locations where no requests will ever materi-
alize. Observe also that when and where to relocate is also
fully automatic and systematically derived from the scenario
solutions. This contrasts with other approaches (e.g., [Larsen
et al., 2004; van Hemert, 2004]) where relocation points are
created using heuristics based on a priori information for spe-
ciﬁc problems, instances, and distributions.

7 Experimental Results

We now describe the experiments that compare our algo-
rithms with those of [Bent and Van Hentenryck, 2004c].

The Benchmarks The online vehicle-routing problems are
generated from the Solomon benchmarks [Solomon, 1987], a
collection of very challenging vehicle-routing problems with
100 customers, many of which have yet to be solved opti-
mally. The stochastic versions were developed by [Bent and
Van Hentenryck, 2004c] where the details are found. We re-
view the salient features of these benchmarks. The problems
are divided into classes 1 through 5. The degree of a dy-
namism (DOD) of a problem is the ratio of the number of
stochastic customers over the number of total customers. The
class 1 problems are characterized by early arriving requests.
and class 2 problems by more late arriving requests. The third

IJCAI07

1819

class mixes class 1 and 2. For these three classes, the aver-
age DOD is 44%. Class 4 considers problems with more late
arriving customers than class 2 and have an average DOD of
59%. Class 5 considers problems with a higher proportion
of stochastic customers, i.e. an average DOD of 81%. In all
problems, the expected number of customers is 100.

The Algorithms The results compare local optimization
(LO) with the consensus and regret algorithms which may in-
clude the waiting and relocation strategies. Algorithm LO is
a generalization of the parallel tabu-search algorithm in [Gen-
dreau et al., 1999]. It generates multiple routing plans on the
accepted customers. These plans are then used to accept or
reject new customers and to select the decisions at each time
step. LO is thus close to algorithm C, the main difference
being that no stochastic information is exploited. The con-
sensus algorithms C, CW, and CR have been fully described
in this paper: C is the algorithm originally proposed by [Bent
and Van Hentenryck, 2004c], while CW and CR respectively
include the waiting and relocation strategies. The regret al-
gorithms, R, RW, and RR, improved upon the consensus
algorithms by using a sub-optimality approximation to eval-
uate the value of scheduling each request next on the vehi-
cles and are described in detail in [Bent and Van Hentenryck,
2004b]. They use a simple and fast sub-optimality approx-
imation whose details are described in [Bent et al., 2005].
Consider the decision of choosing which customer to serve
next on vehicle v and let st be the next customer on the route
of vehicle v at time t. To evaluate the regret of another cus-
tomer r on the same vehicle v, the sub-optimality approxima-
tion determines whether there is a feasible swap of r and st
on v, in which case the regret is zero. Otherwise, if such a
swap violates the time-window constraints, the regret is 1.

Initial Plans and Online Process The online stochastic al-
gorithms generate and solve 50 scenarios to select the deci-
sions at time 0. The algorithms also generate and solve 50
additional samples to create plans given the set of decisions at
time 0. As these scenarios are generated and solved ahead of
time, the number of scenarios can be arbitrarily large depend-
ing on the application. Each such optimization is allocated
one minute. During the online execution, each optimization
runs for 10 seconds and uses the LNS procedure from [Shaw,
1998]. All algorithms are executed on an AMD Athlon 64
3000 processor with 512MB of RAM running Linux. Each
of the instances is run 50 times to account for the nondeter-
ministic nature of the algorithms. In the results, we often omit
the words “in the average” for brevity.

The Results Figures 5 and 6 summarize all the results for
the regret and consensus algorithms regarding the number of
unserviced customers. (All customers can be served in the
ofﬂine, a posteriori problems.) The ﬁgures depict the results
for the speciﬁc instances and a linear regression for each class
of algorithms. Some speciﬁc results are cropped by the graph
extent to maintain its readability. The main result is the out-
standing behavior of RR, i.e., the regret algorithm with a re-
location strategy. From the interpolations, it can be seen that
algorithm RR dominates all the algorithms for DODs over
50% and that the improvements increase substantially as the

Figure 5: Unserviced Customers for Regret.

Figure 6: Unserviced Customers for Consensus.

DOD grows. The improvement over R is signiﬁcant, indicat-
ing the importance of using relocation on this set of instances.
Subsequent results will characterize more precisely when the
relocation strategy is of paramount importance. Algorithm
RW is also quite effective in general, but it is dominated by
RR as the DOD increases. Similar results can be observed
for the consensus algorithms C, CW, and CR but, in general,
they serve fewer customers than their regret counterparts.

Results on Class 4 Figure 7 depicts the results on class 4.
We highlight the best and second best result for each problem
in boldface and italics respectively. Algorithms RR and RW
are reasonably close. For small DODs, R performs the best,

101-1
101-2
101-3
101-4
101-5
102-1
102-2
102-3
102-4
102-5
104-1
104-2
104-3
104-4
104-5

DOD
46.3%
45.8%
50.0%
45.6%
47.4%
59.0%
57.5%
56.0%
52.0%
57.6%
76.1%
75.6%
76.1%
72.2%
74.4%

LO
2.08
6.78
3.06
2.90
7.70
1.74
4.28
8.70
2.18
3.76
21.1
25.6
20.9
19.6
15.9

C

2.24
5.42
2.06
3.16
4.02
1.78
1.94
3.24
0.92
2.46
19.7
28.6
16.6
19.3
19.0

CW CR

4.16
5.94
3.06
4.30
5.48
1.22
3.44
5.06
1.48
2.90
14.4
13.9
10.4
14.1
14.0

3.30
3.62
2.28
5.54
5.12
0.54
2.76
3.32
1.84
2.02
13.8
11.7
8.84
6.36
9.94

R

1.94
3.50
1.66
3.28
3.38
0.92
2.12
3.38
1.64
1.52
8.64
20.1
7.88
9.80
11.7

RW RR

3.72
4.18
3.46
4.86
5.82
1.10
2.86
4.14
1.96
2.68
11.1
11.9
7.80
8.74
10.1

2.68
3.44
3.42
4.58
4.58
1.34
2.60
3.24
1.78
2.28
11.4
10.5
9.06
7.38
8.72

Figure 7: Unserviced Customers on Class 4.

IJCAI07

1820

101-1
101-2
101-3
101-4
101-5
102-1
102-2
102-3
102-4
102-5
104-1
104-2
104-3
104-4
104-5

DOD
75.4%
74.7%
69.7%
71.7%
76.3%
77.2%
86.7%
81.4%
75.2%
82.4%
89.4%
90.6%
89.1%
89.7%
87.0%

LO
5.26
5.32
2.22
3.90
6.14
4.56
5.88
3.84
5.42
1.32
25.3
25.0
26.3
30.2
22.7

C

4.52
8.08
2.36
6.14
5.56
2.36
5.38
2.40
2.40
1.38
26.9
28.9
27.3
31.2
31.8

CW CR

4.82
5.04
2.76
2.06
6.54
2.40
2.54
1.06
1.38
1.58
23.0
31.3
19.5
22.0
18.3

2.96
1.92
2.18
1.56
6.00
1.40
2.54
0.16
1.44
0.76
8.76
17.3
7.88
12.4
10.6

R

3.20
5.58
1.20
3.72
4.66
1.50
3.30
1.72
1.62
1.22
26.1
35.0
24.5
33.9
28.3

RW RR

4.54
4.26
2.16
2.48
5.98
2.36
3.52
0.84
1.46
1.18
15.3
19.7
12.0
11.4
7.74

2.28
1.40
1.52
1.24
3.36
1.48
2.56
0.40
2.06
0.62
8.12
12.0
6.98
7.44
3.66

Figure 8: Unserviced Customers on Class 5.

however, what is noteworthy is the signiﬁcant gain RR and
RW show as the DOD increases. These results show the sig-
niﬁcance of the waiting and relocation strategies on class 4.
Observe that LO misses more than 25 customers on instance
rc104-2, while only about 10 customers are not served by
RR. Their consensus counterparts also behave well.
Results on Class 5 Class 5 contains the most difﬁcult in-
stances and the experimental results are depicted in ﬁgure
8. On these instances, some algorithms may miss up to 30
customers. This is the case of algorithms LO, C, and R on
rc104-4. Once again, algorithm RR is the most effective
algorithm overall and only misses 7 customers on rc104-4.
The improvements of RR over other algorithms are quite
dramatic on class 5 and grow with the degree of dynamism.
They clearly demonstrate the value of a relocation strategy on
online vehicle routing with time windows.

It is important to point out that the relocation is completely
guided by the stochastic information and does not include any
problem-speciﬁc knowledge: a vehicle simply moves to the
selected customer whether this is an accepted customer or a
sampled customer. As a consequence, the relocation strategy
is simple to implement, yet it is critical to obtain high-quality
solutions on these instances. The regret algorithm RW with a
waiting strategy is also effective and provides signiﬁcant over
the other algorithms, but it is dominated by RR.

8 Conclusion
This paper considered the online vehicle routing problem
where customer requests arrive dynamically. It demonstrated
the effectiveness of two novel strategies to further exploit
stochastic information: waiting and relocation. The strate-
gies were shown as natural instantiations of the generic
stochastic optimization framework by making available ac-
tions that are sub-optimal in an ofﬂine setting. The effective-
ness of the strategies were demonstrated and validated in the
experimental results. As future work, it will be interesting to
see the performance of these techniques on classes of VRPs
where waiting and relocation may have more impact on cost.
Finally, as the decision to relocate or wait solely relies on sce-
nario solutions, not on any prior knowledge of the problem or
distribution, the results should naturally extend to a variety of
applications in planning and scheduling.

Acknowledgments
This research is partly supported by NSF Award DMI-
0600384 and ONR DEPSCOR Award N000140610607.

References
[Benoist et al., 2001] T. Benoist, E. Bourreau, Y. Caseau,
and B. Rottembourg. Towards Stochastic Constraint Pro-
gramming: A Study of On-line Multi-Choice Knapsack
with Deadlines. In CP-01, 61–76, 2001.

[Bent and Van Hentenryck, 2003] R. Bent and P. Van Hen-
tenryck. Dynamic Vehicle Routing with Stochastic Re-
quests. In IJCAI’03, 2003.

[Bent and Van Hentenryck, 2004a] R. Bent and P. Van Hen-
tenryck. Online Stochastic and Robust Optimization. In
ASIAN-04, 286–300, 2004.

[Bent and Van Hentenryck, 2004b] R. Bent and P. Van Hen-
tenryck. Regrets Only! Online Stochastic Optimization
Under Time Constraints. In AAAI-04, 501–506, 2004.

[Bent and Van Hentenryck, 2004c] R. Bent and P. Van Hen-
tenryck. Scenario-Based Planning for Partially Dynamic
Vehicle Routing with Stochastic Customers. Operations
Research, 52 (6):977–987, 2004.

[Bent and Van Hentenryck, 2004d] R. Bent and P. Van Hen-
tenryck. The Value of Consensus in Online Stochastic
Scheduling. In ICAPS-04, 219–226, 2004.

[Bent et al., 2005] R. Bent, I. Katriel, and P. Van Hentenrck.

Sub-Optimality Approximation. In CP-05, 2005.

[Chang et al., 2000] H. Chang, R. Givan, and E. Chong. On-
line Scheduling Via Sampling. In AIPS-00, 62–71, 2000.

[Gendreau et al., 1999] M. Gendreau, F. Guertin, J. Potvin,
and E. Taillard. Parallel Tabu Search for Real-Time Vehi-
cle Routing and Dispatching. Transportation Science, 33
(4):381–390, 1999.

[Larsen et al., 2004] A.

Larsen,

and
M. Solomon. The A-priori Dynamic Traveling Salesman
Problem With Time Windows. Transportation Science,
38:459–472, 2004.

O. Madsen,

[Mitrovic-Minic and Laporte, 2004] M. Mitrovic-Minic and
G. Laporte. Waiting Strategies for the Dynamic Pickup
and Delivery Problem With Time Windows. Transporta-
tion Research Record Part B, 38:635–655, 2004.

[Mitrovic-Minic et al., 2004] M. Mitrovic-Minic, R. Krish-
namurti, and G. Laporte. Double-Horizon Based Heuris-
tics for the Dynamic Pickup and Delivery Problems With
Time Windows. Transportation Research Record Part B,
38:669–685, 2004.

[Shaw, 1998] P. Shaw. Using Constraint Programming and
Local Search Methods to Solve Vehicle Routing Problems.
In CP-98, 417–431, 1998.

[Solomon, 1987] M. Solomon. Algorithms for the Vehi-
cle Routing and Scheduling Problems with Time Window
Constraints. Operations Research, 35 (2):254–265, 1987.

[van Hemert, 2004] J. van Hemert. Dynamic Routing With
Fruitful Regions: Models and Evolutionary Computation.
Parallel Problem Solving from Nature VIII, 2004.

IJCAI07

1821

