A Tableaux Decision Procedure for SHOIQ

Ian Horrocks and Ulrike Sattler

School of Computer Science, University of Manchester, UK

horrocksjsattler@cs.man.ac.uk

Abstract

This paper presents a tableaux decision procedure
for SHOIQ, the DL underlying OWL DL. To the
best of our knowledge, this is the ﬁrst goal-directed
decision procedure for SHOIQ.

1 Introduction
Description Logics (DLs) are a family of logic based knowl-
edge representation formalisms. Although they have a range
of applications (e.g., conﬁguration [McGuinness & Wright,
1998], and information integration [Calvanese et al., 1998]),
they are perhaps best known as the basis for widely used on-
tology languages such as OIL, DAML+OIL and OWL [Hor-
rocks et al., 2003], the last of which is now a W3C recom-
mendation [Bechhofer et al., 2004]. Two of the three lan-
guage “species” described in the OWL speciﬁcation are based
on expressive DLs: OWL Lite is based on SHIF, and OWL
DL is based on SHOIN . This decision was motivated by
a requirement that key inference problems (such as ontology
consistency) be decidable, and that it should be possible to
provide reasoning services to support ontology design and de-
ployment [Horrocks et al., 2003].

Although the ontology consistency problem for SHOIN
is known to be decidable,1 to the best of our knowledge no
“practical” decision procedure is known for it, i.e., no goal
directed procedure that is likely to perform well with realistic
ontology derived problems [Tobies, 2001; Horrocks & Sattler,
2001].
In this paper we present such a decision procedure
for SHOIQ, i.e., SHOIN extended with qualiﬁed num-
ber restrictions [Baader & Hollunder, 1991]. The algorithm
extends the well-known tableaux algorithm for SHIQ [Hor-
rocks et al., 1999], which is the basis for several highly suc-
cessful implementations [Horrocks & Patel-Schneider, 1998;
Haarslev & M¨oller, 2001; Pellet, 2003].

The O in SHOIQ denotes nominals, i.e., classes with a
singleton extension. Nominals are a prominent feature of
hybrid logics [Blackburn & Seligman, 1995], and can also

1This is an immediate consequence of a reduction of DLs with
transitive roles to DLs without such roles [Tobies, 2001] and the fact
that applying this reduction to SHOIN yields a fragment of the
two variable fragment of ﬁrst order logic with counting quantiﬁers
[Pacholski et al., 1997].

be viewed as a powerful generalisation of ABox individ-
uals [Schaerf, 1994; Horrocks & Sattler, 2001]. They oc-
cur naturally in ontologies, e.g., when describing a class
such as EUCountries by enumerating its members,
i.e.,
fAustria; : : : ; UnitedKingdomg (such an enumeration is
equivalent to a disjunction of nominals). This allows applica-
tions to infer, e.g., that persons who only visit EUCountries
can visit at most 15 countries.

One reason why DLs (and propositional modal and dy-
namic logics) enjoy good computational properties, such as
being robustly decidable, is that they have some form of tree
model property [Vardi, 1997], i.e., if an ontology is consis-
tent, then it has a (form of) tree model. This feature is crucial
in the design of tableaux algorithms, allowing them to search
only for tree like models. More precisely, tableaux algorithms
decide consistency of an ontology by trying to construct an
abstraction of a model for it, a so-called “completion graph”.
For logics with the tree model property, we can restrict our
search/construction to tree-shaped completion graphs.

Tableaux algorithms for expressive DLs employ a cycle de-
tection technique called blocking to ensure termination. This
is of special interest for SHIQ, where the interaction be-
tween inverse roles and number restrictions results in the loss
of the ﬁnite model property, i.e., there are consistent on-
tologies that only admit inﬁnite models. On such an input,
the SHIQ tableaux algorithm generates a ﬁnite tree-shaped
completion graph that can be unravelled into an inﬁnite
tree model, and where a node in the completion graph may
stand for inﬁnitely many elements of the model. Even when
the language includes nominals, but excludes one of num-
ber restrictions or inverse roles [Horrocks & Sattler, 2001;
Hladik & Model, 2004], or if nominals are restricted to ABox
individuals [Horrocks et al., 2000], we can work on forest-
shaped completion graphs, with each nominal (individual)
being the root of a tree-like section; this causes no inherent
difﬁculty as the size of the non-tree part of the graph is re-
stricted by the number of individuals/nominals in the input.

The difﬁculty in extending the SHOQ or SHIQ algo-
rithms to SHOIQ is due to the interaction between nomi-
nals, number restrictions, and inverse roles, which leads to the
almost complete loss of the tree model property, and causes
the complexity of the ontology consistency problem to jump
from ExpTime to NExpTime [Tobies, 2000]. To see this, con-
sider an ontology containing the following two axioms that

use a nominal o to impose an upper bound, say 17, on the
number of instances of the concept F :

> _v 9R¡:o;

o _v (617 R:F )

The ﬁrst statement requires that, in a model of this ontology,
every element has an incoming R-edge from o; the second
statement restricts the number of R-edges going from o to in-
stances of F to at most 17. In this case, we might need to
consider arbitrarily complex relational structures amongst in-
stances of F , and thus cannot restrict our attention to com-
pletion trees or forests. Let us assume that our ontology
also forces the existence of an inﬁnite number of instances
of another concept, say N, which requires the above men-
tioned “block and unravel” technique. The consistency of the
whole ontology then crucially depends on the relations en-
forced between instances of F and N, and whether the unrav-
elling of the N-part violates atmost number restrictions that
instances of F must satisfy. Summing up, a tableaux algo-
rithm for SHOIQ needs to be able to handle both arbitrarily
complex relational structures and ﬁnite tree structures repre-
senting inﬁnite trees, and to make sure that all constraints are
satisﬁed (especially number restrictions on relations between
these two parts), while still guaranteeing termination.

Two key intuitions have allowed us to devise a tableaux
algorithm that meets all of these requirements. The ﬁrst in-
tuition is that, when extending a SHOIQ completion graph,
we can distinguish those nodes that may be arbitrarily inter-
connected (so-called nominal nodes) from those nodes that
still form a tree structure (so-called blockable nodes). Fixing
a (double exponential) upper bound on the number of nomi-
nal nodes is crucial to proving termination; it is not, however,
enough to guarantee termination, as we may repeatedly create
and merge nominal nodes (a so-called “yo-yo”).

The second intuition is that the yo-yo problem can be
overcome by “guessing” the exact number of new nominal
nodes resulting from interactions between existing nominal
nodes, inverse roles, and number restrictions. This guess-
ing is implemented by a new expansion rule, Ro?, which,
when applied to a relevant (6nR:C) concept, generates (non-
deterministically) between 1 and n new nominal nodes, all of
which are pairwise disjoint. This prevents the repeated yo-yo
construction, and termination is now guaranteed by the upper
bound on the number of nominal nodes and the use of stan-
dard blocking techniques for the blockable nodes. The non-
determinism introduced by this rule could clearly be prob-
lematical for large values of n, but large values in number re-
strictions are already known to be problematical for SHIQ.
Moreover, the rule has excellent “pay as you go” characteris-
tics: in case number restrictions are functional (i.e., where n
is 1),2 the new rule becomes deterministic; in case there are
no interactions between number restrictions, inverse roles and
nominals, the rule will never be applied; in case there are no
nominals, the new algorithm will behave like the algorithm
for SHIQ; and in case there are no inverse roles, the new
algorithm will behave like the algorithm for SHOQ.

For more examples and full proofs, we refer the reader to

[Horrocks & Sattler, 2005].

2 Preliminaries
In this section, we introduce the syntax, semantics, and infer-
ence problems of the DL SHOIQ.

Deﬁnition 1 Let R be a set of role names with both transitive
and normal role names R+ [ RP = R, where RP \ R+ = ;.
The set of SHOIQ-roles (or roles for short) is R [ fR¡ j
R 2 Rg. A role inclusion axiom is of the form R v S; for
two roles R and S. A role hierarchy is a ﬁnite set of role
inclusion axioms.

An interpretation I = (¢I; ¢I) consists of a non-empty set
¢I, the domain of I, and a function ¢I which maps every role
to a subset of ¢I £ ¢I such that, for P 2 R and R 2 R+,

hx; yi 2 P I iff hy; xi 2 P ¡I

;

and if hx; yi 2 RI and hy; zi 2 RI, then hx; zi 2 RI:

An interpretation I satisﬁes a role hierarchy R if RI (cid:181) S I
for each R v S 2 R; such an interpretation is called a model
of R.

We introduce some notation to make the following consider-
ations easier.
1. The inverse relation on roles is symmetric, and to avoid
considering roles such as R¡¡, we deﬁne a function Inv
which returns the inverse of a role: for R 2 R, Inv(R) := R¡
and Inv(R¡) := R.
2. Since set inclusion is transitive and RI (cid:181) S I implies
Inv(R)I (cid:181) Inv(S)I, for a role hierarchy R, we introduce
v* R as the transitive-reﬂexive closure of v on R[fInv(R) v
Inv(S) j R v S 2 Rg: We use R ·R S as an abbreviation
for R v* RS and S v* RR.
3. Obviously, a role R is transitive if and only if its inverse
Inv(R) is transitive. However, in cyclic cases such as R ·R
S, S is transitive if R or Inv(R) is a transitive role name.
In order to avoid these case distinctions, the function Trans
returns true if R is a transitive role—regardless whether it
is a role name, the inverse of a role name, or equivalent to
a transitive role name (or its inverse): Trans(S; R) := true
if, for some P with P ·R S, P 2 R+ or Inv(P ) 2 R+;
Trans(S; R) := false otherwise.
4. A role R is called simple w.r.t. R if Trans(S; R) = false
for all S v* RR.
5. In the following, if R is clear from the context, we may
use v* and Trans(S) instead of v* R and Trans(S; R).

Deﬁnition 2 Let NC be a set of concept names with a subset
NI (cid:181) NC of nominals. The set of SHOIQ-concepts (or
concepts for short) is the smallest set such that
1. every concept name C 2 NC is a concept,
2. if C and D are concepts and R is a role, then (C u D),
(C t D), (:C), (8R:C), and (9R:C) are also concepts (the
last two are called universal and existential restrictions, resp.),
and
3. if C is a concept, R is a simple role3 and n 2 IN, then
(6nR:C) and (>nR:C) are also concepts (called atmost and
atleast number restrictions).

2A feature of many realistic ontologies; see, e.g., the DAML on-

tology library at http://www.daml.org/ontologies/

3Restricting number restrictions to simple roles is required in or-

der to yield a decidable logic [Horrocks et al., 1999].

The interpretation function ¢I of an interpretation I =
(¢I; ¢I) maps, additionally, every concept to a subset of ¢I
such that

(C u D)I = C I \ DI;
:C I = ¢I n C I;

(C t D)I = C I [ DI;

]oI = 1 for all o 2 NI ;

(9R:C)I = fx 2 ¢I j RI(x; C) 6= ;g;
(8R:C)I = fx 2 ¢I j RI(x; :C) = ;g;

(6nR:C)I = fx 2 ¢I j ]RI(x; C) 6 ng; and
(>nR:C)I = fx 2 ¢I j ]RI(x; C) > ng;

where ]M is the cardinality of a set M and RI(x; C) is de-
ﬁned as fy j hx; yi 2 RI and y 2 C Ig.

For C and D (possibly complex) concepts, C _v D is called
a general concept inclusion (GCI), and a ﬁnite set of GCIs is
called a TBox.

An interpretation I satisﬁes a GCI C _v D if C I (cid:181) DI,
and I satisﬁes a TBox T if I satisﬁes each GCI in T ; such
an interpretation is called a model of T .

A concept C is satisﬁable w.r.t. a role hierarchy R and a
TBox T if there is a model I of R and T with C I 6= ;.
Such an interpretation is called a model of C w.r.t. R and T .
A concept D subsumes a concept C w.r.t. R and T (written
C vR;T D) if C I (cid:181) DI holds in every model I of R and
T . Two concepts C; D are equivalent w.r.t. R and T (written
C ·R;T D) if they are mutually subsuming w.r.t. R and T .

As usual, subsumption and satisﬁability can be reduced to
each other. Like SHIQ, in SHOIQ, we can reduce rea-
soning w.r.t. TBoxes and role hierarchies to reasoning w.r.t.
role hierarchies only: we can use an “approximation” of a
universal role to internalise a TBox [Horrocks et al., 1999;
Horrocks & Sattler, 2005]. Hence, in the remainder of this
paper, we restrict our attention without loss of generality to
the satisﬁability of SHOIQ concepts w.r.t. a role hierarchy.
Finally, we did not choose to make a unique name assump-
tion, i.e., two nominals might refer to the same individual.
However, the inference algorithm presented below can easily
be adapted to the unique name case by a suitable initialisation
of the inequality relation 6

:
= used in our algorithm.

3 A Tableau for SHOIQ
For ease of presentation, as usual, we assume all concepts
to be in negation normal form (NNF). Each concept can be
transformed into an equivalent one in NNF by pushing nega-
tion inwards, making use of de Morgan’s laws and the duality
between existential and universal restrictions, and between at-
most and atleast number restrictions, [Horrocks et al., 2000].
For a concept C, we use _:C to denote the NNF of :C, and
we use sub(C) to denote the set of all subconcepts of C (in-
cluding C). As usual, for a concept D and a role hierarchy
R, we deﬁne the set of “relevant sub-concepts” cl(D; R) as
follows (we will often use cl(D) instead of cl(D; R)):

cl(D; R) := sub(D) [ f _:C j C 2 sub(D)g [

f8S:E j f8R:E; _:8R:Eg \ sub(D) 6= ;

and S occurs in R or Dg:

Deﬁnition 3 If D is a SHOIQ-concept in NNF, R a role
hierarchy, and RD is the set of roles occurring in D or R,

together with their inverses, a tableau T for D w.r.t. R is
deﬁned to be a triple (S; L; E) such that: S is a set of in-
dividuals, L : S ! 2cl(D) maps each individual to a set of
concepts which is a subset of cl(D), E : RD ! 2S£S maps
each role in RD to a set of pairs of individuals, and there is
some individual s 2 S such that D 2 L(s). For all s; t 2 S,
C; C1; C2 2 cl(D), R; S 2 RD, and

ST(s; C) := ft 2 S j hs; ti 2 E(S) and C 2 L(t)g;

it holds that:
(P1) if C 2 L(s), then :C =2 L(s),
(P2) if C1 u C2 2 L(s), then C1 2 L(s) and C2 2 L(s),
(P3) if C1 t C2 2 L(s), then C1 2 L(s) or C2 2 L(s),
(P4) if 8R:C 2 L(s) and hs; ti 2 E(R), then C 2 L(t),
(P5) if 9R:C 2 L(s), then there is some t 2 S such that

hs; ti 2 E(R) and C 2 L(t),

(P6) if 8S:C 2 L(s) and hs; ti 2 E(R) for some R v* S with

Trans(R), then 8R:C 2 L(t),

(P7) if (>nS:C) 2 L(s), then ]S T(s; C) > n,
(P8) if (6nS:C) 2 L(s), then ]S T(s; C) 6 n,
(P9) if (6nS:C) 2 L(s) and hs; ti 2 E(S), then fC; _:Cg \

L(t) 6= ;,

(P10) if hs; ti 2 E(R) and R v* S, then hs; ti 2 E(S),
(P11) hs; ti 2 E(R) iff ht; si 2 E(Inv(R)), and
(P12) if o 2 L(s) \ L(t) for some o 2 NI, then s = t.

Lemma 4 A SHOIQ-concept D in NNF is satisﬁable w.r.t.
a role hierarchy R iff D has a tableau w.r.t. R.

The proof is similar to the one found in [Horrocks et al.,
1999]. Roughly speaking, we construct a model I from a
tableau by taking S as its interpretation domain and adding
the missing role-successorships for transitive roles. Then,
by induction on the structure of formulae, we prove that, if
C 2 L(s), then s 2 C I. Most cases are straightforward.
As for SHIQ, (P7) and (P8) together with the fact that only
simple roles occur in number restrictions ensure that this im-
plication holds for number restrictions C, and (P12) ensures
that nominals are indeed interpreted as singletons. For the
converse, we can easily transform any model into a tableau.

4 A tableau algorithm for SHOIQ
From Lemma 4, an algorithm which constructs a tableau for
a SHOIQ-concept D can be used as a decision procedure
for the satisﬁability of D with respect to a role hierarchy R.
Such an algorithm will now be described in detail.

Deﬁnition 5 Let R be a role hierarchy and D a SHOIQ-
concept in NNF. A completion graph for D with respect to R
:
=) where each node x 2 V
is a directed graph G = (V; E; L; 6
is labelled with a set L(x) (cid:181) cl(D) [ NI [ f(6mR:C) j
(6nR:C) 2 cl(D) and m • ng and each edge hx; yi 2 E is
labelled with a set of role names L(hx; yi) containing (pos-
sibly inverse) roles occurring in D or R. Additionally, we
keep track of inequalities between nodes of the graph with a
symmetric binary relation 6

:
= between the nodes of G.

If hx; yi 2 E, then y is called a successor of x and x
is called a predecessor of y. Ancestor is the transitive clo-
sure of predecessor, and descendant is the transitive closure
of successor. A node y is called an R-successor of a node
x if, for some R0 with R0 v* R, R0 2 L(hx; yi); x is called
an R-predecessor of y if y is an R-successor of x. A node
y is called a neighbour (R-neighbour) of a node x if y is a
successor (R-successor) of x or if x is a successor (Inv(R)-
successor) of y.

For a role S and a node x in G, we deﬁne the set of x’s

S-neighbours with C in their label, S G(x; C), as follows:

SG(x; C) := fy j y is an S-neighbour of x and C 2 L(y)g:

G is said to contain a clash if
1. for some A 2 NC and node x of G, fA; :Ag (cid:181) L(x),
2. for some node x of G, (6nS:C) 2 L(x) and there are
n + 1 S-neighbours y0; : : : ; yn of x with C 2 L(yi) for
:
= yj for each 0 • i < j • n, or
each 0 • i • n and yi 6
:
= y with o 2 L(x) \ L(y).

3. for some o 2 NI, there are x 6

If o1; : : : ; o‘ are all the nominals occurring in D, then
the tableau algorithm starts with the completion graph G =
(fr0; r1 : : : ; r‘g; ;; L; ;) with L(r0) = fDg and L(ri) =
foig for 1 • i • ‘. G is then expanded by repeatedly apply-
ing the expansion rules given in Figures 1 and 2, stopping if
a clash occurs.

Next, we deﬁne and explain some terms and operations

used in the expansion rules:
Nominal Nodes and Blockable Nodes We distinguish two
types of nodes in G, nominal nodes and blockable nodes. A
node x is a nominal node if L(x) contains a nominal. A node
that is not a nominal node is a blockable node. A nominal
o 2 NI is said to be new in G if no node in G has o in its
label.
Comment: like ABox individuals [Horrocks et al., 2000],
nominal nodes can be arbitrarily interconnected. In contrast,
blockable nodes are only found in tree-like structures rooted
in nominal nodes (or in r0); a branch of such a tree may end
with an edge leading to a nominal node.

In Ro?, we use new nominals to create new nominal
nodes—intuitively, to ﬁx the identity of certain, constrained
neighbours of nominal nodes. An upper bound on the number
of nominal nodes that can be generated in a given comple-
tion graph will be crucial for termination of the construction,
given that blocking cannot be applied to nominal nodes.
Blocking A node x is label blocked if it has ancestors x0, y
and y0 such that

1. x is a successor of x0 and y is a successor of y0,
2. y, x and all nodes on the path from y to x are blockable,
3. L(x) = L(y) and L(x0) = L(y0), and
4. L(hx0; xi) = L(hy0; yi).

In this case, we say that y blocks x. A node is blocked if either
it is label blocked or it is blockable and its predecessor is
blocked; if the predecessor of a blockable node x is blocked,
then we say that x is indirectly blocked.
Comment: blocking is deﬁned exactly as for SHIQ, with
the only difference that, in the presence of nominals, we must

if 1. C1 u C2 2 L(x), x is not indirectly blocked, and

2. fC1; C2g 6(cid:181) L(x)

then set L(x) = L(x) [ fC1; C2g
if 1. C1 t C2 2 L(x), x is not indirectly blocked, and

2. fC1; C2g \ L(x) = ;

then set L(x) = L(x) [ fCg for some C 2 fC1; C2g
if 1. 9S:C 2 L(x), x is not blocked, and

2. x has no safe S-neighbour y with C 2 L(y),

then create a new node y with L(hx; yi) = fSg

and L(y) = fCg

if 1. 8S:C 2 L(x), x is not indirectly blocked, and
2. there is an S-neighbour y of x with C =2 L(y)

then set L(y) = L(y) [ fCg

Ru:

Rt:

R9:

R8:

R?:

R>:

R8+: if 1. 8S:C 2 L(x), x is not indirectly blocked, and

2. there is some R with Trans(R) and R v* S,
3. there is an R-neighbour y of x with 8R:C =2 L(y)

then set L(y) = L(y) [ f8R:Cg
if 1. (6nS:C) 2 L(x), x is not indirectly blocked, and there

2. is an S-neighbour y of x with fC; _:Cg \ L(y) = ;

then set L(y) = L(y) [ fEg for some E 2 fC; _:Cg
if 1. (>nS:C) 2 L(x), x is not blocked, and

2. there are not n safe S-neighbours y1; : : : ; yn of x with

C 2 L(yi) and yi 6

:
= yj for 1 • i < j • n

then create n new nodes y1; : : : ; yn with L(hx; yii) = fSg,

L(yi) = fCg, and yi 6

:
= yj for 1 • i < j • n.

R6:

if 1. (6nS:C) 2 L(z), z is not indirectly blocked, and

2. ]SG(z; C) > n and there are two S-neighbours
:
= y

x; y of z with C 2 L(x) \ L(y), and not x 6
then 1. if x is a nominal node, then Merge(y; x)

2. else if y is a nominal node or an ancestor of x,
then Merge(x; y)
3. else Merge(y; x)

Figure 1: The tableaux expansion rules for SHIQ

take care that none of the nodes between a blocking and a
blocked one is a nominal node.
Generating and Shrinking Rules and Safe Neighbours

The rules R>, R9, and Ro? are called generating rules,
and the rules R6 and Ro are called shrinking rules. An R-
neighbour y of a node x is safe if (i) x is blockable or if (ii) x
is a nominal node and y is not blocked.
Pruning When a node y is merged into a node x, we “prune”
the completion graph by removing y and, recursively, all
blockable successors of y. More precisely, pruning a node
:
y (written Prune(y)) in G = (V; E; L; 6
=) yields a graph that
is obtained from G as follows:

1. for all successors z of y, remove hy; zi from E and, if z

is blockable, Prune(z);

2. remove y from V .

Merging merging a node y into a node x (written
:
=) yields a graph that is ob-
Merge(y; x)) in G = (V; E; L; 6
tained from G as follows:

1. for all nodes z such that hz; yi 2 E

(a) if fhx; zi; hz; xig\E = ;, then add hz; xi to E and

set L(hz; xi) = L(hz; yi),

(b) if hz; xi 2 E, then set L(hz; xi) = L(hz; xi) [

L(hz; yi),

(c) if hx; zi 2 E, then set L(hx; zi) = L(hx; zi) [

fInv(S) j S 2 L(hz; yi)g, and

(d) remove hz; yi from E;

2. for all nominal nodes z such that hy; zi 2 E

(a) if fhx; zi; hz; xig\E = ;, then add hx; zi to E and

set L(hx; zi) = L(hy; zi),

(b) if hx; zi 2 E, then set L(hx; zi) = L(hx; zi) [

L(hy; zi),

(c) if hz; xi 2 E, then set L(hz; xi) = L(hz; xi) [

fInv(S) j S 2 L(hy; zi)g, and

(d) remove hy; zi from E;

3. set L(x) = L(x) [ L(y);
4. add x 6
5. Prune(y).

:
= z for all z such that y 6

:
= z; and

If y was merged into x, we call x a direct heir of y, and we
use being an heir of another node for the transitive closure of
being a “direct heir”.
Comment: merging is a generalisation of what is often done
to satisfy an atmost number restriction for a node x in case
that x has too many neighbours. In SHOIQ, we might need
to merge nominal nodes that are related in some arbitrary,
non-tree-like way, so we must take care of all incoming and
outgoing edges. The usage of “heir” is quite intuitive since,
after y has been merged into x, x has “inherited” all of y’s
properties, i.e., its label, its inequalities, and its incoming and
outgoing edges (except for any outgoing edges to blockable
nodes, which are removed by Prune).
Level (of Nominal Nodes) Let o1; : : : ; o‘ be all the nominals
occurring in the input concept D. We deﬁne the level of a
nominal node y inductively as follows: (i) each (nominal)
node x with an oi 2 L(x), 1 • i • ‘, is of level 0, and (ii)
a nominal node x is of level i if x is not of some level j < i
and x has a neighbour that is of level i ¡ 1.
Comment: if a node with a lower level is merged into an-
other node, the level of the latter node may be reduced, but
it can never be increased because Merge preserves all edges
connecting nominal nodes. The completion graph initially
contains only level 0 nodes.
Strategy (of Rule Application) the expansion rules are ap-
plied according to the following strategy:
1. Ro is applied with highest priority.
2. Next, R6 and Ro? are applied, and they are applied ﬁrst
to nominal nodes with lower levels. In case they are both
applicable to the same node, Ro? is applied ﬁrst.
3. All other rules are applied with a lower priority.

Comment: this strategy is necessary for termination, and in
particular to ﬁx an upper bound on the number of applications
of Ro?.

We can now ﬁnish the description of the tableau algorithm:
A completion graph is complete if it contains a clash, or when
none of the rules is applicable. If the expansion rules can be
applied to D and R in such a way that they yield a complete
and clash-free completion graph, then the algorithm returns
“D is satisﬁable w.r.t. R”, and “D is unsatisﬁable w.r.t. R”
otherwise.

Ro:

if

for some o 2 NI there are 2 nodes x; y with
o 2 L(x) \ L(y) and not x 6

:
= y

then Merge(x; y)

Ro?: if 1. (6nS:C) 2 L(x), x is a nominal node, and there is
a blockable S-neighbour y of x such that C 2 L(y)
and x is a successor of y

2. there is no m with 1 6 m 6 n, (6mS:C) 2 L(x),

and there are m nominal S-neighbours z1; : : : ; zm of
:
= yj for all 1 • i < j • m.
x with C 2 L(zi) and yi 6
then 1. guess m 6 n and set L(x) = L(x) [ f(6mS:C)g

2. create m new nodes y1; : : : ; ym with

L(hx; yii) = fSg, L(yi) = fC; oig for oi 2 NI
new in G, and yi 6

:
= yj for 1 • i < j • m,

Figure 2: The new expansion rules for SHOIQ

Lemma 6 Let D be a SHOIQ concept in NNF and R a role
hierarchy.

1. When started with D and R, the completion algorithm

terminates.

2. D has a tableau w.r.t. R if and only if the expansion
rules can be applied to D and R such that they yield a
complete and clash-free completion graph.

Proof (sketch): Let m = jcl(D)j, k the number of roles and
their inverses in D and R, n the maximal number in atmost
number restrictions, and o1; : : : ; o‘ be all nominals occurring
in D, and let ‚ := 22m+k.

Termination is a consequence of the usual SHIQ condi-
tions (1 – 3 below) with respect to the blockable tree parts
of the graph [Horrocks et al., 1999], plus the fact that there
is a bound on the number of new nominal nodes that can be
added to G by Ro? (4 below): (1) all but the shrinking rules
strictly extend the completion graph by adding new nodes
and edges or extending node labels, while neither removing
nodes, edges, or elements from node labels; (2) new nodes
are only added by the generating rules, and each of these rules
is applied at most once for a given concept in the label of a
given node x or its heirs; (3) the length of a path consisting
entirely of blockable nodes is bounded by ‚: this is due to the
blocking condition and the fact that, if x is blockable, then
L(x) (cid:181) cl(D; R) and thus does not contain nominals; and
(4) at most O(‘(mn)‚) nominal nodes are generated.

To see (4), observe that Ro? can only be applied after
a nominal oi, for i • ‘, has been added to the label of a
blockable node x in a branch of one of the blockable “trees”;
otherwise, a blockable node cannot have a nominal node as a
successor. In this case, Ro will immediately merge x with an
existing level 0 node, say ri. As a consequence of this merg-
ing, it is possible that the predecessor of x is merged into a
nominal node n1 by R6 (due to the pruning part of merging,
this cannot happen to a successor of x). By deﬁnition, n1 is
of level 0 or 1. Repeating this argument, it is possible that
all ancestors of x are merged into nominal nodes. However,
as the maximum length of a sequence of blockable nodes is
‚, blockable ancestors of x can only be merged into nominal
nodes of level below ‚. Given the preconditions of Ro?, this
implies that we can only apply Ro? to nominal nodes of level
below ‚. This, together with (2) above and some counting,
yields the bound of O(‘(mn)‚).

The remainder of the proof is very similar to the SHIQ
case. For the second claim in Lemma 6, for the “if” direc-
tion, we can obtain a tableau T = (S; L0; E) from a complete
and clash-free completion graph G by unravelling blockable
“tree” parts of the graph as usual. For the “only if” direction,
using a tableau T = (S; L0; E) for D w.r.t. R to steer the
non-deterministic rules Rt, R?, R6, and Ro?, we can indeed
construct a complete and clash-free graph.
2
Since subsumption can be reduced to (un)satisﬁability and
SHOIQ can internalise general TBoxes, we have the fol-
lowing result.
Theorem 7 The SHOIQ tableau algorithm is a decision
procedure for satisﬁability and subsumption of SHOIQ con-
cepts w.r.t. TBoxes and role hierarchies.

5 Discussion
We have presented what is, to the best of our knowledge, the
ﬁrst goal-directed decision procedure for SHOIQ (and so
SHOIN ). Given that SHOIQ is NExpTime-complete [To-
bies, 2000], it is clear that, in the worst case, any decision
procedure will behave very badly, i.e., not terminate in prac-
tice. However, the algorithm given here is designed to be-
have well in many typically encountered cases, and to exhibit
a “pay as you go” behaviour:
if an input TBox, role hier-
archy, and concept do not involve any one of inverse roles,
number restrictions, or nominals, then Ro? will not be ap-
plied, and the corresponding non-deterministic guessing is
avoided. This is even true for inputs that do involve all of
these three constructors, but only in a “harmless” way. Hence,
our SHOIQ algorithm can be implemented to perform
just as well on SHIQ knowledge bases as state-of-the-art
DL reasoners for SHIQ [Horrocks & Patel-Schneider, 1998;
Haarslev & M¨oller, 2001; Pellet, 2003]. To ﬁnd out whether
our algorithm can handle some non-trivial, “true” SHOIQ
inputs, we are currently extending a highly optimised DL
reasoner, FaCT++ [Tsarkov & Horrocks, 2004], to implement
the algorithm described here.

References
[Baader & Hollunder, 1991] F. Baader and B. Hollunder.
In

Qualifying number restrictions in concept languages.
Proc. of KR’91. Morgan Kaufmann, 1991.

[Bechhofer et al., 2004] S. Bechhofer, F. van Harmelen,
J. Hendler, I. Horrocks, D. L. McGuinness, P. F. Patel-
Schneider, and L. A. Stein. OWL web ontology language
reference. W3C Recommendation, 10 February 2004.
Available at http://www.w3.org/TR/owl-ref/.
[Blackburn & Seligman, 1995] P. Blackburn and J. Selig-
man. Hybrid languages. J. of Logic, Language and In-
formation, 4, 1995.

[Calvanese et al., 1998] D. Calvanese, G. De Giacomo,
M. Lenzerini, D. Nardi, and R. Rosati. Description logic
framework for information integration. In Proc. of KR’98.
Morgan Kaufmann, 1998.

[Haarslev & M¨oller, 2001] V. Haarslev and R. M¨oller.
RACER system description. In Proc. of IJCAR 2001, vol.
2083 of LNAI. Springer, 2001.

[Hladik & Model, 2004] J. Hladik and J. Model. Tableau sys-
tems for SHIO and SHIQ. In Proc. of DL 2004. CEUR,
2004. Available from ceur-ws.org.

[Horrocks et al., 1999] I. Horrocks, U. Sattler, and S. Tobies.
In

Practical reasoning for expressive description logics.
Proc. of LPAR’99, vol. 1705 of LNAI. Springer, 1999.

[Horrocks et al., 2000] I. Horrocks, U. Sattler, and S. To-
bies. Reasoning with individuals for the description logic
SHIQ.
In Proc. CADE 2000, vol. 1831 of LNCS.
Springer, 2000.

[Horrocks et al., 2003] I. Horrocks, P. F. Patel-Schneider,
and F. van Harmelen. From SHIQ and RDF to OWL:
The making of a web ontology language. J. of Web Se-
mantics, 1(1):7–26, 2003.

[Horrocks & Patel-Schneider, 1998] I. Horrocks and P. F.
Patel-Schneider. FaCT and DLP: Automated reasoning
with analytic tableaux and related methods.
In Proc. of
TABLEAUX’98, vol. 1397 of LNAI. Springer, 1998.

[Horrocks & Sattler, 2001] I. Horrocks and U. Sattler. On-
tology reasoning in the SHOQ(D) description logic. In
Proc. of IJCAI 2001. Morgan Kaufmann, 2001.

[Horrocks & Sattler, 2005] I. Horrocks and U. Sattler. A tab-
leaux decision procedure for SHOIQ. available at www.
cs.man.ac.uk/˜sattler/ulis-ps.html, 2005.
[McGuinness & Wright, 1998] D. L. McGuinness and J. R.
Wright. An industrial strength description logic-based
conﬁguration platform.
IEEE Intelligent Systems, 13(4),
1998.

[Pacholski et al., 1997] L. Pacholski, W. Szwast, and L. Ten-
dera. Complexity of two-variable logic with counting. In
Proc. of LICS’97. IEEE Computer Society Press, 1997.

[Pellet, 2003] Pellet OWL reasoner. Maryland Informa-
tion and Network Dynamics Lab, 2003. http://www.
mindswap.org/2003/pellet/index.shtml.

[Schaerf, 1994] A. Schaerf. Reasoning with individuals in
concept languages. Data and Knowledge Engineering,
13(2), 1994.

[Tobies, 2000] S. Tobies. The complexity of reasoning with
cardinality restrictions and nominals in expressive descrip-
tion logics. J. of Artiﬁcial Intelligence Research, 12, 2000.
[Tobies, 2001] S. Tobies. Complexity Results and Practi-
cal Algorithms for Logics in Knowledge Representation.
PhD thesis, LuFG Theoretical Computer Science, RWTH-
Aachen, Germany, 2001.

[Tsarkov & Horrocks, 2004] D. Tsarkov and I. Horrocks.
Efﬁcient reasoning with range and domain constraints.
In Proc. of DL 2004. CEUR, 2004. Available from
ceur-ws.org.

[Vardi, 1997] M. Y. Vardi. Why is modal logic so robustly
decidable. In DIMACS Series in Discrete Mathematics and
Theoretical Computer Science, vol. 31. American Mathe-
matical Society, 1997.

