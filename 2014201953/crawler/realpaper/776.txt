Tractable Temporal Reasoning

∗

Clare Dixon, Michael Fisher and Boris Konev

Department of Computer Science, University of Liverpool,

{clare,michael,konev}@csc.liv.ac.uk

Liverpool L69 3BX, UK

Abstract

Temporal reasoning is widely used within both
Computer Science and A.I. However, the underly-
ing complexity of temporal proof in discrete tempo-
ral logics has led to the use of simpliﬁed formalisms
and techniques, such as temporal interval algebras
or model checking.
In this paper we show that
tractable sub-classes of propositional linear tem-
poral logic can be developed, based on the use of
XOR fragments of the logic. We not only show
that such fragments can be decided, tractably, via
clausal temporal resolution, but also show the ben-
eﬁts of combining multiple XOR fragments. For
such combinations we establish completeness and
complexity (of the resolution method), and also
describe how such a temporal language might be
used in application areas, for example the veriﬁca-
tion of multi-agent systems. This new approach to
temporal reasoning provides a framework in which
tractable temporal logics can be engineered by in-
telligently combining appropriate XOR fragments.

1 Introduction
Temporal logics have been used to describe a wide variety of
systems, from both Computer Science and Artiﬁcial Intelli-
gence. The basic idea of proof, within propositional, discrete
temporal logics, is also both intuitive and appealing. How-
ever the complexity of satisﬁability for such logics is high.
For example, the complexity of satisﬁability for propositional
linear time temporal logic (PTL) is PSPACE-complete [Sistla
and Clarke, 1985]. Consequently, model checking [Clarke et
al., 1999] has received much attention as it also allows users
to check that a temporal property holds for some underlying
model of the system.

Often temporal problems involve an underlying structure,
such as an automaton, where a key property is that the au-
tomaton can be in exactly one state at each moment. Such
problems frequently involve several process or agents, each
with underlying automaton-like structures, and we are inter-
ested in properties relating to how the agents progress under

∗The work of the first and last authors was partially supported
by EPRSC grant number GR/S63182/01 “Dynamic Ontologies: a
Framework for Service Descriptions”.

particular models of concurrency such as synchrony, asyn-
chrony etc., or particular coordination or cooperation actions.
In this paper we consider a new fragment of PTL that incor-
porates the use of XOR operators, denoted (q1 ⊕q2 ⊕. . .⊕qn)
meaning that exactly one qi holds for 1 ≤ i ≤ n. Since
the complexity of unsatisﬁability for XOR clauses in classi-
cal propositional logic is low [Schaefer, 1978], there is the
potential to carry much of this over to the temporal case.

Thus, in this paper we provide several results. First, we in-
troduce the PTL fragment to be considered, called TLX, and
show a complete clausal resolution system for this. The frag-
ment allows us to split the underlying set of propositions into
distinct subsets such that each subset (except one) represents
a set of propositions where exactly one proposition can hold
(termed XOR sets); the remaining set has no such constraints.
Then we show that deciding unsatisﬁability of speciﬁcations
in such a logic is, indeed, tractable.

2 XOR Temporal Logic
The logic we consider is called “TLX”, and its syntax and se-
mantics essentially follow that of PTL [Gabbay et al., 1980],
with models (isomorphic to the Natural Numbers, N) of the
form: σ = t0, t1, t2, t3, . . . where each state, ti, is a set of
proposition symbols, representing those propositions which
moment in time. The notation (σ, i) |=
are satisﬁed in the i
A denotes the truth (or otherwise) of formula A in the model
σ at state index i ∈ N. This leads to semantic rules:
(σ, i) |= g
A iff
(σ, i) |= ♦A
iff
(σ, i) |= A iff

(σ, i + 1) |= A
∃k ∈ N. (k (cid:2) i) and (σ, k) |= A
∀j ∈ N. if (j (cid:2) i) then (σ, j) |= A

th

For any formula A, model σ, and state index i ∈ N, then
either (σ, i) |= A holds or (σ, i) |= A does not hold, denoted
by (σ, i) (cid:9)|= A. If there is some σ such that (σ, 0) |= A, then
A is said to be satisﬁable. If (σ, 0) |= A for all models, σ,
then A is said to be valid and is written |= A.

The main novelty in TLX is that it is parameterised by
XOR-sets P1, P2,. . . , and the formulae of TLX(P1, P2, . . .)
are constructed under the restrictions that exactly one propo-
sition from every set Pi is true in every state. For example, if
we consider just one set of propositions P, we have
(p1 ⊕ p2 ⊕ . . . ⊕ pn) for all pi ∈ P.

Furthermore, we assume that there exists a set of proposi-
tions in addition to those deﬁned by the parameters, and that

IJCAI-07

318

these propositions are unconstrained as normal. Thus, TLX()
is essentially a standard propositional, linear temporal logic,
while TLX(P,Q,R) is a temporal logic containing at least
the propositions P ∪ Q ∪ R, where P = {p1, p2, . . . , pl},
Q = {q1, q2, . . . , qm}, and R = {r1, r2, . . . , rn} where P,
Q and R are disjoint, but also satisfying

[(p1⊕p2⊕. . .⊕pl) ∧(q1⊕q2⊕. . .⊕qm) ∧(r1⊕r2⊕. . .⊕rn)]

2.1 Normal Form
Assume we have n sets of XOR propositions P1 =
} and a set of ad-
{p11, . . . p1N1
ditional propositions A = {a1, . . . aNa

}, . . ., Pn = {pn1, . . . pnNn

}. In the following:

−
ij denotes a conjunction of negated XOR propositions

• ∧
P
from the set Pi;

+
ij denotes a disjunction of (positive) XOR proposi-

• ∨
P
tions from the set Pi;

• ∧

• ∨

Ai denotes a conjunction of non-XOR literals;

Ai denotes a disjunction of non-XOR literals.

(cid:2)

and SRESPk involve XOR resolution. Note we can only ap-
ply IRESA and SRESA between clauses with complementary
(non-XOR) literals on the right hand side. We can also apply
the IRESPk and SRESPk rules to these clauses but the dis-

∨

A1 ∨ ∨

junct
equivalent to true.

A2 on the right hand side of the conclusion will be

3 Soundness and Completeness
Similarly to [Fisher et al., 2001; Degtyarev et al., 2006], one
can show that whenever the parent clauses are satisﬁable then
so is the resolvent. Since all the rules of initial, and step res-
olution follow the same pattern, we ﬁrst prove the classical
propositional counterpart of the completeness theorem, and
then use it to prove the completeness of temporal resolution.
Consider the following classical set of resolution rules con-
sisting of the rule RESA:

∨

( ∨
P +

11 ∨ . . .
( ∨
P +

n2 ∨ ∨
P +
A1 ∨ ∨
A2)
and, for every k ∈ {1, . . . , n}, the rule RESPk :

n1 ∨ ∨
A1 ∨ a);
P +
n1 ∨ ∨
P +
P +

n2 ∨ ∨
P +

12 ∨ . . .

11 ∨ . . .

12 ∨ . . .

( ∨
P +

∨

∨

∨

A2 ∨ ¬a)

A normal form for TLX is of the form
i Ci where each
Ci is an initial, step or sometime clause (respectively) as fol-
lows:

( ∨
P +
( ∨
P +

11 ∨ . . .
12 ∨ . . .

∨

P +
k1
P +
k2

∨

∨ . . .

∨ . . .

∨

P +

∨

P +

n1 ∨ A1)
n2 ∨ A2)
n1 ∨ ∨
n2 ∨ ∨
P +
P +

( ∨
11 ∨ ∨
12 ∨ . . . com( ∨
P +
P +
P +
k1

,

∨

P +
k2

) ∨ . . . ∨ ∨

A1 ∨ ∨

A2)

Lemma 1 If a set of classical propositional clauses is unsat-
isﬁable than its unsatisﬁability can be established by the rules
RESA and RESPk in O(N1 × N2 × · · · × Nn × 2Na) time.

Proof: First we show that if an unsatisﬁable set of clauses
C does not contain non-XOR literals, then its unsatisﬁability
can be established by rules RESPk . Note that any such set of
clauses C is unsatisﬁable if, and only if, for every l, 0 < l ≤
n, and every set of propositions p1, p2, . . . , pl, where pi ∈
Pi, the set Cp1,...,pl of clauses from C, which contain none of
p1,. . . , pl, is nonempty. Indeed, otherwise every clause from
C contains at least one of the propositions p1,. . . pl, so making
p1, . . . , pl true satisﬁes C.

Assume all clauses from C consist of propositions from P1,
. . . , Pk only (originally, k = n) and show that with the rule
RESPk one can obtain an unsatisﬁable set of clauses C(cid:4)
in
which all clauses consist of propositions from P1,. . . , Pk−1
only.

Take arbitrary propositions p1 ∈ P1, p2 ∈ P2, . . . pk−1 ∈
Pk−1 and take arbitrary clauses C1 ∈ Cp1,p2,...,pk−1,pk,1 ,
C2 ∈ Cp1,p2,...,pk−1,pk,2 ,. . . , CNk
∈ Cp1,p2,...,pk−1,pk,Nk . Ap-
plying rule RESPk to C1,. . . , CNk one can obtain a clause
consisting of propositions from P1,. . . , Pk−1 only such
C
is
that C
for all possible combinations
formed from such clauses C
of p1 ∈ P1, p2 ∈ P2, . . . pk−1 ∈ Pk−1. Clearly, for every l,
0 < l ≤ n, and every set of propositions p1, p2, . . . , pl, where
pi ∈ Pi, the set C(cid:4)
is unsatisﬁ-
able. Applying this reasoning at most n times, one can obtain
an empty clause.

does not contain any of p1, . . . , pk−1. The set C(cid:4)

p1,...,pl is nonempty, hence, C(cid:4)

Consider now a set of clauses C, which may contain non-
XOR literals. For arbitrary p1 ∈ P1,. . . pn ∈ Pn con-
sider Cp1,...,pn . Similarly to the previous case, every such

(cid:4)

(cid:4)

(cid:4)

∧

−
1j ∧ . . .
P

∧

−

nj ∧ ∧
P

+

+

start ⇒ ∨
1i ∨ . . . ∨ ∨
ni ∨ ∨
Ai
P
P
Aj ⇒ g( ∨
1j ∨ . . . ∨ ∨
nj ∨ ∨
+
P
P
true ⇒ ♦( ∨
1k ∨ . . . ∨ ∨
nk ∨ ∨
P
P

Aj)
Ak).

+

+

+

Note that due to the semantics of the XOR clauses, if i (cid:9)= k
¬pji ∨ ¬pjk ≡ true

Nj(cid:3)
pji ∧ pjk ≡ false

(cid:3)
¬pji ≡ false

and

i=1

Also

pji ≡

¬pjk ¬pji ≡

Nj(cid:4)
(cid:4)
pji ≡ true.

i=1

pjk

pjk ∈Pj ,k(cid:3)=i

pjk ∈Pj ,k(cid:3)=i

allow us to maintain positive XOR propositions on the right
hand sides of clauses and negated XOR propositions on the
left hand side of clauses.

2.2 Resolution Rules
We decide the validity of formulae in TLX using a form of
clausal temporal resolution [Fisher et al., 2001]. The reso-
lution rules are split into three types: initial resolution, step
resolution and temporal resolution. These are presented in
Fig. 1. Initial resolution resolves constraints holding in the
initial moment in time. Step resolution involves resolving two
step clauses or deriving additional constraints when a contra-
diction in the next moment is derived. Temporal resolution
resolves a sometime clause with a constraint that ensures that
the right hand side of this clause cannot occur.

In the conclusion of these resolution rules com( ∨
P
P
denotes the disjunction of the propositions in both

ik )
+
ij ,
P
+
ij and

+

∨

∨

∨

+
ik or false if there are no propositions common to both. For

P
example, com(p1 ∨ p2, p2 ∨ p3) = p2.

Observe that IRESA and SRESA apply classical resolution
to the right hand side of the parent clauses whereas IRESPk

IJCAI-07

319

Initial Resolution:

IRESA

start ⇒ ( ∨
start ⇒ ( ∨
start ⇒ ( ∨

P +
11
P +
12
P +
11

∨ . . .

∨ . . .

∨ . . .

∨

∨

P +
n1
P +
n2
P +
n1

∨

∨ ∨
∨ ∨

A1 ∨ a)
A2 ∨ ¬a)

∨ ∨

P +
12

∨ . . .

∨

P +
n2

∨ ∨

A1 ∨ ∨

A2)

For every k ∈ {1, . . . , n} we have the rule.

IRESPk

start ⇒ ( ∨
start ⇒ ( ∨
start ⇒ ( ∨

P +
11
P +
12
P +
11

∨ . . . ∨ ∨
∨ . . . ∨ ∨

∨

∨ . . .

P +
k1
P +
k2

P +
n1
P +
n2
∨ . . . ∨ com( ∨
P +
k1

∨ . . .

∨

∨ ∨

P +
12

∨ ∨
∨ ∨

A1)
A2)

,

∨

P +
k2

) ∨ . . . ∨ ∨

P +
n1

∨ ∨

P +
n2

∨ ∨

A1 ∨ ∨

A2)

Step Resolution:

SRESA

∧

A1 ∧ ∧

A2 ∧ ∧

P −
11

∧ . . .

∧

∧

A1 ∧ ∧
A2 ∧ ∧
P −
∧ ∧
n1

P −
11
P −
12
P −
12

∧

∧ . . .

∧ . . .

∧ . . .

∧

∧

P −
n1
P −
n2
P −
n2

∧

⇒ g( ∨
⇒ g( ∨
⇒ g( ∨

P +
11
P +
12
P +
11

∨ . . .

∨ . . .

∨ . . .

∨

∨

P +
n1
P +
n2
P +
n1

∨

∨ ∨
∨ ∨

A1 ∨ a)
A2 ∨ ¬a)

∨ ∨

P +
12

∨ . . .

∨

P +
n2

∨ ∨

A1 ∨ ∨

A2)

For every k ∈ {1, . . . , n} we have the rule

SRESPk

∧

A1 ∧ ∧
A2 ∧ ∧

P −
11
P −
12

∧

∧ . . .

∧ . . .

∧

P −
n1
P −
n2

∧

⇒ g( ∨
⇒ g( ∨

P +
11
P +
12

∨ . . . ∨ ∨

∨ . . . ∨ ∨

∨ . . . ∨ ∨

∨ . . .

∨

P +
n2

P +
k1
P +
k2

∨ A1)

P +
n1
∨ A2)

∧

A1 ∧ ∧

A2 ∧ ∧

P −
11

∧ . . .

∧

P −
n1

∧ ∧

P −
12

∧ . . .

∧

P −
n2

⇒ g( ∨

P +
11

∨ ∨

P +
12

∨ . . . ∨ com( ∨

P +
k1

,

∨

P +
k2

) ∨ . . . ∨ ∨

P +
n1

∨ ∨

P +
n2

∨ A1 ∨ A2)

CONV

A−
start ⇒ (¬ ∧
1

Temporal Resolution:

TRES

∧

A1 ∧ ∧
P −
∨ ¬ ∧
11

∧ . . .

P −
11
∨ . . . ¬ ∧

∧

P −
n1

⇒ g

false

P −
n1

);

true ⇒ g(¬ ∧
A−
1

∨ ¬ ∧

P −
11

∨ . . . ¬ ∧

P −
n1

)

L ⇒

true ⇒ ♦( ∨

P +
11

(¬ ∨

∧ . . . ∧ ¬ ∨

P +
11
∨ . . . ∨ ∨

P +
n1
∨ A1)

P +
n1

∧ ¬A1)

start ⇒ ¬L

true ⇒ g¬L

Figure 1: Resolution Rules for the XOR Fragment

(cid:5)Cp1,...,pn
(cid:5)Cp1,...,pn must be unsatisﬁable
(cid:5)Cp1,...,pn
(cid:5)Cp1,...,pn . Applying RESA “in the same way”, one can

Cp1,...,pn should be nonempty. Consider the set
of clauses obtained by deleting all XOR-propositions from
clauses of Cp1,...,pn. Every
(otherwise, extending the satisfying assignment for
with p1, . . . , pn we satisfy all the clauses in C). Then clas-
sical binary resolution will be able to prove unsatisﬁability
of
, which does not contain neither non-XOR
obtain a clause C
literals, nor p1, . . . , pn. The set C(cid:4)
, formed from such clauses
for all possible combinations of p1 ∈ P1, p2 ∈ P2,
C
. . . pk−1 ∈ Pk−1, is an unsatisﬁable set of clauses not con-
taining non-XOR literals.

(cid:4)

(cid:4)

Finally, one can see that it is possible to implement the
described procedure in O(N1 × N2 × · · · × Nn × 2Na) time.

(cid:2)

Next we sketch the proof of completeness of temporal resolu-
tion, which is obtained combining the ideas of [Fisher et al.,
2001; Degtyarev et al., 2002] and Lemma 1.

Deﬁnition 1 (Behaviour Graph) We split the set of tempo-
ral clauses into three groups. Let I denote the initial clauses;

T be the set of all step clauses; and E be the sometime
clauses.

Given a set of clauses over a set of propositional symbols
P, we construct a ﬁnite directed graph G as follows. The
nodes of G are interpretations of the set of propositions, that
satisfy the XOR constraints over the XOR subsets. Notice
that, because of the XOR-constraints, exactly one proposi-
tion from each set of XOR propositions Pi and any subset of
propositions in A are true in I. This means that there at at
most N1 ×N2 ×· · ·×Nn ×2Na nodes in the behaviour graph.
(cid:4)
For each node, I, we construct an edge in G to a node I

if, and only if, the following condition is satisﬁed:

• For every step clause (P ⇒ g

Q) ∈ T , if I |= P then

(cid:4) |= Q.

I

A node, I, is designated an initial node of G if I |= I. The
behaviour graph G of the set of clauses is the maximal sub-
graph of G given by the set of all nodes reachable from initial
nodes.
If G is empty then the set I is unsatisﬁable. In this case there
must exist a derivation by IRESA and IRESPk as described in
Lemma 1 (and in O(N1 × N2 × · · · × Nn × 2Na) time).

IJCAI-07

320

("think")

s
t

sb

("bid")

("assess")

sa

sw

("wait")

1.
2.
3.
4.
5.
6.
7.
8.
9.
10.

start ⇒ st
st ⇒ g(st ∨ sb)
sb ⇒ g
sw
sa ⇒ g
st
sw ⇒ g(sw ∨ sa)
true ⇒ ♦¬st
start ⇒ ts
ts ⇒ g
tr
tr ⇒ g(tr ∨ tf )
tf ⇒ g
ts

("start")

ts

("finish")

tf

t
r

("receiving")

Figure 2: Automata for agents S and T , together with corresponding clauses in normal form.

Now suppose G is not empty. Let I be a node of G which
has no successors. Let {(Pi ⇒ g
Qi)} be the set of all
step clauses such that I |= Pi, then ∧Qi is unsatisﬁable.
Using Lemma 1, one can show that step resolution proves
∧Pi ⇒ g
false. After the set of clauses is extended by the
conclusion of the CONV rule, ∨¬Pi, the node I is deleted
from the graph.

In the case when all nodes of G have a successor, a
contradiction can be derived with the help of the tempo-
ral resolution rule TRES. Note that we impose no restric-
tion on this rule (it coincides with the temporal resolution
rule for the general calculi presented in [Fisher et al., 2001;
Degtyarev et al., 2002]) and the proof of completeness is no
different from what is already published [Fisher et al., 2001;
Degtyarev et al., 2002].

4 Complexity
Again, we consider initial and step resolution ﬁrst.

Lemma 2 Using the rules of initial and step resolution, it
is possible to reduce a set of temporal clauses to one whose
behaviour graph does not have nodes without successors in

(cid:6)(cid:7)

(cid:9)

(cid:8)3

O

N1 × N2 × · · · × Nn × 2Na

time.

Proof: Consider the following resolution strategy. For every
set of propositions p1 ∈ P1,. . . , pn ∈ Pn and a ∈ A, consider
the set of all step-clauses

∧

A1 ∧ ∧
P

−
11 ∧ . . .

∧

−

n1 ⇒ g( ∨
P
P

+

11 ∨ . . .

∨

+

n1 ∨ ∨
P

A1)

∧

∧

∧

P

P

A1,

−
11, . . . , . . .

−
such that
n1 do not contain any of
a, p1, . . . , pn (there are at most N1 × N2 × · · · × Nn × 2Na
such sets of clauses), and try establishing the unsatisﬁabil-
ity of the conjunction of the right-hand sides together with
the universal clauses by step resolution (as Lemma 1 shows,
this can be done in O(N1 × N2 × · · · × Nn × 2Na) time.
Then, all nodes without successors will be deleted from the
behaviour graph (but some new such nodes may emerge). Af-
ter N1 × N2 × · · · × Nn × 2Na repetitions, we obtain a graph
in which every node has a successor.

(cid:2)

Lemma 3 Given a set of temporal clauses, it is possible to
¬qk, as required for the TRES
ﬁnd L such that L ⇒

(cid:3)

k

rule, in time polynomial in N1 × N2 × · · · × Nn × 2Na.
(cid:2)
Proof: To ﬁnd such L, it sufﬁces to ﬁnd a strongly con-
nected component in the behaviour graph of the set of clauses,
k ¬qk.
such that for every node I of this component, I |=
The simplest brute-force algorithm would analyse all pairs of
nodes (and there are (N1 ×N2 ×· · ·×Nn×2Na)2 such pairs),
and this can be done more efﬁciently with step resolution as
in [Degtyarev et al., 2006].
(cid:2)

Theorem 4 If a set of temporal clauses is unsatisﬁable, tem-
poral resolution will deduce a contradiction in time polyno-
mial in N1 × N2 × · · · × Nn × 2Na .

5 Example

Having described the underlying approach, we will now con-
sider an example that makes use of some of these aspects.
In particular, we will have multiple XOR fragments, together
with standard propositions (unconstrained by XOR clauses).
The example we will use is a simpliﬁcation and abstraction
of agent negotiation protocols; see, for example [Ballarini et
al., 2006]. Here, several (in our case, two) agents exchange
information in order to come to some agreement. Each agent
essentially has a simple control cycle, which can be repre-
sented as a ﬁnite state machine. In fact, we have simpliﬁed
these still further, and sample basic control cycles are given
in Fig. 2 (for both agents S and T ).

Thus, we aim to use these automata as models of the
agents, then formalise these within our logic.
Importantly,
we will add additional clauses (and propositions) characteris-
ing agreements or concurrency and, ﬁnally, we will show how
our resolution method can be used to carry out veriﬁcation.

We begin by characterising each agent separately as a set
of clauses within our logic. To achieve this, we use a set of
propositions for each agent. Thus, the automaton describing
agent S is characterised through propositions of the form sa,
sb, etc., while the automaton describing agent T is charac-
terised using propositions such as tr, ts, etc. Both these sets
are XOR sets. Thus, exactly one of sa, sb, . . ., and exactly
one of tr, ts, . . ., must be true at any moment in time.

Now, the set of clauses characterising the two automata are
given in Fig. 2. Regarding automaton S’s description, note
that clause 6 ensures that the automaton is inﬁnitely often in

IJCAI-07

321

true ⇒ ♦(sb ∨ sw ∨ sa)
start ⇒ ts
¬tr ∧ ¬tf ⇒ g
tr
¬ts ∧ ¬tf ⇒ g(tr ∨ tf )

start ⇒ st

1.
2. ¬sb ∧ ¬sw ∧ ¬sa ⇒ g(st ∨ sb)
3. ¬st ∧ ¬sw ∧ ¬sa ⇒ g
sw
4. ¬st ∧ ¬sb ∧ ¬sw ⇒ g
st
5. ¬st ∧ ¬sb ∧ ¬sa ⇒ g(sw ∨ sa)
6.
7.
8.
9.
18.
19.
20.
21.
22.
23.
24.
25.
26.
27.
28.
29.
30.
31.
32.
33.
34.
35.
36.
37.
38.
39.
40.
41.
42.
43.
44.

(¬agree ∧ ¬st ∧ ¬sw ∧ ¬sa ∧ ¬ts ∧ ¬tf ) ⇒ g

false

(¬st ∧ ¬sw ∧ ¬sa) ⇒ g(ts ∨ tf )

(agree ∧ ¬st ∧ ¬sw ∧ ¬sa ∧ ¬ts ∧ ¬tf ) ⇒ g

false

true ⇒ g(agree ∨ st ∨ sw ∨ sa ∨ ts ∨ tf )

true ⇒ g(¬agree ∨ st ∨ sw ∨ sa ∨ ts ∨ tf )
true ⇒ g(st ∨ sw ∨ sa ∨ ts ∨ tf )

(¬agree ∧ ¬sb ∧ ¬sw ∧ ¬sa ∧ ¬ts ∧ ¬tf ) ⇒ g
st
(agree ∧ ¬sb ∧ ¬sw ∧ ¬sa ∧ ¬ts ∧ ¬tf ) ⇒ g
st

¬sb ∧ ¬sw ∧ ¬sa ⇒ g(st ∨ ts ∨ tf )

(¬agree ∧ ¬st ∧ ¬sb ∧ ¬sw ∧ ¬ts ∧ ¬tf ) ⇒ g

false

(agree ∧ ¬st ∧ ¬sb ∧ ¬sw ∧ ¬ts ∧ ¬tf ) ⇒ g

false

true ⇒ g(sb ∨ sw ∨ sa ∨ ts ∨ tf )

true ⇒ g(agree ∨ st ∨ sb ∨ sw ∨ ts ∨ tf )

true ⇒ g(¬agree ∨ st ∨ sb ∨ sw ∨ ts ∨ tf )
true ⇒ g(st ∨ sb ∨ sw ∨ ts ∨ tf )
true ⇒ g(ts ∨ tf )

¬tr ∧ ¬tf ⇒ g

false
start ⇒ tr ∨ tf
start ⇒ false

10.
11.
12.
13.
14.
15.
16.
17.

¬ts ∧ ¬tr ⇒ g
ts

true ⇒ ♦agree

(agree ∧ ¬st ∧ ¬sb ∧ ¬sa ∧ ¬ts ∧ ¬tf ) ⇒ g
sa
(agree ∧ ¬st ∧ ¬sb ∧ ¬sa ∧ ¬ts ∧ ¬tf ) ⇒ g
tf
(¬agree ∧ ¬st ∧ ¬sb ∧ ¬sa) ⇒ g
sw
(¬agree ∧ ¬ts ∧ ¬tf ) ⇒ g
tr
(agree ∧ ¬st ∧ ¬sb ∧ ¬sa ∧ ¬tr) ⇒ g
sw
(agree ∧ ¬sw ∧ ¬ts ∧ ¬tf ) ⇒ g
tr

(¬st ∧ ¬sb ∧ ¬sw ∧ ¬ts ∧ ¬tr) ⇒ g

false

true ⇒ g(sb ∨ sw ∨ sa ∨ tr ∨ tf )

true ⇒ g(st ∨ sb ∨ sw ∨ ts ∨ tr)

(agree ∧ ¬st ∧ ¬sb ∧ ¬sa ∧ ¬ts ∧ ¬tf ) ⇒ g

false

(¬agree ∧ ¬st ∧ ¬sb ∧ ¬sa ∧ ¬ts ∧ ¬tf ) ⇒ g¬agree

true ⇒ g(¬agree ∨ st ∨ sb ∨ sa ∨ ts ∨ tf )

true ⇒ g(agree ∨ st ∨ sb ∨ sa ∨ ts ∨ tf )
true ⇒ g(st ∨ sb ∨ sa ∨ ts ∨ tf )

]

]

]

]

[18, 10, 4 SRESPk
[19 CONV]
[20, 12, 13 SRESPk
[21 CONV]
[22, 14, 15 SRESPk
]
[23, 15, 14, 11 TRES]
[24, 22 SRESA]
[25, 3 SRESPk
]
[26, 15 SRESPk
[27 CONV]
[26, 17 SRESPk
[29 CONV]
[28, 30 SRESA]
[31, 2 SRESPk
]
[32, 15 SRESPk
[32, 17 SRESPk
[33, 15, 34, 17, 6 TRES]
[35, 15, 4 SRESPk
[36 CONV]
[35, 17, 4 SRESPk
[38 CONV]
[37, 39 SRESA]
[40, 35, 31, 25 SRESPk
[41, 8 SRESPk
[42 CONV]
[43, 7 IRESPk

]
]

]

]

]

]

]

Figure 3: Resolution Proof for Automata Agents Example.

a state other than st, ensuring that the automaton can not re-
main in state st forever.

We can also characterise how the computations within each
automaton relate. To begin with, we assume a simple, syn-
chronous, concurrent model where both automata make a
transition at the same time (see Section 5 for variations on
this). Next we add a key aspect in negotiation protocols,
namely a description of what happens when an agreement is
reached. In our example, this is characterised as a synchro-
nised communication act. Logically, we use the proposition
agree to denote this, and add the following clauses.

11.
12.
13.
14.
15.
16.
17.

true ⇒ ♦agree
(agree ∧ sw ∧ tr) ⇒ g
sa
(agree ∧ sw ∧ tr) ⇒ g
tf
(¬agree ∧ sw) ⇒ g
sw
(¬agree ∧ tr) ⇒ g
tr
(sw ∧ agree ∧ ¬tr) ⇒ g
sw
(¬sw ∧ agree ∧ tr) ⇒ g
tr

Here, we say that agreements will occur inﬁnitely often in

the future (clause 11). Clauses 12 and 13 capture the exact
synchronisation. If an agreement occurs while automaton S is
in state sw and automaton T is in tr, then the automata make
transitions forward to states sa and tf respectively. Finally,
clauses 14–17 ensure that, if no synchronised agreement is
possible, then the automata remain in their relevant states.

The clauses above represent the speciﬁcation of a simple
system. As an example of how resolution can be used, we
also wish to verify that the system is simultaneously in states
st and ts eventually. To verify this, we add the negation of
this property, as characterised by clause 18:

18.

true ⇒ g(¬st ∨ ¬ts)

Thus, if we can derive a contradiction from clauses 1–18 then
we know the negated property is valid for this speciﬁcation.
We ﬁrst rewrite clauses 1–18 in the correct format for the
normal form. The refutation is given in Figure 3.

The example above essentially captures activity within a
synchronous, truly concurrent, system. If we wish to move to

IJCAI-07

322

more complex models of computation, we can do so, essen-
tially by introducing the notion of a turn. Thus, when it is au-
tomaton S’s turn to move, turns is true; when it is automaton
T ’s turn to move, turnt is true. Then, each clause describ-
ing an automaton transition, for example, 3. sb ⇒ g
sw is
replaced by two clauses

3a.
3b.

(sb ∧ turns) ⇒ g
(sb ∧ ¬turns) ⇒ g

sw
sb .

In the example above, turns and turnt are effectively both
true together (and forever). However, we can modify the
synchronisation clauses and model a different form of con-
currency. For example, if we were to introduce interleaving
concurrency, we might use the following clauses1:

start ⇒ turns

turns ⇒ g

turnt

turnt ⇒ g

turns

If we go further still, and introduce an asynchronous model
of concurrency, then we might get

true ⇒ ♦turns

true ⇒ ♦turnt

In both the above cases if we want to ensure that exactly
one of turns and turnt hold at each moment we implic-
(turns ⊕ turnt) and so we are effectively using
itly have
TLX(S,T ,{turns, turnt}).

6 Concluding Remarks and Related Work

In this paper we have developed a tractable sub-class of tem-
poral logic, based on the central use of XOR operators. This
logic can be decided, tractably, via clausal temporal resolu-
tion. Importantly, multiple XOR fragments can be combined.
This new approach to temporal reasoning provides a frame-
work in which tractable temporal logics can be engineered by
intelligently combining appropriate XOR fragments. Further,
this has the potential to provide a deductive approach, with a
similar complexity to model checking, thus obtaining a prac-
tical veriﬁcation method. In addition, this approach has the
potential to be extended to ﬁrst-order temporal logics which
can deal with inﬁnite state systems.

The complexity result means that TLX is more amenable
to efﬁcient implementation than other similar temporal log-
ics. Moreover, since no two propositions from the same XOR
set can occur in the right- (or left-) hand side of any temporal
clause, one can efﬁciently represent disjunctions of (positive)
propositions (and conjunctions of negated propositions) as bit
vectors and the rules of temporal resolution as bit-wise oper-
ations on such bit vectors. Thus, temporal reasoning in TLX
can be efﬁcient not only in theory, but also in practice.

Demri and Schnoebelen [2002] consider sub-fragments of
PTL, particularly those restricting the number of proposi-
tions, the temporal operators allowed, and the depth of tem-
poral nesting in formulae. Demri and Schnoebelen show that,
since the formulae tackled in practical model checking often
fall within such fragments, then this provides a natural expla-
nation for the viability of model checking in PTL.

Recent results relating to a clausal resolution calculus for
propositional temporal logics can be found in [Fisher et al.,

1Note that a different model of concurrency might also require

modification in the agreement clauses.

2001; Hustadt and Konev, 2003; Hustadt et al., 2004]. Since
deciding unsatisﬁability of PTL is also PSPACE-complete,
then deductive veriﬁcation of PTL formulae would seem to be
an impractical way to proceed. However, just as Demri and
Schnoebelen showed how PTL model checking can be seen
as being tractable when we consider fragments of PTL, so we
have been examining fragments of PTL that allow clausal res-
olution to be tractable. The ﬁne grained complexity analysis
shows that the calculus is polynomial in the number of XOR
propositions (and exponential in the non-XOR propositions)
making it efﬁcient for problems with large numbers of XOR
propositions and just a few non-XOR propositions.

Related to the fragment presented in this paper is a more
restricted case in [Dixon et al., 2006] which can be used to
represent B¨uchi Automata. In that paper, a particular frag-
ment allowing two XOR sets of propositions but where the
allowable clauses were further restricted is considered and a
polynomial resolution calculus given. One can show that ev-
ery resolvent within that calculus can be derived by applying
resolution rules from the resolution calculus proposed in this
paper restricted to two XOR sets.

References
[Ballarini et al., 2006] P. Ballarini, M. Fisher, and M. Wooldridge.
Automated Game Analysis via Probabilistic Model Checking: a
case study. Electronic Notes in Theoretical Computer Science,
149(2):125–137, 2006.

[Clarke et al., 1999] E.M. Clarke, O. Grumberg, and D. Peled.

Model Checking. MIT Press, December 1999.

[Degtyarev et al., 2002] A. Degtyarev, M. Fisher, and B. Konev.
A Simpliﬁed Clausal Resolution Procedure for Propositional
Linear-Time Temporal Logic.
In Proc. TABLEAUX-02, LNCS
vol. 2381, pages 85–99. Springer-Verlag, 2002.

[Degtyarev et al., 2006] A. Degtyarev, M. Fisher, and B. Konev.
Monodic Temporal Resolution. ACM Transactions on Compu-
tational Logic, 7(1), January 2006.

[Demri and Schnoebelen, 2002] S. Demri and P. Schnoebelen. The
Complexity of Propositional Linear Temporal Logic in Simple
Cases. Information and Computation, 174(1):84–103, 2002.

[Dixon et al., 2006] C. Dixon, M. Fisher, and B. Konev. Is There a
Future for Deductive Temporal Verification? In Proc. TIME-06.
IEEE Computer Society Press, 2006.

[Fisher et al., 2001] M. Fisher, C. Dixon, and M. Peim. Clausal
Temporal Resolution. ACM Transactions on Computational
Logic, 2(1):12–56, January 2001.

[Gabbay et al., 1980] D. Gabbay, A. Pnueli, S. Shelah, and J. Stavi.
In Proc. POPL-80, pages

The Temporal Analysis of Fairness.
163–173, January 1980.

[Hustadt and Konev, 2003] U. Hustadt and B. Konev.

TRP++
2.0: A Temporal Resolution Prover. In Proc. CADE-19, LNAI
vol. 2741, pages 274–278. Springer, 2003.

[Hustadt et al., 2004] U. Hustadt, B. Konev, A. Riazanov, and
In Proc.

A. Voronkov. TeMP: A Temporal Monodic Prover.
IJCAR-04, LNAI vol. 3097, pages 326–330. Springer, 2004.

[Schaefer, 1978] T. J. Schaefer. The Complexity of Satisfiability

Problems. In Proc. STOC-78, pages 216–226, 1978.

[Sistla and Clarke, 1985] A. P. Sistla and E. M. Clarke. Complexity
of Propositional Linear Temporal Logics. Journal of the ACM,
32(3):733–749, July 1985.

IJCAI-07

323

