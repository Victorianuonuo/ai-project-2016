An Extension To Conformant Planning Using Logic Programming

A. Ricardo Morales
Texas Tech University

Computer Science Department

ricardo@cs.ttu.edu

Phan Huy Tu and Tran Cao Son

New Mexico State University

Department of Computer Science

{tphan,tson}@cs.nmsu.edu

Abstract

In this paper we extend the logic programming
based conformant planner described in [Son et al.,
2005a] to allow it to work on planning problems
with more complex descriptions of the initial states.
We also compare the extended planner with other
concurrent conformant planners.

1 Introduction

Previous work [Gelfond and Morales, 2004; Son et al.,
2005b; 2005a; Tu et al., 2006] have explored the usefulness
of approximations of AL actions theories to conformant plan-
ning. Among them, [Son et al., 2005a; Tu et al., 2006] de-
ﬁne different approximations in terms of logic programs and
use these approximations to develop conformant planners in
the logic programming paradigm. The choice of logic pro-
gramming in the implementation of planners in general and
conformant planners in particular offers several advantages.
First, the correctness of the planner can be formally proved.
Second, logic programming allows us to deal with domains
with static causal laws (also called constraints). And ﬁnally,
concurrent planning and domain control knowledge can be
implemented in the planner without any difﬁculty.

The planners in [Son et al., 2005a; 2005b; Tu et al., 2006],
however, suffer from two main drawbacks: (i) they work
only on planning problems where the initial situation can be
characterized by a single set of ﬂuent literals; and (ii) they
are in general incomplete, i.e., they might not be able to
solve some problems which are solvable by other planners.
Since these planners are based on an approximation theory,
the latter problem is inevitable.
It remained unclear, how-
ever, whether or not these planners can be extended to deal
with other types of conformant planning problems, e.g. plan-
ning problems where the set of possible initial states is given
by a disjunction. Furthermore, it is important to character-
ize conditions for which they are complete. An interesting
work on this issue has recently been studied in [Son and Tu,
2006]. Nevertheless, the proposed completeness condition is
restricted to action theories without static causal laws.

In this paper we address these limitations by (a) expanding
the logic programming implementation of [Son et al., 2005a]
to build a new conformant planner, called CPASPm, which

can operate on planning problems with a more complex de-
scription of the initial state of the domain; and (b) extending
the completeness result in [Son and Tu, 2006] to action theo-
ries with static causal laws.

This paper is organized as follows. In the next section, we
review the basics of the action description language AL from
[Baral and Gelfond, 2000] and the deﬁnition of an approxi-
mation from [Son et al., 2005a]. In Section 3, we describe
an extended logic programming based conformant planner
called CPASPm. In Section 4 we state the soundness of the
implementation and provide a sufﬁcient condition on action
theories for which the planner is complete. Finally, in Section
5, we compare the performance of CPASPm with some other
concurrent conformant planners.

2 Background
2.1 AL Action Theories and Transition Diagrams
Dynamic systems can be modeled by transition diagrams
whose nodes correspond to possible states of the domain and
whose arcs correspond to actions that take the domain from
one state to another. We limit our attention to transition dia-
grams that can be deﬁned by AL action theories.

The signature Σ of an AL action theory consists of two
disjoints sets of symbols: a set F of ﬂuents and a set A of el-
ementary actions. An action is a non-empty set of elementary
actions. A ﬂuent literal (or literal for short) is either a ﬂuent
F or its negation ¬F . An AL action theory is a collection of
statements of the forms:

e causes l if p

l if p

impossible a if p

(1)

(2)

(3)

where e is an elementary action, a is an action, and p is a set
of ﬂuent literals from the signature Σ. Statement (1), called
a dynamic causal law, says that, if e is executed in a state
satisfying p then l will hold in any resulting state. Statement
(2), called a static causal law, says that any state satisfying
p must satisfy l. Statement (3) is an impossibility condition,
which says that action a cannot be performed in any state
satisfying p. Given an action theory D, a set of literals s is
closed under a static causal law (2) if l ∈ s whenever p ⊆ s.
For a set of literals s, by Cn(s), we denote the smallest set
of literals that includes s and is closed under the set of static

IJCAI-07

1991

causal laws of D. A state σ is a complete and consistent sets
of literals closed under the set of static causal laws of D. An
action b is said to be prohibited in state σ if D contains an
impossibility condition (3) s.t. p ⊆ σ and a ⊆ b. For an
action a and a state σ, E(a, σ) stands for the set of all literals
l s.t. D contains a law (1) with p ⊆ σ and e ∈ a. Elements
of E(a, σ) are called direct effects of the execution of a in
σ. An action theory D describes a transition diagram T (D).
The nodes of T (D) are states of D and arcs are labeled with
actions. The transitions of T (D) are deﬁned as follows.
Deﬁnition 1 ([McCain and Turner, 1997]) For an action a
(cid:2)(cid:5) ∈ T (D) iff a is
and two states σ and σ
not prohibited in σ and

, a transition (cid:4)σ, a, σ

(cid:2)

(cid:2) = Cn(E(a, σ) ∪ (σ ∩ σ

σ

(cid:2)))

(4)

(cid:2)

(cid:2)

Given a state σ and an action a, such σ
is often referred to as
a possible successor state of σ as the result of the execution
of a. When σ and a are clear from the context, we simply say
that σ

is a possible successor state.

An action theory D is consistent if for any state σ and ac-
tion a which is not prohibited in σ there is at least one possible
successor state. In this paper, we consider consistent action
theories only.

We now introduce some terminology used to describe
properties of a transition diagram T (D). By convention,
we use letters a and σ (possibly indexed) to denote actions
and states respectively. A model M of a chain of events
α = (cid:4)a0, . . . , an−1(cid:5) is an alternate sequence of states and
actions (cid:4)σ0, a0, σ1, . . . , an−1, σn(cid:5) s.t. (cid:4)σi, ai, σi+1(cid:5) ∈ T (D)
for 0 ≤ i < n. σ0 (resp. σn) is referred to as the initial state
(resp. ﬁnal state) of M . We say that M entails a set of literals
s, written as M |= s, if s ⊆ σn. Furthermore, we sometimes
write (cid:4)σ0, α, σn(cid:5) ∈ T (D) to denote that there is a model of α
whose initial state and ﬁnal state are σ0 and σn, respectively.
(cid:2)
An action a is executable in a state σ if there is a state σ
(cid:2)(cid:5) ∈ T (D). A chain of events α = (cid:4)a0, . . . , an−1(cid:5)
s.t. (cid:4)σ, a, σ
is executable in σ if either (i) n = 0 (i.e., α is an empty chain
of events), or (ii) a0 is executable in σ and for every σ
s.t.
(cid:4)σ, a, σ
.
2.2 Approximations of T (D) and Conformant

(cid:2)(cid:5) ∈ T (D), (cid:4)a1, . . . , an−1(cid:5) is executable in σ

(cid:2)

(cid:2)

Planning Problem

In many of real world applications, an agent may not have
complete knowledge of the current state of the domain. Un-
der such circumstances it is not possible for the agent to di-
rectly reason about the effects of actions using the transition
diagram of the domain. Our approach to reasoning with in-
complete information is based on using approximations of ac-
tion theories [Son and Baral, 2001; Son et al., 2005b; 2005a;
Tu et al., 2006]. In this section, we review the deﬁnition of
approximation from [Son et al., 2005a] and discuss how an
approximation can be used to ﬁnd a solution of a conformant
planning problem.

Let D be an action theory. A set s of literals is a partial
state if it is a subset of some state and it is closed under the set
of static causal laws of D. For a partial state s, a completion
of s is a state σ s.t. s ⊆ σ and by comp(s) we denote the
set of all completions of s. For a set of partial states S by
comp(S) we denote the set

(cid:2)
s∈S comp(s).

Deﬁnition 2 (Approximation [Son et al., 2005a]) T
an approximation of D if:

(cid:2)(D) is

1. Nodes of T
2. If (cid:4)s, a, s

(cid:2)(D) are partial states of T (D).

(cid:2)(cid:5) ∈ T

(cid:2)(D) then for every σ ∈ comp(s),

(a) a is executable in σ, and
(b) s

for every σ

(cid:2) ⊆ σ

(cid:2)

(cid:2)

s.t. (cid:4)σ, a, σ

(cid:2)(cid:5) ∈ T (D).

(cid:2)(cid:5) ∈ T

It is not difﬁcult to see that the following observation holds.
(cid:2)(D) be an ap-
Observation 1 ([Son et al., 2005a]) Let T
proximation of D. Then, for every chain of events α, if
(cid:2)(D) then for every σ ∈ comp(s), (a) α is
(cid:4)s, α, s
(cid:2)(cid:5) ∈
executable in σ; and (b) s
T (D).
This observation states that reasoning using approximations
is sound wrt reasoning using T (D).

s.t. (cid:4)σ, α, σ

for every σ

(cid:2) ⊆ σ

(cid:2)

(cid:2)

One application of reasoning with partial states is confor-
mant planning. In a conformant planning problem, the task
of the agent is to ﬁnd a chain of events that achieves some
given goal provided it may not have complete knowledge of
the initial state of the domain. More speciﬁcally,
Deﬁnition 3 A conformant planning problem P is a tuple
(cid:4)D, Γ, G(cid:5) where Γ is a set of possible initial states and G
is a set of literals.
Deﬁnition 4 A chain of events α = (cid:4)a0, . . . , an−1(cid:5) is a solu-
tion or a conformant plan of a conformant planning problem
P = (cid:4)D, Γ, G(cid:5) if, for every σ ∈ Γ, α is executable in σ and
for every model M of α with initial state σ, M |= G.

The following relationship between conformant plans and
paths of an approximation of D follows from Observation 1.
Observation 2 Let T
(cid:4)s, α, s
conformant planning problem (cid:4)D, comp(s), G(cid:5).

If
then α is a solution of the

(cid:2)(D) be an approximation.

(cid:2)(D) and G ⊆ s

(cid:2)(cid:5) ∈ T

(cid:2)

Observation 2 shows us a way to solve a conformant plan-
ning problem (cid:4)D, Γ, G(cid:5): look for a path in an approximation
that leads to a goal partial state (i.e. a partial state satisfy-
ing the goal). This approach is adopted in [Son et al., 2005b;
2005a], where the set Γ of possible initial states of a con-
formant planning problem is modeled as the completions of
It is shown in [Son et al., 2005b;
a single partial state s.
2005a] that many conformant planning problems in the lit-
erature can be successfully solved this way. However, the
following is an example of a conformant planning problem
that cannot be solved by this method.

Example 1 (Turkey and two guns) There are two guns and
a turkey. Initially only one of the guns is loaded and we do
not know which one it is. The objective is to kill the turkey by
shooting it. Let g1 and g2 be names for the guns and X be a
variable for the guns. This planning problem can be modeled
as P1 = (cid:4)D1, Γ1, G1(cid:5) where

D1 =

Γ1 =

(cid:3)

shoot(X) causes dead if loaded(X)
shoot(X) causes ¬loaded(X)

{¬dead, loaded(g1), ¬loaded(g2)},
{¬dead, ¬loaded(g1), loaded(g2)}

(cid:4)

(cid:3)

(cid:4)

IJCAI-07

1992

G1 = {dead}

is

easy to see

It
(cid:4){shoot(g1)}, {shoot(g2)}(cid:5) is a solution of P1.

that by Deﬁnition 4 α1

=

the conformant planning is modeled as P (cid:2)
1, {dead}(cid:5) where Γ(cid:2)

Following the approach in [Son et al., 2005b], how-
1 =
ever,
(cid:4)D1, Γ(cid:2)
1 = comp({¬dead}). Clearly
P (cid:2)
1 does not have a conformant plan because the state
σ = {¬dead, ¬loaded(g1), ¬loaded(g2)} belongs to
comp({¬dead}) and there exists no path in the transition di-
agram T (D) that leads to a goal state from σ.

2

In order to address this issue, we have extended the deﬁni-
tion of a conformant plan from [Son et al., 2005a], and, with
a more careful examination of approximations, conclude the
following observation, which can be viewed as a generaliza-
tion of Observation 2.
Observation 3 Let P = (cid:4)D, Γ, G(cid:5) be a planning problem,
(cid:2)(D) be an approximation, and α be a chain of events. Let
T
S be a set of partial states s.t. comp(S) = Γ. If for every
(cid:2)(D)
(cid:2)
s ∈ S, there exists a partial state s
then α is a solution of P.
and G ⊆ s

s.t. (cid:4)s, α, s

(cid:2)(cid:5) ∈ T

(cid:2)

This observation extends the applicability of approximations
to conformant planning problems with a more complex de-
scription of the initial state of the domain. In particular, in-
stead of viewing the set of possible initial states Γ as (the
completions of) a single initial partial state s as in [Son et
al., 2005a], we view it as a set of initial partial states S.
Then, to ﬁnd a conformant plan within an approximation, we
look for a chain of events α s.t. every possible path of α
starting from a partial state in S always leads to a goal par-
tial state. As an example, the set of possible initial states
of the domain in Example 1 can be viewed as the set S1
of two partial states1 {¬dead, loaded(g1), ¬loaded(g2)} and
{¬dead, ¬loaded(g1), loaded(g2)}, i.e., S1 = Γ1. It is easy
to verify that, within the approximation in [Son et al., 2005a],
the solution α1 = (cid:4)shoot(g1), shoot(g2)(cid:5) can be found by
this method because every possible path of α1 in the approx-
imation that starts from a partial state in S1 always leads to a
goal partial state.

3 A Logic Programming Implementation

We now describe an answer set planning [Subrahmanian and
Zaniolo, 1995] based method for constructing an approxima-
tion to action theories of AL.
In our method, we deﬁne a
˜
T (D) in terms of a logic program ˜π(D)
transition diagram
called the cautious encoding of D. The work in [Son et al.,
2005a] uses a similar construction but the resulting logic pro-
gram is only able to deal with a single initial partial state.
The work in [Tu et al., 2006] does provide a method for con-
structing conditional plans with several branches but operates
from a single initial partial state as well. Our work in this pa-
per can be viewed as a combination of the ideas presented in
these works in order to develop a conformant planner which
can deal with a more complex description of the initial state;

in particular, the planner can work on domains with disjunc-
tive information in the initial state. In order to achieve this,
a distinct label is attached to every partial state considered.
Atoms of ˜π(D) are formed by the following (sorted) predi-
cate symbols:

• h(l, t, k) is true if literal l holds at time step t in a path

starting from the initial partial state labeled with k;

• o(e, t) is true if e occurs at time step t;
• dc(l, t, k) is true if literal l is a direct effect of an action

that occurs at (t − 1, k); and

• ph(l, t, k) is true if literal l possibly holds at time t in a

path with the initial partial state labeled with k.

The program also contains auxiliary predicates:
time,
f luent, action, and label that are used for enumerating con-
stants of sorts time step, ﬂuent, elementary action and label
respectively.
In our presentation, we also use some short-
hands: if a is an action then o(a, t) = {o(e, t) : e ∈ a}.
If p is a set of literals, and F is either h, dc, or ph, then
F(p, t, k) = {F(l, t, k) :
l ∈ p} and not F(p, t, k) =
{ not F(l, t, k) : l ∈ p}. For a literal l, by l we denote its
¯
F = ¬F and ¬F = F . For a set of literal
complement, i.e.
p, p = {l : l ∈ p}. Finally, L, T and K (possibly with in-
dices) are variables for literals, time steps, and labels respec-
tively. For convenience, we often write ˜π(D, n) to denote the
restriction of ˜π(D) to time steps between 0 and n. The set of
rules2 of ˜π(D) is listed below.

1. For each dynamic causal law (1) in D, the rules

(5)

h(l, T +1, K) ← o(e, T ), h(p, T, K)
dc(l, T + 1, K) ← o(e, T ), h(p, T, K)

(6)
belong to ˜π(D). The ﬁrst rule states that l holds at T + 1
on path K if e occurs at T and precondition p holds at T
on path K. The second rule states that l is a direct effect
of e at (T + 1, K) if e occurs at T and precondition p
holds at (T, K).
Since the state of the domain at time step T might be
incomplete, we add to ˜π(D) the rule

ph(l, T + 1, K) ← o(e, T ), not h(p, T, K) (7)
which says that l possibly holds at (T + 1, K) if e occurs
at T and the precondition p possibly holds at (T, K).
Furthermore, we add to ˜π(D) the following rule

ph(L, T + 1, K) ← not h(L, T, K),

(8)

not dc(L, T + 1, K).

which says that a literal L possibly holds at T + 1 if it
possibly holds at T and its negation is not a direct effect
of the action that occurs at T .

2. For each static causal law (2) in D, ˜π(D) contains:

h(l, T, K) ← h(p, T, K)
ph(l, T, K) ← ph(p, T, K)

(9)

(10)

These rules state that if p holds (or possibly holds) at
(T, K) then so does l.

2In each rule, predicates deﬁning sorts of variables are omitted

1Note that by deﬁnition a state is also a partial state.

for brevity.

IJCAI-07

1993

3. For each impossibility condition (3) in D, we add to

˜π(D) the following rule:

← o(a, T ), not h(p, T, K)

(11)

This rule states that a cannot occur at time step T if pre-
condition p possibly holds at (T, K) for some path K.

4. The inertial law is encoded as follows:

h(L, T, K) ← not ph(L, T, K), T (cid:10)= 0.

(12)
which says that L holds at time step T > 0 if its negation
cannot possibly hold at T .

5. Auxiliary rule: ˜π(D) also contains the following rule:

← h(F, T, K), h(¬F, T, K) (13)
(14)

literal(F ) ← f luent(F )
literal(¬F ) ← f luent(F )

(15)
The ﬁrst rule, as a constraint, states that h(f, t, k) and
h(¬f, t, k) cannot hold at the same time 3 . The last two
rules are used to deﬁne literals.

let Π(D, a, s) =
For an action a and a partial state s,
˜π(D, 1) ∪ h(s, 0, 0) ∪ o(a, 0). Note that Π(a, s) is a stratiﬁed
program, so if it is consistent, then it has a unique answer set
[Gelfond and Lifschitz, 1988]. We deﬁne an approximation
˜
T (D) based on Π(D, a, s) as follows.
Deﬁnition 5 Let s be a partial state and a be an action. Let
˜
T (D) iff
T (D) be a transition diagram s.t.
(cid:2) = {l : h(l, 1, 0) ∈ A} where
Π(D, a, s) is consistent and s
A is the answer set of Π(D, a, s).
Theorem 1 If D is consistent then
of D.
The proof of this theorem is similar to the proofs of the sound-
ness of the logic programming encoding of AL action theo-
ries in [Son et al., 2006; Turner, 1997].

˜
T (D) is an approximation

(cid:2)(cid:5) ∈ ˜

(cid:4)s, a, s

2

Let P = (cid:4)D, Γ, G(cid:5) be a conformant planning problem.
˜
T (D) is an approximation of D, we can use the pro-
Since
gram ˜π(D) to ﬁnd solutions of P. In the remaining part of
this section, we describe a logic program ˜π(P, n), where P
is the input planning problem and n is the length of a solution
we wish to ﬁnd.

Let S = {s0, s1, .., sm} be a set of partial states s.t.
Γ = comp(S) (hereafter we refer to such S as a set of initial
partial states of P). Let the subindex of each element of S
act as its label. We construct the program ˜π(P, n) based on
S as follows. ˜π(P, n) contains the rules of ˜π(D, n) and the
following rules.

1. Rules encoding the initial state: For every si ∈ S,

˜π(P, n) contains the rule

h(si, 0, i).

(16)

2. Rules encoding the goal: To guarantee that the goal
is satisﬁed in the ﬁnal state of every path, we add to
˜π(P, n) the following rules:

{← not h(l, n, K) : l ∈ G}.

3Some adjustment to this syntax would be needed if one wants
to use an existing answer set solvers. For instance, we may need to
replace ¬f with, say, neg(f ).

3. Rules to generate actions: To generate action occur-
rences, we add to ˜π(P, n) the following choice rule [Si-
mons et al., 2002] 4:

1{o(E, T ) : action(E)} ← T < n

(17)

4 Properties of ˜π(P , n)
In this section, we investigate the soundness and complete-
ness of ˜π(P, n).

4.1 Soundness
Using Theorem 1 and Observation 3, we can prove the cor-
rectness of the planner ˜π(P, n).
Theorem 2 Let A be an answer set of ˜π(P, n). For 0 ≤ i <
n let ai = {e : o(e, i) ∈ A}. Then, α = (cid:4)a0, .., an−1(cid:5) is a
solution of P.

2

4.2 A Sufﬁcient Condition for the Completeness
Although Theorem 2 tells us that ˜π(P, n) is sound, the pro-
gram is not complete in the sense that there are planning prob-
lems that have solutions for which ˜π(P) returns no answer
set. This is illustrated in the following example.

Example 2 Consider the action description

(cid:3)

D2 =

a causes g if f
a causes g if ¬f

and the planning problem P2 = (cid:4)D2, Γ2, {g}(cid:5) where Γ2 is the
set of all possible states. Obviously (cid:4)a(cid:5) is a solution of this
problem because either f or ¬f is true in any state belonging
to Γ2 and thus either one of the above dynamic causal laws
would take effect when a is executed.

Let S1 = {∅}. Then, it is easy to see that comp(S1) = Γ2.
If we construct ˜π(P2, 1) based on S1 then ˜π(P2, 1) is incon-
sistent, which means that no conformant plan of length one
can be found by ˜π(P2, 1). In fact, it can be shown that for ev-
ery n, ˜π(P2, n) is inconsistent. Thus, ˜π(P2, n) cannot solve
the planning problem P2. However, if ˜π(P2, 1) is constructed
based on the set of initial partial states S2 = {{f }, {¬f }}
then ˜π(P2, 1) would return an answer set corresponding to
the solution (cid:4)a(cid:5).

2

The above example shows that choosing a set of initial par-
tial states S plays an important role in the completeness of
˜π(P, n). To characterize the situation in Example 2, we de-
ﬁne a notion of dependencies among literals and between lit-
erals and actions (adapted from [Son and Tu, 2006]).

Deﬁnition 6 A literal l depends on a literal g, written as l (cid:5) g,
whenever one of the following conditions holds.

1. l = g.
2. D contains a law [a causes l if p] s.t. g ∈ p.
3. D contains a law [l if p] s.t. g ∈ p.
4. There exists a literal h s.t. l (cid:5) h and h (cid:5) g.

5. l (cid:5) g.

4If we wish to ﬁnd a sequential plan, the only thing needed to do

is to change the left side of the rule to 1{o(E, T ) : action(E)}1.

IJCAI-07

1994

Deﬁnition 7 An action b depends on a literal l, written as b(cid:5)l,
if either

1. D contains an impossibility condition (3) s.t. a ⊆ b and

¯
l ∈ ψ, or

2. there exists a literal g s.t. b (cid:5) g and g (cid:5) l.

For a set of literals w, we write l (cid:5) w to denote that l (cid:5) g for
some g ∈ w, and l (cid:2) w to denote that there exists no g ∈ w
s.t. l (cid:5) g.

Observe that according to Deﬁnition 6, for the domain D2
in Example 2, we have that g (cid:5) f and g (cid:5) ¬f . This implies
that for each state σ in Γ2, we can ﬁnd some literal l such that
g (cid:5) l. In this case, we say that Γ2 is not reducible to ∅ wrt {g}.
The precise deﬁnition of reducibility is given below.
Deﬁnition 8 Let Δ be a set of states, s be a partial state, and
w be a set of literals. We say that Δ is reducible to s wrt w,
denoted by Δ (cid:12)

w s if

1. s is a subset of every state σ in Δ,
2. for each l ∈ w, Δ contains a state σ s.t. l (cid:2) (σ \ s), and
3. for each action a, Δ contains a state s s.t. a (cid:2) (σ \ s).
We say that a set of states Δ is reducible to a set of par-
tial states S wrt a set of literals w, written as Δ (cid:12)w S
iff Δ = comp(S) and comp(s) (cid:12)w s for every s ∈ S.
Back to Example 2, according to this deﬁnition, we do not
have Γ2 (cid:12){g} S1 = {∅} but we do have Γ2 (cid:12){g} S2 =
{{f }, {¬f }}.

We deﬁne a class of action theories as follows.

Deﬁnition 9 A static causal law is simple if its precondition
contains at most one literal. An action theory D is simple if
each of its static causal laws is simple.
We notice that if D is simple then Δ (cid:12)w S implies that rea-
˜
T (D) from the set of partial states S would agree
soning with
with reasoning about w with T (D) from the set of possible
initial states Δ on the set of literals w. Base on this observa-
tion, we have the following result about the completeness of
˜π(P, n).
Theorem 3 Let α = (cid:4)a1, . . . , an−1(cid:5) be a solution of P =
(cid:4)D, Γ, G(cid:5). If D is simple and ˜π(P, n) is constructed based
on a set of initial partial states S s.t. Γ (cid:12)G S then ˜π(P, n)
is consistent and has an answer set A s.t. ai = {e : o(e, i) ∈
A}.
We can verify that for the planning problem P2 in Example
2, if we construct ˜π(P, n) based on S1 = {∅} then we would
miss the solution (cid:4)a(cid:5). However, if we construct it based on the
set of partial states S2 = {{f }, {¬f }} then ˜π(P, 1) would
return an answer set corresponding to the solution (cid:4)a(cid:5).

2

5 Experiments

Theorem 2 suggests a simple algorithm for ﬁnding minimal
plans (wrt the number of steps) of a planning problem P: se-
quentially run program ˜π(P, n) with n = 1, 2, . . . , until it
returns an answer set (we assume that P does not have a triv-
ial solution (cid:4)(cid:5)). We have implemented this algorithm in a
planning system called CPASPm and use CMODELS [Lier-
ler and Maratea, 2004] as the underlying answer set solver.

No. Guns

2
4
6
8
10
20
50
100

PL
2
3
3
3
3
3
3
3

K

DLV

0.03
0.11
0.72
11.58

1039.96

-
-
-

C-PLAN
0.036
0.044
0.186
2.172
50.201

-
-
-

CPASPm

0.129
0.233
0.296
0.388
0.503
1.487
8.208
32.623

Table 1: Conformant Turkey domain

CPASPm takes as input a logic program representation of P
and produces concurrent conformant plans. We have com-
pared CPASPm with other conformant planning systems. Due
to space limit we only consider planners capable of generat-
ing concurrent plans. As aforementioned, only a small mod-
iﬁcation to the logic program can make the planner act as a
sequential planner.

We compare CPASPm with the concurrent conformant
planners DLVK [Eiter et al., 2003] and C-PLAN [Castellini et
al., 2003]. C-PLAN is a SAT-based conformant planner where
a planning problem is translated into a satisﬁability problem
and satisfying assignments of variables correspond to solu-
tions of the original planning problem. DLVK is somewhat
similar to CPASPm as both run on top of an answer set solver.
However, unlike CPASPm DLVK does not use approximations.
Its algorithm has two phases: looking for candidate plans ﬁrst
and then checking if they are conformant.

We prepared a test suite of problems which involves both
concurrency and complex initial situations. Some of this
problems are simple modiﬁcations to conformant bench-
marks in the literature. The test suite consists of the problems
Conformant Turkey and Lost Cleaner. Conformant Turkey is
a modiﬁcation of the classic Yale shooting problem. In our
problem, there are n guns, but only one of which is loaded.
Guns can be shot concurrently, with the exception of gun #1
and #2. The objective is to kill the turkey. Lost Cleaner is a
modiﬁcation of the ring [Cimatti et al., 2004]. The agent is
in one of n rooms arranged in a ring fashion. Each room has
m objects that must be cleaned by the agent. The agent can
move to the next room in a clockwise or counter-clockwise
fashion and at a time it can clean objects in a room concur-
rently. Initially, the agent does not know its initial location
nor the current status (cleaned or dirty) of the objects.

Experiments were conducted in a 1.4GHz Pentium 4 ma-
chine running Linux, and each planner was given 30 minutes
to complete each instance of each problem. The results are
shown in Tables 1 and 2. In each table, times are in seconds,
and P L is the number of steps of a shortest solution of the
corresponding problem.

As we can see from Table 1, CPASPm outperforms both
DLVK and C-PLAN in the Conformant Turkey domain. Solu-
tions for these domain all involve 3 steps, with one step con-
sisting of ﬁring multiple guns concurrently. In this domain,
exploiting concurrency is key to obtaining a short plan.

In the Lost Cleaner domain, shown in Table 2, only
CPASPm is able to solve all problem instances within the time
limit. In this domain, the length of a solution ranges from 3
to 19 steps and it is determined by the number of rooms in

IJCAI-07

1995

No. Rooms

No. Obj.

2
2
2
4
4
4
6
6
6
8
8
8
10
10
10

2
5
10
2
5
10
2
5
10
2
5
10
2
5
10

PL
3
3
3
7
7
7
11
11
11
15
15
15
19
19
19

K

DLV

0.068
0.092
0.143
0.483
2.648

441.485
35.901

-
-
-
-
-
-
-
-

C-PLAN
0.063

-
-

425.048

-
-
-
-
-
-
-
-
-
-
-

CPASPm

0.201
0.233
0.288
1.219
1.897
3.015
7.190
12.414
22.503
51.147
76.707
142.563
225.405
403.443
642.319

Table 2: Lost Cleaner Domain

the ring. As the number of rooms in the problem increases,
the number of possible initial situations increases. One of the
advantages of using approximations is that it is possible to
reason about the domain without having to consider all possi-
ble worlds. As the complexity of the problem increases, only
CPASPm is able to scale. In this problem C-PLAN behaved
erratically, failing some simple problem instances and then
solving more complicated ones.
In general, the use of ap-
proximations allows CPASPm to exploit concurrent actions
when searching for a solution, and to scale better than the
other concurrent planners as the number of possible initial
states and the length of the solution increases.

6 Conclusion and Future Work

In this paper, we extend the logic programming based ap-
proach to conformant planning in [Son et al., 2005a; Tu et
al., 2006] to develop a conformant planner, called CPASPm,
which can solve planning problems with a more complex de-
scription of the initial states. The planner inherits several key
properties of the planner CPASP in [Son et al., 2005a]. In
particular, it can deal with static causal laws and is capable of
ﬁnding minimal and concurrent plans. It is sound and some-
times complete wrt the full semantics of AL action theories.
Our experimental results show that the planner is comparable
with some other concurrent conformant planners.

As future work, one of our goals is to strengthen the condi-
tion for the completeness of the planner. Also, we would like
to develop a method for including domain knowledge so that
we can obtain better performance from the planner.

Acknowledgment: We will like to thank Dr. Michael Gel-
fond for his collaboration, help, and useful discussions on the
topic.

References

[Baral and Gelfond, 2000] C. Baral and M. Gelfond. Rea-
soning agents in dynamic domains. Logic-Based Artiﬁcial
Intelligence, pages 257–279, 2000.

[Castellini et al., 2003] C. Castellini, E. Giunchiglia, and
SAT-based Planning in Complex Do-
A. Tacchella.
mains: Concurrency, Constraints and Nondeterminism.
AI, 147:85–117, July 2003.

[Cimatti et al., 2004] A. Cimatti, M. Roveri, and P. Bertoli.
Conformant Planning via Symbolic Model Checking and
Heuristic Search. AI, 159:127–206, 2004.

[Eiter et al., 2003] T. Eiter, W. Faber, N. Leone, G. Pfeifer,
and A. Polleres. A Logic Programming Approach to
System. AI,
Knowledge State Planning, II: The DLV
144(1-2):157–211, 2003.

K

[Gelfond and Lifschitz, 1988] M. Gelfond and V. Lifschitz.
The Stable Model Semantics for Logic Programming. In
ICLP, pages 1070–1070, MIT Press, 1988.

[Gelfond and Morales, 2004] M. Gelfond and A.R. Morales.
In DRT,

Encoding conformant planning in a-prolog.
LNCS, Springer, 2004.

[Lierler and Maratea, 2004] Y. Lierler and M. Maratea 2004.
Cmodels-2: SAT-based Answer Set Solver Enhanced to
Non-tight Programs. In LPNMR, pages 346–350, 2004.

[Lifschitz, 2002] V. Lifschitz. Answer set programming and

plan generation. AI, 138(1–2):39–54, 2002.

[McCain and Turner, 1997] N. McCain and H. Turner.
Causal theories of action and change. In AAAI, pages 460–
467. AAAI Press, 1997.

[Simons et al., 2002] P. Simons, N. Niemel¨a, and T. Soini-
nen. Extending and Implementing the Stable Model Se-
mantics. AI, 138(1–2):181–234, 2002.

[Subrahmanian and Zaniolo, 1995] V.S.

Subrahmanian,
C. Zaniolo. Relating Stable Models and AI Planning
Domains. In ICLP, pages 233–247, MIT Press, 1995.

[Son and Baral, 2001] T. C. Son and C. Baral. Formalizing
sensing actions - a transition function based approach. AI,
125(1-2):19–91, January 2001.

[Son and Tu, 2006] T. C. Son and P. H. Tu. On the Com-
pleteness of Approximation Based Reasoning and Plan-
ning in Action Theories with Incomplete Information. In
KR, pages 481–491, 2006.

[Son et al., 2005a] T. C. Son, P. H. Tu, M. Gelfond, and
A.R. Morales. An Approximation of Action Theories of
AL and its Application to Conformant Planning. In LP-
NMR, pages 172–184, 2005.

[Son et al., 2005b] T. C. Son, P. H. Tu, M. Gelfond, and
A.R. Morales. Conformant Planning for Domains with
Constraints — A New Approach. In AAAI, pages 1211–
1216, 2005.

[Son et al., 2006] T. C. Son, C. Baral, N. Tran, and S. McIl-
raith. Domain-Dependent Knowledge in Answer Set Plan-
ning. ACM TOCL, 7(4), 2006.

[Tu et al., 2006] P. H. Tu, T. C. Son, and C. Baral. Reasoning
and Planning with Sensing Actions, Incomplete Informa-
tion, and Static Causal Laws using Logic Programming.
TPLP, 7:1–74, 2006.

[Turner, 1997] H. Turner. Representing actions in logic pro-
grams and default theories. JLP, 31(1-3):245–298, May
1997.

IJCAI-07

1996

