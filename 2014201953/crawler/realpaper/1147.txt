Towards Efﬁcient Computation of Error Bounded Solutions in POMDPs:

Expected Value Approximation and Dynamic Disjunctive Beliefs
Pradeep Varakantham†, Rajiv T. Maheswaran‡, Tapana Gupta† and Milind Tambe†
† {varakant, tapanagu, tambe}@usc.edu, Institute for Robotic and Intelligent Systems,
‡ {maheswar}@isi.edu, Information Sciences Institute, University of Southern California

University of Southern California

Abstract

While POMDPs (partially observable markov deci-
sion problems) are a popular computational model
with wide-ranging applications, the computational
cost for optimal policy generation is prohibitive.
Researchers are investigating ever-more efﬁcient
algorithms, yet many applications demand such al-
gorithms bound any loss in policy quality when
chasing efﬁciency. To address this challenge, we
present two new techniques. The ﬁrst approximates
in the value space to obtain solutions efﬁciently for
a pre-speciﬁed error bound. Unlike existing tech-
niques, our technique guarantees the resulting pol-
icy will meet this bound. Furthermore, it does not
require costly computations to determine the qual-
ity loss of the policy. Our second technique prunes
large tracts of belief space that are unreachable, al-
lowing faster policy computation without any sacri-
ﬁce in optimality. The combination of the two tech-
niques, which are complementary to existing op-
timal policy generation algorithms, provides solu-
tions with tight error bounds efﬁciently in domains
where competing algorithms fail to provide such
tight bounds.1

Introduction

1
Partially observable markov decision problems (POMDPs)
are a popular model with potential applications in health
care, disaster rescue and space exploration [Hauskrecht and
Fraser, 2000; Pineau et al., 2003; Poupart and Boutilier, 2004;
Nair et al., 2003]. Unfortunately, the computational cost
for optimal policy generation in POMDPs is prohibitive, re-
quiring increasingly efﬁcient algorithms to address problems
in these large-scale domains. Furthermore, as we apply
POMDPs in domains where property and human safety are
of concern, e.g. disaster rescue, patient care and space ex-
ploration, error bounds (limiting POMDP policy quality loss)
become critical.

1This material is based upon work supported by the Defense Ad-
vanced Research Projects Agency (DARPA), through the Depart-
ment of the Interior, NBC, Acquisition Services Division, under
Contract No. NBCHD030010.

Previous work in POMDPs has made encouraging progress
using two approaches: (1) Exact algorithms compute the op-
timal solution and thus avoid problems with error bounds
[Cassandra et al., 1997; Feng and Zilberstein, 2004; 2005],
however, they do not scale. (2) Approximate algorithms, a
currently popular approach, address the signiﬁcant computa-
tional complexity in POMDP policy generation by sacriﬁc-
ing solution quality for speed [Pineau et al., 2003; Smith and
Simmons, 2005; Poupart and Boutilier, 2004]. While some
approximate algorithms (point-based approaches [Pineau et
al., 2003; Smith and Simmons, 2005]) provide expressions
for error bounds, they have many drawbacks: (a) The bounds
in these point-based approximation algorithms are based on
maximum and minimum possible single-stage reward, which
can take extreme values, leading to a very loose bound which
is not useful in many domains, especially in those that have
penalties (e.g., Rmin (cid:2) 0).
(b) The computation of the
bound for a particular policy is itself a potentially signiﬁcant
expense (e.g., requiring a non-linear program). (c) The algo-
rithms cannot guarantee that they will yield a policy that can
achieve a pre-speciﬁed error bound.

To address these challenges, we present two new tech-
niques that are complementary to existing optimal policy
generation algorithms.
In particular, both are presented as
wrappers to Generalized Incremental Pruning (GIP) [Cas-
sandra et al., 1997] and Region-Based Incremental Pruning
(RBIP) [Feng and Zilberstein, 2004; 2005]. Our ﬁrst tech-
nique EVA (Expected Value Approximation) is an approxi-
mate one that sacriﬁces quality for speed, but operates within
a pre-speciﬁed error bound. EVA differs from existing ap-
proaches (primarily point-based approaches [Pineau et al.,
2003; Smith and Simmons, 2005]), by approximating directly
in the value space as opposed to sampling in the belief space
for an indirect value approximation. EVA alleviates the three
key problems mentioned earlier: (a) EVA provides an error
bound that does not depend on the maximum and minimum
possible reward. (b) The computation of the error bound in
itself imposes no overhead when computing policies in EVA.
(c) Given any pre-speciﬁed error bound, EVA will generate a
policy whose quality meets or exceeds that bound.

While results from EVA are promising, in domains that re-
quire tight error bounds, EVA alone may not be sufﬁciently
fast. Our second technique, DDB (Dynamic Disjunctive Be-
liefs), complements EVA. DDB exploits domain structure to

IJCAI-07

2638

can

be

the

prune large tracts of belief space that are unreachable. Be-
cause DDB does not sacriﬁce quality, combining it with EVA
yields the same error bounds as the original EVA. We il-
lustrate how DDB combined with EVA provides signiﬁcant
performance improvements over EVA alone, and over earlier
techniques that prune belief spaces, such as [Varakantham et
al., 2005].
2 Background : POMDPs
A POMDP
tuple
(cid:3)S, A, P, Ω, O, R(cid:4), where S is the set of states; A is
the set of actions; Ω is the set of observations; P (s, a, s(cid:2)) is
the transition function; O(s(cid:2), a, ω) denotes the observation
model; R(s, a) is the reward function. As the state is
partially observable, POMDP policies are expressed as
belief-state-to-action mappings, where a belief state b is a
probability distribution over the set of states S. The goal is
to compute the policy with maximum expected reward.

represented

using

Currently, the most efﬁcient exact algorithms for POMDPs
are value-iteration algorithms, speciﬁcally GIP [Cassandra et
al., 1997] and RBIP [Feng and Zilberstein, 2004]. These
are dynamic-programming algorithms, where at each itera-
tion the value function and optimal policies are represented
by a minimal set of vectors called the parsimonious set. De-
termining the parsimonious set involves pruning out domi-
nated vectors. This requires solving a linear program (LP)
for all vectors in the original set. Thus, pruning is recognized
to be computationally expensive.

DB : The performance of these dynamic programming al-
gorithms can be improved considerably by exploiting the dy-
namics of the domain [Varakantham et al., 2005]. Dynamic
Beliefs, DB (implemented as a wrapper to GIP) eliminates
unreachable belief spaces, given information about the start-
ing belief space, B0. It computes belief bounds over states
at future time steps by solving maximization and minimiza-
tion problems on the equation for belief probability updates.
Given an action a and observation ω, the maximization prob-
lem for belief probability of state st is:

max

P

Ot(st, a, ω)Σst−1 Pt−1(st−1, a, st)bt−1(st−1)

st

Ot(st, a, ω)Σst−1 Pt−1(st−1, a, st)bt−1(st−1)

bt−1∈Bt−1
Lagrangian techniques are used to solve these maximization
problems efﬁciently in polynomial time. These bounds can
signiﬁcantly improve LP run-times, as the pruning via LPs
happens over a restricted belief space. The restricted belief
space also leads to fewer vectors in the parsimonious set for
a particular interation. This cascades through the steps of the
dynamic programming leading to fewer LP calls and conse-
quently, signiﬁcant speedups. DB can lead to orders of mag-
nitude improvement over existing algorithms [Varakantham
et al., 2005].

Point-Based Approaches : Two leading approximate al-
gorithms for POMDPs that provide error bounds are Point-
Based Value Iteration (PBVI) [Pineau et al., 2003] and
Heuristic-Search Value Iteration (HSVI2) [Smith and Sim-
mons, 2005]. In these algorithms, a policy computed for a
sampled set of belief points is extrapolated to the entire belief
space. PBVI/HSVI2 are anytime algorithms where the sam-
pled set of belief points is expanded over time. The expan-
sion ensures that the belief points are uniformly distributed

over the entire belief space, and the heuristics employed
for belief set expansion differentiate PBVI and HSVI2. We
compare EVA against PBVI, as it is known to be one of
the fastest approximate algorithms. The error bound pro-
vided by PBVI is: (Rmax − Rmin) ∗ b/(1 − γ)2, with b
= maxb(cid:2)∈Δminb∈B(cid:6)b − b(cid:2)(cid:6)1, where Δ is the entire belief
space; B is the set of expanded belief points; γ is the dis-
count factor; Rmax and Rmin are the extremal single stage
rewards. Computing b requires solving a Non-Linear Pro-
gram, NLP2(shown in Algorithm 1). While we provide exper-
imental comparisons with only PBVI, the drawbacks of PBVI
with regard to calculating and achieving bounds are equally
applicable to HSVI2 due to their similarity.

Algorithm 1 Non-Linear Program to obtain b

Maximize b
subject to the constraints

Σ1≤i≤|S|b[i] = 1
b[i] ≥ 0 and b[i] ≤ 1,∀i ∈ {1, . . . ,|S|}
b < Σ1≤i≤|S| |b[i] − bk[i]| ,∀bk ∈ B

3 Expected Value Approximation (EVA)
The value function in a POMDP is piecewise linear and can
be expressed by a set of vectors. Approximate algorithms
generate fewer vector sets than the optimal algorithms. Ex-
isting approaches generate these reduced vector sets by sam-
pling the belief space and ﬁnding the vectors that apply only
at these points. In our approach, Expected Value Approxima-
tion (EVA), we choose a reduced set of vectors by approx-
imating the value space with a subset of vectors whose ex-
pected reward will be within a desired bound of the optimal
reward.

Using an approximation (subset) of the optimal parsimo-
nious set will lead to lower expected quality at some set of
belief points. Let  denote the maximum loss in quality we
will allow at any belief point. We henceforth refer to any
vector set that is at most  away from the optimal value at
all points in the belief space (as illustated in Fig 1) as an -
parsimonious set. The key problem in EVA is to determine
this -parsimonious set efﬁciently.
To that end, we employ a heuristic that extends the prun-
ing strategies presented in GIP. In GIP, a parsimonious set V
corresponding to a set of vectors, U is obtained in three steps:
1. Initialize the parsimonious set V with the dominant vec-
2. For some chosen vector u ∈ U, execute a LP to compute
the belief point b where u dominates the current parsi-
monious set V.
3. Compute the vector u(cid:2) with highest expected value in the
set U at the belief point, b; remove vector u(cid:2) from U and
add it to V.
2An LP formulation with non-convex feasible region is possible,
but it will have O(2|S|
) number of linear constraints. The smallest of
our problems has 60 states (∼ 1018 constraints), making it infeasible
to solve such an LP.

tors at the simplex points.

IJCAI-07

2639

EVA modiﬁes the ﬁrst

parsimonious set:

two steps,

to obtain the -

1. Since we are interested in representing the optimal par-
simonious set with as few vectors as possible, the initial-
ization process only selects one vector over the beliefs in
the simplex extrema. We choose a vector with the high-
est expected value at the most number of simplex belief
points, choosing randomly to break ties.

2. The LP is modiﬁed to check for -dominance, i.e., dom-
inating all other vectors by  at some belief point. Algo-
rithm 2 provides a modiﬁed LP with bmax

and bmin

.

t

t

, bmin

t

, )

t

Algorithm 2 LP-DOMINATE(w, U, bmax
1: variables: d, b(st) ∀st ∈ St
2: maximize d
3: subject to the constraints
b · (w − u) ≥ d + ,∀u ∈ U
4:
5: Σst∈St
6: if d ≥ 0 return b else return nil

b(st) = 1, b(st) ≤ bmax

t

2. v∗

3. v∗

b ·ˆb ≥ ˆvˆb ·ˆb +  and v∗
b ·ˆb ≥ ˆu·ˆb: This means v∗
have been included in the -parsimonious set, v∗
which is a contradiction.
b · ˆb ≥ ˆvˆb · ˆb +  and v∗
in V and v∗
one of previous two terminal conditions occur. (cid:2)

b would
b ∈ V ,
b · ˆb < ˆu · ˆb: ˆu will be included
b is returned to U to be considered again until

V (b)

∗

V

(b)

VECTOR OF OPTIMAL SET

V ε(b)

VECTOR OF APPROXIMATE SET

ε

b

(st), b(st) ≥ bmin

t

(st)

Figure 1: EVA: An example of an -parsimonious set

The key difference between the LP used in GIP and the
one in Algorithm 2 is the  in RHS of line 4 which checks
for expected value dominance of the given vector w over a
vector u ∈ U. Including  as part of the RHS constrains w to
dominate other vectors by at least . In the following propo-
sitions, we prove the correctness of the EVA algorithm and
the error bound provided by EVA. Let V  and V∗ denote the
-parsimonious and optimal parsimonious set, respectively.
Proposition 1 ∀b ∈ Δ, the entire belief space, if v
b =
arg maxv∈V  v · b and v∗
b · b
b = arg maxv∗∈V∗ v∗ · b, then v
+  ≥ v∗
Proof. We prove this by contradiction. Assume ∃b ∈ Δ such
b /∈ V . We
b (cid:12)= v∗
b · b. This implies v
that v
now consider the situation(s) when v∗
b is considered by EVA.
At these instants, there will be a current parsimonious set V
and a set of vectors still to be considered U. Let

b · b.
b · b+  < v∗

b , and v∗

ˆb = arg max
˜b∈Δ

{min
v∈V (v∗
be the belief point at which v∗

b · ˜b − v · ˜b)}
b is best w.r.t. V. Let
v∈V v · ˆb
be the vector in V which is best at ˆb. Let
u∈U u · ˆb

ˆuˆb = arg max

ˆvˆb = arg max

be the vector in U which is best at ˆb. There are three possibil-
ities:
b · ˆb − ˆvˆb · ˆb < . By
1. v∗

b · ˆb < ˆvˆb · ˆb + : This implies v∗
the deﬁnition of ˆb, we have
b · b − ˆvb · b < v∗
v∗

b · ˆb − ˆvˆb · ˆb < 
where ˆvb = arg maxv∈V v · b. This implies
b · b + ,

b · b < ˆvb · b +  ≤ v
v∗

which is a contradiction.

Proposition 2 The error introduced by EVA at each stage
of the policy computation, is bounded by 2|Ω| for GIP-type
cross-sum pruning.
Proof. The EVA algorithm introduces an error of  in a par-
simonious set whenever a pruning operation (PRUNE) is per-
formed, due to Proposition 1. In GIP, there are three pruning
steps at each stage of policy computation.
1. V a,o = P RU N E(V a,o,i): After this step, each V a,o is
at most  away from optimal ∀a,∀o.
2. V a = P RU N E(··· (P RU N E(V a,o1 ⊕ V a,o2)··· ⊕
V a,o|Ω|): We begin with V a,o1 which is away from opti-
mal by at most . Each pruning operation adds 2 to the
bound ( for the new term V a,oi and  for the P RU N E).
There are |Ω| − 1 prune operations. Thus, each V a,o is
away from the optimal by at most 2(|Ω| − 1) + .
a∈A V a is
bounded by the error of V a. The P RU N E adds , lead-
ing to a total one-stage error bound of 2|Ω|. (cid:2)

a∈A V a): The error of

(cid:2)
3. V(cid:2) = P RU N E(

(cid:2)

t (b) and V ∗

Proposition 3 The total error introduced by EVA (for GIP-
type cross-sum pruning) is bounded by 2|Ω|T for a T -
horizon problem.
Proof. Let V 
t (b) denote the EVA-policy and op-
t ⊆ A,
timal value function, respectively, at time t.
is the set of actions at the roots of all policy-trees asso-
ciated with V 
t , the EVA vector set for time t and et =
maxb∈B{V ∗
=maxa∈A
≥maxa∈A

t (b) − V 
t−1(b) =
)}
{R(b, a) + Σb(cid:2)∈BP (b(cid:2)|b, a)V 
t (b(cid:2)
{R(b, a) + Σb(cid:2)∈BP (b(cid:2)|b, a)V ∗
)}
t (b(cid:2)

t (b)}, then, V 

If A

t

t

− Σb(cid:2)∈BP (b(cid:2)|b, a)et

{R(b, a) + Σb(cid:2)∈BP (b(cid:2)|b, a)V ∗
t (b(cid:2)
=maxa∈A
≥maxa∈A{R(b, a) + Σb(cid:2)∈BP (b(cid:2)|b, a)V ∗
t (b(cid:2)
=V ∗

t−1(b) − 2|Ω| − et

t

)} − et
)} − 2|Ω| − et

IJCAI-07

2640

The last inequality is due to Proposition 2, and the other re-
lations are by deﬁnition. The above implies that et−1 =
et + 2|Ω| and with eT = 2|Ω|, we have the error for the
EVA-policy at the beginning of execution, e1 = 2|Ω|T (the
total error bound for EVA). (cid:2)
Similarly, it can be proved that for γ-discounted inﬁnite
horizon problems, the total error bound is 2|Ω|
1−γ .
4 Dynamic Disjunctive Beliefs (DDB)

b(s j)

Ba1,ω1

t

Ba1,ω2

t

Ba2,ω1

t

Ba2,ω2

t

BDB

t

b(si)

Figure 2: DDB: An example of DDB vs. DB

By eliminating reasoning about optimal policies at un-
reachable beliefs, it is possible to improve policy computation
time greatly without sacriﬁcing any solution quality. Our key
insight is that the reachable belief space is composed of small
belief polytopes; hence we introduce an efﬁcient technique
for exploiting these smaller polytopes. This contrasts with
the previous work on Dynamic Beliefs, DB by [Varakantham
et al., 2005], which assumed a single large belief polytope. In
particular, DB obtains the maximum belief probability for a
state given an action and observation, ba,ω,max
(s) by solving
a constrained optimization problem using Lagrangian tech-
niques. Similarly minimum possible belief probability is also
computed. The dynamic belief polytope at epoch t was cre-
ated as follows:

t

1. Find the maximum and minimum possible belief for
(s) =

each state over all actions and observations: bmax
maxa,ω ba,ω,max
(s) = maxa,ω ba,ω,min

(s), bmin

(s).

t

t

t

t

2. Create a belief polytope that combines these bounds over

all states: BDB
t =
(s1) bmax

[bmin

t

t

(s1)] × ··· × [bmin

t

(s|S|) bmin

t

(s|S|)].

t

While this is an appropriate bound in that any belief out-
side BDB
is not possible at time t, in many domains there
is not a single belief polytope, but a collection of smaller
belief polytopes - because future beliefs depend on partic-
ular action-observation pairs. Unfortunately, DB insists on
a single belief polytope, thus including many unreachable
beliefs. Figure 2 illustrates this for a two-observation two-
action system over a two-dimensional support. While BDB
is smaller than the entire space of potential beliefs, it is larger
than necessary; it is not possible to believe anything outside
of ∪i=1,2;j=1,2Bai,ωj
. In contrast, our new method for ex-
pressing feasible beliefs is referred to as Dynamic Disjunctive
Belief (DDB) bounds. The DDB method for computing fea-
sible belief spaces is to eliminate conditioning on action and
observations (eliminate taking max over a, ω in (1) above):

t

t

1. Obtain ba,ω,max
2. Create multiple belief polytopes, one for each action-

(s) and ba,ω,min

(s), ∀a ∈ A, ω ∈ Ω

t

t

observation pair: Bai,ωi

t

=

(s1) bai,ωi,max

t

t

[bai,ωi,min
··· × [bai,ωi,min

t

(s|S|) bai,ωi,max

t

(s1)] × ···
(s|S|)].
= ∪a,ωBa,ω

t

t

t

The feasible belief space is BDDB

. How-
ever, this is disjunctive and cannot be expressed in the LP
that is used for pruning. Instead, the prune occurs over each
Ba,ω
and we take the union of dominant vectors for these be-
lief spaces. This increases the number of LP calls for a ﬁxed
epoch but the LPs cover smaller spaces and will yield fewer
vectors at the end. The cascading effects of the reduced vector
sets (as in EVA) over the dynamic programming process can
lead to fewer policies at the next stage, resulting in signiﬁcant
computational savings.

5 Experiments
Our experiments3 show how EVA and DDB address key
shortcomings of current POMDP algorithms when a policy
that meets a pre-speciﬁed error bound is desired. Three key
results provided in this section relevant to EVA are: (1) EVA
can guarantee the generation of a policy that meets any pre-
speciﬁed error bound where point-based algorithms cannot
(Section 5.1). (2) The cost of calculating the error bound of
a policy, which EVA avoids, can signiﬁcantly impact perfor-
mance of point based approaches(Section 5.2). (3) There are
domains, where point-based algorithms cannot provide func-
tional bounds (Section 5.3). For DDB, we show an order-
of-magnitude speedup over the previously best technique for
belief space pruning (Section 5.4).

Figure 3: Error bounds for Hallway and Hallway2

5.1 Bound Achievability
In the general case, point-based approaches can always en-
counter problems where they cannot generate a policy that
meets a pre-speciﬁed error bound. If the span of belief sup-
port, chosen independently from the value function, is smaller

3Hallway, Hallway2, Tiger-Grid, and Aircraft are benchmark
problems available from Anthony Cassandra’s POMDP website.
Scotland Yard is a 216-state, 16-act, 6-obs problem motivated by the
Ravensburger Scotland Yard game. Tag is a 870-state, 5-act, 30-obs
problem from [Pineau et al., 2003].

IJCAI-07

2641

than the feasible belief space, there exists a value function
for which the algorithm will have a minimum error, i.e., the
solution quality cannot exceed some threshold.
If the pre-
speciﬁed error bound is smaller than this minimum error, the
algorithm will never be able to provide a satisfactory policy.
Current point-based approaches exacerbate this problem by
(a) starting with one belief point and (b) only considering
points that are reachable from this initial point. Thus, they
potentially restrict the span of their belief support severely
which implies a signiﬁcant minimum error. Figure 3 presents
the PBVI error bound for the Hallway and Hallway2 prob-
lems as the belief set is expanded over time. The x-axis repre-
sents the number of belief set expansions, and the y-axis rep-
resents the error bound (by solving an NLP for each belief set
expansion). The error bound remains constant for both prob-
lems after the ﬁfth expansion (around 30 belief points in the
set). After the tenth expansion (around 1000 belief points) the
NLP becomes too expensive to calculate. Thus, for instance,
for Hallway2, it is not veriﬁable if PBVI would be able to
reach an error bound of 1.8. However with EVA, by using
an  (in Algorithm 2) corresponding to the pre-speciﬁed error
bound (obtained by equating error bound to 2 ∗  ∗ |Ω| ∗ T ),
any error bound is achievable.

5.2 Bound Calculation Cost
Now let us consider the case where a given point-based ap-
proach can generate a policy whose quality is within a pre-
speciﬁed error bound. These algorithms still do not know the
quality loss in their policy as they expand their belief support.
As indicated earlier, they require an expensive NLP to calcu-
late the error bound 4. We ran both EVA and PBVI for the
Tiger-Grid, Hallway, Hallway2, Aircraft, Scotland Yard and
Tag problems. As PBVI depends on the starting belief point,
for each problem we obtained the bound for 10 randomly se-
lected initial belief points. For each given initial belief point,
we ran PBVI for a ﬁxed number of belief set expansions and
computed the bound of the resulting policy with an NLP. The
deviations in the obtained bounds were extremely small. This
gives an advantage to PBVI by assuming that it has the cor-
rect belief support for the obtained bound immediately. Ad-
ditionally, we only counted the average run-time of the ﬁnal
expansion.

We then ran EVA with the equivalent error bound, forcing
EVA to obtain a policy as good or better (bound calculation
for EVA is trivial, i.e., constant-time computation). Further-
more, EVA was also run with a tighter bound (half the value
obtained for PBVI), to address the possibility that an alter-
nate belief expansion heuristic in PBVI led to a better bound.
The results are shown in Figure 4. The NLP bar denotes the
time taken for computing the error bound in PBVI, while
the PBVI bar shows the run-time for computing the policy
corresponding to the ﬁnal expansion (not including the NLP
run-time). The bars for EVA (same bound) and EVA (half
bound)indicate the time taken by EVA when provided with a
bound equal to and half of that used by PBVI respectively.

4We employed an industrial optimization software called Lingo
8.0 for solving NLPs. Machine specs for all experiments: Intel Xeon
3.6 GHZ processor, 2GB RAM

We note that: (1) The same-bound EVA run-times are less
than NLP run-times, i.e.
just the bound computation ove-
head of PBVI is a signiﬁcant burden. (2) Even without the
NLP, EVA run-times are better than PBVI run-times in all
cases. (3) The half-bound EVA run-times are better than NLP
run-times in all but one case. We see that a hampered EVA
outperformed an ameliorated PBVI. HSVI2 [Smith and Sim-
mons, 2005] outperforms PBVI in run-time but suffers from
the same problems i.e.
the time to compute the bound and
the unattainability of the bound. Beyond the experimental
results, point-based approaches will suffer as their belief sup-
ports get larger because the NLP cost increases exponentially.

Figure 4: Run time comparison of EVA and PBVI

5.3 Bound Functionality
Even if the NLP cost vanished, there are domains where the
expression for error bound in point-based approaches yields
a value that is not functional. Consider the Task Manage-
ment Problem (TMP) [Varakantham et al., 2005] in software
personal assitant domains. There is a penalty (Rmin (cid:2) 0)
associated with certain state-action pairs to control agent au-
tonomy. In this case, the output of the NLP yields an error
bound so loose with respect to the actual solution quality that
it renders the bound useless. There is no method for a point-
based approach to determine when to stop expanding the set
of belief sets in TMPs.
5.4 DDB
As shown in Figure 5, the TMP domain also illustrates the
beneﬁts of DDB . GIP and RBIP did not terminate for TMP
within the pre-speciﬁed time limit. With a sufﬁciently large
bound, EVA produced a policy within our time limits. To
improve performance, one option was to use EVA with a
larger bound, but this would have meant an additional sac-
riﬁce in solution quality. EVA+DB reduced run-time without
sacriﬁcing solution quality. We see that EVA+DDB (combin-
ing our two new techniques) provided an order-of-magnitude
speedup beyond EVA+DB, also without losing solution qual-
ity. Runtimes for EVA+DDB and EVA+DB included the
overhead for computation of the belief bounds.
5.5 Experiment Summary
We demonstrated the drawbacks of current point-based ap-
proaches when tasked with generating policies with pre-
speciﬁed error bounds. These limitations include the inability

IJCAI-07

2642

to guarantee a policy within the bound, an expensive cost to
compute the bound even if achievable, and a non-functional
expression of the bound even if computable. We also show
that the run-times of EVA are not only shorter than the run-
times of PBVI but also to the NLP calculation run-times
alone. Finally, we exemplify the signiﬁcant beneﬁt of DDB
in domains with structure in belief evolution as it most tightly
bounds the dynamic belief polytope.

Figure 5: Comparison of GIP, RBIP EVA, EVA+DB, EVA+DDB

6 Related Work
As mentioned earlier, techniques for solving POMDPs can be
categorized as exact and approximate. GIP [Cassandra et al.,
1997] and RBIP [Feng and Zilberstein, 2004; 2005] belong to
the class of exact algorithms that provide optimal policies at
the expense of enormous computational complexity. DB is a
wrapper that exploits the dynamics of the domain to provide
improved performance.

There has been much work in the area of approximate al-
gorithms which are faster than exact algorithms at the cost
of solution quality. Point-based [Smith and Simmons, 2005;
Pineau et al., 2003], policy-search [Braziunas and Boutilier,
2004; Poupart and Boutilier, 2004; Menleau et al., 1999], and
grid [Hauskrecht, 2000; Zhou and Hansen, 2001] approaches
dominate other algorithms. Point-based approaches are dis-
cussed in Section 2. Policy-search approaches typically em-
ploy a ﬁnite state controller (FSC) to represent the policy. The
FSC is updated until convergence to a stable controller. Grid-
based methods are similar to point-based approaches. The
difference is maintaining “values” at belief points, as opposed
to “value gradients” in point-based techniques. Another ap-
proach that scales well is the dimensionality-reduction tech-
nique in [Roy and Gordon, 2002] which applies E-PCA (an
improvement to Principal Component Analysis) on a set of
belief vectors to obtain a low-dimensional representation of
the original state space. Though all these algorithms signiﬁ-
cantly improve the run-time performance, they provide loose
or no quality guarantees on the solutions.
7 Summary
Despite the wide-ranging applicability of POMDPs, obtain-
ing optimal policies are often intractable and current approx-
imate approaches do not sufﬁciently address solution quality.
Indeed, many domains demand tight error bounds on poli-
cies generated in POMDPs. To that end, we present two new

techniques that are complementary to existing optimal policy
generation algorithms: EVA and DDB. EVA is a new type
of approximation technique that directly approximates in the
value space. Due to this, it is able to obtain solutions efﬁ-
ciently for a pre-speciﬁed error bound. Furthermore, it does
not require costly computations to compute the bound. DDB
prunes out large tracts of belief space that are unreachable in
many real-world problems, allowing faster policy computa-
tion without any sacriﬁce in optimality. The combination of
the two techniques is shown to provide high quality solutions
efﬁciently in domains with dynamic structure.
References
[Braziunas and Boutilier, 2004] D. Braziunas and Craig
Boutilier. Stochastic local search for POMDP controllers.
In AAAI, 2004.

[Cassandra et al., 1997] A. R. Cassandra, M. L. Littman, and
N. L. Zhang.
Incremental pruning: A simple, fast, ex-
act method for partially observable markov decision pro-
cesses. In UAI, 1997.

[Feng and Zilberstein, 2004] Z. Feng and S. Zilberstein. Re-
In UAI,

gion based incremental pruning for POMDPs.
2004.

[Feng and Zilberstein, 2005] Z. Feng and S. Zilberstein. Ef-
ﬁcient maximization in solving POMDPs. In AAAI, 2005.
[Hauskrecht and Fraser, 2000] M. Hauskrecht and H. Fraser.
Planning treatment of ischemic heart disease with partially
observable markov decision processes. AI in Medicine,
18:221–244, 2000.

[Hauskrecht, 2000] M. Hauskrecht. Value-function approxi-

mations for POMDPs. JAIR, 13:33–94, 2000.

[Menleau et al., 1999] N. Menleau, K. E. Kim, L. P. Kael-
bling, and A. R. Cassandra. Solving POMDPs by search-
ing the space of ﬁnite policies. In UAI, 1999.

[Nair et al., 2003] R. Nair, M. Tambe, and S. Marsella. Role
allocation and reallocation in multiagent teams: Towards a
practical analysis. In AAMAS, 2003.

[Pineau et al., 2003] J. Pineau, G. Gordon, and S. Thrun.
In IJCAI,

PBVI: An anytime algorithm for POMDPs.
2003.

[Poupart and Boutilier, 2004] P. Poupart and C. Boutilier.
Vdcbpi: an approximate scalable algorithm for large scale
POMDPs. In NIPS, 2004.

[Roy and Gordon, 2002] N. Roy and G. Gordon. Exponen-
In

tial family PCA for belief compression in POMDPs.
NIPS, 2002.

[Smith and Simmons, 2005] T. Smith and R. Simmons.
Point-based POMDP algorithms: Improved analysis and
implementation. In UAI, 2005.

[Varakantham et al., 2005] P. Varakantham, R. Maheswaran,
and M. Tambe.
Exploiting Belief Bounds: Practical
POMDPs for Personal Assistant Agents. In AAMAS, 2005.
[Zhou and Hansen, 2001] R. Zhou and E. Hansen. An im-
proved grid-based approximation algorithm for POMDPs.
In IJCAI, 2001.

IJCAI-07

2643

