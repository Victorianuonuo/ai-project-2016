Reducing Accidental Complexity in Planning Problems

Patrik Haslum

National ICT Australia

Patrik.Haslum@nicta.com.au

Abstract

Although even propositional STRIPS planning is
a hard problem in general, many instances of the
problem, including many of those commonly used
as benchmarks, are easy. In spite of this, they are
often hard to solve for domain-independent plan-
ners, because the encoding of the problem into a
general problem speciﬁcation formalism such as
STRIPS hides structure that needs to be exploited
to solve problems easily. We investigate the use of
automatic problem transformations to reduce this
“accidental” problem complexity. The main tool
is abstraction: we identify a new, weaker, condi-
tion under which abstraction is “safe”, in the sense
that any solution to the abstracted problem can be
reﬁned to a concrete solution (in polynomial time,
for most cases) and also show how different kinds
of problem reformulations can be applied to create
greater opportunities for such safe abstraction.

1 Introduction

Planning, even in the very restricted case of the propositional
STRIPS formalism, is, in general, a hard problem (in fact, it
is PSPACE complete; Bylander, 1991). But not all planning
problems are hard: in fact, it has been shown that in many of
the benchmark domains frequently used to evaluate planning
systems, a plan can be found by simple procedures running
in low-order polynomial time [Helmert, 2006b]. In spite of
this, the problems are not easy for domain-independent plan-
ners. That is not to say that planners can not solve problems
in these domains – many recent planners scale up fairly well
– but what determines the difﬁculty of a particular planning
problem for a given planner is often not the intrinsic com-
plexity of the problem, but more the size and structure of the
problem encoding. This discrepancy between the essential
complexity of the problem being solved and the accidental
complexity, i.e., the difﬁculties added to the problem as a re-
sult of the way the problem is formulated, the tools adopted
for solving it, etc., is not unique to automated planning1.

We investigate some transformations aimed at reducing the
accidental complexity of planning problems, mainly by ab-
stracting away parts of the problem that are easily solved.
Abstraction has a long history in AI planning, and it has been
shown that it can reduce problem-solving effort exponentially
[Knoblock, 1994] (but also potentially increase the required
effort [B¨ackstr¨om and Jonsson, 1995]). Methods of abstract-
ing, decomposing or “factoring” planning problems have at-
tracted renewed interest recently [e.g. Sebastia et al., 2006;
Domshlak and Brafman, 2006].

We focus on “safe” abstraction, i.e., on ﬁnding conditions
under which solutions to an abstracted problem are guaran-
teed to be reﬁnable into a concrete solution.
In most ab-
stractions we consider, reﬁnement of an abstract solution is
a polynomial-time operation (though, in the worst case, the
generated plan may be exponentially longer than the short-
est plan). We also show examples of how “difﬁcult” problem
formulations can make safe abstraction impossible, and sug-
gest some methods to (automatically) reformulate problems
to make them more amenable to abstraction.

Due to space restrictions, proofs and detailed algorithm de-
scriptions are omitted from the paper, but will be provided on
request.

2 Representation

A domain-independent planner is – indeed must be – pre-
sented with an encoding of a planning problem in a prob-
lem speciﬁcation formalism. Our starting point is the stan-
dard propositional STRIPS representation but, like several
researchers have recently done, we also consider an al-
ternative representation based on multi-valued, rather than
propositional, state variables [Jonsson and B¨ackstr¨om, 1998;
Edelkamp and Helmert, 1999; Helmert, 2006b]. In this rep-
resentation, a world state assigns to each of a set of variables,
{V1, . . . , Vn}, a value from a ﬁnite domain Di. Each action
is described by a pre- and a postcondition, which are partial
assignments over the set of variables. The postcondition is
interpreted as an assignment: on execution of the action, the
variables mentioned in the postcondition are changed as indi-
cated and variables not mentioned keep their values.

1The terms essential and accidental complexity were coined in
the area of software engineering, by Fred Brooks in 1986. In his
paper, essential complexity refers to the complexity of the function-

ality of a program or algorithm, while the accidental complexity is
the “complexity overhead” caused by inadequate tools or languages,
making simple solutions difﬁcult to state.

IJCAI07

1898

loc(pkg2)

loc(pkg1)

loc(truck)

(a)

(at  truck  B)

(at  truck  A)

loc(truck)

(b)

(at  pkg1  B)

loc(truck)  =   (at  truck  B)
loc(truck)  =   (at  truck  B)

(in  pkg1  truck)

loc(truck)  =   (at  truck  A)
loc(truck)  =   (at  truck  A)

(at  pkg1  A)

loc(pkg1)

(c)

Figure 1: (a) Causal graph for a simple logistics problem; (b)
and (c) domain transition graphs of two problem variables.
Edges in the DTG in ﬁgure (c) are annotated with the precon-
ditions of the corresponding actions on other variables.

The multi-valued state variable representation is expres-
sively equivalent to propositional STRIPS and can be con-
structed from the STRIPS representation by making use of
state invariants of a particular kind, namely sets of atoms with
the property that exactly one atom in each set is true in ev-
ery reachable world state. Several methods for automatically
extracting such “exactly one” invariants from STRIPS encod-
ings have been proposed [e.g. Edelkamp and Helmert, 1999;
Scholz, 2004; Helmert, 2006b].

We also make use of two kinds of graphs that summarise
some structural properties of a planning problem: The causal
graph of a planning problem is a directed graph whose nodes
correspond to problem variables (multi-valued or proposi-
tional) and that has an edge from V to V (cid:2) iff some action
that has an effect on V (cid:2) has a precondition or effect on V .
In particular, the causal graph contains a bidirected edge be-
tween any pair of variables such that there exists an action that
changes both simultaneously. The domain transition graph
(DTG) of a (multi-valued) variable V is a directed graph
whose nodes correspond to the values in the domain of V
and whose edges correspond to actions that change the value
of the variable: the graph has an edge from v to v(cid:2) if there
exists some action whose precondition includes V = v and
whose postcondition includes V = v(cid:2).

To illustrate, consider a very simple transportation prob-
lem: two packages (pkg1 and pkg2) can be loaded in and
unloaded from a truck, which can move freely between some
locations (A, B). The multi-valued variable representation of
this problem has a variable loc(truck), with values {(at
truck A), (at truck B)}, and a variable loc(?p)
for each package ?p, with values {(at ?p A), (at ?p
B), (in ?p truck)}. Note that values in the variable do-
mains correspond to atoms in the STRIPS encoding of the
problem. The causal graph and domain transition graphs of
two variables are shown in ﬁgure 1.

3 Abstraction

The idea of hierarchical abstraction in planning is to solve
the problem ﬁrst in an abstracted version, in which only the
“critical” aspects of the problem are considered and the “de-

tails” are ignored. Because these “details” are not taken into
account, the solution to the abstract problem may not be a
valid plan. The next step is to ﬁnd, in the non-abstracted
version, a plan to “bridge the gap” between each step of the
abstract plan. Solving the abstract problem is generally eas-
ier, as is ﬁlling in the missing details because the plan frag-
ments needed to bridge consecutive steps in the abstract plan
are typically short. This can be done recursively, with each
“bridging plan” successively reﬁned through a number of ab-
straction levels.

In an ideal abstraction hierarchy any solution at a higher
level of abstraction can be reﬁned into a solution at the next
lower abstraction level by only inserting some actions (“ﬁll
in the details”), that is, without changing the solution as it
appears at the more abstract level. This is the downward re-
ﬁnement property, as deﬁned by Bacchus and Yang [1994].
When this property does not hold, the abstract solution found
by a planner may not be reﬁnable to a concrete solution, forc-
ing backtracking to generate a new solution at the higher ab-
straction level.

Knoblock [1994] has proposed an efﬁcient procedure for
automatically generating abstraction hierarchies satisfying a
weaker property, called ordered monotonicity: in such a hier-
archy, there exists at least one abstract plan that can be reﬁned
into a concrete plan (if the problem is solvable). Knoblock’s
procedure constructs a graph over the atoms in the planning
problem (essentially the causal graph) and computes the tree
of strongly connected components of this graph which is then
topologically sorted to yield a hierarchy. The procedure can
equally be applied to the multi-valued variable representation
of a problem, resulting in the same hierarchy. In the trans-
portation problem described above, the resulting hierarchy
considers at the most abstract level only the location of one
package; at the next, the other package as well; and only at
the concrete level, the location of the truck.

If every “reﬁnement problem”, i.e., the subproblem solved
when reﬁning a plan down one level in the abstraction hier-
archy, is known to be solvable, then clearly any abstract plan
can be reﬁned. This is the case in the example transportation
problem: as the variable loc(truck), representing the lo-
cation of the truck, can change from any value to any other
value, whatever the state of the other variables and without
changing any of them, it is always possible to reﬁne an ab-
stract plan for moving the packages by inserting actions to
move the truck to appropriate locations.

More generally, the downward reﬁnement property can be
ensured by abstracting only when some sufﬁcient condition
for the solvability of all (relevant) reﬁnement problems is met.
This idea, termed “safe abstraction” was recently introduced
by Helmert [2006a], as an improvement of the Fast Down-
ward planner2. To formalise safe abstraction, deﬁne the free
domain transition graph of a variable V as the subgraph of
the DTG containing only the edges due to actions that do not
have any pre- or postcondition on any other variable. A value
v(cid:2) of V is free reachable from value v iff there is a path from
v to v(cid:2) in the free DTG of V . Helmert’s condition for safe

2A similar technique is for numeric variables is described by

Chen et al. [2006].

IJCAI07

1899

Variables:

Actions:

b1: {0, 1}
b2: {0, 1}
b3: {0, 1}

Init: b1 = 0,
b2 = 0,
b3 = 0

Goal: b1 = 1,
b2 = 1,
b3 = 1

inc1:

pre: b1 = 0
post: b1 = 1

inc2:

pre: b1 = 1, b2 = 0
post: b1 = 0, b2 = 1

inc3:

pre: b1 = 1, b2 = 1, b3 = 0
post: b1 = 0, b2 = 0, b3 = 1

Figure 2: A small instance of the binary counter planning
problem.

b2

b1

b3

0

(a)

1

inc1

inc2
inc3

(b)

0

inc1

(c)

1

Figure 3: (a) The causal graph of the problem in ﬁgure 2. (b)
The DTG of variable b1; (c) the free DTG of b1.

abstraction is that the free DTG forms a single, strongly con-
nected component, i.e., that every value is free reachable from
every other value. This condition, however, is unnecessarily
strong: for downward reﬁnement to be ensured, it is sufﬁ-
cient that any value of the variable that is required to reﬁne
an abstract plan is free reachable from every value that the
variable may take on as a consequence of that plan. Let the
externally required values of variable V be those values that
appear in the precondition of some action that changes a vari-
able other than V and let the externally caused values of V be
those values that appear in the postcondition of some action
that changes a variable other than V , plus the value of V in
the initial state.

Theorem 1 If all externally required values of V are strongly
connected in the free DTG and free reachable from every ex-
ternally caused value of V , and the goal value of V (if any)
is free reachable from each externally required value, then
abstracting V is safe (i.e., preserves downward reﬁnement).

Checking the safe abstraction condition and reﬁning each step
in an abstract plan are both polynomial in the size of the do-
main of the state variable, which corresponds to the number
of atoms that make up the variable. The principle is straight-
forwardly transfered to components of more than one vari-
able, but at exponentially increasing computational cost since
the “domain transition graph” of such a component is the ab-
stract state space of all variables in the component.

To illustrate the difference that

the weaker condition
makes, consider a planning problem involving a binary
counter that can only be increased, in steps of one: the prob-
lem description, in multi-valued variable form, for a small
instance is shown in ﬁgure 2. Variables b1, b2, b3 represent
the bits of the counter. Figure 3 shows the causal graph of the

problem, and the DTG and free DTG of variable b1. The free
DTG of variable b1 is not strongly connected; however, the
only externally required value is 1 (a precondition of inc2
and inc3, and a goal) and the only externally caused value
is 0, and since 1 is indeed free reachable from 0, variable b1
is safely abstractable. Moreover, abstracting away b1 makes
the transition from 0 to 1 in the domain of b2 free, and thus
b2 also safely abstractable in the same way; following the
abstraction of b2 also b3; and so on.

Note that the causal graph of the problem, shown in ﬁgure
3(a), forms a single strongly connected component. Thus,
Knoblock’s abstraction procedure applied to this problem
yields only a single abstraction level, comprising the entire
problem. The causal graph summarises all possible causal
dependencies in a planning problem (recall that it has an edge
between variables V and V (cid:2) iff there exists some action that
changes V (cid:2) and depends on or changes V ). The free DTG
condition, on the other hand, focuses on what is possible to
achieve independently of other variables.

4 Reformulation

Typically, there are several ways that a planning problem can
be encoded in a speciﬁcation formalism, such as STRIPS.
It is widely recognised that different problem formulations
may be more or less suited to a particular planning system
or technique. Although the abstraction conditions discussed
in the previous section rely on the causal and domain transi-
tion graphs, which are considered to be “structural” features
of a problem, they too suffer from such encoding sensitiv-
ity. Ideally, a planner should be able to accept any problem
formulation, and if necessary reformulate it in a way more
suited to the planners needs. Sometimes, such reformulation
is possible by exploiting structure in the problem description.
As an example, consider the well known Towers-of-Hanoi
problem. This problem was used by Knoblock [1994] to
demonstrate the construction of an effective abstraction hi-
erarchy. Figure 4(a) shows the encoding used by Knoblock:
it represents the position of each disc by the peg that the disc
is on and has a different action for moving each disc. Figure
4(b) shows a different encoding of the domain, introduced by
Bonet & Geffner [2001]. In this formulation, the position of
each disc is either on a peg (with noting beneath it) or on a
larger disc, and there is a set of additional atoms to represent
that a disc or peg is “clear” (has nothing on it). The same
action moves each disc.

Both encodings are correct, in the sense that they capture
the essential constraints of the original problem, but they dif-
fer in their properties. Figure 5 shows the corresponding
causal graphs (for the STRIPS representation of the two prob-
lem formulations). The causal graph for Knoblock’s formu-
lation consists of three strongly connected components (each
contains atoms relating to the position of one disc), forming
a tree, and thus a three-layered abstraction hierarchy. The
causal graph for Bonet’s & Geffner’s formulation, however,
has only a single connected component. Thus, Knoblock’s
procedure does not ﬁnd any abstraction hierarchy in this for-
mulation of the problem; neither does the safe abstraction
condition deﬁned above. For ﬁnding safe abstractions, a

IJCAI07

1900

Atoms:

(on ?disc ?peg)

?disc = large, medium, small
?peg = peg1, peg2, peg3

Actions:

(move-small ?p1 ?p2):

pre: (on small ?p1)
add: (on small ?p2)
del: (on small ?p1)

(move-medium ?p1 ?p2):

pre: (on medium ?p1), (not (on small ?p1)), (not (on small ?p2)))
add: (on medium ?p2)
del: (on medium ?p1)

(move-large ?p1 ?p2):

pre: (on large ?p1), (not (on medium ?p1)), (not (on medium ?p2)),

(not (on small ?p1)), (not (on small ?p2)))

add: (on large ?p2)
del: (on large ?p1)

(a)

Atoms:

(on ?disc ?pos)

(clear ?pos)

Actions:

(move ?d ?p1 ?p2):

?disc = large, medium, small
?pos = peg1, peg2, peg3, or any smaller disc

pre: (can-go-on ?d ?p2), (on ?d ?p1), (clear ?d), (clear ?p2)
add: (on ?d ?p2), (clear ?p1)
del: (on ?d ?p1), (clear ?p2)

(b)

Figure 4: Two different STRIPS encodings of the Towers-of-
Hanoi problem.

problem formulation with less “coupling” (fewer mutual de-
pendencies) between variables is generally better. How can
Bonet’s & Geffner’s STRIPS formulation be rephrased – au-
tomatically – so as to be if not identical to Knoblock’s formu-
lation, then at least as good for this purpose?

The atom (clear ?d) in the second encoding is actu-
ally equivalent to the statement ¬∃x(on x ?d), i.e., the
atom acts as an “abbreviation” for a more complex condi-
tion. This equivalence is simply a restatement of an “ex-
actly one” invariant (the same kind used to construct the
multi-valued variable representation of the problem). For ex-
ample, {(clear large), (on medium large), (on
small large)} is such an invariant;
thus, (clear
large) is true exactly when ¬(on medium large) ∧
¬(on small large) holds, and consequently can be re-

clear_ d2

on_ d1_ d2

on_ d1_ peg3

(on  large  peg3)

(on  large  peg2)

(on  large  peg1)

clear_ peg3

on_ d2_ peg1

(on  medium  peg3)

(on  medium  peg2)

(on  medium  peg1)

on_ d2_ peg2

on_ d2_ peg3

(on  small  peg3)

(on  small  peg2)

(on  small  peg1)

(a)

on_ d2_ d3

clear_ peg2

on_ d3_ peg3

on_ d3_ peg2

on_ d3_ peg1

(b)

on_ d1_ peg2

clear_ peg1

on_ d1_ peg1

on_ d1_ d3

clear_ d3

Figure 5: Causal graphs of the two formulations of the Tower-
of-Hanoi problem shown in ﬁgure 4.

loc(pkg2)

in(truck)

loc(pkg1)

loc(truck)

Figure 6: Causal graph for the capacity restricted transporta-
tion problem.

placed by the latter in action preconditions and in the goal3.
Performing such substitutions it is possible to eliminate all
clear atoms from action preconditions, and once these
atoms do not appear as preconditions (or goals) they can be
removed from the problem entirely.

In the present example, however, this is not enough to make
the problem hierarchically abstractable. To obtain such a
formulation, it is necessary to invent new propositions ab-
breviating certain conditions, and substitute these into ac-
tion preconditions and effects. For example the relevant con-
ditions for the medium disc are (on medium ?peg) ∨
((on medium large)∧(on large ?peg)), for each
?peg.

Eliminating atoms based on “exactly one” invariants is a
simple operation, easily automated. However, each invariant
gives rise to several possible – mutually exclusive – substitu-
tions, and chosing which – if any – should be applied to arrive
at a better problem formulation is not so easy, and automating
the introduction of new abbreviating atoms even more difﬁ-
cult. Also, while the substitution is polynomial in time, it
may introduce complex action preconditions, which may re-
quire exponential space to compile away.

5 Composition
Let us return to the simple transportation problem in section
2, but add a capacity restriction on the truck:
it can carry
at most one package at a time. This is naturally encoded
with a new variable, in(truck), with values {(empty
truck), (in ?p truck)}, for each package ?p4. The
causal graph of the new problem is shown in ﬁgure 6.

The variable loc(truck) is safely abstractable as be-
fore, but
the variables representing the locations of the
packages are now dependent, via the in(truck) vari-
able, so the abstracted problem does no longer nicely de-
compose. The variable in(truck) could be eliminated
by reformulation as described in the previous section, us-
ing the invariant fact
that (empty truck) is equiva-
lent to ¬(in pkg1 truck) ∧ ¬(in pkg2 truck),
but this does not remove the coupling between variables
loc(pkg1) and loc(pkg2).

However,

in this problem, unlike the Towers-of-Hanoi
problem above, the coupling between variables loc(?p)
and in(truck) is “transient”. Assuming the goal is to
move package ?p to some location (not to leave it in the
truck), the abstract plan consists of two steps: loading ?p at

3Alternatively, clear could be recast as a derived predicate,

using axioms as deﬁned in PDDL2.2.

4The same kind of restriction, encoded in essentially the same

way, is found in, e.g., the Gripper and Satellite domains.

IJCAI07

1901

its initial location and unloading it at the goal location (recall
that the location of the truck has been abstracted away). Al-
though the actions in this plan change both variables, the plan
as a whole does not: in(truck) = (empty truck)
holds both at the start and end of it, and only loc(?p)
changes permanently. Moreover, the intermediate state vis-
ited by this abstract plan is “uninteresting”, in the sense that
the only actions that can be taken in this state that could not
also be taken in the state before or after the plan are the one
that completes the plan and one that just undoes the effects of
the ﬁrst. Thus, the two actions in the plan can be replaced by
a single action, with the compound pre- and postconditions
of the sequence, without affecting the solvability of the prob-
lem, and performing this replacement for all such sequences
breaks the coupling between the two variables.

Theorem 2 Let c be a condition on two or more variables, let
A be the set of all actions whose effect includes c5, and let B
be the set of actions whose precondition includes c. If c does
not hold in the initial state; c is either inconsistent with or dis-
joint from the effects of every action not in A; the postcondi-
tion of every action in A is either inconsistent with or disjoint
from the goal condition; and every action not in B whose
precondition is consistent with c is commutative with every
action in A ∪ B, then replacing the actions in A ∪ B with one
composite action for each executable sequence a, b1, . . . , bk,
where k (cid:2) 1, a ∈ A and each bi ∈ B – excluding sequences
with no effect – is safe (i.e., preserves solution existence).

If the safe sequencing condition holds for every effect c in-
volving some pair of variables V1 and V2, and if the ef-
fects of each of the new composite actions change at most
one of V1 and V2, this replacement removes the causal cou-
pling between the two variables due to simultaneous change.
There may still be causal dependencies between them due to
some action changing one having a precondition on the other:
if such dependencies exist in both directions, nothing is of
course gained by making the replacement.

Collapsing a sequence of actions into a single action has
also been proposed by Junghanns & Schaeffer [2001], in the
context of solving the Sokoban puzzle, in the form of what
they call “tunnel macros”. These sequences correspond to
moves in a tunnel, where there is only one “productive” direc-
tion of movement, and also satisfy the criterion of having “un-
interesting” intermediate states (the condition c in theorem 2
can be thought of as deﬁning a “tunnel” in the state space of
the planning problem). However, tunnel macros in Sokoban
serve a different purpose, viz.
to reduce search depth, and
are not restricted to actions that cause coupling between vari-
ables. Likewise, Botea et al. [2005] show that adding macro
actions to a planning problem can improve the efﬁciency of
search (and, in some cases, heuristic accuracy; interestingly,
so can removing macros [Haslum and Jonsson, 2000]). Yet,
the procedure they propose for generating macros may be
adaptable to our purpose as well.

5So that if A is non-empty there is a causal coupling due to si-

multaneous change of the variables mentioned by c.

Domain

Simpliﬁcation

Solved.
Gripper
Solved.
Logistics
Solved.
Movie
None.
Mystery
None.
Mprime
Minor (∼ 50% less atoms).
Grid
Blocksworld (4 ops) Minor (0 – 20% less atoms)
Elevator (STRIPS)
FreeCell
Depots
DriverLog

Solved.
None.
Minor (1 – 10% less atoms).
Minor (0 – 25% less atoms; small
instances solved).
Signiﬁcant (60 – 90% less atoms).
Solved.
Some (40 – 60% less atoms).
None.
None.
Varied (0 – 50% less atoms).

Rovers
Satellite
Airport
Pipesworld
Promela
PSR (small)

Figure 7: Simpliﬁcation obtained by current techniques on
planning problems from different domains.

6 Conclusions

Abstraction and decomposition (or “factoring”) can be very
powerful tools for reducing the accidental complexity caused
by encoding a planning problem in a general problem speci-
ﬁcation formalism, such as STRIPS. We have shown how the
applicability of these methods can be widened, by formulat-
ing a weaker condition for safe abstraction and by applying
different reformulations to make problems more amenable to
abstraction.

Implementation & Current Results
The techniques described above, together with the action set
reduction method proposed by Haslum & Jonsson [2000] and
standard reachability and relevance analysis6, have been im-
plemented, though with some limitations: safe abstraction of
more than one variable is limited by a bound on the size of the
composite DTG, reformulation is restricted to atom elimina-
tions with a simple replacing condition, and composition to
sequences of length two. The strategy is to try each technique
in turn, iterating until no more simpliﬁcations are made. In
spite of the restrictions, some operations are still too time-
consuming, and therefore disabled, in some domains. Also,
different methods for ﬁnding invariants in some cases result
in different multi-valued variable encodings, some of which
are more suited to simpliﬁcation than others. Thus, the sys-
tem is not completely automatic.

Table 7 summarises the (best achieved) result of attempt-
ing to simplify a collection of planning domains, comprising
most of the domains from the 1st, 2nd, 3rd and 4th planning
competitions. Many of these encode very simple problems,
and indeed in many of them (those marked “solved” in the ta-
ble) repeated abstraction removes the entire problem, so that

6The relevance analysis uses ideas similar to Scholz’s [2004]
path reduction technique, which is stronger than the standard
method.

IJCAI07

1902

these problems are solved without search, except for the sim-
ple reﬁnement searches carried out in the DTG of individ-
ual variables (the Logistics and Elevator domains are solved
in this sense also with Helmert’s safe abstraction method).
For remaining domains, simpliﬁcation is roughly measured
by the reduction in problem size and a subjective estimate
of the “complexity” of the part that remains (for example, in
the Grid domain, only some irrelevant objects are removed;
though this cuts down size signiﬁcantly, it’s viewed only as a
“minor” simpliﬁcation). How problem simpliﬁcation affects
the performance of different planners is a far more compli-
cated question (for example, for 2
20 Depots problems the –
very minor – simpliﬁcation drastically improves the accuracy
of FF’s heuristic, resulting in signiﬁcant speedup, while for
one problem time increases and for remaining problems it has
no effect).

Open Problems
Most interesting to note among the results, however, are the
failures, that is, domains that model essentially simple prob-
lems, but which the current suite of techniques fail to sim-
plify, such as the Blocksworld, Schedule and PSR domains.
What methods are needed to effectively deal with these do-
mains? One observation is that our current techniques make
very little use of knowledge about the particular problem in-
stance. In the Blocksworld domain, for example, every vari-
able potentially interacts with every other variable, making
the problem difﬁcult to abstract or decompose, but the inter-
actions that actually need to be considered in the solution of
any given problem instance are typically few. Much use has
been made of the causal graph to analyse planning problems,
but it is, as noted above, only a very coarse summary of po-
tential interactions. The weaker abstraction condition yields
a more ﬁne grained view but still takes into account many
possible, not actually relevant, interactions.

The current implementation works on a grounded (proposi-
tional or multi-valued) problem representation, which makes
some steps computationally expensive. Applying these and
other techniques in a ﬁrst order setting, and to domain formu-
lations using ADL constructs, is an important future develop-
ment. Also, as noted above, the choice of transformations to
apply is not fully automatic. This is a hard problem, where
we see a potential for learning to play an important role.

Acknowledgements
Hector Geffner, Adi Botea, Malte Helmert and the IJCAI re-
viewers have all contributed ideas, advice, discussions and
helpfull comments on various drafts of this paper. NICTA
is funded through the Australian governements backing Aus-
tralias ability initiative, in part through the Australian re-
search council.

References
[Bacchus and Yang, 1994] F. Bacchus and Q. Yang. Down-
ward reﬁnement and the efﬁciency of hierarchical problem
solving. Artiﬁcial Intelligence, 71(1):43 – 100, 1994.

[B¨ackstr¨om and Jonsson, 1995] C. B¨ackstr¨om and P. Jons-
son. Planning with abstraction hierarchies can be exponen-
tially less efﬁcient. In Proc. 14th International Joint Con-

ference on Artiﬁcial Intelligence (IJCAI’95), pages 1599 –
1605, 1995.

[Bonet and Geffner, 2001] B. Bonet and H. Geffner. Plan-
ning as heuristic search. Artiﬁcial Intelligence, 129(1-2):5
– 33, 2001.

[Botea et al., 2005] A. Botea, M. Enzenberger, M. Mueller,
and J. Schaeffer. Macro-FF: Improving AI planning with
automatically learned macro-operators. Journal of AI Re-
search, 24:581 – 621, 2005.

[Bylander, 1991] T. Bylander. Complexity results for plan-
ning. In Proc. 12th International Joint Conference on Ar-
tiﬁcial Intelligence (IJCAI’91), pages 274 – 279, 1991.

[Chen et al., 2006] Y. Chen, B.W. Wah, and C. Hsu. Tempo-
ral planning using subgoal partitioning and resolution in
SGPlan. Journal of AI Research, 26:323 – 369, 2006.

[Domshlak and Brafman, 2006] C. Domshlak and R. Braf-
man. Factored planning: How, when and when not.
In
Proc. 21st National Conference on Artiﬁcial Intelligence
(AAAI’06), 2006.

[Edelkamp and Helmert, 1999] S.

and
M. Helmert. Exhibiting knowledge in planning problems
to minimize state encoding length. In Proc. 5th European
Conference on Planning (ECP’99), pages 135 – 147,
1999.

Edelkamp

[Haslum and Jonsson, 2000] Patrik Haslum and Peter Jons-
son. Planning with reduced operator sets. In Proc. 5:th In-
ternational Conference on Artiﬁcial Intelligence Planning
and Scheduling (AIPS’00), pages 150 – 158, 2000.

[Helmert, 2006a] M. Helmert.

Fast (diagonally) down-
ward. In 5th International Planning Competition Booklet,
2006. Available at http://zeus.ing.unibs.it/
ipc-5/.

[Helmert, 2006b] Malte Helmert. Solving Planning Tasks in
Theory and Practice. PhD thesis, Albert-Ludwigs Univer-
sit¨at Freiburg, 2006.

[Jonsson and B¨ackstr¨om, 1998] P.

and
C. B¨ackstr¨om.
State-variable planning under struc-
tural restrictions: Algorithms and complexity. Artiﬁcial
Intelligence, 100(1-2):125 – 176, 1998.

Jonsson

[Junghanns and Schaeffer, 2001] A. Junghanns and J. Scha-
effer. Sokoban: Enhancing general single-agent search
methods using domain knowledge. Artiﬁcial Intelligence,
129(1-2):219 – 251, 2001.

[Knoblock, 1994] C.A. Knoblock. Automatically generating
abstractions for planning. Artiﬁcial Intelligence, 68:243 –
302, 1994.

[Scholz, 2004] U. Scholz. Reducing Planning Problems by
PhD thesis, Technischen Universit¨at

Path Reduction.
Darmstadt, 2004.

[Sebastia et al., 2006] L. Sebastia, E. Onaindia,

and
E. Marzal. Decomposition of planning problems. Ar-
Intelligence Communications, 19(1):49 – 81,
tiﬁcial
2006.

IJCAI07

1903

