Quantiﬁed Constraint Satisfaction Problems: From Relaxations to Explanations

Alex Ferguson and Barry O’Sullivan

Cork Constraint Computation Centre, University College Cork, Ireland

and Centre for Telecommunications Value-Chain Research

{a.ferguson|b.osullivan}@4c.ucc.ie

Abstract

The Quantiﬁed Constraint Satisfaction Problem
(QCSP) is a generalisation of the classical CSP in
which some of variables can be universally quanti-
ﬁed. In this paper, we extend two well-known con-
cepts in classical constraint satisfaction to the quan-
tiﬁed case: problem relaxation and explanation of
inconsistency. We show that the generality of the
QCSP allows for a number of different forms of re-
laxation not available in classical CSP. We further
present an algorithm for computing a generalisation
of conﬂict-based explanations of inconsistency for
the QCSP.

1 Introduction

One of the disadvantages of the classical CSP framework is
that it lacks sufﬁcient expressive power for modelling par-
ticular aspects of real world problems, for example, uncer-
tainty or other forms of uncontrollability in the environment
in which a set of constraints must be satisﬁed.

In this paper we are concerned with the Quantiﬁed CSP,
a generalisation of the classical CSP that allows some of the
variables to be universally quantiﬁed [Chen, 2004]. The se-
mantics of universal quantiﬁcation over a variable is that the
set of constraints must be satisﬁable for any assignment to it.
This is in contrast with classical CSP, where all variables are
existentially quantiﬁed, i.e. any assignment to an existentially
quantiﬁed variable that satisﬁes the constraints is satisfactory.
While the classical CSP is known to be NP-complete in gen-
eral, the QCSP is PSPACE-complete [Chen, 2004]. We con-
sider the problem of relaxing an instance of the QCSP when it
is, for example, unsatisﬁable. We propose several novel forms
of problem relaxation for the QCSP and present an algorithm
for generating conﬂict-based explanations of inconsistency.

Our motivation comes from problems in conformant plan-
ning and supply-chain management. We are interested in
using constraints to support the local decision-making pro-
cesses of a company that must supply products to a set of cus-
tomers, while managing a complex network of its own suppli-
ers. Classical CSP is not sufﬁciently expressive to model this
type of problem concisely, since some of the variables are not
under the control of the decision-maker, but we can model

the problem as a Quantiﬁed CSP. The parallels between ad-
versarial games and QCSP are natural: we can model variables
under our control using existential quantiﬁers and those vari-
ables outside our control using universal quantiﬁers [Chen,
2004].

The remainder of this paper is organised as follows.

In
Section 2 we present a formal deﬁnition of the fundamen-
tal concepts in constraint satisfaction and the Quantiﬁed CSP.
We present several new forms of problem relaxation in Sec-
tion 3 that have previously not been considered due to the
literature’s focus on classical CSP. We show how these forms
of relaxation can be captured using the notion of requirement
relaxation. Section 4 presents an approach to generating ex-
planations of conﬂict in Quantiﬁed CSP based on requirement
relaxation. We show how an existing explanation generation
algorithm for classical CSPs can be extended to the quanti-
ﬁed case. We review the most related work in Section 5. A
number of concluding remarks are made in Section 6.

2 Preliminaries

satisfaction problem (CSP)

Deﬁnition 1 (Classical Constraint Satisfaction Problem)
is a 3-tuple
A constraint
P ˆ= (cid:2)X , D, C(cid:3) where X is a ﬁnite set of variables
ˆ= {x1, . . . , xn}, D is a set of ﬁnite domains
X
D ˆ= {D(x1), . . . , D(xn)} where the domain D(xi) is
the ﬁnite set of values that variable xi can take, and a set of
constraints C ˆ= {c1, . . . , cm}. Each constraint ci is deﬁned
by the ordered set var(ci) of the variables it involves, and a
set sol(ci) of allowed combinations of values. An assignment
of values to the variables in var(ci) satisﬁes ci if it belongs
to sol(ci). A solution to a CSP is an assignment of a value
from its domain to each variable such that every constraint
in C is satisﬁed.

A fundamental notion used in reasoning about classical CSPs
is that of arc consistency [Mackworth, 1977]. Due to logical
conjunction, any assignment to the variables that is locally
inconsistent with a constraint is guaranteed not to be part of
any consistent solution.

In the classical CSP we can regard all variables as being
existentially quantiﬁed: we wish to show that there exist as-
signments for each of the variables that satisfy all constraints
simultaneously. However, we can generalise further by also
allowing variables to be universally quantiﬁed.

IJCAI-07

74

Deﬁnition 2 (Quantiﬁed CSP) A QCSP, φ, has the form

Q.C = Q1x1 ∈ D(x1) · · · Qnxn ∈ D(xn).C(x1, . . . , xn)

where C is a set of constraints (see Deﬁnition 1) deﬁned over
the variables x1 . . . xn, and Q is a sequence of quantiﬁers
over the variables x1 . . . xn where each Qi (1 ≤ i ≤ n) is
either an existential, ∃, or a universal, ∀, quantiﬁer1. The
expression ∃xi.c means that “there exists a value a ∈ D(xi)
such that the assignment (xi, a) satisﬁes c”. Similarly, the
expression ∀xi.c means that “for every value a ∈ D(xi),
(xi, a) satisﬁes c”.

Deﬁnition 3 (Semantics of QCSP) (based on [Gent et al.,
2005]) We deﬁne the semantics of the QCSP, Q.C, recursively
as follows. If C is empty then the problem is true. If Q is of
the form ∃x1Q2x2 . . . Qnxn then Q.C is true iff there exists a
value a ∈ D(x1) such that Q2x2 . . . Qnxn.(C ∪ {x1 = a}) is
true. If Q is of the form ∀x1Q2x2 . . . Qnxn then Q.C is true
iff for every value a ∈ D(x1) such that Q2x2 . . . Qnxn.(C ∪
{x1 = a}) is true. Otherwise, Q.C is false.

Example 1 (Quantiﬁed CSP) Consider a QCSP deﬁned on
the variables x1 and x2 such that D(x1) = D(x2) =
{1, 2, 3} as follows: ∃x1∀x2.{x1 < x2}. This QCSP is false.
This is because for any value for variable x1 there is at least
one value in the domain of x2 that is inconsistent with it. (cid:2)

The above deals only with the equivalent of the decision
problem for QCSPs; the analogous treatment for exempliﬁca-
tion requires consideration of a winning strategy generalising
the idea of a solution [Chen, 2004]. Of course, the order of
the quantiﬁers in a QCSP is critical. Consider the following
QCSP: ∃x1 ∈ {0, 1}∀x2 ∈ {0, 1}.{x1 (cid:9)= x2} is false, while
∀x2 ∈ {0, 1}∃x1 ∈ {0, 1}.{x1 (cid:9)= x2} is true.

3 Relaxation

Our motivation for studying relaxations of the QCSP relates
to the observation that many real world problems are over-
constrained. Accordingly, we are often interested in relaxing
the constraints of the problem so that we ﬁnd a solution that
is at least relatively satisfactory.
In this scenario, problem
relaxation can be seen as a way of exploring the space of al-
ternative models for a given problem. Furthermore, problem
relaxations give us a language with which we can explain the
over-constrainedness of a problem. Moving from classical
CSPs to QCSPs provides us with a richer class of relaxations,
and hence, a more expressive language for explanations.

One of the most well known frameworks for reasoning
about problem relaxation in classical CSP is Partial Constraint
Satisfaction [Freuder and Wallace, 1992]. One can identify
four possible ways of relaxing a classical CSP: the domain
of a variable can be enlarged; the relation of a constraint (the
set of allowed tuples) can be enlarged; a constraint can be
removed from the problem; or, a variable can be removed
from the problem. Note that all of these strategies can be
regarded as enlarging domain or constraint relations. (And
domains can themselves be formulated as unary constraints.)

1When the domain of a variable is clear from context we often

write Qixi rather than Qixi ∈ D(xi) in the quantiﬁer sequence.

While all of these forms of relaxation are available to us in the
QCSP, the additional expressiveness we have access to within
the QCSP gives rise to new forms of relaxation that are not
available in classical CSP.

3.1 Relaxation for the Quantiﬁed CSP
A useful viewpoint to adopt when studying the QCSP is to
consider an instance of the problem as an adversarial game
between two players: a universal player who sets the univer-
sally quantiﬁed variables, and an existential player, who sets
the existentially quantiﬁed variables [Chen, 2004]. In these
terms, we can regard relaxations of the QCSP as modiﬁcations
to the problem that make it easier for the existential player to
win. From the perspective of the universal player, a relaxation
of the QCSP may restrict the ways in which this player can fal-
sify the formula. For example, we can restrict the domain of
values of the universally quantiﬁed variables. From the per-
spective of the existential player, a relaxation increases the set
of responses that can be played to counteract the choices of
the universal player. We proceed by discussing ﬁve classes of
relaxation that are available in the context of the QCSP. While
the ﬁrst two of these are familiar from CSP, the remaining
three are particular to the more expressive framework, and
have no direct equivalents in the unquantiﬁed case.

Single Constraint Relaxation. This is the type of relax-
ation equivalent to that normally considered in classical CSPs.
For example this is the classical approach in the PCSP frame-
work in which allowed tuples are added to an extensionally
represented constraint. In principle, this may be replacing a
constraint with any logically weaker one. As mentioned ear-
lier, complete removal of a constraint may be considered as a
special case of this type of relaxation.

Example 2 (Single Constraint Relaxation) Consider
following QCSP, which is false:

the

∃x1 ∈ {1, 2}∀x2 ∈ {1, 2, 3}.{x1 < x2}.

If we relax the constraint between x1 and x2 from < to ≤ to
get the following:

∃x1 ∈ {1, 2}∀x2 ∈ {1, 2, 3}.{x1 ≤ x2},

the QCSP becomes true. This is because if the existential
player sets x1 to 1, the universal can no longer ﬁnd an as-
signment that falsiﬁes the QCSP.

(cid:2)

Relaxation of Existentially Quantiﬁed Domains. Enlarg-
ing the domain of an existentially quantiﬁed variable is the
direct equivalent of relaxing domains in the classical frame-
work.

Example 3 (Relaxation of Existential Domains) We revisit
the QCSP presented in Example 2. This is false because the
scenario in which the universal player sets x2 to 1 is avail-
able. To counter this, the existential player must be able to
play a value that is smaller than 1. A suitable relaxation is
the following, which adds the value 0 to the domain of x1:

∃x1 ∈ {0, 1, 2}∀x2 ∈ {1, 2, 3}.{x1 < x2};

the relaxed QCSP is true since the existential player can set
x1 to 0 and the universal player cannot falsify the formula. (cid:2)

IJCAI-07

75

Relaxation of Universally Quantiﬁed Domains. A class
of relaxation not corresponding to any in classical CSPs is
to remove values from the domains of universally quantiﬁed
variables. Doing so reduces the number of scenarios un-
der which the existential player must ﬁnd satisfying assign-
ments for the existential variables, leading to a more satisﬁ-
able problem. The rationale for this may be an analysis of
which ‘problem values’ it may be permissible to ignore, or
the narrowing of a range with a probabilistic interpretation.

Example 4 (Relaxation of Universal Domains) Returning
to the QCSP of Example 2, which is false, due to the avail-
ability of the assignment of x2 to 1, for which the existential
player has no satisfying counter-assignment. However, if we
relax the domain of the universally quantiﬁed variable x2 so
that it no longer contains the value 1 to get the following:

∃x1 ∈ {1, 2}∀x2 ∈ {2, 3}.{x1 < x2};

the relaxed QCSP is true since the existential player can set
x1 to 1 and the universal player cannot falsify the formula. (cid:2)

Quantiﬁer Relaxation. A fourth form of relaxation, also
with no direct equivalent in classical CSP, is to reverse the
quantiﬁcation of a variable from universal to existential. This
relaxation corresponds to achieving control over a factor pre-
viously considered to be environmental. This further relaxes
the universal domain relaxation.

Example 5 (Quantiﬁer Relaxation) We revisit
the QCSP
presented in Example 2, which is false. If relax the universal
quantiﬁer on variable x2 to be existential to get:

∃x1 ∈ {1, 2}∃x2 ∈ {1, 2, 3}.{x1 < x2};

the relaxed QCSP is true.

(cid:2)

Quantiﬁer Moving. A ﬁfth class of problem relaxation cor-
responds to moving a universally quantiﬁed variable to the
left in the sequence of quantiﬁers. Equivalently, we can con-
sider moving an existentially quantiﬁed variable to the right
in the sequence of quantiﬁers. This corresponds to analysis or
oracular knowledge of the value of an environment variable,
or of delaying a decision until better information is available.

Example 6 (Quantiﬁer Moving) We consider an example,
based on one presented earlier in this paper. The following
QCSP is false:

∃x1 ∈ {0, 1}∀x2 ∈ {0, 1}.{x1 (cid:9)= x2}

We relax this problem by moving the universally quantiﬁed
variable to the left to give the following QCSP which is true:

∀x2 ∈ {0, 1}∃x1 ∈ {0, 1}.{x1 (cid:9)= x2}

Informally, the relaxed QCSP gives the existential player the
opportunity to react to the actions of the universal player. (cid:2)

It should be noted that whether each of these relaxations
is sensibly possible for a given application is a modelling or
knowledge engineering question. In each case, a given con-
straint, domain, or quantiﬁer may be inherent to the problem,
or “background”, and thus not susceptible to relaxation.

We claim that this set of relaxations is comprehensive (un-
less reformulation of the original problem is considered in
conjunction with relaxation). It is also orthogonal, if we ap-
ply quantiﬁer relaxation only in the case where the domain
is a singleton, in the sense that all possible single-step relax-
ations result in problems that are mutually incomparable.

3.2 QCSP Relaxation as Requirement Relaxation
We now present a uniform treatment of the relaxation of both
quantiﬁers and constraints, that is, the ﬁrst four classes of
relaxation we identify above. Requirements correspond to ei-
ther a constraint in the QCSP, or a universal quantiﬁer, and
we frame relaxation of each as instances of requirement re-
laxation, over a partial order deﬁned for that purpose.

Deﬁnition 4 (Relaxation of a QCSP) We deﬁne the relax-
ation φ[r] of a QCSP φ to a relaxed version of a single re-
quirement to a new value, r, as follows:

Q1x1 . . . Qixi ∈ D(xi) . . . Qnxn.C[Q(cid:2)

ixi ∈ D(cid:2)(xi)]

ˆ= Q1x1 . . . Q(cid:2)

ixi ∈ D(cid:2)(xi) . . . Qnxn.C;

Q.(c1 . . . cj . . . cm)[c(cid:2)

j ] ˆ= Q.(c1 . . . c(cid:2)

j . . . cm).

This can then be extended to a set of relaxations R: φ[∅] = φ,
φ[{r} ∪ R] = (φ[r])[R].

Deﬁnition 5 (Ordering over Requirement Relaxations)
Given the set of possible relaxations, R(R), of a requirement
R, we say that (r1 ∈ R(R)) (cid:11) (r2 ∈ R(R)) iff for any
problem φ, if φ[r1] is satisﬁable then φ[r2] is, necessarily.
We further require that this partial order also be a meet-
semilattice, i.e. that greatest lower bounds are guaranteed to
exist: if r1, r2 ∈ R(R), then r1 (cid:12) r2 is well-deﬁned.

The ordering operator and property we use to make for-
mal the notion of relaxation per se: if r1 (cid:3) r2, then we say
that r2 is a (strict) relaxation of r1. The greatest lower bound
corresponds to the unique requirement relaxation which is as
constraining as both of its arguments, but no more (that is,
the greatest such element of the relaxation space). The lat-
tice property follows naturally from the relaxation spaces we
shall deﬁne, and is motivated by the observation that we pro-
gressively tighten approximations downwards, and that our
relaxation spaces must have a unique least element. For clar-
ity in that respect, we will deﬁne the meet operator directly.
The partial order may be deﬁned as r1 (cid:11) r2 ˆ= r1 = (r1 (cid:12)r2),
and we note that in each case it is straightforward to derive a
closed form for the comparison.

We now deﬁne the space of relaxations for constraints, the
ﬁrst form of relaxation we identiﬁed above. Essentially, a
relaxation of a constraint involves adding additional allowed
tuples into its relation.

Deﬁnition 6 (Requirement Relaxation for Constraints)
Given a constraint c ˆ= (cid:2)var(c), sol(c)(cid:3) we deﬁne its relax-
ations in terms of adding additional allowed tuples to sol(c)
as follows:

R(c) ˆ= {sol(cid:2)(c) : sol(c) ⊆ sol(cid:2)(c) ⊆ Πx∈var(c)D(x)}.

The elements of R(c) form the usual lattice using intersec-
tion, that is, (cid:12) ˆ= ∩.

IJCAI-07

76

We now consider universal quantiﬁer relaxation. Informally,
the space of possible relaxations for a universal quantiﬁer cor-
responds to restricting the quantiﬁer to any one of the expo-
nentially many subsets of the domain of the quantiﬁed vari-
able, narrowing to a single choice of value, and thereafter
widening to existentially quantiﬁed subsets. It therefore cor-
responds to the second, third and fourth forms of relaxation
identiﬁed in Section 3.1. Of course, in practice, one can limit
this relaxation space to a subset of tractable size.

Deﬁnition 7 (Requirement Relaxation for Universals)
Given a requirement, r, on a universally quantiﬁed variable
x, i.e. r ˆ= ∀x ∈ D(x), the set of relaxations R(∀x ∈ D(x))
is deﬁned as:

R(r)

ˆ= {(∀x ∈ D(cid:2)(x)) : ∅ ⊆ D(cid:2)(x) ⊆ D(x)}
∪ {(∃x ∈ D(cid:2)(x)) : ∅ ⊆ D(cid:2)(x) ⊆ D(x)}.

The elements of R(∀x ∈ D(x)) form the following meet-
semilattice:

(∀x ∈ D(x)) (cid:12) (∀x ∈ D(cid:2)(x))

ˆ= (∀x ∈ (D(x) ∪ D(cid:2)(x)));

(∃x ∈ D(x)) (cid:12) (∃x ∈ D(cid:2)(x))

ˆ= (∃x ∈ (D(x) ∩ D(cid:2)(x)));

(∀x ∈ D(x)) (cid:12) (∃x ∈ D(cid:2)(x))

ˆ= (∀x ∈ D(x)), if D(x) ∩ D(cid:2)(x) (cid:9)= ∅;

(∀x ∈ D(x)) (cid:12) (∃x ∈ D(cid:2)(x))

ˆ= (∃x ∈ ∅), if D(x) ∩ D(cid:2)(x) = ∅.

Note the existence of unique top and bottom points, corre-
sponding to trivially- and un-satisﬁable quantiﬁcations: (cid:15) =
(∀x ∈ ∅), ⊥ = (∃x ∈ ∅).

We can now deﬁne the space of possible relaxations of a
given QCSP in terms of its constituent requirements in the nat-
ural way, in terms of the cross-product of the available relax-
ations for each, and similarly the associated comparison and
meet operations.

Before we consider how explanations of falsity can be
computed using relaxations, we consider two special cases
of relaxation: namely, 1-point and 2-point relaxation spaces.
The former, which we denote by R1, contains only the origi-
nal constraint itself, and is useful when we wish to ensure that
some constraints or quantiﬁers cannot be relaxed. The latter,
R2, contains both the original constraint, and (cid:15), the maximal
relaxation; it is useful when we wish to model the case where
we either maintain the requirement or completely relax it.

4 From Relaxations to Explanations
We now consider explanations for the QCSP. A familiar no-
tion of explanation is that based on minimal conﬂicts [Junker,
2004]. As we have considered quantiﬁcation, which is not
readily presentable in terms of elements of a conﬂict set, and
further, more general relaxations of constraints than their re-
moval, it is necessary to generalise this notion to that of a min-
imally conﬂicting explanation, or alternatively, a maximally
relaxed conﬂict-based explanation. We will henceforth refer
to these as maximal, following the relaxation ordering previ-
ously deﬁned. We deﬁne this notion with respect to a (typ-
ically incomplete) consistency propagation method Π, such
as QAC [Bordeaux and Monfroy, 2002], in a similar way to
Junker [Junker, 2004].

Deﬁnition 8 (Maximally Relaxed Explanation) Given
a consistency propagator Π, a maximally relaxed (Π-
conﬂict-based) explanation of a Π-inconsistent QCSP φ, is a
maximally relaxed QCSP, X, that is inconsistent with respect
to Π; i.e. such that φ (cid:11) X, ⊥ ∈ Π(X) and for all X (cid:2) such
that X (cid:3) X (cid:2), ⊥ /∈ Π(X (cid:2)).

4.1 Explanation Algorithms
We adopt a scheme similar to that of the QUICKXPLAIN
‘family’ of algorithms [Junker, 2001; 2004], modiﬁed and
extended in the following way. We replace the removal (re-
spectively, addition) of a constraint with a speciﬁed require-
ment relaxation (resp. tightening). The speciﬁed relaxations
form a semilattice, as described in the previous section. This
could, in principle, be every possible relaxation, but at a min-
imum we generally wish to consider the speciﬁed relaxations
corresponding to the removal (resp. imposition) of each con-
straint, and the relaxation of a universal quantiﬁer to an ex-
istential one: that is, corresponding to relaxation space R2.
We may further restrict the set of speciﬁed relaxations on the
basis that some constraints, and some variables, are intrinsi-
cally environmental, and that they should participate in every
explanation; this corresponds to using relaxation space R1.

As consideration of every possible relaxation is in general
completely intractable, it will generally be desirable to spec-
ify a much smaller set. This may be done in broadly two
ways. Firstly, as part of the modelling process, an expert
specifying the class of problem instances under considera-
tion can give the sets of possible requirement relaxations that
are meaningful. Secondly, we can consider a user-driven re-
ﬁnement step, after initial exploration of the available expla-
nations, based on a base step choice of available relaxations,
when these have been found to be unsatisfactory.

4.2 The SIMPLEQUANTIFIEDXPLAIN Algorithm

When the set of speciﬁed relaxations are binary, i.e. require-
ments are either in place or fully relaxed, we can use the
equivalent of Junker’s algorithms, modiﬁed simply to use, in-
stead of the imposition and removal of a constraint, the choice
between the original and relaxed requirement throughout. We
ﬁrstly reformulate Junker’s REPLAYXPLAIN [Junker, 2001]
in terms of relaxations in Algorithm 1, thereby generalising
it to QCSPs with (at most) one distinct relaxation available
for each of the original requirements, i.e. a requirement is ei-
ther present, or fully relaxed. We call this modiﬁed procedure
SIMPLEQUANTIFIEDXPLAIN. We provide as arguments φ, a
QCSP, and R, a set of available relaxations, which here should
only contain the greatest relaxations allowed for each require-
ment, ri, that is relaxable in the speciﬁed relaxation Rs, i.e.
R = {(cid:15)i : i ∈ [1, m + n], (cid:15)i =
Rs(ri), |Rs(ri)| > 1}.
(This is only well-deﬁned for spaces with a unique maxi-
mal relaxation.) We begin with a maximally relaxed prob-
lem, using all of the available relaxations R, then build a
working set W of relaxations we then iteratively omit, un-
til a Π−inconsistency occurs. At that point we conclude that
the relaxation r last added to W (that is, last removed from
the subproblem) can be added to a set X corresponding to a
partial conﬂict, and that no further relaxations need to be con-
sidered, as some subset of W must be minimal, and still yield

(cid:2)

IJCAI-07

77

an inconsistency. We iteratively continue doing this until the
set of possible further relaxations is exhausted, at which point
X can be used to relax the original problem φ to yield a max-
imally relaxed inconsistent problem, φ[R − X], which is our
explanation.

Algorithm 1: SIMPLEQUANTIFIEDXPLAIN(φ, R)
Input

: A QCSP φ; a set of available single-step relaxations
R ⊆ {(cid:4)1, . . . , (cid:4)n+m}.

Output: A maximally relaxed conﬂict-based explanation for φ.
if ⊥ /∈ Π(φ) then return exception “no conﬂict”;
if R = ∅ then return φ;
X ← ∅;
R0 ← R;
while R0 (cid:8)= ∅ do

W ← ∅;
while ⊥ /∈ Π(φ[R − (X ∪ W )]) do

select (any) r from R0;
W ← W ∪ {r};
R0 ← R0 − {r};

X ← X ∪ {r};
R0 ← W − {r};

return φ[R − X];

Note that we do not, as with REPLAYXPLAIN and Junker’s
other explanation procedures, split the input into background
and user constraints, and nor do we restrict the output to only
user constraints, since the syntax of quantiﬁed problems pre-
cludes us from doing so. We are instead able to designate
some constraints and some quantiﬁed variables as not relax-
able, which then can be regarded as playing the same role as
background constraints. Thus implicitly, user requirements
must have at least one available relaxation. One difference
in the form of this algorithm is that the ‘background’ con-
straints are included in the explanation. Background con-
straints may be removed from the output after the fact if de-
sired. Observe that the two are equivalent in this sense: if
REPLAYXPLAIN (C, U ) = X, and SIMPLEQUANTIFIEDX-
PLAIN (C ∪ U , {(cid:15)i : ci ∈ U }) = Xq, and Xq = X ∪ C. (As-
suming similar ordering of relaxations (constraints) in each
case.) The remaining algorithms presented by Junker may be
reformulated in terms of relaxations similarly. (Discussion of
the correctness and complexity of this algorithm is deferred
until after the presentation of QUANTIFIEDXPLAIN, of which
it is a special case.)

Example 7 (SIMPLEQUANTIFIEDXPLAIN) Consider
the
execution of SIMPLEQUANTIFIEDXPLAIN(φ, R), where
φ ˆ= ∃x1 ∈ {1, 2}∀x2 ∈ {1, 2, 3}.{x1 < x2} and R ˆ=
{x2 = (cid:15), c = (cid:15)}, a trace of the progress of which is shown
in Figure 1. Note that in this case, the explanation is unique,
and identical to the original problem, as no relaxation is pos-
sible without introducing consistency. Had different choices
of relaxations been made, a different trace would have oc-
curred, but the same ﬁnal result.
(cid:2)

4.3 The QUANTIFIEDXPLAIN Algorithm
We now consider QUANTIFIEDXPLAIN (Algorithm 2), a
more general algorithm allowing for requirement relaxation

φ0 = φ[R − (X ∪ W )]
∃x1 ∈ {1, 2}∃x2 ∈ {1, 2, 3}.∅
∃x1 ∈ {1, 2}∃x2 ∈ {1, 2, 3}.{x1 < x2}
∃x1 ∈ {1, 2}∀x2 ∈ {1, 2, 3}.{x1 < x2}
∃x1 ∈ {1, 2}∀x2 ∈ {1, 2, 3}.∅
∃x1 ∈ {1, 2}∀x2 ∈ {1, 2, 3}.{x1 < x2}

⊥ ∈ Π(φ0)?
no
no
yes
no
yes

Figure 1: SIMPLEQUANTIFIEDXPLAIN: trace on Example 7.

lattices of arbitrary size. Once again we follow the basic
structure of REPLAYEXPLAIN, but now the key difference
is that instead of successively adding constraints to a conﬂict
set (or as in SIMPLEQUANTIFIEDXPLAIN, removing avail-
able relaxations), we instead consider a current candidate re-
laxation comprising one element from each relaxation space,
r1 . . . rm+n, and use (cid:3) to obtain successive approximations
to a maximally relaxed explanation. We begin with a max-
imal relaxation of each requirement, and then progressively
tighten these one at a time: we select an i such that ri may be
assigned a new value strictly less than the old one, tightening
by a minimal amount at each step to ensure maximality of
the ﬁnal relaxation of the whole problem. When an inconsis-
tency is detected, we eliminate all relaxations tighter than or
incomparable to the current approximation from future con-
sideration, as unnecessary for a maximally relaxed explana-
tion. At the same time, we restrict the relaxation space for the
last-relaxed requirement, Ri, to ensure that that requirement
may not be as relaxed as the earlier value, r(cid:2)
i, that did not pro-
duce an inconsistency, as we have guaranteed that that value
cannot take part in the explanation currently under construc-
tion. We then repeat this process with the relaxation spaces
so restricted, until eventually only one possibility remains for
each relaxation, thus fully determining the chosen explana-
tion. The complexity of this algorithm (and that of SIMPLE-
QUANTIFIEDXPLAIN) is equivalent to that of Junker’s RE-
PLAYXPLAIN, given a consistency operator of similar com-
plexity, and similar numbers of available relaxations. How-
ever, in the QCSP case, there is scope for each of those to be
signiﬁcantly larger.

Algorithm 2: QUANTIFIEDXPLAIN(φ, R)
Input

: A QCSP φ; a set of relaxation spaces for each
quantiﬁer and constraint, R ⊆ R(φ).

Output: A maximally relaxed conﬂict-based explanation for φ.
if ⊥ /∈ Π(φ) then return exception “no conﬂict”;
enumerate R as R1 . . . Rm+n;
if ∀i ∈ [1, m + n]|Ri| = 1 then return φ;
while ∃i : |Ri| > 1 do

foreach Ri do choose an ri from maxima(Ri);
if ⊥ ∈ Π(φ(cid:2) = φ[{r1, . . . , rm+n}]) then return φ(cid:2);
while ⊥ /∈ Π(φ[{r1, . . . , rm+n}]) do

(cid:2)

choose an i s.t. ri (cid:8)=
i ← ri;
r(cid:2)
choose an ri from maxima{r : r ∈ Ri, r (cid:3) ri};

(Ri);

Ri ← {r : r ∈ Ri, r(cid:2)
foreach Rj do Rj ← {r : r ∈ Rj , rj (cid:12) r};

i (cid:8)(cid:12) r};

return φ[{r1, . . . , rm+n}];

IJCAI-07

78

Example 8 (QUANTIFIEDXPLAIN) Consider
the QCSP
φ ˆ= ∃x1 ∈ {1, 2}∀x2 ∈ {1, 2, 3}.{x1 < x2} and the
execution of QUANTIFIEDXPLAIN on φ with the following
relaxation spaces: R1(∃x1 ∈ {1, 2}); R8(∀x2 ∈ D(x2)) =
{(∀x2 ∈ D(cid:2)(x2) : ∅ ⊂ D(cid:2)(x2) ⊆ D(x2)} ∪ {∃x2 ∈ D(x2)};
and R3(x1 < x2) = {x1 < x2, x1 ≤ x2, (cid:15)}. We give a
trace of QUANTIFIEDXPLAIN in Figure 2.

(cid:2)

φ0 = φ[{r1, . . . , rm+n}]
∃x1 ∈ {1, 2}∃x2 ∈ {1, 2, 3}.∅
∃x1 ∈ {1, 2}∀x2 ∈ {1}.∅
∃x1 ∈ {1, 2}∀x2 ∈ {1}.{x1 ≤ x2}
∃x1 ∈ {1, 2}∀x2 ∈ {1}.{x1 < x2}
∃x1 ∈ {1, 2}∃x2 ∈ {1, 2, 3}.{x1 < x2}
∃x1 ∈ {1, 2}∀x2 ∈ {1}.{x1 < x2}

⊥ ∈ Π(φ0)
no
no
no
yes
no
yes

Figure 2: QUANTIFIEDXPLAIN: trace on Example 8.

The proof of correctness of QUANTIFIEDXPLAIN relies on

the following properties, analogous to [Junker, 2001]:

6 Conclusions and Future Work
We have extended the concepts of problem relaxation and ex-
planation of inconsistency to the QCSP. We showed that the
generality of the QCSP allows for the deﬁnition of a num-
ber of different forms of relaxation not available in classical
CSP. We presented an algorithm called QUANTIFIEDXPLAIN
for computing minimally conﬂicting explanations for QCSPs.
Our work on relaxation and explanations for the QCSP is the
ﬁrst study on these interesting and practical aspects of quan-
tiﬁed constraint reasoning. We plan to extend the explanation
algorithm to deal uniformly with the ﬁnal class of relaxation,
that of quantiﬁer moving, and to establish complexity compa-
rable to Junker’s QUICKXPLAIN algorithm. Another impor-
tant area is that of preferred explanations, with which it would
be possible to improve the situation presented here, where an
arbitrary explanation is generated from those possible.

Acknowledgements. This work was supported by Science
Foundation Ireland (Grant 03/CE3/I405). We thank Hubie
Chen, Helene Fargier and Nic Wilson for their comments.

i . . . Rm+n,

Property 1 If each relaxation space has a unique top ele-
ment, and ⊥ ∈ Π(φ[{(cid:15)1, . . . , (cid:15)m+n}]), then the only maxi-
mally relaxed explanation is φ[{(cid:15)1, . . . , (cid:15)m+n}].
Property 2 If ⊥ /∈ Π(φ[{r1, . . . , rm+n}]), for all maximal
ri, then no conﬂict exists, and thus no explanation.
Property 3 If ⊥ ∈ Π(φ[ri]), and X is a maximally
relaxed explanation for φ, given the relaxation spaces
R1 . . . R(cid:2)
then X is also a maximally re-
laxed explanation for φ given the relaxation spaces
R1 . . . Ri . . . Rm+n, where R(cid:2)
Property 4 If ⊥ ∈ Π(φ[ri]) and ⊥ /∈ Π(φ[r(cid:2)
i]), where ri (cid:3)
i, then if X is a maximally relaxed explanation for φ, given
r(cid:2)
the relaxation spaces R1 . . . R(cid:2)
i . . . Rm+n, then X is also
a maximally relaxed explanation for φ given the relaxation
spaces R1 . . . Ri . . . Rm+n, where R(cid:2)
i (cid:9)(cid:11) r}.
Theorem 1 (Maximally Relaxed Explanations) If ⊥ ∈
Π(φ), and R is a set of available relaxations of some, all
or none of the requirements of φ, and QUANTIFIEDXPLAIN
(φ, R) = X, then: ⊥ ∈ Π(X), and if X (cid:2) = X[r] for some
r ∈ R such that X (cid:3) X (cid:2), then ⊥ /∈ Π(X (cid:2)).

i = {r ∈ Ri, ri (cid:11) r}.

i = {r ∈ Ri, r(cid:2)

5 Related Work
Benhamou and Goualard studied quantiﬁed interval con-
straints, with engineering applications in mind [Benhamou
and Goualard, 2000]. More recently, researchers have begun
to study how classical CSP concepts such as arc-consistency,
satisﬁability and interchangeability can be extended to the
QCSP [Bordeaux et al., 2005]. A number of techniques for
solving the QCSP have been proposed based on encodings to
QBF [Gent et al., 2004], as well as using a systematic QCSP
solver, called QCSP-Solve, directly [Gent et al., 2005]. A va-
riety of repair-based methods have also been proposed [Ster-
giou, 2005]. A deep study of the complexity of the QCSP is
also available [Chen, 2004]. Our work on relaxation and ex-
planations is the ﬁrst on these important aspects of reasoning
about QCSPs.

References
[Benhamou and Goualard, 2000] F.

and
F. Goualard. Universally quantiﬁed interval constraints.
In CP, pages 67–82, 2000.

Benhamou

[Bordeaux and Monfroy, 2002] L. Bordeaux and E. Mon-
froy. Beyond NP: Arc-consistency for quantiﬁed con-
straints. In CP, pages 371–386, 2002.

[Bordeaux et al., 2005] L. Bordeaux, M. Cadoli,

and
T. Mancini. CSP properties for quantiﬁed constraints:
Deﬁnitions and complexity.
In AAAI, pages 360–365,
2005.

[Chen, 2004] H. Chen. The Computational Complexity of
Quantiﬁed Constraint Satisfaction. PhD thesis, Cornell
University, August 2004.

[Freuder and Wallace, 1992] E.C. Freuder and R.J. Wallace.
Partial constraint satisfaction. Artif. Intell., 58(1-3):21–70,
1992.

[Gent et al., 2004] I.P. Gent, P. Nightingale, and A. Rowley.
Encoding quantiﬁed CSPs as quantiﬁed boolean formulae.
In ECAI, pages 176–180, 2004.

[Gent et al., 2005] I.P. Gent, P. Nightingale, and K. Stergiou.
QCSP-solve: A solver for quantiﬁed constraint satisfac-
tion problems. In IJCAI, pages 138–143, 2005.

[Junker, 2001] U. Junker. QUICKXPLAIN: Conﬂict detec-
tion for arbitrary constraint propagation algorithms.
In
IJCAI’01 Workshop on Modelling and Solving problems
with constraints, 2001.

[Junker, 2004] U. Junker. QUICKXPLAIN: Preferred expla-
nations and relaxations for over-constrained problems. In
AAAI, pages 167–172, 2004.

[Mackworth, 1977] A.K. Mackworth. Consistency in net-

works of relations. Artif. Intell., 8(1):99–118, 1977.

[Stergiou, 2005] K. Stergiou. Repair-based methods for

quantiﬁed CSPs. In CP, pages 652–666, 2005.

IJCAI-07

79

