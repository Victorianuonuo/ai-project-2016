Answer Set Optimization* 

Gerhard Brewka 
Comp.  Sci.  Institute 
University of Leipzig 
Leipzig, Germany 

brewka@informatik.uni-leipzig.de 

Ilkka Niemela 

Dept.  of Comp.  Sci.  and Eng. 
Helsinki University of Technology 

Miroslaw  Truszczynski 

Dept. of Comp.  Sci. 
University of Kentucky 

Helsinki, Finland 

Ilkka.Niemela@hut.fi 

Lexington, KY 40506-0046, USA 

mirek@cs.uky.edu 

Abstract 

We  investigate the combination of answer set  pro(cid:173)
gramming and qualitative optimization techniques. 
Answer  set  optimization  programs  (ASO  pro(cid:173)
grams)  have  two  parts.  The  generating  program 
produces  answer  sets  representing  possible 
solutions. The preference program 
expresses 
user  preferences.  It  induces  a  preference  relation 
on  the answer sets  of 
based on the degree to 
which rules are satisfied. 
We discuss possible applications of ASO program(cid:173)
ming,  give complexity results  and  propose  imple(cid:173)
mentation techniques. We also analyze the relation(cid:173)
ship between  A SO programs and  CP-networks. 

Introduction 

1 
Answer  set  semantics  [Gelfond  and  Lifschitz,  1991]  de(cid:173)
scribes  the  meaning  of a  logic  program  P  in  terms  of sets 
of  literals.  The  exact  definition  of answer  sets  depends  on 
the kind of rules used in P, yet two properties are always re(cid:173)
quired.  Answer sets are closed under the rules of P, and they 
are grounded in P:  each literal has a derivation using "appli(cid:173)
cable"  rules  from  P.  Answer set  programming has  become 
a popular knowledge  representation  tool.  There  are  several 
reasons for this: 
1. Logic programs are expressive enough to model many typ(cid:173)
ical  knowledge representation problems in AI. In particu(cid:173)
lar, the availability of default negation in the body of rules 
makes it possible to represent defeasible information. 

2. Many problems in reasoning about actions, planning, diag(cid:173)
nosis,  belief revision  and  product configuration have ele(cid:173)
gant formulations as logic programs so that models of pro(cid:173)
grams, rather than proofs of queries, describe problem so(cid:173)
lutions [Lifschitz, 2002; Soininen, 2000; Baral, 20031. 

3. The semantics of answer sets is intuitive and avoids the pit(cid:173)
falls of resolution-based systems like Prolog.  For instance, 
it is independent of the order in which rules are written and 
correctly handles loops. 

"The authors acknowledge the support of DFG grant Computa(cid:173)
tional  Dialektik  BR  1817/1-5,  Academy  of Finland  grant  53695 
and NSF grant IIS-0097278, respectively. 

4. In  the  same time,  the  syntax of logic  programs is  restric(cid:173)
tive enough to  allow for fast  implementations and several 
highly  efficient  answer-set  provers  have  been  developed. 
Most advanced among them are Smodels [Niemela and Si(cid:173)
mons, 19971 and dlv [Eiter et  al,  19981. 

To  increase  the  ease  of use  of logic  programs  in  knowledge 
representation  researchers  have  suggested  and  investigated 
several  extensions  to  the  basic  formalism.  Well-known  ex(cid:173)
amples of such extensions include disjunctive logic programs 
and  programs  with  cardinality  and  weight  constraints  [Si(cid:173)
mons  et ai,  2002]. 

An  important  issue  for many applications  is  the  represen(cid:173)
tation of preferences and reasoning about them.  Researchers 
have investigated preferences among program rules  [Schaub 
and Wang,  2001],  among program literals  [Sakama and In-
oue, 2000], and context-dependent preferences among literals 
through the use of ordered disjunction [Brewka, 20021. 

Representing and handling preferences in the formalism of 
logic programs is also the main topic of this paper.  However, 
our approach differs from  existing  ones  in  an  important  as(cid:173)
pect.  Rather than specifying a preference relation among the 
rules or literals in a single logic program, we use two differ(cid:173)
is used to generate 
ent  programs.  The  first  program, 
answer sets, that is, define the space of acceptable solutions. 
Context-dependent preferences are described in a second pro(cid:173)
These preferences are 
gram,  the preference program 
used to compare answer sets  of 
, that is, to form a pref(cid:173)
erence ordering of acceptable solutions.  Intuitively, the rules 
of 
are hard constraints which specify conditions an an(cid:173)
swer set  must satisfy;  the  rules  of 
are  soft constraints 
describing  conditions  under  which  one  answer  set  is  to  be 
considered better than another. 

The  decoupling  of  answer-set  generation  and  answer-set 

comparison has at least two advantages: 
1. The  method for comparing  answer sets  is  independent of 
the  type  of the  generating  program 
It may  be any 
type  of a  logic  program  (for  instance,  normal,  extended, 
disjunctive, involving cardinality or weight atoms), as long 
as it has a well-defined semantics given by a collection of 
sets of literals. 
2. Preferences in 

(soft constraints) can be specified in(cid:173)
dependently  of  " 
(hard constraints).  This  makes pref(cid:173)
erence elicitation easier since the task is broken into sepa-

NONMONOTONIC  REASONING 

867 

rate and smaller subtasks.  Moreover, it makes the overall 
setting better aligned with  practical applications.  Indeed, 
often  what  is  possible  is  determined  by  external  factors 
(available  resources,  constraints  of the  environment,  de(cid:173)
sign and engineering constraints for products) while what 
is  preferred  is  described  independently  and  by  different 
agents (users, customers, groups of customers). 
The  rest  of the  paper  is  organized  as  follows.  The  next 
section introduces a new formalism, answer-set optimization 
programs, and defines their syntax and semantics. The subse(cid:173)
quent section provides examples and additional observations 
on  the  basic  formalism.  In  Section  4,  we  show  how  meta-
preferences, that is, preferences on the preference rules, can 
be  introduced and dealt with.  Next,  we discuss complexity 
of computational  problems  arising  in  the  context of our for(cid:173)
malism and propose implementation techniques. Our work is 
related  to  the  approach proposed  in  tBoutilier et  al,  1999]. 
We  investigate  this  relationship in  Section  6.  We  conclude 
with additional discussion of other related work and possible 
extensions to the formalism presented here. 
2  Optimization programs 
We use two separate programs to describe the space of answer 
sets and preferences among them. 
Definition 1  Let  A  be  set of atoms.  A  preference  program 
over A is a finite set of rules of the form 

(1) 
where  the  a,s  and  bjS  are  literals  (expressions  x  and  x, 
where  x  is  an  atom  in  A),  and the 
are  boolean  combi(cid:173)
nations over A (to be defined below). 
The  rule  intuitively  reads: 

if  an  answer  set  S  contains 
, . . ., n and does not contain any of the literals b i , . . ., bm 
etc.  (we will give 

then C1 is preferred over 
a precise semantics later in this section). 

A boolean combination over A  is  a formula built of atoms 
in A by means of disjunction, conjunction, strong 
and de(cid:173)
fault (not) negation, with  the restriction that strong negation 
is allowed to appear only in front of atoms, and default nega(cid:173)
tion only  in  front of literals.  For example, 
is a  boolean combination, whereas 
is  not.  Using 
boolean  combinations rather than,  say,  literals  in  the  heads 
of preference rules  gives  us  additional  expressiveness.  Us(cid:173)
ing conjunction we can express that certain combinations of 
properties are preferred over other combinations. Disjunction 
allows us to express that certain options are equally preferred. 
For instance, the rule a 
says that in case 
of / the best option is a; b and c are equally preferred second 
best options, and d is the least preferred option.  Finally, we 
can use expressions like a 
if we prefer to  have one of properties 
any of them. 
Definition 2 
boolean  combination  C  in  S  (denoted  S 
as: 

t  of  literals.  Satisfaction  of 

over not  having 

C)  is  defined 

(not 

We next define the notion of an optimization program. 

is 

where 

Definition 3  An  answer-set  optimization  (ASO)  program  is 
a  pair 
logic  program  called 
the generating program,  and Pprâ‚¬j  is  preference program. 
As we already mentioned earlier, the program 
used for 
generating answer-sets can  be of any type.  We  only require 
that the semantics be given in terms of sets of literals, or an(cid:173)
swer sets, that are associated with programs. 

The  key  question  is:  how  does  the  preference  program 
determine a preference ordering on the answer sets de(cid:173)
scribed by the generating program  _ 
Let us consider an 
answer  set  S  and  a  rule  of the  form  (1).  Given  a  set  S  of 
literals, three different situations are possible: 

. the body  of 

is not satisfied in  5, that is,  at  i  S for some 

2. the body  of 

fied in S 

3. the body  of 

in 5. 

is satisfied in S and none of the 

s is satis(cid:173)

is satisfied in S and at least one C, is satisfied 

is  irrelevant to  S  because  the  rule 
In the case (1), the rule 
does  not apply.  The  case  (2)  is  more  subtle:  the  rule  lists 
preferences  among  several  options,  yet  none  of the  options 
holds. We consider this as another kind of irrelevance. Let us 
assume that a rule states that red is better than green, and S 
contains  blue  and no other color.  In this case the preference 
of  red  over  green  appears  irrelevant  to  S  since  S  does  not 
mention these two colors at all. In the case (3), the preference 
expressed in  the rule  is  satisfied  to some degree (as  at  least 
one  d  holds  in  S).  Thus,  we  define  the satisfaction  degree 
is irrelevant to 5, 

and 

otherwise. 

Concerning  the  relationship  between  /  and  the  other sat(cid:173)
isfaction degrees, two viable options seem  to exist.  We can 
consider / as incomparable to other values, based on the view 
that "irrelevance" cannot be compared to proper satisfaction 
degrees.  According  to  this  view,  selecting  blue  in  the  ex(cid:173)
ample above is neither better nor worse than selecting green 
or  red.  But  one  can  also  argue  that  green  violates  prefer(cid:173)
ences whereas blue does not, and that blue is thus preferable 
to green.  We will adopt this latter view here and use the fol(cid:173)
lowing  preorder 
to compare satisfaction degrees (Fig.  1): 

Fig. 1:  The preorder on satisfaction degrees 

The  values  /  and  1  are  regarded  equally  good 

and 
and better than all others.  In addition, for each  we 

We write 

have 
Definition 4  Let 
be a preference pro-
gram and let S be an answer set.  We say that S induces a 
satisfaction vector 

is  strictly better than 

if 

. 

868 

NONMONOTONIC REASONING 

We extend the preorder on satisfaction degrees to preorders 
on satisfaction vectors and answer sets as follows: 

We refer to this ordering as the preference satisfaction order(cid:173)
ing (or ps-ordcring, for short). 

3  Examples 
The prototypical application for ASO programs are configu(cid:173)
ration problems where 
describes possible configurations 
and 
preferences among them. We use a dinner example 
similar to the one discussed in [Brewka, 2002].  It is conve(cid:173)
nient to use programs with cardinality constraints to generate 
answer sets. Such programs allow for the use of special atoms 
are literals, to rep(cid:173)
of the form 
where the 
resent:  at least n and at most m of the 
are true.  Although 
rules built from cardinality constraints can,  in principle,  be 
replaced by sets of rules without such constraints, they make 
problem specifications much more concise and readable. For 
the precise definitions we refer the reader to  [Simons et a/., 
2002]. 

Let us assume that Pgen consists of the rules: 

Each of these constraints enforces the selection of exactly one 
of the items it lists into an answer set. Thus, 
generates 
the space of 
answer sets. Let us assume 
that 
is: 

This preference program designates as non-preferred all an(cid:173)
swer sets containing fish but not white, all answer sets con(cid:173)
taining beef but not red or beer, and all answer sets contain(cid:173)
ing beer and not pie. We note that the objective is not to have 
these answer sets eliminated, which could be accomplished 
simply by adding the three constraints 

to the original program.  The role of the preference program 
is to define soft constraints and, moreover, to do so indepen(cid:173)
dently  of the  generating program.  For instance,  if we  later 
learn that constraints 
need 
to be included in Pgen* the additional constraints would lead 
to inconsistency. This does not happen in our approach. The 
answer sets generated by the extended program are: 

Their satisfaction  vectors are 

respectively.  Thus, S1 
and 52  are equally good and are maximally preferred in  the 
presence of F to  53  and S4, the latter two answer sets being 
also equally good. 

4  Meta-preferences 
The  notion  of optimality  underlying  our  approach  is  some(cid:173)
what weak.  In general, many optimal answer sets may exist, 
and one often wants additional means to express that one pref(cid:173)
erence (that is, one rule in the program 
is more impor(cid:173)
tant than another.  Here is a generalization of ASO programs 
where it is possible to express such meta-preferences: 
Definition 7  A ranked ASO program P is a sequence 

consisting  of a  generating  program 
pairwise  disjoint preference  programs 
The rank of a rule 
is  the  unique  integer ifor  which  r 

and a sequence of 
r. 
denoted rank 

Intuitively,  preference rules  with  lower rank are  preferred 
over  preference  rules  with  higher rank.  We  can  now  mod(cid:173)
ify the definition  of preference among answer sets by  taking 
preferences among rules into account: 
Definition 8 
be a ranked 
ASO program.  Let  S\  and S2  be answer sets  of Pgen-  We 
if  far  every preference  rule  r'  such  that 
define , 
does not hold,  there is a rule r" such that 

rank 

and 
rank 
rank  extends (is stronger than) the pre(cid:173)
Clearly, the preorder 
order 
optimal answer sets 
can be obtained in the following way:  select all answer sets 
optimal  wrt  P\,  among  those  pick  the  ones  optimal  wrt  P2 
and so on. 

It is also easy to see that 

A  further  generalization  of  ranked  to  partially  ordered 
ASO  programs is straightforward and not presented here for 
lack of space.1 

In some cases a natural ordering of the preference rules can 
be derived from the structure of the preference program.  For 
each  preference program P  we  define  its  dependency graph 
G(P)  as follows.  The atoms appearing in  P form the vertex 
set  of G(P).  There  is  a  directed edge  from  a  vertex  b  to  a 
vertex a  in  G(P)  if there is  a rule 
in P such that  appears 
in the head  of  and  appears in the body  of 

If the graph G{P)  is  acyclic,  there  is  a natural  ranking of 

its atoms.  Namely, we define the rank of an atom 
recursively as follows: 
has  no  predecessors  in  G{P)\  otherwise,  we  define 

=  0  for  every  atom 

that 

'Another possible  extension  concerns  the  setting  of weighted 
preference rules.  To compare answer sets one could use weighted 
sums of the violation degrees of preference rules. 

NONMONOTONIC REASONING 

869 

in  G(P) 

as the maximum of the ranks of all predecessors of 
incremented by  1. 

The ranking of atoms implies the ranking of rules. Namely, 
as  the 

we  define  the  rank  of a  preference  rule 
maximum rank of an atom appearing in the head of 

We  call  preference  programs  with  acyclic  dependency 
graphs acyclic preference programs.  They are  important for 
two reasons: 
1. They commonly appear in  practice  as  preferences are of(cid:173)
ten  described according to  some partial  order on  features 
defining answer sets,  with  some  features being  more  im(cid:173)
portant than others.  For instance,  in the dinner example, 
most  users  will  start  with  the  preferences concerning the 
main course.  They could then condition their preferences 
concerning the appetizer and the beverage on the choice of 
the main course. And, finally, they may describe their pref(cid:173)
erences concerning the dessert based on earlier choices of 
the main course, appetizer and beverage. 

2. As  we  just  demonstrated,  in  the  case  when  G(P)  is 
acyclic,  there exists  a natural ranking on  the rules.  This 
ranking  is  implied  by  the  program  itself  and  allows  us 
to strengthen our ordering relation  on answer sets,  as de(cid:173)
scribed above in Definition 8.  We call the resulting order(cid:173)
ing  determined  by  an  acyclic  preference  program â€”  the 
canonical ps-ordering. 

5  Complexity and implementation 
The  complexity  of ASO  programs  depends  on  the  class  of 
generating  programs.  To  simplify  the  treatment  we  con(cid:173)
sider  here  only  generating  programs  where  deciding  exis(cid:173)
tence  of an  answer  set  is  NP-complete.  This  class  of pro(cid:173)
grams  includes ground normal  programs (possibly extended 
with  strong  negation  or  weight  and  cardinality  constraints) 
lSimons et/a/.,2002]. 

The  following  two  results  indicate  that  allowing  prefer(cid:173)

ences adds an extra layer of complexity. 
Theorem 1 
S an answer set of P 
is coNP-complete. 
Theorem 2  Given an ASO program P and a literal I decid(cid:173)
ing whether there is an optimal answer set S such that I 
S 

be an ASO program and 
Then deciding whether S is optimal 

-complete. 

The complexity results  imply that  (unless the polynomial 
hierarchy collapses) preference rules cannot be  translated to 
generating rules in polynomial time, i.e., the problem of find(cid:173)
ing  an  optimal  answer  set  for  an  ASO  program  cannot  be 
mapped in polynomial time to a problem of finding an answer 
set of a program obtained by translating the ASO program to 
a set of generating rules only. 

However, in [Brewka et al, 2002] an implementation tech(cid:173)
nique for computing optimal  answer sets  for logic programs 
with  ordered  disjunction  on  top  of  a  standard  answer  set 
prover has  been developed.  A  similar technique has  earlier 
been used in [Janhunen et ai, 2000] to compute stable models 
of disjunctive logic programs using Smodels.  The computa(cid:173)
tion is based on a tester program that takes as input an answer 
set  and generates  a  strictly  better one  if such  an  answer set 

exists.  The  computation  starts  with  an  arbitrary  answer set 
generated  by the generator.  This  answer set  is  given  to  the 
tester program.  If the tester fails to generate a strictly better 
one, we have found an optimal answer set and we are done. If 
a strictly better answer set is discovered, the tester is run with 
the new answer set as input.  This continues until an optimal 
answer set is reached. 

This  technique can  be  adapted for computing optimal  an(cid:173)
by  choosing  a 
The 
is  constructed  by  adding  the  following 

for a  given  answer set 

swer  sets  of an  ASO  program 
suitable  tester  program 
tester  program 
rules to the generator program 
1. For each  preference 

include a  fact 

where 

is the satisfaction degree of 

in 

2. Include rules 

3. Add facts geq 

giving the preorder 

on the set 

4. For each  Boolean  combination 

(and  its  non-
atomic  subexpressions)  introduce a new  atom 
and add 
rules capturing the conditions under which the expression 
is  satisfied.  For example,  if 
and 
then add rules 

is a  disjunction 

5. For each  preference 

of the form (1) add rules 

is  an  answer  set  for 

If PT  has  an  answer  set  5,  then  S  restricted  to  the  original 
language  of 
that  is  strictly 
preferred to So, and if 
has no answer set, no such answer 
set exists. 
6  Relationship to CP-networks 
An  important  approach  to  the  problem  of eliciting  and  ap(cid:173)
proximating  preferences  is  that  of  CP-networks  proposed 
and developed in [Boutilier et al., 1999]. We will now review 
this approach and show how it relates to our work. 

The approach of CTP-networks is concerned with compar(cid:173)
ing vectors of feature values that we call configurations.  Let 
be a set of features (attributes).  For each 
feature 
be  its  domain,  that  is,  a  finite  and  non(cid:173)
empty set of values or selections  for  We assume that all 
domains are  pairwise disjoint.  A  configuration is a 
tuple 

such that 

2 We follow the Prolog convention that terms starting with capital 

letters arc variables and write 

rather than 

to avoid confusion. 

870 

NONMONOTONIC  REASONING 

The  user  prefers  some  configurations  to  others.  Since 
the number of configurations is,  in general,  exponential in 
it may be impractical to directly elicit and store 
the user's preference ordering on the set of all configurations. 
Thus, the task is to identify partial (and, in some sense, basic) 
information about the user's preferences, and develop ways 
to approximate the preference ordering implied by this par(cid:173)
tial information.  The formalism of CP-networks [Boutilier 
et al., 1999] is an approach to accomplish that. 

A  CP-network over a set of features A is a pair (G,P), 
where G is a directed graph whose vertices are features from 
A The edges of the graph G determine dependencies among 
features: preferences for a value for a feature A depend only 
on values selected for the parents of A in the network. Thus, 
for each feature A  and for each selection of values for the 
parent features for .4, a CP-network specifies a total ordering 
relation on the domain of A.  All these total orderings form 
the component  of a CP-network3. 

The information contained in a CP-network implies pref(cid:173)
erences among configurations. A configuration V is one-step 
preferred to a configuration W if for some feature A (given 
a configuration 17,  by U(A)  we denote the value from the 
domain of A selected to U): 
1. V(B)  =  W(B)  for every  feature  B 
for every feature other than A), and 

(that is, 

2. V(A)  is strictly preferred to W(A)  in the ordering of the 
domain D of A specified by the network for the selection 
for the parents of A as given by  V (or, equivalently, by 
W). 

The configuration V is  CP-preferred to W if V can be ob(cid:173)
tained from W by a sequence of one-step improvements.  It 
is easy to see that for acyclic CP-networks (acyclic networks 
seem to arise in most situations occurring in practice) this or(cid:173)
dering is indeed a partial ordering; we call it a CP-ordering4. 
We will now show that the information represented by a 
CP-network  N  (with features 
can be 
represented by means of ASO programs.  First, we specify 
the space of all configurations as answer sets to the program 
contains 

(N) that, for each feature 

the following rule (we assume here that 

As already discussed in Section 3, such rule enforces the se(cid:173)
lection of exactly one of the listed values to an answer set. 
Thus, answer sets of the program 
(N)  are precisely the 
configurations of N. 

To specify preferences, we proceed as follows.  Let A be 
be the set of its par(cid:173)

a feature and let 
ents  in  the  CP-network.  For every  selection 
of values  of features 
specifies an ordering, say 

respectively, the network 
on the domain 

3The restriction that domains be totally ordered can be dropped. 
We adopt it, following [Boutilier et al, 1999] to keep the discussion 
simple. 

4This ordering captures the intuition ceteris paribus or all other 
things being equal, the aspect that is discussed in detail in [Boutilier 
et ai, 1999]. 

a rule 

of A.  We represent that fact by including 

in the preference program 

(N). 

Thus, at the level of syntax, our approach extends that of 
CP-nets.  In particular, [Boutilier et a/.,  1999] is concerned 
only with one fixed space of all configurations that contain for 
every feature exactly one value from its domain. In contrast, 
in our approach we have a substantial  flexibility  in defining 
answer sets by varying the generator program. 

In addition, our approach is more robust when user prefer(cid:173)
ences are inconsistent, the situation that often occurs in prac(cid:173)
tice.  For instance,  the user may  specify a preference rule 
unaware of situations 
and body2 are satisfied. Such inconsisten(cid:173)
where both 
cies cannot be modeled by  CP-networks.  In our approach 
they can with the effect that one of the preference rules will 
be violated whenever both bodies are true. 

The key question is  that  of the relationship between the 
semantics of the two approaches. First, we observe that they 
are different.  Let us consider the  following example from 
[Boutilier et al, 1999]. There are two features .4 and B with 
respectively.  Feature B depends on 
values 
feature A and the preferences are specified as follows (we 
give them in the notation of ASO programs): 

and 

In  the CP-ordering, 

is preferred over 

as there is a one-step improvement leading from 

body means  and 

to S1. On the other hand, none of S\  and S2 is strictly pre(cid:173)
ferred over the other in  the ps-ordering (the corresponding 
satisfaction-degree vectors are:  (1,2,7) and 
respec(cid:173)
tively).  The reason  is that the meaning of the rules in the 
two approaches is slightly different. In the CP-nct approach, 
form the domain of a fea(cid:173)
ture X)\  among all answer sets satisfying body, answer set 
S\  is better than S2  if both agree on all features except A" 
and S1 makes x true and S2 makes 
true.  In our approach 
is more like a soft constraint expressing: 
whenever body is true there is a reason to prefer  over 
Here, among the answer sets satisfying body, an answer set 
S1 is preferred over 
and the other 
rules of the program are satisfied at least as well in S\ as in 
S2. In a sense, what is different is the interpretation of the 
ceteris paribus â€” other things being equal â€” phrase, more 
precisely, the interpretation of what is meant by the "other 
things" that have to be equal.  In the CP-network approach 
the "other things" are the selections of values for other fea(cid:173)
tures which have to be the same.  In our approach it is the 
degree of satisfaction of the other rules in the program. 

In general, our basic approach yields a weaker ordering. 

Namely, we have the following theorem. 
Theorem 3  Let  N  be an  acyclic  CP-network  and let 
and W be two configurations.  If V is strictly preferred to 
W under the ps-ordering determined by the ASO program 
(N)), then V is strictly preferred to W un(cid:173)

der the CP-ordering implied by N. 

NONMONOTONIC REASONING 

871 

It is easy to see that the representation of an acyclic CP-
network in our syntax results in an acyclic preference pro(cid:173)
gram. In this case, we have the following result. 
Theorem 4 Let N be an acyclic CP-network and let V and 
W be two configurations. If V is strictly preferred to W un(cid:173)
der the CP-ordering determined by the CP-net N, then V is 
strictly preferred to W under the canonical ps-ordering de(cid:173)
termined by the ASO program 

These two  theorems  show that we can  approximate the 
CP-ordering by means of orderings implied by our approach. 
It is important as the relationship between two answer sets 
with respect to (ranked) ps-ordering can be verified in poly(cid:173)
nomial time, while it is not known whether polynomial time 
algorithms exist in the case of the CP-ordering (in fact, there 
are examples of configurations that require an exponentially 
long chain of one-step improvements to demonstrate that one 
is preferred to the other). 
7  Further related work and conclusions 
In this paper we have introduced ASO programs which com(cid:173)
bine a generating program with a preference program.  The 
combination allows us to specify possible solutions of a prob(cid:173)
lem (answer sets) together with preferences among specific 
aspects of solutions.  The preference program orders the an(cid:173)
swer sets according to the satisfaction degrees of its prefer(cid:173)
ence rules. 

Numerous papers which introduce preferences to logic pro(cid:173)
gramming exist in the literature. For an overview of some of 
them see for instance [Schaub and Wang, 2001].  Closest to 
ours is the proposal in [Brewka, 2002; Brewka et al, 2002]. 
Here, preferences are expressed through ordered disjunction. 
Ordered disjunction is a non-commutative kind of disjunction 
which gives preference to the first disjunct over the second. 
The approach presented here differs from ordered disjunction 
in the following respects: 
1. generation and comparison of answer sets are separated, 
2. preference handling  works  independently of the  type of 

program used for answer set generation, 

3. more general preferences can be stated due to our use of 

boolean combinations. 

In fact,  it is  not difficult to show that logic programs with 
ordered disjunction (LPODs) are a special case of our ap(cid:173)
proach. Let P be an  LPOD, 
a logic program possess(cid:173)
ing the same answer sets as P, and let 

The  preferred  answer  sets  of P  under the  Pareto  criterion 
iBrewka  et al,  2002])  and  those  of the  correspond(cid:173)
(cf. 
ing ASO program coincide.  We can also capture the inclu(cid:173)
sion  based preference criterion from  [Brewka et al,  2002] 
using  appropriate  ranked  ASO  programs.  For  each  rule 
we have to 
in the preference program 
This gives us exactly the inclusion-preferred answer 

and for each 

include 

sets of P. 

In future work we plan to investigate further generaliza(cid:173)
tions of our approach where rule heads may contain arbitrary 

partial orders on boolean combinations.  We intend also to 
study in depth the distinction between options being "equally 
good" and "incomparable". Finally, we will study extensions 
of the one-step improvement concept from  CP-networks to 
the setting of general ASO programs. 
References 
[Baral, 2003] C. Baral. Knowledge representation, reason(cid:173)
ing and declarative problem solving. Cambridge Univer(cid:173)
sity Press, 2003. ISBN 0521818028. 

[Boutilier etal, 1999]  C.  Boutilier,  R.I.  Brafman,  H.H. 
Hoos, and D. Poole.  Reasoning with conditional ceteris 
paribus preference statements. In Proc. UAI-99, 1999. 

IBrewka et al, 2002]  G.  Brewka,  I.  Niemela,  and  T.  Syr-
janen. 
Implementing ordered disjunction using answer 
set solvers for normal programs.  In Proc. JELIA 2002. 
Springer Verlag, 2002. 

[Brewka, 2002]  G.  Brewka.  Logic  programming with  or(cid:173)
dered disjunction. In Proc. AAA1-02. Morgan Kaufmann, 
2002. 

[Eiitr et al, 1998]  T. Eiter, N. Leone, C. Mateis, G. Pfeifer, 
and F.  Scarcello.  The KR system dlv:  Progress report, 
In  Proc.  Principles  of 
comparisons  and  benchmarks. 
Knowledge Representation and Reasoning, KR-98. Mor(cid:173)
gan Kaufmann, 1998. 

[Gelfond and Lifschitz, 1991]  M. Gelfond and V. Lifschitz. 
Classical  negation  in  logic  programs  and  disjunctive 
databases. New Generation Computing, 9:365-385,1991. 
[Janhunen et al, 2000]  T. Janhunen, I. Niemela, P. Simons, 
and J.-H.  You.  Unfolding partiality and disjunctions in 
stable model semantics.  In Proc.  Principles of Knowl(cid:173)
edge Representation and Reasoning, KR-00, pages 411-
419. Morgan Kaufmann, 2000. 

[Lifschitz, 2002]  V. Lifschitz. Answer set programming and 
plan generation.  Artificial Intelligence Journal,  138(1-
2):39-54,2002. 

[Niemela and Simons, 1997] I. Niemela and P. Simons. Effi(cid:173)
cient implementation of the stable model and well-founded 
semantics for normal logic programs.  In Proc. 4th Intl. 
Conference on Ijogic Programming and Nonmonotonic 
Reasoning. Springer Verlag, 1997. 

[Sakama and Inoue, 20001  C. Sakama and K. Inoue.  Prior(cid:173)
itized logic programming and its application to common-
sense reasoning. Artificial Intelligence, 123( 1 -2): 185-222, 
2000. 

[Schaub and Wang, 2001]  T. Schaub and K. Wang.  A com(cid:173)
parative study of logic programs with preference. In Proc. 
IJCAI-01,2001. 

[Simons et al, 2002] P. Simons, 1. Niemela, and T. Soininen. 
Extending and implementing the stable model semantics. 
Artificial Intelligence, 138(1 -2): 181-234,2002. 

[Soininen, 2000] T. Soininen.  An Approach to Knowledge 

Representation and Reasoning for Product Configuration 
Tasks. PhD thesis, Helsinki University of Technology, Fin(cid:173)
land, 2000. 

872 

NONMONOTONIC  REASONING 

