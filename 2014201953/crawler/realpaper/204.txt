AND/OR Branch-and-Bound for Graphical Models

Radu Marinescu and Rina Dechter

School of Information and Computer Science
University of California, Irvine, CA 92697

{radum,dechter}@ics.uci.edu

Abstract

The paper presents and evaluates the power of a new
framework for optimization in graphical models,
based on AND/OR search spaces. The virtue of the
AND/OR representation of the search space is that
its size may be far smaller than that of a traditional
OR representation. We develop our work on Con-
straint Optimization Problems (COP) and introduce
a new generation of depth-ﬁrst Branch-and-Bound
algorithms that explore an AND/OR search space
and use static and dynamic mini-bucket heuristics
to guide the search. We focus on two optimiza-
tion problems, solving Weighted CSPs (WCSP) and
ﬁnding the Most Probable Explanation (MPE) in be-
lief networks. We show that the new AND/OR ap-
proach improves considerably over the classic OR
space, on a variety of benchmarks including ran-
dom and real-world problems. We also demonstrate
the impact of different lower bounding heuristics on
Branch-and-Bound exploring AND/OR spaces.

1 Introduction
Graphical models such as constraint networks and belief net-
works have become a powerful representation framework for
reasoning with deterministic and probabilistic information.
These models use graphs to capture conditional independen-
cies between variables, allowing a concise representation of
the knowledge as well as efﬁcient graph-based query process-
ing algorithms.

Optimization tasks such as ﬁnding the most likely state of a
belief network or ﬁnding a solution that violates the least num-
ber of constraints in a constraint network are all instances of
Constraint Optimization Problems (COP). They are typically
tackled with either search or inference algorithms. Search
methods (e.g. depth-ﬁrst Branch-and-Bound, best-ﬁrst search)
are time exponential in the number of variables and can oper-
ate in polynomial space. Inference algorithms (e.g. variable
elimination, tree-clustering) are time and space exponential in
a topological parameter called tree width.
If the tree width
is large, the high space complexity makes the latter methods
impractical.

In this paper we focus on search.

In contrast to in-
ference algorithms, search algorithms are less sensitive to

the graph-model structure because they traverse a structure-
blind search space. To overcome this problem the idea of
AND/OR search spaces was introduced in the past year, and
was shown to vividly display independencies encoded in the
underlying graphical model [Dechter and Mateescu, 2004]. In
this paper we develop AND/OR Branch-and-Bound (AOBB),
a general algorithm for solving COPs, which explores the
Its efﬁciency
AND/OR search tree in a depth-ﬁrst manner.
depends on its guiding heuristic functions.
In the past, a
class of partitioning-based heuristic functions, based on the
Mini-Bucket approximation and known as static mini-bucket
heuristics was shown to be powerful for optimization prob-
lems [Kask and Dechter, 2001]. We take the idea one step
further and introduce dynamic mini-bucket heuristics, which
are computed dynamically at each node of the search tree.
Both schemes are parameterized by the Mini-Bucket i-bound,
which allows for a controllable trade-off between preprocess-
ing and search.

We apply the AND/OR algorithms to two common opti-
mization problems: solving Weighted CSPs [Bistarelli et al.,
1997] and ﬁnding the Most Probable Explanation (MPE) in
belief networks [Pearl, 1988]. We experiment with both ran-
dom models and real-world benchmarks. Our results show
conclusively that the new AND/OR Branch-and-Bound algo-
rithms improve dramatically over traditional OR ones, espe-
cially when the heuristic estimates are inaccurate and the al-
gorithms rely primarily on search rather than on pruning.

2 Background
A ﬁnite Constraint Optimization Problem (COP) is a six-tuple
P = hX , D, F , ⊗, ⇓, Zi, where X = {X1, ..., Xn} is a set
of variables, D = {D1, ..., Dn} is a set of ﬁnite domains
and F = {f1, ..., fm} is a set of constraints. Constraints
can be either soft (cost functions) or hard (sets of allowed tu-
ples). Without loss of generality we assume that hard con-
straints are represented as (bi-valued) cost functions. Allowed
and forbidden tuples have cost 0 and ∞, respectively. The
scope of function fi, denoted scope(fi) ⊆ X , is the set of
arguments of fi. The operators ⊗ and ⇓ can be deﬁned us-
ing the semi-ring framework [Bistarelli et al., 1997], but in
this paper we assume that: ⊗ifi is a combination operator,
⊗ifi ∈ {Qi fi, Pi fi} and ⇓Y f is an elimination operator,
⇓Y f ∈ {maxS−Y f, minS−Y f }, where S is the scope of
function f and Y ⊆ X . The scope of ⇓Y f is Y .

An optimization task is deﬁned by g(Z) = ⇓Z ⊗m

i=1fi,
where Z ⊆ X . A global optimization is the task of ﬁnding
the best global cost, namely Z = ∅. For simplicity we will de-
velop our work assuming a COP instance with summation and
minimization as combination and elimination operators, and a
global cost function deﬁned by f (X ) = minX Pm

i=1 fi.

The primal graph of a COP instance has the variables X as
its nodes and an arc connects any two variables that appear in
the scope of the same function.

In practice, most complete COP solvers follow a depth-ﬁrst
Branch-and-Bound strategy which maintains an upper bound,
the best solution cost found so-far, and a lower bound on the
optimal extension of the current assignment. Value pruning
occurs as soon as the lower bound exceeds the upper bound.

3 AND/OR Search Spaces
The usual way to do search (i.e. OR search) is to instantiate
variables in turn, following a static/dynamic linear ordering.
This process deﬁnes a search tree (i.e. OR tree), whose nodes
represent states in the space of partial assignments.

One way to exploit the independencies encoded by the
graphical model is to introduce AND nodes into the search
space, which will decompose the problem into separate sub-
problems. In the past year, [Dechter and Mateescu, 2004] in-
troduced the concept of AND/OR search spaces for constraint
networks, belief networks, and for graphical models in gen-
eral. The AND/OR search space is deﬁned using a back-bone
pseudo-tree arrangement of the primal graph.

DEFINITION 1 (pseudo-tree) Given the primal graph G of a
COP instance P, a pseudo-tree is a rooted tree with the same
set of vertices as G and has the property that adjacent vertices
from G must be in the same branch of the rooted tree [Freuder
and Quinn, 1985].

DEFINITION 2 (AND/OR search tree) Given a COP in-
stance P, its primal graph G and a pseudo-tree T of G, the
associated AND/OR search tree ST (P) has alternating levels
of OR nodes and AND nodes. The OR nodes are labeled Xi
and correspond to the variables. The AND nodes are labeled
hXi, ai and correspond to value assignments in the domains
of the variables. The root of the AND/OR search tree is an OR
node, labeled with the root of T . The children of an OR node
Xi are AND nodes labeled with assignments hXi, ai, consis-
tent along the path from the root. The children of an AND node
hXi, ai are OR nodes labeled with the children of variable Xi
in T . The path of a node n ∈ ST , denoted P athST (n), is the
path from the the root of ST to n, and corresponds to a partial
value assignment to all variables along the path.

A solution subtree SolST of ST is an AND/OR subtree
such that:(i) it contains the root of ST ;(ii) if a nonterminal
AND node n ∈ ST is in SolST then all of its children are in
SolST ;(iii) if a nonterminal OR node n ∈ ST is in SolST then
exactly one of its children is in SolST .
Example 1 Consider the graphical model in Figure 1(a) (top)
describing a graph coloring problem over domains {0,1}. An
AND/OR search tree based on the pseudo-tree in Figure 1(a)
(bottom), and a highlighted solution subtree are given in Fig-

A

D

A

B

D

C

C

B

E

E

OR

F

AND

OR

AND

OR

A

1

0

B

0

1

E

C

AND

0

1

0

1

OR

AND

F

D

F

D

F

0

1 0 1 0 1 0 1

(a)

(b)

Figure 1: An AND/OR search tree.

ure 1(b). Observe that the AND node hB, 0i1 roots two inde-
pendent subproblems, one represented by variable {E}, and
the other by variables {C, D, F }.
THEOREM 1 ([Dechter and Mateescu, 2004]) Given a COP
instance P and a pseudo-tree T , its AND/OR search tree ST
is sound and complete (contains all and only solutions) and its
size is O(n·exp(m)), where m is the depth of the pseudo-tree.
Any search algorithm that traverses the AND/OR search
tree in a depth-ﬁrst manner is guaranteed to have a time com-
plexity exponential in the depth of the pseudo-tree and can op-
erate in linear space. In contrast, the time complexity of search
algorithms exploring traditional OR search trees is exponen-
tial in the number of variables. The arcs in ST are annotated
by appropriate labels of the cost functions. The nodes in ST
can be associated with a value, accumulating the result of the
computation resulted from the subtree below.
DEFINITION 3 (label) The label l(Xi, hXi, ai) of
the arc
from the OR node Xi to the AND node hXi, ai is deﬁned as
the sum of all the cost functions values for which variable Xi
is contained in their scope and whose scope is fully assigned
along P athST (hXi, ai).
DEFINITION 4 (value) The value v(n) of a node n ∈ ST , is
deﬁned recursively as follows: (i) if n = hXi, ai is a ter-
minal AND node then v(n) = l(Xi, hXi, ai); (ii) if n =
hXi, ai is an internal AND node then v(n) = l(Xi, hXi, ai)+
Pn′∈succ(n)v(n′); (iii) if n = Xi is an internal OR node then
v(n) = minn′∈succ(n)v(n′), where succ(n) are the children
of n in ST .

Clearly, the value of each node can be computed recur-

sively, from leaves to root. We can show that:
PROPOSITION 1 Given an AND/OR search tree ST of a COP
instance P = hX , D, F , +, mini, the value function v(n) is
the minimal cost solution to the subproblem rooted at n, sub-
ject to the current variable instantiation along the path from
root to n. If n is the root of ST , then v(n) is the minimal cost
solution to P.

Therefore, we can traverse the AND/OR search tree in a
depth-ﬁrst manner to compute the value of the root. This

1In the ﬁgure we only denote the value. hB, 0i is written as 0

child of B.

approach would require linear space, storing only the cur-
rent partial solution subtree. The algorithm expands alternat-
ing levels of OR and AND nodes, periodically evaluating the
value function of the nodes along the current path. It termi-
nates when the root node is evaluated with the optimal cost.

4 AND/OR Branch and Bound
If each node n at the search frontier is assigned a heuristic
lower-bound estimate h(n) of v(n), then we can calculate the
most promising extension of the current partial solution sub-
tree and prune the portion of the search space that becomes
irrelevant, as part of a Branch-and-Bound scheme. We call
h(n) a static heuristic function.
4.1 Lower Bounds on Partial Solution Trees
At any stage of the search, the current partial solution is a
partial solution subtree, denoted PST . By the nature of the
search process, PST must be connected, must contain the
root node and will have a frontier containing all those nodes
that were generated but not yet expanded. The leaves of PST
are called tip nodes. In this section we will deﬁne a dynamic
heuristic function of a node n relative to the current PST ,
which yields a more accurate lower bound on v(n) than h(n).
For that we introduce the notions of active path, its inside and
outside contexts and the active partial subtree.
DEFINITION 5 Given the current PST ,
the active path
AP(t) is the path of assignments from the root of PST to
the current tip node t. The inside context in(AP) of AP(t)
contains all nodes that were fully evaluated and are children
of nodes on AP(t). The outside context out(AP) of AP(t),
contains all nodes that were generated but not yet expanded
and are children of the nodes on AP(t). The active partial
subtree APT (n) rooted at a node n ∈ AP(t) contains the
sub-path between n and t, and all OR children of the AND
nodes on it.

For illustration consider the partial solution subtree in Fig-
ure 2(b) based on the pseudo-tree in Figure 2(a). The active
path AP(t) has tip node t = hE, 1i, namely it is (A = 1, B =
1, E = 1). The shaded nodes at the left of AP(t) are in
in(AP) and their corresponding subtrees have already been
explored. out(AP) includes the nodes {C, F }, which are also
in the search frontier. The active partial subtree APT (B) is
highlighted. It contains the nodes {B, hB, 1i, E, hE, 1i} on
AP(t), the OR node D from in(AP) and the OR node F
from out(AP).
DEFINITION 6 (dynamic lower bound) Given an active par-
tial tree APT (n), the dynamic heuristic evaluation function
of n, fh(n), is deﬁned recursively as follows: (i) if APT (n)
consists only of a single node n, and if n ∈ in(AP) then
fh(n) = v(n) else fh(n) = h(n); (ii) if n = hXi, ai is
an AND node, having OR children m1, ..., mk then fh(n) =
max(h(n), l(Xi, hXi, ai) + Pk
i=1 fh(mi)); (iii) if n = Xi
is an OR node, having an AND child m, then fh(n) =
max(h(n), fh(m)).

We can prove that fh(n) is a lower bound on the optimal
solution cost to the subproblem rooted at n, namely fh(n) ≤
v(n), and also by deﬁnition fh(n) ≥ h(n), indicating that the
dynamic lower bound is superior to the static one.

A

0

B

C

B

0

E

D

F

D

1

1

E

C

F

0

1

0

1

H K

(b)

A

F

C

G

B

E

D

H

K

L
(a)

Figure 2: A partial solution subtree.

Example 2 For the active partial subtree rooted at B in Fig-
ure 2(b), the lower bound fh(B) on v(B) is computed recur-
sively as follows: fh(B) = max(h(B), fh(hB, 1i)), where
fh(hB, 1i) = max(h(hB, 1i), l(B, hB, 1i)+v(D)+fh(E)+
h(F )).
Similarly, fh(E) = max(h(E), fh(hE, 1i)) =
max(h(E), h(hE, 1i)), since fh(hE, 1i) = h(hE, 1i).

4.2 The Branch-and-Bound Procedure
In the AND/OR search space, we can calculate a lower bound
on v(n) of a node n on the active path, by using fh(n). In
addition, we can compute an upper bound on v(n), based on
the portion of the search space below n that has already been
explored. The upper bound ub(n) on v(n) is the current min-
imum cost solution subtree of the subproblem rooted at n.

In Figure 2(b), the upper bound on v(B) is ub(B) =
min(∞, v(hB, 0i)) = v(hB, 0i), and it represents the cur-
rent best cost solution rooted at B. The lower bound fh(B)
on v(B) is calculated as seen in the previous example.
If
fh(B) ≥ ub(B), then searching below t = hE, 1i of the ac-
tive path is guaranteed not to reduce ub(B) and therefore, the
subtree rooted at hE, 1i can be pruned.

PROPOSITION 2 (pruning rule) Given
AP(t) of a current PST ,
fh(n) ≥ ub(n) then pruning the subtree below t is safe.

for any node n on AP(t),

path
if

the

active

A depth-ﬁrst AND/OR Branch-and-Bound (AOBB) algo-
rithm that implements this pruning rule is described in Fig-
ure 3. A list called OPEN simulates the recursion stack. The
list PATH maintains the current assignment (i.e.
the active
path). P arent(n) refers to the predecessor of n in PATH,
which is also the parent in the AND/OR tree, succ denotes the
set of successors of a node in the AND/OR tree and chT (Xi)
denotes the children of variable Xi in T . Procedure LB(n)
computes the static heuristic estimate h(n) of v(n).

Step (3) is where the search goes forward and expands alter-
nating levels of OR and AND nodes. Upon the expansion of n,
the algorithm successively updates the lower bound function
fh(m) for every ancestor m of n along the active path, and
discontinues search below n if, for some m, fh(m) ≥ ub(m).
Step (4) is where the value functions are propagated back-
ward. This is triggered when a node has an empty set of suc-
cessors and it typically happens when the node’s descendants
are all evaluated or when it is a dead-end. Clearly,

THEOREM 2 AOBB is sound and complete for COP.

ALGORITHM: AOBB(P, T )
Input: A COP P = (X , D, F , +, min), pseudo-tree T , root X0.
Output: Minimal cost solution to P.
(1)
(2)

Initialize OPEN by adding OR node X0 to it; PATH ← φ;
if (OPEN == φ)

return v(X0);

Remove the ﬁrst node n in OPEN; Add n to PATH;
Try to prune the subtree below n:
foreach m ∈ P AT H, where m is an ancestor of n

if (fh(m) ≥ ub(m))

v(n) ← ∞; (dead-end)
goto step (4);

Expand n generating all its successors as follows:
succ(n) ← φ;
if (n is OR node, denote n = Xi)

v(n) ← ∞;
foreach value a ∈ Di

h(hXi, ai) ← LB(Xi , a);
succ(n) ← succ(n) ∪ {hXi, ai};

else (n is AND node, denote n = hXi, ai)

A ← {cj | (Xi ∈ var(cj )) ∧ (var(cj) ⊆ PATH )};
v(n) ← 0; l(Xi, hXi, ai) ← PA
foreach variable Y ∈ chT (Xi)

cj ;

h(Y ) ← LB(Y );
succ(n) ← {Y };

Add succ(n) on top of OPEN;
while succ(n) == φ
if (n is OR node)

v(P arent(n)) ← v(P arent(n)) + v(n);

else (n is AND node)

v(n) ← v(n) + l(Xi , hXi, ai);
v(P arent(n)) ← min(v(P arent(n)), v(n));

succ(P arent(n)) ← succ(P arent(n)) − {n};
PATH ← PATH – {n};
n ← Last(PATH);

goto step (2);

(3)

(4)

(5)

Figure 3: AND/OR Branch-and-Bound search (AOBB).

While the time complexity of algorithm AOBB is bounded
by O(n · exp(m)), the size of the AND/OR search space, the
pruning rule is designed to yield a far better complexity.

5 Speciﬁc Lower Bound Heuristics
In this section we describe brieﬂy two general schemes for
generating static heuristic estimates h(n), based on the Mini-
Bucket approximation. These schemes are parameterized by
the Mini-Bucket i-bound, thus allowing for a controllable
trade-off between heuristic strength and its overhead. We also
mention a third scheme which is based on the notion of direc-
tional arc-consistency and is speciﬁc to the WCSP model.

5.1 The Mini-Bucket Heuristics
Mini-Bucket Elimination (MBE) [Dechter and Rish, 2003] is
an approximation algorithm designed to avoid the high time
and space complexity of Bucket Elimination (BE) [Dechter,
1999], by partitioning large buckets into smaller subsets,
called mini buckets, each containing at most i (called i-bound)
distinct variables. The mini-buckets are then processed sepa-
rately. The algorithm outputs not only a bound on the optimal
solution cost, but also the collection of augmented buckets,
which form the basis for the heuristics generated. The com-
plexity is time and space O(exp(i)).

Static Mini-Bucket Heuristics In the past, [Kask and
Dechter, 2001] showed that the intermediate functions gen-
erated by the Mini-Bucket algorithm MBE(i) can be used to
compute a heuristic function, that underestimates the minimal
extension of the current assignment in a regular OR search

B(F):

[f(F,A)], [f(F,C)]

B(D):

[f(D,B)], [f(D,C)]

E

A

B

D

(a)

C

F

B(C):

B(E):

B(B):

B(A):

(b)

[f(E,B)], [f(E,A)]

[f(C,A)], [f(C,B) ||   D(C),   F(C)]
[f(B,A) ||   E(B),   C(B),   E(B)]
[ ||   E(A),   F(A),   C(A),   B(A)]

Figure 4: Schematic execution of MBE(2).

tree.
In this paper we extend the idea to AND/OR search
spaces as well. For that, assume that a COP instance P with
pseudo-tree T is being solved by AOBB search, where the
active path ends with some OR node Xj. Consider also the
augmented bucket structure {B(X1), ..., B(Xn)} of P, con-
structed along the ordering resulted from a DFS traversal of T .
For each possible value assignment Xj = xj, the static mini-
bucket heuristic estimate h(xj ) of the minimal cost solution
rooted at Xj can be computed as the sum of the original func-
tions in bucket B(Xj) and the intermediate functions λk that
were generated in buckets B(Xk), where Xk is a descendant
of Xj in T (more details in [Kask and Dechter, 2001]).

Dynamic Mini-Bucket Heuristics This idea can be pushed
one step further. Rather than pre-compiling the mini-bucket
heuristic information, it is possible to generate it dynamically,
during search. Therefore, the dynamic mini-bucket heuris-
tic computes a lower bound by the Mini-Bucket algorithm
MBE(i), at each node n in the search space, restricted to the
subproblem rooted at n and subject to the current partial in-
stantiation. Speciﬁcally, h(xj) is calculated as the sum of the
original and λk functions residing in bucket B(Xj), where
λk’s are computed in buckets B(Xk) of Xj’s descendants in
T , conditioned on the current assignment of the active path.
Example 3 Figure 4(b) shows the augmented bucket struc-
ture generated by MBE(i=2) for the binary COP instance dis-
played in Figure 4(a), along the ordering (A, B, E, C, D, F );
square brackets denote the choice of partitioning. Assume that
during search, the active path of the current partial solution
subtree is (A = a, B = b) and the tip node is the OR node
C. The static mini-bucket heuristic estimate h(C = c) =
f (c, a) + f (c, b) + λF (a) + λF (c) + λD(c) + λD(b). The dy-
namic mini-bucket heuristic estimate h(C = c), involves the
same λ functions generated in buckets B(F ) and B(D), only
that the λ’s are now computed dynamically, conditioned on
the current partial assignment (A = a, B = b).

5.2 Directional Arc-Consistency Heuristics
We also adapted for the AND/OR search space two other suc-
cessful heuristics generators, reversible DAC counts (RDAC)
[Meseguer et al., 1999] and maintaining full DAC (MFDAC)
[Larrosa and Schiex, 2003], which proved powerful for solv-
ing binary Weighted CSPs (details omitted for space reasons).

6 Experiments
In this section we evaluate empirically the performance of our
new AND/OR Branch-and-Bound approach on two classes of

Network
(n,d,c,t)
[w*,h]

connectivity

(20,5,100,0.7)

[12,15]
medium

(30,5,90,0.7)

[11,16]

low

(50,5,80,0.7)

[8,16]
sparse

s-AOMB
s-BBMB
d-AOMB
d-BBMB

i=2

s-AOMB
s-BBMB
d-AOMB
d-BBMB

i=4

s-AOMB
s-BBMB
d-AOMB
d-BBMB

i=6

s-AOMB
s-BBMB
d-AOMB
d-BBMB

i=8

AORDAC
BBRDAC
AOMFDAC
BBMFDAC

time

time

751

time

nodes

-
-

-
-

-

nodes

nodes
time
2.4M 115.57 2.5M 15.49 408K 6.91
6.3M 179.34 7.6M 127.77 6.5M 45.76
6.9K 104.08
74.43
90K 51.19
169.30
34K 140.10 3.3K 176.33
124.45 523K 80.79
262K 2.71
2.8M 105.77 2.2M 9.84
3.3M 5.64
6M 180.00 7.5M 68.90
548
94.95
4.3K 63.07
72.94
82K 31.85
1.7K 123.42
22K 90.70
104.15 348K 69.49
0.12
1.4M 1.80
2.6K 0.62
67.53
57K
5M 145.39 4.3M 24.47 804K 1.58
2.31
18.6K 1.17
295K 1.83
2.34

7.91
63.50

0.95
0.94

87
112

430
1K

nodes
nodes
time
441K
126K 21.70
1.3M
2.2M 24.74
20K
9.99
101
21.3K
537
8.75
1.3M
28K 78.50
4.2M
230K 78.24
10.72 22.2K
111
31.4K
8.79
265
356
28.90
691K
36K 155.58 3.9M
8.5K
60
69
14K

1.48
1.49

Table 1: Results on random binary WCSP instances.

optimization problems: Weighted CSP (WCSP) and the Most
Probable Explanation (MPE) problem in belief networks2.

Weighted CSP [Bistarelli et al., 1997; Larrosa and Schiex,
2003] extends the classic CSP formalism with so-called soft
constraints which assign positive integer costs to forbidden
tuples (allowed tuples have cost 0). The goal is to ﬁnd a com-
plete assignment with minimum aggregated cost. The model
has numerous applications in domains such as resource allo-
cation, combinatorial auctions or bioinformatics.

Belief Networks [Pearl, 1988] provide a formalism for rea-
soning under conditions of uncertainty. A belief network rep-
resents a joint probability distribution over the variables of
interest. A function of the graphical model encodes condi-
tional probability distribution of a variable given its parents in
the graph (also viewed as a cost function were each tuple has
associated a real cost between 0 and 1). The MPE problem
is the task of ﬁnding a complete assignment with maximum
probability that is consistent with the evidence. It appears in
applications such as speech recognition or medical diagnosis.
The pseudo-tree was created as suggested in [Bayardo and
Miranker, 1995], by a DFS traversal of the induced graph. The
latter was computed using the min-ﬁll heuristic. All competing
algorithms were restricted to a static variable ordering resulted
from a DFS traversal of the pseudo-tree. We report the average
effort, as CPU time (in seconds) and number of visited nodes
(AND nodes only for the AND/OR algorithms), required for
proving optimality of the solution. For all test instances we
record the number of variables (n), domain size (d), number
of functions (c), induced width (w*) and height of the pseudo-
tree (h). A ”-” indicates that a time limit was exceeded by the
respective algorithm. The best results are highlighted.

6.1 Weighted CSP
For this domain we experimented with random binary WCSP
problems as well as real-world benchmarks. We consider
four classes of AND/OR Branch-and-Bound (AOBB) algo-
rithms, each using a speciﬁc heuristics generator, as follows.
Classes s-AOMB/d-AOMB are guided by static/dynamic
mini-bucket heuristics, AORDAC uses RDAC based heuris-
tics, and AOMFDAC maintains full DAC. For comparison,
we include results obtained with the classic OR version of

2All our experiments were done on a 2.4GHz Pentium IV with

1GB of RAM, running Windows XP

Network

(n,d,c,w*,h)

BBMFDAC

AOMFDAC

(16,44,57,7,10)
CELAR6-SUB0
CELAR6-SUB1
(14,44,75,9,11)
CELAR6-SUB2 (16,44,89,10,13)
19,544,182
CELAR6-SUB3 (18,44,106,10,13) 38889.20 91,168,896
CELAR6-SUB4 (22,44,131,11,16) 84478.40
6,955,039

2420.93
8801.12

2.78

time (sec)

nodes
1,871
364,986

time (sec)

nodes
435

1.98
981.98
180,784
1138.87
175,377
4028.59
846,986
47115.40 4,643,229

Table 2: Results on CELAR6 subinstances.

each class of algorithms, denoted here by s-BBMB, d-BBMB,
BBRDAC and BBMFDAC, respectively.

Random Binary Networks
Our random binary WCSP class is characterized by a ﬁve
parameter model hn, d, c, t, wi [Larrosa and Schiex, 2003],
where n is the number of variables, d the domain size, c the
number of constraints, and t the constraint tightness deﬁned as
the ratio of forbidden tuples. The costs of inconsistent tuples
are uniformly randomly distributed between 1 and w.

Table 1 shows results for experiments with three problem
classes containing instances with medium, low and very low
connectivity. We chose a maximum penalty cost w of 10 and
set the constraint tightness to 70% in order to obtain over-
constrained problems. For each problem class we generated
20 instances and the time limit was set to 180 seconds. The
columns are indexed by the i-bound of the mini-bucket heuris-
tics. When comparing AND/OR versus OR algorithms we
notice a considerable improvement in terms of CPU time and
number of nodes visited, especially for problems with low and
very low connectivity. This observation veriﬁes the theory be-
cause a relatively sparse problem is likely to produce a shal-
low pseudo-tree, which in turn enhances the performance of
the AND/OR algorithms. In terms of the quality of the heuris-
tics, we also observe that the static mini-buckets with a rel-
atively large i-bound represent the best choice. However, if
large i-bounds are not possible, dynamic mini-buckets with
small i-bounds are preferred, especially for sparse problems.
For medium and low connected problems, MFDAC proves to
be cost effective with respect to the other heuristics generators.

Radio Link Frequency Assignment Problem (RLFAP)
RLFAP is a communication problem where the goal is to as-
sign frequencies to a set of radio links in such a way that all
links may operate together without noticeable interferences
[Cabon et al., 1999]. It can be naturally casted as a binary
WCSP where each forbidden tuple has an associated penalty
cost. Table 2 compares algorithms BBMFDAC and AOMF-
DAC for solving 5 publicly available RLFAP subinstances
called CELAR6-SUBi (i = 0, ..., 4). We can see that the
AND/OR approach is beneﬁcial for this domain as well. In
CELAR6-SUB4, the hardest instance, AOMFDAC causes a
CPU speed up of 1.8, whereas in CELAR6-SUB3 the speed
up is as much as 9.6. We also compared AOMFDAC against
BTD, a recent algorithm introduced in [Jegou and Terrioux,
2004]. BTD solves the MAX-CSP version of CELAR6-SUB4
(i.e. 0/1 penalty costs) in about 123,000 sec., whereas AOMF-
DAC proves optimality in only 2,574 sec. The performance of
the mini-bucket based algorithms was quite poor on this do-
main, due to the very low quality of the heuristic estimates
resulted from approximating subproblems with very large do-
mains (up to 44 values).

Network
(n,d,w*,h)

Mildew

(35,100,4,15)

Barley

(48,67,7,17)

Munin1

57.36

(189,21,11,24)

-

66.56 185K 12.47

Munin2

(1003,21,7,35)

Munin3

(1044,21,7,25)

Pigs

(441,3,10,27)

-
-
-
-
-
-
-
-
-
-
-
-

-
-
-
-
-
-
-

405K
5.6M
1.7M
3.2M
33K
5.9M
1.4M
2.4M 68.64
33K
15M 0.02
2.8M 0.63
6.5M 0.08
2.2M 1.03

-

s-AOMB
s-BBMB
d-AOMB
d-BBMB

i=2

s-AOMB
s-BBMB
d-AOMB
d-BBMB

i=3

s-AOMB
s-BBMB
d-AOMB
d-BBMB

i=4

s-AOMB
s-BBMB
d-AOMB
d-BBMB

i=5

time
4.58

time
0.50

nodes
5,465

time
nodes
0.28
55K
26M 233.86 6.9M 0.47
1.69
86.38
15K 34.45 1,424
162.61 83K 41.92 5,113
1.78

-

-
-
-
-

-

-
-

8.5M
16M
79K 135.97 23K 12.55
2.2M
1.2M 12.08 260K 7.20
8.5M

-

-

nodes

35

time nodes
0.66

35

4,970 0.81 4,940

-

-

-

-

45.95

35
363

17M
667
1K 346.08 76K

3.02
3.13
7.6M 46.22 807K 0.56
18M

35
363
9.6K
14M
567
86K
172K 1.66
43K
8.3K
9.9M -
9.2M
523
1.6K 11.99
8.1K 10.30
917
430K
235K 14.63
6.7M 116.19 1.8M 1.64
21K
2.7M
428K
1.2M 524.54 299K 39.22 3.8K
20K
131K
6.2K
4.9M 1.31
1.5M
1.2M
3.8K
58K
125K
31K
0.02
441
441
4K
4.2K 0.63
441
0.08
441
614
1.08
614

101K
17K 0.45
316K
5.9K 2.84
52K
441
4K
441
614

0.02
0.61
0.11
1.11

430K

3.59

-

-

-

-

-

-

-

-

Table 3: Results on Bayesian Network Repository.

6.2 Belief Networks
For the MPE domain we also experimented with random net-
works and real-world benchmarks, but we only report on the
latter due to space limitations. We compare the algorithms
using the mini-bucket based heuristics generators, namely s-
AOMB, d-AOMB, s-BBMB and d-BBMB. Notice that s-
BBMB is currently one of the best performing complete al-
gorithms for this domain [Kask and Dechter, 2001]

Table 3 summarizes the results for experiments on 6 real-
world belief networks from the Bayesian Network Reposi-
tory3. The time limit was set to 600 seconds. We observe
again a considerable improvement of the new AND/OR al-
gorithms over the corresponding OR ones.
If we look, for
example, at the Mildew instance, s-AOMB(3) causes a CPU
speedup of 468 over s-BBMB(3). In conclusion, d-AOMB is
superior for relatively small i-bounds (e.g. Barley, Munin3),
whereas s-AOMB dominates for larger i-bounds.

7 Conclusion
The paper investigates the impact of the AND/OR search
space for graphical models on optimization tasks. We in-
troduce a general AND/OR Branch-and-Bound algorithm and
specialize it with several schemes for generating heuristic es-
timates that can guide the search. We focus on two common
optimization problems, WCSP and Bayesian MPE, and show
empirically that the new AND/OR algorithms improve dra-
matically over traditional OR ones on a variety of benchmarks
including random and real-world problems.

Our approach leaves room for future improvements. For
instance, it can be modiﬁed to traverse an AND/OR graph,
rather than a tree, via caching. We should consider the effect
of dynamic variable ordering. Also, we used a rather sim-
ple scheme of generating pseudo-tree arrangements, probably
having non-optimal height.

3http://www.cs.huji.ac.il/labs/compbio/Repository

Related Work: AOBB is related to the Branch-and-Bound
method proposed by [Kanal and Kumar, 1988] for acyclic
AND/OR graphs and game trees. More recently, [Larrosa et
al., 2002] extended pseudo-tree search [Freuder and Quinn,
1985] to optimization tasks in order to boost the Russian Doll
search for solving Weighted CSPs. The optimization method
developed in [Jegou and Terrioux, 2004] can also be inter-
preted as an AND/OR search graph algorithm, however it is
not a linear space algorithm.

Acknowledgments
This work was supported in part by the NSF grant IIS-
0412854 and the MURI ONR award N00014-00-1-0617.

References
[Bayardo and Miranker, 1995] R. Bayardo and D. Miranker.
On the space-time trade-off in solving constraint satisfac-
tion problems. Proc. of IJCAI’95, 1995.

[Bistarelli et al., 1997] S. Bistarelli, U. Montanari,

and
F. Rossi. Semiring based constraint solving and optimiza-
tion. Journal of ACM, 44(2):309–315, 1997.

[Cabon et al., 1999] B. Cabon, S. de Givry, L. Lobjois,
T. Schiex, and J. Warners. Radio link frequency assign-
ment. Constraints, (4):79–89, 1999.

[Dechter and Mateescu, 2004] R. Dechter and R. Mateescu.
Mixtures of deterministic-probabilistic networks. Proc. of
UAI’04, 2004.

[Dechter and Rish, 2003] R. Dechter and I. Rish. Mini-
buckets: A general scheme for approximating inference.
Journal of ACM, 2003.

[Dechter, 1999] R. Dechter. Bucket elimination: A unifying
framework for reasoning. Artiﬁcial Intelligence, 113:41–
85, 1999.

[Freuder and Quinn, 1985] E. Freuder and M. Quinn. Taking
advantage of stable sets of variables in constraint satisfac-
tion problems. Proc. of IJCAI’85, 1985.

[Jegou and Terrioux, 2004] P. Jegou and C. Terrioux. Decom-
position and good recording for solving max-csps. Proc. of
ECAI’04, 2004.

[Kanal and Kumar, 1988] L. Kanal and V. Kumar. Search in

artiﬁcial intelligence. Springer-Verlag., 1988.

[Kask and Dechter, 2001] K. Kask and R. Dechter. A general
scheme for automatic generation of search heuristics from
speciﬁcation dependencies. Artiﬁcial Intelligence, 2001.

[Larrosa and Schiex, 2003] J. Larrosa and T. Schiex. In the
quest of the best form of local consistency for weighted
csp. Proc. of IJCAI’03, pages 631–637, 2003.

[Larrosa et al., 2002] J.

M. Sanchez.
Proc. of ECAI’02, 2002.

and
Pseudo-tree search with soft constraints.

P. Meseguer,

Larrosa,

[Meseguer et al., 1999] P. Meseguer,

and
T. Schiex. Maintaining reversible dac for max-csp.
Artiﬁcial Intelligence, 107(1):149–163, 1999.

J. Larrosa,

[Pearl, 1988] J. Pearl. Probabilistic Reasoning in Intelligent

Systems. Morgan-Kaufmann, 1988.

