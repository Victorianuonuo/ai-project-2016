Session  3  Theorem  Proving  and 
Logic; 

I 

A  SEMANTICALLY  GUIDED  DEDUCTIVE  SYSTEM 

FOR  AUTOMATIC  THEOREM-PROVING 

by 

Raymond  Reiter 

Department  of  Computer  Science 
University  of  B r i t i sh  Columbia 

Vancouver,  B.C.,  Canada 

Abstract 

I ts  semantic  component  r e l i es  on  an  under(cid:173)

This  paper  presents  a  semantic  and  deductive  f o r(cid:173)
mal  system  for  automatic  theorem-proving.  The  system 
has,  as  i ts  deductive  component,  a  form  of  natural  de(cid:173)
duction. 
lying  representation  of  a  model.  This  model  is  invoked 
to  prune  subgoals  generated  by  the  deductive  component, 
whenever  such  subgoals 
is  used  to  suggest  inferences 
addition, 
be  made  at  the  deductive  l e v e l.  Conversely,  the 
current  state  of  the  proof  suggests  changes 
to  the  model,  e.g.  when  a  construction  is  required  as 
in  geometry. 

test  false  in  the  model. 

to  be  made 

the  model 

In 

to 

The  system  is  seen  to  possess  a  very  smooth  and 

transparent  interface  between  i ts  semantics  and  ded(cid:173)
uctive  syntax.  These  semantic  and  syntactic  subsys(cid:173)
tems  interact  continuously  during  the  search  for  a 
proof,  each  suggesting  to  the  other  how  next  to  pro(cid:173)
ceed.  P a r t i c u l a r ly  appealing  is  the  naturalness  of 
the  system  from  a  human  point  of  view. 

1. 

Introduction 
The  past  dozen  years  or  so  have  witnessed  a  great 
deal  of  programming  energy  devoted  to  mechanizing  f i r st 
order  l o g i c.  Several  proof  procedures  have  been  pro(cid:173)
posed  and  implemented  with  varying  degrees  of  success. 
Among  these  are  systems  of  natural  deduction1 3,  Her-
brand  search  procedures4,  and  r e s o l u t i o n1 1. 

that 

these  proof  pro(cid:173)

It  quickly  became  apparent 

to  develop  completeness  pre(cid:173)

these  are  suitably  r e s t r i c t ed  rules,  often 

cedures  alone  were  impractical  on  any  i n t e r e s t i ng 
mathematical  theory.  One  approach  toward  a l l e v i a t i ng 
these  d i f f i c u l t i es  was 
serving  refinements  of  the  rules  of  inference.  Essen(cid:173)
t i a l l y, 
depending  upon  the  syntactic  structure  of  the  formulae, 
which  generate  a  narrower  (hut  usually  deeper)  search 
t r e e.  V i r t u a l ly  a ll  of  the  results  obtained  along 
these  lines  are  for  resolution  systems.  Examples  are 
resolution  with  merging1, 
linear  r e s o l u t i o n ',  A-order-
ing12  e t c.  plus  a  whole  host  of  combined  strategies. 
Experimental  evidence14 
indicates  that  this  approach 
alone  f a i ls  on  even  mildly  serious  theorems. 

V i r t u a l ly  everyone  is  now  agreed 

that  knowledge 
about  the  problem  domain  must  be  used  in  the  l o g i c. 
The  question  is  how.  There  seem  to  be  two  approaches. 

1.1  Semantics  as  Domain  Dependent  Heuristics 
In  t h is  approach  semantic  Information  is  embedded, 

for  t h e ir  e f f e c t,  upon  the  syntactic 

in  the  l o g i c,  as  suitable  domain  dependent  heuristics 
which  depend, 
form  of  the  current  formulae  and  which  therefore  act 
l i ke  new  rules  of  inference.  No  representation  of  the 
problem  domain  i t s e lf  is  present.  Semantics  is  con(cid:173)
veyed  through  some  fixed  set  of  h e u r i s t ic  procedures 
representing  that  knowledge  of  the  problem  domain 
which  is  believed  to  be  s i g n i f i c a nt 
in  guiding  the 
search  for  proofs.  This  semantic  Information  is  i n(cid:173)

41 

corporated  i n to  the  system  by  augmenting  i ts  purely 
syntactic  rules  -  the 
syntax-driven. 

theorem-prover  continues 

to  be 

Examples  of  this  approach  may  be  found  for 

,  set  theory2,  and  equality9. 

analysis 
It  is  reason(cid:173)
ably  clear 
that  such  domain  dependent  heuristics  w i ll 
be  essential  components  of  any  theorem-prover  capable 
of  doing  real  mathematics.  For  example,  a  number 
theorist  w i ll  require  procedures 
and  formula  manipulation.  We  shall  argue  that  much 
more  than  t h is  Is  required. 

for  solving  equations 

One  d i f f i c u l ty  with  t h is  approach  is 

the  need  to 
a n t i c i p a t e,  at  the  coding  stage,  all.  of  that  knowledge 
about  the  problem  domain  which  could  be  of  assistance 
in  discovering  proofs.  This  knowledge  is 
in  the  logic  in  the  form  of  suitable  heuristics  which 
govern  the  generation  of  successor  nodes  in  the  proof 
tree.  Unfortunately,  such  heuristics  are  rarely  i n(cid:173)
dependent,  but  interact  in  highly  complex  ways. 
I f, 
l a t e r,  some  new  heuristic  is  discovered, 
to  a  major  overhaul  of  the  program.  There  i s,  under 
this  approach,  a  very  real  danger  of  an  o v e r p r o l i f e r-
ation  of  special,  mutually  interacting  heuristics  with 
an  attendant  loss  of  system  e x t e n s i b i l i t y. 

t h is  can  lead 

then  embedded 

It  can  also  be  argued  that  domain  dependent 

the  proof 

they  affect 

heuristics  capture  a  weak  notion  of  semantics  in  the 
sense  that 
tree  only  under  c e r t(cid:173)
ain  prespecified  conditions. 
Insofar  as  a  formula 
enters  into  such  a  condition  it  may  he  said  to  have 
meaning  so  that  the.  corresponding  heuristic  decision 
has  a  semantic  basis.  But  there  is  no  concept  of  the 
meaning  of  an  a r b i t r a ry  formula,  and  hence  no  provision 
for  decisions  based  upon  general  semantic  considera(cid:173)
t i o n s. 
if  a  node  of  the  proof  tree 
has  no  associated  h e u r i s t i c,  no  semantic  decision  can 
be  made  about  i ts  most  plausible  successors. 

In  p a r t i c u l ar  then, 

the  proof 

inference  leads 

there  is  no  provision  for  using  knowledge  about 

Worse  s t i ll  is  the  lack  of  any  kind  of  reasonable 
If  the  application  of 

control  over  dead-end  searches. 
an  heuristic  or  rule  of 
astray, 
the  problem  domain  to  detect  t h i s.  Those  techniques 
which  are  currently  used,  such  as  setting  parameters 
for  maximal  clause  length  or  depth  of  function-nesting 
are  c l e a r ly  ad  hoc,  and  independent  of  the  domain. 
This  d i f f i c u l ty  with  blind  alleys 
presence  of  a  large  number  of  axioms  and  theorems 
which  might  be  i r r e l e v e nt  to  the  proof  being  sought. 
Such  formulae  are  guaranteed  to  lead  to  dead-end 
searches.  There  is  no  way  that  a  serious  theorem-
proving  system  can  avoid  having  to  deal  with  this 
s i t u a t i o n.  To  our  knowledge,  no  current  theorem-
prover,  a ll  of  which  are  based  on  refinements  and/or 
domain  dependent  h e u r i s t i c s, 
t h is  problem. 

Is  capable  of  coping  with 

is  compounded  in  the 

1.2  Semantics  as  the  Representation  of  Models 
the  following: 
The  main  thrust  of  t h is  paper  is 
Instead  of  relying  exclusively  upon  domain  dependent 
heuristics  which  represent  f i x e d,  a.  p r i o ri  knowledge 
about  the  problem  domain,  represent  the  problem  domain 
i t s e l f, 
i . e.  present  to  the  theorem-prover  a  model  of 
the  axiomatic  system  involved. 
In  a d d i t i o n,  what  is 
needed  is  a  set  of  procedures  for  extracting  informa(cid:173)
t i on  about 
prover, 
between  such  a  semantic  subsystem  and  the  purely  syn(cid:173)
t a c t ic 

the  model  when  required  by  the  theorem-
together  with  a  f l e x i b l e,  general  interface 

l o g i c al  system. 
The  d i s t i n c t i o n, 

l a t t er  e x p l i c i t ly  represents 

therefore,  between  t h is  approach 
and  that  based  on  domain  dependent  heuristics  is  that 
the 
inform-
ation  which  is  believed  a  p r i o ri  to  be  relevant,  where-
as  the  former  i m p l i c i t ly  represents  a ll  of  the  inform-
ation  available  in  the  model  which  is  capable  of  being 
extracted  by  the  available  procedures. 

that  semantic 

The  idea  of  using  models  for  theorem-proving  is 

In  the  l a te  1950's  Gelernter  and  his 

by  no  means  new. 
co-workers5,6  developed  a  system  f or  plane  geometry 
whose  success  was  due  p r i m a r i ly  to  i ts  use  of  geometric 
diagrams.  Despite  this  early  success  the  use  of 
models  has  not  been  widely  adopted  in  theorem-proving 
c i r c l e s,  w i th  the  sole  exception  of  work  by  Slagle12  in 
the  context  of  r e s o l u t i o n. 

The  present  paper  represents  a  generalization  of 
the  work  of  Gelernter.  The  r e s u l t i ng  system  has,  as  a 
deductive  component,  a  form  of  natural  deduction  as 
opposed  to  r e s o l u t i o n. 
I ts  underlying  semantic  sub(cid:173)
system  r e l i es  upon  some  representation  of  a  model,  and 
is  invoked  to  prune  dead-end  searches,  and  to  make 
inferences  at  the  deductive  l e v e l.  The  deductive  level 
in  t u r n, 
model,  as  the  proof  unfolds. 
naturalness, 
over  the  search  for  a  proof. 

is  used  to  dynamically  modify  the  underlying 

the  system  provides  considerable  control 

In  addition  to  i ts 

42 

t h is  paper,  we  shall  hold  to  the  d e f i n i t i on  of  model 
given  above.  For  a  more  complete  discussion  of  these 
problems,  see  reference  10.  Notice,  however, 
that  the 
formal  system  L  of  Section  3  is  not  dependent  on  any 
p a r t i c u l ar  d e f i n i t i on  of  a  model,  although  of  course  a 
more  general  notion  of  semantics  w i ll  yield  a  corres(cid:173)
pondingly  more  powerful  system. 

3.1  Remarks 
1.  The  purely  syntactic  rules  of  the  system  L  have 

In  f a c t, 

it 

been  patterned  after  a  similar  deductive  system  due  to 
Bledsoe,  Boyer,  and  Henneman3  and  represent  a  s l i g ht 
reformulation  and  generalization  of  their  rules.  Ess(cid:173)
e n t i a l ly  what  is  new  here  is  the  integration  of  seman(cid:173)
t i cs 
can  be  shown10  that  the  system  L  is  a  generalization  of 
the  syntactic  and  semantic  formal  system  underlying  the 
work  of  Gelernter  and  his  co-workers  on  the.  Geometry 
Machine5,6. 

their  purely  deductive  syntax. 

into 

The  deductive  syntax  of  the  system  L  stands  in 
contrast 
to  the  usual  resolution  based  theorem-proving 
techniques11,  and  ismuch  closer  to  various  systems  of 
natural  deduction,  f or  example  those  used  by  Wangl3. 
L's  deductive  component  also  bears  a  resemblance  to 
the  system  of  Nevins8. 
In  p a r t i c u l a r,  Rules  4  and  8 
correspond  to  his  case  analysis  rules.  We  are  en(cid:173)
couraged  by  t h is  since  Nevins' 
to  be  the  most  successful  by  far  of  any  current  general 
purpose  system. 

theorem-prover  appears 

43 

5.  We  f e el  that  the  system  L  possesses  a  very 

It 

In  p a r t i c u l a r,  as  suggested  in 

smooth  and  natural  Interface  between  i ts  semantics  and 
deductive  syntax. 
these  semantic  and  syntactic 
remarks  3,  and  4.  above, 
subsystems 
interact  continuously  during  the  search  for 
a  proof,  each  suggesting  to  the  other  how  next  to  pro(cid:173)
ceed.  There  is  a  naturalness  w i th  which  systems  of 
natural  deduction  admit  a  semantic  component  with  the 
result  that  a  great  deal  of  control  is  gained  over  the 
search  for  a  proof, 
that  we  argue  in  favour  of 
theorem-proving, 
the  usual  r e s o l u t i o n-
based  systems,  which  appear  to  lack  any  kind  of  reason(cid:173)
able  control  over  dead-end  searches. 

is  precisely  for  t h is  reason 

t h e ir  use  in  automatic 

in  opposition  to 

it. 

It  Is  not  intended  that  the  model  M  necessar(cid:173)
i ly  remain  fixed  during  the  course  of  a  proof.  Thus, 
each  application  of  one  of  the  rules  may  invoke  a 
d i f f e r e nt  model,  where  appropriate.  For  example, 
in 
geometry,constructions  may  be  suggested  by  the  proof 
so  f a r, 
in  which  case  the  current  model  w i ll  be  the 
i n i t i al  model  augmented  by  suitable  new  points  and 
l i ne  segments.  Since  s u b s t i t u t i on  Instances  can  often 
be  interpreted  as  constructively  asserting  the  e x i s t(cid:173)
ence  of  new  objects,  every  such  s u b s t i t u t i on  encounter(cid:173)
ed  during  the  course  of  the  proof  thus  f ar  can  be  used 
to  augment 
in 
the  i n i t i al  model  by  these  new  objects, 
order  to  y i e ld  the  current  model.  Example  4  below 
i l l u s t r a t es  how  the  system  L  suggests, 
natural  way, 
the  necessary  changes  to  be  made  to  an 
i n i t i al  model,  and  how  the  model  evolves  during  the 
course  of 

the  proof. 
S i m i l a r l y,  a  case  analysis  might  invoke  a 

in  a  very 

d i f f e r e nt  model  for  each  case.  Thus  an  application  of 
Rule  8  w i ll 
"A  case"  and  one  for  the  B. 

t y p i c a l ly  c a ll  on  two  models,  one  for  the 

44 

in  any  r i g ht  angle 

)— Square  ABCw 
which  is  c l e a r ly  false 
of  an  isosceles  t r i a n g l e,  so  that  t h is  application  of 
Rule  6  is  rejected.  Notice  that  if  we  had  been  unfort(cid:173)
unate  enough  to  have  chosen,  as  a  diagram  of  an  isos(cid:173)
celes  t r i a n g l e,  one  in  which  BAC  was  a  r i g ht  angle, 
there  would  have  been  no  j u s t i f i c a t i on  in  rejecting 
the  application  of  Rule  6  -  a  satisfying  point  w  would 
e x i s t. 

free  diagram 

Example  3 

This  is  a  geometry  example  which  i l l u s t r a t es  the 
use  of  semantics  in  rejecting  a  subgoal  generated  by 
Rule  4.  The  theorem  states  "For  every  triangle  there 
is  a  point  equidistant 
Assume  t h a t,  among  the  axioms  present  is 

three  v e r t i c e s ". 

from  i ts 

Example  4 

This  example  is  drawn  from  Gelernter  et  al 
. 
i n t e r e st  because  i ts  proof  requires  a  subtle 

is  of 
construction.  We  sketch  a  portion  of  the  proof,  using 
the  system  L,  which  i l l u s t r a t es  how  L  forces  the  nec(cid:173)
essary  construction,  as  the  proof  unfolds. 

It 

The  theorem  states  " If  ABCD  is  a  trapezoid  with 
BC||AD,  and  if  the  l i ne  j o i n i ng  the  midpoint  E  of  AC 
to  the  midpoint  F  of  BD  meets  AB  in  M,  then  MA-MB," 
The  I n i t i al  model  (without  the  point  K  and  dotted  l i ne 
segment  CFK) 

i s: 

The  crux  of  the  proof  is  to  prove  EF|JAD  since 

then,  in  triangle  BAD,  FB-FD  and  MF||AD  whence  MB-MA. 
To  prove  EF  |AD,  the  l i ne  segment  CF  must  be  drawn, 
(The  Geometry  Machine 
and  extended  to  meet  AD  in  K. 
was  unable  to  discover  t h is  construction,  and  had  to 
be  given  t h is  h i nt  before  it  found  a  p r o o f ).  Then  it 

45 

New  York:  McGraw-Hill  (1963)  153-163. 

7.  Loveland,  D.W.  A  l i n e ar  format  for  r e s o l u t i o n. 
Symposium  on  Automatic  Demonstration 
(ed.  Laudet,  M.)  New  York:  Springer-
Verlag  (1970). 

8.  Kevins,  A . J.  A  human  oriented  logic  f or  automatic 

theorem  proving,  MIT  A . I,  Laboratory 
Memo  No.268  (Oct.1972), 

9.  Norton,  L.M.  Experiments  with  a  h e u r i s t ic  theorem-

proving  program  for  predicate  calculus 
which  e q u a l i t y.  A r t i f i c i al  I n t e l l i g e n c e, 
2  (1971),  261-284. 

10.  Reiter,  R.  The  use  of  models  in  automatic  theorem 
proving.  University  of  B r i t i sh  Columbia, 
Dept.  of  Computer  Science  Technical 
Report  72-09  (Sept.  1972). 

1 1.  Robinson,  J.A.  A  machine  oriented  logic  based  on 

the  resolution  p r i n c i p l e, 
(1965),  23-41. 

J.ACM,  12 

12.  Slagle,  J.R.  Automatic  theorem  proving  w i th 
renamable  and  semantic  r e s o l u t i o n. 
14  (1967),  687-697. 

J.ACM 

13.  Wang,  H.  Toward  mechanical  mathematics. 

Res.  Dev.  4  (1960),  2-22. 

IBM  J. 

14.  Woe,  L.,  Robinson,  G.A.,  and  Carson,  D.F.  The 

concept  of  demodulation  in 
proving.  J.ACM,  14  (1967),  698-709. 

theorem 

Acknowledgements 

This  research  was  supported  by  National  Research 

Council  of  Canada  grant  A-7642. 
p r o f i t ed  by  conversations  w i th  John  Seeley  Brown  about 
t h is  work. 

I  have  greatly 

References 
1.  Andrews,  P.B.  Resolution  with  merging. 

(1968),  367-381. 

J.ACM,  15 

2.  Bledsoe,  W.W.  S p l i t t i ng  and  reduction  h e u r i s t i cs 

in  automatic  theorem  proving. 
A r t i f i c i al  I n t e l l i g e n c e,  2  (1971), 
55-77. 

3.  Bledsoe,  W.W.,  Boyer,  R.S.  and  Henneman,  W.H. 
theorems. 
I n t e l l i g e n c e,  3,  (1972), 

Computer  proofs  of 
A r t i f i c i al 
27-60. 

l i m it 

4.  Davis,  M.  and  Putnam,  H.  A  computing  procedure 
J.ACM,  7 

for  q u a n t i f i c a t i on  theory. 
(1960),  201-215. 

5.  Gelernter,  H.  Realization  of  a  geometry  theorem-

proving  machine.  Computers  and  Thought 
(eds,  Feigenbaum,  E.A,  and  Feldman,  J.) 
New  York:  McGraw-Hill  (1963),  134-152. 

6.  Gelernter,  H.,  Hansen,  J.R.,  and  Loveland,  D.W. 

Empirical  explorations  of  the  geometry 
theorem  machine.  Computers  and  Thought 
(eds,  Feigenbaum,  E.A.  and  Feldman,  J.) 

