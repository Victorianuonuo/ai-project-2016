∗
Incompleteness and Incomparability in Preference Aggregation

M. S. Pini1 , F. Rossi1, K. B. Venable1 and T. Walsh2

1: Department of Pure and Applied Mathematics, University of Padova, Italy

{mpini,frossi,kvenable}@math.unipd.it
2: NICTA and UNSW Sydney, Australia

Toby.Walsh@nicta.com.au

Abstract

We consider how to combine the preferences of
multiple agents despite the presence of incomplete-
ness and incomparability in their preference order-
ings. An agent’s preference ordering may be in-
complete because, for example, there is an ongoing
preference elicitation process. It may also contain
incomparability as this is useful, for example, in
multi-criteria scenarios. We focus on the problem
of computing the possible and necessary winners,
that is, those outcomes which can be or always are
the most preferred for the agents. Possible and nec-
essary winners are useful in many scenarios includ-
ing preference elicitation. First we show that com-
puting the sets of possible and necessary winners
is in general a difﬁcult problem as is providing a
good approximation of such sets. Then we iden-
tify general properties of the preference aggrega-
tion function which are sufﬁcient for such sets to
be computed in polynomial time. Finally, we show
how possible and necessary winners can be used to
focus preference elicitation.

1 Introduction

We consider a multi-agent setting where each agent speciﬁes
their preferences by means of an ordering over the possible
outcomes. A pair of outcomes can be ordered, incomparable,
in a tie, or the relationship between them may not yet be spec-
iﬁed. Incomparability and incompleteness represent very dif-
ferent concepts. Outcomes may be incomparable because the
agent does not wish very dissimilar outcomes to be compared.
For example, we might not want to compare a biography with
a novel since the criteria along which we judge them are just
too different. Outcomes can also be incomparable because
the agent has multiple criteria to optimize. For example, we
might not wish to compare a faster but more expensive laptop
with a slower and cheaper one. Incompleteness, on the other
hand, represents simply an absence of knowledge about the
relationship between certain pairs of outcomes. Incomplete-
ness arises when we have not fully elicited an agent’s pref-

∗This work has been supported by Italian MIUR PRIN project

“Constraints and Preferences” (n. 2005015491).

erences or when agents have privacy concerns which prevent
them from revealing their complete preference ordering.

Since we wish to aggregate together the agents’ prefer-
ences into a single preference ordering, we must modify pref-
erence aggregation functions to deal with incompleteness.
One possibility is to consider all possible ways in which the
incomplete preference orders can be consistently completed.
In each possible completion, preference aggregation may give
different optimal elements (or winners). This leads to the idea
of the possible winners (those outcomes which are winners in
at least one possible completion) and the necessary winners
(those outcomes which are winners in all possible comple-
tions) [Konczak and Lang, 2005].

While voting theory has been mainly interested in the fair-
ness of social choice or social welfare functions, there has
been recent interest in computational properties of prefer-
ence aggregation [Rossi et al., 2004; Lang, 2004; Konczak
and Lang, 2005; Conitzer and Sandholm, 2002b]. It has also
been noted that the complexity of manipulating an election
is closely related to the complexity of computing possible
winners [Konczak and Lang, 2005; Conitzer and Sandholm,
2002a].

In this paper we start by considering the complexity of
computing the necessary and the possible winners. We show
that both tasks are hard in general, even to approximate. Then
we identify sufﬁcient conditions that assure tractability. Such
conditions concern properties of the preference aggregation
function, such as monotonicity and independence to irrele-
vant alternatives (IIA) [Arrow et al., 2002].

Possible and necessary winners are useful in many scenar-
ios including preference elicitation [Chen and Pu, 2004]. For
example, elicitation is over when the set of possible winners
coincides with that of the necessary winners [Conitzer and
Sandholm, 2002b]. However, recognizing when such a con-
dition is satisﬁed is hard in general. In the last part of the
paper we show that, if the preference aggregation function is
IIA, preference elicitation can focus just on the incomplete-
ness concerning those outcomes which are possible and nec-
essary winners, allowing us to ignore all other outcomes and
to complete preference elicitation in polynomial time.

2 Basic notions
Preferences. We assume that each agent’s preferences are
speciﬁed via a (possibly incomplete) partial order with ties

IJCAI-07

1464

(IPO) over the set of possible outcomes, that we will denote
by Ω. An incomplete partial order is a partial order where
some relation between pairs of outcomes is unknown. Given
two outcomes A and B, an agent will specify exactly one
of the following: A < B, A > B, A = B, A ∼ B, or
A?B, where A ∼ B means that A and B are incomparable,
and A?B that the relation between A and B is unknown, this
means that it can be any element of {=, >, <, ∼}.

Example 1. Given outcomes A, B, and C, an agent may
state preferences such as A > B, B ∼ C, and A > C, or
also just A > B and B ∼ C. However, an agent cannot state
preferences such as A > B, B > C, C > A, or also A > B,
B > C, A ∼ C since neither are POs.

Proﬁles. A proﬁle is a sequence of n partial orders
p1, . . . , pn over outcomes, one for each agent i ∈ {1, . . . , n},
describing the preferences of the agents. An incomplete pro-
ﬁle is a sequence in which one or more of the partial orders is
incomplete.

Necessary and possible winners. We extend to the case
of partial orders the notions of possible and necessary win-
ners presented in [Konczak and Lang, 2005] in the case of
total orders. Given a social welfare function f and an in-
complete proﬁle ip, we deﬁne necessary winners of f given
ip to be all those outcomes which are maximal elements in
all POs in paf (ip) . A necessary winner must be a winner,
no matter how incompleteness is resolved in the incomplete
proﬁle. Analogously, the possible winners are all those out-
comes which are maximal elements in at least one of the POs
in paf (ip). A possible winner is a winner in at least one
possible completion of the incomplete proﬁle. We will write
N W (f, ip) and P W (f, ip) for the set of necessary and pos-
sible winners of f on proﬁle ip. We will sometimes omit f
and/or ip, and just write N W and P W when they will be
obvious or irrelevant.

In Example 2, A and B are the necessary win-
Example 3.
ners, since they are top elements in all POs f (pi), for all
i = 1, 2. C is a possible winner since it wins in f (p2).

Social welfare and preference aggregation. Social wel-
fare functions [Arrow et al., 2002] are functions from proﬁles
to partial orders with ties. Given a social welfare function
f , we deﬁne a corresponding preference aggregation func-
tion, written paf , which is a function from incomplete pro-
ﬁles to sets of partial orders with ties (POs). Precisely, given
an incomplete proﬁle ip = (ip1, . . . , ipn), where the ipi’s are
IPOs, consider all the proﬁles, say p1, . . . , pk, obtained from
ip by replacing any occurrence of ? in the ipi’s with either
<, >, =, or ∼ which is consistent with a partial order. Let
us then set paf (ip) = {f (p1), . . . , f (pk)}. This set will be
called the set of results of f on proﬁle ip.

Example 2. Consider the Pareto social welfare function f
deﬁned as follows [Arrow et al., 2002]: given a proﬁle p,
for any two outcomes A and B, if all agents say A > B or
A = B and at least one says A > B in p, then A > B ∈ f (p);
if all agents say A = B in p, then A = B ∈ f (p); otherwise,
A ∼ B ∈ f (p). In Figure 1 we show an example with three
agents and three outcomes A, B, and C.

ip:

ip1
?

B

A
>

C
∼

A
∼

ip2
C>
>
B

ip3
>

B

A
>

C
>

p1:

:p2

>A
>

B
∼

B

A
>

C
∼

C
∼

ip2

ip3

f(p1):

ip2

ip3

A
f(p2): ∼

>A
∼
B
∼

B

combined result

A
∼

C
∼

∼
>, 

B

C
∼

C
∼

Figure 1: An incomplete proﬁle ip, its completions p1 and p2,
results f (p1) and f (p2), and combined result cr(f, ip).

Combined result. Unfortunately, the set of results can be
exponentially large. We will therefore also consider a com-
pact representation that is polynomial in size. This may throw
away information by compacting together results into a sin-
gle combined result. Given a social welfare function f and
an incomplete proﬁle ip, consider a graph, whose nodes are
the outcomes, and whose arcs are labeled by non-empty sub-
sets of {<, >, =, ∼}. Label l is on the arc between outcomes
A and B if there exists a PO in paf (ip) where A and B are
related by l. This graph will be called the combined result of
f on ip, and will be denoted by cr(f, ip). If an arc is labeled
by set {<, >, =, ∼}, we will say that it is fully incomplete.
Otherwise, we say that it is partially incomplete. The set of
labels on the arc between A and B will be called rel(A, B).

Example 4. The combined result for Example 2 is shown
in Figure 1.

3 Possible and Necessary Winners

In this section we show that computing the set of necessary
and possible winners of a social welfare function is, in gen-
eral, NP-hard even if we restrict ourselves to incomplete but
total orders. We will consider the following, well known, vot-
ing rule.

In the STV rule each voter pro-
Single Transferable Vote.
vides a total order on candidates and, initially, an individ-
ual’s vote is allocated to their most preferred candidate. The
quota of the election is the minimum number of votes nec-
essary to get elected. If only one candidate is to be elected
then the quota is (cid:5)n/2(cid:6) + 1, where n is the number of vot-
ers. If no candidate exceeds the quota, then, the candidate
with the fewest votes is eliminated, and his votes are equally
distributed among the second choices of the voters who had
selected him as ﬁrst choice. In what follows we consider STV

IJCAI-07

1465

elections in which some total orders, provided by the voters,
are incomplete.

In general, given an incomplete proﬁle and a candidate a,
we say POSSIBLEWINNER holds iff a is a possible winner of
the election.

votes and is unbeatable. Hence, if a is not a possible winner
in the original election, b is the necessary winner of this
new election. Thus determining the necessary winner of this
new election decides if a is a possible winner of the original
election. Q.E.D.

Theorem 1 PossibleWinner is NP-complete.

In fact, membership in NP follows by giving a
Proof:
completion of the proﬁle in which a wins. Completeness
that EFFECTIVE PREFERENCE
follows from the result
(determining if a particular candidate can win an election
with one vote unknown) for STV is NP-complete [Bartholdi
and Orlin., 1991] Q.E.D.

This result allows us to conclude that, in general, ﬁnd-
ing possible winners of an election is difﬁcult. However, it
should be noticed that for many rules used in practice in-
cluding some positional scoring rules [Konczak and Lang,
2005], answering PossibleWinner is polynomial. The
complexity of computing possible winners is related to the
complexity of manipulating an election [Konczak and Lang,
2005]. For instance, it is NP-complete to determine for the
Borda, Copeland, Maximin and STV rules if a coalition can
cast weighted votes to ensure a given winner [Conitzer and
Sandholm, 2002a].
It follows therefore that with weighted
votes, PossibleWinner is NP-hard for these rules.

Given an incomplete proﬁle and a candidate a, we say
NECESSARYWINNER holds iff a is a necessary winner of the
election.

Theorem 2 NecessaryWinner is coNP-complete.

Proof: The complement problem is in NP since we can show
membership by giving a completion of the proﬁle in which
some b different to a wins. To show completeness, we give
a reduction from EFFECTIVE PREFERENCE with STV in
which a appears at least once in ﬁrst place in one vote. This
restricted form of EFFECTIVE PREFERENCE is NP-complete
[Bartholdi and Orlin., 1991]. Consider an incomplete proﬁle
Π in which n + 1 votes have been cast, a has at least one
ﬁrst place vote, one vote remains unknown, and we wish to
decide if a can win. We construct a new election from Π
with n new additional votes, and one new candidate b. We
put b at the top of each of these new votes, and rank the other
candidates in any order within these n votes. We place b in
last place in the original n + 1 votes, except for one vote
where a is in ﬁrst place (by assumption, one such vote must
exist) where we place b in second place and shift all other
candidates down. We observe that b will survive till the last
round as b has at least n votes and no other candidate can
have as many till the last round. We also observe that if a
remains in the election, then the score given to each candidate
by STV remains the same as in the original election so the
candidates are eliminated in the same order up till the point
a is eliminated. If a is eliminated before the last round, the
second choice vote for b is transferred. Since b now has
n + 1 votes, b is unbeatable and must win the election. If a
survives, on the other hand, to the last round, we can assume
b is ranked at the bottom of the unknown vote. All the other
candidates but a and b have been eliminated so a has n + 1

Given these results, we might wonder if it is easy to com-
pute a reasonable approximation of the sets of possible and
necessary winners. Unfortunately this is not the case. The
reduction described in the proof of previous theorem shows
that we cannot approximate the set of possible winners within
a factor of two. In fact, we can show that we cannot approx-
imate efﬁciently the set of possible winners within any con-
stant factor.

Theorem 3 It is NP-hard to return a superset of the possible
winners, P W ∗ in which we guarantee |P W ∗| < k|P W | for
some given positive integer k.

We again give a reduction from EFFECTIVE
Proof:
PREFERENCE for STV in which a appears at least once
in ﬁrst place in one vote. Consider an incomplete proﬁle
Π in which n + 1 votes have been cast, a has at least one
ﬁrst place vote, one vote remains unknown, and we wish to
decide if a can win. We construct a new election from Π.
We make k copies of Π.
In the ith copy Πi, we subscript
each candidate with the integer i. We add n new additional
votes, and one new candidate b. We put b at the top of each
of these new votes, and rank all the other candidates except
ai in any order within these n votes. The ranking of the
candidates ai is left unknown but beneath b. In each Πi, we
place b in last place except for one vote where ai is in ﬁrst
place (by assumption, one such vote must exist) where we
place b in second place and shift all other candidates down.
Finally, for each candidate in Πj not in Πi except for aj,
we rank then in any order at the bottom of the the votes in
Πi. The ranking of the candidates ai is again left unknown
but beneath b. We observe that b will survive till all but one
candidate has been eliminated from one of the Πi. We also
observe that if ai remains in the election, then the score
given to each candidate by STV remains the same as in the
original election so the candidates in Πi are eliminated in
the same order up till the point ai is eliminated. Suppose
a cannot win the original election. Then ai will always be
eliminated before the ﬁnal round. The second choice vote
for b is transferred. Since b now has at least n + 1 votes,
b is unbeatable and must win the election. Suppose, on the
other hand, that a can win the original election. Then ai can
survive to be the last remaining candidate in Πi. We can
assume b is ranked at the bottom of the unknown votes of all
the candidates with an index i and above all the candidates
with an index j different to i. Thus ai has n + 1 votes. If we
have the corresponding ranking in the other unknown votes,
aj for j (cid:7)= i will also survive. Since b has only n votes, b will
be eliminated. It is now possible for any of the candidates, ai
where 1 ≤ i ≤ k to win depending on how exactly the ai are
ranked in the different votes. Thus the set of possible winners
is {ai | 1 ≤ i ≤ k} plus b if a is not a necessary winner
in the original election. Hence, if a is a possible winner in
the original election, the size of the set of possible winners

IJCAI-07

1466

is greater than or equal to k, whilst if it is not, the set is of
size 1. If we know that |P W ∗| < k|P W |, then |P W ∗| < k
guarantees that |P W | = 1, b is the necessary winner and
hence that a is not a possible winner in the original election.
Q.E.D.

Similarly, we cannot approximate efﬁciently the set of nec-

essary winners within some ﬁxed ratio.

Theorem 4 It is NP-hard to return a subset of the necessary
winners, N W ∗ in which we guarantee |N W ∗| > 1
|N W |
k
whenever |N W | > 0 for any given positive integer k.
Proof: In the reduction used in the last proof, |N W | = 1
if a is a possible winner in the original election and 0
otherwise. Suppose a is a possible winner. Then in the new
election, |N W | = 1. As |N W ∗| > 1
|N W |, it follows that
k
|N W ∗| = 1. Thus, the size of N W ∗ will determine if a is
possible winner. Q.E.D.

4 Combined result

We now consider the problem of computing the combined re-
sult. We show that, while in general it is difﬁcult, there are
some restrictions which allow us to compute an approxima-
tion of the combined result in polynomial time. In the next
section, we will show how it is possible to compute the set of
possible and necessary winners starting from this approxima-
tion to the combined result.

Theorem 5 Given an incomplete proﬁle, determining if a la-
bel is in the combined result for STV is NP-complete.

In fact, a polynomial witness is a completion of the
Proof:
incomplete proﬁle. To show completeness, we use a polyno-
mial number of calls to this problem to determine if a given
candidate is a possible winner. Q.E.D.
From this result we immediately get the following corollary.

Corollary 5.1 Given an incomplete proﬁle and a social wel-
fare function, computing the combined result is NP-hard.

We now introduce some properties of preference aggrega-
tion functions which allow us to compute an upper approxi-
mation to the combined result in polynomial time. We recall
that the set of labels of an arc between A and B in the com-
bined result is called rel(A, B).

The ﬁrst property we consider is independence to irrele-
vant alternatives (IIA). A social welfare function is said to be
IIA when, for any pair of outcomes A and B, the ordering
between A and B in the result depends only on the relation
between A and B given by the agents [Arrow et al., 2002].
Many preference aggregation functions are IIA, and this is a
property which is related to the notion of fairness in voting
theory [Arrow et al., 2002]. Given a function which is IIA,
to compute the set rel(A, B), we just need to ask each agent
their preference over the pair A and B, and then use f to com-
pute all possible results between A and B. However, if agents
have incompleteness between A and B, f has to consider all
the possible completions, which is exponential in the number
of such agents.

Assume now that f is also monotonic. We say that an out-
come B improves with respect to another outcome A if the
relationship between A and B does not move left along the
following sequence: >, ≥, (∼ or =), ≤, <. For example,
B improves with respect to A if we pass from A ≥ B to
A ∼ B. A social welfare function f is monotonic if for any
two proﬁles p and p(cid:3) and any two outcomes A and B passing
from p to p(cid:3) B improves with respect to A in one agent i and
j for all j (cid:7)= i, then passing from f (p) to f (p(cid:3)) B
pj = p(cid:3)
improves with respect to A.

Consider now any two outcomes A and B. To compute
rel(A, B) under IIA and monotonicity, again, since f is IIA,
we just need to consider the agents’ preferences over the pair
A and B. However, now we don’t need to consider all pos-
sible completions for all agents with incompleteness between
A and B, but just two completions: A < B and A > B. No-
tice that, since f is IIA, we don’t need to consider complete
proﬁles, but just the part of the proﬁle concerning A and B.
This means that transitivity issues do not arise.

Function f will return a result for each of these two com-
pletions, say AxB and AyB, where x, y ∈ {<, >, =, ∼}.
Since f is monotonic, the results of all the other completions
will necessarily be between x and y in the ordering >, ≥,
(∼ or =), ≤, <. By taking all such relations, we obtain a
superset of rel(A, B), that we call rel∗(A, B). In fact, mono-
tonicity of f assures that, if we consider proﬁle A < B and
we get a certain result, then considering proﬁles where A is in
a better position w.r.t. B (that is, A > B, A = B, or A ∼ B),
will give an equal or better situation for A in the result. Thus
we have obtained an approximation of the combined result,
that we call cr∗(f, ip). We will now give a characterization
of this approximation of the combined result.
Theorem 6 Given two outcomes A and B, rel∗(A, B) ⊇
rel(A, B). Moreover, if rel∗(A, B) = {<, >, ∼, =}, then
either rel∗(A, B) = rel(A, B) or rel∗(A, B) − rel(A, B) =
{∼, =}.

Example 5. Consider the Lex rule [Arrow et al., 2002],
in which agents are ordered and, given any two outcomes
A and B,
the relation between A and B in the result
is the relation given by the ﬁrst agent in the order that
does not declare a tie between A and B. Consider the
incomplete proﬁle ip = (ip1 = (A > C, B > C, A?B),
ip2 = (A > B > C)). Then rel∗(A, B) = {<, =, ∼, >},
whereas rel(A, B) = {<, ∼, >}.

By following the procedure described above, this approxi-
mation of the combined result can be computed polynomially,
since we only need to consider two completions.
Theorem 7 Given a preference aggregation function f which
is IIA and monotonic, and an incomplete proﬁle ip, comput-
ing cr∗(f, ip) is polynomial in the number of agents.

5 Computing possible and necessary winners

We will now show how to determine the possible and neces-
sary winners, given cr∗(f, ip). Consider the arc between an
outcome A and an outcome C in cr∗(f, ip). Then, if this arc

IJCAI-07

1467

has the label A < C, then A is not a necessary winner, since
there is an outcome C which is better than A in some result.
If this arc only has the label A < C, then A is not a possible
winner since we must have A < C in all results. Moreover,
consider all the arcs between A and every other outcome C.
Then, if no such arc has label which includes A < C, then A
is a necessary winner. Notice, however, that in general, even
if there are no arcs connecting A to every other outcome C
with the unique label A < C, A could not be possible winner.
A could be better than some outcomes in every completion,
but there might be no completion where it is better than all of
them. We will show that this is not the case if f is IIA and
monotonic.

We now deﬁne Algorithm 1, which, given cr∗(f, ip), com-

putes N W and P W , in polynomial time.

Algorithm 1: Computing N W and P W
Input: cr∗(f, ip), where f: IIA and monotonic
preference aggregation function and ip: incomplete
proﬁle;
Output: P, N: sets of outcomes;
P ← Ω;
N ← Ω;
foreach A ∈ Ω do

if ∃ C ∈ Ω such that {<} ⊆ rel∗(A, C) then

N ← N − A;

if ∃ C ∈ Ω such that {<} = rel∗(A, C) then
P ← P − A;

return P , N ;

Theorem 8 Given cr∗(f, ip), Algorithm 1 terminates in
O(m2) time, where m = |Ω|, returning N = N W and
P = P W .

Proof: Algorithm 1 considers, in the worst case, each arc
exactly once, thus we have O(m2).

N=NW. By construction of cr∗(f, ip), <(cid:7)∈ rel∗(A, C)
iff <(cid:7)∈ rel(A, C). By Algorithm 1, A ∈ N iff ∀C, <(cid:7)∈
rel{A, C}, and this implies that there is no result in which
there exists an outcome C that beats A. Thus, A ∈ N W . On
the contrary, A ∈ N W iff A (cid:7)< C, ∀C ∈ Ω, for all results,
from which, A ∈ N .

P = P W . An outcome A is in P W if there is no other
outcome which beats it in all results. Thus, there cannot
exist any other outcome C such that < is the only label in
rel{A, C} and, thus by construction, also in rel∗{A, C}.
Thus, P W ⊆ P . To show the other inclusion we consider
A ∈ P and we construct a completion of ip such that A
wins in its result. First, let us point out that for any outcome
A, A ∈ P iff (cid:7) ∃C ∈ Ω, rel∗(A, C) = {<}. If ∀C ∈ Ω,
<(cid:7)∈ rel∗(A, C), then A is never beaten by any other outcome
C and A is N W and, thus, a P W . Secondly, let us consider
the case in which A is such that whenever <∈ rel∗(A, C),
either ∼ or > (or both) are also in rel∗(A, C) and let us
denote with X such set of outcomes. Then for every outcome
in C ∈ X we choose > whenever available and ∼ otherwise.
This corresponds to replacing A?C with A > C in the
incomplete proﬁle. Such choice on AC arcs cannot cause a

transitivity inconsistency and thus can be completed to a re-
sult in which A is a winner. Finally, let us consider the case in
which there is at least a C such that rel∗(A, C) = {<, =}. If
for every other outcome C (cid:3), rel∗(A, C (cid:3)) contains exactly one
label from the set: {>, ∼, =} then we can safely set AC to =
since there is, for sure, a result with that labeling. Moreover,
in such a result A is a winner. Assume, instead, that there
is at least an outcome C (cid:3) such that |rel∗(A, C (cid:3)) > 1|. This
means that there is at least an agent which has not declared
his preference on AC (cid:3) and that such preference cannot
be induced by transitivity closure. We replace A?C (cid:3) with
A > C (cid:3) everywhere in the proﬁle, we perform the transitive
closure of all the modiﬁed IP Os, and we apply f . We will
prove that such transitive closure does not force label < on
AC. After the procedure, due to monotonicity, rel(A, C (cid:3))
will contain exactly one label from the set: {>, ∼, =}. Let
us assume that, after the procedure, A = C (cid:3) and let us
now consider rel(C (cid:3), C). Had it been rel∗(C (cid:3), C) = {<}
from the start, this would have forced rel(A, C) = {<}.
However, this is not possible since A ∈ P . This allows us
to conclude that (rel∗(C (cid:3), C) ∩ {>, ∼, =}) (cid:7)= ∅ and any of
such additional labels together with A = C (cid:3) can never force
A < C. Clearly, if A > C (cid:3) or A ∼ C (cid:3), there is no labeling of
C (cid:3)C which can force A < C. It should be noticed that any
available choice on C (cid:3)C can always be made safely due to
the fact that the function is IIA and that the transitive closure
of the proﬁles has already ruled out inconsistent choices. By
iterating the procedure until every ? in the incomplete proﬁle
is replaced, we can construct a result of the function in which
A is a winner. Q.E.D.

An example of a preference aggregation function which is
both IIA and monotonic is the Pareto rule, described in Exam-
ple 2. Another example is the Lex rule, described in Example
5. A third example is the approval voting rule, for which
a tractability result for computing N W and P W is given in
[Konczak and Lang, 2005] since it is a positional scoring rule.

6 Preference elicitation

One use of necessary and possible winners is in eliciting
preferences [Chen and Pu, 2004]. Preference elicitation is
the process of asking queries to agents in order to determine
their preferences over outcomes. At each stage in eliciting
agents’ preferences, there is a set of possible and necessary
winners. When N W = P W , preference elicitation can be
stopped since we have enough information to declare the win-
ners, no matter how the remaining incompleteness is resolved
[Conitzer and Sandholm, 2002b]. At the beginning, N W is
empty and P W contains all outcomes. As preferences are
declared, N W grows and P W shrinks. At each step, an out-
come in P W can either pass to N W or become a loser. When
P W is larger than N W , we can use these two sets to guide
preference elicitation and avoid useless work.

If the preference aggregation function is IIA, then to deter-
mine if an outcome A ∈ P W − N W is a loser or a necessary
winner, it is enough to ask agents to declare their preferences
over all pairs involving A and another outcome, say B, in
P W . Moreover, IIA allows us to consider just one proﬁle

IJCAI-07

1468

when computing the relations between A and B in the re-
sult, and guarantees that the result is a precise relation, that
is, either <, or >, or =, or ∼. To determine all the win-
ners, we thus need to know the relations between A and B
for all A ∈ P W − N W and B ∈ P W . There are exam-
ples where all such pairs must be considered. Algorithm 2, in
O(|P W |2) steps eliminates enough incompleteness to deter-
mine the winners. At each step, the algorithm asks each agent
to express their preferences on a pair of outcomes (via proce-
dure ask(A, B)) and aggregates such preferences via func-
tion f . If function f is polynomially computable, the whole
computation is polynomial in the number of agents and out-
comes.
Theorem 9 If f is IIA and polynomially computable, then
determining the set of winners via preference elicitation is
polynomial in the number of agents and outcomes.

Using the results of the previous sections, under certain
conditions we know how to compute efﬁciently the necessary
winners and the possible winners. Thus Algorithm 2 can be
given as input the outputs of Algorithm 1.

Algorithm 2: Winner determination
Input: PW, NW: sets of outcomes; f : preference
aggregation function;
Output: W: set of outcomes;
wins: bool;
P ← P W ; N ← N W ;
while P (cid:7)= N do

choose A ∈ P − N ;
wins ← true; PA ← P − {A};
repeat

choose B ∈ PA;
if ∃ an agent such that A?B then

ask(A,B);
compute f (A,B);

if f (A, B) = (A > B) then

P ← P − {B};

if f (A, B) = (A < B) then

P ← P − {A}; wins ← f alse;

PA ← PA − {B};

until f (A, B) = (A < B) or PA = ∅ ;
if wins = true then
N ← N ∪ {A};

W ← N ;
return W ;

It should be noticed that deciding when elicitation is over,
that is checking if P = N , is hard in general since, in
[Conitzer and Sandholm, 2002b] such a result has been
proven for STV.

7 Related and future work

In [Konczak and Lang, 2005] preference aggregation func-
tions for combining incomplete total orders are considered.
Compared to our work, we permit both incompleteness and

incomparability, while they allow only for incompleteness.
Second, they consider social choice functions which return
the (non-empty) set of winners. Instead, we consider social
welfare functions which return a complete partial order. So-
cial welfare functions give a ﬁner grained view of the result.
Third, they consider speciﬁc voting rules like the Borda pro-
cedure whilst we have focused on general properties that en-
sure tractability.

Some of our results use IIA which is a strong assump-
tion. However, we use it just to show intractability is not
inevitable on incomplete partial orders. We plan to ﬁnd other
cases where IIA can be relaxed. We also plan to consider
the addition of constraints to agents’ preferences. This means
that preference aggregation must take into account the feasi-
bility of the outcomes. Thus possible and necessary winners
must now be feasible. It is also important to consider com-
pact knowledge representation formalisms to express agents’
preferences, such as CP-nets and soft constraints. Possi-
ble and necessary winners should then be deﬁned directly
from such compact representations, and preference elicitation
should concern statements allowed in the representation lan-
guage. Finally, a possibility or a probability distribution over
the completions of an incomplete preference relation can be
used to provide additional information when computing pos-
sible and necessary winners.

References
[Arrow et al., 2002] K. J. Arrow, A. K. Sen, and K. Suzu-
mara. Handbook of Social Choice and Welfare. North-
Holland, Elsevier, 2002.

[Bartholdi and Orlin., 1991] J.J. Bartholdi and J.B. Orlin.
Single transferable vote resists strategic voting. Social
Choice and Welfare, 8(4):341–354, 1991.

[Chen and Pu, 2004] L. Chen and P. Pu. Survey of prefer-
ence elicitation methods. Technical Report IC/200467,
Swiss Federal
Institute of Technology in Lausanne
(EPFL), 2004.

[Conitzer and Sandholm, 2002a] V. Conitzer and T. Sand-
holm. Complexity of manipulating elections with few can-
didates. In AAAI/IAAI, pages 314–319, 2002.

[Conitzer and Sandholm, 2002b] V. Conitzer and T. Sand-
Vote elicitation: Complexity and strategy-
In Proc. AAAI/IAAI 2002, pages 392–397,

holm.
proofness.
2002.

[Konczak and Lang, 2005] K. Konczak and J. Lang. Voting
procedures with incomplete preferences. In Proc. IJCAI-
05 Multidisciplinary Workshop on Advances in Preference
Handling, 2005.

[Lang, 2004] J. Lang. Logical preference representation and
combinatorial vote. Annals of Mathematics and Artiﬁcial
Intelligence, 42(1):37–71, 2004.

[Rossi et al., 2004] F. Rossi, K. B. Venable, and T. Walsh.
mCP nets: representing and reasoning with preferences of
multiple agents. In AAAI-2004, pages 322–327, 2004.

IJCAI-07

1469

