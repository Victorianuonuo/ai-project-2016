t 
A  HOLE  IN  GOAL  TREES:  SOME  GUIDANCE  FROM  RESOLUTION  THEORY 

Session  6 
L o g i c: 

Theorem  P r o v i ng  and 

II 

D.  W.  Loveland  and  M.  E.  Stickel 
Department  of  Computer  Science 

Carnegie-Mellon  University 

Pittsburgh,  Pa.  15213 

Abstract 

mechanism  to  be  complete  yet  is  not  complete. 

The  representation  power  of  goal-subgoal  trees  and 

the  adequacy  of  this  form  of  problem  reduction  is  con­
sidered.  A  number  of  inadequacies  in  the  classical 
form  are  i l l u s t r a t e d,  and  two  versions  of  a  syntactic 
procedure  incorporating  extensions  are  given.  Although 
the  form  of  the  corrections  are  suggested  from  resolu­
the  value  of  t h is  connection 
t i on  theory  r e s u l t s,  and 
emphasized,-the  paper  discusses 
the  goal  tree  format 
and  i ts  extensions  on  an  informal  l e v e l. 

Key  words: 
Geometry  Theorem  Machine,  resolution,  model  elimina­
t i o n. 

theorem  proving,  goal  trees,  AND/OR  trees, 

1. 

Introduction 

After  several  years  when  almost  a ll 

theorem  prov­

ing  systems,  and  many  problem  solving  systems,  were 
based  on  resolution,  many  researchers  are  returning  to 
natural  deduction  type  l o g i c s,  often  implemented  via 
some  form  of  goal-subgoal  tree  notation  using  a  prob­
lem  reduction  approach. 
goal  tree  form  (or  AND/OR  tree  form) 
We  show  that  if  one  wishes  to  use  this  syntactic  form 
for  representation  of  the  deductions  and  search  space 
as  a  f u ll  replacement  for  the  resolution  approach,  one 
must  make  same  additions  to  the  classical  problem  re­
duction  formulation. 

In  t h is  paper  the  goal-sub­
is  considered. 

To  show  that  there  exist  holes  in  the  classical 

goal-subgoal  problem  reduction  method  we  need  only 
present  some  examples,  which  we  supply.  To  determine 
an  appropriate  correction  and  measure  i ts  power  takes 
some  theory. 
It  turns  out  that  resolution  theory, 
in 
p a r t i c u l ar  the  model  elimination  procedure  r e s u l t s, 
In  this  paper 
provides  an  adequate  theoretical  base. 
we  only  state  the  consequences  for  the  problem  reduc­
t i on  approach,  omitting  proofs.  However,  we  want  to 
the  value  of  resolution  theory  for  the  insight 
stress 
it  gives 
to  the  problem  reduction  method  and  remark. 
that  more  information  than  is  exploited  here  can  cer­
t a i n ly  be  pulled  from  existing  resolution  theory. 

AND/OR  trees,  used  as  goal  trees,  are  components 

if  the  equality  predicate 

that  the  usual  way  of  organizing  goal-

of  most  problem  solving  systems  that  are  not  resolu­
t i on  based.  We  are  hereafter  concerned  only  with  goal 
trees  used  for  logical  inference.  We  show,  among 
other  things, 
subgoal  trees  is  incomplete  yet  one  small  change  makes 
the  mechanism  complete,  assuming  equality  substitution 
is  not  relevant,  and 
is  used, 
several  added  rules  gives  completeness  in  general.  By 
completeness,  we  mean  that  the  goal  trees  and  associ­
ated  syntactic  mechanism  is  capable  of  establishing  a 
goal  statement  whenever  the  goal  is  v a l id  given  the 
assertions  present.  The  systems  we  discuss  are  the 
search  trees  such  as  are  used  in  the  Geometry  Theorem 
Machine  (Gelernter  et  a l .2 , 3 , 4), 
(Newell  et  a l .1 2)  and  elsewhere. 
equality  predicate  is  not  present, 
Plane  Geometry  Machine 

the  Logic  Theorist 
Indeed,  when  the 
the  mechanism  of 

in  structure  and 

is  s u f f i c i e nt 

the 

incomplete 

to  pursue,  and  for 

The  subject  of  completeness 

is  embroiled  in  con­
troversy  these  days.  We  feel  a  developing  consensus 
that  t o t al  completeness  is  pointless 
almost  a ll  problems,  pursuit  of  the  solution  w i ll  be 
done  by  methods  ( p a r t i c u l a r ly  search  methods) 
in  themselves,  yet  the  t o t al  reservoir  of  tools  to  be 
drawn  upon  should  be  complete  if  at  all  possible. 
In 
p a r t i c u l a r,  one  wishes  the  underlying  organization  and 
recording  mechanism  (this  is  what  AND/OR  goal  trees 
are) 
to  be  capable  of  handling  any  s i t u a t i o n.  The 
worst  possible  situation  is  to  be  prevented  from  estab­
l i s h i ng  a  simple  inference  not  because  one  is  unable  to 
thread  through  the  search  space  but  because  the  i n f e r­
ence  chain  cannot  even  be  represented.  We  claim  this 
is  p a r t i c u l a r ly  bad  because  the  problem  specific  search 
tools  are  expected  to  be  updated  frequently  while  the 
underlying  recording  (proof)  mechanism  is  viewed  as  far 
more  stable. 
I n a b i l i ty  to  express  concepts 
due  to  inadequate  grammatical  structure  is  worse  than 
inadequacy  due  to  a  limited  vocabulary,  for  one  more 
readily  adds  to  his  (her)  vocabulary.  One  wishes  a 
grammar  "complete"  although  no  one  expects  a  "complete" 
vocabulary. 

In  analogy, 

I n a b i l i ty  to 

As  regards  goal 

is  reported  in  Gelernter3. 

trees,  one  instance  of  inadequate 
understanding  of  goal  trees  and  the  associated  mechan­
isms 
This  paper  documents 
an  instance  where  a  mechanism  mixing  use  of  the  STUCK 
and  ESTABLISHED  labels  with  goal  elimination  due  to 
identical  higher  goal  resulted  in  the 
i n­
fer  theorems  whose  known  proof  complexity  suggested 
solution  should  be  possible.  As  search  spaces  were 
r e l a t i v e ly  small,  most  runs  could  be  carefully  analyzed, 
so  the  flaw  was  probably  discovered  on  the  f i r st  theorem 
for  which  the  flaw  actually  prevented  the  proof.  How­
ever, 
nearly  a  year  at  that  time  and  many  "production"  runs 
were  made  prior  to  this  discovery.  Moral: 
in 
Infrequently  used  logical  paths  may  be  p a r t i c u l a r ly  bad 
because  simple  (and  important'?)  results  may  be  blocked 
long  after  the  system  is  believed  "debugged" 
basic  routines. 

the  Geometry  Theorem  Machine  had  been  in  operation 

in  I ts 

flaws 

We  do  not  consider  completeness  proofs  here  but 

r e ly  on  examples  to  suggest  the  need  and  degree  of  ap­
p l i c a b i l i ty  of  extensions  to  the  classical  form  for 
Those  familiar  with  resolution  theory  (in 
goal  trees. 
p a r t i c u l a r,  model  elimination  as  given  in  Loveland1 0, 
also  in  Kowalskt  and  Kuehner8)  w i ll  be  able  to  v e r i fy 
some  claims.  Other  assertions  are  based  on  results  to 
appear  in  a  forthcoming  book  on  theorem  proving  by  one 
of 

the  a u t h o r s ' '. 

At 

this  stage  of  development  of 

the  a r t i f i c i al 

In  theorem  proving  techniques 

intelligence  f i e l d,  we  feel  it  is  unnecessary  to  j u s t i­
themselves. 
fy  Interest 
The.bibliography  l i s ts  a  small  sample  of  papers 
that 
investigate  theorem  proving  techniques  or  apply  such 
techniques 
to  robot  guidance,  question-answerer  sys­
tems,  automatic  programming,  etc. 

2,  Goal  Trees 

Research  supported  in  part  by  NSF  Grant  GJ-28457X1. 
* 
Present  address:  Computer  Science  Department,  Duke 
University,  Durham,  N.  C.  27700. 

By  a  goal  tree  we  mean  an  AND/OR  tree  developed 

by  a  problem  reduction  mechanism.  A  " c l a s s i c a l"  t r e a t­
ment  of  goal  trees  occurs 
for  example.  We  review  t h is  notion  b r i e f ly  by  outline 

in  Nilsson13  and  Slagle1 9, 

153 

(possibly  with  subscripts)  represent  l i t e r a l s.  To 
emphasize  that  B  is  A  proceeded  by  a  "not"  we  w i ll 
sometimes  w r i te  B  as  ~A.  A  and  ~A  are  complement  l i t­
e r a l s.  Otherwise,  our  expression  format  is  as  before. 

The  use  of  negated  goals  has  not  appeared  in  the 

is  collinear"  and  "XYZ 

classical  inference  programs  using  goal-subgoal  sys­
tems.  The  Geometry  Theorem  Machine  avoided  Che  need  to 
for 
recognize  complementary  goals  almost  by  accident, 
concepts  l i ke  "XYZ 
is  not  c o l-
linear"  both  appeared  but  did  not  i n t e r a c t.  However, 
in  general  situations  p a r t i c u l a r ly  in  robot  systems, 
question  answerer  systems,  etc. 
interaction  between 
complementary  l i t e r a ls  Is  to  be  expected.  Certain  re­
cent  systems  of  a  goal-subgoal  format  have  been  de­
signed  to  handle  negated  formulas  so  that  complemented 
l i t e r a ls  i n t e r a c t;  see  Bledsoe  et  a l .1,  Reiter1 5, 
These  systems  are  less  in  the  classical  goal-subgoal 
format  than  the  system  considered  here  and  also  appear 
to  be  incomplete. 

We  consider  in  Figure  2  a  simple  example  in  which 
follows  from  the  assertions  but  the  goal-sub­

the  goal 
goal  mechanism  so 
far  i l l u s t r a t ed  w i ll  not  establish 
the  goal.  One  reason  is  that  the  contrapositive  of 
one  of  the  assertions  is  needed.  We  add  the  contrapos­
i t i ve  as  an  e x p l i c it  assertion.  We  note,  however,  that 
there  is  no  way  of  proceeding  to  a  premise!  Yet  the 
problem  is  simple  enough  so  that  one  can  read  the  i n­
tended  meaning  of  the  assertions  and  see  that  the  goal 
follows.  We  claim  that  because  "-C  occurs  as  an  ( i n d i r­
ect)  subgoal  of  C,  we  can  treat  ~C  as  if  it  were  a 
premise  and  terminate  that  branch.  That  I s,  *-C  is  now 
marked  contradicted  and  considered  established.  As  A 
is  a  premise,  B  is  established,  so  C  is  established,  as 
desired. 

The  rationale  for  the  mechanism  above  is  not  hard 

to  f i n d.  Either  C  is  true  or  ~C  is  true. 
t r u e,  then  we  can  establish  C  (after  establishing  other 
pertinent  subgoals),  which  is  imposatble.  Thus  C  is 
true.  This  is  an  argument  by  contradiction.  We  ob­
serve 
if  possible 
i d e n t i ty  with  ancestor  goals  is  checked  as  in  the  GTM. 
One  simply  checks  for  identity  and  then  complementa­
t i o n. 

the  check  for 

If  ~C  is 

t r i v i al 

that 

this 

is 

In  Figure  2,  we  note  a 

The  not-so-immediate  fact  is  that  we  now  have  a 
if  no  sub­

propositionally  complete  system.  That  i s, 
s t i t u t i on  inside  l i t e r a ls  is  allowed  BO  as  to  make  d i s­
t i n ct  l i t e r a ls  a l i ke  (or  complementary)  no  further 
gimmicks  w i ll  be  necessary. 
possible  alternate  argument  to  produce  establishment 
is  that  one  of  D  and  ~D  is  true  so  one  of  the  two  ways 
of  establishing  C  should  be  permitted, 
cient  also?  Probably  so,  we  are  not  sure. 
it  Is  generally  a  much  more  d i f f i c u lt  check  as 
event, 
the  occurrences  of  D  and  -J)  are  on  d i f f e r e nt  disjunc­
t i ve  branches  and  can  be  made  to  appear  at  an  a r b i t r a ry 
depth  by  making  the  inference  connecting  C  and  D  more 
complex.  Thus  instead  of  a  nearly  free  check  one  has 
a  r e l a t i v e ly  complex  tree  search.  But  might  such  a 
tree  search  be  necessary  anyway,  for  some  case  where 
ancestor  complements  do  not  occur?  No.  That  is  the 
meaning  of  our  statement  that  the  system  is  now  prop­
o s i t i o n a l ly  complete.  The  proof  is  a  consequence  of 
the  completeness  of  model  elimination  (ME). 

Is  this  s u f f i­

In  any 

In  general,  problem  solvers  w i ll  not  be  constrained 
to  work  propositionally.  The  expressions  we  have  con­
sidered,  goal  and  assertions,  w i ll  in  general  have  free 
variables  and  functions, 
including  Skolem  functions 
which  build  in  universal  q u a n t i f i e r s.  We  do  not  con­
sider 
the  process  of  general  conversion  to 
our  chosen  format  (generalized  somewhat  below). 
basically  the  conversion  to  disjunctive  normal  form 

in  d e t a il 

It  is 

A  goal  tree  records  the  development  of  the  search 

If  each  new  goal  for  one  of  the 

to  establish  G  by  l i n k i ng  It  to  the  premises  via  the 
implications.  G  is  the  top  goal;  if  it  is  alsO  a 
premise,  G  Is  established.  Otherwise  a ll  implications 
with  consequent  G  are  located  and  the  antecedents  of 
each  such  implication  become  new  goals,  subgoals  of  G. 
G  is  the  parent  of  each  new  goal  and  each  new  goal  is 
the  successor  of  G. 
implications  can  be  established,  G  is  then  established 
(by  asserting  the  i m p l i c a t i o n ).  The  antecedents  of 
one  implication  form  partner  goals.  We  also  refer  to 
a  conjunction  of  goals  'meaning  the  set  of  antecedents 
from  one  implication.  Any  single  set  of  partner  goals 
(goals  in  conjunction)  at 
tablished  establishes  G.  This  yields  a  disjunction  of 
partner  goal  sets. 
If  no  partner  goal  set  corresponds 
to  a  set  of  premises,  some  partner  goal  set  is  select­
ed  and  each  of  the  partners  not  a  premise  is  again 
matched  against  implication  conclusions  to  create  (pos­
sibly)  new  subgoal  sets  (not  necessarily  as  a  single 
p a r a l l el  a c t i o n ).  This  proceeds 
in  i t e r a t i on  u n t il  a 
s u f f i c i e nt  set  of  premise  matches  are  found,  or  the 
search  stops.  The  conjunction/disjunction  r e l a t i o n­
ship  above  leads  to  the  name  AND/OR  tree. 

that  can  be  es­

level 

this 

A  goal  A  is  an  ancestor  of  goal  B if A  is  the  parent 
of  B  or  A  is  an  ancestor  of  the  parent  of  B.  A  partner 
of  an  ancestor  of  the  goal  A  is  called  an  ancestor 
partner  of  A. 

We  give  an  elementary  example  from  plane  geometry 

the  bot­

In  Figure  1 

in  the  s p i r it  of  the  Geometry  Theorem  Machine  (GTM); 
Bee  Figure  1. 
Immediate  subgoals  l ie  below  their  goal 
and  are  connected  by  a  slanted  l i n e.  Partner  goals  are 
connected  by  a  horizontal  l i n e. 
tom  leftmost  conjunction  of  goals  is  rejected  even 
though  two  goals  are  premises  because  the  t h i rd  goal 
also  occurs  as  the  top  goal, 
thus  it  is  an  ancestor  of 
i t s e l f.  Any  goal  that  occurred  as  an  ancestor  goal  of 
i t s e lf  was  rejected  at 
structure  because 
it  could  be  established  at  a l l, 
it  could  be  established  from  the  higher  l e v e l.  Also 
in  the  GTM  structure  was  a  way  of  discarding  a  con­
junction  of  goals 
if  a  higher  conjunction  containing 
an  ancestor  was  easier  to  prove.  We  do  not  elaborate 
for  we  handle  this  somewhat  d i f f e r e n t l y.  The  key 
point 
i n t e r a c t i on  with  ancestor  goals  existed, 
and  was  very  important  due  to  the  "depth  f i r s t"  search 
which  meant  not  leaving  a  branch  u n t il  you  could  go  no 
f u r t h e r. 

in  the  GTM 

the  lower 

level 

that 

if 

is 

We  now  enlarge  our  format  for  expressions.  This 

is  done  by  allowing  our  atoms  to  be  l i t e r a l s,  atoms 
possibly  preceded  by  a  negation  sign.  Thus  if  A  is  a 
complex  expression,  we  look  Inside  only  to  check  if 
the  leftmost  symbol  is  a  "not"  operator  of  proposition-
al  logic. 

If  so,  it  is  displayed.  We  l et  A,  B,  C , . .. 

154 

the  dual  to  the  "conversion" 

with  Skolem  functions, 
in 
Nilsson1 3,  for  example.  The  general  structure  of  the 
goal-subgoal  mechanism  when  operating  in  the  presence 
of  free  (individual)  variables  and  substitution  is  the 
same  but  with  direct  comparison  replaced  by  the  notion 
of  u n i f i c a t i on  from  resolution  (see  Robinson17, 
Nilsson1  ,  or  S l a g l e1 9). 

One  of  the  common  substitution  situations  involves 

If  we  have  goal  P(a)  and  assertion  a=b  we 
equality. 
certainly  consider  P(b)  a  subgoal  whose  establishment 
would  yield  P{a). 
Indeed,  some  readers  may  wonder  why 
we  need  to  w r i te  P(b)  e x p l i c i t l y.  P(a)  might  be  i n t e r­
preted  as  a ll  statements  equivalent  to  P(a)  under 
equality  substitution.  This  has  disadvantages  when 
substitutions  use  numerous  derived  equations  so  we  r e­
ject  t h is  here  although  a  use  of  such  i d e n t i f i c a t i on 
might  be  satisfactory.  Such  a  treatment  is  compatible 
with  our  main  points  but  requires  a  modified  organiza­
t i on  to  that  given  below. 

In  Figures  3,  4,  and  5  we  give  examples  where  the 

goal  should  be  inferred  from  the  assertions  presented 
but  cannot  be  inferred  under  the  simple  format  of  the 
preceding  paragraph.  These  figures  suggest  the  format 
in  which  we  propose  to  handle  such  problems.  That  is, 
in  our  general  description  below  the  problems  stated 
would  generate  the  goal  tree  presented.  Note  that  in 
Figure  4  an  alternate  form  of  implication  1 
is  needed. 
We  supply  it  here  as  assertion  4,  We  c a ll  4  a  general 
contrapositive  of  1.  We  remark  that  we  would  expect 
the  situation  of  Figure  4  to  arise  very  infrequently 
so  such  an  inference  route  should  be  investigated  only 
when  desperate. 

Again, 

if  we  adopt  the  few  rules  for  handling 
equality  given  below,  of  which  three  instances  have 
been  displayed,  we  have  completeness  of  the  goal  tree 
procedure  when  equality  substitution  is  included. 
The 
completeness  proof  comes  from  the  appropriate  form  of 
ME  w i th  paramodulation  (an  equality  handling  mechanism) 
whose  proof  appears 

in  Loveland  . 

A  number  of  other  features  for  goal  tree  analysis 

that  a  conjunction  of  goals 

can  be  gleaned  from  results  concerning  ME.  Most  are 
natural  in  this  setting  such  as  the  removal  of  a  con­
junction  of  goals  when  one  goal  matches  an  ancestor 
goal.  We  noted  this  was  incorporated  in  the  GTM.  A 
non-intuitive  situation  is 
can  be  eliminated  if  one  of  the  component  goals 
complementary  to  an  unexpanded  ancestor  partner  goal, 
i . e .,  a  goal  with  no  subgoals  yet  recorded,  but  com­
pleteness  is  not  assured  unless  a  goal  is  marked  dis-
placed,  and  treated  as  established,  whenever  it  match­
es  an  unexpended  partner  or  an  unexpended  ancestor 
partner  goal.  Displacement  is  i l l u s t r a t ed  in  Figure 
6.  Displacement  avoids  expanding  the  same  subgoal 
twice. 

is 

Figure  7 

is  an  example  of  another  situation  we 
If  S  is  an  unsatisfiable  formula,  S 

must  handle. 
C 
is  v a l id  for  any  formula  c.  We  use  the  device  of  the 
contradictory  formula  ps  which  may  be  considered  a 
shorthand  for  formula  P  A  —p.  This  device  allows  a 
natural  extension  of  our  notion  of  assertion  and  goal 
and  suffices  to  handle  cases  where  the  goal,  or  sub-
goal,  cannot  be  d i r e c t ly  derived  although  it  is  a 
valid  consequence  of  the  assertions. 

We  w r i te  the  general  format  for  our  goal  tree 
system  as  if  a  propositional  system  is  our  concern. 
That 
i s,  a ll  comparisons  of  l i t e r a ls  are  by  i d e n t i ty 
or  complementarity.  However,  the  word  matches  is  used 

for  this  i d e n t i ty  check.  By  interpreting  matches  as 
using  a  most  general  unifying  s u b s t i t u t i o n, 
form  is  realized  when  substitution  for  (individual) 
free  variables  is  permitted.  We  include  in  our  format 
the  substitution  of  equality  but,  again,  w i th  the  ambi­
guity  which  may  or  may  not  allow  free  variables  in 
those  terms. 

the  general 

For  convenience  we  label  the  problem  reduction 

procedure  below  the  MESON  (Model  Elimination  Subgoal 
Oriented)  procedure. 

We  consider  again  the  expression  format.  An  a r b i­

trary  f i r st  order  formula  can  be  converted  to  the  ap­
propriate  expression  format,  preserving  v a l i d i t y.  A 
formula,  or  ( f i n i t e)  set  of  formulas,  not  already  s u i t­
ably  expressed  should  be  converted  to  the  following 
form: 

B 

...AB 

-  G, 

if  K » l,  L- 

is  the  single  goal,  otherwise 

where  B.  is  of  the  form  A  A. . . Mm  -•  C  or  C  and  G  is  of 
the  form  L.A...AL  ,  where  the  A  s,  L  ' s  and  C  are  l i t­
erals.  This 
is  readily  obtained  from  the  disjunctive 
normal  form  of  the  o r i g i n al  formula.  G  then  defines 
the  goal: 
L . , . . . ,U  are 
top  level  partner  goals  a ll  of  which  must 
be  eventually  established.  We  can  tackle  one  at  a  time 
(though  they  may  be  linked  by  common  variables)  so 
hereafter  we  consider  a  single  goal  G.  A  A . . .M 
-♦  C 
is  an  assertion  implication,  and  c  a  premise.  An  im­
portant  equivalence  for  format  preparation  is 
(A  •*  B  V  C)  ^  (A  A  «B  -*  C).  This  is  used  to  form  the 
various  general  contrapositives  needed  for  complete­
ness.  We  extend  this  to  generate  <-A  -»  £  from  A,  for 
example. 

If  the  goal 

is  believed 

to  follow  d i r e c t ly  from 
the  use  of  I 
the  assertions  (as  is  usually  the  case) 
may  be  avoided.  Otherwise,  add  p.  -*  G,  the  assertion 
generated  from  the  goal, 
assertion  A. A. . .M 
A  A...AA  A  ~C  -*  ^,  and  for  each  premise  add  i*C  —  j£. 
Only  one  such  formula  need  be  added  to  the  assertion 
l i st 
necessary  to  establish  the  r e s u l t. 

if  some  version  of  that  assertion  is  believed 

-»  C  add  the  general  contrapositive 

to  the  assertions  and  for  each 

It 

is  necessary  to  consider, 

for  each  assertion 
-•  C,  m  general  contrapositives 
to  be 

implication  A  A...AA 
plus  the  o r i g i n al  assertion  if  completeness  is 
preserved.  There  should  be  one  general  contrapositive 
A  A...A 
order  of  antecedents 

,».ft  A  (  -»  «A 
in  any  assertion 

for  each  i.  The 
immaterial. 

A - ^A  A 

is 

3.  The  MESON  Procedures 

The  procedures  presented  here  are  for  proposition­

al  (variable  free)  problems.  We  w i ll  make  occasional 
reference  to  the  requirements  of  the  procedures  u t i l i z­
ing  variables. 

The  procedures  represent  syntactic  systems  for 
adding  to  a  goal  tree  information  about  goal-subgoal 
relationships  and  establishment  of  goals.  The  proce­
dures  return  "success"  or  " f a i l u r e"  according  to  wheth­
er  the  top  goal  can  be  established  or  not  respectively. 
the  a b i l i ty  to  return  " f a i l u r e"  disappears 
Of  course, 
when  substitution  is  allowed,  e . g ., 
f i r s t - o r d er  formu­
l a t i o n s,  A  returned  value  of  " f a i l u r e"  for  a  problem 
indicates  either  the  top  goal  does  not  follow  from  the 
assertions  or  the  search  ordering  and  goal  generation 
and  deletion  strategies  specified  by  the  planning  rou­
tine  are  inadequate  for  the  problem. 
( It  is  possible 
to  w r i te  a  complete  planning  routine  which  theoretic­
a l ly  always  returns  "success" 
for  soluable  problems.) 

We  w i ll  now  present  two MESON  procedures  for  goal 

155 

tree  analysis  Incorporating  the  new  rules  discussed 
above.  The  procedures  are  l o g i c a l ly  divided  into  four 
subprocedures  with 
datejnarks"  and  "update_goals". 

labels  " i n i t i a l i z e ",  "loop",  "up-

The  instructions  placed  at  the  label  " i n i t i a l i z e" 
to  be 

define  GOALS  (the  set  of  goals  to  be  attempted) 
the  set  consisting  of  only  the  top  goal  and  also  i n i­
t i a l i ze  the  goal 

tree. 

The  instructions  placed  at 

the  label  "loop"  select 

a  goal  G  from  GOALS,  an  operation  to  be  performed  and 
an  assertion  D  if  needed.  The  selected  operation  is 
then  performed  for  the  goal  G  and  assertion  D.  Those 
operations  t ry  to  establish  goals  or  create  subgoals. 

The  instructions  placed  at 

the  label  "update_ 

marks"  mark  a  goal  "established"  if  each  of  a  l i st  of 
partner  successors 
dicted"  or  "displaced". 
tion  set  of  subgoals  of  a  goal  is  established, 
goal 

is  marked  "established",  "contra­
if  each  of  a  conjunc­

is  established. 

Thus, 

the 

The  instructions  placed  at 

the  label  "update__ 
goals"  add  newly  generated  subgoals  to  the  tree  and 
GOALS  provided  certain  acceptance  c r i t e r ia  are  met. 

The  selection  of  the  next  goal  in  GOALS  to  be 

operated  upon  and  the  selection  of  the  operation  and 
the  assertion  to  be  used  in  operating  on  that  goal  are 
assumed  to  be  accomplished  by  some  externally  speci­
fied  planning  routine  ("the  planner"). 
The  planner, 
in  addition  to  specifying  a  search  strategy,  may  r e­
s t r i ct  or  t o t a l ly  eliminate  use  of  some  of  the  opera­
t i o n s.  For  example, 
t r a d i t i o n al  goal  tree  procedures 
without  the  contradiction  mechanism  correspond  to  a 
planner  which  never  uses  the  operation  at  "op3". 

The  planner,  by  applying  the  operation  at  "op5" 

to  a  goal,  removes  the  goal  from  GOALS  and  thereby 
s i g n i f i es 
that  no  more  operations  w i ll  be  applied  to 
the  goal. 

If  one  wishes  to  insure  completeness, 

the  planner 
must  in  some  order  process  a ll  operations  (except  the 
operation  at  "op5") 
for  each  goal  and  p o t e n t i a l ly  ap­
plicable  assertion.  The  planner  may  select  the  goals 
of  a  conjunctive  set  of  goals  in  any  desired  order 
to 
attempt  their  establishment. 
no  assumption  as  to  whether  the  search  is  d e p t h - f i r s t, 
b r e a d t h - f i r s t,  or  Borne  mixture  of  these. 

The  procedure(s)  make 

MESON  procedure 

op3: 

op4: 

set  of  the  antecedents  of  D  and  go  to 
update_goals.  Otherwise  go  to  loop. 

If  G  matches  the  complement  of  an  ances­
tor  of  G,  mark  G  "contradicted"  and  go 
to  update_marks.  Otherwise  go  to  loop. 

If  G  matches  an  unexpanded  partner  of  G 
not  marked  "displaced"  or  an  unexpanded 
ancestor  partner  of  G,  mark  G  "displaced" 
and  go  to  update_marks.  Otherwise  go  to 
loop. 

op5; 

Delete  G  from  GOALS  and  go  to  loop. 

update  marks; 

If  G  is  top  goal,  exit  procedure  with 
"success". 
If  a ll  partner  goals  of  G 
are  marked  "established",  "contradicted" 
or  "displaced", 
l et  G1  be  the  parent  of 
G,  set  G-G,,  mark  G  "established"  and  go 
to  updatejnarks.  Otherwise  go  to  loop. 

update_goals: 
test  1: 

If  a  member  of  A  is  i d e n t i c al  to  G  or  an 
ancestor  of  G,  go  to  loop, 

test  2: 

II  a  member  oi  A  is  complementary 
another  member  of  A,  a  partner  of  G  or 
an  ancestor  partner  of  G,  go  to  loop. 

to 

Otherwise  add  the  members  of  A  to  GOALS 
and  to  the  goal  tree  as  a  conjunctive 
set  of  successors  of  G  and  go  to  loop. 

the  equality  r e l a t i o n. 

The  MESON  procedure  for  equality  incorporates 
for  handling 

rules 
It  d i f f e rs 
from  the  MESON  procedure  in  that  three  new  operations 
are  added.  Also,  the  rules  for  disregarding  newly  gen­
erated  subgoals  (at  "test  7"  and  "test  2")  have  not 
been  proven  to  preserve  completeness  although  we  be­
lieve  completeness 
is  preserved  w i th  these  rules  ap­
p l i e d.  We  maintain  the  update_goals  subprocedure  in 
the  MESON  procedure  for  equality  with  the  admonition 
that  if  completeness  is 
should  be  bypassed  (at  present). 

to  be  preserved  these  rules 

it 

For 

technical  reasons, 

the  form  a=a  for  each  term  a  or, 

in 
premises  of 
in  a 
setting  using  free  variables  and  substitutions,  one 
must  put  in  x=x  and  f ( x , , . , . ,x  )  =  f ( x . , . . . ,x  ) 
for 
each  n-ary  function  symbol  f.  Such  axioms  can  be  r e­
placed  by  appropriate  procedure  rules 

is  necessary 

if  desired. 

to  put 

if 

Let  GOALS  be  a  set  consisting  of  only 
the  top  goal. 
to  the 

I n i t i a l i ze  the  goal  tree 

top  goal. 

MESON  procedure  w i th  equality 

i n i t i a l i z e: 

(same  as  for  MESON  procedure) 

i n i t i a l i s e; 

loop: 

If  GOALS  Is  empty,  e x it  procedure  with 
" f a i l u r e ".  Let  G  be  a  goal  in  GOALS 
selected  by  the  planner.  The  planner 
selects  one  of  the  following  operations 
to  be  performed  on  G  and  selects  D,  a 
premise, 
implication  or  general  contra-
positive  of  implication,  as  required  by 
the  operation. 

loop: 

op6: 

op1: 

If  G  matches  the  premise  D,  mark  G 
"established"  and  go  to  update_marks. 
Otherwise  go  to  loop. 

op2: 

If  G  matches  the  consequent  of  D,  where 
D  is  an  implication  or  general  contra-
positive  of  i m p l i c a t i o n,  l et  A  be  the 

the 

following  operations) 

(preface  and  operations  1-5  same  as  for 
MESON  procedure;  only  change  is  the  ad­
d i t i on  of 
If  G  contains  a  term  matching  term  a 
where  a=b  or  b=a  is 
the  consequent  of 
D,  where  D  is  a  premise,  implication  or 
general  contrapositive  of  implication, 
l et  A  be  the  set  consisting  of  G  with  a 
single  instance  of  a  replaced  by  b  plus 
the  antecedents  of  D  and  go  to  update_ 
goals.  Otherwise  go  to  loop. 

op7: 

If  the  consequent  of  D,  where  D  is  a 
premise, 
implication  or  general  contra-
positive  of  implication  contains  a  term 
matching  term  a  where  G  is  afb  or  b f a, 
l et  A  be  the  set  consisting  of  the 

op8; 

complemented  consequent  of  D  with  a 
single  instance  of  a  replaced  by  b  plus 
the  antecedents  of  0  and  go  to  update_ 
goals.  Otherwise  go  to  loop, 

If  H  is  art  ancestor  of  G  or  G  i t s e lf 
and  H  (resp.  G)  contains  a  term  matching 
term  a  where  G  {resp.  H)  is  a=b  or  b=a, 
let  A  be  the  set  consisting  of  H  (resp. 
G)  w i th  a  single  instance  of  a  replaced 
by  b  and  go  to  update_goals.  Otherwise 
go  to  loop. 
(Note: 

see  examples  below.) 

update_marks: 

(same  as  for  MESON  procedure) 

update_goals; 

(same  as  for  MESON  procedure) 

reading  the 

that  G  contains 

We  attempt  to  c l a r i fy  op8  and  shed  l i g ht  on  i ts 
usefulness.  Consider  the  case  that  H  is  G  and  G  is 
a=b,  a  and  b  simple  constants.  Then, 
"respectively"  case,  we  see 
term  e  and 
H  is  a=b.  Then  A,  the  possible  new  subgoal,  is  G  with 
replacement, 
i . e .,  b=b.  Taking  the  other  case  (ignor­
ing  the  "respectively")  yields  the  same  possible  sub-
goal.  This  is  certainly  unproductive  and  could  actu­
a l ly  be  deleted  with  no  r i sk  involved.  However, 
in  a 
free  variable  setting  with  substitution  it 
Suppose  the  goal  is  f(x)=x  and  the  sole  premise  is 
f ( f ( x ) ) = x.  By  op8  where  H  is  G  is  f(x)=x,  ignoring 
the  respectively's  (for  v a r i a t i o n ),  we  have  H  contain­
ing  a  term  x  matching  f ( y ),  under  substitution  f(y) 
for  x,  where  G  is  f(y)=y  (the  change  of  variable  name 
is  a  necessary  d e t a i l );  now  a=b  is 
f ( f ( y ) ) = y.  This 
consists  of  H  with  replacement, 
subgoal  matches  the  premise  and  the  desired  result  is 
obtained. 

f(y)=\y.  Then  A 

i . e ., 

is 

important. 

It  is  impossible  to  give  an  adequate  discussion 

f i r st  order 
formulas, 
individual  variables 

w i t h in  this  paper  of  the  modifications  required  to 
i . e .,  allowing  quantifica­
handle 
tion  of 
in  the  problem  statement. 
This  is  best  done  elsewhere  where  space  permits  a  f u ll 
discussion. 
The  modifications  are  generally  straight-
forward 
theory,  in  particular  ME.  See  Loveland 
points  do  a r i s e,  however,  as  suggested  below. 

familiar  with  resolution 

the  reader 

.  Subtle 

is 

if 

Performing  matching  by  use  of  the  general  u n i f i c a­

t i on  algorithm  is  an  important  idea  and,  although  we 
can  conceive  of  reasons  to  select  less  general  substi­
tutions  under  certain  conditions, 
obtaining  the  most  general  substitution  should  not  be 
given  up  l i g h t l y.  This  is  an  important  aspect  where 
knowledge  from  resolution  theory  can  enhance  the  prob­
lem  reduction  method. 

the  advantages  of. 

We  make  two  further  points,  r e a l ly  warnings,  con­

If  the  goal  has 
the  negation  of  the  goal  should 

cerning  adopting  the  above  description  of  the  MESON 
procedure  to  f i r st  order  expressions. 
a  free  variable  in  i t, 
be  made  a  (hypothetical)  premise.  To  see  t h i s,  con­
sider  the  following  example:  Goal:  P(y)  ( i . e .,  we 
want  to  know  if  3yP(y)).  Assertion:  ~P(f(a)) 
Clearly  either  P(a)  or  P(f(a))  holds.  We  need  ^P(x) 
as  a  premise  to  realize  t h i s.  A  second  point:  a  sub­
s t i t u t i on  may  occur  in  a  subgoal  when  applying  an  as­
sertion  implication.  This  substitution  must  be  made 
at  each  occurrence  of  the  replaced  variable  through­
out  the  goal  tree.  Thus  copies  of  the  goal  tree  must 
be  retained  in  such  instances  for  back  up  in  case  of 
f a i l u r e.  A  good  format  for  handling  this 
adopting  the  ME  format  to  the  MESON  procedure  organiza­
t i o n. 

involves 

-♦  P(a). 

4.  Conclusion 

This  paper  can  be  read  simply  for  the  i l l u s t r a­

tions  of  possible  extensions  for  the  problem  reduction 
method.  However,  we  have  attempted  to  convey  inform­
to  the  under­
a l ly  that  resolution  theory  can  contribute 
standing  of  alternate  syntactic  methods.  Other  devices 
of  resolution  such  as 
trees  and  use  of  unit  clauses  from  premises  may  also  be 
of  use.  We  do  believe  that  the  MESON  format,  which 
simply  extends  classical  goal  tree  representation,  may 
present  a  very  useful  way  of 
incorporating  resolution 
ideas 

in  future  problem  solving  programs. 

linear  representation  of  goal 

Bibliography 

1.  Bledsoe,  W.  W,,  R.  S.  Boyer  and  W.  H.  Henneman. 

Computer  proofs  of  l i m it  theorems.  A r t i f i c i al 
Intelligence,  3  (1972),  27-60. 

2.  Gelernter,  H.  Realization  of  a  geometry  theorem-

proving  machine. 
Feldman  (eds.)  Computers  and  Thought.  McGraw-Hill, 
New  York,  1963,  134-152. 

In  Feigenbaum,  E.  A.  and  J. 

3.  Gelernter,  H.  Machine  generated  problem  solving 

graphs.  Proc.  Symp,  Math.  Theory  of  Automata 
(1963),  179-203, 

4.  Gelernter,  H.,  J.  R.  Hansen,  and  D.  W.  Loveland. 

Empirical  explorations  of  the  geometry  theorem  ma­
chine. 
Computers  and  Thought.  McGraw-Hill,  New  York, 
1963,  153-163. 

In  Feigenbaum,  E.  A.  and  J.  Feldman  (eds.), 

5.  Green,  C.  Application  of  theorem  proving  to  prob-
I n t.  Joint  Conf.  on  A r t i f i c i al 

Lem  solving.  Proc. 
Intelligence  (1969),  219-239. 

6.  Hewitt,  C.  Description  and  theoretical  analysis 

(using  schemata)  of  PLANNER: 
ing  theorems  and  manipulating  models  in  a  robot. 
MIT  A r t i f i c i al 
AI  TR-258  (April  1972). 

Intelligence  Laboratory  report 

a  language  for  prov­

7.  Kowalski,  K.  AND/OR  graphs,  theorem-proving  graphs 
and  b i - d i r e c t i o n sl  search.  Machine  Intelligence  7, 
1973. 

8.  Kowalski,  R.  and  D.  Ruehner.  Linear  resolution 

with  selection  function.  A r t i f i c i al  Intelligence  2, 
(1971),  227-260. 

9.  Loveland,  D.  W.  A  simplified  format  for  the  model 
J.  ACM  16, 

elimination  theorem-proving  procedure. 
3  (July  1969),  349-363. 

10.  Loveland,  D.  w,  A  unifying  view  of  some  linear 
Herbrand  procedures.  J.ACM  19,  2  (April  1972), 
366-384. 

11.  Loveland,  D.  W,  Forthcoming  book  on  mechanical 

theorem  proving,  North-Holland  (early  1974), 

12.  Newell,  A.,  J.  Shaw  and  H.  Simon.  Empirical  ex(cid:173)

plorations  of  the  logic  theory  machine. 
Feigenbaum,  E.  A.  and  J,  Feldman  (eds.)  Computers 
and  Thought.  McGraw-Hill,  New  York,  1963,  109-133. 

In 

13.  Nilsson,  N.  J.  Problem  Solving  Methods  in  A r t i f i c i(cid:173)

al  Intelligence.  McGraw-Hill,  New  York,  1971. 

14.  Reiter,  R.  Two  results  on  ordering  for  resolution 

with  merging  and  linear  format. 
1971),  630-646. 

J.  ACM  18  (October 

157 

15.  Reiter,  R.  The  use  of  models  in  automatic  theoTem-
proving.  University  of  B r i t i sh  Columbia  Department 
of  Computer  Science  report  72-09  (September  1972). 

16.  Robinson,  G.  A,  and  L.  T.  Wos.  ParamodulaCion  and 
theories  with  equal(cid:173)

In  Meltzer,  B,  and  D.  Michie  (eds.)  Machine 

theorem-proving  in  f i r s t - o r d er 
i t y. 
Intelligence  4.  American  Elsevier,  New  York,  1969, 
135-150. 

17.  Robinson,  J.  A,  A  machine-oriented  logic  based  on 

the  resolution  p r i n c i p l e.  J.  ACM  12,  1  (January 
1965),  23-41. 

18.  Robinson,  J.  A.  A  review  of  automatic  theorem 

proving.  Proc.  Symp.  App1.  Math.  19  (1966),  1-18. 

19.  Slagle,  J.  R.  A r t i f i c i al  Intelligence:  The  Heuris(cid:173)
t ic  Programming  Approach.  McGraw-Hill,  New  York, 
1971. 

20.  Waldinger,  R.  J.  and  R.  C.  T.  Lee.  PRCW:  a  step 

toward  automatic  program  w r i t i n g,  Proc. 
Conf.  on  A r t i f i c i al  Intelligence  (1969),  241-252. 

I n t.  Joint 

2 1.  Wos,  L.  T.,  D.  F.  Carson  and  G.  A.  Robinson.  The 

u n it  preference  strategy  in  theorem  proving.  AFIPS 
25_  ( F a l l,  1964).  Spartan  Books,  Washington,  615-
621. 

158 

Problem  Statement 

I  have  a  swimming  pool  and  it 
I  w i ll  go  swimming. 
I  w i ll  get  wet. 

I  have  a  swimming  pool. 
If 
doesn't  r a i n, 
If  I  go  swimming, 
If 
Prove  I  w i ll  get  wet. 

It  r a i n s, 

I  w i ll  get  wet. 

A; 
B: 
C: 
D; 

I  have  a  swimming  pool. 
I  go  swimming, 
I  get  wet. 
It 

r a i n s. 

FIGURE  3 

159 

FIGURE  5 

160 

161 

