Algorithms for Identifying Rigid  Subsystems in Geometric  Constraint Systems 

Christophe  Jermann 

AI Lab. 

EPFL, 1015 Lausanne 

Switzerland 

Bertrand Neveu  and  Gilles Trombettoni 

COPRIN Team, INRIA-I3S/CNRS-CERM1CS, 

2004 route des lucioles, BP 93, 
06902 Sophia Antipolis, France 

e-mail: Christophe . Jermann@epf1. ch 

e-mail:  B e r t r a n d. Neveu@sophia . i n r ia . f r, 

G i l l e s . T r o m b e t t o n i © s o p h i a . i n r i a . fr 

Abstract 

The  structural  rigidity  property,  a  generalization 
of Laman's  theorem  which  characterizes  rigid  bar 
frameworks in 2D,  is generally considered a good 
approximation  of rigidity  in  geometric  constraint 
satisfaction  problems  (GCSPs).  However,  it  may 
fail even on simple GCSPs because it does not take 
geometric properties into account. 
In this paper, we question the flow-based algorithm 
used  by  Hoffmann  et ai  to  identify  rigid  subGC-
SPs.  We show that this algorithm may fail because 
of the structural rigidity, but also by design. We in-
troduce a new flow-based algorithm which uses Jer(cid:173)
mann et al.'S characterization of rigidity.  We show 
that this algorithm is correct in 2D and 3D, and can 
be used to tackle the major issues related to rigid(cid:173)
ity:  deciding  whether a  GCSP  is  rigid  or  not and 
identifying rigid (or over-rigid) subGCSPs. 
Keywords:  Geometric  Constraints,  Rigidity  char(cid:173)
acterization, Flow algorithms 

Introduction 

1 
Geometric  constraint  satisfaction  problems  (GCSPs)  arise 
naturally in several areas, such as CAD, robotics and molec(cid:173)
ular biology.  The rigidity concept  is  in  the heart of many  of 
these problems: deciding whether a GCSP is rigid or not, de(cid:173)
tecting rigid or over-rigid sub-parts, and so on. 

Several  methods  [Kramer,  1992;  Bouma  et  ai,  1995; 
Dufourd  et  ai,  1998;  Lamure  and  Michelucci,  1998;  Hoff(cid:173)
mann et ai,  2000; Jermann  et ai,  2000;  Jermann,  2002]  for 
solving  GCSPs  have  to  deal  with  rigidity;  e.g.,  geometric 
decompositions produce sequences of rigid  subGCSPs  to  be 
solved separately and then assembled. 

The  techniques  used  for  rigidity  detection  can  be  classi(cid:173)
fied in two  categories:  pattern-based approaches  [Bouma et 
al,  1995;  Kramer,  1992]  depend  on  a  repertoire  of rigid 
bodies  of  known  shape  which  cannot  cover  all  practical 
instances;  flow-based  approaches  [Hoffmann  et  ai,  1997; 
Lamure and Michelucci, 1998] use flow (or maximum match(cid:173)
ing) machinery to identify subGCSPs verifying the structural 
rigidity, a property based on a degree of freedom count. 

The latter approaches are more general eventhough struc(cid:173)
tural rigidity is only an approximation of rigidity. Heuristics, 

like ad-hoc geometric rules, have been proposed to enhance 
structural  rigidity  capabilities,  none  of which  succeeded  to 
cover the gap between structural rigidity and rigidity. In [Jer(cid:173)
mann et  al,  2002],  we  have defined the  extended structural 
rigidity,  a  new  approximation  of rigidity  which  supersedes 
even the heuristically enhanced characterizations. 

In  this paper,  we  focus  on  the  algorithmic  aspects  of the 
structural characterization of rigidity. [Hoffmann et ai, 1997] 
have proposed a flow-based algorithm called Dense  for this 
purpose.  After  providing  the  necessary  background  (Sec(cid:173)
tion 2), we exemplify the limits of this algorithm and the ca(cid:173)
pabilities of our new algorithm (Section 3). Section 4 presents 
the specificities of our new algorithm and explains its advan(cid:173)
tages:  it  uses  the  extended  structural  rigidity  instead  of the 
structural  rigidity and  it  is  designed  in  a  geometrically cor(cid:173)
rect way.  To conclude, we explain how this algorithm can be 
used to tackle the major issues related to rigidity. 

2  Background 
This  section  provides  the  necessary  background  for the  pa(cid:173)
per.  It formally defines GCSPs,  the rigidity concept and the 
structural  characterizations  of rigidity. 

Fig.  1-a presents a GCSP in 2D composed of 3  lines con(cid:173)
strained by 2 parallelisms and 2 line-line distances; Fig.  1-b 

CONSTRAINTS 

233 

depicts a GCSP in 3D composed of 1  line and 5 points bound 
by 4 point-line incidences and 5 point-point distances. 

We assume that geometric objects are indeformable (e.g., 
no  circle  with  variable  radius).  Also  geometric  constraints 
must  involve  only  positions  and  orientations  of the  objects 
and they must be independent from the global reference sys(cid:173)
tem  (i.e.,  constraints  only  fix  objects  relatively  one  to  an(cid:173)
other).  These  limitations  make  the  structural  characteriza(cid:173)
tions of rigidity easier and are mandatory for geometric solv(cid:173)
ing methods based on rigidity. 

According to these restrictions, a solution to a GCSP S — 
( 0, C)  is composed of one position and orientation for each 
object in O and satisfies all the constraints in C.  For the solv(cid:173)
ing purpose, a GCSP is translated into a system of equations: 
each object is represented by a set of unknowns (over the re(cid:173)
als) which determine its position and orientation; each con(cid:173)
straint  becomes  a  system  of equations  on  the  unknowns  of 
the objects it constrains. 
2.2  Rigidity 
Rigidity  is  defined  w.r.t.  movements.  A  movement  in  a 
GCSP  is  either  a  deformation  (if it  does  not  preserve  the 
relative  positions  of  the  objects)  or  a  displacement  (rota(cid:173)
tion+  translation).  Intuitively,  a  GCSP  is  rigid  if  it  admits 
no  deformation,  and  all  the  displacements of the  geometric 
space.  It  is  under-rigid if it  admits  some  deformations,  and 
over-rigid if it  does not admit some  displacements  or has no 
solution.  More  formal  definitions  of rigidity  can  be  found 
in[Whiteley,  1987]. 

In Fig.  1-b, the subGCSP CDF  is  rigid since a triangle  is 
indeformable and admits all translations and rotations in 3D. 
The subGCSP AF is under-rigid:  point F can move indepen(cid:173)
dently  of line  A  since  there  is  no  constraint between  them. 
The subGCSP ACDEF  is over-rigid since it has no solution: 
generically, it is impossible to place a point at the intersection 
of the 3  spheres (= 3  distance constraints) which centers are 
aligned. 

2.3  Structural  Rigidity 
The structural rigidity  corresponds to  an  analysis  of degrees 
of freedom (DOF) in a GCSP. Intuitively, one DOF represents 
one independent movement in a GCSP. More formally: 

Structural  rigidity  is  a  generalization  of  Laman's  theo(cid:173)
rem  [Laman,  1970],  which  characterizes generic  rigidity  of 
2D bar frameworks.  It is based on the following intuition:  if 
a GCSP admits less (resp.  more) movements than the num(cid:173)
ber of independent displacements in the considered geometric 

2.4  Extended  Structural  Rigidity 
The extended structural rigidity (es__rigidity in short) is based 
on the degree of rigidity (DOR) concept. The DOR of a sub(cid:173)
GCSP is the number of independent displacements it admits; 
it depends on the geometric properties it verifies.  For exam(cid:173)
ple, the DOR of two lines in 2D is 3 if they are not parallel, 2 
if they are parallel; the parallelism property can be an explicit 
constraint, but it can also be induced by the constraints of the 
GCSP embedding these lines.  In this second case, computing 
the DOR may be equivalent to geometric theorem proving. 

The principle behind the extended structural rigidity is the 
following:  a GCSP is rigid if all  its movements are displace(cid:173)
ments.  Hence,  comparing  its  DOF to  its  DOR allows us to 
determine  if it  admits  movements  (DOF)  which  arc  not  dis(cid:173)
placements (DOR), i.e., deformations. 

is  superior 

to 

The  es_rigidity 

(e.g., 
es_rigidity  exactly  corresponds  to  rigidity  on  every  subGC-
SPs in Fig.  1).  See [Jermann et  al.,  2002] for a comparison 
between s_rigidity and es_rigidity and details about the DOR 
concept. 

the  s_rigidity 

234 

CONSTRAINTS 

Figure 2:  Object-constraint networks and flow distributions 

properties of these  lines:  since they  are parallel,  K  =  2  (in(cid:173)
stead of 3 in algorithm Dense).  Thus, the flow can be satu(cid:173)
rated: a capacity 4 (two constraints plus the overflow) exactly 
matches the 4 DOFs of  AB;  the GCSP is not identified over-
rigid  by  our algorithm.  Further overflow applications would 
allow to identify the GCSP as well-rigid. 
Example 2 
The second example (Fig.  1-b;  in  3D)  illustrates the second 
difference. Its object-constraint network is depicted in Fig. 2-
d.  This figure shows the application of an overflow 6 via the 
virtual constraint 7? onto the 3 points C, E and F by our algo(cid:173)
rithm;  the  overflow cannot  be  distributed  completely,  which 
signals  an  over-rigid  subGCSP:  ACDEF,  found  by  adding 
reachable objects from R in the residual graph. 

Algorithm Dense  applies the overflow directly through a 
constraint-node. Since all constraints are binary in this exam(cid:173)
ple,  Dense  cannot apply an overflow to the same set of ob(cid:173)
jects as our algorithm.  More generally, Dense cannot apply 
the overflow to all subGCSPs and can miss rigid or over-rigid 
ones.  Moreover, applying the overflow 6 to a pair of objects 
in this GCSP leads to an incorrect answer, as it was the case 
in the previous example; e.g., segments which are rigid would 
be identified over-rigid. 

These examples show that some simple and very common 
subGCSPs in 2D and 3D, like parallel lines, triangles or seg(cid:173)
ments, cannot be treated correctly by algorithm Dense1. 

In the following section, we detail the differences between 
algorithm Dense and our new algorithm and we present their 
consequences. 

3  Overview 
In  this  section,  we  exemplify  the  contribution  presented  in 
this paper on the GCSPs in Fig.  1. We illustrate the two main 
differences between algorithm Dense  and our algorithm: 

1.  In our algorithm, the overflow depends on the geometric 
properties of the objects it is applied to, while it depends 
only on the dimension of the geometric space in Dense. 
2.  In our algorithm, the overflow is applied via a dedicated 
node  R which can be attached to any subset of objects, 
while  it  is  applied  directly  via  one  constraint-node  in 
Dense. 

Example  1 
The first example (Fig.  1-a;  in 2D) highlights the first differ(cid:173)
ence.  Fig. 2-a presents the object-constraint network associ(cid:173)
ated to this GCSP.  In this picture,  one can see the  overload 
A'  =  3  applied on  the  first  constraint by  algorithm Dense. 
This  constraint  is  linked  to  two  lines,  A  and  B,  which  are 
parallel  and  lie  at prescribed  distance in the plane;  AB  is  a 
rigid subGCSP. However, one can easily see that the overload 
cannot be distributed completely since a capacity 5 (two con(cid:173)
straints plus the overload) is applied to two lines having only 
4 DOFs.  Hence, the GCSP is identified as over-rigid since it 
contains a sub-GCSP with less than 3 DOFs. 

Fig.  2-b displays our algorithm behavior when the virtual 
constraint R is  linked to the same subGCSP,  AB.  The value 
of the  overflow  K  is  computed  according  to  the  geometric 

4  Algorithms 
In  this  section,  we  present  Hoffmann  et  al.'s  Dense  algo(cid:173)
rithm  in  comparison  to  our  new  algorithm.  Both  use  flow 
machinery on the object-constraint network representing the 
GCSP.  Our  algorithm  has  two  main  differences  with  algo(cid:173)
rithm  Dense: 

•  It uses es_rigidity  instead  of s_rigidity. 
•  It  distributes  flow  in  a geometrically correct way  in  the 

network. 

These new features are achieved thanks to two major mod(cid:173)
ifications in the D i s t r i b u te  function used by Dense (sec 
beginning of Section 3). 

We  introduce  first  the  principle  of flow-based character(cid:173)
ization  of  rigidity;  then  we  present  and  discuss  function 
D i s t r i b u te  which  is  the key to our contribution.  Finally 
we explain how this function is used to design algorithms for 
the main problems related to rigidity. 

Flow-based  Rigidity Detection 

4.1 
From the  geometric point of view,  the principle of structural 
characterization of rigidity is to check if a GCSP admits only 
displacements.  Hence, flow-based rigidity identification can 
be understood as follows: 

'in practice [Sitharam, 2000], Dense embeds heuristic rules to 
prevent this kind of simple failures, but more complicated examples 
can still mistake the algorithm since no rule-based approach can han(cid:173)
dle all the singular cases. 

CONSTRAINTS 

235 

1.  remove K displacements from the GCSP by introducing 

A' DOFs on the constraint side; 

2.  check  if  an  over-constrained  subGCSP  S'  exists  by 
computing  a  maximum  flow  in  the  overloaded  object-
constraint  network; 

3.  if so  A"  verifies  DOF(S')<K 
Indeed, a maximum  flow  in the object-constraint network 
represents  an  optimal  distribution  of the  DOFs  of the  con(cid:173)
straints  among the  DOFs  of the  objects.  If it  does  not satu(cid:173)
rate all the arcs outgoing from the source, some constraints' 
DOFs  cannot be  absorbed by  the  objects,  i.e.,  the  GCSP  is 
over-constrained. 
In  this  case,  there  exists  a  subGCSP  S' 
such  that  DOF(S")<0.  When  an  overflow  K  is  applied  in 
the network on the constraint side, the identified subGCSP S' 
verifies  DOF(S")<A'. 
[Hoffmann et  al.,  1997]  have  proven 
that S' is then induced by the objects traversed during the last 
search for an augmenting path, i.e., by the objects reachable 
from the overloaded constraint-node in the residual graph. 

4.2  Function D i s t r i b u te 
Function D i s t r i b u te  [Hoffmann et al., 1997]  implements 
the principle presented above.  We present our version of this 
function and explain why and  how it  differs from Hoffmann 
et al. 's one. 

As already said, applying an overflow A corresponds, from 
the  geometric  point  of view,  to  removing  A'  displacements 
from the objects linked to this constraint.  But nothing ensures 
that the subGCSP linked to a single constraint allows A' inde(cid:173)
pendent displacements:  removing K DOFs from a subGCSP 
iS"  with  DOR(S')<K  is  geometrically  incorrect2. 

For  instance,  consider a  subGCSP  composed  of 2  points 
linked  by  a  point-point  distance  in  3D.  This  GCSP  allows 
only  5  of the  6  independent  displacements  (3  rotations  * 
3  translations)  of the  3D  space  since  they  lack  the  rotation 
around the line going through them.  Therefore, removing 6 
displacements  from  a  couple  of points  is  geometrically  in-
correct.  However,  Hoffmann et al.'s function D i s t r i b u te 
does so  when the distance constraint binding the two points 
in 3D is overloaded with A'  =  6. 

In  order  to  distribute  the  flow  in  a  geometrically  correct 
way,  we propose to  introduce a Active  constraint  R,  having 
DOF(R.)=A'.  This constraint can be linked only to subset of 
objects ()'  allowing K independent displacements, i.e.  induc(cid:173)
ing a subGCSP  S"  having DOR(S")>  K.  K  and  S'  are two 
parameters of our function  D i s t r i b u t e. 

Function  O v e r l o a d e d - N e t w o rk  returns  the  object-
constraint network corresponding to S where the fictive con(cid:173)
straint 7?, set with capacity A',  is linked to the objects of S". 
The  maximum  flow  computation  is  achieved  by  a  standard 

2Remember that the DOR represents the number of independent 

displacements admitted by a subGCSP. 

flow algorithm3 like F o r d F u l k e r s on [Ford and Fulkerson, 
1962].  This  function  returns  the  set  V  of objects  reachable 
from the virtual constraint R in the residual graph if the max(cid:173)
imum  flow  cannot distribute  the  whole  overload,  an  empty 
set  V  otherwise.  Function  O b j e c t - I n d u c e d - s u b G C SP 
returns  the  subGCSP  S" 
S"  verifies 
DOF(S")<A"  or S"  is empty. 

induced  by  V. 

The 

two  differences  between  our  version  of 

the 
D i s t r i b u te  function  and  Hoffmann  et a/.'s  version  have 
already been mentioned: the use of a dedicated constraint for 
overflow distribution, which allows to distribute the overflow 
to any subset of objects; and the adaptation of the overflow to 
the set of objects on which it  is applied, which renders over(cid:173)
flow  application geometrically correct. 

Example:  The  call  to  D i s t r i b u te  (S,3,dAB)  (Hoff(cid:173)
mann et a/.'s version) for the GCSP  in  Fig.  1-a is presented 
in Fig. 2-a.  Since the overflow cannot be fully distributed, the 
subGCSP AB is returned.  This is correct from the flow point 
of view  since  DOF(AB)=2 
is  less  than  A'  =  3.  However, 
from  the  geometric point  of view,  it  is  incorrect to  interpret 
this result as an over-rigidity in the GCSP. 

For  the  same  subGCSP,  our  D i s t r i b u te 

function 
the  overflow 
is  called  differently: 
can  be  at  most  2. 
to 
the  call 
D i s t r i b u te  [S, 2, AB).  The  overflow  can  be  distributed 
fully:  no  subGCSP  is  returned.  Further similar calls  would 
allow to conclude that this GCSP is not over-rigid. 

since  DOR(,4S)=2, 
Fig.  2-b  presents 

complexity  of  our 

Time  Complexity:  The 
tion  D i s t r i b u te 
F o r d F u l k e r s o n; 
number  of nodes  and  m  the  number  of arcs. 
equivalent to the complexity of Hoffmann et al.'s version. 

func(cid:173)
is  dominated  by 
that  of  function 
it  is  0(n2(n  +  m))  where  n  is  the 
It  is  strictly 

Note  that  if several  calls  to  this  function  are  performed, 
it  could  be  modified  to  compute  maximum  flow  in  an 
incremental way, yielding a better complexity. 

Algorithms  For  Rigidity  Detection 

4.3 
Based on the D i s t r i b u te function, several algorithms can 
be designed to tackle the major problems related to the rigid(cid:173)
ity  concept. 
[Hoffmann  et  al.,  1997]  have  proposed  the 
Dense  and M i n i m a l _ D e n se algorithms to identify a well 

3In [Hoffmann et al.,  1997], function D i s t r i b u te is specifi(cid:173)

cally designed for binary constraints and flow distribution is merged 
with network construction and subGCSP identification. 

236 

CONSTRAINTS 

or over-rigid subGCSP and minimize it (using a classical lin(cid:173)
ear minimization process).  These  algorithms can be  repro(cid:173)
duced using our  function  D i s t r i b u t e.  This  allows  us to 
tackle the  same problems in  a geometrically correct manner 
and  with  a  better  characterization  of rigidity:  the  extended 
structural rigidity.  We will show on algorithm Dense how to 
introduce our D i s t r i b u te  function in  existing algorithms. 

Algorithm  D e n se  Versus  Algorithm  O v e r - R i g id 
Schematically,  algorithm  Dense  operates  by  calling  the 
D i s t r i b u te  function for each constraint in the GCSP until 
a non-empty subGCSP is returned.  The overload is induced 
by  the  dimension  of the considered geometric  space:  it  rep(cid:173)
resents  the  maximum  number of independent displacements 
in  this  space (3  in  2D,  6  in  3D).  Dense  is  supposed to  re(cid:173)
turn only over-rigid subGCSPs since returned GCSPs do not 
admit  all  the displacements  allowed  by the  considered geo(cid:173)
metric space. 

In  fact,  Dense  is  incorrect  since  it  may  remove  more 
DOFs  than  the number of displacements admitted by a  sub(cid:173)
GCSP. For instance, two parallel lines admit only 2 displace(cid:173)
ments in 2D; hence, removing 3 displacements from two par(cid:173)
allel lines is geometrically incorrect in 2D. 

To  obtain  a  geometrically  correct  version  of  algorithm 
Dense,  we  propose  to  use  the  es_rigidity  instead  of  the 
s_rigidity,  i.e. 
the  DOR  is  the  overload;  also,  we  use  our 
D i s t r i b u te  function instead of Hoffmann et al 's one. 

a 

new 

in 

This 

results 

algorithm, 
to 

called 
O v e r - R i g id  which  performs  one  call 
function 
D i s t r i b u te  (S,  DOR  (S')  ,S'))  for each  S'  C  S  to  iden(cid:173)
tify over-es_rigid subGCSPs. Indeed, if the call for a given S' 
returns  a  non-empty  subGCSP  S"\  then  it  verifies  DOF(S") 
<  DOR(5'),  a  sufficient  condition  for  being  over-es_rigid 
(see  Def.  4).  Unfortunately,  the  number  of  subGCSPs  is 
exponential, which would  lead  to  an  exponential number of 
calls to function D i s t r i b u t e.  However, we will show that 
it  is  sufficient  and  correct to  apply this  function only  to  the 
DOR-minimal subGCSPs (see Def. 6 below), which gives the 
following algorithm: 

subGCSPs  generated  by  DOR-Minimals  ( 5 ).  Algorithm 
O v e r - R i g id then proceeds as follows: 

1.  First  turn,  S'  =  BC  and  K  =DOR(/?C)=5.  Fig.  2(c) 
represents the call to D i s t r i b u te  ( S , 5 , 5 0 ).  All the 
arcs outgoing from the source being saturated, no over-
cs_rigid subGCSP is identified. 

2.  At  this  turn,  S'  =  CEF  and  K  =DOR(CEF)--6.  The 
call  to  D i s t r i b u te  (S,6,CEF)  is represented  in  fig(cid:173)
ure 2(d). This turn, the arc S --> R is unsaturated. Since 
the  set  of object-nodes  traversed  during the  last  search 
for  an  augmenting  path  is  {A, C, D, E, F),  the  identi(cid:173)
fied  subGCSP  is  ACDEF  which  is  over-es_rigid. 

On  the  same  example,  algorithm  Dense  would  identify 
each segment (2 points  +  1  distance) and each point on the 
line A as an over-rigid subGCSP, which is false. 

Properties  of algorithm  O v e r - R i g id 

To  prove  the  correctness  and  completeness  of  algorithm 
O v e r - R i g i d, we need the following lemmas which estab(cid:173)
lish properties on the DOR concept and on flow distribution: 

Lemma 1  Let S he a GCSP and S'  C  S"  C  S two subGC-
SPs.  Then  DOR(S')  <  DOR(S"). 

Proof:  Each  unit of DOR in a GCSP represents an  indepen(cid:173)
dent  displacement  (translation  or  rotation).  Adding  a  new 
object o with  some  constraints to  a  subGCSP  Sf  cannot re(cid:173)
move  the  independent  displacements  already  granted  to  S' 
since  constraints  are  independent  from  the  global  reference 
system.  Thus, DOR(S') <  DOR(S' U  {o}).U 

Proof:  Let G$>  be the object-constraint network  overloaded 
for  S"  and  Gs"  the  network  overloaded  for  S".  The  only 
difference between these two networks resides in the fact that 
there  are  more arcs  of the  type  R  —*  o in  Gs' •  Thus,  it  is 
more difficult to distribute an overflow in Gs"  than in Gs,m.  if 
a maximum flow in Gs'  cannot saturate all the arcs outgoing 
from the source, a maximum flow in  GS"  cannot either.U 

We will now prove the completeness, correctness and dis(cid:173)

cuss the time complexity of our algorithm. 

CONSTRAINTS 

237 

Completeness  of O v e r - R i g i d: 

Algorithm  O v e r - R i g id  applies  an  overload  only  for 
each  element  in  the  set  M  of all  DOR-minimal  subGCSPs 
(computed by DOR-Minimals  ( 5 ) ).  Lemma 2 ensures that 
if is sufficient to distribute an overload for each DOR-minimal 
subGCSP,  since  any non  DOR-minimal  subGCSP  contains, 
by definition, DOR-minimal subGCSPs.D 

Time  Complexity  of O v e r - R i g i d: 

Let 

us 

of 

The  complexity  of algorithm  O v e r - R i g id  depends  on 
the number of DOR-minimal subGCSPs.  We have proven by 
enumeration  that  the  number  of objects  in  a  DOR-minimal 
subGCSP is 2 in 2D and 3 in 3D for GCSPs including points, 
lines and planes constrained by distances, angles, incidences 
and parallelisms.  Thus, for GCSPs in this class, the number 
of DOR-minimal  subGCSPs is 
where n is the number 
of objects and d the  dimension of the  geometric  space  (2  or 
3). 

call 

the 
function 
DOR-Minimals,  and 
that  of  function  D i s t r i b u t e, 
discussed  in  the  previous  section.  Then,  the  worst-case 
complexity  of algorithm 

complexity 

C1  is generally the complexity of geometric theorem prov(cid:173)
ing, i.e., it is exponential. However, in some practical classes 
of GCSPs,  like mechanisms or bar frameworks, it  is polyno(cid:173)
mial or even constant.  Moreover, heuristic DOR computation 
can be used when geometric theorem proving is required but 
not affordable.  In these cases,  C\  can be neglected in com(cid:173)
parison to C2.  We end up with 
In com(cid:173)
parison,  the  complexity  of algorithm  Dense  is  0(m  *  n2  * 
(n + m)).  Thus, the overhead to obtain a geometrically cor(cid:173)
rect algorithm is approximately linear in 2D, and quadratic in 
3D. 
4.4  Other algorithms 
Function  D i s t r i b u te  can  be  used  in  a  similar  way  to 
tackle the major problems related to rigidity:  identifying rigid 
subGCSPs (just by  changing the value of the overflow in al(cid:173)
gorithm O v e r - R ig i d ), deciding if a GCSP is rigid (by one 
call to Over-Rigid and a DOF count), finding a minimal well-
or over-rigid subGCSP (by classical minimization step, as in 
Minimal__Dense).  For all  these problems,  using our new 
algorithms and the  es_rigidity instead of the  s_rigidity  leads 
to geometrically correct and more reliable algorithms. 

4.5  Conclusion 
The  new  design  of  function  D i s t r i b u te  allows  a  more 
general  use  of this  function: 
the  flow  distribution  is  now 
performed in  a  geometrically  sound  manner and  allows  for 
checking  a  better  characterization  of  rigidity.  The  DOR-
minimal  concept and  its properties have  appeared to  be  the 
key to obtain a new  family of polynomial algorithms for the 
major problems related to rigidity. 

These  new  algorithms  can  handle  GCSPs  in  2D  and  3D 
correctly with respect to the es_rigidity. They can handle GC(cid:173)
SPs with constraints like parallelism or incidence, which was 
not possible with Hoffmann et al. 's algorithms. Indeed, these 
constraints introduce geometric properties in GCSPs, leading 

to  subGCSPs  with  a  DOR  different  from  the  number of in(cid:173)
dependent displacements in d-space.  This kind of constraints 
are  ubiquitous  in  practical  applications  (architecture,  CAD, 
mechanisms) and our new algorithms open a way for reliable 
industrial use in these domains. 

References 
[Bouma et a/.,  1995]  W.  Bouma,  I.  Fudos, C M.  Hoffmann, 
J. Cai, and R. Paige.  Geometric constraint solver.  Com-
puter Aided Design,  27(6):487-501,1995. 

[Dufourd et al., 1998]  J.-F.  Dufourd,  P.  Mathis,  and 
P. Schreck.  Geometric construction by assembling solved 
subfigures.  Artificial Intelligence,  99(1):73-119,  1998. 

[Ford and Fulkerson, 1962]  L.R.  Ford  and  D.R.  Fulkerson. 

Flows in Networks.  Princeton University Press,  1962. 

[Hoffmannetal,  1997]  C M.  Hoffmann,  A.  Lomonosov, 
and  M.  Sitharam.  Finding  solvable  subsets  of constraint 
graphs. In Principles and Practice of Constraint Program(cid:173)
ming CP'97, pages 463-477,  1997. 

[Hoffmann et al., 2000]  C M.  Hoffmann,  A.  Lomonosov, 
and M. Sitharam.  Decomposition plans for geometric con(cid:173)
straint  systems.  In Proc.  J.  Symbolic  Computation 2000, 
2000. 

Jermann, 

[Jermann et a/., 2000]  C 

Trombettoni, 
A  constraint  program(cid:173)
B.  Neveu,  and  M.  Rueher. 
ming  approach  for  solving  rigid  geometric  systems. 
In 
Principles  and  Practice  of Constraint  Programming,  CP 
2000, volume  1894 of LNCS, pages 233-248,2000. 

G. 

[Jermann et al., 2002]  C  Jermann, B. Neveu, and G.  Trom(cid:173)
bettoni. On the structural rigidity forgesps. In Proceedings 
of the  4fh  International  Workshop  on  Automated Deduc-
tion in Geometry, 2002. 

[Jermann, 2002]  C  Jermann.  Resolution  de  contraintes 
geometriques  par  rigidification  recursive  et  propagation 
d'intervalles.  These  de  doctorat,  Universite  de  Nice  -
Sophia Antipolis, 2002. 

[Kramer,  1992]  G.  Kramer.  Solving  Geometric  Constraint 

Systems. MIT Press, 1992. 

[Laman,  1970]  G.  Laman.  On graphs and  rigidity  of plane 

skeletal structures. J.  Eng. Math., 4:331-340,1970. 

[Lamure and Michelucci,  1998]  H. 

and 
D.  Michelucci.  Qualitative  study  of  geometric  con(cid:173)
straints.  In B. Bruderlin and D. Roller, editors, Geometric 
Constraint  Solving  and  Applications,  pages  234-258. 
Springer, 1998. 

Lamure 

[Sitharam, 2000]  M.  Sitharam.  Personal communication on 
the  minimal  dense  algorithm.  University  of Florida  at 
Gainesville, 2000. 

[Whiteley,  1987]  W.  Whiteley.  Applications  of the  geom(cid:173)
etry  of rigid  structures. 
In  Henry  Crapo,  editor,  Com-
puter  Aided  Geometric  Reasoning,  pages  219-254.  IN-
R1A, 1987. 

238 

CONSTRAINTS 

