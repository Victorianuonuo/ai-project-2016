ON  THE  IMPLEMENTATION  OF  AMBIT/G:  A  GRAPHICAL  PROGRAMMING  LANGUAGE* 

P.  D.  Rovner 

M . I . T.  Lincoln  Laboratory 

Lexington,  Massachusetts 

D.  A.  Henderson,  Jr. 

Project  MAC 

Massachusetts 

Institute  of  Technology 

Cambridge,  Massachusetts 

Summary 

This  paper  deals  w i th  the  implementation 
of  an  interactive  graphical  programming  language 
for  the  manipulation  of  directed  graphs. 
I n t e r e s t(cid:173)
ing  aspects  of  the  design  and  a  user's  v i ew  of  the 
f a c i l i t i es  are  presented.  The  language  is  a  m o d i(cid:173)
fied  version  of  A M B I T / G ;1  a  brief  description  of 
AMBIT/G  is  contained  in  the  i n t r o d u c t i o n. 

Introduction 

AMBIT/G  is  a  graphical  programming  l a n(cid:173)

for  the 

guage,  developed  by  C h r i s t e n s e n, 
manipulation  of  directed  graphs.  The  data  upon 
w h i ch  an  AMBIT/G  program  operates  is  a  t w o-
dimensional  network  of  nodes  and  directed  l i n ks 
between  nodes.  Each  node  in  this  data  graph  has 
an  associated  shape,  and  each  shape  has  a 
number  of  special  points  from  w h i ch  links  are 
allowed  to  emanate.  Each  of  these  link  departure 
points  (LDP's)  may  have  at  most  one  departing  l i n k. 
An  arbitrary  number  of  links  may  terminate  at  any 
node.  Each  node  in  the  data  graph  may  have  a 
name;  no  two  nodes  may  have  the  same  name. 
Each  "upstream"  node  in  the  data  graph  (a  node  at 
w h i ch  no  l i n ks  terminate)  must  have  a  name. 

Like  SNOBOL3  and  A M B I T / S ,2  AMBIT/G  is 
a  pattern  matching  language.  W h i le  SNOBOL  and 
AMBIT/S  deal  w i th  ID  patterns  (strings),  AMBIT/G 
deals  w i th  2D  patterns  (graphs). 

An  AMBIT/G  program  consists  of  a  number 

of  statements  in  a  2 -D  graphical  f o r m,  each 
specifying 

(1)  a  subgraph  to  be  found  in  the  data  graph, 
(2)  changes  to  make  to  the  linkages  in  the  data 

(3) 

(4) 

graph  if  the  subgraph  is  f o u n d, 
the  statement  to  execute  next  if  the  subgraph 
is  f o u n d,  and 
the  statement  to  execute  next  if  the  subgraph 
is  not  f o u n d. 

The  algorithm  for  " f i n d i n g"  a  subgraph  in 
the  data  graph  is  s i m p l i f i ed  by  a  requirement  that 
each  upstream  node  in  the  subgraph  have  a  name. 

*  This  work  was  sponsored  by  the  U . S.  Advanced 

Research  Projects  Agency. 

Since  named  nodes  are  unique  in  the  data  graph, 
a ll  upstream  nodes  in  the  subgraph  can  be  directly 
associated  w i th  the  corresponding  nodes  in  the 
data  graph,  and  then  a  node  by  node  match  test 
may  be  done  for  downstream  nodes.  This  f a c i l(cid:173)
itates  very  e f f i c i e nt  (but  restricted)  graph  matching. 

As  an  example,  F i g.  1  shows  a  t y p i c al 

In  F i g.  2,  the  name  of  the  statement  is 

data  graph,  and  F i g.  2  shows  a  t y p i c al  AMBIT/G 
statement. 
at  the  top  of  the  p i c t u r e,  and  the  names  of  the 
statements  to  execute  next  in  case  of  match  s u c(cid:173)
cess  or  match  failure  are  at  the  bottom.  The  double 
link  indicates  a  linkage  change  to  make  in  the 
data  graph  if  the  subgraph  matches  s u c c e s s f u l l y. 
The  AMBIT/G  language  affords  an  easy  and 
natural  way  to  express  algorithms  for  building  and 
pruning  tree  structures,  garbage  c o l l e c t i ng  a  l i s t-
structure,  maintaining  a  free-storage  a l l o c a t i on 
f a c i l i t y,  e t c.  T y p i c a l l y,  a  user's  natural  view  of 
such  data  structures  and  structure  manipulation 
algorithms  corresponds  w i th  the  graphical  repre(cid:173)
sentations  of  these  in  the  AMBIT/G  language. 

Several  straight-forward  modifications  to 

the  original  d e f i n i t i on  of  the  language  (see 
Reference  1)  were  made  in  the  course  of  this  w o r k. 
(1)  Node-shape  classes  were  introduced.  This 
f a c i l i ty  allows  the  user  to  define  a  symbol  to 
represent  a  class  of  node  shapes.  He  may 
use  such  a  symbol  in  a  subgraph  as  a  bound 
v a r i a b l e.  Only  certain  " v a l u e s"  may  be 
assumed  by  this  variable:  nodes  from  the 
specified  class  of  node  shapes. 
graph  matching  procedure,  when  a  class 
symbol  is  encountered  in  the  subgraph,  the 
corresponding  node  in  the  data  graph  is 
If  its  shape  is  a  member  of  the 
examined. 
indicated  class  of  node  shapes,  then  the 
node  is  " a s s i g n e d"  to  the  indicated  v a r i a b l e, 
and  the  matching  procedure  c o n t i n u e s.  Other(cid:173)
w i s e,  the  matching  procedure  f a i l s.  This 
feature  introduces  a  s i g n i f i c a nt  convenience 
when  many  near  duplicate  statements  would 
normally  be  r e q u i r e d.  Figures  3,  4,  and  5 
show  an  example  of  the  use  of  node  shape 
c l a s s e s. 

In  the  s u b(cid:173)

(2)  Several  special  node  shapes  were  introduced. 

For  example,  the  reserved  shape 

- 9-

may  be  used  to  predicate  on  the  absence  of 
a  l i nk  from  an  indicated  LDP,  or  to  d i s(cid:173)
connect  a  l i nk  from  an  indicated  LDP.  F i g .6 
shows  a  statement  w h i ch  w i ll  succeed  only 
if  the  indicated  LDP  does  not  link  to  any 
node;  F i g.  7  shows  a  statement  w h i ch  w i ll 
disconnect  the  indicated  LDP  if  it  l i n ks  to 
a  b o x. 

(3)  A  way  to  combine  AMBIT/G  statements  into 
subroutines  was  i n t r o d u c e d.  This  led  to  a 
f a c i l i ty  for  graphical  s p e c i f i c a t i on  of  control 
f l ow  linkages  between  program  subparts. 
One  result  of  t h is  was  a  careful  reformula(cid:173)
t i on  of  program  structure. 

A  program  in  the  language  consists  of  a 
control  entry  p o i n t,  and  a  number  of  c a l ls  on  a 
library  of  subroutines.  Each  subroutine  has  a 
unique  name.  A  program  is  represented  g r a p h i(cid:173)
c a l ly  as  a  2 -D  network  of  " s u b r o u t i n e - c a ll 
symbols"  and  control  f l ow  l i n e s.  A  " s u b r o u t i n e-
c a ll  s y m b o l"  is  a  box  w h i ch  contains  the  name  of 
the  subroutine  and  several  " c o n t r o l - f l ow  e x it 
p o i n t s ".  F i g.  8  shows  the  graphical  representa(cid:173)
t i on  of  a  t y p i c al  program.  Each  c o n t r o l - f l ow  e x it 
point  may  have  at  most  one  flow  line  leaving  i t. 
A l s o,  control  may  leave  a  subroutine  c a ll  through 
only  one  of  its  e x it  points  ( i . e .,  parallelism  is 
not  a l l o w e d ).  A  subroutine  c a ll  may  have  an 
arbitrary  number  of  f l ow  lines  entering  it  (at  most 
one  of  these  may  ever  be  a c t i v e ). 

A  subroutine  may  have  one  of  t wo  forms: 

(1)  a  statement 

A  statement  in  the  language  is  represented 
in  a  2 -D  graphical  f o r m,  specifying 
(a) 
(b)  a  subgraph  to  be  found  in  the  data 

the  name  of  the  statement, 

g r a p h,  and 

(c)  changes  to  make  to  the  linkages  in  the 

data  graph  if  the  subgraph  is  f o u n d. 
The  s u b r o u t i n e - c a ll  symbol  for  a  s t a t e(cid:173)
ment  has  t wo  c o n t r o l - f l ow  e x it  points: 
one  to  be  taken  if  the  subgraph  is  found 
(lower  l e f t ),  and  one  to  be  taken  if  the 
subgraph  is  not  found  (lower  r i g h t ). 
F i g.  9  shows  a  t y p i c al  statement  and 
its  subroutine  c a ll  s y m b o l. 

(2)  a  subprogram 

A  subprogram  has  a  name  and  a  control  entry 
p o i n t,  and  is  represented  g r a p h i c a l ly  as  a 
t w o - d i m e n s i o n al  network  of  subroutine  c a ll 
s y m b o l s,  control  f l ow  l i n e s,  and  "subprogram 
e x it  p o i n t s ".  These  points  correspond  to  the 
control  f l ow  e x it  points  on  the  subroutine 
c a ll  symbol  for  the  subprogram.  F i g.  10 
shows  a  t y p i c al  subprogram  and  its  s u b(cid:173)
routine  c a ll  s y m b o l.  A  subprogram  may  c a ll 
other  subprograms  and  may  c a ll  i t s e lf 
r e c u r s i v e l y. 

-10-

A  preliminary  v e r s i on  of  the  AMBIT/G 

language  w i th  the  extensions  outlined  above  has 
been  implemented  on  the  TX-2  computer.  The 
a v a i l a b le  f a c i l i t i es  on  the  TX-2  for  interactive 
g r a p h i c s4'7  are  w e ll  suited  for  such  an  implement(cid:173)
a t i o n. 

The  overall  goal  in  the  work  reported  here 
is  the  creation  of  an  experimental  f a c i l i ty  for  both 
the  development  and  implementation  of  AMBIT/G 
language  c o n s t r u c t s.  F l e x i b i l i ty  is  of  primary 
importance;  modifications  and  extensions  to  the 
implementation  should  be  easy  to  make.  For  this 
reason  , 
the  LEAP  s y s t e m5*6  was  used  to  create 
the  AMBIT/G  f a c i l i t y.  LEAP  has  h i g h - l e v el  tools 
for  doing  interactive  i n p u t,  d i s p l ay  output,  and 
data-structure  m a n i p u l a t i o n s. 

The  remainder  of  this  report  w i ll  present  a 

user's  v i ew  of  the  AMBIT/G  implementation  on  TX-2 
and  a  description  of  the  LEAP  data  structure  used 
as  the  internal  representation  for  AMBIT/G  programs. 
The  design  of  the  input  analyzer  for  AMBIT/G 
programs  and  data  graphs  is  d i s c u s s e d,  and  some 
of  the  problems  of  using  such  an  interactive 
f a c i l i ty  in  t i m e - s h a r i ng  on  TX-2  are  a n a l y z e d. 

A  User's  View 

The  equipment  a v a i l a b le  to  a  user  at  a 

TX-2  console  includes  a  keyboard  and  t y p e w r i t e r, 
a  computer-driven  d i s p l a y,  and  a  Sylvania  Tablet. 
A  user  of  extended  AMBIT/G  employs  these  tools 
to  input  and  edit  his  2 -D  program  and  d a t a,  to 
control  the  execution  of  his  program  and  to  examine 
output  d a t a. 

Input 

The  Sylvania  Tablet  is  the  primary  input 

d e v i c e;  it  is  used  to  draw  in  the  working  a r e a, 
and  point  to  l i g ht  targets  at  the  sides  of  the  w o r k(cid:173)
ing  area  (see  Photos  1  and  2 ).  Drawn  characters 
are  analyzed  by  a  character-recognition  program, 
w h i ch  then  dispatches  to  corresponding  a c t i on 
r o u t i n e s.  Some  drawn  characters  cause  the  picture 
in  the  working  area  to  be  modified;  others  are 
interpreted  as  control  commands.  For  example,  a 
drawn  straight  line  w i ll  cause  a  l i nk  segment  to  be 
added  to  a  statement  in  the  working  area;  a  drawn 
" 0"  w i ll  cause  a  return  to  the  t i m e - s h a r i ng  monitor. 

Light  targets  appear  at  the  sides  of  the 

working  a r e a,  and  are  used  either  as  control 
commands  (targets  at  the  r i g h t ),  or  as  prototype 
selection  indicators  (targets  at  the  l e f t ).  For 
example,  targets  at  the  right  include  e x p l i c it 
action  commands  ( e . g.  RUN)  and  d e f i n i t i on  mode 
selectors  ( e . g.  SHAPE,  DATA,  CLASS,  STATEMENT, 
SUBPROGRAM).  Targets  at  the  left  include  small 
pictures  of  the  defined  node  shapes. 

W h i le  a  user  is  working  in  a  d e f i n i t i on 

mode,  he  deals  w i th  p i c t u r e s.  A  picture  contains 

either  a  prototype  node  shape,  a  data  page,  a  node 
shape  class  d e f i n i t i o n,  a  statement,  or  a  s u b(cid:173)
program.  A  picture  may  be  d e f i n e d,  e d i t e d,  or 
d e l e t e d.  A  t w o - d i m e n s i o n al  syntax  check  may  be 
performed  on  a  picture;  if  there  are  errors, 
indicators  are  displayed  at  the  appropriate  places 
in  the  working  a r e a.  For  example,  a  statement 
picture  is  checked  for  dangling  l i n k s, 
sequences,  and  unreachable  nodes. 

i l l e g al  link 

If  a  new 

After  a  new  picture  is  d e f i n e d,  or  after  an 
old  picture  is  e d i t e d,  the  user  must  point  to  the 
FILE  l i g ht  target  if  he  wishes  to  f i n a l i ze  his  w o r k. 
If  he  instead  attempts  a  command  that  w o u ld 
cause  the  working  area  to  be  c l e a n e d,  he  w i ll  be 
n o t i f i e d,  and  his  command  w i ll  be  ignored.  Any 
subsequent  command  w i ll  be  obeyed.  This  a l l o ws 
the  user  to  e a s i ly  change  his  mind  and  it  helps  to 
protect  him  against  inadvertent  blunders. 
prototype  node  shape  is  f i l e d,  a  small  picture  of 
it  w i ll  be  appended  to  the  l i st  of  l i g ht  targets  at 
the  left  of  the  working  a r e a.  The  user  may  then 
type  in  the  name  of  a  new  node  of  that  shape. 
The  new  prototype  node  name  w i ll  appear  as  a 
If 
light  target  below  the  indicated  node  shape. 
the  l i st  of  l i g ht  targets  gets  too  long  to  f it  in  the 
working  a r e a,  a  circular  buffer  of  l i g ht  targets  w i ll 
be  c r e a t e d,  and  the  TURNPAGE  light  target  (at  the 
right)  w i ll  appear.  Pointing  to  TURNPAGE  w i ll 
cause  the  "next"  portion  of  the  l i st  of  prototype 
node  shapes  to  be  shown  at  the  l e f t.  When  a 
picture  is  f i l e d,  only  graphical  information  is 
saved;  connectivity  information  is  generated  from 
the  graphical  information  in  a  separate  step 
(called  "acceptance")  prior  to  program  e x e c u t i o n. 

While  working  on  a  p i c t u r e,  a  user  deals 

In  SHAPE  mode,  the 

line  e n d p o i n t s,  and  LDP 

w i th  graphical  e n t i t i e s. 
entities  are  l i n e s, 
i n d i c a t o r s. 
In  CLASS,  DATA,  and  STATEMENT 
modes,  the  entities  are  node  shapes,  l i nk  s e g(cid:173)
ments ,  and  link  segment  e n d p o i n t s. 
PROGRAM  mode,  the  entities  are  subroutine  c a ll 
symbols,  subprogram  e x it  p o i n t s, 
link  segments, 
and  l i nk  segment  endpoints. 

In  SUB(cid:173)

While  working  on  a  p i c t u r e,  a  user  may 

erase  or  move  any  e n t i t y.  The  erase  command  is 
simply  a  drawn  scrub  mark  Ww)  over  the  e n t i t y. 
An  entity  may  be  moved  in  the  working  area  either 
by  pointing  to  it  and  then  pointing  to  where  it 
should  move,  or  by  entering  MOVE  mode  (another 
light  target  at  the  r i g h t ),  and  then  dragging  the 
entity  to  its  new  position  w i th  the  tablet  s t y l u s. 
Once  in  MOVE  mode,  the  user  may  move  other 
entities  as  w e l l.  The  user  may  return  from  MOVE 
mode  by  pointing  to  the  NORMAL  l i g ht  t a r g e t,  a l so 
on  the  r i g h t.  Whenever  an  entity  is  moved,  the 
relevant  linkage  lines  stretch  and  c o n t r a c t. 

W h i le  working  on  a  p i c t u r e,  a  user  may 
In  SHAPE  mode,  a 

create  certain  new  e n t i t i e s. 
drawn  line  w i ll  result  in  a  new  line  for  the  shape. 

Drawing  a  small  " x"  w i ll  produce  an  LDP  indicator. 
In  the  other  d e f i n i t i on  modes,  a  drawn  line  w i ll 
produce  a  link  segment,  complete  w i th  arrowhead. 
In  STATEMENT  mode,  a  line  drawn  w i th  a  loop  (a) 
w i ll  produce  a  double  link  segment,  w i th  a r r o w(cid:173)
h e a d. 
In  CLASS,  DATA,  and  STATEMENT  modes, 
the  user  may  point  to  a  node-shape  target  on  the 
l e f t,  then  draw  a  number  of  " x ' s"  in  the  working 
a r e a.  Each  drawn  " x"  w i ll  cause  an  instance  of 
the  indicated  node  shape  to  appear  in  the  picture 
at  the  indicated  p o s i t i o n. 
the  targets  on  the  left  are  the  names  of  e x i s t i ng 
statements  and  subprograms  rather  than  prototype 
node  shapes.  Each  drawn  " x"  w i ll  cause  the 
indicated  subroutine  c a ll  symbol  to  appear  at  the 
indicated  p o s i t i o n.  A  drawn  downward  arrow  w i ll 
cause  a  subprogram  exit  point  to  appear  near  the 
head  of  the  arrow. 

In  SUBPROGRAM  mode, 

The  user  may  save  his  work  between 

sessions  on  the  computer;  he  may  give  it  a  name 
and  w r i te  it  out  on  his  storage  area  by  pointing  to 
the  WRITE  light  target  and  then  typing  in  the  name; 
he  may  read  in  a  named  program  by  pointing  to  the 
READ  l i g ht  target  and  then  t y p i ng  in  the.name. 

Acceptance 

When  a  user  finishes  defining  and  editing 

his  program  and  data  graph,  he  may  point  to  the 
ACCEPT  light  t a r g e t.  This  w i ll  cause  a  f i n al  syntax 
check  to  be  made  on  a ll  of  his  i n p u t,  and  a ll 
graphical  information  (positions  of  link  segments 
and  node  shape  i n s t a n c e s,  for  example)  to  be 
processed  to  y i e ld  connection  information  (a  l i st  of 
nodes,  L D P ' s,  and  links  from  LDP's  to  nodes). 
errors  are  encountered  during  t h is  process,  they 
are  indicated  and  acceptance  is  a b o r t e d. 
If  the 
program  is  f u l ly  a c c e p t e d, 
by  pointing  to  the  RUN  light  target. 
Execution 

it  may  then  be  executed 

If 

When  an  AMBIT/G  program  is  " r u n ",  the 

AMBIT/G  system  interprets  the  connection  i n f o r m(cid:173)
ation  w h i ch  was  generated  when  the  program  was 
" a c c e p t e d ".  This  information  includes  control 
connection  i n f o r m a t i o n,  w h i ch  is  used  to  regulate 
control  f l o w.  Statements  are  executed  by  first 
attempting  to  match  the  specified  subgraph  to  the 
current  data  graph.  A  successful  match  w i ll  cause 
indicated  linkage  changes  to  be  made  in  the  data 
graph,  and  then  the  left  (success)  control  flow  path 
to  be  t a k e n.  An  unsuccessful  match  w i ll  simply 
cause  the  right  (failure)  control  f l ow  path  to  be 
t a k e n.  An  error  is  indicated  and  execution  is 
terminated  if  a  control  f l ow  path  is  a  dead  e n d. 
If 
the  s p e c i al  statement  named  STOP  is  encountered, 
then  execution  is  t e r m i n a t e d. 

There  are  several  execution  control  options 
available  as  debugging  a i d s.  A  user  may  interrupt 
the  execution  of  his  program  by  pointing  to  the 
HELP  light  target.  He  may  cause  his  program  to  be 
interrupted  when  a  specified  statement  is  executed, 

- 1 1-

or  after  a  specified  number  of  statements  are  e x e(cid:173)
c u t e d.  He  may  cause  the  name  of  a  specified 
statement  to  be  printed  whenever  that  statement  is 
executed,  or  he  may  request  the  names  of  a ll 
executed  statements  to  be  either  printed  or  d i s p l a y(cid:173)
ed  in  order  of  e x e c u t i o n. 

Output 

After  a  program  has  t e r m i n a t e d,  or  after  it 

has  been  interrupted,  a  user  may  examine  the 
state  of  the  data  g r a p h.  He  does  t h is  by  pointing 
to  the  OUTPUT  l i g ht  t a r g e t,  w h i ch  causes  him  to 
enter  OUTPUT  mode.  The  problem  of  automatically 
laying  out  and  d i s p l a y i ng  an  entire  data  graph  has 
been  carefully  avoided;  the  user  is  required  to 
specify  small  parts  of  the  data  graph  that  he 
wishes  to  s e e,  and  he  is  encouraged  to  aid  in  the 
layout  of  t h e s e. 

Upon  entering  OUTPUT  mode,  the  node 

in  the 

shape  and  node  name  prototypes  appear  again  as 
l i g ht  targets  on  the  l e f t.  The  user  may  point  to  a 
node  name  prototype,  then  draw  an  "x" 
working  a r e a.  An  instance  of  the  indicated  named 
node  w i ll  appear.  The  user  may  then  point  to  an 
LDP  on  the  new  i n s t a n c e. 
If  a  l i nk  departs  from 
the  corresponding  LDP  in  the  data  g r a p h,  both  the 
link  and  an  instance  of  the  node  of  the  end  of  the 
link  w i ll  be  d i s p l a y e d.  The  program  w i ll  decide 
where  to  d i s p l ay  the  new  i n s t a n c e.  The  user  may 
override  this  d e c i s i on  when  he  points  to  an  LDP 
by  immediately  drawing  a  line  to  a  position  for  the 
new  i n s t a n c e. 
corresponding  LDP  in  the  data  g r a p h,  a  star  (*)  is 
displayed  on  the  indicated  LDP. 

If  a  l i nk  does  not  depart  from  the 

The  user  may  continue  to  point  to  other 

LDP's  in  the  working  a r e a,  or  create  instances  of 
other  named  n o d e s.  He  may  use  s p e c i al  drawn 
characters  to  shrink  or  expand  his  p i c t u r e,  and 
translate  it  up  or  d o w n,  left  or  r i g h t.  He  may 
erase  (by  using  a  drawn  scrub  mark)  any  link  or 
instance  in  his  p i c t u r e.  Any  links  or  instances 
w h i ch  are  downstream  w i ll  a l so  be  erased. 

When  the  user  finishes  examining  his  d a t a-

graph,  he  may  return  from  OUTPUT  mode  by  p o i n t(cid:173)
ing  to  the  DONE  l i g ht  target.  He  may  resume 
execution  of  an  interrupted  program  by  pointing  to 
RESUME. 

Internal  Representation 

An  AMBIT/G  program  and  data  graph  is 

represented  internally  by  a  LEAP  data  structure. 
A  brief  introduction  to  LEAP  f o l l o w s. 

A  LEAP  program  deals  w i th  i t e m s,  t r i p l e s, 

and  s e t s.  An  item  is  used  to  represent  either  an 
element  in  the  data  structure  or  an  attribute  w h i ch 
relates  t wo  i t e m s.  An  item  may  have  an  a s s o c i(cid:173)
ated  algebraic  datum.  A  t r i p le  is  an  ordered 
c o l l e c t i on  of  three  items  and  is  u s u a l ly  used  to 
represent  a  fact  of  the  general  form: 

(1) 

ATTRIBUTE • OBJECT  =  VALUE 

(ATTRIBUTE  of  OBJECT  is  VALUE.) 

A  set  is  an  unordered  c o l l e c t i on  of  i t e m s. 
Examples  taken  from  the  implementation  f o l l o w: 

(a)  An  instance  of  a  node  shape  in  a 

statement  is  represented  internally  by 
an  item  having  a  matrix  as  its  datum. 
This  matrix  contains  the  d i s p l ay  coor(cid:173)
dinates  of  the  i n s t a n c e. 

(b)  Every  instance  of  a  node  shape  is 

associated  w i th  the  node  shape  p r o t o(cid:173)
type  by  a  t r i p le  of  the  form: 
(2)  SHAPEOF.INSTANCE#  =-  SHAPE# 

In  (2),  SHAPE OF  is  a  declared  i t e m,  and 
INSTANCE*  and  SHAPE*  are  item  type 
designators;  i . e.  a  t r i p le  beginning  w i th 
SH APEOF  associates  a  node  shape  instance 
w i th  a  node  shape  prototype. 
(c)  The  declared  set  SHAPES  is  the  set  of 

a ll  node  shape  prototypes. 

The  item  type  designators  and  prototype 

triples  for  selected  parts  of  the  internal  represent(cid:173)
ation  of  a  program  and  data  graph  are  tabulated 
b e l o w.  Certain  item  type  designators  need  further 
e x p l a n a t i o n. 

(a)  LINE* 

Links  in  data  pages  and  in  statements 
are  composed  of  l i n e s.  A  line  in  a 
statement  may  be  double  (have  the 
DOUBLE  property). 

(b)  DTAPG* 

(c) 

At  ACCEPT  t i m e,  a ll  data  pages  are 
merged  to  generate  the  i n i t i al  data 
graph.  Overconstraints  are  noted  and 
reported. 
ILDP* 
At  ACCEPT  t i m e,  each  LDP  of  each 
instance  in  the  structure  is  examined 
to  determine  if  it  is  the  start  point  of 
a  l i n k. 
If  s o,  an  ILDP  (Instance  Link 
Departure  Point)  is  generated  and 
associated  (via  triples)  w i th  the 
instance  and  w i th  the  indicated  LDP 
on  the  node  shape  prototype. 

Aspects  of  the  Design 

Several  design  decisions  were  made  after 

implementing  and  experimenting  w i th  various 
alternative  d e s i g n s;  convenience  for  the  user  was 
the  primary  consideration  in  these  d e c i s i o n s. 

No  push-buttons  or  toggle  switches  are 

used;  we  f e lt  that  these  are  confusing  and 
d i s t r a c t i n g.  Use  of  a  simple  drawn  character  or 
a  l i g ht  target  is  easier. 

The  user  does  not  draw  node  shape 

i n s t a n c e s,  but  rather  points  to  the  desired  shape 
and  then  draws  an  " x"  at  the  desired  p o s i t i o n. 
The  special  symbols  that  the  user  may  draw  are 
simple  enough  to  recognize  e a s i l y,  and  are  quite 

-12-

convenient  to  u s e. 

There  are  two  ways  to  move  an  entity  in  the 
working  area:  by  drawing  a  "move  character"  or  by 
entering  "move  mode"  and  dragging  the  entity  w i th 
the  tablet  s t y l u s.  Experience  has  indicated  the 
necessity  for  b o t h.  The  move  character  is  useful 
for  a  single  move  command  if  the  destination  is 
c l e a r. 
to  be  performed  or  if  the  user  wants  response  as 
the  entity  moves. 

" M o ve  mode"  is  useful  if  many  moves  are 

When  the  user  draws  in  the  working  a r e a, 
he  is  drawing  on  a  square  g r i d.  That  i s,  the  e n d-
points  of  a ll  lines  and  the  centers  of  a ll  node 
instances  w i ll  be  automatically  put  on  the  nearest 
grid  p o i n t.  This  feature  makes  neat  drawings  and 
does  not  restrict  the  user  a p p r e c i a b l y.  He  may  be 
reasonably  sloppy  in  drawing  a  l i n k, 
for  example, 
and  the  startpoint  w i ll  be  made  to  coincide  w i th  a 
nearby  LDP.  There  are  two  grid  s i z e s:  one  for 
SHAPE  mode,  and  one  for  the  other  modes.  When 
drawing  a  SHAPE  d e c l a r a t i o n,  it  is  convenient  to 
work  on  a  f a i r ly  gross  grid  (the  working  area  has 
16  grid  points  on  a  side  in  SHAPE  mode;  in  the 
other  modes,  it  has  64  grid  points  on  a  s i d e ). 

No  automatic  graphical  syntax  check  is 
made  w h i le  the  user  is  defining  his  program  and 
data  graph.  The  syntax  of  his  data  graph  and 
program  pictures  is  checked  only  upon  e x p l i c it 
request  from  him  or  at  ACCEPT  t i m e.  This  allows 
him  to  f i le  away  a  partially  completed  p i c t u r e. 
The  system  is  considerably  s i m p l i f i ed  by  this 
feature  because  it  needs  only  to  remember  a  l i st  of 
picture  parts  and  their  positions  u n t il  ACCEPT  t i m e. 
A l s o,  a  change  made  to  a  node  shape  declaration 
has  no  subtle  effect  on  the  c o n n e c t i v i ty  of  a  pro(cid:173)
gram  statement  in  w h i ch  there  is  an  instance  since 
no  connectivity  information  is  k e p t. 

The  program  for  d i s p l a y i ng  the  modified 

data  graph  was  made  as  simple  as  p o s s i b l e, 
primarily  because  any  automatic  layout  f a c i l i ty  is 
very  d i f f i c u lt  to  implement  and  would  not  be  s i g n i f(cid:173)
icantly  better  than  the  simple  scheme. 

Light  targets  are  displayed  only  when  they 
are  relevant;  this  helps  to  minimize  confusion  and 
provides  an  i n d i c a t i on  of  the  state  of  the  s y s t e m. 

C o n c l u s i on 

The  preliminary  system  has  been  used  to 

implement  t wo  examples. 

(1) 

(2) 

The  l i s t - s t r u c t u re  garbage  c o l l e c t i on  p r o(cid:173)
gram  used  as  the  example  in  Reference  1-
A  reductions-ana l y s is  program  for  parsing 
an  input  string  from  a  simple  grammar  and 
b u i l d i ng  the  computation  t r e e. 

The  experience  of  using  the  system  in  t i m e(cid:173)
sharing  on  TX-2  has  pointed  out  some  major  i n a d e(cid:173)
quacies  in  the  environment.  The  programs  are 
f a i r ly  large  and  t y p i c a l ly  require  fast  response  and 

-13-

a  small  time  s l i c e.  When  the  time-sharing  system 
has  a  medium  to  heavy  l o a d,  response  l a g - t i me 
increases  to  10  to  20  seconds.  T y p i c a l l y,  a  user 
must  w a it  about  15  seconds  after  drawing  a  symbol 
(or  pointing  to  a  light  target)  before  he  can  draw 
the  next  s y m b o l.  For  this  kind  of  a p p l i c a t i on  on 
TX-2  either  the  environment  in  time-sharing  must 
be  reorganized  or  the  machine  must  be  used  in 
dedicated  mode. 

The  poor  response  in  t i m e - s h a r i ng  is 

caused  primarily  by  the  need  to  swap  users  in  and 
out  of  c o r e.  The  response  l a g - t i me  increases 
dramatically  as  soon  as  the  t o t al  a c t i ve  user  core 
requirement  exceeds  available  core.  This  problem 
is  aggravated  by  two  t h i n g s. 

(1) 

(2) 

The  swapping  mechanism  being  used  is 
very  slow  (it  is  a  FASTRAND  II  drum  which 
is  meant  to  be  used  for  f i le  storage). 
People  tend  to  w r i te  very  large  programs 
(the  Lincoln  Reckoner  is  a  notable 
exception)  because  there  is  no  convenient 
way  to  segment  programs.  For  example, 
the  LEAP  compiler  does  not  compile  r e(cid:173)
locatable  code  nor  w i ll  it  compile  s u b(cid:173)
routines  separately  from  a  main  program. 
There  is  no  relocatable  loader  f a c i l i t y; 
even  the  assembler  assembles  n o n-
relocatable  code. 

Other  factors  w h i ch  contribute  to  system 

overhead  are: 

(1) 

(2) 

the  main  frame  is  used  to  process 
interrupts  and  track  the  two  t a b l e t s. 
If  both  tablets  are  a c t i v e,  this  overhead 
is  very  large. 
The  display  structures  for  a ll  active  d i s(cid:173)
plays  reside  in  core;  the  display  generator 
steals  memory  cycles  to  refresh  the  d i s p l a y s. 
In  the  course  of  this  w o r k,  several  ideas 

for  further  extensions  to  the  language  have  a r i s e n. 
For  example,  a  way  to  manipulate  algebraic  values 
is  needed.  A l s o,  a  f a c i l i ty  for  l i n k i ng  to  programs 
w r i t t en  in  other  languages  is  d e s i r a b l e.  Other 
suggestions  include  the  f o l l o w i n g: 

(1) 

(2) 

(3) 

(4) 

display  a  selected  portion  of  the  data 
graph  dynamically  as  the  program  is 
e x e c u t e d. 
D i s p l ay  the  main  control  flow  diagram  and 
blink  the  subroutine  c a ll  symbols  w h i ch  are 
a c t i ve  as  the  program  r u n s. 
Improve  the  character  recognition  program 
to  the  point  where  it  is  easier  to  use  than 
the  keyboard,  and  eliminate  the  keyboard. 
Take  advantage  of  the  t w o - d i m e n s i o n al 
control  flow  s p e c i f i c a t i on  to  a l l ow  c o n(cid:173)
current  control  f l ow  paths  (parallelism). 
The  programming  work  was  done  entirely  in 

t i m e - s h a r i ng  using  the  LEAP  language.  Both  of 
these  tools  were  found  to  be  c r u c i al  to  the  d e v e l(cid:173)
opment.  Machine  a v a i l a b i l i ty  for  e d i t i n g,  debugging, 

and  experimenting  was  very  important;  a  t i m e(cid:173)
sharing  console  was  perfectly  adequate  and  readily 
a v a i l a b l e.  The  f a c i l i t i es  in  LEAP  for  expressing 
interactive  input  and  d i s p l ay  output  were  found  to 
be  very  powerful  and  very  easy  to  u s e.  The  a b i l i ty 
to  make  changes  e a s i ly  to  the  implementation  made 
much  of  the  experimentation  f e a s i b l e;  a  program 
w r i t t en  in  LEAP  is  r e l a t i v e ly  easy  to  read  and  under(cid:173)
s t a n d. 

The  language  forms  for  b u i l d i ng  and  manip(cid:173)

It 

u l a t i ng  a  data  structure  in  LEAP  were  used  e x t e n(cid:173)
s i v e ly  to  create  and  process  the  internal  represent(cid:173)
a t i on  of  an  AMBIT/G  program  and  data  graph. 
was  unnecessary  to  design  and  implement  an 
elaborate  l i st  structure  to  house  the  internal 
representation;  we  were  free  to  concentrate  on  the 
design  of  interactive  features  because  we  were 
insulated  from  many  of  the  intricate  details  of  the 
data  structure  implementation. 
been  introduced  into  the  AMBIT/G  system  by  the 
use  of  LEAP;  these  are  noticeable  only  when  a  large 
computation  has  to  be  made  (when  c h e c k i n g,  a c(cid:173)
cepting  or  running).  The  programs  could  be  made 
considerably  smaller  and  faster  if  they  were  r e-
coded  in  machine  language,  but  this  would  require 
much  work  and  w o u ld  remove  much  f l e x i b i l i t y. 
Acceptance  time  could  be  decreased  by  maintaining 
partial  c o n n e c t i v i ty  information  as  pictures  are  i n(cid:173)
p u t.  This  w o u ld  complicate  the  input  programs, 
but  might  improve  overall  response. 

Inefficiencies  have 

References 

C.  C h r i s t e n s e n, 
"An  Example  of  the  M a n i p(cid:173)
u l a t i on  of  Directed  Graphs  in  the  AMBIT/G 
Programming  Language" ,  Proc.  of  the  Sympo(cid:173)
sium  on  Interactive  Systems  for  Experimental 
Applied  M a t h e m a t i c s,  W a s h i n g t o n,  D . C ., 
August  1967. 
C.  C h r i s t e n s e n,  "On  the  Implementation  of 
AMBIT,  A  Language  for  Symbol  M a n i p u l a t i o n ", 
C A C M,  p.  5 7 0 - 5 7 3,  August  1966. 
D.  J.  Farber,  R.  E.  G r i s w a l d,  and 
I.  P.  Palansky,  "SNOBOL,  A  String  M a n i p(cid:173)
ulation  Language",  JACM 
January  1964. 
J.  W.  Forgie,  et  a l .,  "A  T i m e-  and  M e m o r y-
Sharing  Executive  Program",  Proc.  of  the 
1965  Fall  Joint  Computer  Conference. 
P.  D.  Rovner  and  J.  A.  Feldman,  "The  LEAP 
Language  and  Data  S t r u c t u r e ",  IFIPS  6 8, 
Edinburgh,  Scotland,  August  1968. 
P.  D.  Rovner,  "The  LEAP  Users  M a n u a l ", 
M . I . T.  Lincoln  Laboratory  Technical  M e m o(cid:173)
randum  2 3 L - 0 0 0 9,  December  1968. 
W.  R.  Sutherland,  J.  W.  Forgie,  and 
M.  V.  M o r e l l o,  "Graphics  in  Time-Sharing: 
A  Summary  of  the  TX-2  Experience",  Proc.  of 
the  1969  Spring  Joint  Computer  Conference. 

!!_,  p.  2 1 - 3 0, 

ITEM  TYPE 
SHAPE# 

LINE# 

LDP# 

NAME# 
INSTANCE# 

#LDP* 
PGMST# 

DTAPG* 

ALLOWED  "PROPERTIES"* 

DATUM  DATA  TYPE 

NOTES 

SET  (of  lines) 

MATRIX  (graphical  info) 

MATRIX  (graphical  info) 

TEXT  ARRAY 
MATRIX  (graphical  info) 

TEXT  ARRAY 

TEXT  ARRAY 

Each  line  is  a  part  of 
the  node  shape  p r o t o(cid:173)
t y p e. 
Relative  position  in  the 
node  shape  prototype, 
data  page,  or  statement 
Relative  position  in  the 
node  shape  prototype. 
The  name  of  a  node. 
Relative  position  in  the 
data  page  or  in  the 
statement. 

The  name  of  the  s t a t e(cid:173)
ment. 

The  name  of  the  data 
page. 

TABLE  1  -  SAMPLE  ITEM  TYPE  DESIGNATORS 

*  In  LEAP,  properties  may  be  d e c l a r e d.  A  property  may  be  assigned  to  an  i t e m. 

PROTOTYPE  TRIPLES 
LDPSIN-SHAPE*  =  LDP# 
DTAINST-NAME#  =  INSTANCE# 

INSTIN •  DTAPG#  = I N S T A N C E *! 
INSTIN • PGMST# = INSTANCE# 
SHAPEOF-INSTANCE*  =  SHAPE# 
NAMEOF-INSTANCE#  =  NAME# 

LINESIN •  DTAPG#  =  L I N E #) 
LINESIN-PGMST#  =  LINE#  J 
ILDPSIN-INSTANCE#  -  ILDP# 
CORR-ILDP*  =  LDP# 

S C O N N - I L D P*  =  INSTANCE# 
D C O N N - I L D P* =  INSTANCE# 

NOTES 

Associates  an  LDP  w i th  a  node  shape  prototype. 
Associates  the  unique  instance  of  a  named  node  (in  the  data 
graph)  w i th  the  named  node. 

Associates  an  instance  w i th  a  data  page  or  a  statement. 

Associates  an  instance  w i th  its  node  shape  prototype. 
Associates  the  instance  of  a  named  node  w i th  the  named  node. 

Associates  a  l i nk  segment  (line)  w i th  a  data  page  or  a  statement. 

Associates  an  ILDP  w i th  an  i n s t a n c e. 
Associates  an  ILDP  w i th  the  corresponding  LDP  in  the  node 
shape  prototype  for  the  indicated  i n s t a n c e. 
Represents  an  existing  l i n k. 
Represents  an  e x i s t i ng  double  l i n k. 

TABLE  2  -  SAMPLE  PROTOTYPE  TRIPLES 

-18-

