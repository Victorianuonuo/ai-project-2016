Amalgams of Constraint Satisfaction Problems 

Andrei A. Bulatov 

Oxford University Computing Laboratory 
UK 
andrei.bulatov@comlab.ox.ac.uk 

Oxford, 

Eugeny S. Skvortsov 

Ural State University, Ekaterinburg, Russia 

Skvortsov@dc.ru 

Abstract 

Many  of standard practical  techniques  of solving 
constraint  satisfaction  problems  use  various  de(cid:173)
composition methods to represent a problem as a 
combination  of smaller  ones.  We  study  a  gen(cid:173)
eral method of decomposing constraint satisfaction 
problems in which every constraint is represented 
as a disjunction of two or more simpler constraints 
defined, possibly, on smaller sets of values. We call 
a problem an amalgam if it can be decomposed in 
this way.  Some particular cases of this construc-
tion have been considered in [Cohen et a/.,  1997; 
2000b;  2000al  including  amalgams  of  problems 
with disjoint sets of values, and amalgams of inde(cid:173)
pendent problems. In this paper, we concentrate on 
constraint classes determined by relational clones, 
and study amalgams of such classes in the general 
case  of arbitrary  finite  sets  of values.  We  com(cid:173)
pletely  characterise  amalgams  of this  form  solv(cid:173)
able in polynomial time and provide efficient algo(cid:173)
rithms. 

Introduction 

1 
In the Constraint Satisfaction Problem (CSP) the aim is to 
find an assignment to a set of variables subject specified con(cid:173)
straints.  CSP provides a generic approach to various com(cid:173)
binatorial problems frequently appearing in artificial intelli(cid:173)
gence and computer science, including the propositional sat(cid:173)
isfiability problem, in which the variables must be assigned 
Boolean values, graph-theoretical problems, scheduling prob(cid:173)
lems, temporal and spatial reasoning, database theory, and 
many others. 

The general CSP is NP-complete [Montanari, 19741. How(cid:173)
ever, the time complexity of many practical problems can be 
considerably decreased by representing a problem as a com(cid:173)
bination of smaller problems.  Such decomposition methods 
have been intensively studied and implemented in most of ex(cid:173)
isting constraint solvers. Most of them deals with the hyper-
graph associated with a problem instance (see, e.g. [Gottlob 
et al. , 2000; Dechter and Pearl,  1989; Freuder, 1990]), and 
to date are highly developed.  Another possibility, decompo(cid:173)
sition of constraints themselves [Cohen et al. , 1997; 2000b; 

2000a], remains almost uninvestigated. The present paper fo(cid:173)
cuses on this class of decomposition methods. 

In many cases of interest we may restrict the form of al(cid:173)
lowed constraints by specifying a constraint language, that is 
a set of allowed constraints. Every constraint is specified by a 
relation, so, a constraint language is just a set of relations over 
the set of values. One of the most natural ways to decompose 
such a restricted CSP is to represent every its constraint as a 
disjunction of two or more simpler constraints on, possibly, 
smaller sets of values.  We say that a constraint language, T, 
is the amalgam of T1, T2 if every constraint in T is the dis(cid:173)
junction of a constraint from T1 and a constraint from T2. In 
this case we call T1, T2 the components of T. 

The main research direction in the study of amalgams is, 
of course, developing efficient algorithms solving the corre(cid:173)
sponding constraint satisfaction problem.  However, as we 
shall see the complexity of the CSP arising from an amalgam 
is not determined automatically by the complexity of its com(cid:173)
ponents. Therefore, the first research problem we deal with is 
the tractability problem: under which conditions the problem 
arising from an amalgam is tractable.  (A problem is called 
tractable if it can be solved in polynomial time.)  Then we 
tackle the algorithmic problem:  design efficient algorithms 
for tractable amalgams. 

As is naturally expected, algorithms for amalgams tend to 
use algorithms for their components, especially  if ones are 
already known. Unfortunately, in general, the connection be(cid:173)
tween constraint languages and their amalgam cannot be ex(cid:173)
pressed by usual constraint techniques, and strongly depends 
on properties of particular constraint languages.  Thus, solu(cid:173)
tions to both research problems are expected to be nontrivial. 
Amalgams have been introduced in [Cohen et al,  1997], 
though another name was used.  In  ICohen et a/.,  2000a], 
amalgams  were  considered  in  the  simplest case  when  the 
sets of values for languages T1, T2 are disjoint.  In this case, 
for any amalgam, the corresponding problem is trivially re(cid:173)
ducible  to  the  problems  over  the  components,  that  solves 
both the algorithmic problem and the tractability problem: 
an  amalgam  gives  rise  to  a  tractable  problem  if and only 
its components do.  Certain properties of interaction of con(cid:173)
straint languages may yield a reduction of an amalgam to its 
components.  In [Cohen et al,  1997] and later in [Cohen et 
al, 2000b], several such properties, so-called independence 
of constraint languages, have been identified.  A number of 

CONSTRAINTS 

197 

previously unknown tractable constraint languages have been 
represented as amalgams of very simple and well studied in­
dependent constraint languages. 

It  has  been  shown  in  [Jeavons,  1998b]  that  the  tractabil-
ity of the constraint satisfaction problem arising from a con­
straint language implies the tractability of the problem for the 
relational clone generated by the language.  Therefore, a rea­
sonable strategy is to concentrate on relational  clones rather 
than  arbitrary  constraint  languages.  In  this  paper  we  solve 
the tractability and algorithmic problems for amalgams of re­
lational  clones.  We completely characterise  tractable  amal­
gams and provide efficient algorithms in this case.  The char­
acterisation  criteria  is  stated  in  terms  of,  first,  properties  of 
components  of an  amalgam,  and  second,  the  tractability  of 
a  certain  constraint  language  on  a  2-element  set  of values. 
The latter language reflects the interaction of the components. 
Thus,  both  the characterisation  and the  reducing algorithms 
use  Schaefer's  Dichotomy Theorem  for  Boolean  constraints 
[Schaefer, 1978]. 

Throughout  the  paper  we  heavily  use  the  algebraic  tech­
nique for CSP developed in  [Jeavons,  1998b; Jeavons et a/., 
1998]. 

2  Preliminaries 
2.1  Basic Definitions 
Let A  be a finite set.  The set of all  n-tuples  of elements of A 
is  denoted An.  A  subset of An  is  called  an  n-ary  relation  on 
A, and any set of finitary relations on A  is called a constraint 
language on A. 
Definition 1  Let  Y  be  a  constraint  language  on  a  set  A. 
CSP(r)  is  the  combinatorial  decision  problem  whose  in-
stance  is a triple V  =  (V; A; C)  in  which  V  is a set of vari­
ables,  and C  is a set of constraints,  that  is pairs  of the form 
C = (s,  Q)  where  s  is  a  list  of  variables  of  length  mC  called 
the constraint scope, and Q  Y is an rnc-ary relation,  ccdled 
the constraint relation.  The question is whether there exists a 
solution to V, that is a mapping ψ: V  —> A such that ψ(s) € Q 
for  all  (s,  Q)  C. 
Example 1 An instance of GRAPH Q - C O L O R A B I L I TY con­
sists  of a  graph  G.  The question  is  whether the  vertices  of 
G can be labelled with q colours so that adjacent vertices are 
assigned different colours. 

This problem corresponds to 

where A is a q-
is 

element set (of colours) and 
the disequality relation on A. 
A constraint language T is said to be tractable [NP-complete] 
if the problem CSP(r)  is tractable [NP-complete]. 

Now we introduce the central notion of the paper. 

Definition 2  Let TA, TB Be constraint languages on  sets  A, 
B  respectively.  The amalgam of TA, TB is defined to be the 
constraint language on  A  U  B 

= 

of the  same  arity]. 

are 

Example 2  Let  A  = 
{QA},  TB  =  {QB}  where  QA,QB  are  partial  orders: 

{a,c,d},B  =  {b,c,d},  and  TA  = 

Columns  of  the  matrices  represent  tuples  of  the  relations. 
Then 
where QA U QB is a quasiorder. 
Example 3 ([Cohen et a/.,2000b1)  Let  Z  be  the  set  of  all 
integers,  and  Y  the  set  of congruences  of the  form  x  =  a 
(mod  m)  treated as unary relations. The Chinese Remainder 
Theorem implies that Y is tractable. The amalgam 
con­
sists of expressions of the  form x  =  a 
(mod  ra)  V  x  =  b 
(mod  n), and by results of [Cohen et  al,  2000b] is tractable. 
For  example,  this  means  that  we  are  able  to  recognised  in 
polynomial time the consistency of the system 

x1  =  1 
x2  =  2 
x3  =  5 

(mod  4)  V  x1  =  0 
(mod  3)  V  x2  =  2 
(mod  7). 

(mod  3) 
(mod  5) 

|. 

We are concerned with the following two problems. 
Problem 1 (tractability problem)  When is  CSP 
tractable? 
Problem 2  (algorithmic problem)  Find  a  polynomial  time 
algorithm for  tractable  CSP 
In fact, properties of the amalgam do not strongly depend nei­
ther on properties of the original constraint languages nor on 
the  way they interact.  For example,  if V\,  T2  contains no re­
lations  of the  same  arity  then  their amalgam  is  empty.  We, 
therefore, should restrict the class of constraint languages to 
be studied. 
2.2  Relational Clones 
For  any  problem  in  CSP(T),  there  may  be  some  sets  of 
variables whose possible values subject to certain constraints 
which are not elements of Y.  These constraints are said to be 
implicit  and  arise  from  interaction of constraints  specified  in 
the problem [Jeavons,  1998a]. 

To  describe  implicit  constraint  relations  we  make  use  of 
the natural correspondence between relations and predicates: 
for an  n-ary  relation  Q on  a set  A,  the n-ary predicate Pe  is 
true  on  a tuple  a  if and  only  if a  Q.  Usually, we will not 
distinguish  a  relation  and  the  corresponding  predicate,  and 
freely use both terminology. An existential first order formula 
is said to be primitive 
positive  (pp-)  if  its  quantifier-free  part  $  is  a  conjunction  of 
atomic formulas. 
Definition 3 A relation is an implicit relation of a constraint 
language Y on a set A  if it can be expressed by a pp-formula 
involving  relations from  Y  and the  equality  relation  =A. 

A constraint language Y is said to be a relational clone if it 

contains  all  its  implicit  constraint  relations. 

The  relational  clone  (Y)  of all  implicit  constraint  relations 

of T is called the  relational clone generated by Y. 
Example 4  The  intersection  of relations  of  the  same  arity, 
and Cartesian product are expressible via pp-formulas: 

198 

CONSTRAINTS 

The  notion  of a  relational  clone  considerably  simplifies  the 
analysis  of  constraint  satisfaction  problems  in  view  of  the 
following result that links the complexity of a constraint lan(cid:173)
guage and the relational clone it generates. 
Theorem 1  ([Jeavons, 1998b])  Let  T  be  a  constraint  lan(cid:173)
(T)  finite.  Then  CSP(T') 
guage  on  a  finite  set,  and  T 
is polynomial time  reducible  to  CSP(T). 
This result  motivates restricting Problems  1,2 to the class of 
relational clones. 
Example 3 (continuation)  Reconsider  the  constraint  lan(cid:173)
guage  T  from  Example  3.  Results  of [Cohen  et  al,  2000b] 
implies  that 
is  also  tractable.  This  larger amal(cid:173)
gam includes, e.g., constraints of the form 
(mod  m)V 
y  =  b  (mod  n),  which are not members of 

Invariance  Properties  of Constraints 

2.3 
Another  advantage  of  considering  relational  clones  is  that 
they  often  admit  a  concise  description  in  terms  of algebraic 
invariance properties [Poschel and Kaluznin, 1979; Jeavons, 
1998b].  An (m-ary) operation / on a set A preserves an n-ary 
relation  Q on A  (or Q is  invariant under /, or /  is a polymor-
phism of Q) if for any 
Q the tuple 
belongs 
to Q. For a given  set  of operations,  C,  the set of all  relations 
invariant under every operation  from C  is denoted by  Inv  C. 
Conversely, for a  set  of relations,  T,  the set of all  operations 
preserving  every  relation  from  T  is  denoted  by  Pol  T.  Ev(cid:173)
ery relational clone can be represented in the form Inv  C for 
a certain  set of operations  C  [Poschel  and  Kaluznin,  1979]. 
Therefore,  in  view  of Theorem  1  the  complexity  of a finite 
constraint language depends only on  its polymorphisms. 

We need operations of some particular types that give rise 

to tractable problem classes. 
Definition 4  Let  A  be  a  finite  set.  An  operation  f  on  A  is 
called 

•  a  majority  operation  if  it  is  ternary,  and  f(x,x,y)  = 

•  affine  if 

where +, — are the operations of an Abelian group. 

Proposition 1  ([Jeavons et al,  1998;  1997])  //  T  is  a  con(cid:173)
straint  language  on  a finite  set,  and  Pol  T  contains  an  op(cid:173)
eration  of one  of the following  types:  constant,  semilattice, 
affine,  majority;  then  Y  is tractable. 
The complexity of constraint languages on a 2-elemcnt set is 
completely characterised in  [Schaefer,  1978].  This outstand(cid:173)
ing  result  is  known  as  Schaefer's Dichotomy Theorem.  By 
making use of Proposition  1  the algebraic version of Schae-
fer's theorem can be derived [Jeavons et al,  1997]. 

Theorem 2 (Schaefer, [Schaefer, 19781)  A  constraint  lan(cid:173)
guage  T  on  a  2-element  set  is  tractable  if and only  if Pol  T 
contains one of the operations listed in  Proposition  I.  Other(cid:173)
wise T is NP-complete. 

3  Tractable amalgams 
In  this  section  we  give  a  complete  solution  of Problems  1,2 
for  amalgams  of  relational  clones.  Throughout  the  section 
A,B  are  finite  sets, 
are relational 
clones on A, B respectively.  First, we reduce Problems  1,2 to 
the case when 
=  1 and prove NP-completeness results in 
this case. Then we concentrate on tractable cases and present 
a solving algorithm for these cases. 

The result 

3.1 
We assume that 
because otherwise 
ation, and therefore 

contain empty relations of any arity, 
contains a constant oper(cid:173)
is tractable by Proposition 1. 
The case when D  is empty was completely investigated in 

= 

then 
is polynomial time  reducible  to  CSP(RA), 
is  tractable  if and  only  if both 

[Cohen et al,  2000a]. 
Proposition2 ([Cohen et al., 2000a])  /f  D 
CSP 
CSP(RB).  Hence,  
RA , RB are tractable. 
So, we assume D to be non-empty. 
Proposition 3 ([Jeavons et al,  1997; Jeavons, 1998hl)  /f  / 
is a unary polymorphism of a constraint language T then the 

mial time  equivalent to  CSP(T). 
By 
a set C.  The following statement is straightforward. 

we denote the restriction of a (unary) operation / onto 

Proposition  4  (J) 
then 

are polymorphisms  of 

If 

f 

is  a  unary  polymorphism  of 

respectively. 

is  polynomial  time  equivalent  to 

If 

(3) 
the 
morphism  f  of 

amalgam 

is tractable then there is a poly(cid:173)
Otherwise, 

such that 

complete. 

Therefore,  we may restrict ourselves to the case 

In this case we need more notation and termi(cid:173)

to  be 

o

n-

let 
nology. 
Definition 5  The  relational  clone 
monolithic 
c
tains no  unary relation  E  with 
Let 

f

i

denote the relational clone generated by the set 

where  c  =  ( c , . . ., c)2.  Obviously, 

is defined analogously. 

'Note that in some earlier papers [Jeavons, 1998b; Jeavons et al, 

1998] the term AC1 operation is used. 

2We do not specify the length of the tuple c  =  (c,... ,c), be(cid:173)

cause it is always clear from the context. 

CONSTRAINTS 

199 

In  the  following  definition  we  introduce  an  auxiliary  re(cid:173)
lational  clone  on  the  2-element  set  Z  = 
{A,B}  that  de(cid:173)
scribes  interaction  of the  components  of the  amalgam.  For 
an-(n-ary)  relation 

We also define the cor(cid:173)
which  is  true  if and 
The  variable  y  will  be  called 

responding predicate 
only  if 
distinguished. 
Definition 6  The meta-clone 
is defined to be the set of all 
relations  on  Z  expressible  through  a pp-formula  of the form 

is 

where 
predicates 
y1 , • •  •,ym  ,Z1•  • • ,zk are the distinguished variables. 

conjunction 

of 

a 

The meta-clone 

is defined in a similar way. 

and 

Lemma 1  Meta-clones 
We now in a position to state the main result of this paper. 
Theorem 3  Let 

are  relational clones on  Z. 

1.  if 
only  if 

Then 
is  monolithic then 
is  tractable; 

is  tractable  if and 

2.  if  both 

are  not monolithic  then  RA  &  RB  is 
are  tractable. 
h
e
is  tractable  whenever 

tractable if and only if 
It  is  not  hard  to  see  t
fore,  by  Theorem 1, 
is tractable.  The converse inclusion follows from Lemma 2. 
Then,  it  can  be  proved  by  straightforward  calculation  that 

e(cid:173)

T

a

h

r

t

is  polynomial time reducible to 

RB).  Finally,  in  Sections  3.2,3.3,  we  show  how  to  reduce 

that 

is poly(cid:173)

A  -  {c},  there  is  a  unary  polymor(cid:173)

Lemma 2  If RA  is monolithic then 
nomial time  reducible to 
Proof: Let RA  be monolithic. We set out the proof in several 
claims. 
C L A IM  1.  For any a  
p h i s m s u ch 
;  be  the  list  of all  unary  polymorphisms  of 
__ Let 
Sup(cid:173)
RA ,  and  E  = 
pose  that  c 
RA-
Therefore, there is  a polymorphism  h(x1,...,  xn)  such that 
E,  say,  bi  =  aji.  The 
h(b1... 
is also a polymor(cid:173)
operation 
phism of RA  [Poschel  and KaluZnin,  1979], and  h'(a) 
E, 
a contradiction. 
C L A IM 2.  RA  is invariant under the constant operation c. 

E.  Since  RA  is  monolithic,  E 

E  for  some  bi 

,bn) 

S i

n

f

e

or  any  a

c
This  implies 
Then  choosing  an  element 

 

A  -  {c},  we  have 

for  any 

Continuing  the  process 

is the required constant 

we  get 
we eventually obtain an operation  f(x)  = 
such that 
operation. 
Claim 2 implies that  if 
C L A IM  3.  The operation g on AuB  where 
and 

is a polymorphism of 

is non-empty then 

The Split Problem 

3.2 
We transform a problem over an amalgam so that the interac(cid:173)
tion of its components becomes more transparent. 

Lemma 4  V  is equivalent to V. 

3.3  Solving  the  Split Problem 

200 

CONSTRAINTS 

CONSTRAINTS 

201 

References 
[Cohen et al,  1997]  D.A.  Cohen,  P.G.  Jeavons, 

and 
In 
M.  Koubarakis.  Tractable  disjunctive  constraints. 
Proceedings  3rd  International  Conference  on  Constraint 
Programming—CP'97  (Linz,  October  1997),  volume 
1330  of  Lecture  Notes  in  Computer  Science,  pages 
478-490. Springer-Verlag, 1997. 

[Cohensal, 2000a]  D.A.  Cohen,  P.G.  Jeavons,  and  R.L. 
Gault.  New tractable constraint classes from old.  In Pro-
ceedings  6th  International  Conference  on  Principles  and 
Practice  of  Constraint  Programming—CP'2000,  volume 
1894  of Lecture Notes  in  Computer Science,  pages  160-
171. Springer-Verlag, 2000. 

ICohen et al, 2000b]  D.A. Cohen, P.G. Jeavons, P. Jonsson, 
and  M.  Koubarakis.  Building  tractable  disjunctive  con(cid:173)
straints.  Journal of the ACM,  47:826-853,2000. 

[Cooper,  1989]  M.C.Cooper.  An  optimal  k-consistency al(cid:173)

gorithm.  Artificial  Intelligence,  41:89-95,1989. 

[Dechter and Pearl,  1989]  R.  Dechter  and  J.  Pearl.  Tree 
clustering  for  constraint  networks.  Artificial  Intelligence, 
38:353-366,1989. 

[Dechter and van Beek,  1997]  R.  Dechter and  P.  van  Beek. 
Local and global relational consistency.  Theoretical Com(cid:173)
puter Science,  173(1):283-308,1997. 

[Freuder,  1990]  B.C.  Freuder.  Complexity  of  K-tree  struc(cid:173)
tured constraint satisfaction  problems.  In Proceedings of 
8th  National  Conference  on  Artificial  Intelligence  AAAl-
90, pages 4-9, 1990. 

[Gottlob et al, 2000]  G. Gottlob, L. Leone, and F. Scarcello. 
A  comparison of structural  CSP decomposition  methods. 
Artificial  Intelligence,  124(2):243-282,2000. 

[Jeavons et al,  1997]  P.G.  Jeavons,  D.A.  Cohen,  and 
M.  Gyssens.  Closure properties of constraints.  Journal of 
the ACM, 44:527-548, 1997. 

[Jeavons et al,  19981  P.G.  Jeavons,  D.A.  Cohen,  and  M.C. 
Cooper.  Constraints,  consistency  and  closure.  Artificial 
Intelligence,  101(l-2):251-265,1998. 

Ueavons,  1998a]  P.G.  Jeavons.  Constructing  constraints. 
In  Proceedings  4th  International  Conference  on  Con(cid:173)
straint  Programming—CP'  98 (Pisa,  October  1998),  vol(cid:173)
ume  1520  of Lecture  Notes  in  Computer Science,  pages 
2-16. Springer-Verlag, 1998. 

[Jeavons,  1998b]  P.G. Jeavons.  On the algebraic structure of 
combinatorial  problems.  Theoretical  Computer Science, 
200:185-204,1998. 

[Montanari,  1974]  U.  Montanari.  Networks  of constraints: 
Fundamental  properties  and  applications  to  picture  pro(cid:173)
cessing.  Information Sciences, 7:95-132,1974. 

[Poschel and Kaluznin, 1979]  R. Poschel and L.A. Kaluznin. 
Funktionen- und Relationenalgebren.  DVW, Berlin,  1979. 
[Schaefer, 1978]  T.J.  Schaefer.  The  complexity  of satisfia(cid:173)
bility problems.  In Proceedings 10th ACM Symposium on 
Theory of Computing  (STOC'78),  pages 216-226,1978. 

202 

CONSTRAINTS 

