A Maximal Tractable Class of Soft Constraints 

David Cohen 

Martin Cooper 

Peter Jeavons 

Andrei Krokhin 

Computer Science Department 

IRIT 

OUCL 

RHUL, UK 

University  of  Toulouse  III,  France  University of Oxford, UK 

d.cohen@rhul.ac.uk cooper@irit.fr p.jeavons@comlab.ox.ac.uk ak@dcs.warwick.ac.uk 

Computer Science Department 
University of Warwick, UK 

Abstract 

Many optimization problems can be expressed us­
ing  some  form  of soft  constraints,  where  different 
measures  of desirability  arc  associated  with  differ­
ent  combinations  of  domain  values  for  specified 
subsets  of variables. 
In  this  paper  we  identify  a 
class  of soft binary constraints  for which the prob­
lem  of finding the optimal  solution  is tractable.  In 
other  words,  we  show  that  for  any  given  set  of 
such constraints, there exists a polynomial time al­
gorithm  to  determine  the  assignment  having  the 
best overall combined measure of desirability.  This 
tractable class includes many commonly-occurring 
soft constraints, such as "as near as possible" or "as 
soon as possible after", as well as crisp constraints 
such as "greater than'1. 

Introduction 

1 
The  constraint  satisfaction  framework  is  widely  acknowl­
edged as a convenient and efficient way to model and solve a 
wide variety of problems arising in Artificial  Intelligence, in­
cluding planning and scheduling, image processing and natu­
ral language understanding. 

In the standard framework  a constraint is  usually taken  to 
be a predicate, or relation, specifying the allowed combina­
tions of values for some fixed collection of variables:  we will 
refer to  such  constraints  here  as  crisp  constraints.  A  num­
ber of authors have suggested that the  usefulness of the con­
straint satisfaction  framework could be  greatly  enhanced  by 
extending  the  definition  of a  constraint  to  include  also  soft 
constraints,  which  allow different measures of desirability to 
be associated with different combinations of values [Bistarelli 
et  al.,  1999]. 
In  this  extended  framework  a  constraint  can 
be seen as a function, mapping each possible combination of 
values to a measure of desirability or undesirability.  Finding 
a  solution  to  a  set of constraints then  means  finding  an  as­
signment  of values to all  of the  variables  which  has  the best 
overall combined desirability measure. 

Example 1,1  For  example,  consider  an  optimization  prob­
lem  where  we  have  2n  variables,  v1,v2,.  .-,V2n, and we 
wish  to  assign  each  variable  an  integer  value  in  the  range 
1,2,..., n,  subject to the  following restrictions: 

•  Each  variable  v1  should be  assigned  a  value  that is  as 

close as possible to  i/2. 

•  Each pair of variables  v1  v2,  should be  assigned a pair 

of values that are as similar as possible. 

To  model  this  situation  we might  impose  the  following  soft 
constraints: 

•  A unary constraint on each v1 specified by a function 

where 

•  A  binary  constraint  on  each  pair  v1,v2i  specified  by  a 

function 

We  would  then  seek  an  assignment  to  all  of the  variables 
which minimizes the sum of these constraint functions, 

LJ 

The cost of allowing additional  flexibility  in the specification 
of constraints, in order to model requirements of this kind, is 
generally an increase in computational difficulty.  In the case 
of crisp  constraints  there  has  been  considerable  progress  in 
identifying  classes  of constraints  which  are  tractable,  in  the 
sense that there exists a polynomial time algorithm to deter­
mine whether or not any collection of constraints from such a 
class can be simultaneously satisfied [Feder and Vardi,  1998; 
Jeavons  et  ail  1997]. 
In  the  case  of soft  constraints  there 
has  been  a  detailed  investigation  of the  tractable  cases  for 
Boolean  problems  (where  each  variable  has just  2  possible 
values) [Creignou et  al,  2001], but very little investigation of 
the  tractable  cases  over  larger domains1,  even  though  there 
are  many  significant  results  in  the  literature  on  combina­
torial  optimization  which  are  clearly  relevant  to  this  ques­
tion [Nemhauser and Wolsey,  1988]. 

In this paper we make use of the idea of a submodular func(cid:173)
tion  [Nemhauser and  Wolsey,  1988;  Topkis,  1978]  to  iden­
tify  a general  class  of soft  constraints  for which there  exists 
a polynomial time solution algorithm.  Submodular functions 
are usually defined as  real-valued  functions on  Boolean  tu­
ples (=sets) [Nemhauser and Wolsey,  1988], but we consider 

'The  only  previous  work  we  have  been  able  to  find  on  non-
Boolean  tractable  soft  constraints  is  [Khatib  et ai,  2001],  which 
describes a family of tractable soft temporal constraints. 

CONSTRAINTS 

209 

the more general case of functions on tuples over an arbitrary 
finite  domain.  We  also  allow  our  functions  to  take  infinite 
values.  By  establishing  a  new  decomposition result  for this 
general  class of binary  submodular functions  (Theorem 4.4), 
we obtain a cubic time algorithm to find the optimal  assign­
ment for any set of soft constraints defined by such functions. 
We  give  a  number of examples to  illustrate  the  many  dif­
ferent  forms  of soft  constraint that  can  be  defined  using  bi­
nary submodular functions, and we also show that this class is 
maximal,  in the sense that no other form of binary constraint 
can be added without sacrificing tractability. 

2  Definitions 
To identify a tractable class of soft constraints we will need to 
restrict the set of functions that are used to specify constraints. 
Such a restricted set of possible functions will be called a soft 
constraint  language. 

Definition 2.1  Let D and  E be  fixed  sets.  A soft constraint 
language over D with evaluations in  E is defined to be a  set 
of functions,  T,  such  that each 
is a  function from Dk 
to  E,  for some 

where k is called the arity  of 

For any given choice of soft constraint language, T we define 
an associated soft constraint satisfaction problem, which  we 
will call sCSP(r), as follows. 

Definition 2.2  Let  T  be  a  soft  constraint  language  over  D 
with  evaluations  in  E.  An  instance V  of sCSP(r)  is  a triple 
(V,D,C),  where: 

•  V  is  a  finite  set  of  variables,  which  must  be  assigned 

values from the set D. 

•  C is a set of soft constraints. Each 

is a pair (a, d>) 
is a list of variables, called the scope of c  and 
,  called the evaluation 

is  an  element  of T  of arity 

where: 

function  of c. 

the arity of the con­
Note that, for any constraint 
straint is given by 
the length of the constraint scope.  The 
evaluation function  will  be  used to specify some  measure 
of desirability or undesirability associated with each possible 
tuple of values over 

To  complete  the  definition  of  a  soft  constraint  satisfac­
tion problem we need to define how the evaluations obtained 
from each evaluation function are combined and compared, 
in  order to  define  what  constitutes  an  optimal  overall  solu­
tion.  Several alternative mathematical approaches to this is­
sue have been suggested in the literature: 

•  In the semiring based approach  [Bistarelli et  al,  1999], 
the  set of possible  evaluations,  E,  is  assumed  to  be  an 
algebraic structure equipped with two binary operations, 
satisfying the axioms of a semiring. 

•  In the valued CSP approach  [Bistarelli et al,  1999], the 
set of possible evaluations  E  is  assumed to be  a totally 
ordered  algebraic  structure  with  a  top  and bottom  ele­
ment and a single monotonic binary operation known as 
aggregation. 

For our purposes  in  this  paper  we  require  the  same  proper­
ties as the valued CSP approach, with the additional require­
ment  that  the  aggregation  operator has  a  partial  inverse  (so 
that any evaluation can be "subtracted" from any larger eval­
uation).  For concreteness,  we shall  simply assume through­
out this paper that the set of evaluations  E  is either the set of 
non-negative integers together with infinity, or else the set of 
non-negative real  numbers together with infinity.  Hence,  for 
the aggregation of p1 and  p2 
any two evaluations 
is given by 
we also have 

(Note that we set 

The  elements  of the  set  E  will  be  used  to  represent  dif­
ferent measure of undesirability, or penalties, associated with 
different combinations of values.  This allows us to complete 
the  definition  of a  soft  constraint  satisfaction  problem  with 
the following simple definition of a solution to an instance. 

Definition 2.3  For  any  soft  constraint  satisfaction  problem 
instance  V  —  (V, D, C),  an assignment  for V  is a mapping 
t  from  V  to  D.  The  evaluation  of an  assignment  t,  denoted 
is given by the sum (i.e., aggregation) of the evalua­
tions  for the restrictions of t  onto each constraint scope, that 
is, 

A  solution  to  V  is  an  assignment  with  the  smallest possible 
evaluation, and the question is to find a solution. 

Example 2.4  For any  standard  constraint  satisfaction  prob­
lem  instance  V  with  crisp  constraints,  we  can  define  a  cor­
responding soft constraint satisfaction problem  instance V  in 
which  the  range  of the  evaluation  functions  of all  the  con­
straints is the set 
.  For each crisp constraint c of P, we 
define  a  corresponding  soft  constraint  cofV  with  the  same 
scope;  the evaluation  function  of c maps each tuple allowed 
by c to 0, and each tuple disallowed by c to oo. 

In this case the evaluation of an assignment  t  for 

equals 
the minimal possible evaluation, 0, if and only ift , satisfies all 
of the crisp constraints in V. 
D 

Note  that  the  problem  of  finding  a  solution  to  a  soft  con­
straint  satisfaction  problem  is  an  NP  optimization  problem, 
that  is,  it  lies  in  the  complexity  class  NPO  (see  [Creignou 
et  al,  2001]  for  a  formal  definition  of this  class). 
If there 
exists a polynomial-time algorithm which finds a solution to 
all  instances of sCSP(T), then we shall say that sCSP(T)  is 
tractable.  On the other hand, if there is a polynomial-time re­
duction from  some  NP-complete problem to sCSP(T),  then 
we shall  say that sCSP(r)  is NP-hard. 

Example 2.5  Let  Y  be  a  soft  constraint  language  over  D, 
where 
=  2.  In  this case sCSP(r)  is a class of Boolean 
soft constraint satisfaction problems. 

If we  restrict  T  even  further,  by  only  allowing  functions 
as in Example 2.4, then sCSP(r) corre­
with range 
sponds precisely  to  a standard Boolean  crisp constraint sat­
isfaction problem.  Such problems are sometimes known as 

210 

CONSTRAINTS 

GENERALIZED SATISFIABILITY problems [Schaefer, 1978]. 
The  complexity  of sCSP(F)  for  such  restricted  sets  T  has 
been  completely  characterised,  and  the  six  tractable  cases 
have been identified [Schaefer,  1978; Creignou et al, 2001]. 
Alternatively,  if we  restrict  Y  by  only  allowing  functions 
with range  {0,1),  then sCSP(r)  corresponds precisely to a 
standard  Boolean maximum  satisfiability problem,  in  which 
the aim is to satisfy the maximum number of crisp constraints. 
Such  problems  are  sometimes  known  as  M A X - S AT  prob­
lems  [Creignou  et  al,  2001].  The  complexity  of sCSP(r) 
for such restricted sets F has been completely characterised, 
and the three tractable cases have been identified (sec Theo­
rem 7.6 of [Creignou et al., 2001]). 

We note, in particular, that when T contains just the single 

binary function 

defined by 

then sCSP(r) corresponds to the M A X - S AT problem for the 
exclusive-or predicate,  which  is  known  to  be  NP-hard  (see 
Lemma 7.4 of  LCreignou et al., 2001]). 
□ 

Example 2.6  Let  T  be  a  soft  constraint  language  over  D, 
where 
and  assume  that  T  contains just  the  set of 
all  unary  functions,  together with  the  single  binary  function 

defined by 

Even in this very simple case  it can be shown that sCSP(T) 
is  NP-hard  [Cohen  et  al,  2002],  by  reduction  from  the 
M I N I M UM M U L T I T H R M I N AL C UT problem [Dahlhausc/a/., 
1994]. 
u 
The examples above indicate that generalizing the constraint 
satisfaction framework to include soft constraints docs indeed 
increase the computational complexity, in general.  For exam­
ple, the standard 2-SATISFIABILITY problem is tractable, but 
the soft constraint satisfaction problem involving only the sin­
gle binary Boolean function, 
defined at the end of Ex­
ample 2.5, is NP-hard.  Similarly, the standard constraint sat­
isfaction  problem  involving only crisp  unary constraints and 
equality  constraints  is  clearly  trivial,  but  the  soft  constraint 
satisfaction problem involving only soft unary constraints and 
a soft version of the equality constraint, specified by the func­
tion ΦEQ defined at the end of Example 2.6, is NP-hard. 

However,  in  the  next  two  sections  we  will  show  that  it 
is  possible  to  identify  a  large  class  of functions  for  which 
the  corresponding  soft  constraint  satisfaction  problem  is 
tractable. 

3  Generalized interval functions 
We  begin  with  a  rather  restricted  class  of binary  functions, 
with a very special structure. 

Definition 3.1  Let D be a totally ordered set.  A binary func­
tion, Φ : D2 —> E will be called a generalized interval func­
tion on D  if it has the following form: 

We can explain the choice of name for these functions by con­
sidering the unary function 
. This function returns 
the value p if and only if its argument lies in the interval [a, b]; 
outside of this interval it returns the value 0. 

We shall write  TGI  to denote the set of all generalized in­
terval  functions  on  D,  where  D  =  { 1 , 2 , . . .,  M}  with  the 
usual ordering. 

The  main  result  of this  section  is  Corollary  3.6,  which 
states that S C S P ( T G I) is tractable. To establish this result we 
first define a weighted directed graph2  associated with  each 
instance  of sCSP(Ff;/). 

Definition  3.2  Let  V  =  (V,  { 1 , . . ., M }, C)  be  an  instance 
of  sCSP(Tgi).  We define  the weighted  directed  graph  G-p 
as follows. 

•  The vertices of G-p are as follows: 

•  The edges of Gp  are defined as follows: 

-  For each 

weight 

-  For each 

weight 

there is an edge from S to 

with 

, there is an edge from 

with 

there is an edge from vci to Vd+\  with weight 

there is an 
with weight p.  These edges 

-  For each constraint 

edge from 
are called "constraint edges". 

Example3.3  Let  V  =  ({x,y, z}, {1,2,3,4},C)  be  an  in­
stance of sCSP(TGI) with the following four constraints: 

The corresponding weighted directed graph Gp, is shown  in 
U 
Figure  1. 

Figure  1:  The graph  Gp  associated with the  instance V  de­
fined in Example 3.3. 

2This construction was inspired by a similar construction for cer­

tain Boolean constraints described in [Khanna et al., 2000]. 

CONSTRAINTS 

211 

corresponding to a constraint from  K  and so the edges 
corresponding  to the set  K  form a  cut  in  Gp.  Further­
more, by the choice of  K  the weight of this cut is equal 
to the evaluation of/. 

D 
Hence,  by using a  standard efficient algorithm  for the  MIN-
IMUM W E I G H T ED C UT  problem 
[Goldberg  and  Tarjan, 
1988], we can find an optimal assignment in cubic time. 

Corollary 3.6  The 

, where n is the number of variables. 

time  complexity  of  sCSP(TGI) 

is 

4  Submodular functions 
In this section we will consider a rather more general class of 
functions, as described in [Topkis, 1978]. 

It is easy to check that all unary functions and all generalized 
interval  functions are submodular.  For binary  functions, the 
definition of submodularity can be simplified, as follows. 

Any  set of edges  C  in  the  graph  Gp  whose  removal  leaves 
the  vertices  S  and  T  disconnected  will  be  called  a  cut. 
If 
every edge in C is a constraint edge, then C will be called a 
proper cut.  The weight of a cut C is defined to be the sum of 
the weights of all the edges in C. 

Example 3.4  Consider  the  graph  Gp  shown  in  Figure  1. 
The  set  {(y3,20)} 
is  a  proper  cut  in  Gp  with  weight 
7,  which  is  minimal  with  respect  to  inclusion.  The  set 
{(x4,y2),  (z3,y3)}  is  a  proper  cut  in  Gp  with  weight  5, 
which is again minimal with respect to inclusion. 

D 

Proposition 3.5  Let V  be  any  instance  of  sCSP{Tgi)>  and 
let Gp  be the corresponding weighted directed graph. 

1.  For each minimal proper cut in Gp with weight 

is an assignment for V with evaluation 

there 

2.  For each  assignment t for V  with  evaluation 

a proper cut in  Gp  with  weight 

, there is 

Proof: 

1.  Let C  be  any  minimal proper cut of the  graph  Gp,  and 
let  Cs  be  the  component  of Gp  \  C  connected  to  S. 
Define the assignment tc as follows: 

(Note  that  tc  is  well-defined  because  Cs  always  con­
tains  vM,  and never contains V0, by construction.) 
By  the  construction  of Gp,  it follows  that: 

Now  consider any  constraint 
of  P, 
and  its  associated  edge  e  in  Gp.  By  the  definition 
of generalized  interval  constraint  and  the  choice  of tc, 
and 
and hence if and only if e joins a vertex in Cs 
to a vertex not in Cs-  Since C is minimal, this happens 
if and  only  if 
Hence,  the total  weight of the cut 
C  is equal  to the evaluation of tc-

if and only  if 

I -J 

2.  Conversely, let t be an assignment to P, and let A' be the 

set of constraints in V with a non-zero evaluation on t. 
Now  consider any  path  from  S  to  T  in  Gp.  If we  ex­
amine,  in  order,  the  constraint  edges  of tnis  path,  and 
assume that each of the corresponding constraints eval­
uates to 0, then we obtain a sequence of assertions of the 
following form: 

It  follows  from  Definition 4.1  that the  sum  of any two  sub-
modular functions is submodular.  This suggests that in some 
cases it may be possible to express a submodular function as 
a sum of simpler submodular functions.  For example, for any 
unary function 

: D —► E we have 

Since  the  second  disjunct  of each  assertion  contradicts 
the first disjunct of the next,  these assertions cannot all 
hold  simultaneously,  so  one of the  corresponding con­
straints  must  in  fact  give  a  non-zero  evaluation  on  t. 
Hence, every path from S to T includes at least one edge 

The main result of this section  is Theorem 4.4,  which states 
that any binary submodular function can also be expressed as 
a sum of generalized interval functions. 

Theorem  4.4  Let  D  be  a  totally  ordered  finite  set.  A  binary 
: D2 —► E is submodular if and only if it can be 
function, 
expressed as a sum of generalized interval functions on D. 

212 

CONSTRAINTS 

Proof:  By  the  observations  already  made,  any  function 
which  is  equal  to a sum  of generalized  interval  functions 
clearly  submodular. 

We remark that this decomposition  is not unique - other de­
compositions  exist,  including  the  symmetric  decomposition 

Combining Theorem 4.4 with Corollary 3.6, gives: 

The  next  result  shows  that  the  tractable  class  identified  in 
Corollary 4.6 is maximal. 

w h e r e is 

Proof:  The  proof  is  by  reduction  from 
to 
the  binary  function 
defined  in  Example  2.5.  It was  pointed  out  in  Example  2.5 
that 
corresponds to the M A X - S AT problem 
for  the  exclusive-or  predicate,  which  is  known  to  be  NP-
hard [Creignou et  al.,  2001].  Hence 
is also 
NP-hard.  Details of the reduction are given in [Cohen et al., 
2002]. 
D 

5  Applications 
In  this  section  we  give  a  number  of examples  to  illustrate 
the wide range of soft constraints which can be shown to be 
tractable using the results obtained in the previous sections. 

Definition 5.1  For any k-ary relation R on a set D, we define 
an associated function, 

as follows: 

By  Corollary  4.6,  any  collection  of crisp  constraints,  where 
each  constraint  is  specified  by  a  relation  It  for  which  ΦR 
is  unary  or binary  submodular,  can be  solved  in  polynomial 
time, even when combined with other soft constraints that are 
also unary or binary submodular. 

Example 5.2  The  constraint  programming  language  CHIP 
incorporates  a  number  of constraint  solving  techniques  for 
arithmetic  and  other constraints.  In particular,  it provides  a 
constraint solver for a restricted class of crisp constraints over 
natural numbers, referred to as basic constraints [van Henten-
ryck et  al,  1992].  These  basic  constraints are of two kinds, 
which are referred to as "domain constraints" and "arithmetic 
constraints".  The domain constraints described in [van Hen-
tenryck et  al,  1992]  are unary  constraints  which restrict the 
value of a variable to some  specified  finite  subset of the nat­
ural  numbers.  The  arithmetic  constraints  described  in  [van 
Hentenryck et ai,  1992] have one of the following forms: 

where  variables  are  represented  by  upper-case  letters,  and 
constants by lower case letters, all constants are non-negative 
real numbers and a is non-zero. 

For  each  of  these  crisp  constraints  the  associated  func­
tion  given  by  Definition  5.1  is  unary  or binary  submodular, 
hence, by Corollary 3.6, any problem involving constraints of 
this form can be solved in  cubic time.  Moreover,  any other 
soft  constraints  with  unary  or  binary  submodular evaluation 
functions can be added to such problems without sacrificing 
tractability (including the examples below). 
D 

Now assume, for simplicity, that D  —  { 1, 2 , . . ., M}. 

Example 5.3  Consider  the  binary  linear  function 

defined 

This  function  is submodular and hence,  by  Corollary  3.6, 
any  collection  of such  binary  linear soft  constraints  over the 
discrete set D can be solved in polynomial time. 

CONSTRAINTS 

213 

Example 5,4  The  Euclidean  length  function  
is 
submodular,  and  can  be  used  to  express  the  constraint  that 
a 2-dimensional  point  (x, y)  is  "as  close  to the  origin  as pos­
sible". 

G 

One  of the  several  possible  cuts  with  this  weight  is  indi­
cated by the  gray  line  across  the  graph,  which  corresponds  to 
the  solution 
□ 

Example  5.5  The  following  functions  are  all  submodular: 

can  be  used  to  express  the  constraint 
"The  values  assigned  to  the  variables  x  and  y 

The  function 
that: 
should be as similar as possible". 

The  function  
can  be  used  to  express  the  constraint 
that:  "The  value  of x  is  either  less  than  or  as  near  as 
possible  to  y'' 

The  function 
constraint that:  "x  occurs  as  soon  as  possible  after y". 

can  be  used  to  express  the  temporal 

D 

Example  5.6  Reconsider  the  optimization  problem  defined 
in  Example  1.1.  Since  
is  binary  submod­
ular (Example  5.5),  this problem  can be  solved  in  cubic  time, 
using  the  methods  developed  in  this paper. 

is unary,  and  

Let  V  be  the  instance  with  n  =  3  and  r  =  2.  The  values  of 
are  given  by  the  following table: 

Hence, 

Using this  decomposition  for  
Gp  corresponding  to  the  instance  P,  as  follows. 

we  can  construct  the  graph 

References 
[Bistarelli et al., 1999]  S.  Bistarelli,  U.  Montanari,  F.  Rossi, 
T.  Schiex,  G.  Vcrfaillic,  and  H.  Fargier.  Semiring-based  CSPs 
and valued CSPs: Frameworks, properties, and comparison. Con-
straints,4:\99  240,  1999. 

[Cohen et al, 2002]  D.  Cohen,  M.  Cooper,  P.  Jeavons,  and 
A.  Krokhin.  A  tractable  class  of  soft  constraints.  Technical 
Report  CSD-TR-02-14,  Computer  Science  Department,  Royal 
Holloway,  University  of London,  Egham,  Surrey,  UK,  Decem­
ber 2002. 

|Crcignourt  a/., 2001]  N.  Creignou,  S.  Khanna,  and  M.  Sudan. 
Complexity  Classifications  of  boolean  Constraint  Satisfaction 
Problems  volume  7  of  SI  AM  Monographs  on  Discrete  Mathe(cid:173)
matics and Applications.  2001. 

[Dahlhaus et al., 1994]  E.  Dahlhaus,  D.S. Johnson,  C.H. Papadim-
itriou,  P.D.  Seymour,  and  M.  Yannakakis.  The  complexity  of 
multiterminal cuts. SI AM Journal on Computing, 23(4):864-894, 
1994. 

[Feder and Vardi,  1998]  T.  Feder  and  M.Y.  Vardi.  The  computa­
tional  structure  of monotone  monadic  SNP  and  constraint  satis­
faction: A study through Datalog and group theory. SI AM Jour(cid:173)
nal of Computing,  28:57-104,  1998. 

[Goldberg and Tarjan,  1988]  A.  Goldberg and  R.E.  Tarjan.  A  new 
approach  to  the  maximum  flow  problem.  Journal  of the  ACM, 
35:921-940,  1988. 

[Jeavons et al.,  1997]  P.G.  Jeavons,  D.A.  Cohen,  and  M.  Gyssens. 

Closure  properties  of constraints.  Journal  of the  ACM,  44:527 
548, 1997. 

[Khanna et al, 2000]  S.  Khanna,  M.  Sudan,  L.  Trevisan,  and 
D.  Williamson.  The  approximability  of constraint  satisfaction 
problems. SI AM Journal on Computing, 30(6): 1863 1920, 2000. 
[Khatib et al, 2001]  L.  Khatib, P. Morris, R. Morris, and F.  Rossi. 
Temporal  constraint reasoning with preferences.  In  Proceedings 
of the  17th  International  Joint  Conference  on  Artificial  Intelli(cid:173)
gence (IJCAI-01), pages 322-327, Seattle, USA, 2001. 

[Nemhauser and Wolsey,  1988]  G.L.  Nemhauser and  L.A.  Wolsey. 
Integer  and  Combinatorial  Optimization.  John  Wiley  &  Sons, 
1988. 

[Schaefer,  1978]  T.J.  Schaefer.  The  complexity  of  satisfiability 
In  Proceedings  10th  ACM Symposium  on  Theory of 

problems. 
Computing,  STOC 78, pages 216  226,  1978. 

[Topkis,  1978]  D.M. Topkis.  Minimizing a submodular function on 

a lattice.  Operations Research, 26:305-321,  1978. 

[van Hentenryck et al,  1992]  P. van Hentenryck, Y. Deville, and C-
M. Tcng.  A generic arc-consistency algorithm and its specializa­
tions.  Artificial Intelligence,  57:291  321,  1992. 

The  minimum  weight  of  any  cut  in  this  graph  is  11/4,  and 
hence the optimal evaluation of any assignment for V is  11/4. 

214 

CONSTRAINTS 

