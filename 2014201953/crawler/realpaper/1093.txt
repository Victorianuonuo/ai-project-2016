Boosting a Complete Technique to Find MSS and MUS

thanks to a Local Search Oracle

´Eric Gr´egoire and Bertrand Mazure and C´edric Piette

CRIL-CNRS & IRCICA – Universit´e d’Artois

rue Jean Souvraz SP18 F-62307 Lens Cedex France

{gregoire,mazure,piette}@cril.univ-artois.fr

Abstract

In this paper, a new complete technique to com-
pute Maximal Satisﬁable Subsets (MSS) and Min-
imally Unsatisﬁable Subformulas (MUS) of sets of
Boolean clauses is introduced. The approach im-
proves the currently most efﬁcient complete tech-
nique in several ways.
It makes use of the pow-
erful concept of critical clause and of a compu-
tationally inexpensive local search oracle to boost
an exhaustive algorithm proposed by Lifﬁton and
Sakallah. These features can allow exponential ef-
ﬁciency gains to be obtained. Accordingly, experi-
mental studies show that this new approach outper-
forms the best current existing exhaustive ones.

1 Introduction

This last decade, the SAT problem, namely the issue of check-
ing whether a set of Boolean clauses is satisﬁable or not, has
received much attention from the AI research community. In-
deed, SAT appears to be a cornerstone in many domains, like
e.g. nonmonotonic reasoning, automated reasoning, model-
based diagnosis, planning and knowledge bases veriﬁcation
and validation. However, only knowing that a SAT instance
is unsatisﬁable is often not satisfactory since we might prefer
knowing what goes wrong with the instance when this latter
one is expected to be satisﬁable.

In this respect, the MUS (Minimally Unsatisﬁable Subfor-
mula) concept can be crucial since a MUS can be seen as an
irreducible cause for infeasibility. Indeed, a MUS is an un-
satisﬁable set of clauses that is such that any of its subsets
is satisﬁable. It thus provides one explanation for unsatisﬁa-
bility that cannot be made shorter in terms of the number of
involved clauses. Restoring the satisﬁability of an instance
cannot be done without ﬁxing all its MUS.

Unfortunately, a same instance can exhibit several MUS.
Actually, the number of these MUS can be exponential since
a n-clauses SAT instance can exhibit Cn/2
n MUS in the worst
case. Moreover, computing MUS is intractable in the gen-
eral case.
Indeed, checking whether a set of clauses is a
MUS or not is DP-complete [Papadimitriou and Wolfe, 1988]
and checking whether a formula belongs to the set (clutter)
of MUS of an unsatisﬁable SAT instance or not, is in Σp

2

[Eiter and Gottlob, 1992]. Fortunately, the number of MUS
remains often tractable in real-life applications. For example,
in model-based diagnosis [Hamscher et al., 1992], it is often
assumed that single faults occur most often, which can entail
small numbers of MUS.

A dual concept is the notion of Maximal Satisﬁable Sub-
set (MSS) of a SAT instance, and the complement of a MSS
in a SAT instance is called a CoMSS. The complete sets of
MUS and MSS are an implicit encoding of the other [Lifﬁ-
ton and Sakallah, 2005]. Speciﬁcally, a CoMSS is a hitting
set of the set of MUS and represent minimal sets of clauses
that should be dropped in order to restore consistency. In this
paper, we are interested in exhaustive approaches to compute
these correlated concepts in the Boolean clausal framework.
Recently, several approaches have been proposed to ap-
proximate or compute MUS and MSS, both in the Boolean
framework and for other types of constraints. Some of them
concern speciﬁc classes of clauses or remain tractable for
small instances, only. Among them, let us mention the ap-
proach in [Bruni, 2005], where it is shown how a MUS can
be extracted in polynomial time through linear programming
techniques for clauses exhibiting a so-called integral prop-
erty. However, only restrictive classes of clauses obey such a
property (mainly Horn, renamable Horn, extended Horn, bal-
anced and matched ones). Let us also mention [B¨uning, 2000;
Davydov et al., 1998; Fleischner et al., 2002], which are other
important studies in the complexity and the algorithmic as-
pects of extracting MUS for speciﬁc classes of clauses. In
[Bruni, 2003], an approach is proposed that approximates
MUS by means of an adaptative search guided by clauses
In [Zhang and Malik, 2003] a technique is de-
hardness.
scribed, that extracts MUS by learning nogoods involved in
the derivation of the empty clause by resolution. In [Lynce
and Marques-Silva, 2004], a complete and exhaustive tech-
nique to extract smallest MUS is introduced. In [Oh et al.,
2004], a DPLL-oriented approach has been presented that is
based on a marked clauses concept to allow one to approxi-
mate MUS. In [Gr´egoire et al., 2006a], a heuristic-based in-
complete approach to compute MUS has been introduced,
which outperforms competing ones from a computational
point of view.

Interestingly, in [Gr´egoire et al., 2006b] the same authors
have introduced a concept of inconsistent cover to circum-
vent the possible intractable number of MUS, and presented

IJCAI-07

2300

a technique to compute such covers. Roughly, an inconsis-
tent cover of an unsatisﬁable SAT instance represents a set
of MUS that covers enough independent causes of inconsis-
tency that would allow the instance to regain consistency if
they were repaired. Although an inconsistent cover does not
provide us with the set of all MUS that may be present in a
formula, it does however provide us with a series of minimal
explanations of inconsistency that are sufﬁcient to explain and
potentially “ﬁx” enough causes of inconsistency in order for
the whole instance to regain consistency.

These latter techniques are incomplete ones in the sense
that they do not necessarily deliver all MUS. However, in
some application domains, it can be necessary to ﬁnd the
set of all MUS, because diagnosing infeasibility is hard, if
not impossible, without a complete view of its causes [Lifﬁ-
ton and Sakallah, 2005]. Obviously enough, such techniques
can only remain tractable provided that the number of MUS
remains itself tractable. Likewise, the number of MSS and
CoMSS can be exponential in the worst case. It should be
noted that many domains in Artiﬁcial Intelligence like belief
revision (e.g. [Bessant et al., 2001]) involve conceptual ap-
proaches to handle unsatisﬁability that can require the com-
plete sets of MUS, MSS, and CoMSS to be computed in the
worst case, even when additional epistemological ingredients
like stratiﬁcation are introduced in the logical framework.

In this paper, the focus is on complete techniques. We in-
troduce a new complete technique to compute all MUS, MSS
and CoMSS of a SAT instance, provided obvious tractabil-
ity limitations. It improves the currently most efﬁcient com-
plete technique, namely Lifﬁton and Sakallah’one [Lifﬁton
and Sakallah, 2005] (in short L&S), which in turn was shown
more competitive than previous approaches by Bailey and
Stuckey [Bailey and Stuckey, 2005], and by de la Banda,
Stuckey and Wazny [de la Banda et al., 2003], which were
introduced in somewhat different contexts.

Our approach exhibits two main features. First, it is a hy-
bridization of the L&S complete approach with a local search
pretreatment. A local search technique is indeed used as an
oracle to ﬁnd potential CoMSS of the SAT instance, which
are themselves hitting sets of MUS. We show that such a hy-
bridization can yield exponential efﬁciency gains. Second,
the efﬁciency of the approach relies on the crucial concept of
critical clause, which appears to be a powerful ingredient of
our technique to locate MUS.

The rest of the paper is organized as follows. First, the
reader is provided with the necessary background about SAT,
MUS and the dual concepts of MSS and CoMSS. Then, Lif-
ﬁton and Sakallah’s exhaustive approach is brieﬂy presented.
In Section 4, we show how this technique can be valuably hy-
bridized with a local search pretreatment, making use of the
critical clause concept. It is shown how this pretreatment can
be theoretically valuable from a computational point of view.
In Section 5, we compare this new approach with L&S.

2 Background

In this section, we provide the reader with the basic back-
ground about SAT, MUS, MSS and CoMSS.

Let L be the Boolean logical language built on a ﬁnite set

of Boolean variables, noted a, b, c, etc. The ∧, ∨, ¬ and
⇒ symbols represent the standard conjunctive, disjunctive,
negation and material implication connectives, respectively.

Formulas and clauses will be noted using upper-case let-
ters such as C. Sets of formulas will be represented using
Greek letters like Γ or Σ. An interpretation is a truth assign-
ment function that assigns values from {true, false} to ev-
ery Boolean variable. A formula is satisﬁable when there is
at least one interpretation (called model) that satisﬁes it, i.e.
that makes it become true. An interpretation will be noted
by upper-case letters like I and will be represented by the set
of literals that it satisﬁes. Actually, any formula in L can be
represented (while preserving satisﬁability) using a set (inter-
preted as a conjunction) of clauses, where a clause is a ﬁnite
disjunction of literals, where a literal is a Boolean variable
that is possibly negated. SAT is the NP-complete problem
that consists in checking whether a set of Boolean clauses is
satisﬁable or not, i.e. whether there exists an interpretation
that satisﬁes all clauses in the set or not.

When a SAT instance is unsatisﬁable, it exhibits at least
one Minimally Unsatisﬁable Subformula, in short one MUS.
Deﬁnition 1. A MUS Γ of a SAT instance Σ is a set of clauses
s.t. Γ ⊆ Σ, Γ is unsatisﬁable and ∀Δ ⊂ Γ, Δ is satisﬁable.
Example 1. Let Σ = {a, ¬c, ¬b ∨ ¬a, b, ¬b ∨ c}. Σ exhibits
two MUS, namely {a, b, ¬b ∨ ¬a} and {¬c, b, ¬b ∨ c}.

A dual concept is the notion of Maximal Satisﬁable Subset

(MSS) of a SAT instance.
Deﬁnition 2. A MSS Γ of a SAT instance Σ is a set of clauses
s.t. Γ ⊆ Σ, Γ is satisﬁable and ∀Δ ⊆ (Σ \ Γ) s.t. Δ (cid:8)= ∅, Γ ∪
Δ is unsatisﬁable.

The set-theoretical complement of a MSS w.r.t. a SAT in-

stance is called a CoMSS.
Deﬁnition 3. The CoMSS of a MSS Γ of a SAT instance Σ is
given by Σ \ Γ.
Example 2. Let us consider the formula Σ from the previous
example. Σ exhibits ﬁve CoMSS: {b}, {¬c, a}, {¬c, ¬b∨¬a},
{¬b ∨ c, ¬b ∨ ¬a} and {¬b ∨ c, a}.

As shown by several authors [Lifﬁton and Sakallah, 2005],
these concepts are correlated. Mainly, a CoMSS contains at
least one clause from each MUS. Actually, a CoMSS is an
irreducible hitting set of the set of MUS. In a dual way, ev-
ery MUS of a SAT instance is an irreducible hitting set of
the CoMSS. Accordingly, as emphasized by [Lifﬁton and
Sakallah, 2005] although MINIMAL-HITTING-SET is a
NP-hard problem, irreducibility is a less strict requirement
than minimal cardinality. Actually, a MUS can be generated
in polynomial time from the set of CoMSS.

3 Lifﬁton and Sakallah’s Exhaustive

Approach

Lifﬁton and Sakallah’s approach [Lifﬁton and Sakallah,
2005] to compute all MUS (in short L&S) is based on the
strong duality between MUS and MSS. To the best of our
knowledge, it is currently the most efﬁcient one. First it
computes all MSS before it extracts the corresponding set of

IJCAI-07

2301

MUS. Here, the focus is on L&S ﬁrst step since we shall im-
prove it and adopt the second step as such.

L&S is integrated with a modern SAT solver and takes ad-
vantage of it. Roughly, every ith clause Ci = x1 ∨ ... ∨ xm
of the SAT instance is augmented with a negated clause se-
i = x1 ∨ ... ∨ xm ∨ ¬yi. While
lector variable yi to yield C (cid:2)
solving these new clauses, assigning yi to false has the effect
of disabling or removing Ci from the instance. Accordingly,
a MSS can be obtained by ﬁnding a satisfying assignment
with a minimal number of yi variables assigned false. The
algorithm makes use of a sliding objective approach allow-
ing for an incremental search. A bound on the number of
yi that may be assigned to false is set. For each value of
the bound, starting at 0 and incrementing by 1, an exhaustive
search is performed for all satisﬁable assignments to the aug-
mented formula C (cid:2)
i , which will ﬁnd all CoMSS having their
size equal to the bound. Whenever one solution is found, it is
recorded, and a corresponding clause forcing out that solution
(and any supersets of it) is inserted. This blocking clause is a
disjunction of the yi variables for the clauses in that CoMSS.
Before beginning the search with the next bound, the al-
gorithm checks that the new instance augmented with all the
blocking clauses is still satisﬁable without any bound on the
yi variables. If this formula is unsatisﬁable, the entire set of
CoMSS has been found and the algorithm terminates.

The second part of the algorithm computes the complete set
of MUS from the set of CoMSS in a direct way. The approach
that we shall introduce will include this second step as such.

4 Local Search and Critical Clauses

In this section, it is shown how the aforementioned exhaustive
search algorithm can be improved in a dramatic manner by
hybridizing it with an initial local search step, which provides
valuable oracles for the subsequent exhaustive search process.
We shall call the new approach HYCAM (HYbridization for
Computing All Mus).

First, let us motivate our approach in an intuitive manner.
Clearly, a (fast) initial local search run for satisﬁability on the
initial instance might encounter some actual MSS. Whenever
this phenomenon happens, it can prove valuable to record
the corresponding CoMSS in order to avoid computing them
during the subsequent exhaustive search. Moreover, rather
than checking whether we are faced with an actual MSS or
not, it can prove useful to record the corresponding candi-
date CoMSS that will be checked later during the exhaustive
search. Obviously enough, we must study which interpreta-
tions encountered during the local search process yield can-
didate MSS and criteria must be deﬁned in order to record
a limited number of potentially candidate CoMSS only. In
this respect, a concept of critical clause will prove extremely
valuable in the sense that it allows us to state necessary condi-
tions for being a CoMSS that can be checked quickly. When
all the remaining candidate CoMSS are recorded, the incre-
mental approach by Lifﬁton and Sakallah allows us to exploit
this information in a very valuable and efﬁcient way. Let us
describe this in a more detailed manner.

A local search algorithm is thus run on the initial SAT in-
stance. The goal is to record as many candidate CoMSS as

Algorithm 1: Local Search approximation
Input: a CNF formula Σ
begin

Output: Set of candidate CoMSS

candidates ←− ∅ ;
I ←− generate random interpretation() ;
while (#f ail < PRESET #FAILURES AUTHORIZED) do

#f ail ←− 0 ;

newcandidates ←− FALSE ;
for j = 1 to #FLIPS do

Let Δ be the set of falsiﬁed clauses by I ;
if ∀C ∈ Δ, C is critical
and Δ is not implied in candidates then

removeAllSetImplied(Δ,candidates) ;
candidates ←− Δ ∪ candidates ;
newcandidates ←− TRUE ;

ﬂip(I) ;

if not(newcandidates) then #f ail ←− #f ail + 1;

return candidates ;

end

Algorithm 2: The HYCAM algorithm
Input: a CNF formula Σ
begin

cand ←− LS approximation(Σ) ;
Σy ←− addSelectorClauses(Σ) ;
while SAT(Σy) do

Output: All MSS of Σ

k ←− 0 ;
M SS ←− ∅ ;

removeAllSetImplied({Σ\C|C ∈ M SS},cand) ;
Σy ←− addBlockingClausesOfSize(k,cand) ;
M SS ←− M SS ∪ {Σ\C|C ∈ cand and |C| = k} ;
M SS ←− M SS ∪ SAT with bound(k,Σy ) ;
k ←− k + 1 ;

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

1

2

3

4

5

6

7

8

9

return M SS ;

10

11

end

possible, based on the intuitive heuristics that local search of-
ten converges towards local minima, which could translate
possibly good approximations of MSS. A straightforward ap-
proach would consist in recording for each visited interpre-
tation the set of unsatisﬁed clauses. Obviously enough, we
do not need to record supersets of already recorded candidate
CoMSS since they cannot be actual CoMSS as they are not
minimal with respect to set-theoretic inclusion. More gen-
erally, we have adapted the technique proposed by Zhang in
[Zhang, 2005] to sets of clauses in order to record the cur-
rently smaller candidate CoMSS among the already encoun-
tered series of sets of unsatisﬁed clauses. Now, crucial in-
gredients in our approach are the concepts of once-satisﬁed
and critical clauses. The latter concept has already proved
valuable for locating MUS and inconsistent covers using an
incomplete technique based on local search [Gr´egoire et al.,
2006a; 2006b].
Deﬁnition 4. A clause C is once-satisﬁed by an interpreta-
tion I iff exactly one literal of C is satisﬁed by I. A clause
C that is falsiﬁed by the interpretation I is critical w.r.t. I
iff the opposite of each literal of C belongs to at least one
once-satisﬁed clause by I.

Intuitively, a critical clause is thus a falsiﬁed clause that re-
quires at least another one to be falsiﬁed in order to become
satisﬁed, performing a ﬂip. Property 1 shows how this con-
cept allows us to eliminate wrong candidate CoMSS.

IJCAI-07

2302

C3:(a ∨ ¬c)
C1:(b ∨ c)

C11:(a ∨ ¬b ∨ c)
C9:(¬a ∨ b ∨ ¬c)

C5:(¬a ∨ ¬b)

C10:(¬a ∨ b ∨ ¬d)
C12:(a ∨ ¬b ∨ ¬d)

C2:(a ∨ b)

C0:(d)

C4:(¬b ∨ ¬e)
C6:(a ∨ e)

C7:(¬a ∨ ¬e)

C8:(b ∨ e)

Figure 1: MUS of Example 3

Property 1. Let Σ be a SAT instance and let I be an inter-
pretation. Let Γ be a non-empty subset of Σ s.t. all clauses of
Γ are all falsiﬁed by I. When at least one clause of Γ is not
critical w.r.t. I, then Γ is not a CoMSS of Σ.
Proof. By deﬁnition, when a clause Cf of Γ is not critical
w.r.t. I, there exists at least one literal c ∈ Cf whose truth-
value can be inversed (i.e. ﬂipped) without falsifying any
other clause of Σ. Accordingly, Γ is not minimal and can-
not be a CoMSS of Σ.

In practice, testing whether all falsiﬁed clauses are critical
or not can be performed quickly and prevents many sets of
clauses to be recorded as candidate CoMSS. Using these fea-
tures, the local search run on the initial SAT instance yields a
series of candidate CoMSS. This information proves valuable
and allows us to boost L&S complete search.

L&S is incremental in the sense that it computes CoMSS of
increasing sizes, progressively. After n iterations have been
performed, all CoMSS of cardinality lower or equal than n
have been obtained. Accordingly, if we have recorded candi-
date CoMSS containing n + 1 clauses, and if they are not su-
persets of already obtained CoMSS, we are sure that they are
actual CoMSS. In this respect, we do not need to search them,
and their corresponding blocking clauses can be inserted di-
rectly. Moreover, we do not need to perform the SAT test at
the end of the n-th iteration, since we are then aware of the
existence of larger CoMSS.

It is also easy to show that the insertion of these block-
ing clauses can allow both NP-complete and CoNP-complete
tests to be avoided. Let us illustrate this on an example.
Example 3. Let Σ be the following unsatisﬁable SAT in-
stance and let Σ(cid:2)
be the corresponding augmented SAT in-
stance using L&S clauses selector variables yi.

⎧⎪⎪⎪⎨
⎪⎪⎪⎩

Σ =

C0 :(d)
C3 :(a ∨ ¬c)
C6 :(a ∨ e)
C9 :(¬a ∨ b ∨ ¬c) C10:(¬a ∨ b ∨ ¬d)
C11:(a ∨ ¬b ∨ c) C12:(a ∨ ¬b ∨ ¬d)

C1 :(b ∨ c)
C4 :(¬b ∨ ¬e)
C7 :(¬a ∨ ¬e)

C2:(a ∨ b)
C5:(¬a ∨ ¬b)
C8:(b ∨ e)

Σ is an unsatisﬁable SAT instance made of 13 clauses and
making use of 5 variables. It exhibits 3 MUS, which are il-
lustrated in Figure 1, and admits 19 MSS. Assume that both
L&S and HYCAM are run on this instance. Its clauses are

augmented by the ¬yi negated clause selector variables. As-
sume also that the local search performed by HYCAM pro-
vides 4 candidate CoMSS: {C5}, {C3, C2}, {C0, C1, C2}
and {C3, C8, C10}.

If the branching variables are chosen based on the lexical
order, then a and b are assigned to true and C5 is falsiﬁed.
Thus, L&S tries to prove that this clause forms a CoMSS,
which requires a NP-complete test (because it has to ﬁnd a
model of Σ\{¬a ∨ ¬b} ∪ {a, b}). On the contrary, when HY-
CAM is run, the blocking clause y5 is added before the ﬁrst
iteration of the complete algorithm is performed, since the lo-
cal search has already delivered this CoMSS. In consequence,
when a and b are assigned true, the DPLL-algorithm back-
tracks immediately as the {y5, ¬y5} unsatisﬁable set has been
obtained, without requiring any further NP-complete test.

Similarly, the introduction of additional clause selector
variables by HYCAM can reduce the number of CoNP-
complete tests. For example, let us assume that e is the ﬁrst
branching variable, that e is assigned f alse and that the next
variables are selected according to the lexical order. When
a and b are assigned true, L&S tries to prove that {C5} is a
CoMSS. Since ¬e is tautological consequence of Σ\{¬a ∨
¬b} ∪ {a, b}, no model exists for Σ\{¬a ∨ ¬b} ∪ {a, b, ¬e}.
Clearly, such a test is in CoNP. Thanks to the previously de-
livered candidate CoMSS, HYCAM avoids this part of the
search space to be explored. Indeed, since we know that {C5}
is a CoMSS, when a and b are assigned true, no further CoNP
tests are performed with respect to this partial assignment.

In fact, from a computational point of vue, the preliminary
non-expensive local search eliminates nodes in the search
tree, avoiding both NP and CoNP tests.

5 Experimental Evaluation

HYCAM has been implemented and compared to L&S from
a practical point of view. For both algorithms, the com-
plete search step is based on the use of MiniSat [E´en and
S¨orensson, 2004], which is currently one of the best modern
SAT solvers. As a case study, we used Walksat [Kautz and
Selman, 2004] for the local search pretreatment. The number
of ﬂips and tries of Walksat is related to the number of candi-
date CoMSS already found. For each try, a small number of
ﬂips is performed. If no new candidate is found during a try
then a counter is incremented. When this counter exceeds a
threshold (experimentally set to 30), we consider that no new
candidate could be found by the local search. This way to end
the local search pretreatment offers a good trade-off between
the number of candidates found and the time spent. Besides,
for all experiments, the time consumed by the local search
step was less than 5% of the global time. All our experimen-
tal studies have been conducted on Intel Xeon 3GHz under
Linux CentOS 4.1. (kernel 2.6.9) with a RAM memory size
of 2Go. In the following, a time-out limit has been set to 3
CPU hours.

First, in Table 1a, we report experimental results about the
computation of MSS on pigeon-hole and xor-chains bench-
marks, which are globally unsatisﬁable in the sense that re-
moving any one of their clauses makes the instance become
satisﬁable. Obviously enough, such instances exhibit a num-

IJCAI-07

2303

Inst.

(#v,#c)

#MSS

(42,133)
hole6
(56,204)
hole7
(72,297)
hole8
(90,415)
hole9
hole10 (110,561)
(46,122)
x1 16
(70,186)
x1 24
(94,250)
x1 32
x1 40
(118,314)

133
204
297
415
561
122
186
250
314

133
204
293
415
559
122
186
241
314

133 0.040
204 0.75
33
293
415
866
559 7159
122 0.042
7.7
186
241
195
314 2722

(a)

#CoMSS L&S HYCAM

cand. act.

(sec.)

(sec.)

0.051
0.33
1.60
30
255
0.041
0.82
28
486

• Inst., Instance: benchmark name
• (#v,#c): numbers of variables and clauses
• #MSS: number of MSS of the SAT instance
• #CoMSS cand., act.: numbers of candidate and actual
CoMSS exhibited by HYCAM local
search pretreatment respectively

• L&S: time in seconds for Lifﬁton and Sakallah’s algorithm
• HYCAM: time in seconds for HYCAM

Instance

(#v,#c)

#MSS

#CoMSS L&S HYCAM

cand. act.

(sec.)

(sec.)

(b)

893
5123 4318 2729
rand net40-25-10 (2000,5921)
4841 6950
650
598
rand net40-25-5
(2000,5921)
5831 3458 2405 1748
rand net40-30-10 (2400,7121)
7291 4380
662 1590
(2400,7121)
rand net40-30-1
rand net40-30-5
5673 2611 2507 2145
(2400,7121)
1173 1159 1159
(558,1606)
ca032
2412 2324 2263
(1132,3264)
ca064
(2282,6586)
4899 2878 2422
ca128
(4584,13236) 9882 9553 9064
ca256
3571 2094 1849
2pipe
3679 1822 1587
2pipe 1 ooo
2pipe 2 ooo
5073 2286 1825
3pipe 1 ooo
am 5 5
c432
c880
bf0432-007
velev-sss-1.0-cl

4
59
691
t.o.
130
52
148
(2223,26561) 17359 7327 3481 5153
68
1959 3250
65
(1076,3677)
4
1023 1019 1019
(389,1115)
28
(957,2590)
2408 2141 1866
(1040,3668) 10958 3332 2136
233
(1453,12531) 4398 2987 2154 1205

(892,6695)
(834,7026)
(925,8213)

197
174
386
1325
402

1
3
18
277
36
30
61

2487

57
1
3
98
513

Table 1: L&S vs. HYCAM on globally unsatisﬁable instances (a) and on various difﬁcult SAT instances (b)

ber of CoMSS equals to their number of clauses, and the size
of any of their CoMSS is one. A signiﬁcant time gap can
be observed in favor of HYCAM. The efﬁciency gain ratio is
even more signiﬁcant when the size of the instance increased.
For these instances, the local search run often succeeds in
ﬁnding all CoMSS, and the complete step often reduces to
an unsatisﬁability test. On the contrary, L&S explores many
more nodes in the search space to deliver the CoMSS.

In Table 1b, experimental results on more difﬁcult bench-
marks from the annual SAT competition [SATLIB, 2000] are
described. Their number of MSS is often exponential, and
computing them often remains intractable. Accordingly, we
have limited the search to CoMSS of restricted sizes, namely
we have set a size limit to 5 clauses. As our experimental re-
sults illustrate, HYCAM outperforms L&S. For example, let
us consider rand net40-30-10. This instance contains
5831 MSS (with the size of their corresponding CoMSS less
than 5). L&S and HYCAM deliver this result in 1748 and
386 seconds, respectively. For the ca256 instance, HYCAM
has extracted 9882 MSS in less than 5 minutes whereas L&S
did not manage to produce this result within 3 hours. Let us
note that HYCAM also delivers CoMSS made of 5 clauses
after its computation is ended since we know that all sets of
5 falsiﬁed clauses recorded by the local search run and that
are not supersets of the obtained smaller CoMSS are actually
also CoMSS.

In Table 2, experimental results on hard instances to com-
pute the complete set of MSS and MUS are reported. As
explained above, both L&S and HYCAM approaches require
all MSS to be obtained before MUS are computed. By allow-
ing complete sets of MSS to be delivered in a shorter time,
HYCAM allows the complete set of MUS to be computed
for more instances and in a faster manner than L&S does.
Obviously enough, when the number of MSS or MUS are
exponential, computing and enumerating all of them remain
intractable.

For instance, L&S was unable to compute all MSS of the
php-012-011 instance within 3 hours CPU time, and could
thus not discover its single MUS. HYCAM extracted it in
2597 seconds. On all instances exhibiting unique or a non-
exponential number of MUS, HYCAM was clearly more efﬁ-
cient than L&S. For example, on the dlx2 aa instance, L&S
and HYCAM discovered the 32 MUS within 3.12 and 0.94
seconds, respectively. Let us note that the additional time
spent to compute all MUS from the set of MSS is often very
small unless of course the number of MUS is exponential.

6 Conclusions and Future Research

Computing all MSS, CoMSS and MUS are highly intractable
issues in the worst case. However, it can make sense to at-
tempt to compute them for some real-life applications.
In
this paper, we have improved the currently most efﬁcient ex-
haustive technique, namely Lifﬁton and Sakallah’s method,
in several ways. Our experimental results show dramatic efﬁ-
ciency gains for MSS, CoMSS and MUS extracting. One in-
teresting feature of the approach lies in its anytime character
for computing MSS. MSS of increasing sizes are computed
gradually. Accordingly, we can put a bound on the maximum
size of the CoMSS to be extracted, limiting the computing
resources needed to extract them. To some extent, both L&S
and HYCAM prove more adapted to extract complete sets of
MSS and CoMSS than complete sets of MUS. Indeed, the
procedure involves computing MSS (and thus CoMSS) ﬁrst.
In this respect, we agree with Lifﬁton and Sakallah that an
interesting path for future research concerns the study of how
MUS could be computed progressively from the growing set
of extracted MSS.

Many artiﬁcial intelligence research areas have studied var-
ious problems involving the manipulation of MUS, MSS and
CoMSS, like model-based diagnosis, belief revision, incon-
sistency handling in knowledge and belief bases, etc. These
studies are often conducted from a conceptual point of view,

IJCAI-07

2304

Instance

(#v,#c)

#MSS

#CoMSS
cand. act.

232
280

232
280

(87, 232)
mod2-3cage-unsat-9-8
mod2-rand3bip-unsat-105-3 (105, 280)
2pipe
php-012-011
hcb3
1dlx c mc ex bp f
hwb-n20-02
hwb-n22-02
ssa2670-141
clqcolor-08-05-06
dlx2 aa
addsub.boehm

232
280
(892, 6695) 10221 3142 1925
(132, 738)
(45, 288)

734 time out
734
288
288
665
(776, 3725) 1763 946
583
588
(134, 630)
(144, 688)
626
627
(986, 2315) 1413 1374 1341
(116, 1114) 1114 1114 1114
(490, 2804) 1124 1020
970
(492, 1065) 1324 20256 347

10645
10.4
951
2183
2.83
107
3.12
35

738
288

622
680

L&S
(sec.)

3745
2113
298

HYCAM #MUS MSS→MUS

(sec.)

969
454
226
2597
6059
6.8
462
811
1.08
62
0.94
29

1
1

(sec.)

0.006
0.008

> 211 000

time out

1
1

0.024
0.006

> 350 000

time out

1
1
16
1
32

0.01
0.025
0.15
0.007
0.023

> 657 000

time out

Table 2: L&S vs. HYCAM on computing all MUS

or from a worst-case complexity point of view, only. We be-
lieve that the practical computational progresses as such as
the ones obtained in this paper can prove valuable in han-
dling these problems practically. In this respect, future re-
search could concentrate on deriving speciﬁc algorithms for
these AI issues, exploiting results like the ones described in
this paper.

Acknowledgments
We thank Mark Lifﬁton for making his system available to us.
This work has been supported in part by the R´egion Nord/Pas-
de-Calais.

References
[Bailey and Stuckey, 2005] J. Bailey and P. Stuckey. Discov-
ery of minimal unsatisﬁable subsets of constraints using
hitting set dualization. In Proceedings of PADL’05, pages
174–186, 2005.

[Bessant et al., 2001] B. Bessant, ´E Gr´egoire, P. Marquis,
and L. Sa¨ıs.
Iterated Syntax-Based Revision in a Non-
monotonic Setting, volume 22 of Applied Logic, pages
369–391. Frontiers in Belief Revision, 2001.

[Bruni, 2003] R. Bruni. Approximating minimal unsatisﬁ-
able subformulae by means of adaptive core search. Dis-
crete Applied Mathematics, 130(2):85–100, 2003.

[Bruni, 2005] R. Bruni. On exact selection of minimally un-
satisﬁable subformulae. Annals of Mathematics and Arti-
ﬁcial Intelligence, 43(1):35–50, 2005.

[B¨uning, 2000] H. B¨uning. On subclasses of minimal unsat-
isﬁable formulas. Discrete Applied Mathematics, 107(1–
3):83–98, 2000.

[Davydov et al., 1998] G. Davydov, I. Davydova, and H.K.
B¨uning. An efﬁcient algorithm for the minimal unsatisﬁ-
ability problem for a subclass of CNF. Annals of Mathe-
matics and Artiﬁcial Intelligence, 23(3–4):229–245, 1998.
[de la Banda et al., 2003] M. de la Banda, P. Stuckey, and
In

J. Wazny. Finding all minimal unsatisﬁable subsets.
Proceedings of PPDL’03, pages 32–43, 2003.

[Eiter and Gottlob, 1992] T. Eiter and G. Gottlob. On the
complexity of propositional knowledge base revision, up-
dates and counterfactual. Artiﬁcial Intelligence, 57:227–
270, 1992.

[E´en and S¨orensson, 2004] N.

and
N.
page:
http://www.cs.chalmers.se/Cs/Research/FormalMethods/MiniSat.

S¨orensson.

MiniSat

home

E´en

[Fleischner et al., 2002] H. Fleischner, O. Kullman, and
S. Szeider. Polynomial-time recognition of minimal un-
satisﬁable formulas with ﬁxed clause-variable difference.
Theoretical Computer Science, 289(1):503–516, 2002.

[Gr´egoire et al., 2006a] ´E. Gr´egoire, B. Mazure,

and
C. Piette. Extracting MUSes. In Proceedings of ECAI’06,
pages 387–391, 2006.

[Gr´egoire et al., 2006b] ´E. Gr´egoire, B. Mazure,

and
C. Piette. Tracking MUSes and strict inconsistent covers.
In Proceedings of FMCAD’06, 2006.

[Hamscher et al., 1992] W. Hamscher, L. Console, and
J. de Kleer, editors. Readings in Model-Based Diagnosis.
Morgan Kaufmann, 1992.

[Kautz and Selman, 2004] H.

Kautz

Selman.

B.
http://www.cs.washington.edu/homes/kautz/walksat.

Walksat

home

and
page:

[Lifﬁton and Sakallah, 2005] M. Lifﬁton and K. Sakallah.
In

On ﬁnding all minimally unsatisﬁable subformulas.
Proceedings of SAT’05, pages 173–186, 2005.

[Lynce and Marques-Silva, 2004] I. Lynce and J. Marques-
In

Silva. On computing minimum unsatisﬁable cores.
Proceedings of SAT’04, 2004.

[Oh et al., 2004] Y. Oh, M. Mneimneh, Z. Andraus, K.
AMUSE: a minimally-
In Proceedings of

Sakallah, and I. Markov.
unsatisﬁable subformula extractor.
DAC’04, pages 518–523, 2004.

[Papadimitriou and Wolfe, 1988] C.

and
D. Wolfe. The complexity of facets resolved. Journal of
Computer and System Sciences, 37(1):2–13, 1988.

Papadimitriou

[SATLIB, 2000] Benchmarks on SAT. http://www.satlib.org.
[Zhang and Malik, 2003] L. Zhang and S. Malik. Extracting
small unsatisﬁable cores from unsatisﬁable boolean for-
mula. In Proceedings of SAT’03, 2003.

[Zhang, 2005] L. Zhang. On subsumption removal and on-
the-ﬂy cnf simpliﬁcation. In Proceedings of SAT’05, pages
482–489, 2005.

IJCAI-07

2305

