Analysis and Veriﬁcation of Qualitative Models of Genetic Regulatory Networks:

A Model-Checking Approach

Gr´egory Batt1, Delphine Ropers1, Hidde de Jong1, Johannes Geiselmann2,

Radu Mateescu1, Michel Page1;3, Dominique Schneider2

1INRIA Rhˆone-Alpes, Montbonnot, France, 2Laboratoire Adaptation et Pathog´enie des

Microorganismes, Universit´e Joseph Fourier, Grenoble, France, 3Universit´e Pierre

Mend`es France, Grenoble, France

Abstract

Methods developed for the qualitative simulation of
dynamical systems have turned out to be powerful
tools for studying genetic regulatory networks. A
bottleneck in the application of these methods is
the analysis of the simulation results. In this pa-
per, we propose a combination of qualitative sim-
ulation and model-checking techniques to perform
this task systematically and efﬁciently. We apply
our approach to the analysis of the complex net-
work controlling the nutritional stress response in
the bacterium Escherichia coli.

1 Introduction
Qualitative simulation aims at making predictions of the be-
havior of dynamical systems in the absence of detailed, quan-
titative information on parameter values and functional rela-
tions [Kuipers, 1994]. The idea of qualitative simulation has
attracted much interest in the context of a biological appli-
cation, the analysis of genetic regulatory networks, that is,
the networks of regulatory interactions between genes, pro-
teins, and small molecules underlying the development and
functioning of all living organisms. On the one hand, mathe-
matical methods supported by computer tools are indispens-
able for the analysis of genetic regulatory networks: most net-
works of interest involve many genes connected through com-
plex feedback loops, thus making an intuitive understanding
of their dynamics difﬁcult to obtain. On the other hand, nu-
merical simulation methods are difﬁcult to apply, because
only a few networks are well-understood on the molecular
level, and quantitative information on the interactions is sel-
dom available.

We have previously developed a method for the quali-
tative simulation of genetic regulatory networks [de Jong
et al., 2004b].
This method differs from traditional
approaches towards qualitative simulation in that
it has
been tailored to a class of piecewise-linear (PL) differ-
ential equations with favorable mathematical properties
[Glass and Kauffman, 1973].
to deal
with large and complex networks of regulatory interac-
tions. The qualitative simulation method has been imple-
mented in a publicly-available computer tool, called Ge-
netic Network Analyzer (GNA) [de Jong et al., 2003].

This allows it

GNA has been used to analyze several genetic regulatory
networks of biological interest (e.g., [de Jong et al., 2004a]).
Given a model of a genetic regulatory network, the above
qualitative simulation method produces a state transition
graph, consisting of qualitative states and transitions between
qualitative states. The graph describes the possible qualitative
behaviors of the network. When simulating large and com-
plex genetic regulatory networks, the state transition graph
usually consists of hundreds or even thousands of states, as
a consequence of which the analysis of the graph by visual
inspection alone becomes error-prone or even practically in-
feasible.
In order to analyze large state transition graphs,
previous work in qualitative simulation has proposed the use
of model-checking techniques [Brajnik and Clancy, 1998;
Shults and Kuipers, 1997]. These techniques allow for the
efﬁcient veriﬁcation of properties of discrete transition sys-
tems [Clarke et al., 1999].

The aim of this paper, extending preliminary ideas in [Batt
et al., 2003], is to demonstrate the effectiveness and practi-
cal applicability of the combined use of qualitative simulation
and model checking for the analysis of large state transition
graphs produced by the qualitative simulation of genetic reg-
ulatory networks. In particular, we show how state transition
graphs can be reformulated as so-called Kripke structures on
which properties of the behavior of the network, expressed in
temporal logic, can be veriﬁed. In addition, we present a new
implementation of GNA that connects the qualitative simula-
tor to state-of-the-art model checkers.

We have applied the above approach to the analysis of the
complex regulatory network controlling the nutritional stress
response in the bacterium Escherichia coli. Among other re-
sults, the use of model-checking tools has allowed the charac-
terization of cycles in a large state transition graph obtained
through qualitative simulation of the network. The cycles
correspond to biologically-important phenomena that are cur-
rently being experimentally tested in our laboratory.

In the next section of this paper, we brieﬂy review the
qualitative modeling and simulation of genetic regulatory net-
works. This will set the stage for a discussion of the combined
use of qualitative simulation and model-checking techniques
in the third section. The application of this approach to the
analysis of the nutritional stress response network is the sub-
ject of the next section. We ﬁnish with a discussion of the
approach in the context of related work.

2 Qualitative modeling and simulation of

genetic regulatory networks

The dynamics of genetic regulatory networks can be modeled
by a class of piecewise-linear (PL) differential equations of
the following general form [Glass and Kauffman, 1973]:

_x = h(x) = f (x) (cid:0) g(x) x;

(1)
where x = (x1; : : : ; xn)0 2 (cid:10) is a vector of cellular protein
concentrations, f = (f1; : : : ; fn)0, g = diag(g1; : : : ; gn), and
(cid:21)0 is a bounded n-dimensional phase space box. The
(cid:10) (cid:26) Rn
rate of change of each protein concentration xi, i 2 f1::ng,
is thus deﬁned as the difference of the rate of synthesis fi(x)
and the rate of degradation gi(x) xi of the protein.

The function fi : (cid:10) ! R(cid:21)0 expresses how the rate of
synthesis of the protein encoded by gene i depends on the
concentrations x of the proteins in the cell. More speciﬁ-
cally, the function fi is deﬁned as a sum of terms having the
general form (cid:20)l
i > 0 is a rate parameter, and
i : (cid:10) ! f0; 1g a piecewise-continuous regulation function
bl
deﬁned in terms of step functions s+ and s(cid:0):

i(x), where (cid:20)l

i bl

s+(xi; (cid:18)i) =(cid:26) 1; if xi > (cid:18)i;

0; if xi < (cid:18)i;

and s(cid:0)(xi; (cid:18)i) = 1(cid:0)s+(xi; (cid:18)i);

where xi is an element of the state vector x and (cid:18)i a constant
denoting a threshold concentration for xi.

The function gi expressing the regulation of protein degra-
dation is deﬁned analogously, except that we demand that gi
is strictly positive. Notice that with the above deﬁnitions, h is
a piecewise-linear (PL) vector-valued function. An example
of a simple genetic regulatory network and its PL model is
shown in Figure 1(a)-(b).

The use of step functions s(cid:6)(xi; (cid:18)i) in (1) gives rise to
complications, because the step functions are discontinu-
ous at xi = (cid:18)i, and therefore h is discontinuous on (cid:2) =
i g, the union of the thresh-
old hyperplanes. In order to deal with this problem, following
an approach widely used in control theory, we extend the dif-
ferential equation (1), deﬁned on (cid:10) n (cid:2), to the differential
inclusion

Si2[1::n];li2[1::pi]fx 2 (cid:10) j xi = (cid:18)li

_x 2 H(x);

(2)
deﬁned on (cid:10), where H(x) is the smallest closed hyperrect-
angular set containing the set of all limit values of h(y), for
y 62 (cid:2) and y ! x [Gouz´e and Sari, 2002; de Jong et al.,
2004b; Batt et al., 2005]. A solution of the differential in-
clusion (2) on a time interval I is an absolutely-continuous
vector-valued function (cid:24)(t) such that _(cid:24)(t) 2 H((cid:24)(t)) almost
everywhere on I.

Formally, we deﬁne the PL system (cid:6) as the triple
((cid:10); (cid:2); H), that is, the set-valued function H given by (2),
deﬁned on the n-dimensional phase space box (cid:10), with (cid:2) the
union of the threshold hyperplanes. Also, we denote by (cid:4)(cid:6)
the set of all solutions (cid:24)(t), on a ﬁnite or inﬁnite time inter-
val, of the differential inclusion (2), that reach and leave a
threshold hyperplane ﬁnitely-many times.

The mathematical analysis of PL systems has shown that
mere knowledge of the relative order of threshold parame-
ters and ratios of synthesis and degradation parameters, de-
scribing the local strength of gene expression, is sufﬁcient

for the deﬁnition of a ﬁnite partition D of the phase space
(cid:10) into hyperrectangular regions, called domains. This parti-
tion is such that the derivatives of the solutions in each do-
main have a unique sign pattern (Figure 1(b)-(d)). The def-
inition of the sign pattern S(x) for a point x in a domain D
is complicated by the fact that the solution of a differential
inclusion is in general not unique. In particular, if x lies on a
threshold hyperplane, H(x) is multi-valued, and several solu-
tions (cid:24)(t) may pass through x with different derivative signs.
We therefore deﬁne S(x) = fsign( _(cid:24)(tx)) j (cid:24) 2 (cid:4)(cid:6) in D;
(cid:24)(tx) = x; and _(cid:24)(tx) 2 H((cid:24)(tx))g. We have proven that
S(x) is the same for every x 2 D [Batt et al., 2005].1

Using the domain partition D of the phase space (cid:10), to-
gether with the above qualitative characterization of the dy-
namics in each of the domains, we can discretize the contin-
uous dynamics. In the resulting abstract description, the state
of the system is represented by a domain, and there exists
a transition from a domain D to a domain D0, if and only
if there exists a solution reaching D0 from D, without leav-
ing D [ D0. This leads to the introduction of the so-called
qualitative transition system, (cid:6)-QTS = (D; !; (cid:5); j=(cid:5)),
where D is the set of all domains, ! (cid:18) D (cid:2) D is a transi-
tion relation describing all transitions between the domains,
(cid:5) = fDsign = S j S 2 2f(cid:0)1;0;1gn
g is a set of propositions
describing the derivative sign patterns, and j=(cid:5) (cid:18) D (cid:2) (cid:5) is a
satisfaction relation that associates to each domain a qualita-
tive description of the dynamics of the system in the domain,
deﬁned by D j=(cid:5) Dsign = S iff for all x 2 D: S(x) = S.

The graph representation of the qualitative transition sys-
tem, G = (D; !), is called a state transition graph. The
domains are also called qualitative states. A qualitative state
D is called instantaneous, if no solution remains in D longer
than a time instant, and persistent, otherwise. Moreover, it is
a qualitative equilibrium state, if D j=(cid:5) Dsign = S, with
0 2 S, since then for every x 2 D, (cid:24)(t) = x is a solution.
The state transition graph for the example network is shown
in Figure 1(e). A path in the graph describes a possible qual-
itative behavior of the system (Figure 1(f)).

In [Batt et al., 2005], the qualitative transition system is de-
ﬁned as the discrete quotient of a continuous transition sys-
tem having the same reachability properties as the original
PL system (cid:6), given the equivalence relation induced by the
partition D. Using standard results from hybrid systems the-
ory [Alur et al., 2000], it directly follows that the qualitative
transition system (cid:6)-QTS is a conservative approximation of
(cid:6), in the sense that if a solution (cid:24) of the PL system (cid:6), deﬁned
on some time interval I, passes through the time-ordered se-
quence of domains (D0; : : : ; Dm), then (D0; : : : ; Dm) is a
path in (cid:6)-QTS. On the other hand, it may happen that no
solution of (cid:6) passes through a sequence of domains corre-
sponding to a path in (cid:6)-QTS.2

Simple rules exploiting the favorable mathematical proper-
ties of the class of PL models have been formulated such that
the qualitative transition system can be symbolically com-

1In previous work [de Jong et al., 2004b], a coarser-grained par-

tition of (cid:10) is used, for which this property does not hold.

2In the terminology of qualitative simulation, the method is

sound but incomplete.

a) s(cid:0)(xb; (cid:18)b) (cid:0) (cid:13)a xa;

_xa = (cid:20)a s(cid:0)(xa; (cid:18)2
_xb = (cid:20)b s(cid:0)(xa; (cid:18)1
0 < (cid:18)1
0 < (cid:18)b < (cid:20)b=(cid:13)b < max b:

a < (cid:18)2

a) (cid:0) (cid:13)b xb;

a < (cid:20)a=(cid:13)a < max a;

xb
max b

D20

D21

D24

(cid:20)b=(cid:13)b

(cid:18)b

D18
D16
D10

D19
D17
D11

D23
D22
D12

D25

D26

D27

D13

D14

D15

D1

D3

D5

D7

D9

0

(c)

D2 D4
(cid:18)1
a

D6
(cid:18)2
a

D8

max a

xa

A

B

a

(a)

b

xb
max b

(cid:20)b=(cid:13)b

(cid:18)b

0

(d)

(cid:18)1
a

(cid:18)2
a

max a

(cid:20)a=(cid:13)a

xa

(b)

D20

D18

D16

D10

(e)

D21

D19

D17

D24

D23

D22

D25

D26

D27

D12

D13

D14

D15

D3

D5

D7

D9

D11

D1

D2

D4

D6

D8

(f)

max a
(cid:20)a=(cid:13)a
(cid:18)2
a
(cid:18)1
a

0

max b
(cid:20)b=(cid:13)b
(cid:18)b

0

(cid:14)

(cid:14)

D1

D3

D5

D7

D6

D1

D3

D5

D7

(cid:14)
D6

a, (cid:18)2

Figure 1: Qualitative simulation of a two-gene network. (a) Graphical representation (legend in Figure 3(a)). Gene b encodes
protein B, which inhibits gene a expression, that is, protein A synthesis. (b) Model consisting of PL differential equations and
parameter inequalities. xa and xb are the protein concentrations, (cid:20)a and (cid:20)b ((cid:13)a and (cid:13)b) the synthesis (degradation) rates of the
a, and (cid:18)b threshold concentrations. The second differential equation states that the synthesis rate of protein B
proteins, and (cid:18)1
is (cid:20)b if xa is below (cid:18)1
a, and that its degradation rate is (cid:13)bxb. The parameter inequalities for protein B state
that gene b may inhibit gene a expression, because when synthesized, protein B concentration tends towards the level (cid:20)b=(cid:13)b,
for which s(cid:0)(xb; (cid:18)b) = 0. (c) Domain partition of the phase space (cid:10): D = fD1; : : : D27g. (d) Sketch of the ﬂow in (cid:10) showing
the unicity of the derivative sign pattern in each domain. Dots denote equilibrium points. (e) Graph representation of the
qualitative transition system, (cid:6)-QTS. Dots denote self-transitions. (f) Temporal evolution of the protein concentrations in the
path (D1; : : : ; D6). Arrows indicate the derivative signs in persistent states (" for S = f1g; # for S = f(cid:0)1g; (cid:14) for S = f0g).

a, and 0 if xa is above (cid:18)1

puted from a PL model of the network and a set of parameter
inequalities deﬁning the relative order of the parameters [Batt
et al., 2005]. The implementation of these rules has resulted
in a new version of the computer tool Genetic Network Ana-
lyzer (GNA), available at http://www-helix.inrialpes.fr/gna.

3 Analysis of genetic regulatory networks by

model checking

Models of genetic regulatory networks of biological inter-
est may produce large state transition graphs, thus making
manual analysis of dynamical properties error-prone or even
practically infeasible. To address this problem, we propose to
combine the qualitative modeling and simulation method out-
lined above with techniques for model checking [Clarke et al.,
1999]. These techniques allow for the efﬁcient veriﬁcation of
properties of the behavior of discrete transition systems, ex-
pressed as formulae in some temporal logic.

Various model-checking frameworks exist, differing by
their expressiveness, user-friendliness, and computational ef-
ﬁciency. For the sake of clarity of exposition, we focus on
one particular framework in this paper, in which the discrete
transition system takes the form of a Kripke structure, and
the behavioral properties are expressed in Computation Tree
Logic (CTL) [Clarke et al., 1999]. However, we emphasize
that our approach is not restricted to CTL model-checking,
and allows other, more expressive temporal logics to be used
as well (Section 3.3).

3.1 Translate qualitative transition system into

Kripke structure

As a preliminary step, we introduce a set of atomic propo-
sitions, AP , to describe the state of the system. More pre-
cisely,
the set of atomic propositions we use consists of
simple expressions describing a protein concentration (e.g.,
value xi = (cid:18)i, value xi < (cid:20)i=(cid:13)i), the sign of its derivative
(e.g., dsign xi = f1g), or the type of a state (type = pers,
type = inst, type = eq, for persistent, instantaneous, and
equilibrium state, respectively). The set of atomic proposi-
tions for the two-gene example is shown in Figure 2(a).

We deﬁne the Kripke structure over AP corresponding to
(cid:6)-QTS as (cid:6)-KS = (D; !; j=AP ), where j=AP (cid:18) D (cid:2) 2AP
is the satisfaction relation associating to every domain D the
atomic propositions that hold in D. The existence of at least
one solution (cid:24) on some time interval [0; (cid:28) ], (cid:28) > 0, with initial
condition (cid:24)(0) = x0, for every x0 2 (cid:10), guarantees that !
is total (i.e., every state has a successor), which is required
for Kripke structures. The Kripke structure for the two-gene
example is shown in Figure 2(b).

3.2 Express dynamical properties in temporal

logic

CTL formulae are interpreted with respect to a Kripke struc-
ture. A CTL formula is built upon atomic propositions. The
usual operators from propositional logic, such as negation
(:), disjunction (_), conjunction (^), and implication (!),
can also be used. In addition, CTL provides two types of op-

(a)

AP = f value xa = 0; value xa > 0; : : : ; dsign xa = f(cid:0)1g; dsign xa = f0g; : : : ; type = inst; type = eq g:

(b)

(cid:6)-KS = (D; !; j=AP ); with
(cid:15) D = fD1; D2; D3; : : : ; D27 g;
(cid:15) != f (D1; D1); (D1; D2); (D1; D11); (D1; D12); : : : ; (D27; D26) g;
(cid:15) j=AP = f (D1; value xa (cid:21) 0); (D1; value xa < (cid:18)1

a); : : : ; (D1; dsign xa = f1g); (D1; dsign xb = f1g); (D1; type = pers);

(D2; value xa = (cid:18)1

a); : : : ; (D2; type = inst); : : : ; (D27; value xa > (cid:18)2

a); : : : ; (D27; type = pers) g:

(c)

Biological property
(cid:15) The network reaches a state in which both protein concentrations
increase, and from that state onwards, a second state in which pro-
tein A concentration increases and that of protein B decreases
(cid:15) The network will inevitably reach an equilibrium state where
protein A has vanished
(cid:15) A high level of protein B guarantees the eventual disappearance
of protein A

CTL formula
EF(dsign xa = f1g ^ dsign xb = f1g ^

D0
fD1g

EF(dsign xa = f1g ^ dsign xb = f(cid:0)1g))

NuSMV result and diagnostic
True: (D1; D3; D5; D7; D6)

(witness)

AF(type = eq ^ value xa = 0)

fD1g

False: (D1; D3; D5; D7; D6)

AG(value xb > (cid:18)b ! AFvalue xa = 0)

D

(counterexample)
False: (D25; D13; D5; D7; D6)
(counterexample)

Figure 2: Veriﬁcation of properties of the two-gene network in Figure 1. (a) Set of atomic propositions AP . (b) Kripke structure
(cid:6)-KS over AP corresponding to the qualitative transition system (cid:6)-QTS shown in Figure 1(e). (c) Biological properties, with
their CTL translation, their truth value in (cid:6)-KS for the set of initial states D0, and a diagnostic (witness or counterexample), as
computed by NuSMV.

erators: path quantiﬁers, E and A, and temporal operators,
such as F and G. Path quantiﬁers are used to specify that a
property p holds for some (E p) or every (A p) path starting
from a given state in the Kripke structure. Temporal opera-
tors are used to specify that, given a state and a path starting
from that state, a property p holds for some (F p) or for every
(G p) state of the path. Each path quantiﬁer must be paired
with a temporal operator [Clarke et al., 1999].

A variety of biologically-interesting properties of the dy-
namics of a genetic regulatory network can be expressed in
CTL [Chabrier-Rivier et al., 2004]. Typical questions con-
cern the possibility or the inevitability for the network to reach
some state(s), the absence or the universality of some prop-
erty, and response or precedence properties (i.e., a property is
always followed or preceded by some other property). Some
examples are given for the two-gene network in Figure 2(c).
More generally, these properties can be used for testing the
validity of a model given experimental data, or understanding
how the dynamics of a system emerges from the interactions
between its components.
3.3 Check if model satisﬁes dynamical properties
The model-checking problem consists in verifying whether
a temporal-logic formula holds in the discrete transition sys-
tem at the initial state(s). Highly-efﬁcient algorithms have
been developed and implemented in model checkers for au-
tomatically solving this problem. Two widely-used model
checkers are NuSMV [Cimatti et al., 2002] and Evaluator, a
component of the CADP toolbox [Mateescu and Sighireanu,
2003]. NuSMV is an efﬁcient, state-of-the-art model checker
for CTL, whereas Evaluator is an on-the-ﬂy model checker
for the regular alternation-free (cid:22)-calculus, a temporal logic
based on regular expressions. The algorithmic complexity of
these tools is linear in the size of the transition system and
the formula. In addition to a yes/no answer, the tools return a
diagnostic, either a witness or a counterexample, depending
on whether the property holds or not.

In order to combine our qualitative simulator with model-
checking tools, we have integrated export functionalities in
GNA. The text ﬁles generated by GNA can be imported in

the model checkers, after which the veriﬁcation of the prop-
erties of interest continues in the environment of the latter
tools. Figure 2(c) illustrates the veriﬁcation of some proper-
ties of the two-gene network. Fairness conditions [Clarke et
al., 1999] have been used to ensure that attractors (equilib-
rium states, strongly connected components) are eventually
reached (not shown).

that

Recall

the qualitative abstraction used to obtain
(cid:6)-QTS from (cid:6) is a conservative approximation. Can the con-
clusions drawn from the veriﬁcation of a property on (cid:6)-QTS
(or more precisely on (cid:6)-KS) be transposed to (cid:6)? If every
path in (cid:6)-QTS satisﬁes a property, then from the conserva-
tiveness, a corresponding property holds for every solution of
(cid:6). Conversely, if a property holds for some path in (cid:6)-QTS,
then, since this path may be spurious, the corresponding prop-
erty may hold for no solution of (cid:6). One can deﬁne the set
of temporal-logic formulae such that, if a property holds in
(cid:6)-QTS, it does so in (cid:6). In the CTL model-checking frame-
work, this set is the set of formulae that can be expressed in
the temporal logic called 8CTL [Grumberg and Long, 1994].

4 Application: Analysis of the nutritional

stress response in E. coli

In case of nutritional stress, an E. coli population abandons
exponential growth and enters a non-growth state called sta-
tionary phase. This growth-phase transition is accompanied
by numerous physiological changes in the bacteria [Huisman
et al., 1996]. On the molecular level, this transition is con-
trolled by a complex genetic regulatory network integrating
various environmental signals. A network including six genes
believed to play a key role in the nutritional stress response is
shown in Figure 3(a) [Ropers et al., 2004].

A PL model of seven variables has been constructed, one
protein concentration variable for each gene and one input
variable representing the presence or absence of a nutritional
stress signal. Seven differential equations and forty param-
eter inequalities describe the dynamics of the system (Fig-
ure 3(b)). Using the new version of GNA, we have simu-
lated two phenomena, namely nutrient starvation, causing the

(a)

(b)

(c)

P

gyrAB

GyrAB

Supercoiling

TopA

P1

topA

P1

P2

rrn

Nutrient stress signal

cAMP(cid:1)CRP

Cya

Fis

P

(cid:12)s

cya

P2

P1/P1’

CRP

Fis

Synthesis of protein Fis
from gene ﬁs

P

ﬁs

P1 P2

crp

stable RNAs

Activation

Inhibition

Abstract description of
a set of interactions

_x(cid:12)s = (cid:20)1

cya ) s+(xs ; (cid:18)s ) ) s(cid:0)(x(cid:12)s; (cid:18)5

(cid:12)s )

(cid:12)s (1 (cid:0) s+(xcrp; (cid:18)1
+ (cid:20)2
(cid:12)s s(cid:0)(xtopA; (cid:18)2
(cid:0) (cid:13)(cid:12)s x(cid:12)s

crp) s+(xcya; (cid:18)1
topA) s+(xgyrAB ; (cid:18)2

gyrAB ) s(cid:0)(x(cid:12)s ; (cid:18)5

(cid:12)s )(1 (cid:0) s+(xcrp; (cid:18)1

crp) s+(xcya; (cid:18)1

cya ) s+(xs ; (cid:18)s ) )

0 < (cid:18)1

(cid:12)s < (cid:20)1

(cid:12)s =(cid:13)(cid:12)s < (cid:18)2

(cid:12)s < (cid:18)3

(cid:12)s < (cid:18)4

(cid:12)s < (cid:18)5

(cid:12)s < ((cid:20)1

(cid:12)s + (cid:20)2

(cid:12)s )=(cid:13)(cid:12)s < max (cid:12)s

Biological property
(cid:15) “The transcription of cya is negatively regulated by cAMP and
CRP” [Kawamukai et al., 1985]
(cid:15) “rrn[P1] transcription increases independently of Fis [. . . ]
following [nutrient] upshift” [Appleman et al., 1998]

CTL formula
AG(value xcrp > (cid:18)3

crp ^ value xcya > (cid:18)3

cya ^

value us > (cid:18)s ! EFdsign xcya = f(cid:0)1g)

E(value x(cid:12)s > (cid:18)3
(cid:12)s

U(value x(cid:12)s > (cid:18)3

(cid:12)s ^ dsign xrrn = f1g))

D0
fDsg

NuSMV result
True

Time

< 0:1s:

fDug

False

< 0:1s:

Figure 3: Network of key genes, proteins, and regulatory interactions involved in the nutritional stress response in E. coli
[Ropers et al., 2004]. (b) PL differential equation and parameter inequalities for the protein Fis. (c) Some expected properties
of the network. Their translation into CTL and interpretation are not detailed here. U is the standard CTL operator Until
[Clarke et al., 1999]. Ds and Du correspond to the initial states for nutrient starvation and nutrient upshift, respectively.

transition from exponential to stationary phase, and nutrient
upshift, leading to the reentry into exponential phase. The
simulation results have been analyzed by means of the model-
checker NuSMV, using the export functionality of GNA. Be-
low, we give some examples.

The simulation of a nutrient starvation has given rise to a
state transition graph of 66 states (27 of which are persistent),
computed in less than 1 s. on a PC (800 MHz, 256 Mb).
The graph contains a single equilibrium state corresponding
to stationary-phase conditions. Are the predictions obtained
from the model consistent with experimental data? In [Azam
et al., 1999], the measured concentration of the global regula-
tor Fis is shown to decrease and become steady in stationary
phase, which is characterized by a low concentration xrrn of
stable RNAs:

EF(dsign x(cid:12)s = f(cid:0)1g ^

EF(dsign x(cid:12)s = f0g ^ value xrrn < (cid:18)rrn ))

(3)

The veriﬁcation of (3) takes a fraction of a second to complete
and shows that the observed temporal evolution of the Fis
concentration is reproduced by the model.

We have also studied the reentry into exponential phase af-
ter a nutrient upshift. Using the same model as above, but
starting the simulation from the qualitative state characteriz-
ing stationary-phase conditions and with the nutritional stress
signal switched off, qualitative simulation results in a state
transition graph of 1143 states (202 of which are persistent),
generated in 1.7 s. The graph contains several strongly con-
nected components (SCCs). One of these SCC, containing
222 states, can be reached from all states in the graph. The
qualitative transition system satisﬁes the property

AG(statesInSCC ! AGstatesInSCC );

(4)
where the predicate statesInSCC is satisﬁed by all and only
states in the SCC. That is, if the system has reached this SCC,

it always remains in it. Checking this property by visual in-
spection is tedious and error-prone, while it takes NuSMV
only 3.3 s. Further mathematical analysis has revealed that
the cyclic paths correspond to solutions spiraling inwards to
an equilibrium point [Ropers et al., 2004]. In other words,
during the reentry into stationary phase, the concentrations
of some of the proteins oscillate towards a new equilibrium
level. This is a surprising result, which is currently subject to
experimental veriﬁcation in our laboratory. We also checked
a dozen of other properties, two of which are shown in Fig-
ure 3(c).

5 Discussion
We propose a combination of qualitative simulation and
model-checking techniques for the analysis and veriﬁcation
of qualitative models of genetic regulatory networks. Model
checkers help in dealing with the problem that the state transi-
tion graphs generated by qualitative simulation may become
prohibitively large. They permit complex dynamical proper-
ties, whose veriﬁcation defeats manual analysis capabilities,
to be efﬁciently and reliably checked. The analysis of the ge-
netic regulatory network composed of key genes involved in
the nutrient stress response in E. coli illustrates the applica-
bility of the approach.

Model-checking techniques have been used before for
analyzing biological networks. Most approaches start
from discrete models, such as concurrent transition systems
[Chabrier-Rivier et al., 2004] and Boolean networks [Bernot
et al., 2004].
In this paper we show that model-checking
techniques can also be used for more conventional continu-
ous models, in particular differential equation models, when
using qualitative abstractions to discretize the dynamics of
the system.
In comparison with ideas along the same line

[Brajnik and Clancy, 1998; Shults and Kuipers, 1997], our
approach is adapted to a particular class of PL differential
equations with favorable mathematical properties, allowing
the development of tailored algorithms that scale up well to
models of large and complex genetic regulatory networks.

The model-validation approach of this paper has been il-
lustrated in the context of CTL model checking. While
CTL allows a variety of biologically-meaningful properties
to be expressed, some properties fall outside its scope. For
instance, in Section 4 we would have liked to be able to
express the occurence of oscillations in some of the pro-
tein concentrations after a nutrient upshift. The formula
EG(p ! F:p ^ :p ! Fp) expresses this property, where p
means that the concentration of some protein is above a cer-
tain threshold. Unfortunately it is not a CTL formula and it
does not admit any CTL equivalent [Clarke and Draghicescu,
1988]. However, the property can be expressed in (cid:22)-calculus
and evaluated using XTL, a component of the CADP tool-
box [Mateescu and Garavel, 1998]. The capability of GNA to
generate export ﬁles for different model checkers, allows one
to take advantage from the speciﬁc strengths of each of these.

References
[Alur et al., 2000] R. Alur, T.A. Henzinger, G. Lafferriere,
and G.J. Pappas. Discrete abstractions of hybrid systems.
Proc. IEEE, 88(7):971–84, 2000.

[Appleman et al., 1998] J.A. Appleman, W. Ross, J. Sa-
lomon, and R.L. Gourse. Activation of E. coli rRNA
transcription by Fis during a growth cycle. J. Bacteriol.,
180(6):1525–32, 1998.

[Azam et al., 1999] T. Ali Azam, A. Iwata., A. Nishimura,
S. Ueda, and A. Ishihama. Growth phase-dependent vari-
ation in protein composition of the E. coli nucleoid. J.
Bacteriol., 181(20):6361–70, 1999.

[Batt et al., 2003] G. Batt, H. de Jong, J. Geiselmann, and
M. Page. Analysis of genetic regulatory networks: A
model-checking approach. QR’03, 31–38. 2003.

[Batt et al., 2005] G. Batt, D. Ropers, H. de Jong, J. Geisel-
mann, M. Page, and D. Schneider. Qualitative analysis
and veriﬁcation of hybrid models of genetic regulatory net-
works. HSCC’05, LNCS 3414, 134–50. Springer, 2005.

[Bernot et al., 2004] G. Bernot, J.-P. Comet, A. Richard, and
J. Guespin. A fruitful application of formal methods to
biological regulatory networks: Extending Thomas’ asyn-
chronous logical approach with temporal logic. J. Theor.
Biol., 229(3):339–47, 2004.

[Brajnik and Clancy, 1998] G. Brajnik and D.J. Clancy. Fo-
cusing qualitative simulation using temporal logic. Ann.
Math. Artif. Intell., 22(1-2):59–86, 1998.

[Chabrier-Rivier et al., 2004] N. Chabrier-Rivier, M. Chi-
averini, V. Danos, F. Fages, and V. Sch¨achter. Modeling
and querying biomolecular interaction networks. Theor.
Comput. Sci., 325(1):25–44, 2004.

[Cimatti et al., 2002] A. Cimatti et al. NuSMV2: An open-
source tool for symbolic model checking. CAV’02, LNCS
2404, 359–64. Springer, 2002.

[Clarke and Draghicescu, 1988] E.M. Clarke

I.A.
Draghicescu. Expressibility results for linear-time and
branching-time logics.
REX Workshop, LNCS 354,
428–37. Springer, 1988.

and

[Clarke et al., 1999] E.M. Clarke, O. Grumberg, and D.A.

Peled. Model Checking. MIT Press, 1999.

[de Jong et al., 2003] H. de Jong, J. Geiselmann, C. Hernan-
dez, and M. Page. Genetic Network Analyzer: Qualitative
simulation of genetic regulatory networks. Bioinformatics,
19(3):336–44, 2003.

[de Jong et al., 2004a] H. de Jong, J. Geiselmann, G. Batt,
C. Hernandez, and M. Page. Qualitative simulation of the
initiation of sporulation in B. subtilis. Bull. Math. Biol.,
66(2):261–99, 2004.

[de Jong et al., 2004b] H. de Jong, J.-L. Gouz´e, C. Hernan-
dez, M. Page, T. Sari, and J. Geiselmann. Qualitative sim-
ulation of genetic regulatory networks using piecewise-
linear models. Bull. Math. Biol., 66(2):301–40, 2004.

[Glass and Kauffman, 1973] L. Glass and S.A. Kauffman.
The logical analysis of continuous non-linear biochemical
control networks. J. Theor. Biol., 39(1):103–29, 1973.

[Gouz´e and Sari, 2002] J.-L. Gouz´e and T. Sari. A class of
piecewise-linear differential equations arising in biologi-
cal models. Dyn. Syst., 17(4):299–316, 2002.

[Grumberg and Long, 1994] O. Grumberg and D.E. Long.
Model checking and modular veriﬁcation. ACM Trans.
Program. Lang. and Syst., 16(3):1512–42, 1994.

[Huisman et al., 1996] G.W. Huisman, D.A. Siegele, M.M.
Zambrano, and R. Kolter. Morphological and physiologi-
cal changes during stationary phase. In F.C. Neidhardt et
al., eds, E. coli and Salmonella: Cellular and Molecular
Biology, 1672–82. ASM Press, 1996.

[Kawamukai et al., 1985] M. Kawamukai,

J. Kishimoto,
R. Utsumi, M. Himeno, T. Komano, and H. Aiba. Nega-
tive regulation of adenylate cyclase gene (cya) expression
by cyclic AMP-cyclic AMP receptor protein in E. coli. J.
Bacteriol., 164(2):872–77, 1985.

[Kuipers, 1994] B.J. Kuipers. Qualitative Reasoning: Mod-
eling and Simulation with Incomplete Knowledge. MIT
Press, 1994.

[Mateescu and Garavel, 1998] R. Mateescu and H. Garavel.
XTL: A meta-language and tool for temporal logic model-
checking. STTT’98, 33–42, 1998.

[Mateescu and Sighireanu, 2003] R. Mateescu and M. Sighi-
reanu. Efﬁcient on-the-ﬂy model-checking for regular
alternation-free mu-calculus.
Sci. Comput. Program.,
46(3):255–81, 2003.

[Ropers et al., 2004] D. Ropers, H. de Jong, M. Page,
D. Schneider, and J. Geiselmann. Qualitative simulation
of nutritional stress response in E. coli. Technical Report
RR-5412, INRIA, 2004.

[Shults and Kuipers, 1997] B. Shults and B.J. Kuipers. Prov-
ing properties of continuous systems: Qualitative simula-
tion and temporal logic. Artif. Intell., 92:91–130, 1997.

