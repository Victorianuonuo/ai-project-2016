Vote and Aggregation in Combinatorial Domains with Structured Preferences

J´erˆome Lang

IRIT - Universit´e Paul Sabatier, Toulouse (France)

lang@irit.fr

Abstract

In many real-world collective decision problems,
the set of alternatives is a Cartesian product of ﬁnite
value domains for each of a given set of variables.
The prohibitive size of such domains makes it prac-
tically impossible to represent preference relations
explicitly. Now, AI has been developing languages
for representing preferences on such domains in a
succinct way, exploiting structural properties such
as conditional preferential independence. Here we
reconsider voting and aggregation rules in the case
where voters’ preferences have a common prefer-
ential independence structure, and address the de-
compossition a voting rule or an aggregation func-
tion following a linear order over variables.

Introduction

1
Researchers in social choice have extensively studied the
properties of voting rules and aggregation functions, up to
an important detail: candidates are supposed to be listed ex-
plicitly (typically, they are individuals or lists of individuals),
which assumes that they are not too numerous. In this paper,
we consider the case where the set of candidates has a com-
binatorial structure, i.e., is a Cartesian product of ﬁnite value
domains for each of a ﬁnite set of variables.

Since the number of possible alternatives is then exponen-
tial in the number of variables, it is not reasonable to ask vot-
ers to rank all alternatives explicitly. Consider for example
that voters have to agree on a common menu to be composed
of a ﬁrst course, a main course, a dessert and a wine, with a
choice of 6 items for each. This makes 64 candidates. This
would not be a problem if each of the four items to be chosen
were independent from the other ones: in this case, this vote
over a set of 64 candidates would come down to four inde-
pendent votes over sets of 6 candidates each, and any stan-
dard voting rule could be applied without difﬁculty. Things
become more complicated if voters express dependencies be-
tween items, such as “if the main course is meat then I prefer
red wine, otherwise I prefer white wine”.
Indeed, as soon
as variables are not preferentially independent, it is gener-
ally a bad idea to decompose a vote problem with p variables
into a set of p smaller problems, each one bearing on a single
variable: “multiple election paradoxes” [Brams et al., 1998]

show that such a decomposition leads to suboptimal choices,
and give real-life examples of such paradoxes, including si-
multaneous referenda on related issues. They argue that the
only way of avoiding the paradox would consist in “voting
for combinations [of values]”, but they stress its practical dif-
ﬁculty without giving any hint for a practical solution.

Because the preference structure of each voter in such a
case cannot reasonably be expressed by listing all candidates,
what is needed is a compact preference representation lan-
guage. Such languages have been developed within the Artiﬁ-
cial Intelligence community so as to escape the combinatorial
blow up of explicit representations. Many of these languages
(including CP-nets and their extensions) are graphical: pref-
erences are expressed locally (on small subsets of variables).
The common feature of these languages is that they allow
for a concise representation of the preference structure, while
preserving a good readability (and hence a proximity with the
way agents express their preferences in natural language).

Thus, AI gives a ﬁrst answer to the problem pointed in
[Brams et al., 1998]. However, another problem arises: once
preferences have been elicited, and represented in some com-
pact language, how is the voting rule computed? The pro-
hibitive number of candidates makes it practically impossible
to compute these rules in a straightforward way.

When domains are not too large, it may still be reason-
able to ﬁrst generate the whole preference relations from their
compact representations and then compute the outcome by a
direct implementation of the voting rule. However, when do-
mains become bigger, this naive method becomes too greedy
and then we need to ﬁnd a more sophisticated way of com-
puting the outcome of the vote. Two methods come to mind:
either (1) give up optimality and compute an approximation
of the voting or aggregation rule, or (2) assume that the vot-
ers’ preferences enjoy speciﬁc structural properties that can
be exploited so as to decompose the problem into smaller,
local subproblems. Here we address (2), and we focus on
a speciﬁc restriction of preference proﬁles where all voters
have a preference relation enjoying conditional preferential
independencies compatible with a common acyclic graph G.
After giving some background on preference relations over
combinatorial domains and vote in Section 2, we introduce
and study sequential voting rules in Section 3. Section 4
then considers preference aggregation over combinatorial do-
mains, and Section 5 concludes.

IJCAI-07

1366

2 Background
2.1 Preferences on combinatorial domains
Let V = {x1, . . . , xp} be a set of variables. For each xi ∈ V ,
Di is the value domain of xi. A variable vi is binary if Di =
{xi, xi}. Note the difference between the variable xi and the
value xi. If X = {xi1, . . . , xim
} ⊆ V , with i1 < . . . < ip,
then DX denotes Di1 × . . . × Dim.
X = D1 × ... × Dp is the set of all alternatives, or can-
didates. Elements of X are denoted by (cid:2)x, (cid:2)x(cid:2) etc. and rep-
for
resented by concatenating the values of the variables:
instance, if V = {x1, x2, x3}, x1x2x3 assigns x1 to x1,
x2 to x2 and x3 to x3. We allow concatenations of vec-
tors of values: for instance, let V = {x1, x2, x3, x4, x5},
Y = {x1, x2}, Z = {x3, x4}, (cid:2)y = x1x2, (cid:2)z = x3x4, then
(cid:2)y.(cid:2)z.x5 denotes the alternative x1x2x3x4x5.
A (strict) preference relation on X is a strict order (an ir-
reﬂexive, asymmetric and transitive binary relation). A linear
preference relation is a complete strict order, i.e., for any (cid:2)x
and (cid:2)y (cid:4)= (cid:2)x, either (cid:2)x (cid:5) (cid:2)y or (cid:2)y (cid:5) (cid:2)x holds. If R is a preference
relation, we generally note (cid:2)x (cid:5)R (cid:2)x(cid:2) instead of R((cid:2)x, (cid:2)x(cid:2)).
Let {X, Y, Z} be a partition of the set V of variables and
(cid:5) a linear preference relation over DV . X is (conditionally)
preferentially independent of Y given Z (w.r.t. (cid:5)) if and only
if for all (cid:2)x1, (cid:2)x2 ∈ DX, (cid:2)y1, (cid:2)y2 ∈ DY , (cid:2)z ∈ DZ,

(cid:2)x1.(cid:2)y1.(cid:2)z (cid:5) (cid:2)x2.(cid:2)y1.(cid:2)z iff (cid:2)x1.(cid:2)y2.(cid:2)z (cid:5) (cid:2)x2.(cid:2)y2.(cid:2)z

Unlike probabilistic independence, preferential indepen-
dence is a directed notion: X may be independent of Y given
Z without Y being independent of X given Z.
A CP-net N [Boutilier et al., 2004] over V is a pair con-
sisting of a directed graph G over V and a collection of con-
ditional preference tables CP T (xi) for each xi ∈ V . Each
conditional preference table CP T (xi) associates a total or-
der1 (cid:5)i
(cid:2)u with each instanciation (cid:2)u of xi’s parents P a(xi) =
U. For instance, let V = {x, y, z}, all three being binary, and
assume that preference of a given agent over 2V can be de-
ﬁned by a CP-net whose structural part is the directed acyclic
graph G = {(x, y), (y, z), (x, z)}; this means that the agent’s
preference over the values of x is unconditional, preference
over the values of y (resp. z) is fully determined given the
value of x (resp. the values of x and y).
The conditional preference statements contained in these
tables are written with the usual notation, that is, x1x2 : x3 (cid:5)
x3 means that when x1 is true and x2 is false then x3 = x3 is
preferred to x3 = x3. In this paper we make the classical as-
sumption that G is acyclic. A CP-net N induces a preference
ranking on X : (cid:2)x (cid:5)N (cid:2)y iff there is a sequence of improv-
ing ﬂips from (cid:2)y to (cid:2)x, where an improving ﬂip is the ﬂip of a
single variable (cid:2)xi “respecting” the preference table CP T (xi)
(see [Boutilier et al., 2004]). Note that the preference relation
induced from a CP-net is generally not complete.
Let G be a directed graph over V , and (cid:5) a linear preference
relation. (cid:5) is said to be compatible with G iff for each x ∈ V ,
x is preferentially independent of V \ ({x} ∪ P ar(x)) given
P ar(x). The following fact is obvious, but important:

1More generally, the entries of conditional preference tables
may contain partial orders over the domains of the variables (see
[Boutilier et al., 2004]), but we don’t need this here.

Observation 1 A linear preference relation (cid:5) is compatible
with G if and only if there exists a CP-net N whose associated
graph is G and such that (cid:5) extends (cid:5)N .
Let G be an acyclic graph over V and let O = x1 >
... > xp be a linear order on V . G is said to follow O
iff for every edge (xi, xj) in G we have i < j. A linear
preference relation (cid:5) is said to follow O iff it is compatible
with some acyclic graph G following O. Clearly, (cid:5) follows
O = x1 > ... > xp if and only if for all i < p, xi is pref-
erentially independent of {xi+1, ..., xp} given {x1, ..., xi−1}
with respect to (cid:5). If (cid:5) follows O then the projection of (cid:5)
on xi given (x1, . . . , xi−1) ∈ D1 × . . . × Di−1, denoted by
(cid:5)xi|x1=x1,...,xi−1=xi−1, is the linear preference relation on
i ∈ Di, xi (cid:5)xi|x1=x1,...,xi−1=xi−1
Di deﬁned by: for all xi, x(cid:2)
i iff x1...xi−1xixi+1...xp (cid:5) x1...xi−1x(cid:2)
x(cid:2)
ixi+1..xp holds for
all (xi+1, . . . , xp) ∈ Di+1 × . . . × Dp.
Due to the fact that (cid:5) follows O and that (cid:5) is a lin-
ear order, (cid:5)xi|x1=x1,...,xi−1=xi−1 is a well-deﬁned linear or-
der as well. Note also that if (cid:5) follows both O = x1 >
... > xp and O(cid:2) = xσ(1) > ... > xσ(k−1) > xi(=
then (cid:5)xi|x1=x1,...,xi−1=xi−1 and
xσ(k)) > ... > xσ(p),
(cid:5)xi|xσ(1)=xσ(1),...,xσ(k−1)=xσ(k−1) coincide. In other words,
the local preference relation on xi depends only on the values
of the variables that precede xi in O and in O(cid:2).
Lastly, for any acyclic graph G over V , we say that two lin-
ear preference relations R1 and R2 are G-equivalent, denoted
by R1 ∼G R2, if and only if R1 and R2 are both compatible
with G and for any x ∈ V , for any (cid:2)y, (cid:2)y(cid:2) ∈ Dom(par(x)) we
have Rx|par(x)=(cid:2)y
Observation 2 For any linear preference relations R and R(cid:2),
R ∼G R(cid:2) if and only if there exists a CP-net N whose asso-
ciated graph is G and such that R and R(cid:2) both extend (cid:5)N .
Example 1 Let V = {x, y, z}, all three being binary. and
let R and R(cid:2) be the following linear preference relations:
R : xyz (cid:5) xy¯z (cid:5) x¯y¯z (cid:5) x¯yz (cid:5) ¯xy¯z (cid:5) ¯x¯y¯z (cid:5) ¯xyz (cid:5) ¯x¯yz
R(cid:2) : xyz (cid:5) xy¯z (cid:5) ¯xy¯z (cid:5) x¯y¯z (cid:5) ¯xyz (cid:5) ¯x¯y¯z (cid:5) x¯yz (cid:5) ¯x¯yz
Let G the graph over V whose set of edges is {(x, z), (y, z)}.
R and R(cid:2) are both compatible with G. Moreover, R ∼G R(cid:2),
since all local preference relations coincide: x (cid:5)x
R ¯x and
x (cid:5)x
¯z; etc. The
CP-net N such that R and R(cid:2) both extend (cid:5)N is deﬁned by
the following local conditional preferences: x (cid:5) ¯x; y (cid:5) ¯y;
xy : z (cid:5) ¯z; x¯y : ¯z (cid:5) z; ¯xy : ¯z (cid:5) z; ¯x¯y : ¯z (cid:5) z.
2.2 Voting rules and correspondences
Let A = {1, ..., N} be a ﬁnite set of voters and X a ﬁnite set
of candidates. A (collective) preference proﬁle w.r.t. A and
X is a collection of N individual linear preference relations
over X : P = ((cid:5)1, ..., (cid:5)N ) = (P1, ..., PN ). Let PA,X be the
set of all preference proﬁles for A and X .
A voting correspondence C : PA,X → 2X \{∅} maps each
preference proﬁle P of PA,X into a nonempty subset C(P )
of X . A voting rule r : PA,X → X maps each preference
proﬁle P of PA,X into a single candidate r(P ). A rule can be
obtained from a correspondence by prioritization over candi-
dates (for more details see [Brams and Fishburn, 2004]).

R(cid:2) ¯x; z (cid:5)z|x=x,y=y

= Rx|par(x)=(cid:2)y

¯z and z (cid:5)z|x=x,y=y

R(cid:2)

R

1

2

.

IJCAI-07

1367

(cid:2)N

To give an example, consider the well-known family of
positional scoring rules and correspondences. A positional
scoring correspondence is deﬁned from a scoring vector, that
is, a vector (cid:2)s = (s1, . . . , sm) of integers such that s1 ≥ s2 ≥
. . . ≥ sm and s1 > sm. Let ranki(x) be the rank of x
in (cid:5)i (1 if it is the favorite candidate for voter i, etc.). The
score of x is deﬁned by S(x) =
i=1 sranki(x). The corre-
spondence deﬁned from (cid:2)s selects all candidates maximizing
S. A positional voting rule is deﬁned as a positional scoring
correspondence plus a tie-breaking mechanism. Well-known
examples are the Borda rule, given by sk = m − k for all k,
and the plurality rule, by s1 = 1, and sk = 0 for all k.
We also recall the deﬁnition of a Condorcet winner (CW).
Given a proﬁle P = ((cid:5)1, ..., (cid:5)N ), x ∈ X is a Condorcet
winner iff it is preferred to any other candidate by a strict
majority of voters, that is, for all y (cid:4)= x, #{i, x (cid:5)i y} > N
2 .
It is well-known that there are some proﬁles for which no CW
exists. Obviously, when a CW exists then it is unique.

3 Sequential voting
Given a combinatorial set of alternatives and a compact rep-
resentation (in some preference representation language R)
of the voters’ preferences, how can we compute the (set of)
winner(s)? The naive way consisting in “unfolding” the com-
pactly expressed preferences (that is, generating the whole
preference relations on D1 × . . . × Dp from the input), and
then applying a given voting rule, is obviously unfeasible, ex-
cept if the number of variables is really small. We can try to
do better and design an algorithm for applying a given voting
rule r on a succinctly described proﬁle P without generat-
ing the preferences relations explicitly. However, we can’t be
too optimistic, because it is known that the latter problem is
computationally hard, even for simple succinct representation
languages and simple rules (see [Lang, 2004]).

A way of escaping this problem consists in restricting the
set of admissible preference proﬁles in such a way that com-
putationally simple voting rules can be applied. A very natu-
ral restriction (that we investigate in the next Section) consists
in assuming that preferences enjoy some speciﬁc structural
properties such as conditional preferential independencies.
3.1 Sequential voting rules and correspondences
Now comes the central assumption to the sequential ap-
there exists an acyclic graph G such that the lin-
proach:
ear preference relation of every voter is compatible with
G. This assumption is not as restrictive as it may appear
at ﬁrst look: suppose indeed that the linear preference rela-
tions ((cid:5)1, . . . ,(cid:5)N ) are compatible with the acyclic graphs
G1, . . . , GN , whose sets of edges are E1, . . . , EN . Then they
are a fortiori compatible with the graph G∗ whose set of edges
is E1 ∪ . . . ∪ EN . Therefore, if G∗ is acyclic, then sequential
voting will be applicable to ((cid:5)1, . . . ,(cid:5)N ) (of course, this is
no longer true if G∗ has cycles). Moreover, in many real-life
domains it may be deemed reasonable to assume that prefer-
ential dependencies between variables coincide for all agents.
Sequential voting consists then in applying “local” voting
rules or correspondences on single variables, one after the
other, in such an order that the local vote on a given variable

We deﬁne CompG as the set of all collective proﬁles P =

can be performed only when the local votes on all its parents
in the graph G have been performed.
((cid:5)1, . . . ,(cid:5)N ) such that each (cid:5)i is compatible with G.
Deﬁnition 1 Let G be an acyclic graph on V ; let P =
(P1, ..., PN ) in CompG, O = x1 > ... > xp a linear order
on V following G, and (r1, . . . , rp) a collection of determin-
istic voting rules (one for each variable xi). The sequential
voting rule Seq(r1, . . . , rp) is deﬁned as follows:

1 , . . . , P x1

• x∗
• x∗
• . . .
• x∗

1 = r1(P x1
2 = r2(P x2|x1=x∗
p = rp(P xp|x1=x∗

1

1

1

N );
, . . . , P x2|x1=x∗

1

N

);

1 ,..,xp−1=x∗

p−1

, .., P xp|x1=x∗
1, . . . , x∗
p).

N

1 ,..,xp−1=x∗

p−1

)

Then Seq(r1, . . . , rp)(P ) = (x∗
Example 2 Let N = 12, V = {x, y} with Dom(x) =
{x, ¯x} and Dom(y) = {y, ¯y}, and P = (cid:11)P1, . . . , P12(cid:12) the
following 12-voter proﬁle:

xy (cid:5) ¯xy (cid:5) x¯y (cid:5) ¯x¯y
x¯y (cid:5) xy (cid:5) ¯xy (cid:5) ¯x¯y
¯xy (cid:5) ¯x¯y (cid:5) xy (cid:5) x¯y
¯xy (cid:5) ¯x¯y (cid:5) x¯y (cid:5) xy

P1, P2, P3, P4 :
P5, P6, P7:
P8, P9, P10:
P10, P11:
All these linear preference relations are compatible with
the graph G over {x, y} whose single edge is (x, y); equiv-
alently, they follow the order x > y. Hence, P ∈ CompG.
The corresponding conditional preference tables are:
voters 1,2,3,4
voters 11,12
x (cid:5) ¯x
¯x (cid:5) x
x : y (cid:5) ¯y
x : ¯y (cid:5) y
¯x : y (cid:5) ¯y
¯x : y (cid:5) ¯y
Take rx and ry both equal to the majority rule, together
with a tie-breaking mechanism which, in case of a tie between
x and ¯x (resp. between y and ¯y), elects x (resp. y). The
projection of P on x is composed of 7 votes for x and 5 for ¯x,
is equal to x (cid:5) ¯x for 1 ≤ i ≤ 7 and to ¯x (cid:5) x for
that is, P x
8 ≤ i ≤ 12. Therefore x∗ = rx(P x
i
12) = x: the x-
winner is x∗ = x. Now, the projection of P on y given x = x
is composed of 7 votes for y and 5 for ¯y, therefore y∗ = y,
and the sequential winner is now obtained by combining the
x–winner and the conditional y-winner given x = x∗ = x,
namely Seqrx,ry(P ) = xy.

voters 8,9,10
¯x (cid:5) x
x : y (cid:5) ¯y
¯x : y (cid:5) ¯y

voters 5,6,7
x (cid:5) ¯x
x : ¯y (cid:5) y
¯x : y (cid:5) ¯y

1 , . . . , P x

i

in a

1 , . . . , P x1

voting correspondences

In addition to sequential voting rules, we also de-
similar
ﬁne
sequential
if for each i, Ci is a correspondence on Di, then
way:
Seq(C1, . . . , Cp)(P ) is the set of all outcomes (x1, . . . , xp)
such that x1 ∈ C1(P x1
N ), and for all i ≥ 2,
, .., P xi|x1=x1,..,xi−1=xi−1
xi ∈ Ci(P xi|x1=x1,..,xi−1=xi−1
).
Due to the lack of space, we give results for voting rules only.
An important property of such sequential voting rules and
correspondences is that the outcome does not depend on O,
provided that G follows O. This can be expressed formally:
Observation 3 Let O = (x1 > . . . > xp) and O(cid:2) =
(xσ(1) > . . . > xσ(p)) be two linear orders on V such that G
follows both O and O(cid:2). Then

Seq(r1, . . . , rp)(P ) = Seq(rσ(1), . . . , rσ(p))(P )

N

and similarly for voting correspondences.

IJCAI-07

1368

Note that when all variables are binary, all “reasonable”
neutral voting rules (we have no space to comment on what
“reasonable” means – and this has been debated extensively
in the social choice literature) coincide with the majority rule
when the number of candidates is 2 (plus a tie-breaking mech-
anism). Therefore, if all variables are binary and the number
of voters is odd (in which case the tie-breaking mechanism is
irrelevant), then the only “reasonable” sequential voting rule
is Seq(r1, . . . , rn) where each ri is the majority rule.

It

is important

to remark that,

in order to compute
Seq(r1, . . . , rp)(P ), we do not need to know the linear pref-
erence relations P1, . . . , PN entirely: everything we need is
the local preference relations: for instance, if V = {x, y}
and G contains the only edge (x, y), then we need ﬁrst the
unconditional linear preference relations on x and then the
linear preference relations on y conditioned by the value of
x.
In other words, if we know the conditional preference
tables (for all voters) associated with the graph G, then we
have enough information to determine the sequential winner
for this proﬁle, even though some of the preference relations
induced from these tables are incomplete. This is expressed
more formally by the following fact (a similar result holds for
correspondences):
Observation 4 Let V = {x1, . . . , xp}, G an acyclic graph
over V , and P = (P1, . . . , PN ), P (cid:2) = (P (cid:2)
N ) two
complete preference proﬁles such that for all i = 1, . . . , N
we have Pi ∼G P (cid:2)
i . Then, for any collection of local voting
rules (r1, . . . , rp), we have

1, . . . , P (cid:2)

Seq(r1, . . . , rp)(P ) = Seq(r1, . . . , rp)(P (cid:2)).

This, together with Observation 2, means that applying se-
quential voting to two collections of linear preference rela-
tions corresponding to the same collection of CP-nets gives
the same result. This is illustrated on the following example.
Example 3 Everything is as in Example 2, except that we
don’t know the voters’ complete preference relations, but
only their corresponding conditional preference tables. These
conditional preferences contain strictly less information than
P , because some of the preference relations they induce are
not complete: for instance, the induced preference relation
for the ﬁrst 4 voters is xy (cid:5) ¯xy (cid:5) ¯x¯y, xy (cid:5) x¯y (cid:5) ¯x¯y, with
x¯y and ¯xy being incomparable. However, we have enough
information to determine the sequential winner for this pro-
ﬁle, even though some of the preference relations are incom-
plete. For instance, taking again the majority rule for rx
and ry, the sequential winner is xy for any complete proﬁle
P (cid:2) = (P (cid:2)
12) extending the incomplete preference re-
lations induced by the 12 conditional preference tables above.
3.2 Sequential decomposability
We now consider the following question: given a voting rule
r, is there a way of computing r sequentially when the linear
preference relations enjoy common preferential independen-
cies?
Deﬁnition 2 A voting rule r on X = D1 × . . . × Dp is de-
composable if and only if there exist n voting rules r1, . . . , rp
on D1, . . . , Dp such that for any linear order O = x1 > ... >
xp on V and for any preference proﬁle P = (P1, ..., PN ) such

1, . . . , P (cid:2)

that each Pi follows O, we have Seq(r1, . . . , rp)(P ) = r(P ).
The deﬁnition is similar for correspondences.

An interesting question is the following: for which voting
rules r does the sequential winner (obtained by sequential ap-
plications of r) and the “direct” winner (obtained by a direct
application of r) coincide? The following result shows that
this fails for the whole family of scoring rules (and similarly
for correspondences).
Proposition 1 No positional scoring rule is decomposable.
Proof sketch: We give a proof sketch for the case of two binary
variables (this generalizes easily to more variables, as well as to
non-binary variables). Let r be a decomposable scoring rule on
2{x,y}
: there exist two local rules rx and ry such that whenever
P follow x > y, we have Seq(rx, ry)(P ) = r(P ). Then we
show that rx and ry are both the majority rule (this follows easily
from the fact that some properties of r, including monotonicity,
carry on to rx and ry.) Now, consider the same preference proﬁle
P as in Example 3.
P follows the order x > y. Now, let
s1 ≥ s2 ≥ s3 ≥ s4 = 0 (with s1 > 0) the weights deﬁning r. The
score of xy is 4s1 + 3s2 + 3s3; the score of ¯xy is 5s1 + 4s2 + 3s3,
which is strictly larger than the score of xy, therefore xy cannot be
(cid:2)
the winner for r, whatever the values of s1, s2, s3.

Such counterexamples can be found for many usual voting
rules outside the family of scoring rules (we must omit the re-
sults due to the lack of space), including the whole family of
voting rules based on the majority graph. Positive results, on
the other hand, seem very hard to get. Obviously, dictatorial
rules (electing the preferred candidate of some ﬁxed voter)
and constant rules (electing a ﬁxed candidate whatever the
voters’ preferences) are decomposable. But the latter rules
are of course not reasonable, and we conjecture that the an-
swer to the above question is negative as soon as a few rea-
sonable properties are required. .

A particular case of preferential independence is when
all variables are preferentially independent from each other,
which corresponds to a dependency graph G with no edges.
In this case, the preference proﬁle follows any order on the
set of variables, and the sequential winner is better called a
parallel winner, since the local votes on the single variables
can be performed in any order. We might then consider the
following property of separability:
Deﬁnition 3 A deterministic rule r is separable if and only
if for any preference proﬁle P = ((cid:5)1, ..., (cid:5)N ) such that the
variables are pairwise conditionally preferentially indepen-
dent, the parallel winner of r w.r.t. P is equal to r(P ).

Obviously, any decomposable rule is separable. Are there
any separable rules? Focusing on positional scoring rules, we
ﬁnd a rather intriguing result (the proof of which is omitted):
Proposition 2 Let V = {x1, . . . , xp} (with p ≥ 2).

• if p = 2 and both variables are binary, exactly one posi-
tional scoring rule is separable: the rule associated with
the weights s1 = 2s2 = 2s3 (and s4 = 0).
• in all other cases (p ≥ 3 or at least one variable has
more than 2 possible values), then no positional scoring
rule is separable.

IJCAI-07

1369

3.3 Sequential Condorcet winners
We may now wonder whether a Condorcet winner (CW),
when there exists one, can be computed sequentially. Se-
quential Condorcet winners (SCW) are deﬁned similarly as
for sequential winners for a given rule: the SCW is the se-
quential combination of “local” Condorcet winners.
Deﬁnition 4 Let G be an acyclic graph and P = ((cid:5)1, ...,
(cid:5)N ) a proﬁle in CompG. Let O = x1 > ... > xp be a linear
1, . . . , x∗
order on V following G. (x∗
p) is a sequential Con-
dorcet winner for P if and only if
1 (cid:5)x1
1} > N
• ∀x(cid:2)
x(cid:2)
2 ;
• for every k > 1 and ∀x(cid:2)
k ∈ Dk,
1 ,...,xk−1=x∗
k} > N
x(cid:2)
2 .

1 ∈ D1, #{i, x∗
k (cid:5)xk|x1=x∗

#{i, x∗

k−1

i

i

1, x∗

2, . . . , x∗

This deﬁnition is well-founded because we obtain the same
set of SCWs for any O following G. The question is now, do
SCWs and CWs coincide? Clearly, the existence of a SCW
is no more guaranteed than that of a CW, and there cannot be
more than one SCW. We have the following positive result,
whose proof (which we omit) does not present any difﬁculty:
Proposition 3 Let G be an acyclic graph and P = ((cid:5)1, ...,
(cid:5)N ) in CompG. If (x∗
n) is a Condorcet winner
for P , then it is a sequential Condorcet winner for P .
The following example shows that the converse fails: 2 vot-
ers have the preference relation x¯y (cid:5) ¯x¯y (cid:5) xy (cid:5) ¯xy, one
voter xy (cid:5) x¯y (cid:5) ¯xy (cid:5) ¯x¯y, and 2 voters ¯xy (cid:5) ¯x¯y (cid:5) xy (cid:5)
x¯y. x and y are mutually preferentially independent in all re-
lations, therefore the SCW is the combination of the locals
CW for {x} and for {y}, provided they exist. Since 3 vot-
ers unconditionally prefer x to ¯x, x is the {x}-CW; similarly,
3 voters unconditionally prefer y to ¯y and y is the {y}-CW.
Therefore, xy is the SCW for the given proﬁle; but xy is not
a CW for this proﬁle, because 4 voters prefer ¯x¯y to xy.

Note that Proposition 3 extends to weak Condorcet winners

(where strict majority is replaced by weak majority).
We now give a condition on the preference relations en-
suring that SCWs and CWs coincide. Let O = x1 (cid:2)
. . . (cid:2) xp be a linear order on V . We say that a linear
preference relation (cid:5) on DX is conditionally lexicographic
w.r.t. O if there exist p local conditional preference relations
i for i = 1, .., p, such that (cid:2)x (cid:5) (cid:2)y
(cid:5)xi|x1=x1,...,xi−1=xi−1 x(cid:2)
if and only if there is a j ≤ p such that (a) for every k < j,
xk = yk and (b) xj (cid:5)xj|x1=x1,...,xj−1=xj−1 yj. A proﬁle
P = ((cid:5)1, . . . ,(cid:5)N ) is conditionally lexicographic w.r.t. O if
each (cid:5)i is conditionally lexicographic w.r.t. O. Such pref-
erence relations can be represented by TCP-nets [Brafman et
al., 2006] or conditional preference theories [Wilson, 2004].
Proposition 4 Let O be a linear strict order over V . If P =
((cid:5)1, . . . ,(cid:5)N ) is conditionally lexicographic w.r.t. O, then (cid:2)x
is a sequential Condorcet winner for P if and only if it is a
Condorcet winner for P .

4 Arrow’s theorem and structured domains
We end this paper by considering decomposable domains
from the point of view of preference aggregation. A pref-
erence aggregation function maps a proﬁle to an aggregated

proﬁle representing the preference of the group. Arrow’s the-
orem [Arrow, 1963] states that any aggregation function de-
ﬁned on the set of all proﬁles and satisfying unanimity and
independence of irrelevant alternatives (IIR) is dictatorial. An
Arrow-consistent domain D is a subset of P allowing for
unanimous, IIR and nondictatorial aggregation functions.
It is easy to see that for any acyclic graph G, Comp(G) is
Arrow-consistent. Indeed, consider the preference aggrega-
tion function deﬁned as follows:
• reorder the variables in an order compatible with G, i.e.,
w.l.o.g., assume that there is no edge (xi, xj) in G with
i ≥ j. Such an order exists because G is acyclic.
• let h : V → A be a non-constant mapping from vari-
ables to voters (such a mapping exists because |V | ≥ 2
and |A| ≥ 2).

• for any (cid:2)x and (cid:2)y (cid:4)= (cid:2)x, let k((cid:2)x, (cid:2)y) = min{j, xj (cid:4)= yj}.
• for any collective proﬁle (cid:11)(cid:5)1, . . . ,(cid:5)N(cid:12), deﬁne (cid:5)∗=
for all (cid:2)x and (cid:2)y, (cid:2)x (cid:5)∗ (cid:2)y if
yk, where k = k((cid:2)x, (cid:2)y).

fh((cid:5)1, . . . ,(cid:5)N ) by:
xk (cid:5)xk|x1=x1,...,xn=xn

h(k)

Proposition 5 fh is a nondictatorial aggregation function on
Comp(G) satisfying unanimity and IIR.

Thus, restricting the set of admissible proﬁles to Comp(P )
in other terms,
is sufﬁcient for escaping Arrow’s theorem:
Comp(G) is Arrow-consistent2.
fh is easier understood
when it is turned into a voting rule: voter h(x1) ﬁrst chooses
his preferred value for variable x1, then voter h(x2) comes
into play and chooses his preferred value for variable x2 given
the value assigned to x1, and so forth. Note that fh is truly
nondictatorial, because no agent imposes her own preference
to the group; however fh however has p local dictators (one
for each variable), since voter h(i) imposes his preference on
the domain of xi. We now prove that there must exist such lo-
cal dictators, provided that the following three properties are
satisﬁes:
(P1) preservation of the independence structure

(P2) independence of irrelevant values and variables

f is a mapping from Comp(G)N to Comp(G).
For any xi ∈ V , (cid:2)z ∈ DP ar(xi), and P = (cid:11)P1, . . . , PN(cid:12),
Q = (cid:11)Q1, . . . , QN(cid:12) in Comp(G)N such that for every
j and all x, x(cid:2) ∈ Di, x (cid:5)xi|(cid:2)z
x(cid:2), we have
x (cid:5)xi|(cid:2)z

f (P ) x(cid:2) if and only if x (cid:5)xi|(cid:2)z

x(cid:2) iff x (cid:5)xi|(cid:2)z
f (Q) x(cid:2).

Qj

Pj

(P3) local unanimity

For any P ∈ Comp(G), xi ∈ V and (cid:2)z ∈ DP ar(xi), if
1 = . . . = P xi|(cid:2)z
P xi|(cid:2)z

N then f(P )xi|(cid:2)z = P xi|(cid:2)z

.

1

(P1) expresses that the preferential independencies ex-
pressed in the graph G should be transferred to the aggregated
preference relation. Therefore, under (P1), for any preference
relation (cid:5)∗ resulting from the aggregation of N preferences
relations in Comp(G) there exist p local conditional prefer-
ence relations (cid:5)xi|P ar(xi)

, for i = 1, . . . , p.

∗

2As a referee pointed out to me, this domain restriction does not
preclude the existence of Condorcet triples, which suggests that it is
not as strong as it may seem at ﬁrst glance.

IJCAI-07

1370

(P2) is a local version of independence of irrelevant al-
ternatives: whether the society prefers a value xi to another
value yi of xi given an assignment (cid:2)z of the parent variables of
xi depends only on the voters’ preferences between these two
values given (cid:2)z (and not on their preferences on other values
of xi nor on their preferences on other variables.)

(P3) tells that if all voters have the same local preference
relation over the values of a variable xi given a ﬁxed value
(cid:2)z of its parents, then the local collective preference on Dxi
given (cid:2)z should be equal to this local preference relation.

Importantly, note that the way (P2) and (P3) are written
depends on the assumption that (P1) holds – otherwise we
would not have been allowed to write (cid:5)xi|(cid:2)z
f (P ).

let f satisfying (P1), (P2) and (P3).

Proposition 6 Let G be an acyclic graph over a set of vari-
ables V = {x1, . . . , xp} with domains D1, . . . , Dp, with
|Di| ≥ 3 for each i. An aggregation function f on Comp(G)
satisﬁes (P1), (P2) and (P3) if and only if there exists a local
dictator d(xi, (cid:2)z) for each xi and each (cid:2)z ∈ DP ar(xi), such
that for each (cid:2)t ∈ DV \(P ar(xi)∪{xi}) we have

(cid:2)z(cid:2)txi (cid:5)f ((cid:5)1,...,(cid:5)N ) (cid:2)z(cid:2)tx(cid:2)

i ⇔ (cid:2)z(cid:2)txi (cid:5)d(xi,(cid:2)z) (cid:2)z(cid:2)tx(cid:2)
i.
Proof sketch: The ⇐ direction is straightforward.
For the
⇒ direction,
(P1) guar-
antees that for every xi and (cid:2)z ∈ DP ar(xi), xi is independent
of V \ (DP ar(xi) ∪ {xi}) given (cid:2)z,
therefore there exists
a local collective preference relation (cid:7)xi|(cid:2)z∗
such that for all
(cid:2)t ∈ DV \(P ar(xi) ∪ {xi}) and for all xi, x(cid:3)
i ∈ Dxi, xi (cid:7)xi|(cid:2)z∗
x(cid:3)
i.
(P2) implies that (cid:7)xi|(cid:2)z∗
is fully determined by voters’ preferences on
the values of xi given (cid:2)z. Therefore, there exists a local aggregation
function f xi|(cid:2)z such that (cid:7)xi|(cid:2)z∗ = f xi|(cid:2)z((cid:7)xi|(cid:2)z
N ). f xi|(cid:2)z is
easily shown to satisfy the conditions of Arrow’ theorem. Applying
Arrow’s theorem to each f xi|(cid:2)z enables us to conclude to the
existence of a dictator d(xi, (cid:2)z) for each xi and each (cid:2)z ∈ DP ar(xi),
such that xi (cid:7)
i. Now,
,...,(cid:4)xi|(cid:3)z
the fact that (cid:7)xi|(cid:2)z∗ = f xi|(cid:2)z((cid:7)xi|(cid:2)z
N ) allows us to con-
clude that xi (cid:7)xi|(cid:2)z
f ((cid:4)1,...,(cid:4)N ) x(cid:3)
i ,
which in turn is equivalent to: for all (cid:2)t ∈ DV \(P ar(xi)∪{xi}) and
i, where (cid:7)∗= f ((cid:7)1, . . . , (cid:7)N ). (cid:2)
for all xi, x(cid:3)

i ⇔ xi (cid:7)xi|(cid:2)z
x(cid:3)
, . . . , (cid:7)xi|(cid:2)z

i is equivalent to xi (cid:7)xi|(cid:2)z

i ∈ Dxi, (cid:2)z(cid:2)txi (cid:7)∗ (cid:2)z(cid:2)tx(cid:3)

d(xi,(cid:2)z) x(cid:3)

d(xi,(cid:2)z) x(cid:3)

f xi|(cid:3)z ((cid:4)xi|(cid:3)z

1

, . . . , (cid:7)xi|(cid:2)z

1

)

N

1

Note that the local dictator for a given variable may depend
on the values of its parents. For instance, with two variables x
and y and a dependency graph with the edge (x, y), we have
a single dictator for xi and up to |Dx| dictators for y.
Corollary 1 Let Sep(V ) be the domain of fully separable
linear preference relations on DV . An aggregation function f
on Sep(V ) satisﬁes (P1), (P2) and (P3) iff there exists p local
dictators d(xi), . . . , d(xp) such that for each (cid:2)t ∈ DV \{xi},

(cid:2)txi (cid:5)f ((cid:5)1,...,(cid:5)N )

i ⇔ (cid:2)txi (cid:5)d(xi)
(cid:2)tx(cid:2)

(cid:2)tx(cid:2)
i.

Finally, note that knowing the local dictators does not fully
determine f. For instance, let V = {x, y}, and G with no
edge. Assume voter 1 prefers x1 to x2 and voter 2 prefers y1
to y2. (cid:5)∗= f((cid:5)1,(cid:5)2) satisﬁes x1 (cid:5)(cid:2)x∗ x2 and y1 (cid:5)(cid:2)y∗ y2, but
this does not tell whether x1y2 (cid:5)∗ x2y1 or x2y1 (cid:5)∗ x1y2.

5 Conclusion
As far as we know, aggregating structured preferences on
combinatorial domains exploiting preferential independence
properties has never been considered neither in social choice
nor in AI. [Rossi et al., 2004] deﬁne a multi-agent exten-
sion to CP-nets and propose various semantics for aggregat-
ing preferences; but they do not address computational issues.
This paper contains several negative results. But one im-
portant question is left unanswered: what are the sequentially
decomposable voting rules? Answering this question (by
ﬁnding a small set of properties implying that a rule cannot be
decomposable) seems much more difﬁcult than we thought,
and this is of course an issue for further research.

Next, we identiﬁed a domain for which direct and sequen-
tial Condorcet winners coincide. Clearly, lexicographic pref-
erences are very speciﬁc, so that we would like to ﬁnd more
reasonable restrictions for the latter property to hold.

Another important issue stems from the fact that in combi-
natorial domains with structural properties (independencies),
direct (global) voting rules are generally not computable by
a sequential application of local rules: so, what should we
favor? Global voting rules, which are well studied in social
choice but which take no advantage of preferential indepen-
dencies, or sequential local rules, which are based on the de-
pendency graph, thereby being more intuitive and easier to
compute? A theoretical comparison between global voting
and sequential local voting is a highly promising issue.
Acknowledgements
I wish to thank Christophe Gonzales, Martin Meier, Patrice
Perny and Lirong Xia for many helpful discussions.
References
[Arrow, 1963] K. Arrow. Social Choice and Individual Val-

ues. Wiley, 1963. 2nd edition.

[Boutilier et al., 2004] C. Boutilier, R. Brafman, C. Domsh-
lak, H. Hoos, and D. Poole. CP-nets: a tool for represent-
ing and reasoning with conditional ceteris paribus state-
ments. JAIR, 21:135–191, 2004.

[Brafman et al., 2006] R. Brafman, C. Domshlak,

and
E. Shimony. On graphical modeling of preference and im-
portance. JAIR, 25:389–424, 2006.

[Brams and Fishburn, 2004] S. Brams and P. Fishburn. Vot-
ing procedures. In Handbook of Social choice and Welfare,
chapter 4. Elsevier, 2004.

[Brams et al., 1998] S. Brams, D. Kilgour, and W. Zwicker.
The paradox of multiple elections. Social Choice and Wel-
fare, 15:211–236, 1998.

[Lang, 2004] J. Lang. Logical preference representation and
combinatorial vote. Annals of Mathematics and Artiﬁcial
Intelligence, 42(1):37–71, 2004.

[Rossi et al., 2004] F. Rossi, K. Venable, and T. Walsh.
mCP-nets: representing and reasoning with preference of
multiple agents. In Proceedings of AAAI-04, 2004.

[Wilson, 2004] N. Wilson. Consistency and constrained op-
timisation for conditional preferences. In Proceedings of
ECAI-04, pages 888–892, 2004.

IJCAI-07

1371

