Backbone Guided Local Search for Maximum Satisfiability* 

Weixiong Zhang, Ananda Rangan  and  Moshe Looks 

Department of Computer Science and Engineering 

Washington University in St. Louis 

St. Louis, MO 63130, USA 
Email: zhang@cse.wustl.edu 

Abstract 

Maximum satisfiability  (Max-SAT) is  more general 
and more difficult to solve than satisfiability (SAT). 
In this paper, we first investigate the effectiveness of 
Walksat, one of the best local search algorithms de(cid:173)
signed for SAT, on Max-SAT. We show that Walksat 
is also effective on Max-SAT, while its effectiveness 
degrades as the problem is  more constrained.  We 
then develop a novel method that exploits the back(cid:173)
bone  information  in  the  local  minima  from  Walk-
sat  and applies the backbone information in  differ(cid:173)
ent  ways  to  improve  the  performance  of the  Walk-
sat algorithm.  We call our new algorithm backbone 
guided Walksat (BGWalksat). On large random SAT 
and Max-SAT problems as well as instances from the 
SATLIB,  BGWalksat  significantly  improves  Walk-
sat's performance. 

Introduction 

1 
Satisfiability or SAT is an archetypical combinatorial problem. 
A SAT involves a set of Boolean variables and a set of clauses 
in the form of a disjunction of literals (variables or their nega(cid:173)
tions).  A  clause is  satisfied  if one of its  literals is  set to true, 
and  the  problem  is  satisfied  if all  clauses  are  satisfied.  The 
problem  is  to  decide  if a  variable  assignment exists  that  sat(cid:173)
isfies all the clauses.  When not all clauses are satisfiable, the 
goal is to maximize the satisfied clauses, and the problem be(cid:173)
comes maximum SAT or Max-SAT, an optimization problem. A 
SAT (Max-SAT) with k literals per clause is denoted as k-SAT 
(Max-k-SAT). It is known that k-SAT with k greater than two is 
NP-complete and Max-k-SAT with k being at least two is NP-
hard [7].  Max-SAT is more general and difficult to solve than 
SAT. Many real-world problems, such as scheduling, pattern 
recognition, and multi-agent cooperation and coordination [3; 
6], can be formulated and solved as SAT or Max-SAT. 

Recent years have  witnessed  significant progress made  on 
SAT and Max-SAT along two directions.  The first is the un(cid:173)
derstanding of properties such as phase transitions and back(cid:173)
bones [2;  12;  13;  17;  19].  Phase transitions refer to dramatic 
changes  in  a problem  property  when  a  critical  parameter  of 
a problem changes.  The most important phase transition re(cid:173)
sults on random 3-SAT are that when the ratio of the number 

*This research was supported in part by NSF grants IIS-0196057 
and ITR/EIA-0113618, and in part by DARPA Cooperative Agree(cid:173)
ments F30602-00-2-0531 and F33615-01-C-1897. 
SATISFIABILITY 

of clauses to the number of variables (C/V ratio) increases be(cid:173)
yond a critical value, around 4.3, random 3-SATs begin to be(cid:173)
come unsatisfiablc, and the computational cost of the problem 
increases abruptly [2; 12; 13]. The backbone of a problem is a 
set of variables that have  fixed  values in all  optimal solutions 
to the problem.  The hardness of a SAT or Max-SAT is deter(cid:173)
mined by the backbone size of the problem  [13].  In addition, 
the backbones of random  SAT and Max-SAT also have small 
to large phase transitions [19]. The second direction is focused 
on developing efficient SAT solvers.  The most noticeable re(cid:173)
sults along this line are the Walksat local search algorithm [16] 
and  its  variants  [11],  which are among the best  SAT solvers 
used in practice for problems such as planning. 

A problem of fundamental interest and practical importance 
in algorithm design is how to utilize problem structure proper(cid:173)
ties such as phase transitions and backbones to cope with high 
complexity and improve algorithm performance.  The current 
research on  this problem  is  limited.  [15]  developed a trans(cid:173)
formation  method  to  exploit phase  transitions  of tree  search. 
[5] designed a method to incorporate estimated backbone vari(cid:173)
ables in a systematic search for SAT. [18] proposed a heuristic 
backbone sampling method for generating initial assignments 
for a local search using an estimated backbone. This sampling 
scheme will also be studied in this research. 

In this paper, we develop a novel method to exploit the struc(cid:173)
ture of local minima reached by an effective local search algo(cid:173)
rithm, and an effective approach to utilize the structure infor(cid:173)
mation to improve the performance of a local search algorithm. 
We focus on Max-SAT in this research. 

To develop our new method, we first study the performance 
of Walksat,  which was  designed for SAT, on Max-SAT (Sec(cid:173)
tion  3).  We  show  that Walksat  is  effective  on random Max-
SAT, finding many high quality local minima close to optimal. 
In  addition,  the  local  minima  reached  by  Walksat  appear to 
form large clusters around optimal solutions.  Our results also 
show that the performance of Walksat degrades when the con-
strainedness  of Max-SAT  increases.  Although  we  carry  out 
this analysis for the purpose of developing a new method, the 
result is of interest and significance on its own.  To our knowl(cid:173)
edge, Walksat has only been analyzed on some overconstrained 
Steiner tree problems [10]. 

The main contribution of this paper is an innovative method 
that exploits the solution structure of a combinatorial problem 
to  improve the performance of a  local  search algorithm such 
as Walksat (Section 4).  It was inspired by the recent research 
on phase transitions and backbones of SAT and Max-SAT [13; 
1179 

19]  and  the  performance  results  of Walksat  in  the  first  part 
of the paper.  We  directly  apply the  new  method to  Walksat. 
Nevertheless, the ideas and techniques developed here are gen(cid:173)
eral and applicable to other combinatorial problems and local 
search algorithms. 

Briefly, our main ideas are to use backbone information to 
make biased moves  in  a  local  search,  and use  local minima 
to  approximate optimal  solutions  for extracting backbone in(cid:173)
formation.  The  frequencies  of literals  appearing  in  all  local 
minima are called pseudo-backbone frequencies. Our new ap(cid:173)
proach applies pseudo-backbone frequencies as a heuristic for 
selecting  a  variable to  flip  in  each  step  of the  Walksat  algo(cid:173)
rithm.  Such  biased  moves  guide  the  search  toward  regions 
possibly  having  optimal  solutions.  The  effectiveness  of this 
method is partially due to the effectiveness of Walksat on find(cid:173)
ing optimal and high quality approximate solutions.  We call 
the resulting algorithm backbone guided Walksat or BGWalk-
sat. We demonstrate and evaluate experimentally the effective(cid:173)
ness  of BGWalksat  on  large random Max-SAT  instances and 
real problems from SATLIB [9] (Section 5). 
2  The Walksat Algorithm 
Walksat  is  a  randomized  algorithm, 
it  starts  by  creating  an 
initial random variable assignment (which we call assignment 
generation).  It then repeatedly makes a move by selecting a 
variable and flipping its value from True' to False or vice versa, 
until  it finds a  satisfying  assignment or reaches  a predefined 
maximal number of flips. Each such attempt is called a try or 
restart.  The procedure repeats until a maximal number of tries 
has been executed. 

To select a variable, the effect of  flipping  a variable is  as(cid:173)
sessed. Flipping a variable may make some unsatisfied clauses 
satisfied.  The  number of clauses  being  made  unsatisfied  by 
flipping a variable is call the break-count of the variable at the 
current assignment.  Walksat  attempts  to  flip  a  variable  with 
zero break-count, trying not to make the next assignment worse 
than  the  current.  To  find  a  variable  with  zero  break-count, 
Walksat first selects an unsatisfied clause C, randomly, from all 
unsatisfied clauses. This is called clause pick.  If C has a vari(cid:173)
able of zero break-count,  Walksat then picks such a variable, 
randomly,  from the  ones that qualify.  If no zero break-count 
variable  exists  in  C,  Walksat  then  makes  a  random  choice. 
With probability p it chooses,  randomly,  a  variable  from  the 
ones  involved in  C (called  noise  pick);  and with probability 
1  â€” p it picks a variable with the least break-count, breaking 
the tie arbitrarily if multiple choices exist (called greedy pick). 
A  flow  chart of one try of Walksat is  in Figure  1.  The four 
shaded rectangles contain the random choices we will analyze. 
Walksat takes three parameters to run, the number of tries, the 
maximal number of flips in each try or cutoff parameter, and a 
probability or noise ratio for noise pick. 
3  Performance of Walksat 
We now turn to the effectiveness of Walksat on Max-SAT, par(cid:173)
ticularly  Max-3-SAT.  We  measure  a  local  minimum  in  two 
ways.  The  first  is the  cost difference between a local  mini(cid:173)
mum and an optimal solution (which may have non-zero cost). 
The second measure is the Hamming distance between a local 
minimum and the optimal solution nearest to it.  We introduce 
the nearest Hamming distance to capture the minimal number 
of flips required to turn a local  minimum into an optimal so(cid:173)
lution.  Furthermore, to make these two  quality measures on 

1180 

two Max-SAT instances of different sizes comparable, we nor(cid:173)
malize them.  For a given problem,  we  divide the  Hamming 
distance by the number of variables, resulting in the Hamming 
distance  per  variable,  and  divide  the  cost  difference  by  the 
number of clauses, giving the cost difference per clause.  We 
then  use  these  two normalized  quality  measures to  construct 
the landscape of local minima reached by Walksat. 

To  find  the  nearest  optimal  assignment,  all  optimal  solu(cid:173)
tions are required, which are found by an extended DPLL al(cid:173)
gorithm [4] for SAT. Since finding all optimal solutions is ex-
pensive,  we restricted ourselves to  relatively small Max-SAT 
problems.  In our experiments, we used problems of 100 vari-
ables and C/V ratios of 2.0, 4.3,  6.0 and  8.0 to capture prob(cid:173)
lems in different constrainedness regions.  The problems were 
randomly generated by  uniformly picking three  literals  with(cid:173)
out replacement for a clause, discarding duplicate clauses.  For 
Walksat,  we set the noise ratio at 0.5, the number of tries per 
problem at 100, and the cutoff parameter at 10,000. We gener(cid:173)
ated  1,000 problems at each C/V ratio. 

The quality  of local  minima  from Walksat  are  summarized 
in Figure 2.  The X-Y planes show the correlation between the 
normalized Hamming distance and the normalized cost differ(cid:173)
ence.  The origins of the figures correspond to global  minima. 
Each point on the X-Y plane represents a possible local mini(cid:173)
mum that may be visited by Walksat. The vertical Z axis mea(cid:173)
sures  the  number of local  minima  reached  by  Walksat,  aver(cid:173)
aged over 1,000 instances on each of which 100 tries were run. 
As shown in Figures 2(a) and (b), Walksat performs well on 
underconstrained and critically  constrained problems,  in that 
it  can  find  global  minima very  often.  This  is  shown by  the 
points on Z axes indicated by the arrows in the figures. There(cid:173)
fore,  Walksat is effective at  finding  optimal  solutions on un(cid:173)
derconstrained and critically constrained problems.  However, 
the number of local minima which are also global minima de(cid:173)
creases  from  66,677  to  8,616,  on  average,  as  the  C/V  ratio 
increases  from 2.0 to 4.3,  indicating that the  effectiveness of 
Walksat decreases. This number decreases further to 201 and 0 
on overconstrained problems with C/V ratios equal to 6.0 and 
8.0  (Figures 2(c)  and (d)).  This result indicates that Walksat 
becomes less effective in  finding  optimal solutions as problem 
constraints increase. 

The  distribution  of local minima of Walksat  exhibits  a bell 
surface  on  overconstrained problems  (Figures  2(c)  and  (d)). 
More importantly, the summit of such a bell surface shifts away 
SATISFIABILITY 

Unfortunately, exact backbone frequencies are hard to come 
by without finding at least one optimal solution.  The idea to 
bypass this problem was  inspired by the effectiveness of high 
performance  local  search  algorithms,  such  as  Walksat.  Our 
analysis  on  the  performance  of Walksat  (Section  3)  showed 
that  Walksat  can  find  optimal  solutions  very  often  on  under-
constrained and critically constrained Max-SAT, and can also 
reach near optimal  solutions very close to the optimal.  Such 
near optimal local minima also form large clusters around op(cid:173)
timal solutions.  Thus, the local minima of Walksat must have 
common structures, which may also be shared by optimal so(cid:173)
lutions. Therefore, we can use the local minima as if they were 
optimal solutions to compute pseudo-backbone frequencies as 
an estimation of the true backbone frequencies.  We  call this 
general approach backbone guided local search or BGLS. 

The  above  ideas can  be  applied to  almost  all  local  search 
algorithms.  However, actual application is problem and algo(cid:173)
rithm specific,  since local  search algorithms operate very dif(cid:173)
ferently on different problems.  In  this  research,  we  consider 
Max-SAT and the Walksat algorithm. 
4.2  Backbone guided  Walksat:  BGWalksat 
The  application  of BGLS  to  Max-SAT  and  Walksat  leads  to 
the backbone guided Walksat (BGWalksat) algorithm.  Similar 
to Walksat, BGWalksat runs a total K tries.  In addition, BG(cid:173)
Walksat  splits  the  total  of K  tries  into  two  phases.  The  first, 
estimation phase, runs 
tries  of original  Walksat  to  collect 
local minima and compute pseudo-backbone frequencies (see 
Section 4.3).  The second, backbone guided search phase runs 
tries,  in  which  variable  selection  is  guided 
by pseudo-backbone frequencies.  The newly discovered local 
minima can  also  be added to the pool  of all  local  minima to 
update the pseudo-backbone frequencies. 

=  K 

We now consider backbone guided moves or biased moves. 
As  discussed  in  Section  2  and  shown  in  Figure  1,  Walksat 
makes  five  uniformly random  choices.  The  first  is  the  ran(cid:173)
dom  initial assignment generation.  Instead of uniformly ran(cid:173)
domly choosing a variable and setting it to an arbitrary value, 
we can view the pseudo-backbone frequencies as an approxi(cid:173)
mate probability distribution of variable assignments and take 
samples  of variable  assignments  as  initial  assignments  from 
this distribution.  This scheme  was called heuristic backbone 
sampling in [18]. 

- 

The second random choice in Walksat is the random clause 
pick for choosing an unsatisfied clause.  To apply the idea of 
backbone frequencies, we extend it to the concept of pseudo-
backbone clause frequencies, which measure the frequencies 
that clauses are satisfied in all local minima.  When picking a 
clause from the set of unsatisfied clauses, we choose one based 
on its pseudo-backbone clause frequency.  For example, given 
three unsatisfied clauses 
with pseudo-backbone 
frequencies  0.3,0.05  and  0.15,  respectively,  we  choose 
with probability 
bility 

and C3 with probability  

with proba(cid:173)

and 

The  remaining  three  random  choices  involved  selecting  a 
variable, uniformly, from a particular set. The first choice picks 
a variable from the set of zero break-count variables in the cho(cid:173)
sen clause C (the unshaded rectangle in Figure  1), the second 
directly  from the variables involved  in  C,  and the  third  from 
the  set  of variables  in  C  with  the  least  break-count.  Rather 
than picking one variable uniformly from a particular set, we 
make a biased selection based on variables' pseudo-backbone 
1181 

from optima] solutions, the (0,0) point on the X-Y plane, as the 
problems are more constrained. As the C/V ratio increases, the 
number of optimal solutions decreases [19], which can become 
indistinguishable from a large number of suboptimal solutions. 
As a result, the search space becomes rugged, with more local 
minima in which Walksat may be trapped. 

Despite the difficulty of overconstrained problems, Walksat 
is  still  fairly  effective  in  that it  is  able to  reach  local minima 
close to optimal solutions.  For a C/V ratio of 8.0 (Figure 2(d)), 
for  instance,  a  large  number  of local  minima  landed  on  by 
Walksat (the peak point of the bell surface) have a normalized 
cost  difference to  optimal  solutions  of 0.014  for  100  variable 
problems,  which  is  equivalent to  approximately eleven  more 
constraints violated than an optimal solution on such overcon(cid:173)
strained problems. Since Walksat is normally executed in mul(cid:173)
tiple tries, the best local minimum it can reach is usually much 
better than such most frequent local minima. 

A  closer examination of the  results  in  Figures 2(c)  and  (d) 
indicates  a  nearly  linear  correlation  between  the  cost  differ(cid:173)
ence and the Hamming distance. This observation implies that 
a  local  minimum with  a small  cost  is  more likely to  share  a 
larger common structure  with an optimal  solution.  A  similar 
phenomenon on  the  Traveling  Salesman  Problem  was  called 
the  "big  valley"  [1].  We  will  exploit this  in  our new  search 
algorithm described in the next section. 
4  Backbone Guided Local Search 
4.1  The main idea 
If all optimal  solutions to a problem were known,  they could 
provide a useful clue to how a variable should be set.  For ex(cid:173)
ample, if a variable is a part of the backbone, i.e., it has a fixed 
value in all optimal solutions, obviously the variable should be 
set to that value.  In fact,  we can extend the concept of back(cid:173)
bone to backbone frequency. The frequency of a variable-value 
pair (or literal in SAT) in all optimal solutions is an indication 
of how often the variable should take that particular value. This 
can be exploited as a heuristic for selecting variables and val(cid:173)
ues in a local search such as Walksat.  In general, a variable-
value pair will be less likely to be swapped out of the current 
state if it has a higher backbone frequency than another pair. 

SATISFIABILITY 

and 

respectively. 

flip  more than 

appears more often than 

frequencies. Consider an example of three literals 

and 
in the chosen clause C with backbone frequencies 0.1,0.3 
because 
in  all  local  minima 

and 0.6, respectively. We want to 
literal 
(frequency 0.9 versus 0.4). Therefore, we pick 
with frequencies 
and 
4.3  Pseudo-backbone  frequencies 
The  performance  of backbone  guided  local  search  depends 
largely  upon  the  quality  of  pseudo-backbone  frequencies. 
There are at least two ways to compute pseudo-backbone fre(cid:173)
quencies.  The first and simplest method is to consider all the 
available local minima as if they were global optima, and take 
the  frequency  of a  variable-value  pair 
that  ap(cid:173)
pears in all local minima S as its pseudo-backbone frequency. 
Specifically, we have frequency 
We 
call this method average counting. 

has  cost 

If  a  local  minimum 

It  is  imperative  to  note  that  not  all  local  minima  are  of 
equal  quality.  A  lower  quality  local  minimum  usually  con(cid:173)
tains  less  backbone  variables  than  one  of a  higher  quality. 
Therefore,  the  former  is  less  reliable  and  should  contribute 
less to the pseudo-backbone frequencies than the latter.  Thus, 
we must discount the contribution of a local minimum based 
we  can 
on  its  cost. 
compute  the  pseudo-backbone  frequency  of 
as 
In  other  words, 
the  pseudo-backbone frequency  of I  is  reciprocally  weighted 
by the costs of the local minima that I was involved with.  We 
call this method cost reciprocal average counting. 
4.4  Walksat  and  BGWalksat with  Dynamic  Noise 
One  limitation  of the  Walksat  family  of  algorithms  is  their 
dependence on  a manually  set  noise parameter.  So  far,  two 
mechanisms have been proposed to resolve this issue in SAT. 
Auto-Waksat [14] uses a preliminary probing stage to estimate 
the optimal value for the noise parameter, while Walksat with 
dynamic noise [8] automatically adjusts the noise level as the 
search progresses. We have successfully combined our method 
with the dynamic noise strategy, for SAT and Max-SAT. 

flips, 

where 

The idea of dynamic noise  is simple:  start search with the 
noise parameter equal to zero, and examine the number of vi(cid:173)
olations in the current state every 
is the 
number of clauses in  the  instance.  If the number of violations 
has not decreased since the last time we checked (n flips ago), 
the search is assumed to have stagnated, and the noise level is 
increased to 
is the current noise 
level. Otherwise, the noise level is decreased to 
The discrepancy between the formulas for increasing and de(cid:173)
creasing the noise level are based on the observations of how 
Walksat behaves when the noise parameter is too high, com(cid:173)
pared with how it behaves when the parameter is too low  [8]. 
Following [8], we have set 
and  =  0.2, which have 
been found to be effective over a wide range of SAT and Max-
SAT instances. 

where 

Dynamic noise was designed and tested with Walksat's cut-
off parameter set to infinity;  i.e.,  no random restarts.  This  is 
the  setting we  use  for Walksat  with  dynamic noise  for all  of 
our experiments in the next section. Unfortunately, this setting 
is incompatible with backbone guided Walksat, which requires 
random restarts in order to construct the pseudo-backbone. To 
overcome this, we have devised "compromise" parameter set(cid:173)
tings, which allow dynamic noise to function effectively, while 

1182 

still  constructing the pseudo-backbone.  Specifically,  we  run 
Walksat with dynamic noise for 30 short runs to construct the 
pseudo-backbone, followed by 7 long runs of backbone guided 
local search, each of which is 10 times as long as a short run. 
 
5  Experimental Results 
We  now  analyze  the  performance  of  BGWalksat  on  Max-
SAT  The  benchmark  suite  for  empirical  evaluation  consists 
of two different types of problems:  randomly generated prob(cid:173)
lems and problems converted from real-world applications in 
SATLIB  [9].  We  included satisfiable  and unsatisfiable prob(cid:173)
lem instances.  We used Walksat implementation from Henry 
Kautz and developed BGWalksat on top of it. 
5.1  Random ensembles 
In  these  experiments,  we  investigate  the  effects  of  biased 
moves on random choices  in  Walksat (Section 2).  There are 
five  places  where  Walksat  makes  uniformly  random  choices 
(the  five  rectangles  in  Figure  1).  Our  experimental  results 
showed that the biased random choice of picking a variable of 
zero break-count in a selected clause C (the unshaded rectan(cid:173)
gle in Figure 1) has almost no effect. The reason is that when a 
zero break-count variable exists, there is usually one available, 
meaning that a very few such biased moves occur. We will not 
consider this biased random choice in the rest of the paper. 

In our experiments, we generated random MAX-3-SAT in(cid:173)
stances with  2,000 variables and  three different C/V ratios of 
2.0, 4.3  and 8.0.  We generated  100 instances for each of the 
C/V ratios.  We also tested various noise ratios,  from 0 to 0.9 
with  an  increment of 0.1,  as  well  as  Walksat  with  dynamic 
noise.  Each run, regardless of its configuration, was allowed 
a total of one million flips. 

For Walksat with static  noise, the cutoff parameter was set 
to  10,000  flips  (so the  algorithm  was  run  from  100 different 
starting  points).  We  tested  different  ratios  of the  lengths  of 
the backbone estimation phase and the actual backbone search 
phase in BGWalksat.  We found that a ratio of about 0.3 seems 
to provide the best results. In the results shown below, Walksat 
was run on the first 30 tries to collect the initial set of local min(cid:173)
ima and obtain the pseudo-backbone frequencies.  BGWalksat 
was  run  on the remaining 70 tries.  New  local  minima were 
added to update pseudo-backbone frequencies every 5 tries. 

We experimentally compared the two methods for comput(cid:173)
ing pseudo-backbone frequencies (Section 4.3).  The average 
counting (AC) method is generally worse than the cost recip(cid:173)
rocal average counting (CRAC) method on random problems. 
Due to space  limitations here,  we will  only report the results 
from the CRAC method below. 

There  is  little  impact  of biased moves  when  the  C/V  ratio 
is 2.0, because Walksat is able to find optimal solutions in the 
first 30 tries in almost all problems. Figure 3 shows the results 
on random Max-SAT with 2,000 variable and C/V ratios of 4.3 
and 8.0, comparing Walksat and BGWalksat with biased noise 
pick,  biased  greedy pick,  and bias  moves  combining biased 
noise pick, greedy pick, clause pick, and assignment genera(cid:173)
tion.  The error bars in the figures correspond to 
confi(cid:173)
dence intervals.  As shown, biased greedy pick is effective at 
low noise levels, but leads to degraded performance on higher 
noise levels. Biased noise pick, on the other hand, has a greater 
effect as the noise level increases, due to the direct relationship 
between the noise level and the frequency of noise picking. Bi(cid:173)
ased assignment generation and clause pick on their own, have 
SATISFIABILITY 

Figure 3:  Quality improvement on random Max-SAT using bi(cid:173)
ased noise pick, biased  greedy pick,  and the  combination of 
biased  noise pick,  greedy pick,  clause pick,  and assignment 
generation (combined bias). 

little effect of Walksat's performance (data not shown).  How(cid:173)
ever,  when  combined with  other strategies,  they can provide 
improvements, as shown. 

We also tested Walksat and BGWalksat with dynamic noise 
on  the  same  instances,  with  good  results.  This  is  fairly  un(cid:173)
surprising,  since on this class  of instances,  Walksat performs 
best with a low noise ratio, and dynamic noise begins with the 
noise ratio set to zero, and only raises it as needed.  We found 
that  the noise parameter fluctuated at  low levels,  with  an av(cid:173)
erage  of 0.2  for  both  C/V=8  and  C/V=4.3.  The  noise  level 
never exceeded 0.6 at any time.  The solutions found by Walk-
sat with dynamic noise were as good as the best solutions found 
by Walksat  with  static  noise for C/V=8,  and only about 3.5% 
worse for C/V=4.3. When combining dynamic noise with BG(cid:173)
Walksat, the average noise level was slightly lower, giving 0.13 
for C/V=8 and 0.15 for C/V=4.3, due to the increased number 
of random restarts.  This is because after every restart there  is 
a period of rapid improvement, when the noise level remains 
at zero.  The performance of BGWalksat with dynamic noise is 
similar to that of BGWalksat with  best static  noise  for C/V=8 
and slightly worst than that for C/V=4.3. 

5.2  Real  problem  instances 
We  now  investigate how  BGWalksat  improves upon  Walksat 
on the problems from SATLIB  [9], when used in conjunction 
with dynamic noise.  The test problems include SAT-encoding 
instances  from  a  random  hard  graph  coloring problems  and 
SAT-encoded blocks world planning,  bounded model  check(cid:173)
ing,  and the  all  interval series problem.  The details of these 
problems can be found on the website.  We only chose prob(cid:173)
lems with more than 350 variables,  and discarded those that 
can be easily solved by Walksat and BGWalksat. 

We  considered  satisfiable  and unsatisfiable problems.  We 
ran both Walksat and BGWalksat,  both using dynamic noise, 
with  a total  of 10 million flips (compared with  1  million for 
our  results  for  random  instances). 
Interestingly,  BGWalksat 
exhibited superior performance, over a wide range of real in(cid:173)
stances,  with  some  of the  methods  of  biased-moves  utiliz(cid:173)
ing the pseudo-backbone disabled.  For the  results presented 
here, we use backbone-guided noise pick and backbone-guided 
clause pick, with the average-counting (AC) method.  Results 
are for twenty runs for each  algorithm and instance.  Experi(cid:173)
ments with the best static noise (not shown) produced similar 
results. 

In viewing the results, we found it useful to divide the satis(cid:173)
fiable instances into two categories, the easier instances, which 
were solved at least once (Table 1), and the harder ones, which 

SATISFIABILITY 

Table 1: Walksat vs. BGWalksat on easier satisfiable problems. 
Walksat and BGWalksat are the runs resulting in a satisfying 
solutions (out of 20) by these algorithms. The better results are 
underlined and in bold. 

1 I 

I 

problem 
bw_large.c  3016 
bw.large.d 
6325 
350 
350 
350 
350 
350 
512 
512 
512 
729 
729 
2125 
7250 

par8-1 
par8-2 
par8-3 
par8-4 
par8-5 
qg1-08 
qg2-08 
qg3-08 
qg6-09 
qg7-09 
g125.17 
g250.29 

6 
6 
7 
0 

[  Walksat  I [  BGWalksat 
2 
50457 
l 
131973  1 
0 
1149 
19 
1157 
19 
1171 
17 
1155 
16 
â€” 
1171 
148957 
12 
148957 
4 
10469 
20 
21844 
5 
5 
22060 
5 
66272 
2  1 
454622 

8 
1 
11 
0 
4 
5 
4  | 

were not solved by either method, in any of their runs (Table 2). 
Results for unsatisfiable instances are presented in Table 3. 

As  the  results  show,  BGWalksat  significantly  outperforms 
Walksat in most cases. On easier satisfiable instances (Table 1), 
BGWalksat finds more satisfying solutions than Walksat for all 
parity (par) and quasigroup (qg) classes, and produces similar 
results to Walksat on blocksworld instances.  On harder satis(cid:173)
fiable instances (Table 2), BGWalksat outperforms Walksat in 
all but two of 34 instances, where it is less than half a percent 
worse. In contrast, the overall average gain is 30%, and is over 
50% in  11 of them. On unstatisfiable instances (Table 3), BG(cid:173)
Walksat produces impressive gains on longmult instances, and 
on ssa6288-047, with an overall average gain of 20%.  On un(cid:173)
satisfiable quasigroup instances (not shown), performance was 
similar to that of Walksat.  Performance of BGWalksat is never 
more than 10% worse than Walksat on any of the unsatisfiable 
instances we have studied. 

The most glaring  failure of BGWalksat  is  on  the  instances 
pl25.17 and g250.29. These instances are SAT-encoded graph 
coloring problems, and serve to illustrate an important point. 
As described in Section 3, we believe that our method is effec(cid:173)
tive because it exploits the "big valley" structure of the solution 
space.  However, graph coloring problems exhibit a particular 
type of symmetry in their solution structures which is opaque 
to local search methods such as Walksat.  For example, color(cid:173)
ing all red nodes green, and all green nodes red, results in an 
identical  solution,  with a radically different encoding.  Thus, 
there is not a single "big valley", but several, which can bury 
the true backbone information and thus lead to degraded per(cid:173)
formance.  Presumably,  BGWalksat's performance will  suffer 
on all instances with this type of symmetry. 
6  Conclusions 
We developed a novel and general method that exploits back(cid:173)
bone  information  for  improving  the  performance  of a  local 
search  algorithm.  We  demonstrated  and  analyzed  the  new 
method,  called  BGWalksat,  on  Max-SAT  using the  Walksat 
algorithm, with both static and dynamic noise strategies.  The 
main ideas are to extract backbone information from local min(cid:173)
ima and use it directly to fix the discrepancy between the cur(cid:173)
rent state and optimal solutions, so as to guide Walksat toward 
the regions of the search space more likely to contain optimal 
solutions. In comparison, almost all existing local search meth(cid:173)
ods focus on the costs of the states in the search space.  There-
1183 

Table  2:  Walksat  vs.  BGWalksat  on  harder satisfiablc  prob(cid:173)
lems.  Walksat  and  BGWalksat  are  the  average  numbers  of 
violations  in  the best  solutions found by  the  algorithms for a 
given problem, averaged over 20 runs.  Gain is the percentage 
improvement of BGWalksat  over  Walksat.  The  better results 
are underlined and in bold. 
\ 

|  Walksat 

|  BGWalksat 
4. 

I  gam(%) 
Iâ€”83.60 

problem 
bmc-ibm-1 
bmc-ibm-2 
bmc-ibm-3 
bmc-ibm-4 
bmc-ibm-5 
bmc-ibm-6 
bmc-ibm-7 

bmc-galileo-8 
bmc-galileo-9 
bmc-ibm-10 
bmc-ibm-11 
bmc-ibm-12 
bmc-ibm-13 

f2000 

par16-1-c 
par16-1 
par16-2-c 
par16-2 
par16-3-c 
par16-3 
par16-4-c 
par16-4 
par16-5-c 
par16-5 
par32-1-c 
par32-1 
par32-2-c 
par32-2 
par32-3-c 
par32-3 
par32-4-c 
par32-4 
par32-5-c 
par32-5 
Average 

#Clause 
55870  25.3 
14468 
72106 
139716 
41207 
368367 
39774 
294821 
326999 
334861 
150027 
19477 
6572 

| 
I 

! 
j 

#Var 
9685 
3628 
14930 
28161 
9396 
51654 
8710 
58074 
63624 
61088 
32109 
39598 
13215 
2000  8500 
317 
1015 
349 
1015 
334 
1015 
324 
1015 
341 
1015 
1315 
3176 
1303 
3176 
1325 
3176 
1333 
3176 
1339 
3176 

1264 
3310 
1392 
3374 
1332 
3344 
1292 
3324 
1360 
3358 
5254 
10277 
5206 
10253 
5294 
10297 
5326 
10313 
5350 
10325 

5.4 
115.25 
118.15 
12.95 
358.25 
17.4 
65.65 
95.95 
406.15 
439.8 
554.65 
88.05 
2.2 
5.45 
10.45 
6.2 
10.6 
6 
10.45 
6.15 
10.4 
6.25 
10.45 
21.7 
30.95 
21.15 
32.1 
22.05 
32.95 
21.3 
33.65 
23.15 
32.9 

Table  3:  Walksat vs.  BGWalksat  on  unsatisfiable  problems. 
The legend is the same as that in Table 2. 
[ 

[  BGWalksat 

[  Walksat 

1.5 |â€”1.65 1 

problem 
Iongmult06 
Iongmult07 
Iongmult08 
Iongmult09 
longmult10 
longmult11 
longmult12 
longmultl 3 
longmultl 4 
longmultl 5 
ssa6288-047 

Average 

#Clause 

#Var 
2848" â€”8853  I 
3319 
3810 
4321 
4852 
5403 
5974 
6565 
7176 
7807 
10410 

10335 
11877 
13479 
15141 
16863 
18645 
20487 
22389 
24351  | 
34238 

2.05 
3.65 
6.75 
10.25 
15.05 
17.8 
23.25 
32.6 
41.5  1 

100.25 

| |  gam(%) 
-16.00 
-7.32 
27.40 
57.04 
45.37 
38.87 
8.99 
7.96 
24.54 
27.71 
16.62 
20.01 

2.2 
2.65 
2.9 
5.6 
9.2 
16.2 
21.4 
24.6 
30 
89.7 

[2]  P. Chccscman, B. Kanefsky, and W. M. Taylor. Where the really 

hard problems are.  In Proc. IJCAI-91, pages 331-337. 

[3]  P.  Codognet  and  F  Rossi. 
and 

on  Solving 

tutorial 
Constraints: 
Theory  and  Practice. 
http://www.math.unipd.it/frossi/papers.htmI. 

the  ECAI2000 
Notes 
Programming  with  Soft 
available  at 

for 

[4j  M. Davis, G. Logemann, and D. Loveland.  A machine program 

for theorem proving.  CACM, 5:394-397,  1962. 

[5]  O. Dubois and G. Dequen.  A backbone-search  heuristic for ef(cid:173)
ficient  solving of hard 3-SAT formula.  In Proc. IJCAI-OI, pages 
248-253,2001. 

[6]  E. C. Freuder and R. J. Wallace.  Partial constraint satisfaction. 

Artificial Intelligence,  58:21-70,  1992. 

[7]  M.  R.  Garey and D.  S.  Johnson.  Computers and Intractability. 

Freeman, 1979. 

18]  H. H. Hoos.  An adaptive noise mechanism for walksat.  In Proc. 

AAAI-02. 

[9]  H.  H.  Hoos  and  T.  Stuzle.  SATLIB  -  the  satisfiability  library. 

http://www.informatik.tu-darmstadt.de/AI/SATLIB, 

1999. 

1.2 
19.7 
38.9 
1.25 
103.6 
6.4 
15.5 
17.3 
162.45 
358.45 
445.25 
2.7 
2.05 
5.35 
9.45 
5.9 
10.4 
5.65 
9.75 
5.5 
9.55 
6.05 
9.85 
20.85 
30.25 
21.2 
28.35 
21.3 
28.55 
21.4 
29.4 
22.05 
30.3 

77.78 
82.91 
67.08 
90.35 
71.08 
63.22 
76.39 
81.97 
60.00 
18.50 
19.72 
96.93 

| 

| 

I  6.82 
1.83 
9.57 
4.84  1 
1.89 
5.83 
6.70 
10.57 
8.17 
3.20 
5.74 
3.92 
2.26 
-0.24 
11.68 
3.40 
13.35 
-0.47 
12.63 
4.75 
7.90 
29.82 

fore, the new algorithm focuses more on where the current state 
is within the search space and tries to fix possible problems in 
the structures of the state directly. 

BGWalksat  can  significantly  outperforms  Walksat  on  SAT 
and Max-SAT, with both static and dynamic noise. On random 
Max-3-SAT problems, the more constrained the problems, the 
more  improvement BGWalksat  can provide.  Specifically,  on 
random  Max-3-SAT  with  2,000  variables  and  a  C/V  ratio  of 
8.0,  BGWalksat can satisfy approximately  10% more clauses 
on  average  than  Walksat  (using  dynamic  noise).  On  satisfi-
able  problems  from  the  SATLIB,  BGWalksat  almost  always 
significantly improves on Walksat's results, with the exception 
of graph coloring problems which  contains a type  of symme(cid:173)
try (see  Section 5).  On unsatisfiablc SATLIB problems, BG(cid:173)
Walksat substantially reduces the number of unsatisfied clauses 
across several instance classes. 

In the process of developing BGWalksat, we also carried out 
a  systematic  experimental  analysis  of Walksat  on  Max-SAT 
(again with both static and dynamic noise).  Our results show 
that although designed originally for SAT, Walksat is also ef(cid:173)
fective on Max-SAT, even though its effectiveness degrades as 
the problem becomes more constrained. 
References 
[1] K. D. Boese. Models for Iterative Global Optimization. PhD 

thesis, UCLA/Computer Science Department, 1996. 

1184 

[10]  Y. Jiang, H. Kautz, and B. Selman.  Solving problems with hard 
and  soft constraints  using a stochstic algorithm  for MAX-SAT. 
In Proc.  1st Workshop on Al and OR, Timberinc, OR,  1995. 

I l l]  D. McAllester, B. Selman, and H. Kautz. Evidence for invariants 

in local search.  In Proc. AAAI-97, pages 321-326,  1997. 

[12]  D. Mitchell, B. Selman, and H. Levesquc. Hard and easy distri(cid:173)

butions of SAT problems.  In Proc.  AAAI-92,  1992. 

[13]  R.  Monasson,  R.  Zecchina,  S.  Kirkpatrick,  B.  Selman,  and 
L.  Troyansky.  Determining  computational  complexity  from 
characteristic 'phase transitions'.  Nature, 400:133-137,  1999. 
[14]  D. J. Patterson and H. Kautz.  Auto-Walksat:  A self-tuning im(cid:173)
plementation  of Walksat.  Electronic  Notes  in  Discrete  Mathe(cid:173)
matics, 9, 2001. 

[15]  J.  C.  Pemberton  and  W.  Zhang.  Epsilon-transformation:  Ex(cid:173)
ploiting  phase  transitions  to  solve  combinatorial  optimization 
problems.  Artificial Intelligence,  81:297  325,  1996. 

[16]  B.  Selman, H. Kautz, and B.  Cohen.  Noise strategies for local 

search.  In Proc.  AAAI-94. 

[17]  J. Slaney and T. Walsh.  Backbones in optimization and approx(cid:173)

imation.  In Proc. IJCAI-01, 2001. 

[18]  O. Telelis and P.  Stamatopoulos.  Heuristic backbone sampling 
for maximum  satisfiability.  In  Proc.  2nd Hellenic  Conf.  on AI, 
pages 129-139, 2002. 

[19]  W. Zhang.  Phase transitions and backbones of 3-SAT and Max(cid:173)
In  Proc.  7th  Intern.  Conf.  on  Principles  and 
imum  3-SAT. 
Practice  of  Constraint  Programming  (CP-200I),  pages  153-
167,2001. 

SATISFIABILITY 

