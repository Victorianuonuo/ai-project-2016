Quantiﬁed Coalition Logic

Thomas ˚Agotnes

Faculty of Engineering

Bergen University College, Norway

tag@hib.no

Wiebe van der Hoek

Michael Wooldridge

Computer Science Department
The University of Liverpool, UK
{wiebe,mjw}@csc.liv.ac.uk

Abstract

We add a limited but useful form of quantiﬁcation
to Coalition Logic, a popular formalism for rea-
soning about cooperation in game-like multi-agent
systems. The basic constructs of Quantiﬁed Coali-
tion Logic (QCL) allow us to express properties as
“there exists a coalition C satisfying property P
such that C can achieve ϕ”. We give an axioma-
tization of QCL, and show that while it is no more
expressive than Coalition Logic, it is exponentially
more succinct. The time complexity of QCL model
checking for symbolic and explicit state represen-
tations is shown to be no worse than that of Coali-
tion Logic. We illustrate the formalism by show-
ing how to succinctly specify such social choice
mechanisms as majority voting, which in Coalition
Logic require speciﬁcations that are exponentially
long in the number of agents.

1 Introduction

Game theoretic models of cooperation has proved to be
a valuable source of techniques and insights for the ﬁeld
of multi-agent systems, and cooperation logics such as
Alternating-time Temporal Logic (ATL) [Alur et al., 2002]
and Coalition Logic (CL) [Pauly, 2001] have proved to be
powerful and intuitive knowledge representation formalisms
for such games. Many important properties of cooperative
scenarios require quantiﬁcation over coalitions. However,
existing cooperation logics provide no direct facility for such
quantiﬁcation, and expressing such properties therefore re-
quires formulae that are exponentially long in the number of
agents. Examples include expressing the notion of a weak
veto player [Wooldridge and Dunne, 2004] in CL, or solu-
tion concepts from cooperative game theory such as non-
emptyness of the core in Coalitional Game Logic [ ˚Agotnes
et al., 2006]. An obvious solution would be to extend, for ex-
ample, ATL, with a ﬁrst-order-style apparatus for quantifying
over coalitions. In such a quantiﬁed ATL, one might express
the fact that agent i is a necessary component of every coali-
tion able to achieve ϕ by the following formula:

∀C : (cid:3)(cid:3)C (cid:4)(cid:4)♦ϕ → (i ∈ C )

However, adding quantiﬁcation in such a naive way leads to
undecidability over inﬁnite domains (using basic quantiﬁca-
tional set theory we can deﬁne arithmetic), and very high
computational complexity even over ﬁnite domains. The
question therefore arises whether we can add quantiﬁcation
to cooperation logics in such a way that we can express use-
ful properties of cooperation in games without making the re-
sulting logic too computationally complex to be of practical
interest. Here, we answer this question in the afﬁrmative.

We introduce Quantiﬁed Coalition Logic (QCL), by mod-
ifying the existing cooperation modalities of CL in order to
enable quantiﬁcation. In CL, the basic cooperation constructs
are (cid:3)C (cid:4)ϕ, meaning that coalition C can achieve ϕ1; these op-
erators are in fact modal operators with a neighbourhood se-
mantics. In QCL, we replace these operators with expressions
(cid:3)P (cid:4)ϕ and [P ]ϕ; here, P is a predicate over coalitions, and
the two sentences express the fact that there exists a coalition
C satisfying property P such that C can achieve ϕ and all
coalitions satisfying property P can achieve ϕ, respectively.
Thus we add a limited form of quantiﬁcation to CL without
the apparatus of quantiﬁcational set theory. We show that the
resulting logic, QCL, is exponentially more succinct than CL,
while being computationally no worse with respect to the key
problem of model checking.

The remainder of the paper is structured as follows. After
a brief review of CL, we introduce a language for expressing
coalition predicates, and show that the satisﬁability problem
for this language is NP-complete. We then introduce QCL, and
give its complete axiomatization. We show that while QCL is
no more expressive than Coalition Logic, it is nevertheless
exponentially more succinct, in a precise formal sense. We
then extend the language of coalition predicates to talk about
the cardinality of coalitions, and show that the corresponding
completeness and succinctness results also hold for QCL over
this extended language. We illustrate QCL by showing how
it can be used to succinctly specify a social choice mecha-
nism, which in CL requires speciﬁcations that are exponen-
tially long in the number of agents; we then round off with
some conclusions.

1We adopt a notation which is in line with that in ATL: we use
(cid:2)C (cid:3) for ‘there is a coalition C such that . . . ’ where [Pauly, 2001]
uses [C ], and we write [C ] for Pauly’s (cid:2)C (cid:3).

IJCAI-07

1181

2 Coalition Logic
Since QCL is based on Pauly’s Coalition Logic CL [Pauly,
2001], we ﬁrst brieﬂy introduce the latter. CL is a proposi-
tional modal logic, containing an indexed collection of unary
modal operators (cid:3)C (cid:4) and [C ], where C is a coalition, i.e., a
subset of a given set of agents Ag. The intended interpreta-
tion of (cid:3)C (cid:4)ϕ is that C can achieve ϕ, or, that C is effective
for ϕ. Formulae of CL are deﬁned by the following grammar
(with respect to a set Φ0 of Boolean variables, and a ﬁxed set
Ag of agents):

ϕ ::= (cid:8) | p | ¬ϕ | ϕ ∨ ϕ | (cid:3)C (cid:4)ϕ

where p ∈ Φ0 is an atomic proposition and C a subset of Ag.
As usual, we use parentheses to disambiguate formulae where
necessary, and deﬁne the remaining connectives of classical
logic as abbreviations: ⊥ ≡ ¬(cid:8), ϕ → ψ ≡ (¬ϕ) ∨ ψ and
ϕ ↔ ψ ≡ (ϕ → ψ) ∧ (ψ → ϕ).

A model M for (over Φ0, Ag) is a triple M = (cid:3)S , E, π(cid:4)

where

• S = {s1, . . . , so} is a ﬁnite non-empty set of states;
• E : 2Ag × S → 22S

is an effectivity function, where
T ∈ E(C , s) is intended to mean that from state s, the
coalition C can cooperate to ensure that the next state
will be a member of T ; and

• π : S → 2Φ0 is a valuation function.

Call the set of all models general models, denoted by Gen.
It is possible to deﬁne a number of constraints on effectivity
functions, depending upon exactly which kinds of scenario
they are intended to model [Pauly, 2001, pp.24–39]. Unless
stated otherwise, we will assume that our models M are weak
playability models M ∈ WP, where effectivity functions are
outcome monotonic, i.e., ∀C ⊆ Ag, ∀s ∈ S , ∀X , Y ⊆ S , if
X ∈ E(C , s) and X ⊆ Y , then Y ∈ E(C , s), and moreover
that effectivity functions satisfy Pauly’s weak playability con-
ditions [Pauly, 2001, p.30]. An interpretation for CL is a pair
M, s where M is a model and s is a state in M. The satisfac-
tion relation “|=CL” for CL holds between interpretations and
formulae of CL. We say that coalition C can enforce ϕ in s if
for some T ∈ E(C , s), ϕ is true in all t ∈ T . That is, C can
make a choice such that, irrespective of the others’ choices,
ϕ will hold. Formally, the satisfaction relation is deﬁned by
the following inductive rule (we assume the cases for p, (cid:8),
negation and disjunction are clear):

M, s |=CL (cid:3)C (cid:4)ϕ iff ∃T ∈ E(C , s) such that ∀t ∈ T ,
we have M, t |=CL ϕ.

The notions of truth of ϕ in a model (M |=CL ϕ) and validity
in a class of models C (C |=CL ϕ) are deﬁned as usual. The
inference relation (cid:16)CL for CL is given in table 1 (taken from
[Pauly, 2001], but adapted to our notation): it is sound and
complete with respect to the class of weak playability models
WP ([Pauly, 2001, p. 55]).

3 Quantiﬁed Coalition Logic
If we have n agents in Ag, and one wants to express that some
coalition can enforce some atomic property p, one needs to

(cid:16)CL ψ

Prop
Ag⊥ (cid:16)CL ¬(cid:3)Ag(cid:4)⊥
(cid:8)
⊥
Ag
S

(cid:16)CL ¬(cid:3)∅(cid:4)⊥ → (cid:3)C (cid:4)(cid:8)
(cid:2)(cid:4)⊥
(cid:16)CL (cid:3)C (cid:4)⊥ → (cid:3)C
(cid:16)CL ¬(cid:3)∅(cid:4)¬ϕ → (cid:3)Ag(cid:4)ϕ
(cid:16)CL ((cid:3)C1(cid:4)ϕ1 ∧ (cid:3)C2(cid:4)ϕ2) → (cid:3)C1 ∪ C2(cid:4)(ϕ1 ∧ ϕ2)
(cid:16)CL ϕ → ψ, (cid:16)CL ϕ ⇒ (cid:16)CL ψ
(cid:16)CL ϕ → ψ ⇒ (cid:16)CL (cid:3)C (cid:4)ϕ → (cid:3)C (cid:4)ψ

MP
Distr

Table 1: Axioms and Rules for Coalition Logic. In (Prop), ψ
(cid:2) ⊆
is a propositional tautology, in axiom (⊥), we require C
C , and for (S ), C1 ∩ C2 = ∅.

enumerate 2n disjunctions of the form (cid:3)C (cid:4)p. The idea be-
hind Quantiﬁed Coalition Logic (QCL) is to avoid this blow-
up in the length of formulas. Informally, QCL is a proposi-
tional modal logic, containing an indexed collection of unary
modal operators (cid:3)P (cid:4)ϕ and [P ]ϕ. The intended interpretation
of (cid:3)P (cid:4)ϕ is that there exists a set of agents C , satisfying pred-
icate P , such that C can achieve ϕ. We refer to expressions
P as coalition predicates, and we now deﬁne a language for
coalition predicates; QCL will then be parameterised with re-
spect to such a language. Of course, many coalition predicate
languages are possible, with different properties, and later we
will investigate another such language. Throughout the re-
mainder of this paper, we will assume a ﬁxed, ﬁnite set Ag of
agents.

Coalition Predicates: Syntactically, we introduce two
atomic predicates subseteq and supseteq, and derive a stock
of other predicate forms from these. Formally, the syntax of
coalition predicates is given by the following grammar:

P ::= subseteq(C ) | supseteq(C ) | ¬P | P ∨ P

where C ⊆ Ag is a set of agents. One can think of the
atomic predicates subseteq(C ) and supseteq(C ) as a stock
of 2|Ag|+1
propositions, one for each coalition, which are then
to be evaluated in a given coalition Co. The circumstances
under which a concrete coalition Co satisﬁes a coalition pred-
icate P , are speciﬁed by a satisfaction relation “|=cp ”, deﬁned
by the following four rules:

Co |=cp subseteq(C ) iff Co ⊆ C
Co |=cp supseteq(C ) iff Co ⊇ C
Co |=cp ¬P iff not Co |=cp P
Co |=cp P1 ∨ P2 iff Co |=cp P1 or Co |=cp P2

Now we can be precise about what it means that “a coalition
Co satisﬁes P ”: it just means Co |=cp P . We will assume
the conventional deﬁnitions of implication (→), biconditional
(↔), and conjunction (∧) in terms of ¬ and ∨.

Coalitional predicates subseteq(·) and supseteq(·) are
in fact not independent. They are mutually deﬁnable –
due to the fact that the set of all agents Ag is assumed
to be ﬁnite. We then have that ([ ˚Agotnes and Wal-
¬supseteq({i}) and
icki, 2006]) subseteq(C ) ≡
(cid:2)). The reason
supseteq(C ) ≡

C (cid:2)⊆Ag ,C (cid:5)⊆C (cid:2) ¬subseteq(C

(cid:2)

(cid:2)

i∈Ag\C

IJCAI-07

1182

that we include both types of predicates as primitives is a
main motivating factor of this paper: we are interested in suc-
cinctly expressing quantiﬁcation in coalition logic.

We ﬁnd it convenient to make use of the following derived

predicates:

eq(C ) ≡ subseteq(C ) ∧ supseteq(C )

subset(C ) ≡ subseteq(C ) ∧ ¬eq(C )
supset (C ) ≡ supseteq(C ) ∧ ¬eq(C )

incl (i) ≡ supseteq({i})
excl (i) ≡ ¬incl (i)

(cid:3)

any ≡ supseteq(∅)
i∈C incl (i)

nei(C ) ≡
ei(C ) ≡ ¬nei(C )

The reader may note an obvious omission here: we have not
introduced any explicit way of talking about the cardinality
of coalitions; such predicates will be discussed in Section 4.
We say that a coalition predicate P is Ag-consistent if for
some Co ⊆ Ag, we have Co |=cp P , and P is Ag-valid if
Co |=cp P for all Co ⊆ Ag.

The model checking problem for coalition predicates is the
problem of checking whether, for given Co and P , we have
Co |=cp P [Clarke et al., 2000]. It is easy to see that this
problem is decidable in polynomial time. The satisﬁability
problem for coalition predicates is the problem of deciding
whether P is consistent. We get the following.

Theorem 1 The satisﬁability problem for coalition predi-
cates is NP-complete.

Quantiﬁed Coalition Logic: We now present QCL. Its for-
mulae are deﬁned by the following grammar:

ϕ ::= (cid:8) | p | ¬ϕ | ϕ ∨ ϕ | (cid:3)P (cid:4)ϕ | [P ]ϕ

Models for CL and QCL are the same. The satisfaction relation
for the new operators is as follows.

M, s |=QCL (cid:3)P (cid:4)ϕ iff ∃C ⊆ Ag: C |=cp P and ∃T ∈
E(C , s) such that ∀t ∈ T , we have M, t |=QCL ϕ.
M, s |=QCL [P ]ϕ iff ∀C ⊆ Ag: C |=cp P implies
∃T ∈ E(C , s) such that ∀t ∈ T , M, t |=QCL ϕ.

Readers familiar with modal logic may wonder why we did
not introduce the universal coalition modality [P ]ϕ as the
dual ¬(cid:3)P (cid:4)¬ϕ. In fact such a deﬁnition would not serve the
desired purpose. Consider the pattern of quantiﬁers in the
semantics of (cid:3)·(cid:4): ∃∃∀. Taking the dual ¬(cid:3)·(cid:4)¬ would yield
the quantiﬁers ∀∃∃, rather than the desired ∀∃∀ pattern. Of
course, this does not mean that [P ]ϕ is not deﬁnable from
(cid:3)P (cid:4)ϕ (and the propositional connectives) in some other way.
In fact:

(cid:4)

[P ]ϕ ≡

(cid:3)eq(C )(cid:4)ϕ

{C |C |=pc P }

Thus, for expressiveness, (cid:3)C (cid:4) together with the proposition-
als are adequate connectives, and [P ]ϕ is deﬁnable. The rea-
son we introduce the box cooperation modality as a separate
construct is one of the main motivations in this paper, as dis-
cussed before for the different predicate operators: succinct-
ness of expression.

Example QCL Expressions: To get a ﬂavour of the kind
of properties we can express in QCL, we present some exam-
ple QCL formulae. First, note that the conventional CL/ATL
ability expression is deﬁned simply as: (cid:3)C (cid:4)ϕ ≡ (cid:3)eq(C )(cid:4)ϕ.
We can also succinctly express properties such as the solution
concepts from Qualitative Coalitional Games [Wooldridge
and Dunne, 2004]. For example, a weak veto player for ϕ
is an agent that must be present in any coalition that has the
ability to bring about ϕ: WVETO (C , ϕ) ≡ ¬(cid:3)excl (i)(cid:4)ϕ.
Of course, if no coalition has the ability to achieve ϕ, then
this means that every agent is a veto player for ϕ. A strong
veto player for ϕ is thus an agent that is both a weak veto
player for ϕ and that is a member of some coalition that can
achieve ϕ: VETO (i, ϕ) ≡ WVETO (i, ϕ) ∧ (cid:3)incl (i)(cid:4)ϕ.
A coalition C is weakly minimal for ϕ if no subset of C can
achieve ϕ: WMIN (C , ϕ) ≡ ¬(cid:3)subset(C )(cid:4)ϕ. And C are
simply minimal if they are weakly minimal and also able to
bring about ϕ: MIN (C , ϕ) ≡ (cid:3)C (cid:4)ϕ ∧ WMIN (C , ϕ). Fi-
nally, GC (C ) says that C is the grand coalition: GC (C ) ≡
[supset (C )]⊥.

Model Checking: Model checking is currently regarded as
perhaps the most important computational problem associ-
ated with any temporal/modal logic, as model checking ap-
proaches for such logics have had a substantial degree of suc-
cess in industry [Clarke et al., 2000]. The explicit state model
checking problem for QCL is as follows:

Given a model M, state s in M, and formula ϕ of
QCL, is it the case that M, s |=QCL ϕ?

Notice that in this version of the problem, we assume that
the components of the model M are explicitly enumerated
in the input. It is known that the corresponding problem for
Coalition Logic may be solved in polynomial time O (|M| ·
|ϕ|) [Pauly, 2001, p.50] (as may the explicit state ATL model
checking problem [Alur et al., 2002]). Perhaps surprisingly,
the QCL model checking problem is no worse:

Theorem 2 The explicit state model checking problem for
QCL may be solved in polynomial time.

Of course, this result is not terribly useful, since it assumes
a representation of M that is not feasible, since it is expo-
nentially large in the number of agents and Boolean vari-
ables in the system. Implemented model checkers use suc-
cinct languages for deﬁning models; for example, the REAC-
TIVE MODULES LANGUAGE (RML) of Alur et al [Alur and
Henzinger, 1999]. Assuming an RML representation, Coali-
tion Logic model checking is PSPACE-complete [Hoek et al.,
2006], and thus no easier than theorem proving in the same
logic [Pauly, 2001, p.60]. It is therefore more meaningful to
ask what the model checking complexity of QCL is for such
a representation. We only give a very brief summary of RML
– space restrictions prevent a complete description; see [Alur
and Henzinger, 1999; Hoek et al., 2006] for details.

In REACTIVE MODULES, a system is speciﬁed as a col-
lection of modules, which correspond to agents. Here is a
(somewhat simpliﬁed) example of an RML module:

IJCAI-07

1183

init

update

module toggle controls x

(cid:2) := (cid:8)
(cid:2) := ⊥
(cid:2) := ⊥

[](cid:8) ; x
[](cid:8) ; x
[]x ; x
[](¬x ) ; x

(cid:2) := (cid:8)

This agent toggle, controls a single Boolean variable, x . The
choices available to the agent at any given time are deﬁned
by the init and update rules. The init rules deﬁne the
choices available to the agent with respect to the initialisation
of its variables, while the update rules deﬁne the agent’s
choices subsequently. The init rules deﬁne two choices for
the initialisation of this variable: assign it the value (cid:8) or the
value ⊥. Both of these rules can ﬁre initially, as their condi-
tions ((cid:8)) are always satisﬁed; in fact, only one of the avail-
able rules will ever actually ﬁre, corresponding to the “choice
made” by the agent on that decision round. With respect to
update rules, the ﬁrst rule says that if x has the value (cid:8),
then the corresponding choice is to assign it the value ⊥,
while the second rule ‘does the opposite’. In other words,
the agent non-deterministically chooses a value for x initially,
and then on subsequent rounds toggles this value.

The following can be proved by an adaption and extension

of the proof in [Hoek et al., 2006].

Theorem 3 The model checking problem for QCL assuming
an RML representation for models is PSPACE-complete.

This result, we believe, is potentially much more interesting
than that for explicit state model checking, since it tells us
that QCL model checking is no more complex than Coalition
Logic even for a realistic representation of models.

Expressive Power: We now argue that QCL is equivalent in
expressive power to Coalition Logic. To begin, consider the
following translation τ from QCL formulae to CL formulae.
For atoms p and (cid:8), τ is the identity, and it distributes over
disjunction, and moreover:

(cid:3)
(cid:2)

τ ((cid:3)P (cid:4)ϕ) =
τ ([P ]ϕ) =

{C |C |=pc P }(cid:3)C (cid:4)τ (ϕ)
{C |C |=pc P }(cid:3)C (cid:4)τ (ϕ)

We already know from above that we have a translation
in the other direction: let us call it δ, with deﬁning clause
δ((cid:3)C (cid:4)ϕ) = (cid:3)eq(C )(cid:4)δ(ϕ).

As an example, suppose Ag = {a, b, c} and let P =
(supset ({a})∨supset ({b})∨supset ({c}))∧¬eq({a, b, c}).
Now, consider the QCL formula ψ = (cid:3)P (cid:4)q.
Then
τ (ψ) = (cid:3){a, b}(cid:4)q ∨ (cid:3){a, c}(cid:4)q ∨ (cid:3){b, c}(cid:4)q while δ(τ (ψ)) =
(cid:3)eq({a, b})(cid:4)q ∨ (cid:3)eq({a, c})(cid:4)q ∨ (cid:3)eq({b, c})(cid:4)q. Hence, one
can think of δ(τ (ϕ)) as a normal form for ϕ, where the only
coalition predicate in ϕ is eq. That QCL and CL have equal ex-
pressive power follows from the fact that the two translations
preserve truth.
Theorem 4 Let M be a model, and s a state, and let ϕ be a
QCL formula, and ψ a CL formula. Then:
1. M, s |=QCL ϕ iff M, s |=CL τ (ϕ)
2. M, s |=CL ψ iff M, s |=QCL δ(ψ)

P 0
P 1

P 2
P 3

P 4
Prop
MP
δAx
δ(cid:3)(cid:4)

δ[]

δR

(cid:2))

(cid:2))

(cid:2))

(cid:16)cp supseteq(∅)
(cid:16)cp supseteq(C ) ∧ supseteq(C
↔ supseteq(C ∪ C
(cid:16)cp supseteq(C ) → ¬subseteq(C
(cid:16)cp subseteq(C ∪ {a}) ∧ ¬supseteq(a)
→ subseteq(C )
(cid:16)cp subseteq(C ) → subseteq(C
(cid:16)cp ψ
(cid:16)cp ϕ → ψ, (cid:16)cp ϕ ⇒ (cid:16)cp ψ
(cid:16)QCL δ(Ax )
(cid:3)
(cid:16)QCL (cid:3)P (cid:4)ϕ ↔

(cid:2))

{C |C (cid:6)cp P }(cid:3)eq(C )(cid:4)ϕ

(cid:2)
(cid:16)QCL [P ]ϕ ↔

{C |C (cid:6)cp P }(cid:3)eq(C )(cid:4)ϕ

δ(R)

Table 2: Axioms and Rules for Quantiﬁed Coalition Logic.
The condition of P 2 is C (cid:22)⊆ C
, ψ
in Prop is a propositional tautology; Ax in δAx is any CL-
axiom, R in δR is any CL-rule

, for P 4 it is C ⊆ C

(cid:2)

(cid:2)

Axiomatization: The translations introduced above pro-
vide the key to a complete axiomatization of QCL. First, recall
Pauly’s axiomatization of Coalition Logic (Table 1). Given
this, and the translations deﬁned previously, we obtain an ax-
iom system for QCL-formulae as follows. First, QCL includes
the δ translation of all the CL axioms and rules, and axioms
that state that the δ-translation is correct: see the lower part of
Table 2. On top of that, QCL is parametrised by an inference
relation (cid:16)cp for coalition predicates. The axioms for this in
Table 2 are taken from [ ˚Agotnes and Walicki, 2006].

Theorem 5

1. ([ ˚Agotnes and Walicki, 2006]) (cid:16)cp is sound and com-

plete: for any P , |=cp P

⇔ (cid:16)cp P

2. For any CL formula ϕ, (cid:16)CL ϕ
⇒ (cid:16)QCL δ(ϕ)
3. Let ϕ be any QCL formula. Then (cid:16)QCL ϕ ↔ δ(τ (ϕ))

and, in particular, (cid:16)QCL ϕ iff (cid:16)QCL δ(τ (ϕ)).

Theorem 6 (Completeness and Soundness) Let ϕ be an ar-
bitrary QCL-formula. Then: (cid:16)QCL ϕ iff
Examples of derivable properties include:

|=QCL ϕ

|=QCL [P1]ϕ → [P2]ϕ
|=QCL ([P1]ϕ ∧ [P2]ϕ) → [P1 ∨ P2]ϕ

when |=cp P1 → P2

These illustrate that we not only have primitive modal oper-
ators, but also some kind of operations over them, like nega-
tion and conjunction. This of course is very reminiscent of
Boolean modal logic, where one studies algebraic operations
like complement, meet and join on modal operators [Gargov
and Passy, 1987]. We will not pursue the details of the con-
nection here.

Succinctness: Theorem 4 tells us that the gain of QCL over
CL is not its expressivity. Rather, the advantage of QCL is
in its succinctness of representation. For example, for the
QCL formula (cid:3)any(cid:4)q, the translated CL formula τ ((cid:3)any(cid:4)q) is

IJCAI-07

1184

exponentially longer, since it has to explicitly enumerate all
coalitions in Ag. Is it however generally the case that τ (ϕ)
is shorter than ϕ? Since the translation does some computa-
tions under |=cp , this is in general not the case. For instance,
if P = supseteq({a}) ∧ supseteq({c}) ∧ supseteq({b}) ∧
(subseteq({a, b, c}) ∨ subseteq({a, b, d })), then ψ = (cid:3)P (cid:4)q
would have as a τ -translation (cid:3){a, b, c}(cid:4)q, which is shorter
than the original QCL-formula ψ. But then again, δ(τ (ψ))
is a QCL formula that is equivalent to ψ, but that has a size
similar to τ (ψ).

To make this all precise, let us deﬁne the length (cid:7)(ϕ) of

both QCL and CL formulas ϕ, as follows:

(cid:7)((cid:8)) = (cid:7)(p)
(cid:7)(ϕ1 ∨ ϕ2)
(cid:7)(¬ϕ)
(cid:7)((cid:3)P (cid:4)ϕ) = (cid:7)[P ]ϕ) = prsize(P ) + (cid:7)(ϕ)
(cid:7)((cid:3)C (cid:4)ϕ)

= 1
= (cid:7)(ϕ1) + (cid:7)(ϕ2) + 1
= (cid:7)(ϕ) + 1

= coalsize(C ) + (cid:7)(ϕ)

with
prsize(subseteq(C )) = coalsize(C ) + 1
prsize(supseteq(C )) = coalsize(C ) + 1
prsize(¬P )
prsize(P1 ∨ P2)
coalsize(C )

= prsize(P ) + 1
= prsize(P1) + prsize(P2) + 1
= | C |

Let ϕ and ψ be X and Y formulas, respectively, where
X and Y both range over CL and QCL. Then we say that
they are equivalent with respect to some class of models if
they have the same satisfying pairs M, s, that is, for each
M, s in the class of models it is the case that M, s |=X ϕ
iff M, s |=Y ψ. This deﬁnition naturally extends to sets of
formulas.

In the following theorem we show that QCL is exponen-
tially more succinct than CL, over general models. This no-
tion of relative succinctness is taken from [Lutz, 2006], who
demonstrates that public announcement logis is more succinct
than epistemic logic.

Theorem 7
There is an inﬁnite sequence of distinct QCL formulas
ϕ0, ϕ1, . . . such that, not only is the CL formula τ (ϕi ) equiv-
alent to ϕi for every i ≥ 0, but every CL formula ψi that
is equivalent, with respect to general models, to ϕi has the
property (cid:7)(ψi ) ≥ 2|ϕi |

.

4 Coalition Size

As we noted earlier, an obvious omission from our language
of coalition predicates is designated predicates for expressing
cardinality properties of coalitions.
In this section, we ex-
plore extensions to the framework for this purpose. The ob-
vious approach is to introduce primitive coalition predicates
geq(n), where n ∈ N, with semantics as follows:

C |= geq(n) iff |C | ≥ n

Given this predicate, we can deﬁne several obvious derived
predicates (see also [ ˚Agotnes and Alechina, 2006] for a dis-
cussion of a similar language).

gt (n) ≡ geq(n + 1)
lt (n) ≡ ¬geq(n)
leq(n) ≡ lt (n + 1)
maj (n) ≡ geq((cid:25)(n + 1)/2(cid:26))
ceq(n) ≡ (geq(n) ∧ leq(n))

The ﬁrst natural question is whether geq(n) is deﬁnable in
QCL. Indeed it is:

(cid:5)

geq(n) ≡

supseteq(C )

(1)

C ⊆Ag ,|C |≥n

However, we again see that such a deﬁnition leads to expo-
nentially large formulae, which justiﬁes extending the pred-
icate language of QCL with an atomic coalition predicate
geq(n) for every n ∈ N. Call the resulting logic QCL(≥),
and let |=cp≥ and |=
QCL(≥) denote the satisﬁability rela-
tions for QCL(≥) predicates and QCL(≥) formulae, respec-
tively. Once again, the gain is not expressiveness but suc-
cinctness. As another example of the added succinctness,
consider the CL formula (cid:3)C (cid:4)p. In QCL this cannot in general
be written by any less complex formula than (cid:3)subseteq(C ) ∧
supseteq(C )(cid:4)p, but in QCL(≥) it can be simpliﬁed somewhat
to (cid:3)supseteq(C ) ∧ ¬geq(|C | + 1)(cid:4)p (which in general is sim-
pler since one of the enumerations of the agents in C is re-
placed by a number).

A subtle but important issue when reasoning with the logic
is the way in which the natural number argument of the
geq(. . .) predicate is represented. Suppose, (following stan-
dard practice in complexity theory), that we represent the
argument in binary. Now, we ask whether a given coali-
tion predicate P is satisﬁable, where P contains a constraint
geq(n). Now checking the satisﬁability of such constraints
is not obviously in NP. The problem is that the witness C
to the satisﬁability of P is exponentially larger than the con-
straint geq(n). Of course, if we express the natural number
n in unary, then this is not an issue. But unary is not a realis-
tic or practical representation for numbers. It turns out, how-
ever, that we do in fact get NP completeness for the satisﬁabil-
ity problem also for QCL(≥), although the argument requires
some more work. The reason is that we can use an efﬁcient
encoding of the witness C . This was shown by [ ˚Agotnes and
Alechina, 2006] for a similar problem (cf. Section 5).

Let Ag(P ) and subp(P ) denote the set of agents, and the
set of sub-predicates, respectively, occurring in a predicate P .
Lemma 1 Any satisﬁable QCL(≥) predicate P is satisﬁed by
a coalition consisting of no more than 1 + maxP agents,
where 1 + maxP equals

max ({|Ag(P )|, max ({geq(n) : geq(n) ∈ subp(P )})})

Theorem 8 The satisﬁability problem for QCL(≥) coalition
predicates is NP-complete.

It is straightforward to lift the translation τ from QCL to
CL to the case when also the additional predicates of QCL(≥)
are allowed, and it is easy to see that Theorem 4 holds also
for QCL(≥) formulae. For axiomatisation, we only need to
add axioms for the geq(n) predicates to the predicate calclu-
lus. That can be achieved simply by adding (1) as an axiom

IJCAI-07

1185

(MIN 0) (cid:16)cp geq(0)
(MIN 1) (cid:16)cp geq(n) → geq(m) (m < n)
(MIN 2) (cid:16)cp supseteq({a1}) ∧ · · · ∧ supseteq({ak })

→ geq(k ) ∀i (cid:22)= j ai (cid:22)= aj

Table 3: Extra predicate calculus axioms for QCL(≥).

schema. A more “direct” axiomatisation of geq(n) is shown
in Table 3, taken from [ ˚Agotnes and Alechina, 2006]. Let
(cid:16)cp≥ denote derivability in the QCL predicate calculus (from
Table 2) extended with the axioms in Table 3. The follow-
ing is easily obtained from a similar result in [ ˚Agotnes and
Alechina, 2006]:
Lemma 2 The QCL(≥) predicate calculus is sound and com-
⇔
plete:
(cid:16)cp≥ P
Let (cid:16)
QCL(≥) denote derivability in the system obtained by
replacing (cid:16)cp with (cid:16)cp≥ in the deﬁnition of (cid:16)QCL (Table 2).
Theorem 9 (Completeness and Soundness) Let ϕ be a
QCL(≥)-formula. Then: (cid:16)

for any QCL(≥) predicate P ,

|=cp≥ P

QCL(≥) ϕ iff

|=

QCL(≥) ϕ

To illustrate the use of QCL(C) for reasoning about multi-

agent systems, consider the expression of majority voting:

An electorate of n voters wishes to select one of
two outcomes ω1 and ω2. They want to use a sim-
ple majority voting protocol, so that outcome ωi
will be selected iff a majority of the n voters state
a preference for it. No coalition of less than ma-
jority size should be able to select an outcome, and
any majority should be able to choose the outcome
(i.e., the selection procedure is not inﬂuenced by
the “names” of the agents in a coalition). One out-
come must be selected, but both outcomes should
not be selected simultaneously.

We express these requirements as follows. First: any majority
should be able to select an outcome.

([maj (n)]ω1) ∧ ([maj (n)]ω2)

No coalition that is not a majority can select an outcome.

(¬(cid:3)¬maj (n)(cid:4)ω1) ∧ (¬(cid:3)¬maj (n)(cid:4)ω2)

Either outcome ω1 or ω2 must result.

(cid:3)any(cid:4)(ω1 ∨ ω2)

Both outcomes cannot be selected simultaneously.

(cid:3)any(cid:4)¬(ω1 ∧ ω2)

Notice that majority voting cannot be succinctly speciﬁed us-
ing regular Coalition Logic.

5 Related Work and Conclusions
Quantiﬁed Coalition Logic adds a limited but useful form of
quantiﬁcation to Coalition Logic, which is computationally
tractable. The motivation is succinctness rather than expres-
siveness: QCL is exponentially more expressive than CL.

While ﬁrst-order temporal logics have been studied in the
literature, and CL can be seen as the next-time fragment
of ATL which again is a generalisation of the branching-
time temporal logic Computational Tree Logic (CTL), we
are not aware of any other works on quantiﬁcation in CL
or ATL. Lately, there has been some work on generalis-
ing the coalition modalities in another direction: to explic-
itly include actions and strategies [van der Hoek et al., 2005;
˚Agotnes, 2006].

Opportunities for future work include a more detailed un-
derstanding of the relationship between QCL and Boolean
modal logic.

References
[ ˚Agotnes and Alechina, 2006] T. ˚Agotnes and N. Alechina.
Knowing minimum/maximum n formulae. In Proc. ECAI-
2006, 2006.

[ ˚Agotnes and Walicki, 2006] T.

˚Agotnes and M. Walicki.
Complete axiomatizations of ﬁnite syntactic epistemic
states.
In DALT III:, vol 3904 of LNCS/LNAI, pages 33
– 50. Springer, 2006.
[ ˚Agotnes et al., 2006] T.

˚Agotnes, W. van der Hoek, and
In

M. Wooldridge. On the logic of coalitional games.
Proc. AAMAS-2006, pages 153–160, 2006.

[ ˚Agotnes, 2006] T.

˚Agotnes. Action and knowledge in
alternating-time temporal logic. Synthese, 149(2):375–
407, 2006.

[Alur and Henzinger, 1999] R. Alur and T. A. Henzinger.
Reactive modules. Formal Meth. in Sys. Design, 15(11):7–
48, July 1999.

[Alur et al., 2002] R. Alur, T. A. Henzinger, and O. Kupfer-
man. Alternating-time temporal logic. JACM, 49(5):672–
713, September 2002.

[Clarke et al., 2000] E. M. Clarke, O. Grumberg, and D. A.

Peled. Model Checking. MIT Press, 2000.

[Gargov and Passy, 1987] G. Gargov and S. Passy. A note on
Boolean Modal Logic. In Mathematical Logic and Appli-
cations, pages 253–263. Plenum Press, 1987.

[Hoek et al., 2006] W. van der Hoek, A. Lomuscio, and
M. Wooldridge. On the complexity of practical ATL model
checking. In Proc. AAMAS-2006, pages 201–208, 2006.

[Lutz, 2006] C. Lutz. Complexity and succinctness of public
announcement logic. In Proc. AAMAS-2006, pages 137–
144, 2006.

[Pauly, 2001] M. Pauly. Logic for Social Software. PhD the-

sis, University of Amsterdam, 2001.

[van der Hoek et al., 2005] W. van der Hoek, W. Jamroga,
and M. Wooldridge. A logic for strategic reasoning. In
Proceedings of AAMAS-2005, pages 157–153, 2005.

[Wooldridge and Dunne, 2004] M. Wooldridge and P. E.
Dunne. On the computational complexity of qualitative
coalitional games. Artiﬁcial Intelligence, 158(1):27–73,
2004.

IJCAI-07

1186

