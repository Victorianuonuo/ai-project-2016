THE  USE  OF  A  SEMANTIC  NETWORK  IN  A  DEDUCTIVE  QUESTION-ANSWERING  SYSTEM 

James  R.  McSkimin 

Bell  Telephone  Laboratories 

Columbus,  Ohio 

43209 

Abstract 

is  described.  The  semantic  network 

The  use  of  a  semantic  network  to  aid 

in  the 
deductive  search  process  of  a  Question-Answering 
System 
based  on  an  adaptation  of  the  predicate  calculus. 
It  makes  a v a i l a b le  user-supplied,  domain-dependent 
info  m at  ion  so  as  to  permit  semantic  data  to  be 
used  during  the  search  process. 

is 

Three  ways  are  discussed 

in  which  semantic 

information  may  be  used.  These  are: 
(a)  To  apply  semantic  information  during  the 

pattern-matching  process. 

(b)  To 

apply  semantic  well-formedness  tests  to 

query  and  data 

inputs. 

(c)  To  determine  when  subproblems  are  f u l l y-

solved  ( i . e ., 
than  a  f i x e d, 
An  example 

they  have  no  solutions  other 
f i n i te  number). 
is  provided  which 

i l l u s t r a t es  the 
use  of  a  semantic  network  to  perform  each  of  the 
above 

functions. 

1. 

Introduction 

Semantic  Networks  have  been  used  p r i m a r i ly 

to  help  disam(cid:173)

in  the  deductive 

language  applications 

In  t h is  paper  we  consider  the  use 

in  natural 
biguate  sentences  and  to  understand  natural 
language  t e x t. 
of  a  semantic  network  to  aid 
search  process  of  a  Question-Answering  (QA  Sys(cid:173)
tem.  The  semantic  network  is  based  on  an  adapta(cid:173)
t i on  of  the  predicate  calculus  and 
is  described 
only  b r i e f ly  in  t h is  paper  and  more  extensively 
by  McSkimin  and  Minker  (McSkimin 
[1977]).  Terminology  from 
McSkimin  and  Minker 
the  predicate  calculus  w i ll  be  used  throughout 
the  paper. 

[19761,  and 

Three  ways  w i ll  be  discussed  in  which  seman(cid:173)

information  may  be  applied  to  help  r e s t r i ct 

t ic 
deductive  searches.  These  are: 
(1)  To  apply  semantic  information  during  the 
( u n i f i c a t i on  a l-

pattern-matching  process 
gorithin).  Most  current  pat  tern-matching  sys(cid:173)
tems  are  based  solely  on  s y n t a c t ic  t e s t s. 
Using  the  semantic  network,  semantic  con(cid:173)
s t r a i n ts  may  be  applied  during  the  p a t t e r n-
matching  process  to 
i n h i b it  data  base  asser(cid:173)
tions  and  general  axioms  t h at  are  semantical!}' 
i r r e l e v a nt 
the  deductive  search  space. 

to  the  search  from  entering  i n to 

(2J  To  apply  semantic  well-formedness  t e s ts  to 
query  and  data  base  assertions  input 
to  the 
system  so  as  to  r e j e ct  queries  t h at  have  no 
answer  because  they  v i o l a te  semantic  r e s t r i c-

.Jack  Minker 

Department  of  Computer  Science 

University  of  Maryland 

College  Park,  Maryland  20742 

Thus, 

t i o n s. 
it  should  be  possible  to  deter(cid:173)
mine  that  a  query  such  as  "Who  is  the  person 
who 
is  both  father  and  the  mother  of  a  given 
i n d i v i d u a l ?n  is  not  answerable. 

(3)  To  i d e n t i fy  those  queries  which  have  a  known 

f or  a d d i t i o n al  answers  once  the 

maximum  number  of  solutions  so  as  to  t e r m i(cid:173)
nate  searches 
known  fixed  number  is  found. 
The  semantic  network  discussed  in  t h is  paper 
is  described  b r i e f ly  in  Section  2. 
In  Section  3, 
we  describe  how  the  semantic  network  may  be  used 
to  solve  some  of  the  problems  associated  w i th  the 
above  items.  An  example  which 
use  of  the  semantic  network 
is  presented  in 
Section  4.  A  summary  of  the  work  and  future 
d i r e c t i o ns 

is  given  in  Section  5. 

i l l u s t r a t es  the 

2.  Seniantjc  Network 

Although  the  term 

'semantic  network'  has  been 

used  extensively  in  the  l i t e r a t u r e, 
universal  agreement  as  to  what  constitutes  such  a 
network.  Hence,  we  s h a ll  define  the  term  in  the 
context  of 

t h is  paper. 

is  no 

there 

The  semantic  network  to  be  described  arose 
out  of  the  need  to  provide  meaning  to  objects 
in 
a  domain  and  to  statements  made  about  these  ob(cid:173)
j e c ts  so  as  to  make  deductive  searches  more  ef(cid:173)
f i c i e n t.  Although  the  semantic  network  developed 
is  used 
bears  considerable  r e l a t i o n s h ip  to 
developed 
language  by  computers.  The  semantic  network 
developed  by  Schubert 
many  s i m i l a r i t i es  to  the  one  used  here. 

through  the  need  to  understand  natural 

in  deductive  searches, 

f or  example,  bears 

it  nevertheless 

[1976], 

those 

The  semantic  network  described  here  is  an 

adaptation  of  the  predicate  calculus  and  is  able 
to  express  q u a n t i f i c a t i o n, 
terms  and 
l o g i c al  connectives. 
upon  the  n o t a t i on  of  Fisimian  and  Minker  (Fishman 
[1973],  Fishman  and  Minker 
[1975]),  who  modified 
predicate  calculus  clause  n o t a t i on  to  handle  sets 
of  objects  t h at  have  the  same  template  s t r u c t u r e. 

The  adaptation  is  based 

functions, 

Thje  a r t i c le  by  Schubert  [1976]  discusses 

many  semantic  network  representations  used  f or 
natural  language  processing,  and  surveys  the 
l i t e r a t u re  so  that  we  neither  r e f er  to  nor  com(cid:173)
pare  our  work  on  semantic  networks  w i th  that 
achieved  by  o t h e r s. 

In  order  to  implement  the  techniques  des(cid:173)

in  the  i n t r o d u c t i o n,  domain-dependent 

cribed 
information  must  be  stored  in 
the  computer  in  a 
form  convenient  f or  use.  Coasequently,  a  major 

M a t u r al 

Lanrnj 

age-3 
50 

:  McSk  iMin 

part  of  this  research  has  concerned  the  i d e n t i f i(cid:173)
cation  of  the  types  of  semantic  information  to  be 
stored,  and  the  development  of  structures  in  which 
to  store  the  information.  To  this  end,  a  collec(cid:173)
tion  of  structures  termed  the  "semantic  network" 
has  been  developed  which  contains  a ll  information 
available  to  the  question-answering  system. 

The  semantic,  network  consists  of  four  com(cid:173)
ponents: 
(1)  the  semantic  graph  which  specifies 
the  set-theoretic  relation  between  named  subsets 
of  the  domain;  (2)  the  data  base  of  assertions 
and  inference  rules;  (37 the  semantic  form  space 
which  defines  the  semantic  constraints  placed  on 
arguments  of  relational  n-tuples;  and  (4)  the 
dictionary  which  defines  the  set  membership  for 
each  element  of  the  domain.  All  four  components 
of  the  semantic  network  are  used  by  the  techniques 
described  above  for  making  the  QA  process  more 
efficient. 
is  used  w i ll  be  given  in  the  next  section. 
(a}  The  Semantic  Graph 

Illustrations  of  how  this  information 

The  major  emphasis  of  this  effort  is  the 

investigation  of  techniques  by  which  user-supplied 
semantic  information  may  be  stored  in  a  computer 
and  used  to  make  the  deductive  inference  process 
more  efficient.  The  approach  taken  is  to  define 
explicitly  the'  contents  of  the  domain  of  discourse 
D  as  well  as  the  relationships  in which  various 
subsets  of  the  domain  may  occur. 

To  this  end,  much  of  the  work  has  involved 

the  investigation  of  how  one  might  subdivide 
the  domain  D  into  a  f i n i te  number  of  named  subsets 
Sj  such  that  a ll  elements  of  each  S^  have  some  set 
of  properties  in  common.  These  sets  are  expressed 
as  Boolean  Category  Expressions  (BCE).  Examples 
a r e: 
lawyer. 
are  examples  of  what  are  defined  to  be  the  sim(cid:173)
plest  type  of  BCE  possible  and  are  called  semantic 
categories.  A  BCE  is  any  arbitrary  combination 
of  categories  using  the  set  operations  of  union 
It  is 
(ll), 

senatord  male 
The  names  "senator",  "state"  and  "judge" 

intersection  (n)  and  complement  (-). 

-liberal, 

state, 

judge 

f] 

necessary  to  subdivide  the  domain  D  into  subsets 
since  certain  relational  statements  may  only  be 
made  about  specified  subsets  of  D,  and  one  would 
like  to  make  these  subsets  explicit  rather  than 
implicit.  This  subdivision  is  specified  by  a 
semantic  graph  Gs  which  defines  how  each  category 
C  is  subdivided  into  subsets  C1,C2,...,Cn  and  how 
each  of  the  Cj  is  similarly  defined.  Figure  1 
shows  an  example  of  such  a  graph.  Note  that  both 
animate  and 
however  animate  is  the  superset  of  robot  which  is 
disjoint 
the  superset 
of  plant  which  is  disjoint  from  animate.  Thus, 
animate 

from  Living,  and  living 

the  superset  of  animal; 

living  are 

o v e r l a p. 

living 

is 

and 

Subdividing  D  in  this  manner  and  defining 

In  particular,  it  should  be  computa(cid:173)

where  in  the  hierarchy  each  domain  element  lives 
(the  function  of  the  dictionary),  has  several  ad(cid:173)
vantages  over  expressing  set  memberships  by  unary 
relations. 
tionally  more  efficient  to  perform  t r i v i al  set 
membership  inference  using  such  a  structure  rather 
than  by  using  unary  relations.  Thus,  Sirica  Â£ 
judge  might  be  stored  in  the  dictionary  rather 
than  storing  the  unit  clause  JUDGE(Sirica) 
in  the  data  base.  The  rationale  for  this  choice 
is  given  in  McSkimin  [1976]. 
(b)  Data  Base 

Assertions  are  facts,  whereas  general  axioms 
are  used  to  infer  assertions  about  domain  elements 
that  are  otherwise  stored  implicitly  in  the  data 
base.  Both  types  are  stored  in  a  "parallel clause" 
notation,  termed  n-o  notation,  an  extension  of  the 
n-representation  of  Fishman  and  Minker.  An  exam(cid:173)
ple  of  an  assertion  in  n-o  notation  is:  ((a,x,y), 
{{  [PARENT]/a,[Ruth,Herb]/x,  lAnne,Carol,Jim]/y}}). 
The  assertion  states  that  Ruth  and  Herb  are  the 
parents  of Anne,  Carol  and  Jim.  An  example  of  a 
general  axiom  is: (^(a,x, y.)  v  (3, x, y), {{  [RES IDE]/a, 
congressperson/x,state/y,[REPRESENT]/B)3).  The 
axiom 
object  x  is  in  the  set  congressperson, 
ject  a  is  the  predicate"  RESIDE,  and  x  i 

states  that  for  all  Â«,  3,  x,  and  y,  if  the 
and  the  ob-
resides  in 

and  the  two  II-a  l i t e r a ls  would  be  prevented  from 
unifying.  Thus,  clause  (3)  would  never  be  entered 
into  the  search  space,  so  that  it  would  not  lead 
to  a  deductive  search  path,  thereby  decreasing  the 
time  and  space  used  over  that  of  a  purely  syntac(cid:173)
t ic  pattern  match. 

Semantic  unification  is  applied  during  the 

deductive  search  process. 
one  is  entering  new  facts  or  general  rules  into 
the  system,  and  when  a  query  is  entered.  These 
are  described  in  the  following  sections. 
5.2  Semantic  Well-Formedness  of  n-o  Clauses 

It  is  also  applied  when 

One  way  in  which  the  n-o  unification  algorithm 
may  be  used  is  to  perform  semantic  well-formedness 
tests  on  n-o  clauses  input  to  a  quest ion-answering 
system,  n-o  clauses  are  used  in  two  different 
ways:  both  as  assertions  and  general  axioms  to  be 
stored  in  the  data  base,  and  as  questions  posed  to 
the  system.  As  noted  previously,  the  data  base 
comprises  one  part  of  the  semantic  network.  The 
data  base  stores  facts  about  members  of  the  do(cid:173)
main  ( i . e .,  assertions)  and  provides  general 
axioms  that  are  used  to  deduce  implicit  assertions 
from  those  already  known.  Both  of  these  are 
stored  as  IT-a  clauses. 

In  particular,  semantic  forms  define  the 

The  semantic  form  space  defines  how  domain 
elements  may  interact;  that  is,  in  what  combina(cid:173)
tions  they  may  co-occur  in  n-o  clauses  of  the  sys(cid:173)
tem. 
subsets  of  the  domain  UNIV  from  which  arguments 
of  relations  must  be  chosen. 
that  a ll  data  base  clauses  conform  to  these  rules. 
If  data  base  clauses  were  stored  that  did  not  con(cid:173)
form  with  these  rules, 
incorrect  deductions  could 
be  generated. 

It  is  necessary 

it 

In  addition,  when  a  query  is  posed  to  a  QA 

is  useful  to  know  if  it 

system, 
unanswerable.  A  query  may  be  unanswerable  for 
several  reasons. 
If  a  query  makes  reference  to 
domain  elements  that,  are  unknown  to  the  system, 
then  it  is  very  unlikely  that  the  questions  about 
that  object  could  be  answered. 

is  potentially 

A  query  could  also  be  unanswerable  because  it 
violates  the  constraints  specified  by  the  semantic 
form  space.  Thus,  if  one  asked  whether  President 
Carter  voted  for  a  certain  congressional  b i l l,  the 
system  should  answer  that  the  question  was  not-
well -formed  since  only  members  of  Congress  may 
vote  for  b i l ls  and  Carter  is  not  a  member  of  Con(cid:173)
gress.  Naturally,  doing  so  requires  the  availa(cid:173)
b i l i ty  of  a  complete  semantic  network  including 
dictionary,  semantic  graph,  and  semantic  form 
space.  By  rejecting  such  a  query,  it  is  possible 
to  avoid  a  f u t i le  search  for  an  answer  which,  as(cid:173)
suming  the  data  base  is  consistent,  w i ll  never  be 
found. 

The  purpose  of  the  n-o  unification  algorithm 
is  to  detect  such  discrepancies  in  both  data  base 
clauses  and  queries.  This  is  done  by  unifying 
each  II-a  l i t e r al  L  of  an  input  clause  against  a ll 
semantic  forms  (which  are  stored  in  II-o  clause 
representation  themselves). 
the  II-a  l i t e r al  L  f a i ls  to  unify  with  any  n-o 
semantic  form  in  the  semantic  space,  then  that 
instance  of  the  n-o  l i t e r al  L  does  not  conform 

If  some  instance  of 

with  semantics  because  at  least  one  of  its  argu(cid:173)
ments  conflicts  with  the  corresponding  argument  of 
a ll  semantic  forms  for  that  n-tuple  size. 

Although  some  instances  of  the  n-o  l i t e r al  L 
might  f a il  to  unify  with  any  semantic  form,  others 
may  succeed.  What  is  desirable  therefore,  is  to 
transform  a  II-o  clause  input  to  the  system  into 
one  (or  perhaps  several)  clauses  that  are  entirely 
well-formed.  These  clauses  may  then  be  entered 
into  the  data  base  or  input  to  the  deductive 
mechanism  as  appropriate.  Those 
instances  failing 
to  unify  should  be  isolated  and  the  user  informed 
of  the  error.  The  semantic  well-formedness  a l(cid:173)
gorithm  which  does  a ll  of  these  things  is  given  by 
McSkimin. 

An  important  part  of  the  well-formedness  a l(cid:173)

gorithm  is  the  unification  of  input  l i t e r a ls 
against  the  semantic  form  space.  Each  semantic 
form  P  =  (T,<J>)  consists  of  a  template  T  of  the 
form:  (vo,Vj,...,vn)  v  S  and  a  n-o  set  <K  The 
tuple  ( v0, . . . , vn) 
is  called  the  distinguished  l i t(cid:173)
eral  of  F,  and  the  l i t e r a ls  in  S  are  called  the 
semantic  l i t e r a ls  of  P. 

Unifying  substitutions  are  also  applied  to 
the  semantic  l i t e r a ls  which  are  carried  along  dur(cid:173)
ing  the  process,  "appended  to  the  query,  during  the 
deductive  search  to  perform  further  semantic 
checks  on  a  l i t e r al  by  retrieving  or  inferring  in(cid:173)
formation  from  the  data  base  (rather  than  the 
semantic  space). 

The  tuple  V  =  ( V Q , V I , . . . , vn)  along  with  the 
substitutions  for  the  placeholder  variables  v-j  oc(cid:173)
curring  in  *  determine  what  elements  of  the  domain 
may  co-occur  in  arguments  of  an  (n+1)  tuple. 
If 
a  portion  of  an  input  l i t e r al  h  unifies  with  some 
semantic  form  F  on  l i t e r al  V,  then  that  combina(cid:173)
tion  of  predicate  and  domain  elements  is  consider(cid:173)
ed  well-formed. 
with  any  semantic  form,  then  it  is  not  well-formed 
since  it  conflicts  with  a ll  possible  ways  that 
domain  elements  may  be  combined. 

If  a  l i t e r al  L  does  not  unify 

(a,x,y) 

(3,x,y) 

An  example  of  semantic  well-formedness,  and 
how  the  semantic  form  S  is  used  w i ll  now  be  given. 
Example:  Let  F  -  ((u,x,y)  v(B,x,y)  {{[M]/a, 
female/x,  animal/yy  [EQUAL)/Â£}}) 
be  a  semantic 
form  that  determines  the  well -formedness  of  the 
"mother"  predicate. 
is  the  distinguished 
1 iteral  in  the  semantic  form.  The  semantic  l i t e r(cid:173)
al 
is  used  to  indicate  that  if  x  and  y 
are  equal  then  a  semantic  conflict  has  been  de(cid:173)
tected.  For  example,  the  following  query,  asking 
if  Mary  is  her  own  mother,  when  resolved  with  the 
semantic  form  F,  yields  the  new  clause,  ((6,x,y), 
{{IMj/a, [Mary]/x, [Mary]/y, [EQUALl/p,]}) . 
The  inferred  n-o  l i t e r al 
[Mary]/x,[Mary]/y}}), 
semantic  forms  since  it  descended  from  a  semantic 
l i t e r a l.  Thus,  a ll  l i t e r a ls  that  came  from  the 
query  have  been  successfully  unified  against  the 
semantic  form.  The  l i t e r al  that  remains  is  then 
appended  to  the  query  to  form  the  new  query: 
%(a,x,y)  v  (|3,x,y)  {{[M]/cx,  [Mary]/x,  [Mary]/y, 
[EQUAL]/3}K 

((B,x,y),{{ [F(JIAL]/3, 
is  not  unified  against  the 

Before  the  proof  mechanism  starts  to  answer 

Matural  Language-3  :  McSklmln 

53 

f or  predicate  evaliiation. 

then  they  are  evaluated. 

is  made  to  determine  if  there 

the  proof  mechanism  evaluates 
to  t r ue  and  the  e n t i re  clause  is  there(cid:173)

the  query,  a  t e st 
are  any  l i t e r a ls  e l i g i b le 
If  there  a r e, 
t h is  case, 
al 
( 3 , x , y) 
f o re  removed  from  the  search  space,  which  i n d i(cid:173)
cates  t h at 
If  the 
l i t e r a ls  appended  to  the  query  are  not  e l i g i b le 
f or  predicate  evaluation, 
other  l i t e r al  and  must  be  resolved  away 
f or  the  query  to  be  answered. 

they  are  treated  as  any 
in  order 

is  unanswerable. 

the  question 

the  l i t e r(cid:173)

Thus, 

in 

In  t h is  section  it  lias  been  shown  how  seman(cid:173)
t ic  constraints  may  be  used  to  r e j e ct  semantical!y 
inconsistent  queries  and  data  base  assertions. 
The  t h i rd  use  of  the  semantic  network  is  given 
the 
f o l l o w i ng  section. 
3.3  Semantic  Actions 

in  the  Search  Space 

in 

A  major  problem  facing  any  problem  solving 

system  is  the  growth  of  the  search  space.  when 
the  problem  to  be  solved  is  complicated, 
search  space  grows  and  u s u a l l y,  when  a  s o l u t i on  is 
not  found,  one  runs  out  of  machine  work-space 
rather  than  time.  One  can  use  knowledge  about,  the 
problem  domain  to  help  decrease  the  workspace 
needed. 
3.5.1  Representing  Counting  R e s t r i c t i o ns 

the 

A  natural  candidate 

for  decreasing  the  work(cid:173)
space  is  to  have  knowledge  concerning  predicates. 
In  p a r t i c u l a r,  one  might  refer  to  counting  p r e d i(cid:173)
cates  as  ones  in  which  there  can  be  e i t h er  a  f i x ed 
or  an  upper  bound  to  the  number  of  solutions  to 
the  problem. 
U.S.  Senate, 
one  s t a t e. 
swer  to  a  subproblem  which  concerns  senators  who 
represent  Maryland,  only  a  maximum  of  two  may  be 
found 

For  example,  when  r e f e r r i ng  to  the 
there  are  two  senators  who  represent 
Thus, 

if  one  is  searching  for  an  an(cid:173)

in  the  system. 
To  take  advantage  of  counting  predicates, 
information  must  be  represented  in  the 

counting 
semantic  network,  and  a  bookkeeping  mechanism  must 
e x i st  during  the  search  process  to  keep  track  of 
when  a  s o l u t i on  has  been  found,  and  when  a ll  pos(cid:173)
s i b le  solutions  have  been  found.  We  sketch  how 
t h is 
d e t a i l s .) 

is  accomplished  below. 

(See  McSkimin  for 

To  motivate  the  discussion,  consider  the 

following  query,  "Who  represents  the  states  of  New 
York  or  New  Jersey?".  The  query, 
in  n-o  n o t a t i on 
may  be  given  in  negated  form  as: 
f ^ ( a , x , y ), 
{{[REPRESENT^*,  [NY,NJ]/y}})  . 
Information 
of  a  general  nature  concerning  the  predicate 
REPRESENT  is  contained  in  the  semantic 
Thus, 
two  senators 
represent  every  s t a t e,  and  that  there  are  15  re(cid:173)
presentatives  f or  NJ  and  39  from  NY,  and  that  each 
senator  or  congressman  can  represent  at  most  one 
s t a t e. 

is  desired  to  denote  that 

form  space. 

it 

The  above  semantic  information  can  be  r e(cid:173)

presented  in  the  semantic  form  space  as, 
F:  C(a,x,y),{{[REPRESENT]/q>senator#l/x,state#2/y} 

{[REPRESENT]/a,  r e p # l / x, 
[NJ]#15/y] 
{[REPRESENT]/a,repfa/x,[NY]#39/y}}). 

By  the  notation  B  #m/v, 

is  meant, 

that  each  e l e-

ment  of  a  Boolean  Category  Expression  (BCE),  B, 
can  occur  in  at  most  m  d i s t i n ct  n-tuplcs  which 
u n i fy  w i th 

that  p a r t i c u l ar  s u b s t i t u t i on  set. 

The  query,  when  tested  against  a  semantic 

form  during  a  well-formedness  t e st 
is  modified  to 
r e f l e ct  the  above  p o s s i b i l i t i e s.  Thus,  Q  becomes 
Q1:(H"a>x>y)>{([REPRESEm,]/a>scnatorfl/x>[NY,NJ]#yy 

{[REPRESENT]/a,rep#I7x,  [NJl#15/yl 
{[REPRESENT]/a,rej)#l/x,  [NY|#39/y}}J. 
For  every  s u b s t i t u t i on  set  cpi  of  a  predicate 

there  is  associated  a  semantic  set  count 
the  number  of  possible  solutions 
which  represents 
that  can  be  found  r e l a t i ve  to  the  p r e d i c a t e. 
Let 
the  s u b s t i t u t i on  set  cp  be  given  by,  cp  =  { S0/ / l / v0, 
S i f t i i i / v j , . .. , Sn# mn/ vnj. 
that 

is  easy  to  see 

Then  it 

(SSC), 

n 

l 

(Card(S.)  â¢  m.)> 

is  the  c a r d i n a l i ty  of  the  set  S., 
for 

SSC  =  min 
i -1 
where  (.]ard(Sj_) 
and  m-j_  is  the  element  semantic  count.  Thus, 
cp  =  {[REPRRSBNrr]/cx,senatorftl/x, [NY,NJ]fl2/y),  SSO 
inin(iOO-l,2-2)=4,  where  Card (senator) =100.  Tliat 
i s, 
there  are  only  4  possible  solutions  -  the  two 
senators  from  each  s t a te 
s t i t u t i on  s e t. 
s t i t u t i on  sets  r e l a t i ve  to 
a l ),  one  obtains  the  t o t al  possible  s o l u t i o n s. 
a ll  solutions  are 
the  l i t e r al 
single  subproblem  associated  w i th  the  sample  query 
there  are  4+15+39=58  possible  semantic  s o l u t i o n s. 
f or  a  s u b s t i t u t i on 

the  p a r t i c u l ar  sub(cid:173)
the  SSC  over  a ll  sub(cid:173)
the  subproblem  ( l i t e r(cid:173)

If 
f or  a ll  s u b s t i t u t i on  sets, 

is  said  to  be  f u l ly  solved.  For  the 

The  syntactic  count 
is  simply  the  number  of  possible  e n t r i es 

If  one  sums 

set 
the  r e l a t i o n,  and  is  given  by 

found 

(SC) 

for 

in 

SC  = 

ff  Card(S-). 

i =l 

1 

This  number  is  always  greater  than  or  equal  to  the 
semantic  set  count,  and  generally  is  considerably 
larger. 
ample. 

In  particular  SC-200  for  the  above  ex(cid:173)

Ciiven  an  n-o  l i t e r al  in  the  search  space,  a 
target  syntactic  count  (TSC)is  specified  for  each 
substitution  set  cp/  for  each  l i t e r a l,  and  is  de(cid:173)
fined  as  TSCj  *  (Â§Cj_-SSCj) .  When  a  n-o  l i t e r al  is 
to  be  solved,  it  is  removed  from  the  clause  and 
placed  in  a  special  l i s t.  The  l i t e r al  on  the  l i st 
is  i n i t i a l ly  given  the  count,  equal  to  SC.  As 
unique  solutions  are  found  for  the  l i t e r a l,  they 
are  subtracted  out  of  the  substitution  set,  and 
the  count  of  the  l i t e r al  i n i t i a l ly  set  to  SC  is 
decremented  by  the  number  of  unique  solutions 
found.  When  the  count  for  the  l i t e r al  on  the 
l i st  equals  TSC,  then  the  l i t e r al  is  f u l ly  solved. 
it 
is  necessary  to  know,  when,  during  the  search  pro(cid:173)
cess,  a  l i t e r al  has  been  solved,  and  if  so,  wheth(cid:173)
er  the  l i t e r al  has  been  f u l ly  solved. 
In  the  en(cid:173)
vironment  of  Question-Answering  Systems,  Fishman 
[1973,1974]  has  experimental  evidence  which  i n d i(cid:173)
cates  that  linear  resolution  with  selection  func(cid:173)
t i on  (SL  resolution),  developed  by  Kowalski  and 
Kuehner  [1971],  and  independently  by  Loveland 
[1969,1970]  (who  termed  it  model  elimination),  or 
a  variant  thereof,  w i ll  be  used  for  the  inference 

To  take  advantage  of  counting  predicates, 

N a t n r al 

Ke-3:  McSkimin 
Lanrua 
5 
k 

mechanism.  SL  resolution  is  very  convenient  to 
use  since  one  knows  exactly  when  a  l i t e r al  has 
been  solved.  This  occurs  when  truncation  takes 
place.  The  bookkeeping  associated  with  SL  resolu(cid:173)
tion  permits  one  to  backup  to  the  clause  where  one 
f i r st  started  to  search  for  a  solution  to  the  l i t(cid:173)
e r a l. 
It  is  at  the  clause  where  one  f i r st  starts 
to  search  for  a  solution  to  the  l i t e r al  that  one 
wants  to  i n i t i a te  semantic  actions. 

Three  types  of  semantic  actions  may  be  taken 

when  f u l ly  solved  substitution  sets  of  a  search 
space  l i t e r al  L  = ( L ,)  are  found.  Starting  at  the 
clause  in  which  the  f u l ly  solved  substitution  set 
appears,  one  must  remove  from  the  search  space 
each  substitution  set  that  has  been  f u l ly  solved. 
This  w i ll  inhibit  any  further  clauses  from  being 
resolved  against,  the  clause. 
I f,  a ll  resolvents 
from  the  n-a  l i t e r al  have  been  found,  some  of  the 
resolvents  may  not  yet  have  been  entered  into  the 
In  this  case,  a  pointer  to  the  resol(cid:173)
workspace. 
vent  set  would  exist,  and  could  be  deleted.  The 
reason  for  inhibiting  any  additional  clauses  from 
entering  the  search  space  is  because  a ll  solutions 
have  already  been  found,  and  no  other  solutions 
are  possible.  By  bringing  in  additional  clauses, 
one  is  merely  trying  to  find  another  solution  via 
a  different  path.  The  best  that  can  result  is 
that  a  duplicate  solution  w i ll  be  found. 

if  a ll  substitution  sets  cp;  become  fully 
is 

solved,  then  the  entire  subproblem  L=(L/i>) 
fully  solved,  a ll  further  resolvents  or  potential 
resolvents  of  I  should  be  deleted.  Thus  all 
fur(cid:173)
ther  interactions  between  L  and  the  data  base  are 
avoided.  The  semantic  action  of  removing  f u l ly 
â¢solved  sets  and  subproblems  can  thus  potentially 
save  a  great  deal  in  search  effort. 

Unfortunately,  the  interactions  ( i . e .,  reso(cid:173)

lution  operations)  between  l i t e r al  L  and  data  base 
clauses  are  seldom  serial  in  nature.  Rather,  it-
is  often  the  case  that  several  interactions  may 
proceed  at  the  same  time  as  cooperating  processes 
(or  coroutines)  controlled  by  the  search  strategy. 
As  a  consequence,  even  though  some  l i t e r al  L  be(cid:173)
comes  f u l ly  solved,  there  may  be  deductions  in 
progress  for  L  that, 
if  continued  may  duplicate 
solutions  already  found.  Therefore,  ideally, 
these  processes  should  be  terminated.  Thus,  the 
second  type  of  semantic  action  taken  is  to  prune 
possible  redundant  derivation  trees  from  the 
search  space.  A  convenient  data  structure  to  fa(cid:173)
c i l i t a te  pruning  is  one  in  which  the  immediate 
resolvents  of  a  clause  are  linked  together  in  a 
l i s t,  where  each  clause  in  the  l i st  points  to  i ts 
parent  clause,  and  the  parent  clause  points  to 
the  f i r st  and  last  entries  in  the  l i st  ( i . e ., 
it  is  a  binary  tree).  Pruning  in  such  a  search 
space  data  structure  is  straightforward,  and  is 
not  discussed  further  here. 

The  third  type  of  semantic  action  concerns 

the  l i t e r a ls  of  generated  clauses  in  redundant 
derivation  trees.  As  each  clause  (T  is  generated 
by  resolution  or  factoring,  the  search  strategy 
may  select  a  l i t e r al  from  (T  to  be  resolved  against 
the  data  base.  The  l i t e r al  might  be  on  a  l i st  of 
l i t e r a ls  waiting  to  be  resolved  (for  example,  see 
Minker  et  al.[1973]),  or  in  the  process  of  being 

resolved.  Leaving  such  a  l i t e r al  there  w i ll  per(cid:173)
mit  it  to  interact  with  the  data  base, 
thus  pro(cid:173)
ducing  more  unnecessary  deductions.  Therefore, 
if 
such  a  l i st  exists,  the  selected  l i t e r a ls  from  a ll 
clauses  of  a  redundant  derivation  must  be  removed 
from  the  l i st  and  resolvents  in  process  or  that 
liave  been  found  must  be  terminated  or  deleted  as 
the  case  may  be. 

The  following  section  illustrates  how  the 

above  techniques  may  be  used  together  in  answering 
a  query. 
4.  An  Example  of  the  Use  of  Semantics  in  a  QA 

System 

The  data  base  used  in  this  example  consists 
of  assertions  and  general  rules  that  might  be  use(cid:173)
ful  in  a  p o l i t i c al  context.  Assume  there  are  many 
assertions  that  state  where  a  member  of  Congress 
1egally  resides; 
A  :  (cx,x,y),l{  [RHSlDL]/a, tBeall,Mathias,Holt,..., 

i . e ., 

Hogan,Gude]/x,[MdJ/yj, 
{ [RESIDH/cx, [Buckley,Javits,Chisholm, 
...,Abzugj/x,[NY]/y]} 

A.,: 

These  assertions  mav  be  used  to  derive  the  state 
a  member  of  Congress  represents  by  the  following 
general  rule: 
R, : 

('^(a,x,y)  v([i,x,y),  {{  [RESTDEj/u,  congress/x, 
state/y,  [REPRESENT/3)})  . 

In  addition,  there  might  be  several  axioms 
that  are  used  to  deduce  whether  a  member  of  Con(cid:173)
gress  supports  a  special  interest  group  (such  as 
organized  labor)  by  referencing  numerical  ratings 
established  by  different  lobbying  groups  (e.g., 
COPE,  the  Committee  on  Political  Education  of  the 
AFLC10).  For  instance  if  a  senator  or  represen(cid:173)
tative  lias  a  COPE  rating  of  67-100  (on  a  0-100 
scale)  then  one  may  conclude  that  he  (she)  sup(cid:173)
ports  organized  labor.  Many  of  these  rules  may  be 
stored  as  well  as  other  general  rules  that  deduce 
whether  one  supports  some  state,  country,  or 
interest  group.  These  rules  are  given  below.1 
R.,:  K(a,x,y)  v (e,x,y), {{ [COPE J / a, congress/x, 
R67100/yt  [SUPPORT]/6, 
labor/z,} 
{  [NSC]/a,congress/x, 
R67100/y9 
defense/Z}, 

[SUPPORTJ/3, 

Py 

R4:  K a , x , y)  v  (B,x,y),{{  [REPRESENT]/ex,congress/x, 
). 

[SUPPORT]/3)} 

state/y, 

The  last  rule  states  that  if  a  member  of  Congress 
represents  a  state,  then  he  or  she  would  be  ex(cid:173)
pected  to  support  that  state. 

To  derive  whether  one  would  support  a  spe-
cial-interest  group,  the  ratings  of  each  senator 
and  representative  could  be  stored  as  assertions: 
A~:((a,x,y),{{[NSC]/a,[Mathias,Cranston,..., 

Mitchell]/x,[11]/y}, 

JNote:  NSC  =  Nat.  Security  Council,  a  defense 
lobby;  NFU  =  Nat.  Farm Union;  and  LCV  =  League 
of  Conservation  Voters;  R67loo  =  A  category  con(cid:173)
taining  a ll  integers  from  67  to  100. 

Natural  LanKiia*e-3:  McSkimfn 

55 

the  semantic  set  count  is  calculated. 
case,  there  are  SOI 00-2=200  syntactic  solutions 
and  SS04  semantic  solutions.  Thus,  the  value  TSC 

In  this 

state,  resolvent  2  is 

is  stored  with  the  REPRESENT 
l i t e r al  L  and  referenced  whenever  new  solutions 
are  found.  L  is  then  modified  to  remove  those  so(cid:173)
lutions  found  so  far.  When  the  syntactic  count  of 
L  equals  TSC=196,  L  w i ll  be  f u l ly  solved.  This 
process  is  illustrated  by  the  proof  tree  of  Figure 
2  using  SL  resolution. 
3)  The  general  rule  R1  is  resolved  with 
since  no  direct  match  is  possible.  Since  senator 
c  congress  and  [Md,NY] 
formed. 
4)  The  RESIDE  l i t e r al  L  is  now  the  right-most 
(and  only)  l i t e r al  in  the  SL  resolvent,  and  is 
thus  solved  next.  The  element  set  counts  from  se(cid:173)
mantic  form  I;2  are  read,  and  the  number  of  solu(cid:173)
tions  for  L  is  calculated  as,  SSC=min(100-l,2-v)  = 
100,  where  "v"  means  an  unknown  number  of  solutions 
are  possible.  The  target  syntactic  count  is  cal(cid:173)
culated  as  TSO(l00-2)-100=100,  and  stored  with  the 
RESIDE  l i t e r a l.  Thus,  100  solutions  must  be  found 
before  the  l i t e r al  is  considered  f u l ly  solved. 
Since  it  is  semantically  impossible  for  100  sena(cid:173)
tors  to  reside  in  two  states,  this  situation  will 
never  occur.  Fortunately,  the  RESIDE  l i t e r al  w i ll 
become  indirectly  f u l ly  solved  because  i ts  ancestor 
the  REPRESENT  l i t e r al 
solved.  This  process  is  described  below. 
5)  Many  RESIDE  assertions  are  stored  in  the  data 
base;  only  those  instances  are  allowed  to  enter  the 
search  space  that  involve  senators  from  Md  or  NY  -
a ll  representatives  from  Md  and  NY  and  any  resident 
of  some  other  state  is  excluded.  Since  {Beall, 
Mathias,  Buckley,  Javits} 
only  ones  that  pass  through  the  n-o  unification 
algorithm. 
6)  Since  the  A - l i t e r al 
right-most  l i t e r al  of  clause  3, 
subproblem  lias  been  solved.  Up-links  are  followed 
u n t il  
appears  without  brackets  in  clause 
2  (denoting  the  point  at  which  the  current  deduc(cid:173)
tive  chain  began  as  indicated  by  the  dotted  lines 
of  Figure  5).  The  solutions  found  are: 

appears  as  the 
it  implies  that  a 

w i ll  be  f u l ly 

c  senator 

they  are  the 

By  the  procedure  described  in  McSkimin,  these  so(cid:173)
lutions  are  removed  from  clause  2  (whose  syntactic 
count  is  200)  leaving  a  new  clause  whose  syntactic 
count  equals  196.  Since  this  does  not  equal  the 
target  syntactic  count  of  100,  no  semantic  actions 
can  be  taken. 
7) 
from  Clause  3,  yielding  clause  4. 
8)  Another  subproblem  has  been  solved  since 

is  the  right-most  l i t e r al  of  clause  4. 
Up-links  are  followed  u n t il 
f i r st  appears 
without  brackets  (clause  1).  Since  four  solutions 
have  been  found  for  the  l i t e r a l,  i ts  syntactic 
count  becomes  196.  Since  this  equals  the  target 
syntactic  count, 
the  search  space  to  prevent  other  inference  rules 
from  attempting  to  deduce  the  senators  from  Md  or 

is  therefore  removed  from 

r f * - 3:  McSkimin 
6 

NY. 
In  addition,  the  l i t e r al  H Y , X , Z)  from  clause 
2  is  removed  also  since  a ll  residents  of  Md  and  NY 
of  interest  have  been  found.  Thus,  even  though 
this  l i t e r al  had  96  solutions  left  to  find,  it 
could  be  pruned  since  it  was  a.  descendant  of  a 
l i t e r al  which  was  f u l ly  solved.  These  are 
examples  of  semantic  actions. 
9)  The  A - l i t e r al 
[M>,x,z)J  is  next  truncated 
from  clause  4  yielding  clause  S,  which  is  next 
solved  in  a  similar  fashion. 

This  example  lias  illustrated  how  user-sup(cid:173)
plied  semantic  information  may  be  incorporated 
within  the  framework  of  predicate  calculus  so  as 
to  make  the  deductive  inference  process  more  ef(cid:173)
ficient.  Three  methods  were  shown  to  be  effec(cid:173)
tive  in  reducing  the  amount  of  effort  involved  in 
answering  a  query: 
tests,  semantic  operator  selection,  and  semantic 
actions.  Naturally,  these  are  not  beneficial  for 
a ll  data  bases;  conditions  under  which  each  is  ex(cid:173)

semantic  well-formedness 

pected  to  prove  most  beneficial  are  given  by 
McSkimin. 

5.  Summary 

We  have  described  three  basic  uses  of  a  seman(cid:173)

(1)  To  semantic-ally  unify  two  l i t e r(cid:173)

(2)  To  perform  semantic  well-formedness 

t ic  network: 
als. 
tests.  (3)  To  perform  semantic  actions.  Semantic 
unification  serves  to  decrease  the  number  of  de(cid:173)
ductions  that  one  may  have  over  syntactic  methods. 
Semantic  well-formedness  tests  serve  to  delete  data 
from  entering  the  data  base  if  they  are  not  soman  -
t i c a l ly  well-formed  relative  to  the  domain  of  ap(cid:173)
plication.  Semantic  well-formedness  tests  may  also 
introduce  new  l i t e r a ls  into  the  search  space  which 
mast  be  satisfied  for  a  solution  to  be  found.  Se(cid:173)
mantic  actions  serve  to  use  counting  information  to 
determine  when  a  l i t e r al  has  been  fully  solved,  and 
to  take  actions  based  upon  this  information.  These 
actions  serve  to  delimit  the  search  space. 

16]  Loveland,  D.  W. 

[1970]  "Some  Linear  Herbrand 

Proof  Procedures:  An  A n a l y s i s ,"  Dept.  of 
Computer  Science,  Carnegie-Mellon  Univ., 
Pittsburgh,  Pennsylvania,  1970. 

[7]  McSkimin,  J.  R. 

[1976]  The  Use  of  Semantic 
in  Deduct ive~~Quest ion -Answering 

I n formation 
SysTems"^  Ph.D.  Thesis, "Dept.  of  Computer 
Science,  Univ.  of  M l .,  College  Park,  Md.(1976) 
Also  Tech.  Report  TR-465,  1976. 
18]  McSkimin,  J.  R.  and  Minker,  J. 

[1977]  "A  Predi(cid:173)
cate-Calculus  Based  Semantic  Network  f or  Ques(cid:173)
tion-Answering  Systems,"  Dept.  of  Computer 
Science,  Univ.  of  Maryland,  College  Park,  Md., 
Tech.  Report  TR-509,  1977. 

[9]  Minker, 
[1973] 
for  a  Deductive  Quest ion-Answering  System," 
A r t i f i c i al  I n t e l l i g e n ce  4  (1973.1,  225-243. 

J .,  Fishman,  i).  H.  and  McSkimin,  J.R. 
'The  Q*  Algorithm  -  A  Search  Strategy 

[10]  Minker,  J. 

[1976]  "Search  Strategy  and  Selec(cid:173)

t i on  Function  f or  An 
System,"  Tech.  Report  TR-497,  Univ.  of 
Maryland,  College  Park,  Md.,1976. 

I n f e r e n t i al  Relational 

[11]  Schubert,  L.  K. 

[1976]  "Extending  the  Expres(cid:173)
sive  Power  of  Semantic  Networks,"  A r t i f i c i al 
I n t e l l i g e n ce  7  (1976),  103-198. 

information  as  represented 

An  a l t e r n a t i ve  approach  to  the  one  described 
here  would  be  to  b u i ld  into  the  system  unary  p r e d i(cid:173)
cates  rather  than  set 
in 
the  semantic  graph.  We  do  not  believe  that  such  an 
approach  would  be  e f f e c t i ve  since  the  a d d i t i on  of 
axioms  to  the  system  to  represent 
set  r e l a t i o ns  and  d i s j o i nt  r e l a t i o ns  would  be  too 
cumbersome  to  deal  w i th  in  practice  and  would  lead 
to  very  long  proofs. 

t r a n s i t i ve  super(cid:173)

Although  the  approach  appears  to  be  v i a b l e, 

One  factor 

we  cannot  yet  provide  experience  which  would  demon(cid:173)
s t r a te  i ts  effectiveness.  We  expect  to  determine 
i ts  effectiveness. 
is  the  data  struc(cid:173)
t u re  to  be  used  to  perform  pattern-directed  search 
for  clauses  which  semantically  and  s y n t a c t i c a l ly 
match  l i t e r a ls  in  the  data  base.  A  second  factor 
w i ll  be  the  amount  of  time  required  to  perform  the 
CONFLICT  algorithm.  This  algorithm  determines 
whetlicr  or  not 
semantically  consistent. 
is  too  time  consuming, 
approach  and  make  it  comparable  to  a  s t r i c t ly  syn(cid:173)
t a c t ic  approach. 
estimate  whether  the  e f f o rt  expended 
the  semantic  routines  w i ll  exceed 
incurred 

two  boolean  category  expressions  are 
the  c o n f l i ct  algorithm 

if  they  are  not  performed  at  a l l. 

Further  analysis  is  needed  to 

in  executing 
the  extra  e f f o rt 

it  may  defeat 

the  whole 

If 

We  believe  that  an  advantage  w i ll  be  shown 
for  the  techniques  described  here.  We  are  cur(cid:173)
r e n t ly  implementing  a  system,  MRPPS  3.0  which  in(cid:173)
corporates  the  techniques  described  here.  We  ex(cid:173)
pect 
how  well 

to  experiment  with  the  system  to  determine 

it  w i ll  work  on  large  data  bases. 

Ac kno w 1 ed g emen t s 

that 

The  authors  wish  to  express  t h e ir  apprecia(cid:173)
for  the 
for  t h is  e f f o rt 

t i on  to  the  National  Science  Foundation 
supjx)rt 
under  NSF  CJ-43632.  They  would  also  l i ke  to  ex(cid:173)
press  t h e ir  appreciation  to  Mr.  Guy  Zanon  for  his 
careful  reading  of  the  paper  and  his  many  sugges(cid:173)
t i o n s. 

they  liave  provided 

References 

11  ]  F  i  s  hman,  I).  H.  [1973]  Experiments  w i th  a  Re  so  -
1 ution-Based  Deductive  Questi on-Answering  Sys(cid:173)
tem  and  "aTProposed  Clause  Representat  lon  f or 
P a r a l l el  Search,  ph.D.  Thesis,  Dept.  of  Compu-
ter  Science,  Univ.  of  Maryland,  College  Park, 
Md.  Also  Tech.  Report  TR-280,  1973. 

[2]  Fishman,  1).  11. 

[1974]  "Experiments  w i th  a  De-
ductive  Question-Answering  System,"  Computer 
and 
Tech.  Report  F4C-10,  1974. 

I n f.  S c i.  Dept.,  Univ.  of  Mass.,  COINS 

(3J  Fishman,  I).  H.  and  Minker,  J. 

II-Repre(cid:173)
sentation:  A  Clause  Representation  f or  ParaJ -
1eJ  Search,''  A r t i f i c i al 
(1975),  103-127. 

I n t e l l i g e n ce  6  (2) 

[1975] 

[4]  Kowalski,  R.  and  Kuehner,  D. 

[1971]  "Linear 
Resolution  w i th  Selection  F u n c t i o n ,"  A r t i f i(cid:173)
c i al 

I n t e l l i g e n ce  2  (3/4) 

(1971),  221-260. 
[1969]  "A  S i m p l i f i ed  Format 

[5]  Loveland,  D.  W. 

f or  the  Model-Elimination  Theorem  Proving  Pro(cid:173)
cedure,"  J.ACM  16  (July  1969),  349-363. 

N a t u r al  L a n g u a g e - 3:  M c S k i m in 

58 

