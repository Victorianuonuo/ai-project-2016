Keys, Nominate, and Concrete Domains 

Carsten Lutz1 

Carlos Areces2 

Ian Horrocks3 

Ulrike  Sattler1 

1 Inst, for Theoretical Computer Science 

2INRIA Lorraine 

Technical University Dresden 

Germany 

Nancy 
France 

3Dept.  of Computer Science 
University of Manchester 

UK 

(lastname)@tcs.inf.tu-dresden.de 

Carlos.Areces@loria.fr 

horrocks@cs.man.ac.uk 

Abstract 

Many description logics (DLs) combine knowledge 
representation on an abstract, logical level with an 
interface  to  "concrete"  domains  such  as  numbers 
and strings.  We propose to extend such DLs with 
key  constraints  that  allow  the  expression  of state(cid:173)
ments  like  "US  citizens  are  uniquely  identified  by 
their social  security  number".  Based  on  this  idea, 
we introduce a number of natural description logics 
and present (un)decidability results and tight NEx-
PTlME complexity bounds. 

Introduction 

1 
Description Logics (DLs) are a family of popular knowledge 
representation  formalisms.  Many  expressive  DLs  combine 
powerful  logical  languages with an  interface to concrete do(cid:173)
mains  (e.g.,  integers,  reals,  strings)  and  built-in  predicates 
(e.g.,  <,  sub-string-of) [Lutz, 2002bl.  These can be used to 
form descriptions such as "employee working for the govern(cid:173)
ment and earning more than her boss" that combine "abstract" 
logical  components (e.g.,  working for the government) with 
components  using  concrete  domains  and  predicates  (e.g.,  a 
numerical comparison of earnings). 

DLs with concrete domains have turned out to be useful for 
reasoning about conceptual (database) models [Lutz, 2002c], 
and as the basis for expressive ontology languages [Horrocks 
et al.y 20021.  So far, however, they have not been able to ex(cid:173)
press key constraints, i.e., constraints expressing the fact that 
certain "concrete features" uniquely determine the identity of 
the instances of a certain class.  E.g., the concrete feature "so(cid:173)
cial security number (SSN)" might serve as a key for citizens 
of the US,  and the combination of identification number and 
manufacturer might  serve  as  a  key  for vehicles.  Such  con(cid:173)
straints  are  important both  in  databases  and  in  realistic  on(cid:173)
tology  applications. 
In  a  DL  context,  key  constraints  have 
so  far only  been  considered  on  logical,  "non-concrete" do(cid:173)
mains  [Borgida and Weddell,  1997; Calvanese et a/.,  2000; 
Khizder et al, 2001; Toman and Weddell, 20021. 

It is easy  to  see  that concrete  keys can  express nominate, 
i.e.,  concepts to be interpreted as singleton  sets  (closely re(cid:173)
lated to the "one-of" operator):  e.g.,  if SSN is a key for Hu(cid:173)
man (SSN keyfor Human), then the concept "Human with SSN 

has at most one instance. 

In this paper, we extend the well-known DLs with concrete 
domains  ACC(V)  and  SHOQ(D) 
[Baader  and  Hanschke, 
1991;  Horrocks and  Sattler,  2001]  with  key constraints and 
analyse  the  complexity  of reasoning  with  the  resulting  log(cid:173)
ics  ALLOK(D)  and  SHOQK(D).  We  show that allowing 
complex  concepts  to  occur  in  key  constraints  dramatically 
increases  the  complexity  of  ALL(D) 
(which  is  PSPACE-
complete): 
it  becomes  undecidable.  Restricting  key  con(cid:173)
straints  to  atomic  concepts  (such  as  "Human"  in  the  above 
example) still yields a NEXPTlML-hard formalism, even for 
rather simple  (PTlME)  concrete domains.  We  show  several 
variants of this  result that depend on  other characteristics of 
key constraints, such as the number of concrete features and 
the "path length".  This effect is consistent with the observa(cid:173)
tion that the PSPACE upper bound for ACC(V)  is not robust 
[Lutz, 20031. 

Additionally,  we  prove  the  N E X P T I ME  bounds  to  be 
tight  by  presenting  tableau  algorithms  for  ALLOK{V)  and 
SHOQK{V)  with  key  admissible  concrete  domains  that  are 
in NP, where key admissibility is a simple and natural prop(cid:173)
erty.  We have chosen to devise tableau algorithms since they 
have  the  potential  to  be  implemented  in  efficient  reasoners 
and  have  been  shown  to  behave  well  in  practise  [Horrocks 
et al,  2000].  Due  to  space  restrictions,  we  can  only  sketch 
proofs and refer to [Lutz et  al,  2002] for more details. 

introduce 

the  description 

logic 

2  Preliminaries 
First,  we 
formally 
ALLOK(D). 
Definition  1.  A  concrete  domain  V  is  a  pair 
where 
predicate name 
n-ary  predicate 

is  a  set  and 

a  set  of predicate  names.  Each 
is associated with an arity n and an 

be pairwise disjoint and countably in(cid:173)
finite sets of concept names, nominate, role names, and con(cid:173)
crete features.  We  assume  that  NR  has  a countably  infinite 
subset  NaF  of abstract features.  A  path  u  is  a  composition 
and a 
concrete feature g.  Let V be a concrete domain.  The set of 
ALLOK(D)-concepts 
is  the smallest  set  such  that (i) every 
concept name and  every  nominal  is  a concept,  and  (ii)  if C 
and D are concepts, R is a role name, g is a concrete feature, 
u1, . . ., un  are paths, and  
is  a predicate of arity n. 

of  n  abstract  features 

DESCRIPTION LOGICS 

349 

then the following expressions are also concepts: 

Definition 3.  Let V be a concrete domain.  A D-conjunction 
is a (finite) predicate conjunction of the form 

" A key definiton is an expression ( u1, . . ., Uk keyfor C)  for 
paths and C a concept. A  finite  set of key 

definitions is called a key box. 
As usual, we use T  to denote an arbitrary propositional tau(cid:173)
tology.  Throughout this paper, we will consider several frag(cid:173)
ments of the logic  ALLOK{V)\  A£CO{V)  is obtained from 
ALLOK(D) 
by  admitting  only empty  key  boxes;  by  disal(cid:173)
lowing the use of nominals, we obtain the fragment ACC(V) 
of  ALCO{D)  and  ALCK(D)  of ALLOK{D). 

The  description  logic  ALCOK(D) 

is  equipped  with  a 
Tarski-style set-theoretic semantics.  Along  with  the seman(cid:173)
tics,  we introduce the standard inference problems:  concept 
satisfiability and concept subsumption. 
Definition  2.  An  interpretation  X  is  a  p a i
is a non-empty set,  called the domain, and 

is the in(cid:173)
terpretation function.  The  interpretation function  maps  each 
concept name  C  to  a  subset  CI  of 
,  each  nominal  N  to 
, each role name R to a subset 
a  singleton  subset  N1  of 
each abstract feature / to a partial function 
,  and each concrete feature g to a partial 

r,  where 

function q1  from 

I

is  a  path  and  d

f
fined  as 
is extended to arbitrary concepts as follows: 

is de(cid:173)
The  interpretation  function 

 

o

I 

rn

of 

An  interpretation  I  is  a  model of a  concept  C  iff 
(u1,...,  un keyfor C) 
Moreover, X satisfies a key  definition 
if,  for any 
(b) 
  implies 
f
a  —  b.  2  is  a model of a key  box  K.  iff X  satisfies  all  key 
definitions in  K.  A  concept C  is satisfiable w.r.t.  a key box 
K iff C  and  K  have a common  model.  C  is subsumed by a 
concept D w.r.t. K, (written C 
for all 
models 
K 
It  is  well-known  that,  in  DLs  providing  for  negation,  sub-
sumption can be reduced to (un)satisfiability and vice versa: 
C 
is  unsatisfiable  w.r.t.  K  and C  is  sat(cid:173)
-D 
isfiable  w.r.t. KZ iff  C 
-iT.  Thus  we  can  concentrate 
on  concept  satisfiability  when  investigating  the  complexity 
of reasoning:  the above reduction implies the corresponding 
bounds for subsumption  and the complementary complexity 
class (usually C O - N E X P T I ME in this paper). 

D  itf  C 

When devising decision procedures for DLs which are not 
tied to a particular concrete domain, admissibility of the con(cid:173)
crete  domain  usually  serves  as  a  well-defined  interface be(cid:173)
tween the decision procedure and concrete domain reasoners 
[Baader and Hanschke, 1991; Lutz, 2002b]: 

and the 

for each 

where  Pi  is  an  n,-ary  predicate  for 
are 
variables.  A  'P-conjunction c  is satisfiable  iff there  exists  a 
function 6 mapping the variables in c to elements of 
such 
We say 
that 
that the concrete domain V is admissible iff (i) 
contains a 
name  TD  for 
; (ii)  D  is closed under negation, and (iii) 
satisfiability  of P-conjunctions is decidable.  We  refer to the 
satisfiability of  D-conjunctions  as  D-satisfiability. 
As  we  shall  see,  it  sometimes  makes  a  considerable  differ(cid:173)
ence  w.r.t.  complexity and  decidability  to  restrict  key  boxes 
in various ways.  Because of this, it is convenient to introduce 
the following notions: 
Definition 4.  A  key box  K  is called Boolean  if all  concepts 
appearing in (key definitions in) K. are Boolean combinations 
of concept names; path-free  if all  key definitions  in  K  are of 
the  form  (g1,...,  gn  keyfor C)  with 
; sim(cid:173)
ple if it is both path-free and Boolean; and a unary key box if 
all  key  definitions in  K  are of the form  (u keyfor C).  A con(cid:173)
cept C is called path-free if, in all its subconccpts of the form 

~ 

are concrete features. 

To emphasize that a key box must not necessarily be Boolean 
or path-free, we sometimes call such a key box general.  Sim(cid:173)
ilarly, to emphasize that a key box is not necessarily a unary 
key box, we sometimes call such a key box n-ary key box. 

3  Lower Complexity Bounds 
In this section,  we present lower complexity bounds for DLs 
with concrete domains, key boxes and nominals.  We start by 
showing  that  satisfiability  of  ALLK  (V)-concepts  w.r.t.  gen(cid:173)
eral  key  boxes  is  undecidable  for many  interesting concrete 
domains.  This  discouraging result  is  relativized  by  the  fact 
that,  as  shown  in  Section  4,  the  restriction  to  Boolean  key 
boxes recovers decidability.  Next,  we  prove that satisfiabil(cid:173)
ity  of path-free  ALLK(D)-concepts  w.r.t.  simple  key  boxes 
is NExpT3lME-hard for many concrete domains and that this 
holds  even  if we  restrict  ourselves  to  unary  key  boxes.  Fi(cid:173)
nally,  we  identify  a  concrete  domain  such  that  ALLO(D)-
concept  satisfiability  (without  key  boxes)  is  already  NEXP-
TlME-hard. 

Undecidability  of  ALLK.(D)-concept  satisfiability  w.r.t. 
general  key boxes is proved by reduction of the undecidable 
Post Correspondence Problem (PCP) [Post,  1946]. 
Definition 5.  An instance P of the PCP is given by a finite, 
non-empty  list 
of  pairs  of  words  over 
some  alphabet 
.  A  sequence  of  i n t e g e r s w i th 
m 
The problem is  to decide  whether a given  instance  P has  a 
solution. 
The reduction uses the admissible concrete domain W intro(cid:173)
duced in [Lutz, 2003], whose domain is the set of words over 
£ and whose predicates express concatenation of words.  For 
we  define a 
each  PCP instance 

1, is called a solution for P  iff 

350 

DESCRIPTION  LOGICS 

concept Cp  and unary key  box  Kp  such that P has no solu(cid:173)
tion  iff  Cp  is  satisfiable  w.r.t.  Kp. 
Intuitively,  Cp  and  Kp 
enforce an infinite, A;-ary tree, where each node represents a 
sequences  of integers,  i.e.  a  potential  solution.  The  role  of 
the  key  box  is  to guarantee that the tree  is  of infinite depth; 
concrete features are used to store the left and right concate(cid:173)
nations corresponding to the potential solutions; and concate(cid:173)
nation  predicates  from  the  concrete  domain  W  are  used  to 
compute them.  Finally, an inequality predicate also provided 
by W is used to guarantee that none of the potential solutions 
is indeed a solution.  Since it is known that W-satisfiability is 
in PTlME [Lutz, 2003J, we obtain the following theorem. 
Theorem  6.  There  exists  a  concrete  domain  V  such  that 
D-satisfiability  is  in  PTlME  and  satisfiability  of ALLK(D)-
concepts w.r.t. (general) unary key boxes is undecidable. 
As shown in [Lutz, 2003; Lutz et a/., 2002], the reduction can 
easily  be adapted to more natural concrete domains such as 
numerical ones based on the integers and providing predicates 
for  equality  to  zero  and  one,  binary  equality,  addition,  and 
multiplication. 

We  now  establish 

lower  bounds  for  ALLK{V)  with 
Boolean  key  boxes  and  for  ALLO('D).  These  results  are 
obtained  using  a  NExpTlME-completc  variant  of  the  well-
known, undecidable domino problem [Knuth,  1968]. 
Definition 7.  A domino system D is a triple (T, H, V), where 
T 
repre(cid:173)
sent the horizontal and vertical matching conditions. For D a 
an  initial  condi(cid:173)
domino system and 
tion,  a mapping r  : 
is 
a solution for 2)  and 
, the following 
h

N  is a  finite  set  of tile types and 

then 

:, 

o

d

s

l

/', then 

This  variant  of  the  domino  problem  is  N E X P T I M E-
complete [Lutz, 2003].  The three N E X P T I ME lower bounds 
are  obtained  by  using  suitable  and  admissible  concrete  do(cid:173)
mains  D1,  D2,  and  D3  to  reduce  the  above  domino  prob(cid:173)
lem. More precisely, the simplest concrete domain D1 is used 
in  the  reduction  to  ALLK(Di)-concept  satisfiability  w.r.t. 
Boolean  (n-ary)  key  boxes,  the  slightly  more  complex  D2 
is  used  in  the  reduction  to  ACCK.(D2)-concept  satisfiabil(cid:173)
ity  w.r.t.  Boolean  unary  key  boxes,  and  the  most  powerful 
concrete  domain  D3  is  used  in  the  reduction  to  ALLO(D3)-
concept satisfiability  without key boxes. 

The idea underlying all  three reductions is to use concept 

n

a m e

s

to  represent  positions 

in 

the 

torus:  if  a  is  a  domain  element  representing 
expresses that the  l-th  bit in 
the position 
the binary coding of i is  1, and 
expresses that the I'-lh 
bit of j  is  1.  We  use  standard methods to enforce that there 
exists a domain element for every position  in the torus.  The 
main difference between the three reductions is how it is en(cid:173)
sured that no position is represented by two different domain 
elements—we call this uniqueness of positions. 

The  first  reduction  uses  the  very  simple  concrete  do(cid:173)
main  D1,  which  is  based  on  the  set  {0,1}  and  only  pro(cid:173)
vides unary predicates =0,  =1  and their negations.  Unique(cid:173)
ness  of positions  is  ensured  by translating  the  position  (i, j) 

, we enforce that 

of  a  domain  element  a  into  concrete  domain  values: 

for 
and 0 
otherwise (analogously for 
.  Then the key def(cid:173)
inition 
obvi(cid:173)
ously  ensures  uniqueness  of positions.  Since  the  reduction 
concept is path-free and  D1-satisfiability  is easily seen to be 
in PTlME, we obtain the following: 
Theorem  8.  D1  -satisfiability  is  in  PTlME  and  satisfiability 
of path-free  ALC/C(D1)-concepts  w.r.t.  simple  key  boxes  is 
NExrTlME-hard. 
The (somewhat artificial) concrete domain D1 can be replaced 
by  many natural  concrete  domains V  proposed in  the  litera(cid:173)
ture [Baader and Hanschke, 1992; Haarslev and Moller, 2002; 
Lutz,  2002b;  2002dj:  it  suffices  that  V  provides  two  unary 
predicates denoting disjoint singleton sets. 

The second reduction uses the more complex concrete do(cid:173)
main  Do,  which  "stores"  whole  bit  vectors  rather than  only 
single  bits.  In  D2,  we  can  translate  the  position  (i,j)  of an 
element  a.  from  concepts  Xl,  YK  into  a  single  bit  vector  of 
length  2(n  +  1)  that  is  then  stored  as  a  bv-successor of a, 
where bv is a concrete feature. Since we replaced the 2(n +1) 
concrete features used in the first reduction (one for each bit) 
by  the  single  feature  bv,  it  now  suffices  to  use  the  simple 
unary  key  box  (bv keyfor T)  to  ensure  uniqueness  of posi(cid:173)
tions.  As in  D1,  the reduction concept is path-free.  In  [Lutz 
et al., 2002], it is shown that  Do-satisfiability is in PTlME. 
Theorem 9.  Do -satisfiability is in  PTlME and satisfiability of 
path-free  ALCK(D2)-concepts  w.r.t.  simple unary key boxes 
is  NExpTIME-hard. 
Again, the artificial concrete domain  Do  can be replaced by 
more  natural  ones:  we  can  simulate  bit  vectors  using  inte(cid:173)
gers  and  the  necessary  operations  on  bit  vectors  by  unary 
predicates  =„  for  every  interger  n  and  a  ternary  addition 
predicate—for more details sec  [Lutz et al., 2002]. 

The  last  lower bound  is concerned with the  DL ALCO(V). 
In  the  absence  of key  boxes,  we  need  a  different  reduction 
strategy  and  the  more complex  concrete  domain  D3,  which 
extends D2 with so-called domino arrays that allow us to store 
the tiling of the whole torus in a single concrete domain value. 
We  can  then  ensure  uniqueness  of positions  using  a  single 
nominal.  Computationally,  the  concrete domain  D3  is  still 
very simple, namely in PTlME.  However, it no longer suffices 
to use only path-free concepts. 
Theorem  10.  D3satisfiability  is in  PTlME and satisfiability 
ofALCO(D3)-concepts 

is  NExPTlME-hard. 

4  Reasoning Procedures 
We describe two tableau-based decision procedures for con(cid:173)
cept  satisfiability  in  DLs  with  concrete  domains,  nomi-
nals, and keys. The first is for ASLCC'(9AJ(T))-concepts w.r.t. 
Boolean key boxes.  This algorithm yields a N E X P T I ME up(cid:173)
per complexity bound matching the lower bounds established 
in Section 3. The second procedure is for  S'HOOK(D)  w.r.t. 
path-free key boxes and also yields a tight N E X P T I ME up(cid:173)
per complexity  bound.  S'HOQK('D) 
is  an  extension of the 
DL  SHOQ{'D)  introduced  in  [Horrocks  and  Sattler,  2001; 

DESCRIPTION  LOGICS 

351 

box K. Moreover, we use cl(C, K) as abbreviation for the set 

tableau  algo(cid:173)

Complexity  of ALCOK:{V) 
We  start  the  presentation  of the  ALCOK(D) 
rithm by introducing the underlying data structure. 
Definition  12.  Let Oa  and  Oc  be disjoint and countably in(cid:173)
finite  sets of abstract and concrete nodes.  A completion tree 
for an  ALCOK(D)-concept  C  and  a  key  box  K,  is  a finite, 
labeled tree  (Va,VC,E,  C)  with  a set  of nodes 
such 
Oc,  and all  nodes from  Vc  are leaves. 
that Va 
Each node a  Va  of the  tree  is  labeled  with  a  subset  C(a) 
of cl(C,  K);  each edge  (a, b) 
is labeled 
with a role name C(a, b) occurring in C or K; and each edge 
(a, x)  E  with a  Va  and x  Vc is labeled with a concrete 
feature L(a, x)  occurring in C or K,. 

E  with  a, b  Va 

Oa, Vc 

' 

For  T  = 

(Va,VC,E,C)  and  a 

Va,  we  use  levT(a)  to 
denote the depth at which a occurs in T (starting with the root 
node  at  depth  0).  A  completion system  for an  ACCOK,(V)-
concept  C  and  a  key  box  K  is  a  tuple 
where 
is  a  completion  tree  for C  and  K,  V  is 
T  = 
with  arity  n  appearing in 
a function mapping each 
is  a  linear ordering of Va such  that 
C  to  a  subset  of 
levx(a) 
i e s is   an equivalence 
relation on Vc. 

i m p l

Let T  =  (Va,  Vc, E, C)  be a completion tree.  A node b 

Va  if  (a, b) 
E  and 
Vc  is a  g-successor  of 
E  and  L(a,  x)  =  y.  For  paths  u,  the  notion 

Va  is  an  R-successor of a  node a 
L(a,  b)  =  R.  Similarly,  a node  x 
a  if  (a, x) 
u-successor is defined in the obvious way. 
Intuitively, the relation ~ records equalities between concrete 
nodes  that  have  been  found  during  the  model  construction 
process.  The relation  ~  induces  an  equivalence  relation 
on abstract nodes which, in turn, yields the equivalence rela(cid:173)
tion 
Definition 13.  Let S  = 
for a concept  C  and a  key  box  K.  with  T  = 
and let 
NR, a node b  Va 
if there  exists  a  node  c  Va  such  that  a 
i?-successor of c.  For paths  u,  the  notion 
defined analogously. 

be an  equivalence relation on  Va.  For each  R 

Va 
c and b is an 
-neighbor is 

be a completion system 

on concrete nodes. 

of a  node  a 

is an 

, 

Pan  and  Horrocks,  2002],  which  provides  a  wealth  of ex(cid:173)
pressive  possibilities  such  as  transitive  roles,  role  hierar(cid:173)
chies, nominals, qualifying number restrictions, and general 
TBoxes  with  a  path-free  concrete  domain  constructor  and 
path-free  key  boxes.  Path-freeness  of  SHOQK(T>ys  con(cid:173)
crete  domain  constructor  is  crucial  for  decidability.  More(cid:173)
over,  it allows us  to admit general  rather than  only Boolean 
key boxes. 

Tableau  algorithms  decide  the  satisfiability  of  the  input 
concept (in our case w.r.t. the input key box) by attempting to 
construct a model for it:  starting with an initial data structure 
induced  by  the  input concept,  the  algorithm  repeatedly  ap(cid:173)
plies completion rules.  Eventually, the algorithm either finds 
an obvious contradiction or it encounters a contradiction-free 
situation  in  which no more completion rules are applicable. 
In the former case the input concept is unsatisfiable, while in 
the latter case it is satisfiable. 

Existing  tableau  algorithms  for  DLs  with  concrete  do(cid:173)
mains  use  admissibility  as  an  "interface"  between  the  tab(cid:173)
leau algorithm and a concrete domain reasoner [Lutz, 2002b; 
Baader  and  Hanschke,  1991]. 
In  the  presence  of  keys, 
this  is  not  enough:  besides  knowing  whether  a  given  V-
conjunction  is  satisfiable,  the concrete domain reasoner has 
to  provide information on  variables that must take the same 
value  in  solutions.  As  an  example,  consider  the  concrete 
d

the  N-conjunction 

o m a

nd 

.  Obviously,  every solution 
5 for c identifies two of the variables v1, V2,v3. This informa(cid:173)
tion has to be passed from the concrete domain reasoner to the 
tableau algorithm since, in the presence of key boxes, it may 
have an impact on the satisfiability of the input concept. E.g., 
this information transfer reveals the unsatisfiability of 

n

i

a

contains  a name 

To formalize this requirement, we strengthen the notion of ad(cid:173)
missibility  into  key-admissibility. 
Definition  11.  A concrete domain V is key-admissible iff (i) 
is  closed  under 
negation, and (iii) there exists an algorithm that takes as input 
a D-conjunction c, returns clash if c is unsatisfiable, and oth(cid:173)
erwise  non-deterministically outputs an equivalence relation 
~ on the set of variables V  used in c such that there exists a 
solution 5 for c with the following property:  for all v, v'   V 
Such  an  equivalence  relation  is 
henceforth  called  a  concrete  equivalence.  We  say  that  ex-
tended V-satisfiability is in NP if there exists an  algorithm as 
above running in polynomial time. 
It  can  easily  be  seen  that  any  concrete  domain  that  is  ad(cid:173)
missible  and provides  for an  equality predicate is  also  key-
admissible [Lutz et a/., 2002]. 

In  the  following,  we  assume  that  all  concepts  (the  input 
concept and those occuring in key boxes) are in negation nor(cid:173)
mal form (NNF), i.e., negation occurs only in front of concept 
names  and  nominals;  if the  concrete  domain  V  is  admissi(cid:173)
ble,  then every  ALCCK(D)-concept  can  be converted into 
an  equivalent  one  in  NNF  [Lutz  et al. , 2002].  We  use  C 
to denote the result of converting the concept  C  into NNF, 
sub(C)  to denote the set of subconcepts of C, and sub(/C)  to 
denote the set of subconcepts of all concepts occurring in key 

352 

DESCRIPTION LOGICS 

t

s

a

e

nd 

xor 

define 

Finally, 
there are a 
neighbors of a. 
then a and b describe the same 
Intuitively,  if we have 
domain  element of the constructed model  (and similarly for 
the 

relation on concrete nodes). 

such  that x  and y  are 

Let  D  be  a  key-admissible  concrete  domain.  To  de(cid:173)
cide  the  satisfiability  of  an  ALCOK.{V)-concept  Co  w.r.t. 
a  Boolean  key  box  K  (both  in  NNF),  the  tableau  algo(cid:173)
rithm  is  started  with  the  initial  completion  system 

where 

maps each 

and 
occurring in  Co  to 0.  We now 
introduce an operation that is used by the completion rules to 
add new nodes to completion trees. 
Definition 14.  Let 
be a completion system 
with 
. An  element of Oa  or  0C  is  called 
fresh  in  T  if it  does  not  appear  in  T.  We  use  the  following 
notions: 
fresh in  T, and  R  NR. We 
S  + a R b:  Let  
write S + aRb to denote the completion system S' that can be 
obtained from S by adding (a, b) to E and setting L(a, b)  — 
R  and 
Moreover,  b is  inserted  i n t o s u ch   that 

implies  levT(b)  <  levT(c)' 

fresh  in  T  and 

S  +  agx:  Let 
We  write  S  +  agx  to  denote  the  completion  system  S'  that 
can  be  obtained  from  S  by  adding  (a,x)  to  E  and  setting 
L{a,x)  =  g. 
When nesting +, we omit brackets writing, e.g., 
bR2c for 
be a path. 
With 
is  fresh in T,  we 
denote the completion system S' that can be obtained from 5 
by taking fresh nodes 

and setting 

The completion rules are given in Figure 1, where we assume 
that newly  introduced nodes are  always fresh.  The 
and 
Rch  rules  are  non-deterministic and  the  upper  five  rules  are 
well-known  from  existing  tableau  algorithms  for  ALC('D)-
concept satisfiability  (c.f.  for example  fLutz,  2002dl).  Only 
-neighbors rather 
relates nodes denoting the same 

deserves a comment:  it considers 

than  R-successors  since 
domain element. 

The last two rules are necessary for dealing with key boxes. 
The  "choose  rule"  Rch  (c.f.  [Hollunder  and  Baader,  1991; 
Horrocks et al.,  2000])  guesses  whether an  abstract node  a 
satisfies  C  in  case  of  C  occurring  in  a  key  definition  and 
a  having  neighbors  for  all  paths  uL  in  this  key  definition. 
The Rp rule deals with equalities between abstract nodes as 
then a and b describe 
recorded by the 
the same element, and thus their node labels should be identi(cid:173)
cal.  We choose one representative for each equivalence class 
of 
) and make sure that 
the  representative's node  label  contains the  labels  of all  the 
nodes it represents. 
Definition 15.  Let S  = 
for a concept C and a key box K with 

be a completion system 
We 

(the node that is minimal w.r.t. 

relation:  if.  b, 

Figure  1:  Completion  rules  for ACCOK{V). 

say that the completion system S is concrete domain satisfi-
able  iff the conjunction 

i

t

(

a

i) 

 are 

there

t
such 

h
t h a t a nd  x is 

is  satisfiable.  5 contains a clash  iff (i) there is a n a nd 
a n s u ch 
and 
of 
a;  or (iii) S is not concrete domain satisfiable.  If S does not 
contain a clash, then S is called clash-free.  S is complete if 
no completion rule is applicable to S. 
We  now  give  the  tableau  algorithm  in  pseudocode  nota(cid:173)
tion, where check denotes the algorithm computing concrete 
equivalences as described in Definition 11: 

define procedure sat(S) 

do 

if S contains a clash then return unsatisfiable 

compute 

and then 

while 
if S contains a clash then return unsatisfiable 
if S is complete then return satisfiable 
apply a completion rule to S yielding , 
return sat(S") 

The algorithm realizes  a  tight coupling between the con(cid:173)
crete domain reasoner and the tableau algorithm:  if the con(cid:173)
crete domain reasoner finds that two concrete nodes are equal, 
the  tableau  algorithm  may  use  this  to deduce  (via the com(cid:173)
putation  of 
even  more equalities  between  con(cid:173)
crete nodes.  The concrete domain reasoner may then return 
in check 

further "equalities" ~ and so forth. 

A  similar interplay takes place in  the course of several re(cid:173)
cursion  steps:  equalities  of concrete  nodes  provided by  the 

DESCRIPTION  LOGICS 

353 

concrete domain reasoner may  make new rules applicable  (for 
which changes V  and thus also Cs. 
example Rp and then  
This  may  subsequently  lead  to  the  detection  of more  equali(cid:173)
ties  between concrete nodes by the concrete domain reasoner, 
and  so forth.  Note that,  in  the  absence of keys boxes, there  is 
much  less interaction:  it suffices to apply the concrete domain 
satisfiability  check  only  once  after  the  completion  rules  have 
been exhaustively applied  [Baader and Hanschke,  1991 J. 

In  fLutz  et  ai,  2002],  we  prove  that  the  algorithm  runs 
in  non-deterministic  exponential  time:  there  are  exponential 
bounds  on  the  number  of abstract  and  concrete  nodes  in  the 
completion  system,  on  the  number of while  loop  iterations  in 
each  recursion  step,  and  on  the  size  of  Cs-  This  yields  the 
following upper bound,  which  is  tight  by Theorem 9. 
Theorem  16.  For  V  a  key-admissible  concrete  domain  such 
that  extended  D-satisfiability 
is  in  NP,  ALCOK.('D)-concept 
satisfiability  w.r.t.  Boolean  key  boxes  is  in  NEXPTlME. 

(D) 

Complexity  of  SUOQK 
We  have  designed  a tableau  algorithm  for  SHOQK(D)  as  a 
combination  of  the  one  for  SHOQ{V)  in  [Horrocks  and  Sat-
tler, 2001] and the one for  ALCOK(D)  presented above.  It is 
restricted  to  path-free  concepts  and  path-free  key  boxes,  but 
can  handle  complex  concepts  in  key  boxes.  The  most  impor(cid:173)
tant difference from the  ACCOK(D)  algorithm is as follows: 
in  the  presence  of non-Boolean  key  boxes,  the  Rch  rule  may 
add concepts of positive  "role depth" to  arbitrary nodes in  the 
completion  tree.  Thus  the  role  depth  does  not  automatically 
decrease  with  the  depth  of  nodes  in  the  tree  (as  in  the  case 
of  AlCOK.{V)) 
and  a  naive  tableau  algorithm  would  con(cid:173)
struct  infinite  trees.  However,  even  for  SUOQ(V)  without 
key  boxes,  one  has  to  enforce  termination  artificially  by  us(cid:173)
ing  a  cycle  detection  mechanism  called  blocking—whereas 
the  ALCOK(V) 
algorithm  terminates  "naturally".  It  can  be 
shown  that blocking can  be used  in  the presence of key  boxes 
without  corrupting  soundness  or  completeness.  A  detailed 
description  of this  algorithm  and  a  correctness  proof is  given 
in  iLutz  et  al,  2002].  As  a  by-product  of  the  SHOQK(D) 
tableau  algorithm,  we  obtain  a  small  model  property:  every 
satisfiable 
has  a  model  of  size  expo(cid:173)
nential  in  the  concept  length.  Thus  we  obtain  the  following 
upper bound,  which  is  tight by Theorem  9. 
Theorem  17.  For  V  a  key-admissible  concrete  domain  such 
that  V-satisfiability  is  in  NP, 
satisfia(cid:173)
SUOQK(D)-concept 
bility  w.r.t.  path-free  key  boxes  is  in  NEXPTIME. 

S'HOQK(D)-concept 

5  Summary 
We  have  identified  key  boxes  as  an  interesting  extension  of 
description  logics  with  concrete  domains,  introduced  a  num(cid:173)
ber of natural  description  logics,  and  provided a  comprehen(cid:173)
sive  analysis  of the  decidability  and  complexity of reasoning. 
Moreover,  we  have  proposed tableau  algorithms  for two  such 
(NExPTlME-complete)  logics. 

The  main  result of our investigations  is  that  key constraints 
are rather powerful, since they dramatically increase the com(cid:173)
plexity  of reasoning:  PSPACE  ACC{V)  becomes  undecidable 
with  unrestricted  key  boxes,  and  NExpTiME-complete  with 
Boolean  key  boxes—provided  that  the  concrete  domain  V  is 
not too complex,  i.e., extended  D-satisfiability  is  in  NP. 

References 
[Baader and Hanschke,  1991]  F.  Baader  and  P.  Hanschke. 

A 
scheme for integrating concrete domains into concept languages. 
In  Proc.  oflJCAl-9l,  Morgan-Kaufmann,  1991. 

[Baader and Hanschke,  1992]  F.  Baader and  P.  Hanschke.  Exten(cid:173)
sions  of concept  languages  for a  mechanical  engineering  appli(cid:173)
cation.  In Proc.  ofGWAI-92, vol.  671  of LNCS, Springer,  1992. 
[Borgida and Weddcll, 1997]  A.  Borgida  and  G.E.  Weddell. 
Adding uniqueness constraints to description logics (preliminary 
report).  In  Proc.  of  DOOD  97,  volume  1341  of  LNCS,  pages 
85-102. Springer,  1997. 

iCalvanese  et  al,  2000]  D.  Calvanese,  G.  De  Giacomo,  and  M. 
In  Proc.  of 

Lenzerini.  Keys  for  Free  in  Description  Logics. 
DL2000, number 33  in  http://CEUR-WS.org/,  2000. 

[Haarslev and Moller, 2002]  V.  Haarslcv  and  R.  Moller.  Practical 
reasoning  in racer with a concrete domain for linear inequations. 
In  Pmc.  ofDL2002,  number 53  in  http://CEUR-WS.org/,  2002. 
[Hollunder  and Baader,  1991]  B. Hollunderand F. Baader. Qualify(cid:173)
ing  number  restrictions  in  concept  languages.  In Proc.  of KR'9], 
Morgan- Kaufmann, 1991. 

[Horrocks and Sattler, 2001]  1.  Horrocks  and  U.  Sattler.  Ontology 
IJCAJ-

reasoning in the  SHOQ(D)  description logic. In Proc. of 
01, Morgan-Kaufmann, 2001. 

[Horrocks et ai,  2000]  I. Horrocks, U. Sattler, and S. Tobies.  Prac(cid:173)
tical reasoning for very expressive description logics.  Logic Jour(cid:173)
nal of the 1GPL, 8(3):239-264, 2000. 

[Horrocks et ai, 2002]  I. Horrocks, P.F. Patel-Schncidcr, and F. van 
Harmelen.  Reviewing  the  design  of DAML+OIL:  An  ontology 
language  for  the  semantic  web.  In Proc. of AAAI2(X)2,  2002. 

[Khizder  et ai, 2001]  V.  Khizder,  D.  Toman,  and  G.  Weddell.  On 
Decidability and Complexity of Description Logics with Unique(cid:173)
ness Constraints. In Proc. of ICDT 2001, 2001. 

[Knuth,  1968]  D.  Knuth.  The Art of Computer Programming,  vol(cid:173)

ume 1.  Addison-Wesley,  1968. 

[Lutz  etal,  20021  C.  Lutz,  C.  Areccs,  I.  Horrocks,  and  U.  Sat-
tler.  Keys,  nominals,  and  concrete  domains.  LTCS-Report 02-
04, Technical University Dresden, 2002. S
drcsden.de/rescarch/reports.html. 

ee h t t p : / / l a t . i n f . t u-

[Lutz, 2002b]  C. Lutz.  Description logics with concrete domains— 

a survey. In Proc. of AiML 2002, 2002. 

[Lutz, 2002dl  C.  Lutz.  PSPACE  reasoning  with  the  description 

logic  ACCT{V).  Logic  J.  of the  JGPL,  10(5):535-568,  2002. 

[Lutz, 2002e]  C.  Lutz.  Reasoning  about  entity  relationship  dia(cid:173)
grams  with complex  attribute dependencies.  In Proc.  ofDL2002, 
number 53 in http://CEUR-WS.org/, 2002. 

[Lutz, 20031  C. Lutz.  NExpTime-complete  description logics with 
concrete  domains.  ACM  Transactions  on  Computational  Logic, 
2003.  To appear. 

[Pan and Horrocks, 2002]  J. Z.  Pan and I. Horrocks.  Reasoning in 
In  Proc.  of DL2002,  num(cid:173)

description  logic. 

the  SHOQDn) 
ber 53 in http://CEUR-WS.org/, 2002. 

[Post,  19461  E. M. Post.  A variant of a recursively unsolvable prob(cid:173)

lem.  Bull.  of the Amer.  Math.  Soc, 52:264-268,  1946. 

[Toman and Weddell, 2002]  D. Toman and G. Weddell. On reason(cid:173)
ing  about  structural  equality  in  XML:  A  description  logic  ap(cid:173)
In  Proc.  of ICDT2003,  number  2572  in  LNCS,  pages 
proach. 
96-110, Springer, 2002. 

354 

DESCRIPTION  LOGICS 

