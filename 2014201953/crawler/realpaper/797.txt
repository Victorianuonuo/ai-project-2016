Conservative Extensions in Expressive Description Logics

Carsten Lutz1, Dirk Walther2, Frank Wolter2

1Institut f¨ur Theoretische Informatik, TU Dresden, Germany

2Department of Computer Science, University of Liverpool, UK

Abstract

The notion of a conservative extension plays a
central role in ontology design and integration:
it can be used to formalize ontology reﬁnements,
safe mergings of two ontologies, and independent
modules inside an ontology. Regarding reasoning
support, the most basic task is to decide whether
one ontology is a conservative extension of an-
other. It has recently been proved that this prob-
lem is decidable and 2ExpTime-complete if on-
tologies are formulated in the basic description
logic ALC. We consider more expressive descrip-
tion logics and begin to map out the boundary
between logics for which conservativity is decid-
able and those for which it is not. We prove that
conservative extensions are 2ExpTime-complete in
ALCQI, but undecidable in ALCQIO. We also
show that if conservative extensions are deﬁned
model-theoretically rather than in terms of the con-
sequence relation, they are undecidable already in
ALC.

Introduction

1
The design and integration of ontologies formulated in mod-
ern ontology languages such as OWL is a serious challenge.
Experience shows that principled methodologies as well as
automated reasoning support are required to ensure that the
resulting ontologies are well-structured [6]. In the recent pa-
pers [4; 5; 3; 1], conservative extensions have been identiﬁed
as a crucial notion for formalizing central tasks in ontology
design and integration. Consequently, conservative exten-
sions can play a key role in design and integration method-
ologies [3], and reasoning about conservative extensions can
provide valuable support for the ontology designer.
Formally, an ontology T1 ∪ T2 is a conservative extension
of an ontology T1 w.r.t. a signature Γ iff every consequence of
T1 ∪ T2 formulated in Γ is already a consequence of T1. For
example, assume that ontologies are formalized in a descrip-
tion logic (DL) such as OWL-DL and its fragments [2]. Then
a signature is a set of concept and role names, an ontology
is a DL TBox, and a consequence of a TBox is a subsump-
tion relationship between two concepts which follows from
the TBox. Intuitively, T1 ∪ T2 is a conservative extension of

T1 w.r.t. Γ if adding T2 to T1 does not change the ontology
T1 as far as concepts built only from concept and role names
in Γ are concerned. We give three examples of ontology re-
lated tasks that can be understood in terms of conservative
extensions.
– Ontology reﬁnement. During ontology design, a frequent
task is to add more details to a part of the ontology that has
not yet been sufﬁciently described. Intuitively, such a reﬁne-
ment should have no impact on other, unrelated parts of the
ontology. This requirement can be formalized by demand-
ing that the reﬁned ontology is a conservative extension of
the original one w.r.t. the concept and role names that do not
belong to the reﬁned part [4; 1].
– Ontology merging. The most straightforward way to inte-
grate two ontologies is to simply take their union. Such a
merging should not compromise the original ontologies. One
possible formalization of this requirement is to demand that
the united ontology is a conservative extension of the com-
ponent ontologies w.r.t. the set of all concept and role names
used in the respective components. Weaker formalizations are
obtained by excluding from the signature concept and role
names for which an interaction between the component on-
tologies is expected (and intended) [4].
– Deﬁning Modules. A module inside an ontology T that
describes an independent part of the application domain can
be deﬁned as a subset T (cid:2) of T such that T is a conservative
extension of T (cid:2) w.r.t. the concept names and role names that
belong to T (cid:2) [5].
The most basic reasoning task regarding conservative exten-
sions is as follows: given ontologies T1 and T2 and a signature
Γ, decide whether T1 ∪ T2 is a conservative extension of T1
w.r.t. Γ. In the following, we refer to this task as deciding con-
servative extensions. In [4], this decision problem is investi-
gated for the basic DL ALC and proved to be 2EXPTIME-
complete. The aim of the current paper is to investigate con-
servative extensions in more expressive DLs such as the ones
underlying the ontology language OWL-DL and to map out
the boundary between decidable and undecidable. Our main
results are as follows: (i) in ALCQI, the extension of ALC
with inverse roles and qualifying number restrictions, decid-
ing conservative extensions is 2-EXPTIME complete and thus
not more difﬁcult than in ALC; and (ii) if we further extend
ALCQI with nominals, conservative extensions in the result-

IJCAI-07

453

Name
inverse role
nominal
negation
conjunction
at-most number
restriction

Syntax

r−
{a}
¬C
C (cid:2) D
((cid:2) n r C)

Semantics
(rI)−1
{aI}
ΔI \ CI
CI ∩ DI

{d | #{e |(d, e) ∈ rI ∧
e ∈ CI} ≤ n}

Figure 1: Syntax and semantics of ALCQIO.

ing DL ALCQIO are undecidable. This shows that con-
servative extensions in OWL-DL, of which ALCQIO is a
fragment, is also undecidable. It also identiﬁes ALCQI as
a signiﬁcant fragment of OWL-DL in which conservative ex-
tensions are still decidable.

In mathematical logic, there exist (at least) two versions of
conservative extensions. One is based on the consequence re-
lation as sketched above. An alternative, stronger version is
deﬁned in a model-theoretic way. We also consider deciding
the latter kind of conservative extensions and show that, al-
ready in ALC, this problem is highly undecidable. Details of
all proofs can be found in the technical report [8].

2 Preliminaries
In DLs, concepts are inductively deﬁned with the help of a set
of constructors, starting with a set NC of concept names, a set
NR of role names, and (possibly) a set NI of individual names.
In this paper, we consider the DL ALCQIO and its frag-
ments. The constructors available in ALCQIO are shown
in Figure 1. There, the inverse constructor is the only role
constructor, whereas the remaining constructors are concept
constructors. In Figure 1 and the remainder of this paper, we
use #S to denote the cardinality of a set S, a and b to denote
individual names, r and s to denote roles (i.e., role names and
inverses thereof), A, B to denote concept names, and C, D
to denote (possibly complex) concepts. For an inverse role
s = r− we set s− := r. As usual, we use (cid:3) as abbreviation
for an arbitrary (but ﬁxed) propositional tautology, ⊥ for ¬(cid:3),
(cid:5), →, and ↔ for the usual Boolean abbreviations, ((cid:3) n r C)
(at-least restriction) for ¬((cid:2) n − 1 r C) if n > 0 and for
(cid:3) if n = 0 , (= n r C) for ((cid:2) n r C) (cid:8) ((cid:3) n r C), ∃r.C
(existential restriction) for ((cid:3) 1 r C), and ∀r.C (universal
restriction) for ((cid:2) 0 r ¬C). We assume that the numbers
inside number restrictions are coded in binary.
The DL that allows only for negation, conjunction, disjunc-
tion, and universal and existential restrictions is called ALC.
The availability of additional constructors is indicated by con-
catenation of a corresponding letter: Q stands for number
restrictions; I stands for inverse roles, and O for nominals.
This explains the name ALCQIO, and also allows us to re-
fer to its sublanguages in a simple way.

The formulation of ontologies in description logics is based
on TBoxes, and we will from now on use these two terms
interchangeably. Formally, a TBox is a ﬁnite set of concept
implications C (cid:11) D.
The semantics of ALCQIO-concepts is deﬁned in terms
of an interpretation I = (ΔI,·I). The domain ΔI is a non-

empty set of individuals and the interpretation function ·I
maps each concept name A ∈ NC to a subset AI of ΔI, each
role name r ∈ NR to a binary relation rI on ΔI, and each
individual name a ∈ NI to an individual aI ∈ ΔI. The ex-
tension of ·I to inverse roles and arbitrary concepts is deﬁned
inductively as shown in the third column of Figure 1.
An interpretation I satisﬁes an implication C (cid:11) D if
CI ⊆ DI, and I is a model of a TBox T if it satisﬁes all
implications in T . A concept C is satisﬁable relative to a
TBox T if there exists a model I of T such that CI (cid:14)= ∅. A
concept C is subsumed by a concept D relative to a TBox T
(written T |= C (cid:11) D) if every model I of T satisﬁes the
implication C (cid:11) D.

Despite the fact that individual names are closer to con-
stants than to predicates, we henceforth use the term predi-
cates to refer to elements of NC ∪ NR ∪ NI. A signature is a
ﬁnite set of predicates. The signature sig(T ) of a TBox T is
the set of all predicates that occur in T . Given a description
logic L and a signature Γ, we use L(Γ) to denote the set of
L-concepts that use only predicates from Γ.
Deﬁnition 1 (Conservative Extension) Let T1 and T2 be
TBoxes formulated in a DL L, and let Γ ⊆ sig(T1) be a sig-
nature. Then T1 ∪ T2 is a Γ-conservative extension of T1 if
for all C1, C2 ∈ L(Γ), we have T1 |= C1 (cid:11) C2 iff T1 ∪ T2 |=
C1 (cid:11) C2.
Deciding conservative extensions means to decide, given
two TBoxes T1 and T2 and a signature Γ ⊆ sig(T1), whether
T1 ∪ T2 is a Γ-conservative extension of T1.
If Γ = sig(T1), we simply drop Γ and only talk about conser-
vative extensions. It is not difﬁcult to see that an alternative
deﬁnition of conservative extensions is as follows: T1 ∪ T2 is
a Γ-conservative extension of T1 iff each concept C ∈ L(Γ)
that is satisﬁable relative to T1 is satisﬁable relative to T1∪T2.
Therefore, a concept C ∈ L(Γ) that is satisﬁable relative to
T1, but not relative to T1 ∪ T2 witnesses that T1 ∪ T2 is not a
conservative extension of T1. We call such a concept a wit-
ness concept.
Let us give an example for conservative extensions in the
description logic ALCQI. Assume that T1 is a TBox formal-
izing knowledge about universities:

Lecture (cid:11) ∃has subject.Subject (cid:8) ∃given by.Lecturer

−.(Academic (cid:5) Admin)

Intro TCS (cid:11) Lecture
Lecturer (cid:11) Professor (cid:5) TeachingAssistant
Lecturer (cid:11) ∃employed by.University
University (cid:11) ∀employed by
The upper part of T1 describes university lectures, saying,
e.g., that every introductory lecture on theoretical computer
science (TCS) is a lecture. The lower part of T1 describes
universities and their employees. Suppose now that we want
to reﬁne the part of the ontology that is concerned with lec-
tures. We extend the signature by adding the concept names
AutomataTheory and ComplexityTheory and state in T2 that
these subjects are discussed in every introductory TCS lec-
ture. We also say that automata theory and complexity theory

IJCAI-07

454

are different things:
Intro TCS (cid:11) ∃has subject.AutomataTheory
Intro TCS (cid:11) ∃has subject.ComplexityTheory

⊥ (cid:16) AutomataTheory (cid:8) ComplexityTheory
Intuitively, this addition should have an impact on the up-
per part of T1 since it adds information about lectures, but it
should not affect the lower part which is not concerned with
lectures. This intuition can be formally captured by conserva-
tive extensions: if we choose Γ to be the set of all predicates
used in the lower part of T1, then T1 ∪ T2 is a Γ-conservative
extension of T1. Thus, the lower part of T1 is not affected
by the addition of T2. If we choose Γ to be the predicates
in the upper part of T1, then T1 ∪ T2 is not a Γ-conservative
extension, a witness concept being

IntroTCS (cid:8) ((cid:2) 1 has subject (cid:3)).

By considering these two cases of conservative extensions,
the ontology designer can thus verify that his modiﬁcation
changes the TBox (only) in the intended way.
This example also shows that conservative extensions de-
pend on the descripion logic L: the TBoxes T1 and T2 are
actually formulated in ALCI and we have seen that if Γ is
the set of predicates in the upper part of T1, then T1 ∪ T2
is not a Γ-conservative extension of T1. However, this only
holds since we assumed ALCQI to be the underlying DL
and thus allowed number restrictions in the witness concept.
If we switch the underlying DL to ALCI, then T1 ∪ T2 is a
Γ-conservative extension of T1, for the same Γ. In the next
section, we investigate a purely model-theoretic version of
convervative extension, which does not depend on the lan-
guage.
2.1 Model Conservative Extensions
In mathematical logic and software speciﬁcation [9], there
are two different kinds of conservative extensions: one that
is based on the consequence relation “|=” as in Deﬁnition 1
and one that is based on models only . For simplicity, we
formulate this second notion only for the case where Γ =
sig(T1).
Deﬁnition 2 (Model Conservative Extension) Let T1 and
T2 be TBoxes. We say that T1 ∪ T2 is a model conserva-
tive extension of T1 iff for every model I of T1, there exists a
model of T1 ∪ T2 which can be obtained from I by modifying
the interpretation of the predicates in sig(T2) \ sig(T1) while
leaving the predicates in sig(T1) ﬁxed.
To distinguish the two versions of conservative extensions, in
this section we call the one based on “|=” a deductive conser-
vative extension.
The notion of a model conservative extension is more strict
than the deductive one: if T1 ∪ T2 is a model conservative
extension of T1, then it is clearly also a deductive conservative
extension of T1, but the converse does not hold. To see the
latter, consider the TBoxes
T1 = {∃r.(cid:3) (cid:8) ∃s.(cid:3) = (cid:3)}, T2 = {∃r.A (cid:8) ∃s.¬A = (cid:3)}.
It is not hard to see that T1 ∪ T2 is a deductive conservative
extension of T1 if ALC (or even ALCQI) is the language for

(cid:3)

IJCAI-07

455

witness concepts, but it is not a model conservative extension.
The stronger notion of model conservative extensions is of
interest for query answering modulo ontologies. In this case,
one might want to ensure that under the addition of any ABox
A (over the signature of T1) the answers to queries (over the
signature of T1) to T1 ∪T2 ∪A coincide with those to T1 ∪A.
This immedialy follows if T1 ∪ T2 is a model conservative
extension of T1, but it does not follow if T1 ∪ T2 is just a
deductive conservative extension of T1.

(cid:2)

However, from an algorithmic viewpoint model conserva-
tive extensions are a problematic choice: we show that they
are highly undecidable even in the basic description logic
ALC (and therefore also in all its extensions). The proof of
the following result is by a reduction from the semantic con-
sequence problem in modal logic and can be found in [8].
Theorem 3 It is Π1
1-hard to decide whether for two given
ALC TBoxes T1 and T2, the TBox T1 ∪ T2 is a model con-
servative extension of T1.
3 Decidability in ALCQI
We give a tight complexity bound for deciding conservative
extensions in ALCQI. We use |C| to denote the length of a
C(cid:3)D∈T (|C| + |D|)
concept C, and |T | to denote the size
of a TBox T .
Theorem 4 It is 2-EXPTIME-complete to decide conserva-
tive extensions in ALCQI. In the case that T1 ∪ T2 is not
a conservative extension of T1, there exists a witness concept
C of length at most 3-exponential in |T1 ∪ T2| that can be
computed in time polynomial in |C|.
The lower bound can be proved exactly in the same way as
the 2-EXPTIME lower bound for conservative extensions in
ALC [4]. However, the lower bounds from ALC do not sim-
ply transfer to ALCQI and it is necessary to walk through
the proof in [4] and check that it also works for the case of
ALCQI.
In the following, we concentrate on proving the
upper bound. It is established by devising a 2-EXPTIME al-
gorithm that, for convenience, decides non-conservative ex-
tensions.
We start by reminding that ALCQI has the tree model
property. More precisely, a tree interpretation is an inter-
pretation I = (ΔI,·I, <I) equipped with an additional re-
lation <I ⊆ ΔI × ΔI such that (i) (ΔI, <I) is a tree,
rI ∪ r−I = < ∪ <−1, and (iii) sI and rI are
(ii)
disjoint for all distinct roles s and r. In ALCQI, every con-
cept C that is satisﬁable relative to a TBox T is satisﬁable in
a tree model of T , i.e., a model of T that is a tree interpreta-
tion [7]. In this section, when talking of an interpretation or
model of a TBox we always mean a tree interpretation.
To develop the algorithm for deciding non-conservative ex-
tensions in ALCQI, we introduce a new kind of witness for
non-conservativity. The new witnesses are very similar to ﬁ-
nite tree interpretations and easier to work with than witness
concepts. For a signature Γ, let a literal type S for Γ be a
subset of lit(Γ) := {A,¬A | A ∈ Γ ∩ NC} such that for each
A ∈ Γ ∩ NC, A ∈ S iff ¬A /∈ S. A Γ-role is a role r such
that r or r− is in Γ.

r∈NR

Deﬁnition 5 (Γ-tree) A Γ-tree T = (W, <, L, O) is a ﬁnite
intransitive tree (W, <) such that each node w ∈ W is la-
beled by a literal type L(w) for Γ, each edge (w, w(cid:2)) is la-
beled by a Γ-role L(w, w(cid:2)), and O ⊆ W is a set of leafs of
(W, <).

roles r,

Γ-role r is in the range of f.

Essentially, a Γ-tree is a ﬁnite tree interpretation equipped
with an additional unary predicate O denoting a subset of the
leafs. The following deﬁnition provides a way to relate Γ-
trees and actual interpretations.
Deﬁnition 6 (Γ-embedding) Let T = (W, <, L, O) be a Γ-
tree with root w ∈ W , and I an interpretation with root d ∈
ΔI. A Γ-embedding f : T → I is an injection from W to
ΔI such that
• f(w) = d,
• L(v, v(cid:2)) = r iff f(v)rIf(v(cid:2)), for all v, v(cid:2) ∈ W and Γ-
• C ∈ L(v) iff f(v) ∈ CI, for all v ∈ W and C ∈ lit(Γ),
• if v (cid:14)∈ O, then every d(cid:2) ∈ ΔI with f(v)rId(cid:2) for some
T is called Γ-embeddable into I if there is a Γ-embedding
f : T → I.
The deﬁnition illustrates that Γ-trees represent a (ﬁnite) initial
part of (potentially inﬁnite) tree interpretations. This explains
the predicate O of Γ-trees: O marks those leafs in the Γ-tree
that are not necessarily leafs in the tree interpretation I that
we embed into. We can now establish Γ-trees as witnesses
for non-conservativity.
Lemma 7 T1 ∪ T2 is not a conservative extension of T1 w.r.t.
Γ iff there exists a Γ-tree T = (W, <, L, O) which is Γ-
embeddable into a model of T1 but not into any model of
T1 ∪ T2.
The general idea behind the algorithm is as follows: by
Lemma 7, to decide whether T1 ∪ T2 is not a conservative
extension of T1, it sufﬁces to decide whether there exists a Γ-
tree that is Γ-embeddable into a model of T1, but not into any
model of T1∪T2. This is what our algorithm will do. Alas, we
conjecture that there are cases in which the smallest such tree
is 3-exponential in |T1 ∪ T2|, and therefore a 2-exponential
algorithm cannot simply try to construct such a tree. Instead,
we check the existence of the Γ-tree by searching for certain
witnesses for the existence of such a tree. Before we can in-
troduce these witnesses (which should not be confused with
Γ-trees as witnesses for non-conservativity), we need to in-
troduce the notion of a type.
Deﬁnition 8 (Type) Let T be a TBox. We use cl(T ) to de-
note the smallest set that contains all concepts in T and is
closed under single negations and under subconcepts. A T -
type t is a subset of cl(T ) such that

• ¬C ∈ t iff C (cid:14)∈ t, for all ¬C ∈ cl(T );
• C1 (cid:8) C2 ∈ t iff C1 ∈ t and C2 ∈ t, for all C1 (cid:8) C2 ∈

cl(T ).

Given an interpretation I and u ∈ ΔI, the set
I (u) = {C ∈ cl(T ) | u ∈ CI}
tT

is a T -type. In what follows, we will not always distinguish
between the type t and the conjunction of all members of t.
We now introduce a witness for the existence of a Γ-tree that
is Γ-embeddable into a model of T1, but not into any model
of T1 ∪ T2. To avoid writing sub- and superscripts, from now
on we assume the input T1, T2, and Γ to be ﬁxed.
Deﬁnition 9 (Root pair, Internal pair) A root pair (t, U)
consists of a T1-type t and a set U of T1 ∪ T2-types. An inter-
nal pair (t(cid:2) →r t, U) consists of a Γ-role r, T1-types t(cid:2) and
t, and a function U mapping each T1 ∪ T2-type to a set of
T1 ∪ T2-types.
Intuitively, each (root or internal) pair encodes relevant infor-
mation about possible embeddings of a Γ-tree into models of
T1 and T1 ∪ T2. This is made precise by the notion of realiz-
ability.
Deﬁnition 10 (Realizable root pair) Let T = (W, <, L, O)
be a Γ-tree. A root pair (t, U) is realized by T iff
1. there exist a model I of T1 with root d ∈ tI and a Γ-
embedding f : T → I;
2. for every T1 ∪ T2-type s, we have s ∈ U iff there exist a
model I of T1 ∪T2 with root d ∈ sI and a Γ-embedding
f : T → I.

While root pairs encode information about possible embed-
dings of a Γ-tree into models of T1 and T1 ∪T2, internal pairs
encode information about possible embeddings of a Γ-tree
into rooted submodels of models of T1 and T1 ∪ T2. In the
following, if I is a (tree) interpretation and d ∈ ΔI, we write
Id to denote the sub-tree interpretation of I rooted at d.
=
Deﬁnition 11 (Realizable internal pair) Let
(W, <, L, O) be a Γ-tree. An internal pair (t(cid:2) →r t, U) is
realized by T iff
• there exist a model I of T1 and d(cid:2), d ∈ ΔI such that
d(cid:2) ∈ (t(cid:2))I, d(cid:2)rId, d ∈ tI, and there is a Γ-embedding
f : T → Id;
• for all T1 ∪ T2-types s, s(cid:2), we have s(cid:2) ∈ U(s) iff there
exist a model I of T1 ∪ T2 and d(cid:2), d ∈ ΔI such that
d(cid:2) ∈ (s(cid:2))I, d(cid:2)rId, d ∈ sI, and there is a Γ-embedding
f : T → Id.

T

A (root or internal) pair is realizable if there exists a Γ-tree T
which realizes it.
Observe that internal pairs store information not only about
the element d ∈ ΔI to which the root of T is mapped, but also
comprise the type t(cid:2) of the predecessor d(cid:2) of d in I and the
(unique!) role r which connects d(cid:2) and d. This is necessary
due to the presence of inverse roles and number restrictions
and bears some similarity to the double blocking technique in
tableau algorithms; see [7]. Also note that the U-component
of internal pairs is a function rather than a set because, intu-
itively, the possible types of d in models of T1 ∪ T2 depend
on the type of the predecessor d(cid:2) in such models.

Let us now describe the algorithm. By Lemma 7 and deﬁ-
nition of realizability, there exists a realizable root pair of the

IJCAI-07

456

form (t,∅) iff T1 ∪ T2 is not a conservative extension of T1
w.r.t. Γ. The algorithm for deciding non-conservative exten-
sions searches for such a root pair. The easiest case is that a
root pair (t,∅) is realized by a singleton Γ-tree, i.e., a Γ-tree
that consists of only a single node. This special case is tested
ﬁrst.
If the test is not successful, we must check whether
there is a root pair (t,∅) that is realized by a non-singleton
tree T = (W, <, L, O). Assume that this is the case and that
the root of T is w. Then each subtree of T rooted at a succe-
sor node w(cid:2) of w realizes an internal pair (ˆt(cid:2) →ˆr ˆt, ˆU) with
ˆt(cid:2) = t and ˆr = L(w, w(cid:2)). Intuitively, this means that we can
check realization of the root pair (t,∅) in T based on the re-
alization of internal pairs in trees of strictly smaller height.
Similarly, we can check the realizability of internal pairs in a
Γ-tree based on the realizability of internal pairs in Γ-trees of
strictly smaller height. Based on these observations, our algo-
rithm repeatedly generates internal pairs that are realized by
Γ-trees of larger and larger height until all such pairs are gen-
erated. It then checks whether there exists a root pair (t,∅)
that is realizable based on the generated internal pairs. The
following deﬁnition formalizes one step of the algorithm in
which root pairs or new internal pairs are generated from an
existing set of internal pairs.
In the following, if T is a Γ-tree and w ∈ W , we write Tw

to denote the sub-tree of T rooted at w.
Deﬁnition 12 (One step) Let R be a set of internal pairs.
A root pair (t, U) (resp. internal pair (t(cid:2) →r t, U)) can be
obtained in one step from R if there exists a Γ-tree T =
(W, <, L, O) with root w such that

• T realizes (t, U) (resp. (t(cid:2) →r t, U));
• for all w(cid:2) ∈ W with w < w(cid:2), there exists an internal
pair p = (ˆt(cid:2) →ˆr ˆt, ˆU) ∈ R such that ˆt(cid:2) = t, ˆr =
L(w, w(cid:2)), and p is realized by Tw(cid:2).

The details of our algorithm are given in Figure 2, where

mT1,T2 := 2 × |T1 ∪ T2| × 23×|T1∪T2|.

Intuitively, considering only a subset of Ri of cardinality
mT1,T2 means that we limit our attention to Γ-trees of out-
degree mT1,T2. This is justiﬁed by the following lemma.
Lemma 13 If T1 ∪ T2 is not a conservative extension of T1
w.r.t. Γ, then there exists a root pair (t,∅) realized by a Γ-tree
T of outdegree at most mT1,T2.
It remains to be shown that each step of the algorithm can
be carried out effectively and that the algorihm yields the 2-
EXPTIME upper bound stated in Theorem 4. We start with
the former. The proof of the following lemma relies on the
fact that satisﬁability in ALCQI relative to TBoxes can be
decided in EXPTIME [10].

Lemma 14 It can be checked in 2-exponential time (in the
size of T1, T2) whether a (root or internal) pair can be ob-
tained in one step from a set R of realizable internal pairs
with |R| ≤ mT1,T2.

Suppose TBoxes T1 and T2, and a signature Γ ⊆ sig(T1)
are given.
1. Determine the set Rr

ton Γ-trees. If Rr
T1 is not satisﬁed in any model). If Rr
pair (t, U) such that U = ∅, then accept. Else,

0 of root pairs realized by single-
0 = ∅, then reject the input (because
0 contains a root
2. Determine the set R0 of internal pairs realizable by
If R0 = ∅, then reject the input.
3. Generate the sequence R1,R2, . . . of sets of internal

singleton Γ-trees.
Else,

pairs such that

Ri+1 = Ri ∪ R(cid:2)
i,

where R(cid:2)
i is the set internal pairs which can be ob-
tained from some non-empty subset of Ri of cardinal-
ity not exceeding mT1,T2 in one step. This is done until
Ri = Ri ∪ R(cid:2)
i. Then accept the input if there exists
a root pair (t, U) with U = ∅ which can be obtained
in one step from some subset of Ri of cardinality not
exceeding mT1,T2. If no such root pair exists, reject
the input.

Figure 2: Algorithm for non-conservativeness w.r.t. Γ.

The number of internal pairs is bounded double exponentially
in the size of |T1 ∪ T2|. Therefore, the third step of the al-
gorithm stabilizes after at most double exponentially many
rounds. Together with Lemma 14, it follows that our algo-
rithm is a 2-ExpTime one.
Theorem 15 The algorithm in Figure 2 accepts input T1, T2,
Γ iff T1 ∪ T2 is not a conservative extension of T1 w.r.t. Γ. It
runs in 2-exponential time.
To show the upper bound on the size of witness concepts
stated in Theorem 4, we proceed as follows: ﬁrst, we ob-
serve that if the algorithm ﬁnds a realizable root pair (t,∅),
then this pair is realized by a Γ-tree of at most double expo-
nential depth and single exponential outdegree. Second, we
show how to convert such a Γ-tree into a witness concept of
three-exponential size.
4 Undecidability in ALCQIO
We show that conservative extensions are undecidable in
ALCQIO. The proof is by a reduction of the following un-
decidable tiling problem.
Deﬁnition 16 A domino system D = (T, H, V, R, L, T, B)
consists of a ﬁnite set T of
tiles, horizontal and vertical
matching relations H, V ⊆ T × T , and sets R, L, T, B ⊆ T
of right tiles, left tiles, top tiles, and bottom tiles. A so-
lution to D is a triple (n, m, τ) where n, m ∈
and
τ : {0, . . . , n − 1} × {0, . . . , m − 1} → T such that the
following hold:
1. (τ(i, j), τ(i + 1, j)) ∈ H, for all i < n and j ≤ m;
2. (τ(i, j), τ(i, j + 1)) ∈ V , for all i ≤ n and j < m;
3. τ(0, j) ∈ L and τ(n, j) ∈ R, for all j ≤ m;

IJCAI-07

457

4. τ(i, 0) ∈ B and τ(i, m) ∈ T , for all i ≤ n.
Using proof methods from [11], it is easy to show that it is
undecidable whether a given domino system D has a solution.
We show how to convert a domino system D into TBoxes
T1 and T2 such that D has a solution iff T1 ∪ T2 is not a
conservative extension of T1. In particular, models of witness
concepts will correspond to solutions of D.
Let D = (T, H, V, R, L, T, B) be a domino system. The
TBox T1 uses the following signature: an indidual name o,
role names rx and ry, concept names top, bottom, left, and
right and each element of T as a concept name. The TBox T1
contains the following:

• The roles rx, ry, and their inverses are functional:
y }
x , r−

(cid:3) (cid:11) ((cid:2) 1 r (cid:3)), for r ∈ {rx, ry, r−

one tile and the matching conditions are satisﬁed:

• Every position in the n × m grid is labeled with exactly
(cid:3) (cid:11) (cid:5)
(cid:3) (cid:11) (cid:8)
∀ry.t(cid:2)))
• The concepts left, right, top, bottom mark the bound-

(t (cid:8) (cid:8)
(t → ( (cid:5)

∀rx.t(cid:2) (cid:8) (cid:5)

t(cid:2)∈T, t(cid:2)(cid:6)=t

(t,t(cid:2))∈H

(t,t(cid:2))∈V

¬t(cid:2))

t∈T

t∈T

aries of the grid in the expected way:

right (cid:11) ¬∃rx.(cid:3) (cid:8) ∀ry.right (cid:8) ∀r−1
¬right (cid:11) ∃rx.(cid:3)

y .right

and similarly for left, top, and bottom.
• The individual name o marks the origin:
{o} (cid:11) left (cid:8) bottom.

The TBox T2 introduces two new concept names Q and P . It
contains the following two concept inclusions:
{o} (cid:11) Q (cid:11) ∃rx.Q (cid:5) ∃ry.Q (cid:5) (∃rx.∃ry.P (cid:8) ∃ry∃rx.¬P )
The idea behind this deﬁnition of T2 is to enforce that mod-
els I of witness concepts are such that (i) there is no inﬁnite
outgoing rx/ry-path starting at oI and (ii) rx and ry commute
in the connected part of I rooted at oI. This is achieved as
follows: if (i) is violated, then we can ﬁnd an assignment of
Q in I that satisﬁes T2. Similarly, if (ii) is violated, then we
can ﬁnd an assignment of (Q and) P in I that satisﬁes T2.
It can be checked that, as intended, D has a solution iff
T1 ∪ T2 is not a conservative extension of T1. Here, we only
show how to construct a witness concept in the case that D
has a solution. Such a witness concept C has to ensure that
for all models I of C and T1, the connected part of I rooted
at oI is isomorphic to the n × m-grid.
←−w the word that
is obtained by reversing w and then adding ·− to each symbol.
Let |w|r denote the number of occurrences of the symbol r in
w. Now, C is the conjunction of
y .top
and for every w ∈ {rx, ry}∗ such that |w|rx
m, the concept
y · ←−w ).{o},
x r−
where ∃w.D abbreviates ∃r1.···∃rk.D if w = r1 ··· rk. It
is readily checked that C enforces an n× m-grid as required.

For every word w ∈ {rx, ry}∗, denote by

x .right (cid:8) ∀rm

< n and |w|ry

∃(w · rxryr−

{o} (cid:8) ∀rn

<

Theorem 17 In ALCQIO, conservative extensions are un-
decidable.
Note that the theorem applies even to the case where Γ =
sig(T1) and we allow ((cid:2) 1 r (cid:3)) as the only form of number
restriction.
5 Conclusion
Although the high computational complexity suggests that ef-
ﬁcient tools for deciding conservative extensions will be difﬁ-
cult to attain, our results and techniques lay theoretical foun-
dations that are important for practical applications of conser-
vative extensions. These could be based on approximations,
semi-decision procedures, and on syntactic restrictions in a
normative framework such as [3]. Finally, transitive roles are
a main ingredient of DLs underlying OWL-DL. It remains
an important open problem to investigate conservative exten-
sions for DLs containing transitive roles and role hierarchies.
References
[1] G. Antoniou and K. Kehagias. A note on the reﬁnement
of ontologies. International Journal of Intelligent Sys-
tems, 15:623–632, 2000.

[2] F. Baader, I. Horrocks, and U. Sattler. Description logics
as ontology languages for the semantic web. In Mecha-
nizing Mathematical Reasoning, volume 2605 of LNAI,
pages 228–248. Springer, 2005.

[3] B. Cuenca-Grau, I. Horrocks, O. Kutz, and U. Sattler.
Will my ontologies ﬁt together? In Proc. of DL06, num-
ber 189 in CEUR-WS (http://ceur-ws.org/), 2006.

[4] S. Ghilardi, C. Lutz, and F. Wolter. Did I damage my on-
tology? A case for conservative extensions in descrip-
tion logic. In Proc. of KR2006, pages 187–197, 2006.

[5] B. Grau, B. Parsia, E. Sirin, and A. Kalyanpur. Mod-
ularity and web ontologies. In Proc. of KR2006, pages
198–208, 2006.

[6] N. Guarino and C. Welty. An overview of OntoClean.

In Handbook of Ontologies. Springer, 2004.
I. Horrocks, U. Sattler, and S. Tobies. Practical rea-
soning for expressive description logics.
In Proc.
of LPAR’99, number 1705 in LNAI, pages 161–180.
Springer, 1999.

[7]

[8] C. Lutz, D. Walther, and F. Wolter.

Conser-
vative extensions in expressive description logics.
Technical
Available online from
http://www.csc.liv.ac.uk/∼frank.

report, 2006.

[9] T. Maibaum. Conservative extensions, interpretations
between theories and all
In Proc. of 7th
CAAP/FASE Conf. on Theory and Practice of Software
Development, pages 40–66, 1997.

that!

[10] S. Tobies. Complexity Results and Practical Algorithms
for Logics in Knowledge Representation. PhD thesis,
RWTH Aachen, 2001.

[11] P. van Emde Boas. The convenience of tilings.

In
A. Sorbi, editor, Complexity, Logic, Recursion Theory.
1997.

IJCAI-07

458

