On the Compilation of Stratiﬁed Belief Bases
under Linear and Possibilistic Logic Policies

Salem Benferhat

Safa Yahi

Habiba Drias

CRIL-CNRS, Universit´e d’Artois

Universit´e USTHB

Institut National d’Informatique

rue Jean Souvraz

BP 32 El-Alia Bab Ezzouar

BP 68M Oued Smar

62307 Lens Cedex. France.
benferhat@cril.univ-artois.fr

16111 Algiers. Algeria.
yahi.safa@gmail.com

16309 Algiers. Algeria.

h drias@ini.dz

Abstract

Developing efﬁcient approaches for reasoning un-
der inconsistency is an important issue in many ap-
plications. Several methods have been proposed to
compile, possibly inconsistent, weighted or strat-
iﬁed bases. This paper focuses on the well-known
linear order and possibilistic logic strategies. It pro-
vides a way for compiling a stratiﬁed belief base
in order to be able to process inference from it in
polynomial time. The resulting extra compilation
cost is very low. In particular, the number of addi-
tional variables, that are added to original stratiﬁed
bases, corresponds exactly to the number of priority
levels existing in the base. Moreover, our compi-
lation approach allows an efﬁcient computation of
weighted possibilistic conclusions and possibilistic
conditioning.

1 Introduction
Integrating pieces of information coming from different, pos-
sibly conﬂicting sources may lead to reason with inconsis-
tent formulae.
In this case, classical inference can not be
used to exploit the given belief base, since from an incon-
sistent base every formula can be inferred (ex falso quodlibet
sequitur principle).

Many approaches have been proposed in order to reason
under inconsistency without trivialization. While some of
them consist in weakening the inference relation such as
paraconsistant logics, others weaken the available beliefs like
the well-known coherence based-approaches [Rescher and
Manor, 1970].

Coherence-based approaches can be characterized by the
two following steps: i) give up some formulas of the incon-
sistent belief base Σ in order to restore its consistency; this
operation results into one or several consistent subbases of Σ;
and ii) use classical entailment on these consistent subbases
to deﬁne plausible conclusions from the knowledge base Σ.
When priorities attached to pieces of knowledge are available,
the task of coping with inconsistency is simpliﬁed, because
priorities give information about how to solve conﬂicts.

Examples of prioritized coherence approaches which se-
lect one consistent subbase are the possibilistic logic ap-
[Dubois et al., 1994], Williams’ adjustment ap-
proach

proach [Williams, 1995], and linear order approach [Nebel,
1994]. Examples of approaches which use several consis-
tent subbases are Rescher’s notion of acceptable subbases
[Rescher, 1976], Brewka’s preferred sub-theories [Brewka,
1989] and the lexicographical system [Benferhat et al., 1993;
Lehmann, 1995].

In this paper, we mainly focus on the linear order and
on possibilistic logic policies. Given a stratiﬁed belief base
Σ = (S1, . . . , Sk) (S1 contains the most prioritized formulas,
while the stratum Sk contains the least prioritized formulas),
possibilistic logic only takes into account the ﬁrst i consistent
strata, and stops when inconsistency is met. Nebel [Nebel,
1994] has elaborated a less liberal way to select one consis-
tent subbase. When inconsistency occurs at some strata k, we
give up the whole stratum (concerned by inconsistency), but
we continue to add strata with lower certainty if consistency
is preserved.

From a practical point of view, reasoning under inconsis-
tency is a hard problem [Nebel, 1998]. Indeed, deciding the
inference from a stratiﬁed belief base with respect to the pos-
sibilistic policy is a Δp
[O(log n)]-complete problem while
deciding the inference from it with respect to the linear order
policy is Δp

2-complete.

2

To address this problem, one can use knowledge com-
pilation. Knowledge compilation is a key direction of re-
search in Artiﬁcial Intelligence [Selman and H.Kautz, 1996;
Cadoli and Donini, 1997; Darwiche and Marquis, 2002]. It
consists in preprocessing off-line the knowledge base in or-
der to make the inference from it easier on-line.

A key issue, in possibilistic logic, is how to determine
the level of uncertainty associated with formulas that can be
derived from an inconsistent knowledge base. Another im-
portant issue is how to compute ”possibilistic conditioning”.
Namely, like in possibilistic networks, given some evidence,
often provided in the form of a conjunction of literals (a term),
we need to evaluate the impact of this evidence on the cer-
tainty degrees of variables or more generally of formulas of
knowledge bases.

In this paper, we propose an efﬁcient way to compile strat-
iﬁed belief bases with respect to the linear order and possi-
bilistic logic policies. In order to support possibilistic con-
ditioning and the computation of weights associated with
concluded formulas, we need to keep track and encode the
weights associated with formulas. This is obtained by adding

IJCAI-07

2425

new variables, as it has been previously done in some exist-
ing works [Darwiche and Marquis, 2004; Coste-Marquis and
Marquis, 2004; Benferhat and Prade, 2005].

The main advantage of our approach is the resulting ex-
tra compilation cost which is very low. Indeed, the number
of additional variables needed for compiling stratiﬁed knowl-
edge bases under linear order and possibilistic policy, is only
equal to the number of strata in the belief base. In [Benferhat
and Prade, 2006] a compilation method has been proposed
to compile possibilistic bases (and not linear order policy).
However, this approach needs to add binary clauses and is
based on the idea of forgetting variables which limits the tar-
get compilation languages that can be exploited. Moreover, it
does not support possibilistic conditioning.

The remainder of the paper is organized as follows. Sec-
tion 2 introduces stratiﬁed belief bases and the correspond-
ing inference relations w.r.t the linear order and possibilistic
logic policies. We also deﬁne how to associate weights to the
inferred conclusions and the notion of possibilistic condition-
ing. After a brief background on knowledge compilation in
Section 3, we describe our compilation method in the case of
linear order policy in Section 4. In Section 5, we adapt this
method to compile possibilistic knowledge bases. We also,
show how to handle weighted possibilistic inference relation
and possibilistic conditioning. Section 6 provides some com-
parative studies and concludes the paper.

2 Stratiﬁed Belief Bases
We consider a ﬁnite propositional language denoted by L. |=
denotes classical consequence relation. Greek letters Φ, Ψ,
. . . represent formulas. (cid:2) and ⊥ denote the constants true and
false respectively.

A stratiﬁed belief base is a set of formulae equipped with a

total pre-order. Formally:
Deﬁnition 1 A stratiﬁed belief base (SBB for short)Σ is a
ﬁnite sequence (S1, . . . , Sk) where Si (i = 1, . . . , k) is a
stratum containing propositional formulas having the same
priority level i and which are more reliable than formulas of
the stratum Sj for j > i.

According to coherence-based approaches,
the inference
from a stratiﬁed belief base is considered as a two step pro-
cess consisting ﬁrst in generating some preferred consistent
subbases of Σ and then using classical inference from some
of them depending on the entailment principle used.

Many policies for the selection of subbases can be con-
sidered, especially the possibilistic policy [Dubois et al.,
1994], the linear order policy [Nebel, 1994], the inclusion
preference policy [Brewka, 1989] and the lexicographical
policy [Benferhat et al., 1993]. Among them, we focus on
the possibilistic and the linear order policies.

The idea of the possibilistic logic policy is to start with
formulas having the highest priority level and to propagate
as many prioritized formulas as possible while maintaining
consistency. We stop at the ﬁrst priority level where we meet
inconsistency and the formulas at this level and below are

ignored. Formally:

Deﬁnition 2 Let Σ = (S1, . . . , Sk) be a SBB. The set ΣP O
of all the preferred subbases of Σ w.r.t the possibilistic policy
is the singleton {
i=1 Si}, where s is the smallest index s.t.
(cid:2)s

i=1 Si is inconsistent. If Σ is consistent, then ΣP O = Σ.

(cid:2)s−1

As to the linear order policy which keeps more information,
it does not stop at the ﬁrst level where it meets inconsistency:
when an inconsistency is encountered, the current stratum is
dropped, and the process moves to the next stratum and so on.
Formally:
Deﬁnition 3 Let Σ = (S1, . . . , Sk) be a SBB. The set ΣLO of
all the preferred subbases of Σ w.r.t the linear order policy
is the singleton {
i = Si if
Si ∪
Example 1 Let Σ = (S1, S2, S3, S4) be such that:

j is consistent, ∅ otherwise.

i is deﬁned by S (cid:2)

j=1 S (cid:2)

(cid:2)i−1

(cid:2)k

i=1 S (cid:2)

i}, where S (cid:2)

S1 = {a ∨ b}
S2 = {¬a, c}
S3 = {¬b, d ∨ e}
S4 = {b ∨ d, e}.
• S1∪S2 is consistent whereas S1∪S2∪S3 is not. Accord-
ing to the possibilistic policy, we stop at the ﬁrst stratum
where we meet inconsistency thus ΣP O = S1 ∪ S2 =
{a ∨ b, ¬a, c}.

• As for the linear order policy, we delete S3 and continue
the treatment with the other strata. S1 ∪ S2 ∪ S4 is con-
sistent so ΣLO = S1 ∪ S2 ∪ S4 = {a ∨ b, ¬a, c, b ∨ d, e}.
Deﬁnition 4 Let Σ = (S1, . . . , Sk) be a SBB and Ψ a for-
mula.

• Ψ is a consequence of Σ w.r.t the possibilistic policy,

denoted by Σ |=P O Ψ, iff ΣP O |= Ψ.

• Ψ is a consequence of Σ w.r.t the linear order policy,

denoted by Σ |=LO Ψ, iff ΣLO |= Ψ.

Example 2 Let us consider again the stratiﬁed belief base Σ
given in Example 1. For the ﬁrst inference relation, we have
for instance, Σ |=P O b. As to the second one, we have for
example Σ |=LO e.
It is easy to see that |=LO goes beyond |=P O, namely for
each propositional formula Ψ, if Σ |=P O Ψ then Σ |=LO Ψ.

A key issue in possibilistic logic is how to compute the

certainty degree associated with inferred formulas:
Deﬁnition 5 Let Σ = (S1, . . . , Sk) be a stratiﬁed belief base
and Ψ be a formula. Ψ is a weighted consequence of Σ to a
degree i, denoted by Σ |=we (Ψ, i), iff:

a) S1 ∪ . . . ∪ Si is consistent;
b) S1 ∪ . . . ∪ Si |= Ψ;
c) (cid:2)j < i : S1 ∪ . . . ∪ Sj |= Ψ.
Lastly, in possibilistic logic we are also interested in com-

puting possibilistic conditioning. Namely,
Deﬁnition 6 Let e be a consistent term. Then Ψ is a conclu-
sion of conditioning Σ by e to a rank i iff Σ ∪ S0 = {e} |=we
(Ψ, i), where S0 is a new and high important stratum.

IJCAI-07

2426

Possibilistic conditioning inference is an important concept
in possibilistic theory. It is, to some extent, the logical coun-
terpart of possibilistic propagation algorithms in possibilistic
networks.

2

Following [Nebel, 1998; Lang, 2000], deciding the possi-
bilistic inference is Δp
[O(log n)]-complete : it needs at most
log2 n calls to SAT solver. As for the linear order one, it is
more expensive from a computational point of view. Indeed,
deciding it is a Δp
2-complete which means that it can be de-
cided in polynomial time using NP oracles [Nebel, 1994].
We refer the reader to [Papadimitriou, 1994] for more details
about computational complexity.

3 Knowledge Compilation

The key motivation of Knowledge compilation is that a
knowledge base is not modiﬁed very often, and the same
base is used to answer many queries (see [Cadoli and Donini,
1997] for a survey). So, the idea of knowledge compilation is
to split query answering into two phases:

• ﬁrst, the knowledge base is preprocessed to obtain an
appropriate data structure. Such a phase is called off-line
reasoning.

• the second phase which is called on-line reasoning, con-
sists in answering queries using the data structure gener-
ated during the ﬁrst phase.

A target compilation language is a class of formulas which is
tractable for clause deduction at least. Stated otherwise, it is
a language which permits at least achieving clausal deduction
in polynomial time.

Initially, the well-known prime implicates language (PI for
short) was the target compilation language on which most
of the compilation methods focus. Recently, Darwiche and
Marquis have considered in [Darwiche and Marquis, 2002]
other target compilation languages. These languages are
special cases of the NNF ( Normal Negation Form) language
obtained by imposing some properties. A NNF formula is a
formula constructed with literals using only the conjunction
and disjunction operators. As to the properties, one can list
decomposability, determinism, smoothness, decision, order,
etc.

The resulting target compilation languages are DNF,
DNNF, d-DNNF, sd-DNNF, FBDD, OBDD, OBDD<,
MODS, PI and IP. Additionally, they are compared in terms of
their spacial efﬁciency via the succinctness criteria and also
in terms of the set of logical queries and transformations they
support in polynomial time.

With the exception of PI, DNNF is the most succinct
among all target compilation languages. In fact, it is known
that PI is not more succinct than DNNF, but it is unknown
whether DNNF is more succinct than PI. A sentence in DNNF
(for Decomposable NNF) is a NNF sentence satisfying the
decomposability property: for each conjunction C in the sen-
tence, the conjuncts of C do not share variables [Darwiche,
2001].

4 Compiling Stratiﬁed Belief Bases under the

Linear Order Policy

2 -complete (resp. Δp

A classical way to compile a SBB under the linear order (resp.
possibilistic logic) policy consists ﬁrst in generating the pre-
ferred consistent subbase with respect to this policy. This step
[O(log n)]-
comes down to solve a ΔP
complete) problem. Then we compile the resulting (classical)
base into a target compilation language. We stress here that
such an effort can not be exploited for handling the possibilis-
tic logic policy. Namely, such approach is not appropriate to
compute weighted possibilistic conclusions and possibilistic
conditioning.

2

Our method relies on a propositional encoding of the SBB
by adding new variables which the number is equal to the
number of its strata. Then we proceed to compiling this
propositional encoding into a target compilation language and
then generating in polynomial time the base that corresponds
to the linear order policy or even to the possibilistic one. The
additional variables will be deleted from the ﬁnal result.

4.1 Propositional Encoding of a Stratiﬁed Belief

Base

Let Σ = (S1, . . . , Sn) be a SBB. The ﬁrst step in our com-
pilation method consists in encoding the given base into a
classical propositional base denoted by KΣ. This encoding
takes advantage of the one recently proposed in [Benferhat
and Prade, 2005] for handling an extension of possibilistic
logic.

In fact, for each stratum Si, we will introduce a new propo-
Intuitively, Ai means something like
sitional variable Ai.
“the situation is Ai- abnormal“. Hence, for each formula Φij
from the stratum Si will correspond the propositional formula
Φij ∨ Ai which can be read as “Φij is true or the situation is
Ai-abnormal”.

In this paper, (Φij ∨ Ai) will be used as an encoding of
the fact that the certainty degree or the priority rank of Φij is
Ai. The use of abnormal predicates have been used in several
non-monotonic formalisms, e.g., [McCarthy, 1980].
Deﬁnition 7 Let Σ = (S1, . . . , Sk) be a SBB. The proposi-
tional encoding associated with Σ, denoted by KΣ, is the
propositional knowledge base deﬁned by:
{Φij ∨ Ai}}

KΣ =

(cid:2)

{

(cid:2)k

i=1

Φij ∈Si

We note that generally, the number of strata in a SBB is
very low. Hence, the cost of the propositional encoding we
propose here is very low too.
Example 3 Let us consider again the SBB Σ given in Exam-
ple 1. Let A1, A2, A3 and A4 be four propositional variables
associated with strata S1, S2, S3 and S4 respectively. Using
the above deﬁnition, the propositional knowledge base asso-
ciated with Σ is:

KΣ = {a ∨ b ∨ A1, ¬a ∨ A2, c ∨ A2, ¬b ∨ A3,
d ∨ e ∨ A3, b ∨ d ∨ A4, e ∨ A4}.

4.2 Conditioning
We review in this section, the operation of conditioning which
will be useful for our approach.

IJCAI-07

2427

Deﬁnition 8 The conditioning of a propositional formula Ψ
on a consistent term (a conjunction of literals)γ, denoted by
CD(Ψ, γ), is the formula obtained from Ψ by substituting ev-
ery literal of γ in Ψ by (cid:2) if it is consistent with γ, by ⊥
otherwise.

Example 4 For instance we have:

• The conditioning of the formula Ψ = (¬a ∧ ¬b) ∨ (b ∧ c)
on the term γ = ¬a ∧ c, CD(Ψ, γ), gives ((cid:2) ∧ ¬b) ∨
(b ∧ (cid:2)).

• Conditioning the same formula on the term a ∧

¬b, CD(Ψ, a ∧ ¬b) gives (⊥ ∧ (cid:2)) ∨ (⊥ ∧ c).

Following [Darwiche and Marquis, 2002], for any target
compilation language C considered in [Darwiche and Mar-
quis, 2002], C satisﬁes conditioning. This means that given
a formula Ψ from C and any consistent term γ, we can con-
struct in polytime a formula which belongs to C and is equiv-
alent to CD(Ψ, γ).
Remark 1 In the following, in CD(Ψ, γ), γ is always a lit-
eral (an atom or a negated atom).

4.3 Compiling Linear Based Knowledge Bases
Given a stratiﬁed belief base Σ, we deﬁne its compilation
with respect to a given target compilation language C as
shown by the following deﬁnition:
Deﬁnition 9 Let Σ = (S1, . . . , Sk) be a stratiﬁed belief base
and KΣ be its propositional encoding using Deﬁnition 7. Let
C be any target compilation language. The compilation of Σ
w.r.t. C, denoted by CompC
Σ , is the compilation of KΣ into
C, i.e., C(KΣ).

We propose now the following algorithm which provides
C
Σ and condi-

an efﬁcient way to generate ΣLO using Comp
tioning:

Σ

Algorithm 1: Computing ΣLO
Data: CompC
Result: The compilation of ΣLO
Begin
K ← CompC
Σ ;
for i ← 1 to k do

if K |= Ai then K ← CD(K, Ai);

else K ← CD(K, ¬Ai);

end

return K;
end

Proposition 1 The propositional knowledge base returned
by Algorithm 1 is equivalent to ΣLO given by Deﬁnition 3.

Proposition 1 shows the equivalence of the knowledge base
returned by the Algorithm 1 and ΣLO. Let us brieﬂy explain
the algorithm. It proceeds stratum per stratum and generates
progressively the compiled base w.r.t. the linear order policy.
The test in step 3 checks whether the stratum Si is inconsis-
tent (with previously accepted beliefs). If it is the case, then
all formulas of such stratum are ignored by replacing Ai ∨Φij
by (cid:2) ∨ Φij , which is equivalent to a tautology. If it is not the

case, the Φij are retained since Ai∨Φij is replaced by ⊥∨Φij
which is equivalent to Φij.

Let us illustrate the above algorithm with the following ex-

ample:
Example 5 Let Σ = (S1, S2, S3) be such that
S1 = {¬a ∨ b, a}
S2 = {¬b, c} and S3 = {¬b ∨ ¬d}.
It is easy to check that:

ΣLO = {¬a ∨ b, a, ¬b ∨ ¬d}.

Let A1, A2 and A3 be three propositional variables associ-
ated with S1, S2 and S3 respectively.
KΣ = {¬a ∨ b ∨ A1, a ∨ A1, ¬b ∨ A2, c ∨ A2, ¬b ∨ ¬d ∨ A3}.
Let C = DNNF so let us compute CompDN N F
K = CompDN N F
A2)) ∨ (b ∧ A2 ∧ (a ∨ A1) ∧ (¬d ∨ A3)).

= DN N F (KΣ) = (¬b ∧ A1 ∧ (c ∨

, we get :

Σ

Σ

• At the ﬁrst iteration, we have K (cid:3) A1 so

K ← CD(K, ¬A1) = b ∧ A2 ∧ a ∧ (¬d ∨ A3)

• At the second iteration, K |= A2 implies that

K ← CD(K, A2) = b ∧ a ∧ (¬d ∨ A3)

• At the third iteration, we have K (cid:3) A3 thus

K ← CD(K, ¬A3) = b ∧ a ∧ ¬d.

One can easily check that K is equivalent to ΣLO.
Proposition 2 Algorithm 1 is achieved in polynomial time
in the size of CompC
Σ . Moreover, the propositional base re-
turned by Algorithm 1 belongs to the target compilation lan-
guage C.

The corresponding proof is as follows. For all target
[Dar-
compilation language C, C satisﬁes conditioning
wiche and Marquis, 2002]. This means that CD(K, Ai) (or
CD(K, ¬Ai)) can be achieved in polynomial time and K still
belongs to C. In addition, since Ai is a clause, the deduction
test K |= Ai can be achieved in polynomial time. (cid:2)

Since ΣLO belongs to a target compilation language, the
inference from a stratiﬁed belief base Σ interpreted under the
linear order policy falls from Δp
2 down to P when queries are
in a CNF form.

It is important to note that the cost induced here is only the
one of the computation of CompC
Σ , i.e., the cost of the compi-
lation of the propositional base KΣ into the language C. The
choice of the target compilation language is determined only
via its concision. Hence, DNNF may be more interesting than
the other languages in this case.

5 Computing Possibilistic Conclusions and

Possibilistic Conditioning

5.1 Computing Possibilistic Inference
Compiling possibilistic knowledge bases has been recently
achieved in [Benferhat and Prade, 2006].
In this section,
we propose an alternative approach which offers several ad-
vantages with respect to the existing ones (see related works
section). Contrary to the approach proposed in [Benferhat
and Prade, 2006], our approach does not add binary clauses.
Moreover, our approach is ﬂexible since it supports all tar-
get compilation languages. Lastly, our approach allows the
computation of possibilistic conditioning.

IJCAI-07

2428

In fact, we suggest deriving another algorithm from
Algorithm 1 where once we meet an inconsistency for the
ﬁrst time, we suppress the current stratum responsible of the
inconsistency but also all the remaining strata.

Σ

Algorithm 2 : Computing ΣP O
Data: CompC
Result: The compilation of ΣP O
Begin
K ← CompC
Σ ;
i ← 1 ;
while K (cid:3) Ai and i ≤ k do

K ← CD(K, ¬Ai);
i ← i + 1;
end

while i ≤ k do

K ← CD(K, Ai);
i ← i + 1;
end

return K;
end

Proposition 3 The propositional knowledge returned by the
Algorithm 2 is equivalent to ΣP O given by Deﬁnition 2 and
belongs to C. Also, Algorithm 2 runs in polynomial time.
Example 6 Let us consider again the SBB Σ given in Exam-
ple 5. We can easily check that: ΣP O = {¬a ∨ b, a}.
= (¬b ∧ A1 ∧ (c ∨ A2)) ∨ (b ∧ A2 ∧ (a ∨ A1) ∧
CompDN N F
(¬d ∨ A3)). Until the second iteration, namely until meeting
an inconsistency, the process is the same as the linear order
policy so K = b∧a∧(¬d∨A3 ). From here, all the remaining
strata are ignored thus K ← CD(K, A3) = b∧a. Again one
can easily check that K is equivalent to ΣP O.

Σ

5.2 Compiling Weighted Consequences and

Possibilistic Conditioning

With a simple adaptation, one can still exploit CompC
Σ in
order to decide the weighted possibilistic inference relation
in polynomial time as shown by the following algorithm:

Algorithm 3 : Computing weighted conclusions
Σ , a CNF formula Ψ
Data: CompC
Result: a degree associated with Ψ
Begin
K ← CompC
Σ ;
is consequence ← false;
i ← 1 ;
while K (cid:3) Ai and i ≤ k and is consequence = false

do
K ← CD(K, ¬Ai);
if (K |= Ψ) then is consequence ← true;

else i ← i + 1;

end

if is consequence = true

thenΨ is a consequence of Σ with a degree i
else Ψ is not a consequence of Σ

end

One can check that Σ |=we (Ψ, i) using Deﬁnition 5 if and
only if Ψ is a consequence of Σ to a degree i using Algorithm
3.
Example 7 Let Σ = (S1, S2, S3) be such that:
S1 = {¬a ∨ b}, S2 = {a, c} and S3 = {¬b}.
Let us check if b is a possibilistic consequence of Σ and to
what degree. We can check that Σ |=we (b, 2). Let A1, A2 and
A3 be three propositional variables associated respectively
with the three strata in the knowledge base. KΣ = {(¬a ∨ b
∨ A1), (a ∨ A2), (c ∨ A2), (¬b ∨ A3)}. Let i = 1 and C =
DNNF.

= (a ∧ (c ∨ (¬c ∧ A2)) ∧ ((b ∧
K = CompDN N F
A3) ∨ (b ∧ A1))) ∨ (¬a ∧ A2 ∧ (¬b ∨ (b ∧ A3))).

Σ

• At the ﬁrst iteration, K (cid:3) A1. So, K ← CD(K, ¬A1) ≡
(a∧b∧A3 ∧(c∨(¬c∧A2)))∨(¬a∧A2 ∧(¬b∨(b∧A3))).
K (cid:3) b so i ← i + 1.

• At the second iteration, K (cid:3) A2. So, K ← CD(K, ¬A2)
≡ a∧b∧A3 ∧c. K |= b so is consequence ← true which
stops the loop. We deduce then that b is a possibilistic
consequence of Σ to degree 2.

Given a stratiﬁed belief base Σ that have been compiled
C
in Comp
Σ . We show how we can exploit such a compila-
tion effort in order to support the corresponding possibilistic
conditioning by a given observation e in polynomial time.

It is enough to substitute in Algorithm 3 the line
”while K (cid:3) Ai and i ≤ k and is consequence = false”
by :
”while K (cid:3) ¬e ∨ Ai and i ≤ k and is consequence =

false”.

Clearly, this adapted algorithm runs in polynomial time
since K belongs to a target compilation language and since
¬a ∨ Ai is a clause. We can also check that it captures possi-
bilistic conditioning.

6 Related Works and Conclusions
In this paper, we have proposed a method for compiling strat-
iﬁed belief bases with respect to the possibilistic and linear
order policies. The cost of the proposed method is very low
since the number of new variables that we introduce is equal
to the number of the strata which is generally negligible com-
pared to the number of formulas for instance. Furthermore,
this method is qualiﬁed to be ﬂexible since it permits to ex-
ploit efﬁciently all the existing propositional compilers. In
addition, re-partitioning the stratiﬁed belief base by permut-
ing some strata priority levels can be done efﬁciently without
a re-compilation cost. However, we can not change the ranks
of individual formulas unless we attach one variable per for-
mula.

We have proposed a compilation of possibilistic logic
knowledge bases that support weighted conclusions and pos-
sibilistic conditioning.

Our method can be favorably compared with other work
concerned with compiling stratiﬁed belief bases. Note ﬁrst
that contrary to existing approaches, our method allows to
compute weighted conclusion and possibilistic conditioning
from an already compiled stratiﬁed belief base without a re-
compilation cost. Let us mention the method proposed by

IJCAI-07

2429

Cost-Marquis and Marquis in [Coste-Marquis and Marquis,
2004]. Like ours, it is ﬂexible since it takes advantage of ex-
isting propositional knowledge bases compilation methods.
On the other hand, this method is more general in the sense
that it handles the two remaining preferred coherent subbases
selection policies namely the lexicographic and inclusion-
preference policies. However, the inherent cost is really ex-
pensive. In fact, they introduce a new propositional variable
per formula.
It is to note that this method was adapted in
[Darwiche and Marquis, 2004] to compile weighted knowl-
edge bases in the penalty logic framework.

This paper also brings several improvements regarding the
compilation of possibilistic knowledge bases. In this context,
a recent method has been introduced in [Benferhat and Prade,
2005]. At the encoding level, the latter uses additionally (k
-1) binary clauses. Furthermore, it is based essentially on
the use of forgetting variables and forgetting literals opera-
tions [Lang et al., 2003] which reduces the number of tar-
get compilation languages that can be efﬁciently exploited.
Indeed, this method exploits only the target compilation lan-
guages DNNF, DNF, PI and MODS which means that it is
less ﬂexible than the ours. Note ﬁrst that contrary to existing
approaches, our method allows to compute weighted conclu-
sion and possibilistic conditioning from an already compiled
stratiﬁed belief base without a re-compilation cost.

A future work is to extend these works for handling
possibilistic conditioning with uncertain input [Dubois and
Prade, 1997]. Another future work is to exploit results of
this paper in order to provide an alternative implementation
of existing propagation algorithms (such as junction trees
algorithms) for possibilistic networks.

Acknowledgments: This work is supported by the na-
tional project ANR Blanc MICRAC (Mod`eles informatiques
et cognitifs du raisonnement causal).

References
[Benferhat and Prade, 2005] S. Benferhat and H. Prade. En-
coding formulas with partially constrained weights in
possibilistic-like many-sorted propositional logic. In Pro-
ceedings of IJCAI’05, pages 1281–1286, 2005.

[Benferhat and Prade, 2006] S. Benferhat and H. Prade.
Compiling possibilistic knowledge bases. In Proceedings
of ECAI’2006, pages 337–341, Riva del Garda, Italy, 2006.
IOS Press.

[Benferhat et al., 1993] S. Benferhat, D. Dubois, C. Cayrol,
Inconsistency management and
J. Lang, and H. Prade.
prioritized syntaxbased entailment. In Proceedings of IJ-
CAI’93, pages 640–645, 1993.

[Brewka, 1989] G. Brewka. Preferred subtheories: an ex-
tended logical framework for default reasoning. In Pro-
ceedings of IJCAI’89, pages 1043–1048, 1989.

[Cadoli and Donini, 1997] M. Cadoli and F.M. Donini. A
survey on knowledge compilation. AI Communications,
10:137–150, 1997.

[Coste-Marquis and Marquis, 2004] S. Coste-Marquis and
P. Marquis. On stratiﬁed belief base compilation. Annals

of Mathematics and Artiﬁcial Intelligence, 42(4):399–442,
2004.

[Darwiche and Marquis, 2002] A. Darwiche and P. Marquis.
A knowledge compilation map. Journal of Artiﬁcial Intel-
ligence Research, 17:229–264, 2002.

[Darwiche and Marquis, 2004] A. Darwiche and P. Marquis.
Compiling propositional weighted bases. Artiﬁcial Intelli-
gence, 157(1–2):81–113, 2004.

[Darwiche, 2001] A. Darwiche. Decomposable negation
normal form. Journal of the ACM, 48(4):608–647, 2001.

[Dubois and Prade, 1997] D. Dubois and H. Prade. A syn-
thetic view of belief revision with uncertain inputs in the
framework of possibility theory. International Journal of
Approximate Reasoning, 17(2):295–324, 1997.

[Dubois et al., 1994] D. Dubois, J. Lang, and H. Prade. Pos-
sibilistic logic. Handbook of Logic in Articial Intelligence
and Logic Programming, 3:439–513, 1994.

[Lang et al., 2003] J. Lang, P. Liberatore, and P. Marquis.
Propositional independence - formula-variable indepen-
dence and forgetting. Journal of Artiﬁcial Intelligence Re-
search, 18:391–443, 2003.

[Lang, 2000] J. Lang. Possibilistic logic: Complexity and
algorithms. Handbook of Defeasible Reasoning and Un-
certainty Management Systems, 5:179–220, 2000.

[Lehmann, 1995] D. Lehmann. Belief revision revisited. In

Proceedings of IJCAI’95, pages 1534–1539, 1995.

[McCarthy, 1980] J. McCarthy. Circumscription : A form of
non-monotonic reasoning. Artiﬁcial Intelligence, 13:27–
39, 1980.

[Nebel, 1994] B. Nebel.

schemes: semantics, representation and complexity.
Proceedings of ECAI’94, pages 341–345, 1994.

Base revision operations and
In

[Nebel, 1998] B. Nebel. How hard is it to revise a belief
base? Handbook of Defeasible Reasoning and Uncertainty
Management Systems, 3:77–145, 1998.

[Papadimitriou, 1994] C. H. Papadimitriou. Computational
Complexity. Addison Wesley Publishing Company, 1994.

[Rescher and Manor, 1970] N. Rescher and R. Manor. On in-
ference from inconsistent premises. Theory and Decision,
1:179–217, 1970.

[Rescher, 1976] N. Rescher. Plausible Reasoning. Van Gor-

cum, Amsterdam, 1976.

[Selman and H.Kautz, 1996] B.

and H.Kautz.
compilation and theory approximation.

Selman

Knowledge
Journal of the ACM, 43(2):193–224, 1996.

[Williams, 1995] M.A. Williams.

change: a computational model.
CAI’95, pages 1541–1547, Montreal, Quebec, 1995.

Iterated theory base
In Proceedings of IJ-

IJCAI-07

2430

