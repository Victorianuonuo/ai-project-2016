586 

Session No.  14 Theorem Proving 

and  speed  up  proofs  in  analysis.  Section  2  ex­
plains  how  this  is  done  using  a  limited  theory 
of  types  and  routines  for  algebraic  simplifica­
tion  and  solving  linear  inequalities. 

In  Section  3  we  present  the  limit-heuristic, 

give  examples  of  its  use,  and  discuss  its 
"forcing"  nature  which  enables  it  to  curtail 
combinatorial  searches. 

The  reader  interested  only  in  resolution 

In  Section  5  we  give  a  detailed  description 

based  programs  should  skip  Sections  4  and  5  and 
go  directly  to  Section  6,  where  we  explain  how 
resolution  programs  can  be  altered  to  make  use 
of  the  limit  heuristic  and  other  concepts. 
of  a  computer  proof  of  the  theorem  that  the 
limit  of  the  product  of  two  functions  is  the 
product  of  their  limits.  This  proof  was  made  by 
a  program  which  is  the  same  as  that  described 
n  LI J,  except  that  the  subroutine,  RESOLUTION, 
in 
n  [1]  has  been  replaced  by  a  new  subroutine 
in 
called  IMPLY.  We  have  thus  eliminated  resolution 
altogether  from  our  program,replacing  it  by  an 
"implication  method"  which  we  believe  is  faster 
and  easier  to  use  (though  not  complete).  This 
implication  method  is  described  briefly  in 
Section  4,  and  excerpts  from  actual  computer 
proofs  using  it  are  given  there  and  in  Section  5. 

It  appears  that  some  of  these  ideas  may 

have  wider  implications  than  the  limited  scope 
in  which  they  were  used  here.  This  is  discussed 
in  the  comments  of  Section  7  and  throughout  the 
paper. 

COMPUTER PROOFS OF LIMIT THEOREMS 

W.  W.  Bledsoe,  Robert  S.  Boyer, 

William  H.  Henneman 

Massachusetts  Institute  of  Technology 

and  the  University  of  Texas 

them 

ABSTRACT:  Some  relatively  simple  concepts  have 
been  developed  which,  when  incorporated  into 
existing  automatic  theorem  proving  programs 
(including  those  using  resolution),  enable 
to  prove  efficiently  a  number  of  the  limit 
theorems  of  elementary  calculus,  including  the 
theorem  that  d i f f e r e n t i a te  functions  are  con­
tinuous.  These  concepts  include: 
theory  of  types,  to  designate  whether  a  given 
variable  belongs  to  a  certain  interval  on  the 
real  line,  (2)  An  algebraic  simplification 
routine,  (3)  A  routine  for  solving  linear  i n­
equalities,  applicable 
to  all  areas  of  analysis, 
and  (4)  A  "limit  heuristic",  designed  especially 
for  the  limit  theorems  of  calculus. 

(1)  A  limited 

Introduction. 

In  this  paper  we  describe 

jL 
some  relatively  simple  changes  that  have  been 
made  to  an  existing  automatic  theorem  proving 
program  to  enable  it  to  prove  efficiently  a  num­
ber  of  the  limit  theorems  of  elementary  calculus. 
These  changes  include  subroutines  of  a  general 
nature  which  apply  to  all  areas  of  analysis,  and 
a  special  "limit-heuristic"  designed  for  the 
limit  theorems  of  calculus. 

These  concepts  have  been  incorporated  into 
an  existing  LISP  program  and  run  on  the  PDP-10 
at  the  A . I.  Laboratory,  M.I.T.,  to  obtain  com­
puter  proofs  of  many  of  the  limit  theorems, 
including  the  theorem  that  the  limit  of  the  sum 
of  two  real  functions  is  the  sum  of  their  l i m i t s, 
and  a  similar  theorem  about  products.  Also 
computer  proofs  have  been  obtained  (or  are  easily 
obtainable)  of  the  theorems  that  a  continuous 
function  of  a  continuous  function  is  continuous, 
and  that  a  function  having  a  derivative  at  a 
point  is  continuous  there,  as  well  as  limit 
results  for  polynomial 

functions. 

The  limit  theorems  of  calculus  present  a 

surprisingly  d i f f i c u lt  challenge  for  general 
purpose  automatic  theorem  provers.  One  reason 
for  this  is  that  calculus  is  a  branch  of  analysis, 
and  proofs  in  analysis  require  manipulation  of 
algebraic  expressions,  solutions  of  inequalities, 
and  other  operations  which  depend  upon  the  axioms 
of  an  ordered  f i e l d. 
field  axioms  that  automatic  provers  are  usually 
forced  into  long  and  d i f f i c u lt  searches.  On  the 
other  hand,  a  human  mathematician  is  often  able 
to  easily  perform  the  necessary  operations  of 
analysis  without  being  aware  of  the  explicit  use 
of  the  field  axioms.  One  purpose  of  this  paper 
is  to  describe  ways  in  which  automatic  provers 
can  also  avoid  the  use  of  the  f i e ld  axioms  and 

It  is  in  applying  these 

Session No.  14 Theorem  Proving 

587 

(0  <  b  ->  b  <  b) 

as  a  solution  of  (2)  the  substitution  [ b / x ] ,2 
and  require 
is  impossible.  Of  course  (1)  is  unprovable  with 
out  further  hypotheses  (or  axioms)  but  it  can  be 
easily  handled  by  the  use  of  types  (which  im­
p l i c i t ly  assumes  certain  axioms).  Our  approach 
in  proving  (1)  is  to  assign  type  <0  »> 
to  b, 
and  then  try  to  prove 

in  (3),  which 

by  assigning  the  type  <0  b^  to  x.  The  resulting 
type  of  x,  <0  b>,  was  derived  as  the  inter­
section  of  its  i n i t i al  type  <0  <*>  gotten  from 
(5),  and  the  interval  <-«  b-,  which  would  have 
been  the  type  gotten  from  (6)  alone.  Since  this 
intersection  is  not  empty  (because  b  has  type 
<0  <*>),  it  is  assigned  as  the  resulting  type  of 
x.  Even  though  the  variable  x  had  already  been 
"solved  for"  in  (5)  (typed),  it  remains  a  vari­
able  in  the  solution  of  (6)  (though  limited  in 
scope)  and  therefore  could  be  "solved  for"  again 
(retyped). 
In  the  examples  of  Section  5  some  of 
the  variables  are  retyped  two  or  three  times, 
and  this  greatly  simplifies  the  proofs. 

Types  are  used  by  the  routines  SOLVE<  and 

SET-TYPE  which  are  described  below. 

2.1  SOLVE< 

This  is  a  routine  for  solving  linear  i n­
(S0LVE<  A  B)  chooses  a  variable 

equalities. 
from  A  or  from  B  and  attempts  to  solve  the 
inequality  (A  <  B)  in  terms  of  that  variable. 
it  then  chooses  another  variable 
If  this  f a i ls 
and  tries  again.  Since  the  terms  and  variables 
of  A  and  B  may  be  typed,  this  routine  must  take 
into  consideration  such  types  and  reset  the  type 
of  the  variable  when  the  solution  is  obtained. 
In  fact  the  answer  is  completely  given  by  the 
new  types.  The  examples  below  best  illustrate 
this  point. 
If  it  can  show  that  A  is  less  than 
B,  then  the  routine  w i ll  return  the  answer  "T" 
whether  or  not  A  and  B  have  any  variables. 

In  this  example  the  type  of  D  in  the  answer 
could  have  been  given  as  <0  (minimum  DjD.)>  but 
we  find  the  intersection  form  more  convenient. 

a 
<.— oo> 
b 

6. 

x 

Type  x  is  <0  »> 

Type  a  is  <-«  0> 

Type  b is  <0  °°> 

In  the  actual  theorem  proving  process, 

S0LVE<  is  applied  to  formulas  that  have  been 
converted  to  quantifier  free  form  by  the  intro­
duction  of  skolem  expressions.3  Precautions  are 
taken  by  S0LVE<  to  insure  that  it  does  not  solve 
for  a  variable  x  in  terms  of  a  skolem  expression 
in  which  x  occurs.  This  is  essentially  the  same 
precaution  taken  by  J.  A.  Robinson  in  his 
Unification  Algorithm  [ 2 ]. 

For  example,  consider  the  false  statement 

SOME  x  ALL  y  (y  <  x)  . 

The  skolem  form  of  this  is 

(y  x)  <  x  . 

The  result  of  a  call  to  (S0LVE< 
(y  x)  x)  is 
NIL,  since  x  occurs  in  the  skolem  expression 
(y  x). 

On  the  other  hand,  the  theorem 

SOME  x  ALL  y  SOME  z  (y  <  x+z) 

which  has  skolem  form 
(y  x)  <  x+z 

can  be  proved  by  a  call  to  (S0LVE< 
which  correctly  assigns  type  <(y  x)-x 

(x+z)) 
to  z. 
Actually,  the  routine  SOLVE<  just  retypes 

a  variable  in  a  way  that  guarantees  the  solution 
of  the  desired  inequality. 

(y  x) 

More  extensive  routines  could  easily  be 

written  (indeed  have  been  written  by  others)  to 

2.  We  follow  the  usual  practice  of  denoting 
a  substitution  by  a  11st  [ b ! / alf  b2/a2»... ,bn/an] 
where  each  ai  is  to  be  replaced  by  the  correspond­
ing  B i. 

3.  A  skolem  expression  is  a  term  whose  main 
function  symbol  is  a  skolem  function, 
cf.  foot­
note  11  in  Section  4  which  describes  the  elimina­
tion  of  quantifiers  by  the  introduction  of 
skolem  functions. 

588 

Session No.  14 Theorem Proving 

solve  nonlinear  inequalities,  but  these  were  not 
found  necessary  for  proving  the  examples 
reported  here. 

2.2  SOLVE=.  This  is  a  routine  for  solving 
linear  equations.  Given  two  arithmetic  expres­
sions  A  and  B,  it  selects  a  variable  x  from  A 
or  B  and  trys  to  solve  the  equation  (A  =  B)  in 
it 
terms  of  x. 
returns  the  substitution, 
.  Otherwise  it 
selects  another  variable  and  trys  again,  return­
ing  NIL 

If  it  succeeds,  with  answer  y, 

if  all 

[y/x] 

f a i l. 

If 

2.3  SET-TYPE.  This  is  a  subroutine  which 
assigns  types  to  certain  skolem  expressions. 
a  formula  of  the  form 
(A  B)  is  in  a  con­
junctive  position  of  E  ( i . e .,  E  can  be  expressed 
as  ((A  ε  B 
D)  for  some  D),  and  if  A  is  a 
skolem  expression  which  does  not  occur  in  B, 
then  (SET-TYPE  E)  assigns  the  type  B  to  A  and 
returns  D,  the  formula  gotten  by  removing  (A  ε  B) 
If  A  already  has  type  C,  then  SET-TYPE 
from  E. 
assigns  the  intersection  (B∩  C)  as  the  type  of 
A,  if  (BO  C)  is  non-empty. 
If  (B  n  C)  is  empty 
it  returns  E. 
cannot  be  given  specifically  then  the  formula 
(intersection  B  C)  is  given  as  the  type  of  A. 

If  (B  ∩  C)  is  not  empty,  but 

For  example,  if  E  is  the  formula 

(A  A 

(x  ε  P,  A 

(B 

-  y  c  R))) 

(A  A  (B  >  y  ,  R))  . 

then  (SET-TYPE  E),  assigns  F^  as  the  type  of  x, 
and  returns 
(1) 
I f,  in  this  example,  x  already  had  type  F*,  then 
P^  is  assigned  as  the  new  type  of  x;  if  it  already 
had  type  <-l  1>  then  it  assigns  type  <0  1>  to  x; 
if  it  already  had  type  <-«■  -1> 
(A  A  (X  ε  P 

then  it  returns 

-  y  r  R)))  . 

In  a  similar  way,  it  assigns  types  to  skolem 

expressions  which  satisfy  certain  inequalities. 
For  example,  if  E  is 

(B 

v 

(A  <  0  A  (B  <  1  V  O) 

then  (SET-TYPE  E)  assigns  type  <-»  0-  to  A  and 
returns 

then  (SET-TYPE  E)  assigns  type < 
type  <A <*>>  to  B  and  returns  C.  Similarly, 
(SET-TYPE  (A  f  0))  can  be  made  to  assign  type 
(union  < -.  0><0  *>)  to  A,  but  this  sort  of  typing 
was  not  used  in  any  of  the  examples  given  in  this 
paper. 

B>  to  A,  and 

2.4  SIMPLIFY.  This  is  an  algebraic  simplifica­
tion  routine  which  converts  algebraic  expressions 
into  a  canonical  form,  sorts  its  terms,  and 
cancels  complementary  terms  of  the  form  (a+(-a)) 
It  is  used  in  all  of  our  routines 
and  (a--). 
which  manipulate  algebraic  expressions.  Such 

2-  Limit  Heuristic.  The  limit  heuristic  rule 
defined  below,  in  conjunction  with  the  routines 
described  in  Section  2,  is  used  to  help  prove 
limit  theorems.  LIMIT-HEURISTIC:  When  trying 
to  use  a  hypothesis  of  the  type 

(and  possibly  other  hypotheses)  to  establish  a 
conclusion  of  the  type 

f i r st  t ry  to  find  a  substitution  o  which  w i ll 
allow  Bo  to  be  expressed  as  a  non-trivial  com­
bination5  of  A0,  (B  =  K-A  +  L)o,  and  then  try  to 
establish  the  three  new  conclusions: 

Such  a  procedure  is  valid  because  if  we  can 

find  such  a  o  and  prove  A,  B,  and  C,  then  we 
would  have 

B 

0 

K-A +  L 

o 

1  (|K|-|A|  +  |L|) 
<  M-E/2M  +  E/2 

o 

=  E  . 

Of  course,  this  is  based  on  the  triangle  inequal­
i t y,  and  uses  the  fact  that  1/2  +  1/2 
=  1,  M-l/M  =1 

for  M  >  0  ,  etc. 

As  an  example,  in  proving  the  theorem  that 

the  limit  of  the  product  of  two  functions  of  real 
variables  is  the  product  of  their  l i m i t s,  we  find 
ourselves  trying  to  establish  a  conclusion  of 

4.  The  notation  B0  denotes  the  result  of  ap­

plying  the  substitution  o  to  B. 

5.  The  routine  EXTRACT,  described  in 

Section  3.1  below,  is  used  to  express  B  in  terms 
of  A. 

Session No.  14 Theorem Proving 

589 

but  these  facts  are  used  to  compute  something, 
not  to  make  random  inferences.  This  strongly 
inhibits  the  generation  of  subgoals  that  occurs 
if  one  freely  permits  the  application  of  axioms 
to  his  goals.  We  comment  further  on  this  "com­
putational"  aspect  of  the  limit  heuristic  in 
Section  7. 

We  feel  that  such  a  forcing  technique  has 
applications  in  other  areas  of  theorem  proving 
where  two  or  more  hypotheses  H,,  Ho,...Hn  are 
needed  to  establish  one  conclusion  C  that  cannot 
be  loqically  divided. 
In  such  applications  the 
user  must  provide  a  heuristic  which  will  enable 
the  computer  to  determine  how  to  qet  a  partial 
result  from  Hj  and  leave  a  reaminder  C  to  be 
proved  by  the  other  hypotheses. 

The  limit  heuristic  uses  the  routine 

EXTRACT  described  below,  which  in  turn  uses  the 
simplification  routine  described  in  Section  2. 

3.1  EXTRACT. 
If  there  is  a  substitution  o  for 
which  Bn  can  be  expressed  as  a  non-trival  com­
bination  of  A0  , 

(B  =  K-A  +  L)0 

then  (EXTRACT  A  B)  returns  (K  L  n),  where  o  is 
the  most  general  such  substitution.  Otherwise 
NIL  is  returned. 

A  more  precise  definition  follows  the  ex­

amples . 

In  the  following,  the  symbols  x,  t, 

Examples. 
and  h  represent  variables  while  all  other 
symbols  represent  constants. 

6.  Throughout  this  paper  we  use  the 

letter 
"T"  to  denote  both  " t r u t h ",  and  the  empty  sub­
s t i t u t i o n.  This  reserves  "NIL"  for  denotinq 
"falsp". 

which  can  be  used  to  help  establish  (1)  (provided 
that  we  satisfy  the  conditions  for  (2)). 
apply  the  limit  heuristic  to  (2)  and  (1)  we  find 
that  for  α  =  [ x / x '] 

If  we 

(which  also  has  conditions  that  must  be  satis­
fied).  Subgoal  B  follows  from  (2),  and  subgoal 
C  follows  from  (3). 

The  complete  proof  of  the  limit  product 

theorem  is  given  in  Section  5  in  great  detail. 
The  limit  heuristic  is  used  there  not  only  to 
set  up  the  three  subgoals  A,  B,  and  C,  but  also 
to  establish  A  and  C,  by  proposing  further 
subgoals. 

Because  the  l i m it  heuristic  enables  our 

program  to  prove  many  theorems  about  l i m i t s,  we 
regard  it  as  a  rather  interesting  t r i c k.  But 
more  interesting  and  important  than  the  fact 
that  it  works  some  problems  is  the  principle 
behind  i t.  That  principle  might  be  stated: 

To  establish  a  conclusion  C  from 
several  hypotheses,  among  which  is 
H,  force  H  to  contribute  all  it  can 
towards  establishing  C  and  leave  a 
remainder  to  be  established  with 
the  help  of  the  other  hypotheses. 

The  value  of  such  a  "forcing"  technique  is 

twofold.  First,  if  one  can  truly  make  H  con­
tribute  all  it  can  towards  C,  then  H  is  not 
needed  to  establish  the  remainder.  That  i s,  a 
reduction  in  the  number  of  hypotheses  is  achieved 
while  a  significant  step  in  the  proof  is  made. 

Second,  it  is  implicit  in  the  notion  of 

"force"  that  certain  facts  are  used  to  make  an 
inference  in  a  computational  manner.  For 
example,  the  limit  heuristic  "uses"  many  facts 
about  algebra,  such  as  the  triangle  inequality; 

590 

Session No.  14 Theorem Proving 

is  true. 

find  and  return  the  most  general  substitution  o 
such  that  (R  -+  E) 
If  0  Is  the  empty 
substitution  thenaIMPLY  returns  T. 
Table  1  gives  rules  describing  some  of  the 

operations  of  IMPLY.  These  rules  are  applied 
in  the  order  of  their  occurence  in  the  table; 
if  one  f a i l s,  the  next  is  t r i e d;  if  all 
f a i l, 
IMPLY  returns  the  value 
IMPLY  returns  NIL. 
given  by  the  f i r st  rule  which  does  not  give  NIL. 
In  the  following  we  use  the  shorter  notation 
[E,R]  for  (IMPLY  E  R). 

Examples  3,  4,  5  are  useful  in  proving 

limit  theorems  about  the  sum  of  two  functions, 
the  product  of  two  functions  (see  Section  5),  and 
the  quotient  of  two  functions.  Example  6  is  used 
in  proving  that  a  d i f f e r e n t i a te  function  is 
continuous. 

Suppose  there  is  a  substitution  α  and  an 

expression  x  such  that,  Aα  and  Bα  are  poly­
nomials  in  x,  and  B  is  linear  in  x.  Then  there 
are  expressions  a,  c,  b  and  d  such  that  x  does 
not  occur  in  c,  b,  or  d,  and  Aa  and  B0  can  be  re-
expressed  as 

then  EXTRACT  returns  NIL. 

4_.  The  Implication  Method 

At  the  heart  of  the  program  is  a  subroutine 

called  IMPLY  whose  essential  purpose  is  to 
handle  logical  deductions  in  the  predicate  cal­
culus. 
We  offer  here  a  cursory  description  of  its 
operation,  sufficient  to  an  understanding  of  the 
proofs  in  Section  5. 

It  is  a  replacement  for  resolution  in  [1], 

The  operation  of  IMPLY  bears  a  closer 
resemblance  to  the  proof  techniques  of  the 
In  general 
mathematician  than  does  resolution. 
IMPLY  examines  the  connectives  in  the  formulas; 
given  as  arguments  to  it,and  creates  one  or  two 
subgoals.  These  subgoals  are  usually  calls  to 
IMPLY  with  new  arguments  which  are  closely 
related  to  but  simpler  than  the  original  arguments 
The  resulting  analysis  of  the  formula  to  be 
proved  is  easy  to  follow. 

This  rather  natural  operation  bears  some 

responsibility  for  the  development  of  the  limit 
heuristic  and  the  other  techniques  of  this  paper. 
In  comparing  the  subgoals  called  by  IMPLY  with 
the  methods  of  proof  used  in  elementary  calculus 
we  established  new  subroutines  and  subgoals, 
such  as  the  limit  heuristic,  sufficient  to  prove 
a  number  of  theorems. 

The  subroutine  IMPLY  has  two  arguments: 

E 

(the  current  formula  under 

Usually  E 

examination) 

R 
(a  reserve), 
is  of  the  form 
(H  *  C) 

The  answer  to  a  call  to  IMPLY  is  either  a  sub­
stitution  or  NIL.  The  latter  indicates  failure 
to  establish  the  subgoal. 

IMPLY  attempts  to 

Session No.  14 Theorem Proving 

591 

( i . e .,  if  there  is  a  substitution  α, 
which  unifies  A  and  B,  then  return  a) 

Table  1  (concluded) 

Before  a  formula  E  is  sent  to  IMPLY  it  is 
free  form,  but 

f i r st  converted  to  a  quantifier 
without  converting  it  f i r st  to  prenex  normal 
The  quantifier  free  form  is  achieved  by  using 
skolem  functions,  and  is  essentially  the  same  as 
that  used  by  Wang  [ 3 ] .11  A  call  is  then  made 
to  (IMPLY  E  NIL). 

form. 

10. 
It  is  possible  for  IMPLY  to  yield  a  substi­
tution  which  assigns  to  a  variable  x  more  than 
one  value:  a/x,  b/x,  a  ≠b.  If  this  happens  and 
if  IMPLY  tries  to  substitute  for  x  in  another 
expression  (as  it  might  do  using  Rule  8.2,  6.2, 
2.2,  or  4.2),  then IMPLY  returns  NIL. 

If  Rule  8.2  fails  on  the  ≠l  given  by  Rule  8.1 

,  R]  returns  NIL),  then  the 

( i . e .,  if  [H  -►  B 
program  "backs  up"  and  recomputes  8.1  trying  to 
find  another  solution  o l'  of  [H  -+  A,  R]  for 
which  [H  -*  B  .i,R]  can  succeed.  A  similar  back­
ing  up  proceeaure 
is  used  in  Rules  2,  4,  and  6. 
11.  Specifically,  if  "positive"  and  "negative" 
are  given  the  meaning  as  in  Wang  [3]  pp.  9-10, 
then  the  elimination  of  quantifiers  consists  of 
deleting  each  quantifier  and  variable  immediately 
after  i t,  and  replacing  each  variable  v  bound 
by  a  positive  quantifier  with  a  l i st  whose  f i r st 
member  is  v  and  whose  other  members  are  those 
variables  bound  by  negative  quantifiers  whose 
scope  Includes  v.  This  l i st  which 

replaces  v  is 

simply  the  application  pf  a  skplem  function  to 
certain  arguments,  with  no  ambiguity,  but  as  an 
aid  to  memory,  the  skolem  function  is  named  v. 

592 

Session No.  14 Theorem Proving 

In  what 

follows,  R  denotes  the  real  numbers, 

and  before  the  f i r st  call  to  IMPLY,  i . e .,  when 
(See  Section  2.3). 
new  material  is  added  to  H. 

P  denotes  the  positives,  and  FRR  denotes  the 
Functions  on  R  to  R.  We  use  (Lim  f  a  L)  to 
denote 

f(x)  =  L.  The  standard  definition 

Gentzen  sequents  (cf.  Kleene's  G3  [4])  and  the 
subgoals  which  IMPLY  sets  up.  The  technique  of 
of  finding  a  most  general  unifier  is  the  unifica­
tion  algorithm  of  Robinson  [ 2 ].  On  the  whole, 
IMPLY  is  closer  to  the  system  of  Prawitz  [6]  than 
to  resolution. 

5.  Examples  of  Computer  Proofs. 

of  limit 

Here  we  give  excerpts  from  the  proofs  of 
five  theorems,  which  were  made  by  the  program 
PROVER  using  IMPLY  as  its  principal  subroutine. 
PROVER  is  explained  in  [1]  and  IMPLY  is  described 
briefly  in  Section  4  above,  but  the  reader  famil­
iar  with  Sections  2  and  3  should  be  able  to 
follow  these  descriptions  with  no  reference  to  [1] 
and  l i t t le  to  Section  4. 

In  order  to  use  the  limit  heuristic  described 

in  Section  3,  we  must  add  the  following  rule 
to  Table  1. 

lim 
x->a 
i s: 

Also,  we  need  two  additional  rules  for  solv­

ing  inequalities,  one  rule  for  types,  and  one 
for  equations. 

These  five  reles  are  placed  at  the  beginning 

of  Table  1  (Section  4),  in  the  order  17,  18,  19, 
20,  16. 

Also,  a  provision  is  made  for  assigning  a 
type  to  an  expression  A  when  it  appears  in  the 
form  (A  >  B)  or  (A  •  B)  in  the  hypothesis  of  the 
theorem  being  proved.  This  is  accomplished  when 
IMPLY  is  proving  a  subgoal  of  the  form  [H -> C,  R] 
by  replacing  H  by  (SET-TYPE  H).  Such  calls  to 
SET-TYPE  need  only  be  made  in  Rules  5,  10,  13, 

In  case  K  =  1,  Step  16.1  is  omitted,  and  M 

12. 
is  set  to  1  in  16.2. 
13.  M  is  given  type  0  -  and  also  M  is  made  an 
additional  argument  of  all  skolem  functions 
which  already  have  at  least  one  argument. 
In  case  L  =  0,  Step  16.3  is  omitted. 
14. 

The  f i r st  three  parts  of  the  conclusion, 

(a  L  R),  (U-Lp)  e  R,  and  (f-g)  t  FRR  are  proved 
by  the  program  using  the  hypotheses  of  the 
theorem  and  the  closure  properties  of  R_ and  FRR. 
The  remainder  of  the  theorem  is  prepared  for 

IMPLY  by  replacing 
and  by  eliminating  the  quantifiers  and  introduc­
ing  skolem  expressions. 

(f-g)(x)  by 

(f(x)-g(x)) 

Session No.  14 Theorem Proving 

593 

594 

Session No.  14 Theorem Proving 

Session No.  14 Theorem Proving 

595 

596 

Session No.  14 Theorem Proving 

Session No.  14 Theorem  Proving 

597 

6.  Resolution. 

In  this  section  we  show  how  the  limit  heur­

i s t ic  and  the  theory  of  types  expldined  above  can 
be  used  in  resolution  based  programs.  This  is 
done  by  giving  some  additional  rules  for  resolu­
tion.  These  are-
6 .1  SET-TYPE  Rule. 

Tor  each  unit  clause  of  the  form 

(x  ■  A), 

(b 

■ - -a 

x)  assign  type 

to  x.  Similarly  for  unit 

-b  -
In  each  of  these  cases,  remove  the  unit 

where  x  is  a  skoleni  expression  which  does  not  oc­
cur  in  a,  assign  the  type  A  to  x.  Also  for  each 
unit  clause  of  the  form 
(x  .  a),  where  x  is  a 
skolem  function  which  does  not  occur  in  a,  assign 
the  type 
clauses  of  the  form 
to  x. 
clause. 
ing  to  assign  it  a  new  type  A,  then  assign  the 
if  (A  ∩  B)  is 
type  (A  ∩  B)  if  it  is  non-empty; 
empty,  add  the  empty  clause  ( i . e .,  the  proof  is 
finished); 
if  it  cannot  be  determined  whether 
(A  ∩  B)  is  empty,  leave  the  original  type  as  is 
and  do  not  remove  the  unit  clause.  This  SET-TYPE 
rule  need  only  beapplied  at  the  beginning  and 
after  each  new  unit  clause  is  generated. 

If  x  already  has  a  type  B  and  we  are  try 

Subgoal  (2)  is  easily  established  by  assign­

E/2-M>  to  E, ,  but  (1)  presents 
In  fact 

ing  type 
d i f f i c u l t y. 
the  program  is  unable  to  give 
a  proof  of  (1)  without  some  axioms  or  a  change  in 
the  program.  See  Section  7  for  further  comments 
on  this  example. 

Before  going  to  our  limit  heuristic  rule,  we 

give  some  examples  using  the  above  six  rules. 

598 

Session No.  14 Theorem Proving 

Session No.  14 Theorem Proving 

599 

One  remark  is  that,  except  for  the  example 

on  quotients,  (mentioned  again  below)  these  limit 
theorems  were  proved  without  the  inclusion  of 
axioms  (reference  theorems).  This  is  desirable 
because,for  most  automatic  theorem  proving  pro­
grams, 
the  axioms  have  to  be  selected  by  humans 
for  each  theorem  being  proved.  Of  course,  we  had 
to  include  the  limit  heuristic  i t s e lf  which  acts 
like  some  axioms,  but  it  does  not  hinder  the  proof 
of  other  theorems  not  requiring  i t,  because  it 
does  not  release  its  action  unless  its  need  is 
detected.  This  is  in  the  s p i r it  of  the  "Big 
Switch"  mentioned  by  Newall,  Feigenbaum,  and 
others. 

It  was  surprising  to  us  that  so  many  theorems 
would  follow  from  one  heuristic.  Will  this  happen 
in  other  areas  of  mathematics?  Can  we  provide  a 
series  of  heuristics  with  big  switches  which  w i ll 
handle  many  areas  of  mathematics  without  excess­
ive  irrelevant  computing?  We  doubt  that  it  can 
be  so  simple,  but  nevertheless  feel  that  such 
heuristics  should  be  sought  for  other  areas  of 
mathematics.  The  success  of  such  a  collection 
of  heuristics  w i ll  depend  in  great  part  on  the 
cleverness  of  the  overseer  program  which  directs 
the  use  of  these  heuristics.  Hewitt's  program­
ming  language  PLANNER  [5]  or  the  Stanford  Research 
Institute  language  QA4  might  be  well  suited  for 
writing  such  overseer  programs,  or  for  improving 
existing  ones. 
CALCULATE VERSUS PROVE 

One  thing  that  contributed  to  the  success  of 

this  effort  was  the  use  of  the  routines  S0LVE<, 
SOLVE*,  and  SIMPLIFY.  The  point  is  that  these 
routines  were  used  to  calculate  something  rather 
than  prove  something.  Since  proving  is  inherent­
ly  harder  than  calculation,  we  feel  that  such 
routines  should  be  employed  as  much  as  possible. 
Think  how  d i f f i c u lt  it  would  be  in  our  proofs  to 
employ  a  set  of  algebraic  simplification  axioms 

600 

Session No.  14  Theorem  Proving 

in  place  of  the  routine  SIMPLIFY.  Or  suppose  that 
instead  of  using  EXTRACT  to  give  a  decomposition, 
we  tried  to  prove  that  such  a  decomposition  exists. 
This  suggests  that  more  use  ought  to  be  made  of 
calculation  procedures  within  the  proving  mechan­
isms  of  automatic  theorem  provers.  For  example  , 

in  proving  theorems 

about 
den vati ves 
1 lmi ts 

differential  equations 
functions 
real 
measure  theory 
algebraic 
anything 

topology 

we  might  calculate 
1 inn ts 
solutions  to  equations 
and  inequalities 

derivatives 

to  equations 
solutions 
that  two  sets  are  equal 
group  theoretic  results 
a  most  general  unifier 

The  unification  algorithm  is  such  an  example,  and 
it  revolutionized  automatic  theorem  proving  when 
J.  A.  Robinson  defined  its  role  in  resolution. 
A  source  of  power  to  a  mathematician  is  his  a b i l­
ity  to  leave  to  calculation  those  things  that  can 
be  calculated  and  thereby  free  his  mind  for  the 
harder  task  of  finding  inferences. 
MEMBERSHIP TYPES 

SOME  x  (P(x)  A  Q(x)) 

The  use  of  membership  types  also  helped  con­
It  is 

siderably  in  proving  these  limit  theorems. 
as  if  in  proving, 
(2) 
we  f i r st  find  A,  the  set  of  all  x  for  which  P(x) 
is  true  and  assign  A  as  the  type  of  x,  and  then 
find  B  the  set  of  all  x  for  which  Q(x)  is  true 
and  if  (AAB) 
is  not  empty,  assign  it  as  the  type 
of  x,  and  declare  (2)  to  be  true.  This  allows  a 
maximum  amount  of  freedom  in  the  proving  of  Q(x) 
after  P(x)  has  been  proved; 
indeed  x  remains  a 
variable,  even  though  restricted,  in  the  proof  of 
Q(x).  This  idea  is  somewhat  related  to  constraint 
methods  used  by  Fikes  in  [ 7 ]. 

This  procedure  worked  well  in  our  examples 

because  linear  inequalities  are  so  easy  to  solve. 
We  do  not  recommend  that  such  a  procedure  should 
be  used  in  all  other  situations,  when  theorems  of 
type  (2)  are  being  proved,  because  it  may  be  too 
d i f f i c u lt  (or  unnecessary)  to  solve  for  A,  the 
set  of  all  x  for  which  P(x)  is  true,  before  prov­
ing  Q(x).  We  dp_  suggest  however  that  a  procedure 
be  followed  that  leaves  x  as  a  variable,  though 
restricted,  after  P(x)  has  been  proved  and  while 
Q(x)  is  being  proved.  Type  theory  might  help 
attain  such  an  objective. 

Our  present  program  w i ll  not  prove  limit 

theorems  involving  quotients,  such  as 

without  the  help  of  some  axioms  (see  Example  5, 
Section  5).  However,  no  axioms  are  needed  for  the 
proof  of  (3)  if  we  add  another  heuristic  to  the 
program  which 

is  similar  to  the  limit  heuristic, 

upon  which  the  limit  heuristic  is  based. 
it  might  be  desirable  to  develop  a  more  general 
heuristic,  which  not  only  encompasses  both  ideas, 
but  also  tries  to  attain  such  objectives  as 
bounding  an  expression,  e.g., 

In  fact, 

|q(x) |  <  M, 

for  some  M, 

and  making  an  expression  small,  e.g., 

!f(x)  -  L!  <  E, 

for  a  gi ven  E. 

Finally,  it  should  be  mentioned  that  the 
routines  described  in  Section  2  are  meant  for 
general  use  in  analysis  and  not  just  as  an  aid  in 
proving  limit  theorems. 
It  is  hoped  that  routines 
of  this  kind  can  be  used  to  make  an  analysis 
prover  in  which  relatively  simple  heuristics  can 
be  added  for  great  effect. 

8.  Acknowledgement.  The  work  reported  herein 
was  conducted  at  the  A r t i f i c i al 
Intelligence  Lab­
oratory,  a  Massachusetts  Institute  of  Technology 
research  program  supported  by  the  Advanced  Re­
search  Projects  Agency  of  the  Department  of  De­
fence,  and  was  monitored  by  the  Office  of  Naval 
Research  under  Contract  Number  N00014-70-A-0362-
0002,  and  was  also  supported  by  National  Insti­
tutes  of  Health  Grant  GM  15769-03. 

References. 
1.  W.  W.  Bledsoe,  "Splitting  and  Reduction 

Heuristics  in  Automatic  Theorem  Proving," 
A r t i f i c i al  Intelligence  2  (1971)  pp  55-77. 

2.  J.  A.  Robinson,  "A  Machine-Oriented  Logic 

Based  on  the  Resolution  Principle,"  Jour. 
ACM  12  (January  1965)  pp.23-41. 

3.  Hao  Wang,  "Toward  Mechanical  Mathematics," 

IBM  Jour.  Res.  Dev.,  4,  pp.  2-22. 

4.  S.  C.  Kleene,  Introduction  to  MetamathematicsL, 

D.  van  Nostrand,  New  York,  1952. 

5.  Carl  Hewitt,  "Planner,"  M.I.T  A . I.  Memo  No. 

168,  August  1970. 

6.  Dag  Prawitz,  "An  Improved  Proof  Procedure," 

Theoria,  26,  pp.  102-39. 

7.  R.  E.  Fikes,  "REF-ARF:  a  system  for  solving 
problems  stated  as  procedures,"  Arti f i c i al 
Intelligence  1  (1970)  pp.27-120. 

