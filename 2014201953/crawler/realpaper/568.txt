Generalizing GraphPlan by Formulating Planning as a CSP 

Adriana Lopez 
University of Toronto 

Dept. of Computer Science 

Toronto, Ontario 
Canada, M5S 3G4 

alopez@cs.toronto.edu 

Fahiem Bacchus 
Dept, Of Computer Science 
University of Toronto 

Toronto, Ontario 
Canada, M5S 3G4 

fbacchus@cs.toronto.edu 

Abstract 

We  examine  the  approach  of encoding planning 
problems as CSPs more closely.  First we present 
a simple CSP encoding for planning problems and 
then a set of transformations that can be used to 
eliminate variables and add new constraints to the 
encoding.  We show that our transformations un(cid:173)
cover additional structure in the planning problem, 
structure that subsumes the structure uncovered by 
GRAPHPLAN planning graphs.  We solve the CSP 
encoded planning problem by using standard CSP 
algorithms. Empirical evidence is presented to val(cid:173)
idate the effectiveness of this approach to solving 
planning problems, and to show that even a pro(cid:173)
totype implementation is more effective than stan(cid:173)
dard GRAPHPLAN. Our prototype is even compet(cid:173)
itive with far more optimized planning graph based 
implementations. We also demonstrate that this ap(cid:173)
proach can be more easily lifted to more complex 
types of planning than can planning graphs. In par(cid:173)
ticular, we show that the approach can be easily ex(cid:173)
tended to planning with resources. 
Introduction 

1 
A  powerful  technique  for  solving  planning  problems, first 
used in [Kautz and Selman, 1996], is to impose a fixed bound 
on plan length.  This converts the problem to one that lies 
in NP. The resulting problem can then be solved by encod(cid:173)
ing  it  in  any  of a  number  of alternative  NP-complete  for(cid:173)
malisms, e.g., SAT [Kautz and Selman, 1996], integer pro(cid:173)
gramming [Vossen et ai% 2001], or constraint satisfaction 
problems (CSPs) [van Beek and Chen, 1999; Do and Kamb-
hampati, 2001], and then using the powerful algorithms that 
have been designed to solve these general problems. 

In this paper we examine the approach of encoding plan(cid:173)
ning problems as CSPs more closely.  We use a very simple 
encoding to translate the planning problem into a CSP. The 
advantage of using CSPs in general, and our encoding in par(cid:173)
ticular, is that it preserves much of the structure of the original 
planning problem, and thus various transformations that uti(cid:173)
lize this specific structure can be applied to create a new CSP 
that is easier to solve. 

The  utility  of exploiting  planning  specific  structure  has 
been convincingly demonstrated by the  BLACKBOX  [Kautz 

and  Selman,  1998]  and  GP-CSP  [Do  and  Kambhampati, 
2001] planners.  These systems encode a transformed repre(cid:173)
sentation of the planning problem called the planning graph 
to SAT and CSP respectively. The planning graph is a plan(cid:173)
ning specific construction, due to [Blum and Furst, 1997], that 
computes and represents some important additional structural 
information about the planning problem.  Thus by encoding 
the planning graph rather than the original planning problem, 
BLACKBOX  and  GP-CSP  are  able  to  capture  more  of the 
structure of the planning problem in their encoding, which 
results in a significant improvement in performance. 

In our approach we bypass the construction of a planning 
graph.  Instead,  we study techniques that can equally well 
exploit the structure of the planning problem and at the same 
time work directly on the CSP encoding.  We demonstrate 
that it is possible to develop transformations that uncover all 
of the additional structure obtained from planning graphs. 

The advantage of our approach is that it works directly on 
a much richer and more robust representation. Consequently 
we obtain at least three important advances over the planning 
graph construction:  (1) Our approach allows us to general(cid:173)
ize planning graphs.  In particular, we can enhance our ap(cid:173)
proach to extract other kinds of structure to allow us to solve 
the planning problem more efficiently. (2) We can more eas(cid:173)
ily extend our approach to more complex types of planning 
problems, e.g., those involving resource usage. (3) Since the 
final result is a CSP we can automatically utilize CSP solu(cid:173)
tion techniques which can be more powerful than standard 
GRAPHPLAN searching methods.  In the paper we will pro(cid:173)
vide evidence for all of these points. 

First, we present our CSP encoding of a planning problem. 
Then we present a set of transformations that can be used to 
eliminate variables and add new constraints to the encoding, 
and show that these transformations subsume and generalize 
planning graphs. Then we present empirical evidence to val(cid:173)
idate the effectiveness of our approach to solving planning 
problems. To demonstrate that our approach can be more eas(cid:173)
ily lifted to more complex types of planning, we show how it 
can be easily extended to planning with resources. Finally we 
close with some conclusions and a description of future work. 
2  Generating the BASE-CSP 
To encode a planning problem as a CSP we impose a bound 
on the "size" of the plan.  In this paper we will measure 

954 

PLANNING 

plan size by the number of GraphPlan-concurrent steps (GP-
steps) in the plan. It will become apparent in the sequel what 
GP-steps means. 

In  k GP-steps  each proposition or action can  change at 
most k times.  So to encode a k GP-step plan in a CSP we 
and k 
can utilize fc -f  1  sets of propositional variables 
where s ranges from 0 to k for 
sets of action variables 
propositions and 0 to k  -  i  for actions,  and  i  and j  range 
over the number of distinct propositions and action instances 
in the planning problem respectively. Each of these variables 
will be boolean. Intuitively,  means that proposition P{ is 
true at GraphPlan step s, and  means that action instance 
Aj  was  executed  at GraphPlan  step  sd e n o te 
the opposite). 

Clearly by setting each of these variables we can capture 
any  GP-step plan and its effects.  However, many illegal 
plans and nonsensical outcomes are also captured. We need 
constraints to ensure that any solution to the CSP (i.e., any 
setting of the variables that satisfies all of the constrains) is a 
legal plan. There are various possible sets of constraints that 
can serve our purpose. Here we present one particular set: 
1. Unary initial state and goal constraints. The Dropositional 
variables  from  step  zero,  and 
from  step  are required 
to have values compatible with the initial and goal states of 
the planning problem. 
2.  Precondition constraints.  An action 
cannot be true 
unless its precondition is satisfied.  This Rives the constraint 
precondition rela(cid:173)

where Pre 

tive to GP-step s. 
3. Successor state constraints. Implicit in classical planning 
representations is the frame assumption: predicates not men(cid:173)
tioned in the action's description are unaffected by the action. 
We can capture the effects of actions, including the implicit 
non-effects in a number of different ways.  Here we use Re-
iter's  formulation of successor state axioms  [Reiter,  2001]. 
at GP-step s 
In particular, for each propositional variable 
(a > 0) we have a constraint between it and the same propo(cid:173)
sition at GP-step .s-1. The constraint says that 
is true if 
and only if some action made it true, or it was previously true 
and no action made it false.  Thus the successor state axiom 
constraints take the form: 

where Creatc(Pl) and Delete(Pt) are the set of actions that 
create and delete P{. It is easy to automatically generate a set 
of successor state constraints from a set of STRIPS action de(cid:173)
scriptions.  Additionally, by using successor state constraints 
that mention additional propositions from step .s-1, it is easy 
to encode A DL [Pednault, 1989] operators as a set of succes(cid:173)
sor state axioms.1 

'Note that the successor state constraints do not encode the 
action preconditions.  These arc encoded as separate constraints. 
Thus, the only complication with ADL actions has to do with con(cid:173)
ditional effects. If Pi is a conditional effect of action 
subject to 
the successor state constraint will have a disjunct 
the condition 
will be true if  was executed and 

". That is, 

condition  held at the previous step. 

PLANNING 

4.  GP-Concurrency Constraints. The above successor state 
axiom allows the unintended model in which we have two 
actions at the same step, one creating a proposition and one 
deleting it.  To avoid such unintended solutions we must re(cid:173)
strict concurrent actions in some way. The most natural way 
is a serial constraint, which says that only one action variable 
can be true at any step.2 Another type of constraint is one that 
imposes GraphPlan concurrency. Basically it asserts that two 
actions cannot be simultaneously true if they  interfere with 
each other. In this work we have chosen to use the GraphPlan 
(GP) concurrency constraints. 
5. Non-Null Steps Constraints. We impose the constraint that 
for every step s at least one action variable should be true. 
This blocks null steps in the plan, in contrast LBlum and Furst, 
1997] and [Do and Kambhampati, 2001] both allow null plan 
steps. 

We  will  refer to  this  set of variables and  constraints  as 
the BASK-CSP.  Any solution to the BASR-CSP will contain 
a setting of the action variables that comprises a valid GP-
concurrent plan. If the BASE-CSP has no solution then no k 
GP-step plan exists for the problem. 

3  Reduction of the BASE-CSP 
Given a BASE-CSP representing a k-step planning problem 
we can use various transformations to modify it, generating a 
new CSP that is empirically easier to solve, and that is equiv(cid:173)
alent to the BASe-CSP in the sense that any solution to the 
new CSP can easily be extended to a solution to the origi(cid:173)
nal BASE-CSP. These transformations include inferring new 
constraints that can be added to the CSP and eliminating var(cid:173)
ious single valued variables. Our transformations are related 
to the well known techniques of enforcing local consistency 
on a CSP prior to solving it [Freuder, 1985], however they are 
based on taking advantage of the specific logical form of the 
above set of constraints. 
3.1 Adding GraphPlan Mutex Constraints 
A well known technique for making CSPs easier to solve is to 
add redundant constraints, e.g., [Getoor et ai,  1997], which 
are constraints that make explicit additional relations between 
the variables. Redundant constraints that are useful to add are 
usually determined by examining the structure of the partic(cid:173)
ular CSP. This is precisely what is done in planning graphs, 
where insights into the manner in which actions and propo(cid:173)
sitions interact, are used to generate a new set of binary con(cid:173)
straints called mutexes. 

New binary constraints can be added to a CSP by enforcing 
consistency [Freuder, 1985]. A CSP is 
consistent if 
for every valid assignment to a pair of variables, there is a set 
of values for every  additional variables such that the 
assignments satisfy all of the constraints over these variables. 
Making a CSP 
consistent can be very expensive as it in(cid:173)
variables, and each test in the 
volves testing all sets 
worst case takes time exponential in 
In planning problems 
there can be thousands of variables, so it would be impossible 

2Serial actions can be used to represent true concurrency by 
adding timestamps to the states [Bacchus and Ady, 2001; Pirri and 
Reiter, 2000]. 

consistent even for small 

consistency over a limited collection of 

to make the entire BASE-CSP 
The contribution of GRAPHPLAN  is that it demonstrated a 
technique that quickly achieves a very effective partial form 
of 
variables. 
We can use the CSP representation to directly compute the 
binary mutex constraints generated by planning graphs.  In 
this manner we lift the mutex computation to a more general 
framework where it can be more easily generalized. 

Mutexes in GraphPlan are generated by three simple rules: 
(1) Base Action Mutexes. Actions in the same GP-step with 
interfering effects and preconditions are mutex.  (2) Addi(cid:173)
tional Action Mutexes. Two actions in the same GP-step are 
mutex if there is a pair of propositions, one from each action's 
preconditions, that are mutex at this GP-step.  (3) Proposi-
tional Mutexes. Two propositions, 
at the same 
GP-step, are mutex if every action that achieves 
is mutex 
with every action that achieves  We can create all of these 
binary constraints by testing for very similar conditions in the 
CSP encoded planning problem: 

and 

Base Action Mutexes.  These mutexes are already present 
in the BASH-CSP; they are the GP-concurrency constraints. 

all actions that create 
satisfied by the actions creating 

A similar condition must be 

As in planning graphs, We can use the constraints added 
at step 
The 
following result can then be easily proved (we omit the proof 
for reasons of brevity). 

to test for new mutex constraints at step 

Proposition 1 // the planning graph construction has de(cid:173)
tected a mutex constraint between two variables and 
(action or propositional variables), then after transforming 
the BASH-CSP to add the above mutex constraints we will 
have  that  either  both variables in the CSP will have be(cid:173)
come single valued with not both being true or (h) there will 
be  binary constraint in the CSP between these variables 
that prohibits them from both being true. 
That is, the transformed CSP will capture all of the planning 
graph mutexes. Furthermore, it might contain more mutexes 
than those inferred by the planning graph. In the simplest case 
this can arise from the last case presented above where every 
action deletes one of 
This can create a new mutex 
in the middle of the plan.  In planning graphs, on the other 
hand, once 
appear in the graph without a mutex 
between them, they can never become mutex again (due to 
the presence of no-ops and the possibility of null steps in the 
plan). 

and 

or 

Propositional  Mutexes.  For  propositional  mutexes  we 
have one added complication, which is that our encoding, un(cid:173)
like planning graphs, does not utilize no-ops. Nevertheless, a 
general condition for when two propositions 
are 
mutex can be given by examining the three cases. 

and 

Our translation from a planning problem produces a BASB-
CSP  in  which  every  constraint  C  is  represented symboli(cid:173)
cally by a logical formula.  We can simplify this logical for(cid:173)
mula directly by replacing the single valued variable V by its 
value, and then performing standard logical reductions, e.g., 

956 

PLANNING 

FALSE 
logical formula that represents the reduced constraint C". 

etc. This yields a new 

In the case of the BASH-CSP we also know the form of 
its different constraints.  This allows us to precompute many 
types of constraint reductions, so we can realize many types 
of single valued variable reductions more efficiently. 

must be false.  If 

The reduction of a single valued variable, or the applica(cid:173)
tion  of some  of the  other transformations described below, 
might generate new single valued variables that can in turn 
be reduced. It can also interact with the generation of mutex 
constraints, allowing new mutexes to be detected. For exam(cid:173)
ple, say that we have determined that a propositional variable 
appears in any conjunctive precon(cid:173)
wc will also immediately infer 

ditions, e.g., 
i.e., that.  has also become single valued (false).  With 
false it can no longer be a candidate for producing some other 
proposition 
, and we could possibly infer a new mutex 
involving 
since one of the  ways of making it true  is 
now blocked. With mutexes, single valued variable reduction 
subsumes reachability analysis of planning graphs. 

Proposition 2 The variables that remain in the CSP after 
single valued variables have been reduced, are a subset of 
the variables appearing in the planning graph. 
4  Beyond GRAPHPLAN 
Besides subsuming, and slightly generalizing, the planning 
graph inferences, further transformations can be utilized on 
the CSP. These transformations either add more constraints to 
the CSP or cause further variables to become single valued. 
In either case,  like the planning graph inferences, they are 
used to make the CSP easier to solve. These additional con(cid:173)
straints can also feed into the standard GraphPlan reductions 
described above, and thus generate even further mutexes. 

4.1  Additional  Binary  Constraints 
Graphplan  mutexes  only  prohibit  the  single  pair  of values 
for two  variables  (TRUH,TRUE).  Our representation treats 
negated propositions and  actions  in  an  entirely  symmetric 
fashion. This means that the analysis for mutexes given above 
will allow us to compute mutexes between any two values. 
For  example,when  applied  t o b e i ng  mutex 
i.e., these vari(cid:173)
with 
ables must both be true or both be false.  Such binary con(cid:173)
straints can be detected and added to the BASE-CsP. 
4.2  Single Valued Variable Reduction beyond 

means that 

with 

is" 

GRAPHPLAN Reachability 

As demonstrated above, single valued variable reduction is as 
powerful as the reachability analysis inherent in the planning 
graph construction. However, in the CSP encoding it is more 
powerful, obtaining, for example, the following additional re(cid:173)
ductions: 

1.  Propositions that are never modified by any action, are 
propagated without change in the planning graph. Since 
these propositions have no creators nor deletors,  their 
successor state axiom reduces all of them to being equiv(cid:173)
alent to their status in the initial state, i.e., they will all 

become single valued.  Thus they can be reduced from 
the CSP prior to searching for a solution. 

2.  If all possible actions at step s create proposition 

is forced to be true.  Similarly if it is deleted 

then 
by all possible actions then it is forced to be false, 
can then be reduced from the CSP. This particular reduc(cid:173)
tion is not possible in planning graphs due to the pres(cid:173)
ence of no-ops. 

3.  Variables that are  forced to be true  further reduce all 
variables that are mutex with  them  to be  false.  This 
does not help reduce a planning graph since in planning 
graphs mutexes are monotonically decreasing and, other 
than the initial state variables, variables are never forced 
to be true.4  But in the CSP encoding the previous rules 
for forcing a variable to be true, and for creating a new 
mutex when it did not exist at the previous step, enable 
additional single valued variable reductions. 

4.3  Sequence Constraints 
There are some additional constraints that can be imposed on 
plans to rule out obvious inefficiencies. For example, it never 
makes sense in the plan to immediately follow an action by 
its inverse (e.g., a load followed by an unload). Adding this 
constraint allows eliminating different invalid combinations 
of actions by making mutex any  inverse pairs of actions at 
consecutive time steps. 

are inverses of each other, and that 

Blocking the immediate sequencing of inverse actions also 
allows us to infer additional sequence constraints.  Say that 
actions 
is 
while Aj  is the only action 
the only action that produces 
that deletes it.  Then another constraint that can be inferred 
from the mutex between 
first 
becomes true, it must remain true for at least one more time 
step: 

is that when 

and 

and 

There is also a similar constraint for when 
false. 

first  becomes 

Our system automatically detects action pairs that are in(cid:173)
verses of each other as well as any predicates over which a 
sequence constraint can be imposed. 

5  CSP-PLAN:  Implementation 
Based on the transformations explained before, we have de(cid:173)
veloped a planner called CSP-PLAN that will find a solution 
to a planning problem.  CSP-PLAN builds the BASE-CSP in(cid:173)
crementally up to step s (beginning with s  =  1), and then 
sends it to a CSP Solver for its solution. If the solver reports 
no solution to it, then the BASK-CSP is constructed for s+l. 
This cycle can continue until some termination condition has 
been reached or a plan has been found.  It is important to 
notice CSP-PLAN solves these problems incrementally, thus 
ensuring that it finds a GP-step optimal plan. 

The CSP solver used by CSP-PLAN is EFC [Katsirelos and 
Bacchus, 2001] which allows the use of different techniques 

4This means that the variable that is mutex with the true variable 
never appears in the planning graph until the mutex no longer holds. 

PLANNING 

957 

Problem 
Bw-large-12 
Bw-large-a 
Rocket-a 
Rocket-b 
DnverLog2 
Driver Log3 
Driver Log4 
DrivcrLog5 
DnverLog6 

GAC 
0  46 
1.44 
2166 
5.26 
59  13 
0  42 
71.13 
139 98 
0 06 

GACCBJ 
0.10 
0.49 
13 74 
4.44 
2109 
0.23 
29.96 
62.98 
0.05 

GACvsCBJ 
0  10 
0.49 
1401 
4  48 
21.28 
0.23 
29 96 
63.65 
0.06 

Record NoGoods 
0.11 
0.50 
10 67 
3.39 
1038 
0.15 
16.54 
29.59 
0 06 

| 

|  Problem 

Bw-large-12 
Bw-lnrge-a 

|  Rockct-a 
Rockct-b 
DnverLog2 
DnverL.og3 
DnvcrLog4 
DriverLog5 
DnvcrL.og6 

dom+deg 
0 10 
0.51 
10 65 
3 38 
10.38 
0 15 
16.54 
24.59 
006 

BSEARCH 
0 08 
0.56 
0.54 
1.24 
0 46 
0.03 
0.19 
0 17 
0.01 

Table 2: Effect of changing the DVO heuristic on the perfor(cid:173)
mance of the CSP solver for planning problems. Experiments 
were run using GACvsCBJ+RecordNoGoods 

I  Problem 

Log-a 
Log-b 
Rockct-a 
Rockct-b 
Gripper-01 
Gripper-02 

No redundant 
constraints 
0.06 
16.14 
1 41 
1.85 
0 12 
17 11 

Inverse 
mutexes 
0 09 
15.17 
148 
1 77 
0 06 
13 20 

Sequence 
constraints 
0 06 
213.50 
1.31 
2 15 
0 10 
1701 

Table 3:  Effect of adding mutexes between inverse actions 
and sequence constraints to the BASE-CSP. 

DVO heuristics, the addition of redundant constraints, the re(cid:173)
moval of single valued variables, etc. The addition of redun(cid:173)
dant binary constraints, particularly mutexes, and the detec(cid:173)
tion and removal of single valued variables has a clear and 
dramatic effect on the efficiency of CSP-PLAN, even for sim(cid:173)
ple problems.  For example, on bw-large-12, the  BASE-CSP 
has 1,289 variables and 10,426 constraints, but only 657 vari(cid:173)
ables and 2,847 constraints after single valued variables are 
removed.  Similarly, without the inferred mutex constraints 
and the removal of single valued variables,  CSP-PLAN  re(cid:173)
quired 154.3 sec.  to solve the problem.  Adding the mutex 
constraints reduced this time down to 0.33 sec, and removing 
single valued variables brought the time down even further to 
0.04 sees.  The effect of some of the other planning specific 
techniques is described below. 
DVO heuristic:  The order in which variables are instanti(cid:173)
ated during search  greatly affects the  solution times  for a 
CSP. Table 2 shows the difference in performance between 
the standard CSP heuristic 
and  our BSEARCH 
heuristic which was designed specifically to take advantage 
of the planning based structure of the CSPs that CSP-PLAN is 
solving. These representative problems show that BSEARCH 
performs much better than dom+deg. 
Redundant Constraints: Table 3 shows the performance of 
CSP-PLAN  when mutexes between inverse actions and se(cid:173)
quence constraints are added to the  BASE-CSP.  On these 
problems we see that there is a slight improvement in CSP-
PLAN when mutexes between inverse actions are present. In(cid:173)
terestingly, adding sequence constraints did not help. Minor 
improvements on some problems were negated by significant 
degradation on others. 

6.3  Comparison with similar approaches 
The results in Table 4 show how CSP-PLAN (using the same 
setting for all problems)7 compares with GRAPHPLAN [Blum 

7 A number of planning domains could be solved faster with dif(cid:173)
ferent settings; e.g., the heuristics sometimes performed differently 

958 

PLANNING 

Problem 
Dw-largc-a 
Bw-large-b 
Gripper-02 
Gripper-03 
Log-a 
Log-b 
Rocket-a 
Roekct-b 
Depots3 
Depots4 
DrivceLog8 
DriverLog9 
DriverLog10 
ZcnoTrave16 
ZenoTravel7 
ZenoTraveI8 
ZenoTravel9 
ZenoTravel 10 
Satellite 3 
Satclhle4 
Satellite5 
Freccelll 

C S P - P L AN 
0.18 
15.18 
15.36 
1.328  63 
0.05 
14.87 
1.51 
1.79 
1103 
4.59 
0.78 
28  99 
77  75 
0.24 
0.18 
0.52 
37  16 
3.55 
0  13 
5  08 
262  72 
0.10 

G K A P H P L AN 
0 21 
19 53 
2.17 
135 00 
1,733.00 
675.00 
46 46 
128.00 
241 
3.80 
16 05 
270 00 
123  00 
0.64 
0  67 
140 
4.84 
9,228 00 
0 23 
271.00 
9,256 00 
14 24 

Gr-Csp 
0.63 
106.00 
62  00 
>  3hn». 
47  75 
143.00 
40  50 
22.68 
15  75 
82.00 
0.38 
90.00 
22.23 
0.55 
0  61 
124 
4.10 
28  53 
0  20 
77.02 
5.759 00 
183  00 

BLACK BOX 
0.23 
17.50 
1  87 
2,485  00 
5  50 
5.72 
5 44 
5.57 
2 36 
3  72 
5  70 
6.27 
7.89 
0  43 
0  44 
0  90 
3.40 
7.52 
0  23 
6.26 
6.49 
12 90 

lPP(4  1) 
0.06 
2.84 
0.10 
1.08 
165 20 
120 64 
5  96 
21  10 
0.22 
0.44 
2.67 
6.50 
11  08 
CNF 
CNP 
CNP 
CNP 
CNP 
0.04 
4.83 
175  27 
0  88 

Table 4:  Comparison of CSP-PLAN with GRAPHPLAN,  GP-
CSP,  BLACKBOX and IPP on a set of problems from the 
STRIPS  domain.  "CNF' means could not parse.  Lowest 
times are in bold. 

and Furst,  1997],  GP-CSP  [DO and Kambhampati,  2001], 
BLACKBOX [Kautz and Selman, 1998] and IPP 4.1 [Koehler 
et al,  1997].  These planners have in common the construc(cid:173)
tion of a planning graph.  The planning graph is either then 
compiled into a CSP (GP-CSP) or a SAT formula (BLACK-
BOX), or searched directly for a solution (GRAPHPLAN and 
IPP 4.1).  CSP-PLAN, on the other hand, bypasses the plan(cid:173)
ning graph construction and directly exploits the CSP encod(cid:173)
ing of the problem as explained above. 

It can be seen that  CSP-PLAN  yields significantly better 
performance in almost all cases over the standard planning 
graph  planners  GRAPHPLAN  and  GP-CSP.  This provides 
evidence  of the  effectiveness  of the  additional  constraints 
and reductions computed by CSP-PLAN. The results against 
BLACKBOX are mixed. This version of BLACKBOX utilizes 
the highly engineered Zchaff [Moskewicz et aL, 2001] SAT 
solver. ZchafTutilizes very different heuristics and techniques 
for learning nogoods (clauses) than  CSP-PLAN and is more 
efficient that our current CSP code on larger problems. Nev(cid:173)
ertheless, there is considerable scope for making our CSP-
PLAN implementation more efficient, and our heuristics are 
at this stage very simple. Even so, our approach demonstrates 
its usefulness on problems like gripper. 

Similarly against IPP our results are mixed.  A key com(cid:173)
ponent of IPP is a method for solving planning problems by 
dividing them into a set of smaller problems using a goal 
agenda [Koehler, 1998b]. This technique is particularly effec(cid:173)
tive on domains like BlocksWorld, Depots and Gripper, and 
it can easily be recast in terms of CSPs. Hence, CSP-PLAN 
could be extended to utilize this technique. On other domains 
like logistics CSP-PLAN is more effective. This is due partic(cid:173)
ularly to the presence of mutexes between inverse actions in 
these domains that can be effectively used by CSP-PLAN. 

MirsOpt  Level 
1 
3 
5 
7 
9 
C'SP-Pl AN 

Time 
3  52 
7  09 
28 02 
80 44 
96 44 
774  86 

Steps 
110 
102 
108 
105 
104 
75 

Acts 
175 
178 
197 
221 
225 
194 

Res 
11.761 
11.505 
13,130 
10.853 
11,630 
11,345 

Table 5: Effect of changing the optimization value for MIPS. 
Each value in this table is the sum of the results for Driver-
Log 1 to DriverLoglO. "Res": resource usage, "Steps": num(cid:173)
ber of GP-steps, and "Acts": number of actions in the plan. 

7  Extensions: Planning with Resources 
A major advantage of encoding planning problems as CSPs 
is that we can easily extend the encoding to represent more 
complex planning problems.  For example, planning prob(cid:173)
lems with resources can simply be represented as CSPs with 
numeric variables.  To demonstrate the flexibility of our ap(cid:173)
proach we implemented an extension of CSP-PLAN to deal 
with such planning problems. Previous approaches based on 
planning graphs (e.g., [Koehler, 1998a]) have had to develop 
from scratch methods for dealing with the resources variables 
in the planning graph,  like  interval  arithmetic and bounds 
propagation. These techniques are already well known in the 
CSP  field. 

To handle planning with resources we introduced the fol(cid:173)
lowing  into  CSP-PLAN:  (1)  Mathematical  operation  con(cid:173)
straints, e.g., 
(2) comparison constraints, e.g., 
(3) precondition constraints containing comparisons, 
e.g., 
fuel  (truck)  (4) successor state constraints to define 
how the numeric variables could change between states, e.g., 
if no action affecting it is true, its value cannot change; (5) 
and  finally,  additional  concurrency constraints to block  ac(cid:173)
tions from simultaneously altering a numeric variable. These 
new constraints were very easy to add to the BASE-CSP, and 
the reduction transformations described above were used al(cid:173)
most unchanged to simplify the BASK-CSP. 

We compared CSP-PLAN with MIPS [Edelkamp, 2002] 8 
to evaluate its performance on resource planning problems. 
MIPS combines two paradigms, model checking and heuris(cid:173)
tic search,  to find totally ordered plans that are then made 
concurrent using a post-processing procedure.  This combi(cid:173)
nation of paradigms introduces additional complexity to the 
algorithm, in contrast with the uniform paradigm used in our 
approach. MIPS tries to minimize the number of steps in the 
final plan, using an optimization parameter that ranges from 
1 to 10.  Table 5 shows this how parameter affects the qual(cid:173)
ity of the final plans in MIPS. Increasing the parameter causes 
MIPS to spend more time trying to find plans with fewer steps. 
However, this search is not always successful.  In fact MIPS 
can spend more time and generate worse results.  CSP-PLAN, 
on the other hand, is an optimal planner always finding the 
shortest plan in terms of number of GP-steps. This is a sightly 
different optimization criteria from that used by MIPS. How(cid:173)
ever,  even under MlPS's optimization criteria  CSP-PLAN\S 
plans are much better than those found by MIPS.9 

Table 6 compares both planners (MIPS running with its op(cid:173)
timization flag set to 5).  The results in this table show that 

on different domains. 

8MlPS competed in IPC3. No planning graph based planner was 

959 

Problem 
Depotsl 
Depots2 
DriverLogl 
DriverLog2 
DriverLog3 
DriverLog4 
DriverLogS 
DnvcrLog6 
Driverl.og7 
DriverLog8 
DriverLog9 
Driver Log10 

Time 
0 05 
1.55 
0.01 
0  47 
0  08 
0.13 
0  21 
0.04 
0  14 
5 24 
73.27 
695.27 

CSP-PLAN 
Steps 
7 
10 
6 
9 
7 
7 
8 
5 
6 
8 
1! 
8 

Acts 
11 
16 
8 
23 
12 
18 
18 
13 
18 
27 
32 
25 

Res 
32 
43 
1099 
979 
907 
703 
654 
965 
1060 
1920 
2485 
573 

Time 
0 04 
0  06 
0.04 
0.08 
0 04 
5 77 
121 
0.15 
0  25 
15.78 
1.67 
3.03 

MIPS 
Steps 
9 
10 
6 
12 
7 
9 
13 
7 
7 
17 
14 
16 

Acts 
11 
18 
8 
22 
14 
19 
22 
15 
13 
29 
30 
25 

Res 
32 
44 
1099 
1605 
1051 
757 
838 
1667 
866 
2217 
2787 
243 

Table 6:  Performance comparison of CSP-PLAN  and  MIPS 
on resource planning problems. "Res", "Steps" and "Acts" as 
explained in table 5. 

CSP-PLAN has a performance comparable to  MIPS, and in 
most cases, the quality of the plans (number of steps) is con(cid:173)
siderably better. However, CSP-PLAN does not scale as well 
as  MIPS,  e.g.,  it takes much  longer than  MIPS  on  Driver-
Log l0. But is not surprising since  CSP-PLAN is an optimal 
planner while MIPS is not. Achieving optimality quickly be(cid:173)
comes very difficult. It is also important to note that our pro(cid:173)
totype implementation uses very simple techniques to prop(cid:173)
agate numeric variables.  These techniques are far from the 
current state of the art in CSPs. Nonetheless, we see that we 
still obtain results competitive with the competition version 
of MIPS. 
8  Conclusions 
Our implementation of CSP-PLAN has demonstrated that the 
structure of planning problems can be exploited directly in 
a CSP encoding.  By lifting the planning problem to a CSP 
we obtain a richer and more robust representation for which 
many  sophisticated  and  effective  solution  techniques  have 
been developed. In particular, we are able to capture and gen(cid:173)
eralize the important inferences generated by planning graphs 
directly in the CSP representation.  This provides excellent 
performance for CSP-PLAN in comparison with similar tech(cid:173)
niques.  Additionally, by showing how easily we can extend 
our representation to planning with resources, we have pro(cid:173)
vided evidence for the benefits of lifting the problem to a CSP 
encoding. 

This work naturally leads to a number of future research 
topics.  For example, the fastest current planners are based 
on local search.  Nevertheless, the heuristics used in these 
planners utilize notions from the planning graph construction. 
It seems feasible that instead of planning graphs, CSP tech(cid:173)
niques could be utilized directly to compute better heuristics. 
This could be particularly beneficial for computing more in(cid:173)
formative admissible heuristics.  Better heuristics and addi(cid:173)
tional transformations could also be explored.  In particular, 
there is still much scope for improving the performance of 
this approach. Finally, the approach is well suited to resource 
usage optimization using branch and bound techniques dur(cid:173)
ing the search, and this could be further investigated. 

extended to deal with resources in this competition. 
usage, just the size of the plan. 

9Note that neither planner is actually trying to optimize resource 

References 
[Bacchus and Ady, 2001] Fahiem Bacchus and Michael Ady. Plan(cid:173)
ning with resources and concurrency, a forward chaining ap(cid:173)
proach. In IJCAI-2001, pages 417-424. 

[Bacchus, 2000] Fahiem Bacchus. Extending forward checking. In 
CP2000, number 1894 in LNCS, pages 35-51. Springer-Verlag. 
[Blum and Furst, 1997] Avrim Blum and Merrick Furst. Fast plan(cid:173)
ning through planning graph analysis.  Artificial Intelligence, 
90:281 300, 1997. 

[Do and Kambhampati, 2001 ] Minh Binh Do and Subbarao Kamb-
hampati.  Planning as constraint satisfaction: Solving the plan(cid:173)
ning graph by compiling it into CSP.  Artificial Intelligence, 
132(2):151-182, 2001. 

[Edelkamp, 2002] Stefan Edelkamp. Mixed propositional and nu(cid:173)
merical planning in the model checking integrated planning sys(cid:173)
tem. In AIPS-2002, Workshop on Temporal Planning, 2002. 

[Freuder, 1985]  E. Freuder.  A sufficient condition for backtrack-

bounded search. Journal of the ACM, 32(4):755-761, 1985. 

[Getoor etai, 1997]  L. Gctoor,  G. Ottosson,  M. Fromherz,  and 
B. Carlson.  Effective redundant constraints for online schedul(cid:173)
ing. In AAAI-1997, pages 302 307. 

[Katsirelos and Bacchus, 2001]  George  Katsirelos  and  Fahiem 

Bacchus. A library for solving CSPs, 2001. 
www.cs.toronto.eduTgkatsi/efc.tar.gz. 

[Kautz and Selman, 1996]  Henry Kautz and Bart Selman.  Push(cid:173)
ing the envelope:  planning, propositional logic, and stochastic 
search. In AAAI-1996, pages 1194 1201. 

[Kautz and Selman, 1998] H. Kautz and B. Selman. Blackbox: A 
new approach to the application of theorem proving to problem 
solving. Workshop on Planning as Combinatorial Search, AIPS-
1998. 

[Kochler et al, 1997] J. Kochler, B. Ncbcl, J. Hoffmann, and Y. Di-
mopoulos. Extending planning graphs to an ADL subset. In Eu(cid:173)
ropean Conference on Planning, pages 273 -285, 1997. 

[Koehler, 1998a]  J. Kochler.  Planning under resource constraints. 

In ECAI-1998, pages 489-493. 

[Kochler, 1998b]  J.  Koehler.  Solving  complex  planning  tasks 
through extraction of subproblems. In AIPS-1998, pages 62-69. 
[Moskewicz <7 al., 2001] M. Moskewicz, C. Madigan, Y. Zhao, 
L. Zhang, and S. Malik.  Chaff:  Engineering an efficient sat 
solver. In Proc. of the Design Automation Conference (DAC), 
2001. 

[Pednault, 1989] E. Pednault. ADL: Exploring the middle ground 
between STRIPS and the situation calculus. In KR-1989, pages 
324-332. 

[Pirri and Rciter, 2000] F. Pirri and R. Reiter. Planning with natural 

actions in the situation calculus. In Jack Minker, editor, Logic-
Based Artificial Intelligence. Kluwer Press, 2000. in press. 

[Reiter, 2001] R. Rciter. Knowledge in Action: Logical Founda(cid:173)

tions for Specifying and Implementing Dynamical Systems. MIT 
Press, 2001. 

[van Beek and Chen, 1999] P. van Beek and X. Chen. CPlan: A 
constraint programming approach to planning. In A A Al-1999, 
pages 585-590. 

[Vossene/a/.,2001] T. Vossen, M. Ball, A. Lotem, and D. Nau. 
Applying integer programming to Al planning. Knowledge En(cid:173)
gineering Review, 16:85 100, 2001. 

960 

PLANNING 

