The Concurrent, Continuous FLUX 

Yves Martin 

Technische Universitat Dresden 

D-01062 Dresden, Germany 
yml@inf.tu-dresden.de 

Abstract 

FLUX belongs to the high-level programming lan(cid:173)
guages  for  cognitive  agents  that  have  been  devel(cid:173)
oped  in  recent  years.  Based  on  the  established, 
general action representation formalism of the Flu(cid:173)
ent Calculus,  FLUX  allows to implement complex 
strategies  in  a  concise  and  modular  fashion. 
In 
this paper, we extend the FLUX language to reason 
about  domains  involving  continuous  change  and 
where actions occur concurrently.  Using constraint 
logic programming, we show that this reasoning is 
performed in an efficient way. 

Introduction 

1 
One of the most challenging and promising goals of Artificial 
Intelligence research is the design of autonomous agents, in(cid:173)
cluding robots, that solve complex tasks in a dynamic world. 
To reach  autonomy  in partially known,  constantly  changing 
environments requires the high-level cognitive capabilities of 
reasoning  and  planning.  Using  a  mental  model  of the  state 
of their  environment  allows  for  the  agents  to  calculate  the 
outcome  of different  action  sequences  in  advance  and  then 
choose the best plan to execute for a specific goal in mind. 

Formal  theories  of  reasoning  about  actions  and  change 
have  the  expressive power to  provide  such high-level  capa(cid:173)
bilities. The Fluent Calculus [Thielscher, 1999], as one of the 
established  action  representation  formalisms,  uses  the  con(cid:173)
cept of state  update axioms to solve the representational and 
inferential  aspect  of  the  classical  Frame  Problem.  Based 
on  this  formal  theory,  the  high-level  programming  method 
FLUX has been developed in recent years [Thielscher, 2002]. 
Using  the  paradigm  of  constraint  logic  programming,  the 
powerful  FLUX kernel provides general reasoning  facilities, 
so that the agent programmer can focus on the high-level de(cid:173)
sign of intelligent agents. 

Autonomous  agents  in  real-world  environments  have  to 
take  into  account  that  the  execution  of actions  takes  differ(cid:173)
ent amounts of time.  Some actions can be modeled as  dis(cid:173)
crete changes,  others  involve continuous change and should 
rather be seen as the initiation or termination of complex pro(cid:173)
cesses. Such processes may contain parameters whose values 
change continuously  and which are  formalized as functions 

over  time.  A  car moving  on  a  road  with  a  constant  veloc(cid:173)
ity  v,  for instance,  can  be  represented  by  a  'process fluent' 
Movement 
where  the  parameter  x0  denotes  the 
location of the car at the time  when the motion was initi(cid:173)
ated.  The  fluent  Movement  itself,  although  it  describes  the 
particular  continuous  change 
for  the 
location  x  of the  car at the  time t,  will  stay  unchanged until 
some  other action  will  affect  it.  Continuous  change  is  then 
modeled  by fluents describing  arbitrarily  complex,  continu(cid:173)
ous processes. These fluents remain stable in between the oc(cid:173)
currence  of two  consecutive  actions,  and yet they  internally 
represent continuous change. 

In a world full of ongoing processes, however, an agent ex(cid:173)
ecuting a plan is not the only source of change. Also the laws 
of physics  frequently  imply an  evolution of the environment, 
like for example, the action of a falling ball bouncing when it 
reaches the floor. The fundamental property of such so-called 
natural actions [Reiter,  1996]  is that they must occur at their 
predicted times, provided no earlier actions (natural or delib(cid:173)
erative) prevent them from occurring.  Because such actions 
may  occur  simultaneously,  concurrency  must  be  accommo(cid:173)
dated. 

In this paper, we present a FLUX system which allows for 
the  design  of intelligent  agents  that  reason  and  plan  in  do(cid:173)
mains involving continuous change and where actions occur 
concurrently.  Using  the  paradigm  of constraint  logic  pro(cid:173)
gramming,  our extension  to  FLUX  integrates  both  kinds  of 
actions,  deliberative  and  natural,  into  one  method  for  the 
planning  and  execution  of actions.  Reasoning  in  terms  of 
time  intervals,  our  method  allows  for  the  efficient  genera(cid:173)
tion  of plans  in  concurrent,  continuous  environments.  Our 
work is based on the theoretical approach presented in [Herr(cid:173)
mann and Thielscher,  1996; Thielscher, 2001a].  Other exist(cid:173)
ing  agent  programming  methods  like  the  robot  control  lan(cid:173)
guage developed in  [Shanahan and Witkowski, 2000]  or the 
GOLOG programming  language  [Levesque et al.,  1997], do 
not  handle,  in  domains  involving  concurrency  and  continu(cid:173)
ous  change,  the  concept  of a  natural  action  at  all  or  only 
have  separate  accounts  for  natural  actions  on  the  one  hand 
[Reiter,  2001]  and  for deliberative actions on the other hand 
[Grosskreutz, 2002]. 

In the next section, we introduce our example scenario and 
shortly  recapitulate  the  fundamentals  of the  FLUX  system. 
We then give briefly the theoretic solution in the Fluent Cal-

REASONING ABOUT ACTIONS AND CHANGE 

1085 

cuius.  Thereafter, we present our extension of FLUX to con(cid:173)
current,  continuous domains and discuss the employed con(cid:173)
strained handling techniques.  In the last section we conclude 
and show some possible future work. All programs are avail(cid:173)
able on our web site:  h t t p: //www. f l u x a g e n t. o r g/ 
2  FLUX 
The example agent program in this paper is set in a waterway 
scenario.  The agent has to steer a barge through a system of 
canals.  The water levels in the canals are dependent on tides. 
At some places of the canals there are locks which a ship can 
only pass on a high tide.  Due to the geographical facts the tide 
levels  differ  for  different  locks.  The  canals  themselves  are 
too small to turn around but sometimes there are intersections 
where the agent steering the barge can choose one direction 
(see also Fig. 1). 

To  develop  an  agent  for  this  scenario,  we  use  the  high-
level programming method  FLUX which  is grounded in the 
action  theory  of the  Fluent  Calculus.  The  Fluent  Calculus 
is  a  many-sorted  predicate  logic  language  with  four  stan(cid:173)
dard sorts:  FLUENT, STATE, ACTION, and slT(for situations) 
[Thielscher, 1999].  States are compose  of fluents (as atomic 
states)  using the standard  function o  :  STATE  STATE 
STATE and constant 
STATE  (denoting  the  empty  state). 
The program for our agent, for example,  uses these two flu(cid:173)
ents: 
and  Tide 
the wa(cid:173)
at time 
at  lock I  is  at high/low tide.  Similarly  as  in the 
ter level 
denotes the 
Situation Calculus [Reiter. 2001], the constant 
the situation after having per(cid:173)
initial situation and 
formed action a in situation s at time t. The state of a situation 
s is denoted by the standard function State(s).  For example, 
the  initial  state  in  the  waterway  scenario  of Fig.  1  may  be 
axiomatized as2 

representing that the barge is at  cell 

denoting that at time 

The  reader  may  notice  that  an  incomplete  state  with  addi(cid:173)
tional negative information has been specified,  i.e., the sub-
STATE  may contain many more  fluents,  but no more At or 
Tide fluents. The foundational axioms of the Fluent Calculus 
ensure that the composition function 
exhibits the proper(cid:173)
ties of the union function for sets (with 
is the empty set), so 
that a state is identified with all the fluents that hold.  On this 
basis, the macros Holds 
we defined as 
follows: 

and Holds 

'in anticipation of the integration of continuous change, the ar(cid:173)
gument t denotes the time when a fluent becomes true or an action 
takes place. 

2Predicate and function symbols, including constants, start with 
a capital letter whereas variables arc in lower case.  Free variables 
in formulas are assumed universally quantified.  Variables of sorts 
FLUENT, STATE, ACTlON,and SIT shall be denoted by letters /, z, a, 
and s, respectively. The function o is written in infix notation. 

Figure  1:  An example waterway scenario where the goal  for 
the agent is to steer the barge from cell (1,2) to the harbor at 
cell (3,2). There are three locks at cells (1,3), (1,1), (2,2). 

In our waterway scenario there are two elementary actions: 
GoByShip{d), 
the  deliberative  action  of the  agent  to  steer 
the barge  to  the next cell  which  lies  in  the  direction  d,  and 
TurnTide 
the  natural  action  indicating  the  turn  to  the 
tide w  at lock I.  The  fundamental  Frame  Problem  is solved 
in the Fluent Calculus by a so-called  state update axiom for 
each action, which describes the effects of the action in terms 
of the difference  between the  states before and  after the  ex(cid:173)
ecution of it.  For example, the action  TurnTide 
can be 
specified as 

where " -" and " +" are macros for fluent removal  and addi(cid:173)
tion; and the macro 
denot(cid:173)
ing in the Fluent Calculus that at time t action a is possible in 
state  State(s). 

Poss 

To reflect the incomplete knowledge of an  agent about its 
environment, incomplete states are encoded in FLUX as open 
lists,  that is,  lists with a variable tail,  of fluents [Thielscher, 
2002]. These lists are accompanied by constraints for negated 
state knowledge as well as for variable range restrictions. The 
constraints are of the form NotHolds\ 
, indicating that flu(cid:173)
ent  does not hold in state 
indicat(cid:173)
ing that no instance  of  holds in z.  In order to process these 
constraints,  so-called declarative  Constraint Handling Rules 
[Friihwirth,  1998] have been defined and proved correct un(cid:173)
der the foundational axioms of the Fluent Calculus (for details 
see [Thielscher, 2002]). 

and NotHoldsAlll 

For example,  the  initial  state  depicted  in  Fig.  1  may  be 

n o t _ h o l d s _ a l l ( a t ( _ , _ , _ ),  Z ), 
n o t _ h o l d s _ a l l ( t i d e ( _ , _ , _ ),  Z ). 

specified by this clause, 
i n i t ( Z O) 
Z 0 = [ a t ( 1 , 2 , 0 . 0 ) , t i d e ( l o c k l , h i g h , 0 . 0 ) , t i d e( 

:-

l o c k 2 , h i g h , 0 . 0 ) , t i d e ( l o c k 3 , h i g h , 0 . 0) 

1086 

REASONING ABOUT ACTIONS AND CHANGE 

fluent 
which also reflects the negative information that no , 
occurs  in  sub-state 
(the  location  of our  agent  is  unique), 
and  that  there  are  no  more Tide  fluents  other than  specified 
in state 

The  predicate  Poss 

realizes  the  precondition  ax(cid:173)
ioms for actions, that is, it defines under which conditions an 
action is possible at time t in state z.  There is one such pred(cid:173)
icate clause for each action.  Conditioning in FLUX is based 
on the foundational predicates Knows 
and  Knows  Val 
fluent  / holds (respectively, does not hold) in state 
there  exist  ground  instances  of the  variables  in 
fluent  /  is  known  to  be  true  in  state 
the precondition axiom for the action TurnTide 
implemented as follows, 

representing that the agent knows that 
and that 
such  that 
Take,  for example, 
which is 

KnowsNot\ 

poss (turntide(L,W)  ,T, Z) 

:-

(W=high,  k n o w s _ v a l ( [ L , T R ] , t i d e ( L , l o w , T R ) , Z ), 
d u r a t i o n ( L , l o w , D ); 
W=low/  k n o w s _ v a l ( [ L , T R ] , t i d e ( L , h i g h , T R ) , Z ), 
d u r a t i o n ( L , h i g h , D ) ), 
{T  =:=  TR  +  D}. 

where  the  auxiliary  predicate  Duration 
denotes  the 
duration  of the  corresponding  tide 
at lock/.  The execu(cid:173)
tion  time  of the  action  will  be  constrained,  using the syn(cid:173)
tax of the  constraint handling  library CLP(R)  of the  Eclipse-
Prolog system,  to be  the  sum  of the  starting time  of the old 
tide plus the duration of the old tide. 

As  in  the  Fluent  Calculus,  the  effects  of  actions  are 
encoded  as  state  update  axioms.  For  this  purpose,  the 
FLUX  kernel  provides  a  definition  of  the  auxiliary  predi(cid:173)
cate  Update 
Its  intuitive  meaning  is  that 
and 
state 
In  other  words,  the  pred(cid:173)

is  the result of positive  and negative effects 

respectively,  wrt.  state 

icate  encodes  the  state  equation 
On  this  basis,  the  agent  programmer  can  easily  implement 
the  update  axioms  by  clauses  which  define  the  predicate 
StateUpdate 
as for example in the following en(cid:173)
coding for the action TurnTide 
s t a t e _ u p d a t e ( Z l , t u r n t i d e ( L , W ) , T , Z 2) 
h o l d s ( t i d e ( L , W O , T O ) , Z l ), 
W=high,  u p d a t e ( Z l , [ t i d e ( L , h i g h , T ) ], 

:-

W=low,  u p d a t e ( Z l , [ t i d e ( L , l o w , T ) ], 

[tide(L,WO,TO)],Z2). 

[tide(L,WO,TO)],Z2); 

3  The concurrent, continuous Fluent Calculus 

The  Fluent  Calculus  for  concurrent  actions  is  based  on  the 
additional pre-defined sort CONCURRENT, of which ACTION 
is  a  sub-sort  [Thielscher,  2001a].  Single  actions  which  are 
performed  simultaneously  are  composed  to  terms  of  sort 
CONCURRENT  by  a  new  binary  function.  The  latter  is  de(cid:173)
noted  by  "•"  and  written  in  infix  notation.  This  function 
shares with the function combining fluents to states the prop(cid:173)
erties of associativity,  commutativity,  idempotency and exis(cid:173)
tence  of a  unit  element.  The  constant 
of 
sort CONCURRENT acts as the unit element wrt.  function ".". 
Similar to the Holds macro the abbreviation 
is used 
to denote that concurrent action C1 is included in concurrent 

(read: 

action 

State  update  axioms  for  concurrent  actions  are  recursive. 
They  specify  the  effect  of an  action  relative  to  the  effect  of 
arbitrary other, concurrent actions: 

I.e., 
are the additional negative and positive, re(cid:173)
spectively,  effects  which  occur  if action  a  is  performed  be(cid:173)
sides c. Here, 
can be a single action or a compound action 
which produces synergic effects, that is, effects which no sin(cid:173)
gle  action  would  have  if performed  alone.  Using  recursive 
state update axioms, the effect of, say, two simultaneous but 
independent actions can be  inferred by  first  inferring the ef(cid:173)
fect of one of them and, then, inferring the effect of the other 
action on the result of the first inference. The recursions stops 
with the base case of the empty action, which is defined as: 

Two  or  more  actions  may  interfere  when  executed  concur(cid:173)
rently, which is why the condition 
in the above state update 
axiom may restrict the applicability of the implication in view 
of concurrent action c. 

Integrating  continuous  change  in  the  Fluent  Calculus  re(cid:173)
quires  the  introduction  of process  fluents  which  can  repre(cid:173)
sent arbitrarily complex, continuous processes.  Because such 
processes may be modeled by equations of motions,  contin(cid:173)
uous  time  must  be  represented.  To  this  end,  the  new  sort 
REAL is added, which is to be interpreted as the real numbers 
[Thielscher,  2001a].  The  sort  is  accompanied  by  the  usual 
arithmetic operations along with their standard interpretation. 
The continuous Fluent Calculus includes the pre-defined flu(cid:173)
ent  StartTime 
is  of sort  REAL,  determining  the 
time  Start 
at which a state arises, provided that StartTime 
is unique: 

where 

As  already  indicated  throughout the  paper,  a parameter  t  of 
sort REAL  is also used to denote the time at which a fluent 
arises as in 
or to represent the  occurrence  of an 
action as in 
A standard requirement for the possi(cid:173)
bility to perform a concurrent action c at time t in state  may 
then be expressed as follows:4 

The  Fluent  Calculus 

for  continuous  change 

includes 
the  distinction  between  deliberative  and  natural  actions 
[Thielscher,  2001a].  The  latter  are  not  subject  to  the  free 
will  of a  planning  agent.  Rather they  happen  automatically 
In  our  example  domain,  the 
under  specific  circumstances. 

3 Variables of the new sort CONCURRENT are denoted by the let(cid:173)

ter c. 

4In our example domain we have no actions that are in mutual 
conflict. Therefore, we do not need to specify additional constraints 
in this precondition axiom. 

REASONING ABOUT ACTIONS AND CHANGE 

1087 

action  of the turn of the  tide  is  a natural  one.  The  standard 
predicate  Natural 
[adopted  from  [Reiter,  1996]]  declares 
the  action  a  to  be  natural.  To  facilitate  the  formalization 
of  the  automatic  evolution  of natural  actions,  the  continu(cid:173)
ous  Fluent Calculus  introduces two macros.  The expression 
ExpectedNatActions\ 
ac(cid:173)
tions c are all the natural actions that are expected to happen 
at time /: 

shall  indicate  that  in state 

Given  the  above  notion,  the  macro  NextNatActions 
stands for the concurrent action c being all natural actions that 
happen  in state  z  at time t  with  t  being the earliest possible 
time point at which natural actions are expected: 

The Fluent Calculus for continuous change uses the notion of 
a situation tree with trajectories [Thielscher, 2001a] where a 
trajectory  is associated with a situation  and denotes the  fur(cid:173)
ther evolution  of the state  determined  by the natural  actions 
that are expected to happen.  We do not follow this approach 
in  this  paper,  as  the  original  motivation  for  employing  tra(cid:173)
jectories has been domains with uncertainty about the occur(cid:173)
rence of natural actions, and we do not consider such domains 
here. The incorporation of domains with uncertain natural ac(cid:173)
tions is left for further work.  Instead, we include the natural 
actions in the situation terms, as with deliberative actions. 

4 

Integrating Concurrency and Continuous 
Change  into FLUX 
which denotes the compo(cid:173)
Similar to the binary function 
sition of states from single fluents and is represented in FLUX 
by a list of fluents, we represent the binary  function "•" as a 
list  of actions  in  FLUX.  In  this  way,  we  introduce  concur(cid:173)
rency into FLUX, i.e., all the actions in the list are performed 
concurrently.  On  this basis,  the unit element  of the  function 
"•", the constant 

is encoded as the empty list  [ ]. 

Given the notion of a list of concurrent actions, the state up(cid:173)
date axioms for the actions are defined recursively in FLUX. 
The  predicate Res 
specifies  the 
effect of performing at time  t the  list of concurrent actions li 
in state z\  and situation s i, and leading to the new state z% 
and the new situation Do 
after  the  execution  of the 
concurrent actions.  It represents one plan step and is encoded 
as follows 
r e s ( Z l , S l,  [],T,Z2,S1) 
h o l d s ( s t a r t t i m e ( T O ),  Zl)  , 
u p d a t e ( Z l , [ s t a r t t i m e ( T ) ] , [ s t a r t t i m e ( T O ) ] , Z 2 ). 

:-

:-

r e s ( Z l , S l , [ A | L ] , T , Z 2 , d o ( [ A | L ] , T , S 1 )) 
update*  [A|L]  ,  []  ,  [A]  ,L1)  , 
s t a t e _ u p d a t e ( Z l,  A,  T,  Z3)  , 
r e s ( Z 3 , _ , L l , T , Z 2 , _ ). 
where  the  clause  for the  base  case  of the recursion  extends 
the  effect  of the  constant  "e",  which  by  itself has  none,  to 
update the pre-defined fluent Start71me(t)  needed for FLUX 

with  continuous  change  to  the  new  value  t.  Similar  to  the 
encoding  of the  macros  for fluent removal  and addition,  the 
predicate  Update is used in the clause for the recursive case 
to implement the elimination of one single action from a term 
of arbitrary other,  concurrent actions. 

Consider, for example, the state update axiom of the single 

{T  >=  ST  +  1.0}, 

location  of  the  barge 

action GoByShip(d) which is implemented as: 
state_update(Zl,gobyship(D)  ,T,Z2) 
: -
k n o w s _ v a l ( [ X , Y ] , a t ( X , Y , T O ) , Z l ), 
h o l d s ( s t a r t t i m e ( S T ) , Z 1 ), 
a d j a c e n t ( X , Y , D , X 1 , Y l ), 
u p d a t e ( Z l , [ a t ( X I , Y l , T ) ] , [ a t ( X , Y , T O ) ] , Z 2 ). 
That 
together  with 
agent  will  be  updated  from  the  old  position 
the  new  cell 
Adjacent 
lying in  direction  d of cell 
The travel from one cell to 
another is assumed to take one hour in our example scenario. 
Therefore,  although the execution time t of this action is not 
fixed by the clause in any way, the effects of the action man(cid:173)
ifest at  least one hour later as  the formation of the old state. 
Now take, e.g., the FLUX query 
? - i n i t ( Z 0 ), 

the 
to 
the  auxiliary  predicate 

computes the  adjacent  cell 

r e s ( Z 0 , s O , [ g o b y s h i p ( 3 ), 
t u r n t i d e ( l o c k 3 , l o w ) ] , 2 . 0 , Z 1 , S 1 ). 

where 

the 

is, 

together with  the  above  definition  of the  state  update  axiom 
and  the  definitions  for  the  predicate  Init 
(with  the  addi(cid:173)
tional inclusion of fluent s t a r t t i me (0.0)) and the state up(cid:173)
date  axiom  of action  TurnTide given  in  Section  2.  Together 
with an appropriate encoding of the fact that a high tide lasts 
two hours at the third lock,  d u r a t i on (lock3 , h i g h, 2.0), 
and the knowledge that going south  is represented by direc(cid:173)
tion  number  3,  our extension  of FLUX  can  infer the  effects 
of this  concurrent  action  by  first  inferring  the  effects  of ac(cid:173)
tion  gobyship(3)  and  on  the  result  of this  inference  infer 
the effects of action  t u r n t i de (lock3, low).  FLUX  yields 
the correct substitution: 
Z l = [ a t ( 1 , 1 , 2 . 0 ) , t i d e ( l o c k l , h i g h , 0 . 0 ), 

t i d e ( l o c k 2 , h i g h , 0 . 0 ) , t i d e ( l o c k 3 , l o w , 2 . 0 ), 
s t a r t t i m e ( 2 . 0 ) | Z] 

S l = d o ( [ g o b y s h i p ( 3 ), 

t u r n t i d e ( l o c k 3 , l o w ) ] , 2 . 0 , s O) 

Continuous  time  is,  as  already  shown  above  and  in  Sec(cid:173)
tion 2, easily integrated into FLUX. The Eclipse-Prolog sys(cid:173)
tem Version 5.4,  which we use,  includes the constraint han(cid:173)
dling  library  CLP(R).  This  library  allows  for  solving  linear 
constraints  with  real  numbers. 
Its  syntax  requires  for  con(cid:173)
straints to be included in braces. 

The precondition axioms and state update axioms for nat(cid:173)
ural  actions  are  encoded  in  our  extension  of FLUX  in  the 
same fashion as for deliberative actions (see Section 2).  Ad(cid:173)
ditionally,  we  include  an  implementation  for  the  predicate 
Natural(a)  which  is as follows for the example domain: 

:-  A=turntide(L,W)  , 

( L = l o c k l;  L=lock2;  L=lock3). 

the  macro 
by  the  built-in  second  order 

this 

predicate, 

we  model 

Given 
ExpectedNatActions 
predicate SetOf as follows: 
s e t o f ( A, 
On  this  basis,  the  macro  NextNatActionsI 
FLUX as: 

( n a t u r a l ( A ) , p o s s ( A , T , Z ) ),  C) 

is  defined  in 

1088 

REASONING ABOUT ACTIONS AND CHANGE 

NextNatTime(T,Z) 
n a t u r al (A)  ,  p o s s ( A , T , Z ), 
not 

:-

( n a t u r a l ( A l ),  poss(A1,T1,Z),  T1<T), 

!. 

:-  NextNatTime(T,Z), 

( n a t u r a l ( A ) , p o s s ( A , T , Z ) ),  C). 

NextNatActions(C,T,Z) 
s e t o f ( A, 
Having defined natural  actions  in the  same way as delib(cid:173)
erative ones leads to the question:  How to combine delibera(cid:173)
tive and natural actions into one common approach for plan(cid:173)
ning?  Natural  actions  must  occur  at  their  predicted  times. 
The  times  for  the  execution  of deliberative  actions  are  not 
fixed in  advance.  How  to determine  these  execution  times? 
The examination of every possible time would lead to a com(cid:173)
binatorial explosion and  is,  in general, not possible  for time 
of sort REAL.  One general solution, which reduces the search 
space to a minimum and still yields answers for all possible 
domains,  is  to  use  qualitative  instead  of quantitative  infor(cid:173)
mation.  We  only  consider periods  of time  in  our approach. 
There we discriminate three time  intervals for a deliberative 
action  wrt.  the  next expected  natural  action(s):  Firstly,  the 
deliberative action can be postponed to the next plan step and 
the (possible set of) natural  action(s) is executed.  Secondly, 
the deliberative action is performed before all natural actions 
which are expected next.  Finally, the deliberative action and 
the  natural  actions  are joined  toeether  to  a  new  concurrent 
action.  The predicate Exec 
encodes the 
recursive planner for a plan  with  depth steps integrating de(cid:173)
liberative and natural actions into one method. The computed 
plan  leads from  state  z\  and  situation si  to the new  state  z2 
and the new situation s2.  The predicate is implemented as 
e x e c ( Z l , S l , Z l , S l , 0 ). 

:-

exec(Zl,SI,Z2,S2,Depth) 
Depth>0/  NextNatActions(C,T,Z), 
({71=7},  C1=C; 
a c t i o n ( A ),  p o s s ( A , T A , Z l ), 
h o l d s ( s t a r t t i m e ( T O ), Z l ), 
({TA<T,  T1=TA},  C1=[A]; 
{TA=T,  T1=T},  a p p e n d ( [ A ] , C , C 1 ) ) ), 

{TA>=T0}, 

is  Depth-1, 

r e s ( Z l , S l , C l , T l , Z 3 , S 3 ),  Depthl 
exec(Z3,S3,Z2,S2,Depthl). 
where the predicate Action(a)  defines  the action  a to be  de(cid:173)
liberative and the auxiliary built-in predicate Append appends 
two list.  For our example domain, the predicate Action is en(cid:173)
coded  by  the  fact  a c t i on  (gobyship  
To ensure that 
the time  never goes backward,  the execution time TA of the 
deliberative action is constrained in an appropriate way. 

Reasoning  with time  constraints  instead  of real  time  ren(cid:173)
ders  planning efficient.  Using  this plan  method  we  are  left 
with only three choices regarding the execution time of a de(cid:173)
liberative  action.  Furthermore,  the  order  of these  choices, 
which represents  a kind  of heuristic,  can be  adjusted to  the 
concrete domain at hand.  Only after a plan, where the con(cid:173)
straint solution lies in the appropriate time intervals, has been 
computed, a concrete time for the execution of the actions is 
fixed and the actions are executed. 

To complete our planning method, we include the follow(cid:173)
ing definition of the predicate Goal(z) denoting the goal state 
z, 
goal(Z) 
where  the  goal  in  our  example  scenario  is  that  the  barge 
is  situated  at  the  harbor  in  cell  (3,2)  (see  also  Fig.  1). 

:-  k n o w s ( a t ( 3 , 2 , _ ) , Z ). 

in 

representing  the  sequence  of  actions 
in the initial situation 

Given  the  predicate  Goal,  we  define  a  recursive  predicate 
Ida 
which leads from the initial state 
steps.  This predicate implements the 
to the goal state 
iterative deepening algorithm, which is optimal and complete 
[Russell and Norvig,  1995]. It is encoded as follows: 
ida(Z0,S0,Z,S,N) 
exec(Z0,S0,Z,S,N),  goal(Z)  ; 
Nl 
The precondition axiom for the action GoByShip is speci(cid:173)

findplan(ZO,SO,Z,S,Nl). 

is  N+l, 

:-

: -

fied in the following way: 
poss(gobyship(D), T,Z) 
k n o w s _ v a l ( [ X , Y ] , a t ( X , Y , _ ),  Z), 
d i r e c t i o n s ( X , Y , D L ),  member(D,DL) 
adjacent (X, Y,D,X1, YD  , 
( l o c k p l a c e ( L , X l , Y l ), 
knows_val([L,W,T0],tide(L,W,TO),Z), 
(W=high;  W=low, 
d u r a t i o n ( L , l o w , T D ), 
not 

( l o c k p l a c e ( L , X l , Y l ) ). 

{T>=T0+TD})); 

That is, after having determined the current location, the aux(cid:173)
iliary  predicate  Directions 
delivers  a  list  of possi(cid:173)
ble  directions  for  the  cell i 
and  the  standard predicate 
Member  selects  one  direction  ri.  Afterwards,  with  the  help 
of the auxiliary predicate  LockPlace 
denoting the oc(cid:173)
currence  of a  lock  /  at cell 
is  searched  for a lock.  If there  is  none,  the  action  is possi(cid:173)
ble  without  further  constraints  for  the  execution  time  t. 
In 
the other case, the water level at the lock must be high or the 
action  has to be executed after the disappearance of the  low 
tide.  Specifying the preconditions for the actions  GoByShip 
and  TurnTide as given above and in Section 2,  respectively, 
fulfills the general  condition for the possibility  to perform a 
concurrent action as given in Section 3. 

the  adjacent  cell 

i d a ( Z 0 , s 0 , Z , S , l ). 

Consider now, for example, all specified FLUX clauses to(cid:173)
gether  with  suitably  specified  facts  for  the  example  domain 
and the following query: 
? - i n i t ( Z O ), 
Our extended FLUX system then generates a plan with  four 
steps  and  yields  the  following  substitutions  and  linear con(cid:173)
straints: 
Z  = 

[ s t a r t ( T A _ 2 ) , a t ( 3 , 2 , T A _ 2 ) , t i d e ( l o c k 3, 
h i g h , 4 . 0 ) , t i d e ( l o c k l , l o w , 4 . 0)  , 
t i d e ( l o c k 2 , h i g h , 0 . 0 ) | _] 

S  =  d o ( [ g o b y s h i p ( 2 ) ],  d o ( [ g o b y s h i p ( 1 ), 

t u r n t i d e ( l o c k l , l o w ) , t u r n t i d e ( l o c k 3 , h i g h ) ], 
d o ( [ g o b y s h i p ( 2 ) , t u r n t i d e ( l o c k 3 , l o w ) ], 
d o ( [ g o b y s h i p ( 3 ) j , s O , T A _ l ) , 2 . 0 ) , 4 . 0 ) , T A _ 2) 

Linear  c o n s t r a i n t s:  TA_1>=1.0,  TA_1<2.0 
TA_2>=5.0,  TA_2<6.0 

The above sequence of actions s constitutes a solution to our 
planning  problem  given  in  Fig.  1. 
It is  not  yet  completely 
specified.  Rather,  the  execution  times  of some  deliberative 
actions are given as time intervals. The reader may also notice 
that some deliberative actions are planned simultaneously to(cid:173)
gether with natural actions.  Finally, we can apply the built-in 
predicate  Minimize(t),  which tries to find a minimal solution 
for a constraint variable t, to the above linear constraints and 
get the following: 

REASONING ABOUT ACTIONS AND CHANGE 

1089 

TA_1  = 1 .0 

TA_2  = 5 .0 

5  Discussion 
We have presented an extension to FLUX for domains involv(cid:173)
ing continuous change and where actions occur concurrently. 
Our method  is  based  on  the theoretic  solution  in the  Fluent 
Calculus [Thielscher, 2001a]. 

Our  extension  allows  for  the  generation  of plans  includ(cid:173)
ing both,  deliberative  and  natural  actions.  If necessary,  the 
system generates and executes concurrent actions, i.e., where 
two or more single actions are performed simultaneously.  In 
order to  plan  efficiently,  our  FLUX program  computes  with 
time intervals instead of single time points using the paradigm 
of constraint  logic  programming.  We  have  illustrated  how 
this method can be successfully applied to example domains 
like  the  waterway  scenario.  Additionally,  our approach  can 
easily  be  applied,  with  only  minor  modifications,  to  more 
complex domains involving, for example, compound concur(cid:173)
rent actions which produce synergic effects. 

Other  high-level  programming  languages  for  reasoning 
about  action  and  change,  like  GOLOG  or the  robot  control 
language, have not yet an approach to integrate both,  delib(cid:173)
erative and natural  actions  in a common system to generate 
plans. The robot control language [Shanahan and Witkowski, 
2000]  does  not  have  the  notion  of  a  natural  action.  The 
systems  based  on  GOLOG  either  accommodate  only  natu(cid:173)
ral actions  [Reiter,  2001]  or handle only deliberative actions 
[Grosskreutz  and  Lakemeyer,  2000]  in  domains  involving 
concurrency and continuous change. 

The extension to domains involving uncertainty about the 
occurrence  of a  natural  action  has  not  been  tackled  in  this 
paper.  An approach to this problem could be the use of con(cid:173)
ditional planning.  Conditional plans based on a generalized 
concept of plan  skeletons as search heuristics have been  in(cid:173)
corporated  into  FLUX  [Thielscher,  2001b].  To  use  condi(cid:173)
tional plans as a method to accommodate such domains is an 
important aspect of future  work. 

Acknowledgments 
I  want  to  thank  my  supervisor  Michael  Thielscher,  Olaf 
Perner  and  all  members  of the  FLUX  Group  at  Technische 
Universitat  Dresden  for many  fruitful  discussions  about  this 
work.  Three  anonymous  reviewers  provided  helpful  com(cid:173)
ments on this article for which I am grateful. 

References 
[Friihwirth,  1998]  Thorn Friihwirth.  Theory and practice of 
constraint  handling  rules.  Journal  of  Logic  Programming, 
37(l-3):95-138,  1998. 

[Grosskreutz and Lakemeyer, 2000]  Henrik Grosskreutz and 
Gerhard  Lakemeyer.  cc-Golog:  Towards  more  realistic 
logic-based robot control.  In H. Kautz and B. Porter, ed(cid:173)
itors,  Proceedings  of the  AAAI  National  Conference  on 
Artificial  Intelligence,  pages  476-482,  Austin,  TX,  July 
2000. 

[Grosskreutz, 2002]  Henrik Grosskreutz.  Towards more re(cid:173)
alistic  logic-based  robot  controllers  in  the  Golog frame(cid:173)
work.  PhD  thesis,  RWTH  Aachen,  Germany,  February 
2002. 

[Herrmann and Thielscher,  1996]  Christoph  S.  Herrmann 
and Michael Thielscher.  Reasoning about continuous pro(cid:173)
cesses.  In B. Clancey and D. Weld, editors, Proceedings 
of the AAA! National Conference on Artificial Intelligence, 
pages 639-644, Portland, OR, August 1996. MIT Press. 

[Levesquetva/.,  1997]  Hector  J.  Levesquc,  Raymond  Re(cid:173)
iter,  Yves  Lesperance,  Fangzhen  Lin,  and  Richard  B. 
Scherl.  GOLOG:  A logic programming  language  for dy(cid:173)
namic  domains.  Journal  of Logic  Programming,  31(1-
3):59-83, 1997. 

[Reiter,  1996]  Ray Reiter.  Natural  actions, concurrency and 
continuous time in the situation calculus.  In  L. C. Aiello, 
J.  Doyle,  and  S.  Shapiro,  editors,  Proceedings of the In(cid:173)
ternational  Conference  on  Principles  of Knowledge  Rep(cid:173)
resentation and Reasoning (KR), pages 2-13, Cambridge, 
MA, November 1996. Morgan Kaufmann. 

[Reiter, 2001]  Raymond Reiter.  Logic in Action.  MIT Press, 

2001. 

[Russell and Norvig,  1995]  Stuart  J.  Russell  and  Peter 
Artificial  Intelligence:  A  Modern  Approach. 

Norvig. 
Prentice-Hall, 1995. 

[Shanahan and Witkowski, 2000]  Murray  Shanahan  and 
High-level  robot  control  through 
Mark  Witkowski. 
logic. 
In  C.  Castelfranchi  and  Y.  Lesperance,  editors, 
Proceedings  of  the  International  Workshop  on  Agent 
Theories  Architectures  and  Languages  (ATAL),  volume 
1986  of LNCS,  pages  104-121,  Boston,  MA,  July  2000. 
Springer. 

[Thielscher,  1999]  Michael Thielscher.  From Situation Cal(cid:173)
culus to Fluent Calculus: State update axioms as a solution 
to  the  inferential  frame  problem.  Artificial  Intelligence, 
lll(l-2):277-299,  1999. 

[Thielscher, 2001a]  Michael  Thielscher. 

The  concurrent, 

[Thielscher, 2001b]  Michael  Thielscher. 

continuous Fluent Calculus.  Studia Logica, 67( 1), 2001. 
Inferring  implicit 
state  knowledge  and  plans  with  sensing  actions. 
In  F. 
Baader,  G.  Brewka,  and T.  Eiter,  editors, Proceedings of 
the  German  Annual  Conference  on  Artificial  Intelligence 
(KI), volume  2174 of LNAI, pages 366-380,  Vienna, Aus(cid:173)
tria, September 2001. Springer. 

[Thielscher, 2002]  Michael Thielscher.  Programming of rea(cid:173)
soning and planning agents with FLUX.  In D. Fensel, D. 
McGuinness, and M.-A. Williams, editors, Proceedings of 
the  International  Conference  on  Principles  of Knowledge 
Representation  and  Reasoning  (KR),  Toulouse,  France, 
April 2002. Morgan Kaufmann. 

1090 

REASONING ABOUT ACTIONS AND CHANGE 

