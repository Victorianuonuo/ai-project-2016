AN  EFFICIENT  ROBOT  PLANNER  WHICH  GENERATES  ITS  OWN  PROCEDURES* 

Session  15  Robot  Problem  S o l v i ng 

L.  S i k l o s sy  and  J.  D r e u s si 

Department  of  Computer  Sciences 

U n i v e r s i ty  of  Texas,  A u s t i n,  U.S.A. 

A b s t r a ct 

these  c a p a b i l i t i e s. 
to  solve  s p e c i f ic 

in  sorne  w o r l d,  she  generates  her  own  p r o c e(cid:173)

is  a  LISP  program  which  solves  r o b ot  p l a n n i ng 
i ts  capa(cid:173)

LAWALY 
p r o b l e m s.  G i v en  an  a x i o m a t ic  d e s c r i p t i on  of 
b i l i t i es 
dures 
to  embody 
these  procedures 
H i e r a r c h i es  of  subtasks  guide 
t i o n. 
t i n e ly  solved 
w i t h o ut  needing 
times 
number  of  steps 

in 
f or  a  s o l u(cid:173)
r o u(cid:173)
r e q u i r i ng  s e v e r al  hundred  steps 
The 
l i n e a r ly  w i th 

to  s o l u t i on  grow  u s u a l ly  about 

l a r ge  w o r l d s,  LAWALY  has 

tasks 
the  search 

In  s u f f i c i e n t ly 

from  p r e v i o us 

the  s o l u t i o n. 

She  executes 

t a s k s. 

the  w o r l d. 

t a s ks 

l e a rn 

the 

to 

in 

LAWALY 
ner  based  on  a 
Key  words 

is  e x t e n s i v e ly  compared 
theorem  p r o v e r. 

f o l l ow  r e f e r e n c e s, 

1. 

I n t r o d u c t i o n:  Approaches 

to  another  r o b ot  p l a n(cid:173)

to  Robot  P l a n n i n g. 

from  an 

f i nd  a  p a th 

i n i t i al  r o b ot  w o r ld 

A  r o b ot  p l a n n i ng  program,  or  r o b ot  p l a n n e r,  a t t e m p ts 
to 
f i n al 
r o b ot  w o r l d. 
The  p a th  c o n s i s ts  of  a  sequence  of  e l e(cid:173)
mentary  o p e r a t i o ns 
the  s y s t e m.  A  s o l u t i on 
of  a  c o r r e s p o n d i ng  sequence  of  p h y s i c al  a c t i o ns 
p h y s i c al  w o r l d. 

t h at  are  c o n s i d e r ed  p r i m i t i ve 

to 
the  b a s is 

t a sk  c o u ld  be 

to  a 

to  a 

in 

the 

is 

to 

to  have  a 

I n s t i t u t e, 

two  main  approaches 

in  u s e.  One  approach, 

f a m i ly  of  p r o g r a m s * " '2'3  at 

l a te  1971  and  e a r ly  1972, 

t y p i f i ed  by 
the  S t a n f o rd  Re(cid:173)

t a s ks 
The  second  approach 

In 
r o b ot  p l a n n i ng  were 
the  STRIPS 
search 
p l a n n er  w h i ch  can  solve 
w o r l d s. 
r o b ot  w o r l d,  and 
program  to  s o l ve 
made  e a s i er  by 
i f i c a l ly  designed 
f or  example,  PLANNER,  MICROPLANNER,  or  Q A 47 ,8  An  ex(cid:173)
ample  of  a  s p e c i a l i z ed  r o b ot 
is  W i n o g r a d ' s,  o p e r a t i ng 
in  a  w o r ld  of  b l o c k s. 

f a i r ly  g e n e r al  r o b ot 
in  a  great  v a r i e ty  of 
is 
t h at  w o r ld 

The  p r o g r a m - w r i t i ng  can  be 
languages  spec(cid:173)

to  s e l e ct  a  s p e c i f ic 
to  w r i te  a  s p e c i f ic 

f or  programming  r o b o t - l i ke 

the  use  of  programming 

f or 
t a s k s4 ,5 

t a s k s,  a s, 

the 

in 

to 

t h at 

f a s t e r1. 

l i m i t a t i o n s. 

i ts  p r a c t i c al 

lacked  power, 

l a c ks  g e n e r a l i t y, 

f i r st  approach  has 

the  p r o b l e m - s o l v er 

the  sense 
to  be  solved 

the  s p e c i a l i z ed  systems  are  s e v e r al  hundred 

in  r o b ot  p l a n n e rs  w h i ch  can  s o l ve 
the  c a p a b i l i t i es  of 
f i r st  k i n d,  w h i l e,  on 

in  t h at  a  new 
f or  each  w o r l d.  On 
the  second  approach  r e(cid:173)
t a s ks  w e ll  be(cid:173)
the  g e n e r al  r o b ot  p l a n n e rs  of 
the  set  of  commonly  solved 

The 
some  problems  r e q u i r i ng  o n ly  s ix  steps 
push 
The  second  approach 
s et  of  programs  must  be  w r i t t en 
o t h er  hand, 
f or  a  g i v en  w o r l d, 
s u l ts 
yond 
the 
p r o b l e m s, 
times 
To  o b t a in  a  system 
h a v i ng  power  and  good  p e r f o r m a n c e,  we  have  designed  a 
r o b ot  p l a n n er  which  b u i l ds  a  s p e c i a l i z ed  set  of  p r o(cid:173)
T h e r e f o r e,  our  s y s-
grams 
tem--named  LAWALY--duplicates 
( to  some  e x t e n t)  what  a 
human  b e i ng  does  when  programming  a  s p e c i a l i z ed  r o b ot 
p l a n n e r. 
f or  each  o p e r a t or 
in 
o v e r a ll  m o n i t o r. 
can  most  e f f i c i e n t ly  s o l ve 
them,  a v o i d i ng  dead  e n d s --
w h l ch  w o u ld  n e c e s s i t a te  b a c k t r a c k l n g - - as  much  as  pos(cid:173)
s i b l e. 

these  procedures  w i th  an 
t h at  she 

t h at  m a i n t a i ns  g e n e r a l i t y,  w h i le 

LAWALY  b u i l ds  a  procedure 

She  r e o r d e rs  subtasks  so 

the  w o r l d,  and  she 

f or  each  w o r ld 

is  g i v e n. 

l i n ks 

it 

to  our  e x p e c t a t i o n s. 

she  has  been  a p p l i ed 

to  more 

The  r e s u l ts  have  been  up 
is  g e n e r a l: 
w o r l d s. 
LISP  on 
ages 

from  0 .4 

She  e x h i b i ts  good  p e r f o r m a n c e: 
the  CDC  6600  and  r un 

In 
l n t e r p r e t l v e l y,  she  a v e r(cid:173)
in  her  s o l u-

to  about  2  seconds  per  node 

LAWALY 
twenty 

than 
programmed 

*Work  p a r t i a l ly  supported  by  g r a nt  GJ-34736 
N a t i o n al 

Foundation. 

Science 

from 

the 

423 

the  amount  of  b a c k t r a c k i ng 

the  s i ze  of 

t i on  space,  depending  on 
and 
power: 
hundred  s t e p s.  Moreover, 
task 
l i n e ar  w i th 
s o l u t i o n. 

the  changing  w o r l d. 
t a s ks 
time 

she  r o u t i n e ly  solves 
the 
the  number  of  steps 

t h at 
taken 

is  about 

F i n a l l y,  she  has 

r e q u i re  s e v e r al 
to  s o l ve  a 
the 

in 

The  s e l f - g e n e r a t i on  of  procedures  by  LAWALY,  her  use  of 
the  r e s u l ts  of  her  p e r f o r(cid:173)
a  h i e r a r c hy  of  s u b t a s k s,  and 
mance 
the  main  p a r ts  of 
t h is  a r t i c l e. 
im(cid:173)
p a t i e nt  r e a d e r,  Tables  1,  2  and  3  compare 
mance  of  STRIPS  w i th  LAWALY 
g r a p h i c a l ly 

in  Figures  1,  2  and  3  r e s p e c t i v e l y. 

For 
the  p e r f o r(cid:173)

t a s ks  d e s c r i b ed 

form 

the 

the 

f or 

2.  Procedure  G e n e r a t i on 

f or  an  O p e r a t o r. 

in 

to 

the 

the 

to  o b j e c t 2. 

the  o p e r a t o r. 

The  changes  of 

r e s u l t a nt  w o r ld 

to  a  w o r ld  o n ly 

it  an  o p e r a t o r.  An 

r o b ot  pushes  o b j e c tl 

t y p i c al  examples  of  oper(cid:173)

the  w o r ld 
to 
Two 

o p e r a t or 
the  w o r ld  s a t i s f i es 

PUSHABLE(objectl)  0NFL00R  NEXTTO(ROBOT 

the  o p e r a t or 
the  d e l e te  set  of 
the 

[ l ],  we  c o n s i d er  w o r l ds  c o n s i s t i ng  of  sets  of 
The  w o r ld  can  be 

if 
the  o p e r a t o r. 
the  a p p l i c a t i on  of 
from 
then  adding 

As 
p r e d i c a t es  such  as  AT(B0X1  A l)  . 
changed  by  a p p l y i ng 
can  be  a p p l i ed 
the  p r e c o n d i t i o ns  of 
w o r ld  as  a  r e s u lt  of 
r e s u lt 
from  d e l e t i ng 
the  o p e r a t o r, 
add  set  of 
a t o r s,  which  w i ll  be  used  below,  a r e: 
p u s h ( o b j e c tl  o b j e c t 2 ),  meaning: 
next 
P r e c o n d i t i o n s: 
o b j e c t l) 
D e l e te  s e t:  AT(R0B0T  $  $)  NEXTT0(R0B0T  $)  A T ( o b J e c tl 
$  $)  NEXTT0(objectl  $)  NEXTTO($  ROBOT)  NEXTT0($  o b j e c t l ). 
Add  s e t:  NEXTT0(objectl  o b j e c t 2)  NEXTT0(R0B0T  o b j e c t l) 
NEXTT0(object2  o b j e c t l ). 
g o n e x t o b j ( o b j e c t ).  meaning: 
P r e c o n d i t i o n s: 
ONFLOOR. 
D e l e te  s e t:  AT(ROBOT  $ $)  NEXTT0(R0B0T  $)  NEXTTO($  ROBOT). 
Add  s e t:  NEXTT0(R0B0T  o b j e c t)  NEXTT0(object  ROBOT). 
N o t e: 
t i o ns 
on 
best  be  a x i o m a t i z e d,  we  make  no  c l a i ms  as 
r e c t n e s s"  of  any  of 

is  o n ly  one  of  s e v e r al  p o s s i b le  a x i o m a t i z a-
is 

Since  our  emphasis  here 
they  should 

the  o p e r a t or  a x i o m a t i z a t i o ns  chosen'. 

INROOM(object2  rm)  ARMSEMPTY. 

t a s k s,  and  not  on  how 

INROOM(object  rm) 

INR00M(R0B0T  rm) 

these  o p e r a t o r s. 

r o b ot  goes  next 

the  s o l u t i on  of 

to  o b j e c t. 

the  " c o r(cid:173)

T h is 

f or 

to 

it 

(and 

to  e x p l a in 

those 
If 

i n d i v i d u a l s. 

the  procedure  genera(cid:173)
t h at  are 

types  of  procedures 

to  d e s c r i be 
The 

to  program'.)  programs 

is  sometimes  d i f f i c u lt 

t h at  m a n i p u l a te  some  w o r l d, 

t h at  have  been  hand-coded  by 
to 
it 

We  s h a ll  now  attempt 
t i on  used  by  LAWALY. 
obtained  resemble 
v a r i o us 
e x p l a in  programs 
more  d i f f i c u lt 
t h at  generate  programs 
avoid  being  submerged 
t i on  must 
LAWALY 
EXPR  is  g e n e r a t e d.  T a k i ng  gonextobl  as  an  example, 
the  LISP 
(G0NEXT0BJ  (LAMBDA  (ALIS  OBJECT) 
The  body  of 
s e l e c t i on  of  b i n d i n gs  and 
i t o r. 

t h at  m a n i p u l a te  some  w o r l d. 
in  c o d i ng  d e t a i l s,  our  d e s c r i p(cid:173)

. .. 
t h at  p e r f o rm 

f or  each  o p e r a t or  a  LISP 

f u n c t i on  w i ll  b e: 

i n t e r a c t i on  w i th 

remain  s k e t c h y. 

i n c l u d es  p a r ts 

in  L I S P,  and 

(PROG  (RM) 

the  PROG 

is  coded 

) ) ). 
the 

the 

the  mon(cid:173)

To 

is  even 

found 

f or  a ll 

the  LAMBDA-variableB 

2 .1  S e l e c t i on  of  B i n d i n g s. 
B i n d i n gs  must  be 
( e x c e p t i ng  ALIS)  end  PROG-variables.  V a r i a b l es  may  be 
bound 
happen 
is  bound 
a l t e r n a te  b i n d i n gs 
unbound  v a r i a b l es  are  p a s s e d, 
d i t i o ns  of 

if  we 
then  OBJECT 
It  c o n t a i ns 
A ll 
the  p r e c o n(cid:173)
ThiB 

is  not  NIL 
in  b a c k t r a c k i n g .) 

to  execute  gonextobj(BOXl) 

to  a  b i n d i ng  p r o c e d u r e. 

the  ALIS 
is  used 

from 
to  want 

t o g e t h er  w i th 

to  B0X1;  or 

f or  example 

the  c a ll  of 

f u n c t i o n, 

f u n c t i o n, 

( t h is 

the 

the 

if 

is 

inversely  proportional 
the  number  of  predicates  of  the  precondition  of  the 

procedure  attempts  to  bind  these  variables  for  the 
smallest  cost  of  s a t i s f y i ng  the  preconditions.  The 
coat  of  a  choice  of  bindings 
to 
operator  that  are  s a t i s f i ed 
for  ex(cid:173)
ample,  RM  is  bound  to  the  room  ROOMC  which  s a t i s f i es 
(INROOM  B0X1  ROOMC),  then  the  precondition  (INROOM 
OBJECT  RM)  w i ll  be  s a t i s f i ed  immediately.  The  various 
alternatives 
for  bindings  are  computed,  and  they  w i ll 
eventually  a ll  be  t r i e d.  Alternate  bindings  are  kept 
on  the  ALIS. 

in  the  world. 

I f, 

the 

is  eval(cid:173)

If  it  does, 

the  process. 

this  operator 

the  Monitor. 

in  the  w o r l d. 

Interaction  with 

(See  Figure  4.) 

to  the  next  condition. 

the  monitor 
If  it  does  not  h o l d, 

in  the  operator  tree,  and  the  choice  kept 

2.2 
The  preconditions 
that  the  operator  must  satisfy  are 
reordered  according  to  the  hierarchy  of  subtasks  (see 
section  3  below),  and  sent  to  the  monitor.  For  each 
condition  in  t u r n, 
the  monitor  checks  whether  the  con(cid:173)
d i t i on  holds 
passes 
monitor  selects  one  (of  possibly  several)  operator(s) 
which  might  change  the  world  i n to  one  in  which  the  de-
Bired  condition  holds.  Before 
uated,  using  the  LISP  function  EVAL,  a  node  is  created 
in  the  search  space  of  operators.  An  example  w i ll 
c l a r i fy 
Assume  an  i n i t i al  world  Wl  of  three  boxes  and  the  robot 
in  one  room  ROOM.  An  axiomatic  description  would  be: 
(AT  ROBOT  A)  (AT  B0X1  Al)  (AT  B0X2  A2)  (AT  BOX3  A3). 
The  BOXes  are  assumed  PUSHABLE, 
the  robot's  arms  are 
empty  and  she  is  on  the  f l o o r.  The  desired  f i n al  state 
is  (NEXTTO  B0X1  BOX2)  (NEXTTO  B0X2  B0X3).  Monitor 
s t a r ts  working  to  s a t i s fy  (NEXTTO  B0X1  B0X2),  since  the 
other  Bubtask  of  the  goal  has  the  same  rank  (see  sec(cid:173)
t i on  3.)  To  achieve  this  subtask,  either  (PUSH  BOXl 
B0X2)  or  (PUSH  B0X2  B0X1)  can  be  t r i e d.  The  f i r st 
choice  is  attempted,  and  the  second  saved  for  back(cid:173)
tracking.  A  node  G1  is  created 
for  the  move  (PUSH 
B0X1  B0X2) 
there. 
We  now  EVALuate  (PUSH  BOX1  BOX2).  Precondition  (NEXTTO 
ROBOT  B0X1) 
is  found  not  to  h o l d,  control  returns  to 
the  monitor  which  finds  that  (GONEXTOBJ  B0X1)  might 
lead  to  a  world  s a t i s f y i ng  (NEXTTO  ROBOT  BOX1).  Node 
G2  is  created,  LAWALY  EVALuates  (NEXTTO  ROBOT  BOXl), 
and  we  obtain  a  new  world  W2,  (NEXTTO  ROBOT  BOXl)  (AT 
BOXi  A i ), 
i=1,2,3.  At  that  point,  EVALuation  of  (PUSH 
BOXl  BOX2)  can  be  completed,  to  give  a  new  world: 
(NEXTTO  ROBOT  BOXl)  (NEXTTO  BOXl  B0X2)  (NEXTTO 
W3: 
B0X2  BOXl)  (AT  BOXi  A i ), 
i " 2 , 3.  Monitor  turns  a t t e n(cid:173)
t i on  to  the  second  subtask  of  the  f i n al  goal,  (NEXTTO 
B0X2  B0X3).  To  realize  t h is  subtask,  either  (PUSH 
B0X2  B0X3)  or  (PUSH  B0X3  BOX2)  can  be  t r i e d.  S t a r t i ng 
with  the  f i r st  (node  G3), 
B0X2)  is  generated,  with  operator  (GONEXTOBJ  B0X2)  as 
the  way  to  obtain  the  goal  (node  G4).  Operator  G4 
applied  to  world  W3  gives  world  WA:  (NEXTTO  BOXl  B0X2) 
(NEXTTO  ROBOT  B0X2)  (AT  BOXi  A i ),  1=2,3.  At  that  point 
operator  G3  has  a ll  i ts  preconditions  s a t i s f i e d,  so  it 
could  be  applied.  But  communication  between  monitor 
and  G3  indicates  that  a  previously  s a t i s f i ed  subgoal, 
(NEXTTO  BOXl  B0X2)  would  be  deleted  if  G3  were  applied. 
Backtracking  descends  to  node  GA,  where  no  alternate 
operator  is 
found.  Backtracking  then  ascends  to  G3, 
where  the  alternate  operator  (PUSH  B0X3  B0X2)--node 
G 3 ' - - is  selected.  To  apply  t h is  operator, 
i ts  precon(cid:173)
d i t i on  (NEXTTO  ROBOT  B0X3)  must  be  s a t i s f i e d.  Hence, 
node  G5  with  operator  (GONEXTOBJ  B0X3)  is  created.  G5 
can  be,  and  i s,  applied  to  world  W3,  to  y i e ld  world  W5. 
G3' 
It 
in  pre-
order,  while  the  successive  states  of  the  world  cor(cid:173)
respond  to  the  applications  of  the  operators  as  the 
operator  tree 
occurs  in  the  operator  tree  in  reverse  preorder,  but 
no  easy  relationship  exists  between  reverse  preorder 

is  applied  to  W5  to  y i e ld  W6,  our  f i n al  s o l u t i o n. 

in  endorder.  Backtracking 

the  subgoal  (NEXTTO  ROBOT 

the  operator 

is  created 

traversed 

ie  seen 

tree 

that 

is 

424 

is  created. 

and  endorder;  hence  operator  nodes  in  the  operator  tree 
point  to  the  state  of  the  world  which  is  current  when 
the  node 
During  backtracking,  alternate  paths  are  taken  most 
frequently  on  the  choice  of  operators  that  might  r e a l(cid:173)
ize  a  subtask,  as  has  j u st  been  exemplified.  The  sec-
ond  most  frequent  mode  of  alternate  paths  makes  use  of 
the  alternate  bindings  in  the  ALIS  variable  of  the  op(cid:173)
erator-procedure,  as  discussed 
least 
the  subtasks  in  a  h i e r a r c h i c al  group,  as  w i ll  be  d i s(cid:173)
cussed 
(Another  ordering  of  the  three 
backtracking  modes  might  have  been  chosen.) 

frequent  backtracking  mode  consists  of  permuting 

in  section  2 . 1.  The 

in  section  3. 

3.  Hierarchies  of  Subtasks. 

is 

[ l ], 

that 

then  the 

is  obvious 

it  is  safe  to  do 

l i g h t s w i t ch  if  it 

the  robot  can  turn  on  a 

in  the  order  of  t h e ir  hierarchy, 

the  concept  of  hierarchies  of  subtasks: 

the  second  precondition  should  be 
In  t h is  way,  we 
if 

In 
on  some  box,  BOXl,  which  is  close  to  the  l i g h t s w i t c h. 
So  two  of  the  preconditions  of  the  operator  turnonlight 
would  be: 
(ON  ROBOT  BOXl)  (NEXTTO  BOXl  LIGHTSWITCH). 
It 
s a t i s f i ed  f i r s t,  then  the  other  one. 
arrive  at 
several  subtasks  must  be  accomplished, 
some  before  others.  By  safe  we  mean  that  if  subtasks 
are  solved 
task  can  be  solved.  There  may  also  be  solutions  which 
v i o l a te  the  hierarchy,  and  some  of  these  may  be  " b e t t e r" 
- - f or  example,  requiring  fewer  steps — but  our  aim  here 
is  to  obtain  a  solution  in  a  reasonable  time.  An  o p t i(cid:173)
mizing  post-processor  which  t r i es  to  improve  on  an  a l(cid:173)
ready  e x i s t i ng  solution 
The  hierarchy  of  subtasks 
i n t u i t i ve 
freedom; 
a  box  to  some  place, 
sequently  can, 
on  whatever  (or  whomever)  she  wants.  On  the  other  hand, 
if  she 
f i r st  climbs  on  the  box,  she  usually  has  no  free(cid:173)
dom  l e ft  to  move  the  box.  S i m i l a r l y,  since  turning  on 
the  l i g ht  requires  moving  a  box, 
l i g h t s w i t ch  ON)  w i ll  have  a  higher  rank  in  the  hierarchy 
than  (NEXTTO  box  something). 
remain  boxes, 
subtasks,  Buch  as  (TYPE  BOXl  BOX),  have  the  highest 
rank.  T y p i c a l l y, 
the  robot's  p o s i t i on  has  the  lowest 
rank. 

the 
f i r st  pushes 
it  can  be  presumed  that  she  sub(cid:173)

If  we  assume  that  boxes 
then  unchangeable 

is  nearing  completion. 

is  also  connected  with 

i . e .,  cannot  be  burnt, 

the  subtask  (STATUS 

freedom  t o,  climb 

i . e .,  s t i ll  has 

the  robot 

idea  of 

the 

if 

In  s u f f i c i e n t ly  complex  worlds, 

(ON  x  y)  (ONFLOOR) . 
(ATROBOT  x)  (NEXTTO  ROBOT  x ). 
(INROOM  ROBOT  x ). 
(NEXTTO  x  y)  (AT  x  y ). 
(STATUS  x  ON)  (STATUS  x  OFF). 
a ll  the  unchangeable  subtasks. 

In  a ll  the  worlds  that  we  considered,  a  s t a t ic  h i e r a r(cid:173)
chy  could  be  found; 
i . e.  subtasks  had  a  h i e r a r c h i c al 
rank  independent  of  the  current  and  desired  state  of 
the  w o r l d. 
It  might 
not  be  feasible  to  find  a  s t a t ic  hierarchy  for  the  pos(cid:173)
sible  subtasks. 
As  an  example,  the  hierarchy  of  subtasks  for  the  world 
of  [ l]  (see  Table  1  and  Figure  1  for  the  r e s u l t s)  would 
be: 
Rank  0: 
Rank  1: 
Rank  2: 
Rank  3: 
Rank  4: 
Rank  5: 
Presently,  we  are  perfecting  a  h e u r i s t ic  program  which 
w i ll  derive  the  hierarchy  of  subtasks 
from  the  opera(cid:173)
tors  of  the  robot.  The  same  algorithm  also  discovers 
which  operators  are  relevant 
to  achieve  some  subtasks: 
for  instance  (PUSH  OBJl  0BJ2)  and  (PUSH  OBJ2  0BJ1) 
to  achieve  (NEXTTO  OBJl  0BJ2) 
2 . 2. 
(see  section  7) 
relevant  operators  were 
If  the 
above  mentioned  heuristic  program  holds  up  to  i ts  pro(cid:173)
mises, 
of  the  w o r l d,  operators  and  tasks 
algorithm.  This  algorithm  is  a  b i - d i r e c t i o n al  search 
procedure  which  finds  a  (shortest)  path  between  two 

to  allow  additional  experimentation 
the  Information  on  hierarchies  and  on 

the  only  input  to  LAWALY  beyond  the  description 

is  a  mate-running 

to  the  system. 

However, 

Input 

in  the  example  of  section 

points  In  a  maze  (of  rooms,  doors,  elevators,  e t c . ). 
Without  her  maze-running  c a p a b i l i t y,  LAWALY  has  no 
sense  of  d i r e c t i o n;  with  i t,  she  has  at  least  some  i n(cid:173)
dications  on  which  way  to  go. 

4.  The  Use  of  Hierarchies. 

rank: 

(ATROBOT  G). 

in  task  f,  Table 

in  decreasing  rank: 

(STATUS  LIGHTSW1TCH1  ON), 

three  of  these  sets  are  obtained,  which 

(NEXTTO  BOXI  DO0R1)  (NEXTTO  B0X2  DOOR1) 

When  a  task  is  given  to  LAWALY, 
the  subtasks  which 
specify  the  goal  are  partitioned 
in  sets  of  tasks  hav(cid:173)
ing  the  same  hierarchical  rank.  These  sets  are  named 
hierarchical  groups.  For  example, 
and  Figure  1, 
are 
highest 
next  rank: 
(NEXTTO  B0X3  LIGHTSWITCH1). 
lowest  rank: 
in  the  high(cid:173)
LAWALY  w i ll 
est  ranked  h i e r a r c h i c al  group, 
then  in  the  next  high(cid:173)
e s t,  etc.  Once  the  subtasks  in  a  hierarchical  group 
are  solved, 
the  l i st  of  worlds 
are  erased,  thereby  reclaiming  memory.  No  backtrack(cid:173)
ing  occurs 
it  is  assumed  that  a 
higher,  since,  by  d e f i n i t i o n, 
lower  ranked 
least  in 
some  way)  without  disturbing  a  higher  ranked  task. 
Within  a  h i e r a r c h i c al  group,  we  do  not  know  in  which 
order  to  t ry  the  subtasks,  and 
if  necessary  a ll  per(cid:173)
mutations  of  the  subtasks  are  t r i e d.  We  shall  see  an 
example  in  section  4 . 1. 

from  one  hierarchical  group  into  one  ranked 

task  can  be  accomplished  (at 

the  operator  tree  and 

to  solve  the  tasks 

f i r st 

try 

is 

t h i s. 

i n i t i al 

(See  section  8 

to  each  other", 

in  47.8  seconds 

the  goal  state; 

three  boxes  are  next 

4.1  Backtracking  within  a  Hierarchical  Group. 
In  the  world  of  [ l ],  as  well  as  in  the  condensed  ver(cid:173)
sion  given  in  section  2.2, 
(NEXTTO  BOX1  BOX2)  (NEXTTO  B0X2  B0X3)  (NEXTTO  B0X3 
BOXI),  which  is  a  more  symmetric  description  of  the 
state  "the 
i . e.  a  proof 
not  achievable.  A  disproof  of  t h is  goal, 
there  is  no  possible  sequence  of  operators  which 
that 
leads 
from  the 
to  the  goal  state,  necessitates 
much  additional  machinery9  and  is  beyond  the  scope  of 
t h is  paper.  LAWALY  does  determine, 
(see  task  d,  Table  1)  that  she  cannot  find  a  solution. 
Her  f a i l u re  does  not  mean  that  the  goal  is  indeed  un(cid:173)
achievable,  although  it  hints 
for  a  solvable  task  which  LAWALY  f a i ls  to  solve.) 
To  i l l u s t r a te  the  use  of  permutations  of  subtasks  in 
a  h i e r a r c h i c al  group,  we  turn  to  LAWALY's  attempt  at 
solving  the  goal  of  the  boxes  symmetrically  next 
to 
each  other.  We  abbreviate  (NEXTTO  BOXi  BOXj)  as  NEXTij 
LAWALY  f i r st  t r i es  to  solve  the  task  in  the  order 
NEXT12  NEXT23  NEXT31.  She  does  obtain  NEXT12  NEXT23  as 
before  (section  2 . 2 ).  To  obtain  NEXT31,  she  can  do 
(PUSH  B0X3  BOX1)  or  (PUSH  BOX1  B0X3),  but  either  opera(cid:173)
t i on  would  delete  one  of  the  already  achieved  subtasks. 
Hence  backtracking  occurs: 
there  is  none  possible  with 
the  ALIS,  and  backtracking  on  the  choice  of  operators 
too.  Backtracking  is  non-destructive, 
eventually 
the 
and  when  it  reaches 
is 
next  alternate  permutation  of  the  hierarchical  group 
selected:  NEXT12  NEXT31  NEXT23. 
(Successive  permuta(cid:173)
tions  are  selected  so  that  the  right-most  parts  of  the 
permutation  change  most  often.) 
Instead  of  t r y i ng  the 
whole  new  permutation 
world,  LAWALY  notices  that  she  has  backed  from  an  un(cid:173)
successful  solution  which  does  however  achieve  the 
f i r st  subtask  of  the  new  permutation;  NEXT12.  So  pro(cid:173)
cessing  hops 
to  the  state  in  which  NEXT12  is  s a t i s f i e d, 
thereby  saving  some  computation.  As  the  solution  is 
continued, 
In  e f f e c t, 
LAWALY  learns  from  her  f a i l u r e s.  More  than  just  know(cid:173)
ing  that  she  f a i l s,  she  keeps  the  information  contained 
in  the  f a i l u r e,  and,  as  t h is  example  shows,  can  reuse 
large  parts  of 
4.2  Observations  on  Solution  Times. 
With  no  backtracking,  the  time  needed  by  LAWALY  for  a 

from  the  i n i t i al  state  of  the 

the  old  paths  are  destroyed. 

i n i t i al  state  of  the  world, 

further  problem-solving. 

f a i ls 

the 

in 

it 

425 

the  size  of  the  set  of  preconditions,  etc.  When 

solution  w i ll  grow  about 
linearly  with  the  number  of 
steps  in  the  solution.  The  exact  time  per  step  w i ll 
depend  on  the  size  of  the  dynamic  world  (see  section 
6.3), 
backtracking  occurs  (as  in  problems  b,  d,  e,  m),  the 
overhead  per  node  increases.  Since  backtracking  is 
limited  by  the  use  of  hierarchies  (see  section  4 ), 
t o t al  solution  time  often  grows  only  about 
linearly 
with  the 

length  in  steps  of  the  solution. 

5.  Storage  Structure  of  the  World. 

the 

follow(cid:173)

the  dynamic  world 

the  static  world  ( i . e. 

larger  static  worlds  barely 

two  sections  were  obtained  with 

The  processes  described  so  far  are  independent  of  the 
storage  structures  used  for  the  worlds.  The  results 
in  the  next 
ing  storage  structure: 
- 
the  parts  of  the  world  which 
are  unchangeable)  is  stored  using  property  l i s t s.  As 
a  r e s u l t,  s i g n i f i c a n t ly 
affect  LAWALY's  .performance,  as  shown  in  section  6.3. 
- 
the 
processing  of  a  hierarchical  group,  each  dynamic  world 
is  kept  separately. 
this  storage  struc(cid:173)
ture 
(additions,  deletions,  membership  t e s t s,  etc.)  w i ll  be 
slow.  Average  processing  time  by  node  does  indeed  i n(cid:173)
crease  with  the  size  of  the  dynamic  world.  Our  main 
objective  has  been  to  work  on  the  more  serious  prob(cid:173)
lems  of  procedure  generation  and  search.  Various  a l t e r(cid:173)
native  storage  structures  are  presently 
to 
improve  the  efficiency  of  the  system  in  space  and  time. 

is  not  very  e f f i c i e n t,  and 

that  much  processing 

is  seen  that 

investigated 

list.  During 

is  stored 

in  a 

It 

6.  Comparison  with  the  STRIPS  Programs. 

from  a ll 

for  those  of  the  next  section  too),  while 

LAWALY  was  asked  to  solve  a ll  the  tasks  that  STRIPS 
solved  (as  available 
the  documents  to  which 
we  had  access)  and  we  threw  in  some  others  in  the  same 
worlds.  The  same  version  of  LAWALY  was  used  for  a ll 
the  runs  (and 
at  least  two  versions  of  STRIPS  were  used;  one  of  these 
uses  MACROPs,  and  the  other  one  does  not.  A  MACROP 
(macro-operator) 
is  the  generalization  of  a  task,  so 
that  a  single  new  macro-operator  replaces  several 
o r i g i n al  elementary  operators.  To  use  MACROPs,  a  se(cid:173)
quence  of  related  consecutive  tasks  must  be  given  to 
STRIPS. 
The  times  given  for  the  STRIPS  solutions  are  in  par(cid:173)
t i a l ly  compiled  LISP  on  the  PDP-10,  excluding  garbage 
c o l l e c t i o n.  LAWALY's  times  are  in  interpreted  LISP 
on  the  CDC-6600  and  include  garbage  c o l l e c t i o n.  The 
6600  is  estimated  to  be  about  8  times  faster  than  the 
however  the  gain  in  speed  due  to  compilation 
PDP-1010 
and  the  exclusion  of  garbage  c o l l e c t i on  times  make  the 
two  sets  of  times  about  d i r e c t ly  comparable  as  given. 

[ l ]. 

6.1  Comparison  with  STRIPS  of 
the  performances  are  summa(cid:173)
Figure  1  shows  the  tasks; 
rized 
in  Table  1.  Of  the  24  predicates  in  the  i n i t i al 
world,  16  are  s t a t i c.  Seven  operators  are  used.  The 
additional  node  in  the  search  tree  of  LAWALY  corre(cid:173)
sponds  to  a  c a ll  to  the  maze  solving  routine. 
(The 
same  comment  holds  for  some  of  the  other  examples.) 
Task  b  involves  some  backtracking,  hence  the  longer 
average  time  per  node  in  the  search  tree. 
Tasks  d,  e  and  f  were  additional  tasks  given  to  LAWALY, 
Task  d 
of  the  three  boxes  being  symmetrically  next 
to  each 
other.  Task  e  attains  a  physically  impossible  goal 
--the  robot  being  in  two  d i f f e r e nt  places  at 
time--which  can  be  reached 
in  the  axiomatization  of 
[ l ],  STRIPS  would  not  be  able  to  solve  this  problem 
due  to  some  b u i l t - in  heuristic  (R.  Fikes,  personal 
communication).  Task  f  requires  15  steps:  no  task 
requires  a  longer  solution  in  this  world. 
6.2  Comparison  with  STRIPS  of 
Figure  2  shows  the  tasks;  the  performances  are  summa-

is  the  impossible  task  ( in  the  axiomatization) 

the  same 

[ 2 ], 

[ 3 ], 

[ 2 ]. 

i n i t i al 

for  both  versions  of  STRIPS,  w i th  or  without 

rized  in  Table  2.  Of  the  66  predicates  in  Che  i n i t i al 
world,  47  are  s t a t i c.  Seven  operators  are  used.  Task 
1  Is  another  physically  impossible  task  which  has  a 
solution  in  the  axlomatization  of 
6.3  Comparison  with  STRIPS  of 
Figure  3  shows  the  tasks;  the  performances  are  summa(cid:173)
rized  In  Table  3.  Of  the  100  predicates  in  the 
world,  75  are  s t a t i c.  Nine  operators  are  used.  Re(cid:173)
sults 
MACROPs,  are  given.  STRIPS  alone  cannot  solve  task  n. 
Tasks  requiring  six  steps  (k  and  m)  appear  to  be  in  the 
upper  range  of 
The  world  in  [3] 
included  an  additional  67  s t a t ic  pred(cid:173)
icates,  none  of  which  were  needed  by  LAWALY.  With  the 
e n t i re  167  predicates,  LAWALY'S  solution  time  increases 
by  an  i n s i g n i f i c a nt  0.26%.  Further  augmenting  the  size 
of  the  world  to  a  t o t al  of  528  predicates, 
LAWALY'  s  o r i g i n al  time  by  7.27.;  however,  at  least  50% 
of  t h is  increase  can  be  a t t r i b u t ed  to  one  additional 
garbage  c o l l e c t i o n.  Hence  we  can  conclude  that  LAWALY's 
performance  is  only  marginally  affected  by  the  size  of 
the  s t a t ic  world. 

i ts  c a p a b i l i t i e s. 

increases 

We  note  that  in  a ll  the  solvable  tasks  in  Tables  1,  2 
and  3,  LAWALY  always  found  a  shortest  s o l u t i o n. 
In 
general,  LAWALY  does  not  always  find  a  shortest  solu(cid:173)
t i o n. 

7.  Some  Harder  Problems  Solved  by  LAWALY. 

tasks  can 

in  which  f a i r ly  hard 

she  dries  t e r r a r ia  w i th  hot  winds,  or  waters 

The  tasks  described  in  section  6  and  i ts  subsections 
are  no  challenge  to  LAWALY.  Since  the  world  pf  [ l] 
had  no  tasks  requiring  more  than  15  steps,  and  since 
the  other  two  worlds  were  not  much  larger,  we  have 
b u i lt  up  larger  worlds 
be  given.  LAWALY  was  made  to  operate  as  a  robot-
j a n i t o r; 
them  w i th  a  p a ll  that  she  must  f i ll  at  a  faucet;  she 
empties  trash  baskets,  sweeps  floors  w i th  brooms  and 
uses  a  dustbin  in  the  process;  she  can  carry  objects, 
but  must  put  them  down  to  close  doors.  Moreover,  she 
turns  l i g h ts  on  (and  also  o f f ),  blocks  doors  w i th  box(cid:173)
es  and  climbs  onto  boxes.  There  are  120  predicates  in 
the  I n i t i al  world,  of  which  75  are  s t a t i c,  and  26  opera(cid:173)
t o r s.  SubtaskB  are  divided  i n to  nine  p r i o r i ty  ranks, 
and  the  ranks  have  been  changed  to  study  the  e f f e ct  of 
changes 
Figure  5a  shows  the  i n i t i al  "superworld".  Figure  5b 
shows  the  f i r st  f i n al  state  considered.  The  task  was 
run  w i th  two  d i f f e r e nt  hierarchies.  When  the  rank  of 
a  door  being  blocked 
than  something  being 
in  a  room, 
the  task  is  solved  in  198  steps.  When  the 
ranks  are  reversed 
unchanged, 
the  task  is  solved  in  209  stepB.  The  tasks 
required  346  and  372  seconds,  respectively,  including 
24  and  25  garbage  c o l l e c t i o n s.  The  time  to  generate 
the  procedures  was  about  20  seconds,  and  is  not  included 
in 
formed  only  once 

the  above  times,since  procedure  generation  is  per(cid:173)

for  these  two  subtasks,  a ll  else 

in  the  hierarchy  of  subtasks. 

the  given  set  of  operators. 

is  smaller 

for 

With  the  same  i n i t i al  world,  but  Figure  5c  as  the  f i n al 
w o r l d,  and  the  f i r st  of  the  hierarchies  mentioned  above, 
the  solution  found  had  275  steps,  and  took  433  seconds. 
Upper  l i m i ts  on  LAWALY's  c a p a b i l i t i es  would  be  caused 
by  memory  l i m i t s,  since,  as  mentioned,  the  i n t e r n al  rep(cid:173)
resentation  of  the  world  is  i n e f f i c i e n t,  and 
. ..  econom(cid:173)
ic  considerations! 

8.  Example  of  a  Failure  by  LAWALY. 

We  shall  i l l u s t r a te  a  case  of  a  problem  which  is  solva(cid:173)
b l e,  yet  for  which  LAWALY  docs  not  find  a  s o l u t i o n. 
The  task  is  i l l u s t r a t ed  in  figure  6.  The  i n i t i al  state 
could  be  axiomaticed  as  INR00M(R0BOT  A)  CLOSED(DOOR) 
1NR00M(B0X  B),  while  the  f i n al  state  I s:  CLOSED(DOOR) 
NEXTTO(ROBOT  BOX).  LAWALY  may  decide  to  work  f i r st  on 

426 

f i r st  case.  LAWALY  finds  the  door  already 

the  CLOSED(DOOR)  condition,  or  f i r st  on  the  NEXTT0(ROBOT 
BOX)  c o n d i t i o n. 
Consider  the 
closed 
in  the  i n i t i al  s t a t e;  hence  she  wants  to  obtain 
the  NEXTTO  BOX  c o n d i t i o n.  To  do  t h a t,  she  must  enter 
Room  B,  thereby  going  through  the  DOOR.  But  that  would 
mean  opening  the  DOOR,  and  hence  undoing  what  she  has 
already  achieved  --CLOSED(DOOR)--  and  so  she  decides  to 
t ry  to  permute  the  goal  subtasks.  To  be  NEXTT0<ROB0T 
BOX),  she  goes  to  DOOR,  opens  i t,  goes  through  i t,  and 
then  goes  NEXTTO  BOX,  At  that  point,  she  realizes  that 
she  must  s t i ll  CLOSE  the  DOOR.  However,  that  would 
make  her  undo  something  she  wanted  and  had  already 
achieved,  namely  NEXTTO(ROBOT  BOX),  so  she  q u i t s,  having 
f a i l e d. 
The  reason  for  LAWALY's  f a i l u re  is  apparent: 
has  focused  a t t e n t i on  on  one  Bubtask,  she  does  not 
switch  to  another  one  u n t il  she  either  succeeds  or  f a i ls 
to  achieve  the  subtask.  Her  stubbornness  is 
of  her  downfall. 
Perhaps  LAWALY  Bhould  not  be  blamed  too  much'.  She 
solves 
the 
t i on  of  the 
t h is 
t r i v i a l)  " t r a n s i t i v i ty  of 

INR0OK(R0B0T  B),  or 
further  s p e c i f i c a t i on  is  added  by  some  (rather 

task  without  d i f f i c u l t i es 
f i n al  state 

location"  program. 

the  specifica(cid:173)

the  cause 

once  she 

includes 

if 

if 

9.  The  Advantages  of  Procedure  Generation. 

fi 7  R 

in  p a r t, 

''  were  de(cid:173)

to  f a c i l i t a te  the  w r i t i ng  of  robot 

The  goal-oriented  programming  languages 
signed, 
planners.  We  can  expect  t h a t, 
for  a  long  time,  programs 
such  as  LAWALY  that  w r i te  procedures  w i ll  often  be  less 
v e r s a t i le  than  human  beings.  On  the  other  hand,  when 
available,  programs  such  as  LAWALY  offer  a  measure  of 
consistency  and  a 
lack  of  errors  which  is  missing  from 
programs  produced  by  humans.  Human  programmers  w i ll 
often  be  tempted  to  take  shortcuts,  and  may  introduce 
bugs 

interpretations  of 

the  world. 

t h e ir 

in 

it 

in  QA47,8  to  solve 

A  t y p i c al  example  of  what  happenB--selected  because 
is  the  only  documented  case  at  our  disposal — is  a  set 
of  programs 
the  robot  problems  in 
[ l ].  A  shortcut  is  taken  by  t r e a t i ng  the  parameterless 
predicate  (ONFLOOR)  as  a  boolean  f l a g.  As  a  r e s u l t, 
unintentional  consequences  creep  into  the  QA4  programs: 
the  robot  cannot  push  two  boxes  next  to  each  other  if 
it  starts  on  a  box,  since 
"off  the  box.  The  introduction  of  bugs  is  i l l u s t r a t ed 
by  the  turnonlight  operator: 
climb  on  B0X1  next  to  the  lightswitch  to  turn  the  l i g ht 
on; 
l i g h t s w i t ch  (not  necessarily  BOX1)  and  then  climb  onto 
B0X1, 

the  robot  must  have  a  box  next  to  the 

it  never  " t h i n k s"  of  climbing 

location  of  that  box. 

independently  of  the 

the  robot  must 

in  [7,8] 

In  [ l ], 

10.  Learning. 

for  the  operators. 

As  in  [ 3 ],  our  robot  system  might  improve  her  speed  by 
building  macro  operators  that  combine  a  fixed  sequence 
of  operators.  Such  macros  must  be  selected  w i th  care, 
since  an  indiscriminate  generation  of  new  operators 
could  only  lead 
to  a  c l u t t e r i ng  of  memory,  additional 
choices  to  achieve  a  subgoal,  and  probably  to  costly 
reorganizations  of  the  code  generated 
Our  approach  to  robot  planning  can  be  viewed  as  a  form 
of  learning; 
the  robot  studies  her  own  environment  and 
c a p a b i l i t i e s,  and 
i t.  We  can  c a ll  t h is  type  of  learning:  procedural 
learning,  and  contrast 
learning 
—where  improvement  in  performance  r e s u l ts  from  changes 
in  parameters—and  s t r u c t u r al  learning—where 
improve(cid:173)
ment  in  performance  r e s u l ts  from  the  b u i l d i ng  and  modi(cid:173)
f i c a t i on  of  structures—.  Many  works  in  pattern  recog(cid:173)
n i t i on  and  the  checker-playing  program  of  Samuel  are 
examples  of  s t a t i s t i c al  learning.  The  generation  of 
MACROPs  may  be  considered  a  form  of  s t r u c t u r al  learn(cid:173)
i n g;  other  examples  are  111]  and  [ 1 2 ]. 

learns  to  Interact  e f f i c i e n t ly  with 

it  with  s t a t i s t i c al 

427 

430 

