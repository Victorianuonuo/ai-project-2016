Solving Constraint Optimization Problems in Anytime Contexts 

Samir  Loudni 

Ecole des Mines de Nantes 

F-44307 Nantes Cedex 3 - France 

samir.loudni@emn.fr 

Patrice  Boizumault 

GREYC, CNRS UMR 6072, Universite de Caen 

F-14032 Caen Cedex - France 
patrice.boizumault@info.unicaen.fr 

Abstract 

This paper presents a new hybrid method for solv(cid:173)
ing  constraint  optimization  problems  in  anytime 
contexts. Discrete optimization problems are mod(cid:173)
elled as Valued CSP. Our method (VNS/LDS+CP) 
combines  a  Variable  Neighborhood  Search  and 
Limited Discrepancy Search with Constraint Prop(cid:173)
agation to efficiently guide the search. Experiments 
on  the  CELAR  benchmarks  demonstrate  signifi(cid:173)
cant improvements over other competing methods. 
VNS/LDS+CP  has  been  successfully  applied  to 
solve a real-life anytime resource allocation prob(cid:173)
lem in computer networks. 

Introduction 

1 
It  is  today  indisputable  that  Constraint  Programming  (CP) 
fulfills industrial needs of optimization off-line.  Many sys(cid:173)
tems  which  use  this  technology  are  already  operational  in 
different fields of activity, such as planning, scheduling and 
resource allocation.  In on-line optimization context,  prob(cid:173)
lems dynamically  change  according to the evolution  of the 
external environment, and their resolution must respect strong 
temporal constraints (anytime contexts). However, CP is not 
yet adapted for solving such on-line problems :  no guaran(cid:173)
tee is supplied on the execution times, and current CP solvers 
do not lend themselves to the combination with other search 
methods which seem better adapted to respect temporal con(cid:173)
straints, such as stochastic search methods. 

Our objective is to conceive anytime algorithms based on 
CP and to guarantee the following main properties :  to pro(cid:173)
duce in a very short time solutions of good quality, and more 
importantly to improve them gradually as computation time 
increases.  To our knowledge, our proposal is one of the first 
attempt to efficiently address the problem of building anytime 
algorithms with Constraint Programming. 

This  paper  presents  a  new  hybrid  method,  called 
VNS/LDS+CP, dedicated to the efficient computation of high 
quality solutions (possibly suboptimal) in an anytime con(cid:173)
text. Our method combines a Variable Neighborhood Search 
[Hansen and Mladenovic, 1997] (it performs moves like local 
search), and a Limited Discrepancy Search [Harvey and Gins(cid:173)
berg,  1995] with Constraint Propagation to efficiently guide 
the search. 

Section 2 describes the general context in which we take 
place.  Section 3  reviews the hybridization of search algo(cid:173)
rithms and justifies our first choices.  Section 4 details our 
proposal (VNS/LDS+CP). Section 5, gives computational ex(cid:173)
periments  on  CELAR  benchmarks  ;  both  mechanisms  of 
VNS/LDS+CP are then finely studied. Section 6 shows how 
VNS/LDS+CP has been successfully applied to solve a diffi(cid:173)
cult network problem.  Finally, we conclude and draw a few 
perspectives. 

2  Anytime constraint optimization context 
2.1  Anytime algorithms 
The term anytime algorithm was coined by Dean and Boddy 
in  the  mid-1980s  in  the  context  of  their  work  on  time-
dependent planning [Boddy and Dean, 1994].  Contrary to a 
standard algorithm, where no result is available until its end(cid:173)
ing, an anytime algorithm can be stopped, at any time, to pro(cid:173)
vide a solution of increasing quality over time. 

Performance profiles describe the evolution of the solution 
quality (produced by the algorithm) as a function of the com(cid:173)
putation time. They provide a more precise description of the 
performances and of the behavior of an algorithm than the 
best known solution reported by usual algorithms. In the se(cid:173)
quel of this paper, we consider mean performance profiles : 
such curves are built empirically by collecting statistics on 
the performance of the algorithm over many input instances. 
There are two kinds of anytime algorithms,  namely,  in-
terruptible and contract algorithms  [Zilberstein,  1996].  A 
contract algorithm requires that the computing time must be 
known  prior to  its  activation. 
It  must  produce  a  solution 
within a contract of time, and if it is interrupted before the 
end of the contract, there is no guarantee about the quality 
of the solution.  However, for an interruptible algorithm, no 
information is (a priory) available about the allowed compu(cid:173)
tation time, and a solution may be asked for at any time. The 
algorithm must always provide a good solution, and more im(cid:173)
portantly, continue to refine it. 

In this paper we are interested by the design of interruptible 
algorithms, since every interruptible algorithm is trivially a 
contract algorithm, but the converse is not so immediate. 
2.2  Valued Constraint Satisfaction Problems 
The Valued CSP (VCSP) [Bistarelli et al., 1999; Schiex et al., 
1995] framework is an extension of the CSP (Constraint Satis-

CONSTRAINTS 

251 

faction Problem)  framework,  which  allows  over-constrained 
problems or preferences between solutions to be dealt with. 

More  formally,  whereas  a  CSP  is  defined  as  a  triplet 
(V,  V,  C),  where  V  is  a  set  of variables,  V  a  set  of finite 
domains associated to the variables and C a set of constraints 
between the variables, a VCSP can be defined as a CSP pro(cid:173)
vided  with a  valuation structure  S  and a  valuation  function 
, where 
Â£ is a valuation set, 
the maxi(cid:173)
mum and the minimum element in E and  _  a binary operation 
closed on E. The valuation function 
defined from C to E, 
associates  a  valuation  to  each  constraint;  the  valuation  of a 
constraint denotes its importance. 

The  valuation  structure  S  is  a triplet  (E, 

a total order on E, 

and 

Let A be an assignment of all the variables and 

be  the set of the constraints  unsatisfied  by A.  The  valuation 
of A  is the  aggregation  of the  valuation  of all the  constraints 
in 

The objective is to find a complete assignment with mini(cid:173)
mum valuation.  Specific frameworks depend on the retained 
Classical CSP (A); Possibilistic CSP (max); Lexi(cid:173)
operator 
cographic CSP (U on multi-sets); Weighted CSP 
. As many 
real-life problems use an additive criterion, we only consider 
weighted  CSP  (WCSP)  in  the  sequel  of this paper.  From  an 
algorithmic point of view,  WCSPS  are generally the most dif(cid:173)
ficult to solve [Schiex et  al.,  1995]. 

3  Hybridizations of algorithms 
3.1  Complete search vs local search 
Exact (or complete) tree search methods, such as Branch and 
Bound,  are able to produce both  an optimal  solution,  and a 
proof of optimality.  But, because  of their exponential  worst-
case behavior, they may be extremely time consuming.  More(cid:173)
over,  it has  been  experimentally  observed that,  due  to  their 
systematic  way of exploring the  search  space,  the  quality  of 
their intermediate solutions  is usually very poor. 

Due  to  their  opportunistic  way  of  exploring  the  search 
space,  approximate  (or  incomplete)  methods,  based  on 
local  search  (as  Simulated  Annealing,  Tabu 
stochastic 
Search), can provide good solutions within a reasonable com(cid:173)
puting time.  But, such methods do not guide fast enough the 
search towards the best neighbor solutions.  Indeed, they may 
waste a lot of time trying to improve the current solution with 
no success ; this is the case when they remain blocked in local 
minima during a prohibitive time.  Such situation is not suit(cid:173)
able in an anytime context,  since the quality of solutions has 
to be improved gradually as fast as possible, as the comput(cid:173)
ing  time  increases.  Moreover,  pure  local  search  algorithms 
generally  require  a  lot  of time  to  adjust  their  noise parame(cid:173)
ters  ;  their efficiency  strongly  depends  on the  value of these 
parameters, which are generally application-dependent. 

3.2  H y b r id  algorithms 
Hybrid algorithms  [Focacci  et al, ]  provide appropriate com(cid:173)
promises between both kinds of search.  More precisely, they 
are  very  efficient  by  combining  the  advantages of both  con-
straint propagation  (complete  search)  and  opportunistic  ex(cid:173)
ploration of the search  space (local  search). 

Intertwined hybridizations are  the  most  attractive  and  rel(cid:173)
evant hybridizations  of algorithms  where  both complete  and 
local  search  are  closely  mingled  during  computation.  The 
first  kind of such  hybrid  algorithms belongs  to the  family of 
local search methods and uses ideas from CP in order to make 
large neighborhoods (LNS  [Shaw,  1998])  more  tractable.  A 
second  kind  belongs  to  the  family  of exact  search  and  uses 
some local  search principles to improve the partial solutions 
at  each  node  of the  search  tree  [Prestwich,  2000]  or  to  ex(cid:173)
plore  a set  of solutions close  to  the  greedy  path  in  a search 
tree [Caseau et al,  1999]. 

3.3  Hybrid algorithms for anytime contexts 
VNS/LDS+CP  is  an  Intertwined  hybridization  algorithm. 
From local search, we have retained a Variable Neighborhood 
Search  (VNS)  which  extends  the  principle  of large  neigh(cid:173)
borhoods  (LNS)  by  dynamically adjusting the  neighborhood 
size,  when  the  current  solution  is  a  local  optimum.  This 
choice  will  partially  remedy  to  the  weaknesses  of pure  lo(cid:173)
cal  search  methods.  Indeed,  the  more  the  neighborhood  is 
potentially  large  the  more  there  are  chances  that  it  contains 
good  solutions  and  thus  improves  quickly  the  current  solu(cid:173)
tion.  However,  as  neighborhoods  grow  larger,  finding  the 
best neighbor may require a too expensive computational  ef(cid:173)
fort.  So, we have selected the LDS partial search combined 
with  constraint  propagation  (lower  bounds  computation)  to 
efficiently explore these neighborhoods. 

4  The VNS/LDS+CP Method 
VNS/LDS+CP is basically a local search method, as depicted 
in algorithm  1.  It differs from classic local search methods by 
the size of the neighborhoods, which is adjusted dynamically 
during the search.  It starts with an initial complete assignment 
.s*; then,  at each  move,  it relaxes  (or unassigns variables)  a 
large  part  of the  current  solution  s  and  then  rebuilds  it  (re(cid:173)
assigns variables) by selecting the best neighbor that strictly 
improves the cost of the current solution.  The algorithm ends 
when the maximum number of local moves (MAXMOVHS) is 
reached. 

LDS explores the neighborhood defined by the relaxed part 
of the solution.  It benefits from constraint propagation based 
on lower bounds computation,  and on dynamic heuristics for 
variable and value ordering.  Moreover, only judicious neigh(cid:173)
borhoods,  related  to  conflict  variables  (i.e.  variables  occur-

252 

CONSTRAINTS 

ploration of the search tree, and speeds up the reconstruction 
step,  thus improving the performance profile of our method. 
LDS starts from the solution computed by the value heuristic, 
and successively explores solutions by increasing the number 
of discrepancies,  until  the fixed maximal  number of discrep(cid:173)
ancies is reached. 

We have used a generalized version of LDS for n-ary trees. 
The  discrepancy  is  measured  according  to  the  rank  of the 
value  chosen  for  every  variable  in  the  order  given  by  the 
heuristic  on  values.  We  count  a  single  discrepancy  for  the 
second cheapest value of one variable, two discrepancies for 
either the third cheapest value of one variable, or the second 
cheapest value of two variables, and so on.  We only perform 
one iteration of LDS, for a  fixed  discrepancy.  This prevents 
re-visiting leaf nodes. 

Constraint  Propagation 
One of the main  strengths of our approach  lies  in  the use  of 
constraint propagation to prune useless sub-trees and to guide 
the choice of values during the reconstruction, while keeping 
this step fast enough.  At each node of the search tree, lower 
bounds  are  computed  in  order  to  locally  exclude  all  partial 
solutions which cannot lead to complete assignments of better 
valuation than the current best solution.  To our knowledge, 
no method based on large neighborhoods (in particular VNS) 
uses such a mechanism. 

To compute lower bounds,  we have adapted the following 
algorithms  LLarrosa et al. , 1999] for wcSPs  :  (i) Partial For(cid:173)
ward Checking and Directed Arc Consistency (PFC-DAC), all 
the constraints are directed, and DAC are computed from a di(cid:173)
rected constraint graph (we have used specific data-structures 
to  relax  the  condition  of static  variable  ordering  on  DAC)  ; 
(ii) Reversible  )zfC(PFC-RDAC), constraints directions can 
change  dynamically  during  search,  looking  for  a  good  di(cid:173)
rected graph  causing a  high  lower bound  ;  (iii)  Maintaining 
Reversible DAC (PFC-MRDAC), DAC are maintained during 
search, propagating the effect of value pruning. 

Variables and Values  heuristics 
Our  heuristic  for  variable  ordering  first  selects  the  variable 
having  the  lowest  ratio  domain  cardinality divided by future 
degree.  Constraint propagation, based on Forward Checking 
+ Directed Arc Consistency, allows us to use a dynamic min(cid:173)
imum inconsistency count value ordering.  During search,  for 
each value, so-called Inconsistency Counts (ic) and Directed 
Arc Consistency counts (dac) which record the look-ahead ef(cid:173)
fects on future (unassigned) variables, are computed.  Values 
are selected by their increasing ic + dac. 

Instances of CELAR 

5  Experimentations  on  C E L AR  Benchmarks 
5.1 
The  CELAR  (French  Centre  d 'Electronique de  I'Armement) 
has made available a set of 1 I instances of the Radio Link Fre(cid:173)
quency Assignment Problem  (RLFAP)  [Cabon  et  al.,  1999]. 
Most of them can be naturally cast as binary WCSPS.  For our 
experiments, we have selected instance 6 (which involves 200 
variables, having an average of 40 values in their domain, and 
1322 constraints),  instance 7  (which involves 400  variables, 

ing  in  violated constraints),  are  considered.  Such  a  choice 
prevents LDS  from modifying the  value of conflict variables. 
4.1  Relaxing a solution 
Algorithm  2  describes  how  to  select  the  variables to  be  re(cid:173)
laxed.  The  function of line (1) computes  the set v  of current 
variables candidate to relaxation, according to a strategy Sir. 
A basic  strategy is to select  all the variables that are  in  con(cid:173)
flict,  size  elements  of v  are  randomly  chosen  to  constitute 
rd  the  set  of variables  to  be  relaxed.  This  choice  enables  a 
balance  between  choosing  variables  according  to  a  specific 
strategy and completely at random.  Experiments have shown 
that the  introduction of some randomness  enables the search 
to  escape  quickly  from  local minima. 
4.2  Control of the Neighborhood  Size 
Initially, the neighborhood size (size) takes a minimum value. 
To  control  the  neighborhood  size,  different  strategies  have 
been  implemented.  The  best  strategy  we  have  found,  in(cid:173)
creases  systematically  size  by  one,  each  time  the  method 
does not improve the cost of the current solution. 
4.3  Rebuilding a solution 
Algorithm 2 defines the function R e b u i l d. The global vari(cid:173)
ables ub and lb record the upper and lower bounds of the prob(cid:173)
lem optimum.  LB(s,.r,) computes a lower bound  of the sub-
problem,  limited to the variables after i (i  included),  discrep 
sets  the  maximum  number  of choices  that  we  can  diverge 
from the heuristic (discrepancies). 
Limited  Discrepancy  Search 
The idea of LDS  [Harvey and Ginsberg,  1995]  is to explore 
heuristically  good  solutions  that  might  be  at  a  limited  dis(cid:173)
tance from greedy solution. LDS ensures a more balanced ex(cid:173)

CONSTRAINTS 

253 

having an average of 40 values in their domain, and 2866 con(cid:173)
straints), and instance 6-Sub 1 (which involves 28 variables, 
having an average of 40 values in their domain, and 314 con(cid:173)
straints) extracted from instance 6. These instances (6 and 7) 
are the most difficult ones. Whereas the optimum of instances 
6 and 6-Sub 1 are known (respectively 3389 and 2669), the 
optimum of instance 7 is still unknown; the best known upper 
bound is equal to 343592. 

5.2  Experimental  Methodology 
Our method has 4 parameters :  the maximum number of local 
moves  (MAXMOVES),  the  initial  neighborhood  size  (size), 
the  number  of discrepancies  (discrcp),  and  the  propagation 
scheme.  For  all  experiments,  MAXMOVES  has  been  set  to 
150  and  size  to  4  ;  it  is  the  best  value  we  have  found 
among the  following set of values  :  {2,3,4,5,6}.  We  car(cid:173)
ried  out  experiments  with  different  values  of discrepancies 
(discrcp  E  {2,3,4,5}) and  with  three  different propagation 
mechanisms :  PFC-DAC, PFC-RDAC and PFC-MRDAC. 

For  each  combination  of  parameter  settings,  we  ran 
VNS/LDS+CP  50  times  on  the  considered  instances.  Dur(cid:173)
ing  each  run,  the  best  cost  of the  current  solution  has  been 
recorded  at regular time  intervals  (10  seconds).  All  plotted 
figures  are mean performance profiles over the  50 runs.  The 
methods have been implemented in choco [Laburthe, 2000]. 

Setting  parameters  for VNS/LDS+CP 

5.3 
Number  of discrepancies 
Figure  1  (top)  shows the performance profiles obtained  with 
PFC-DAC,  for  different  settings  of  discrcp  on  instance  6. 
Performance  profiles  for  discrcp  -  2  and  3  are  almost  the 
same.  We give only the curve associated to discrcp - 3.  Re(cid:173)
sults indicate,  as expected,  that the  number of discrepancies 
has a great  impact on the quality  of the computed  solutions. 
LDS  with (discrcp  =  4) gives the  best results.  The poor re(cid:173)
sults  for (discrcp  >  4)  are  probably  due  to  the  fact that  our 
value ordering does not make so many mistakes.  Indeed, we 
exploit  the  propagation  scheme  to  guide  the  value  choices. 
Thus,  few discrepancies are  necessary  to repair heuristic  er(cid:173)
rors. 
In  contrast,  for  low  discrepancies  (discrcp  <  3),  the 
value  heuristic  too  closely  limits  the  solutions  we  can find, 
and so,  it provides poor guidance to good  solutions.  For the 
instance 7, discrcp  =  4  is also the best value. 
Propagation  mechanism 
We turn  now to  choose  the propagation  scheme  which  pro(cid:173)
duces significant lower bounds and, as global effect, leads to 
a better behavior of our  method.  Figure  1  (bottom)  reports 
the performance profiles  obtained  for  the  three  propagation 
algorithms,  with discrep  = 4  on instance  6.  LDS  with PFC-
DAC  leads  to  very  substantial  profits.  Because  of the  over(cid:173)
head  of propagation  over  small  neighborhoods  these  bene(cid:173)
fits decrease  clearly when using  stronger propagation  (PFC-

254 

CONSTRAINTS 

RDAC and PFC-MRDAC).  Indeed,  compared to PFC-DAC, 
the  two  other propagation  schemes  perform  more  work per 
node to  finally  obtain results very close to PFC-DAC. So, the 
more complex and time-consuming propagation  schemes do 
not pay-off for this context. 

5.4  Comparisons  and  discussion 
We have  compared  VNS/LDS+CP (discrap = <1  with  PFC-
DAC) with LNS/CP/GR [Lobjois et  al,  2000], another hybrid 
method which also relies on solving VCSPs in an interruptible 
context,  and  also  with  two  standard  versions  of Simulated-
Annealing (SA)  :  Quick and Medium. 

LNS/CP/GR is based on the principle of LNS with neigh(cid:173)
borhood size being constant during all the search.  To rebuild 
the  relaxed  variables,  it  uses  a  greedy  algorithm  combined 
with constraint propagation.  But this propagation (performed 
variable per variable)  is only used  for selecting the best val(cid:173)
ues  for each variable,  which  is fundamentally different from 
our CP based on usual propagation for WCSP.  For instances 6 
and 7, the percentage of unassigned variables represents 40% 
of the total number of variables  [Lobjois et a/., 2000]. 

Figure 2  compares the  performances  of the  four methods. 
The  performance profile  of  VNS/LDS+CP  is  always  better 
than  those  of the  two  versions  of SA.  At  the  beginning,  the 
profile of VNS/LDS  CP is very close to that of LNS/CP/GR. 
But  after  few  seconds  of computation  (<  20  seconds  on  in(cid:173)
stance  6  and  <  35  seconds  on  instance  7),  VNS/LDS+CP 
becomes very effective and always provides solutions of bet(cid:173)
ter quality,  thus  clearly  outperforming  LNS/CP/GR on  both 
instances.  This  behavior  can  be  explained  by  the  fact  that, 
at  the  beginning,  the  size  of the  neighborhood  is  relatively 
small  and  consequently  the  benefits  of constraint  propaga(cid:173)
tion are poor.  But as soon as this size becomes  sufficiently 
large,  our  propagation  mechanism  (lower bounds  computa(cid:173)
tion)  produces  more  pruning,  and  becomes  very  effective. 
This  leads to a better compromise  between quality and time 
for  VNS/LDS+CP.  This  confirms  our  choice  for  computing 
significant  lower bounds.  Note  however,  the  good  anytime 
behavior of LNS/CP/GR compared  with those of SA. 

Figure 4: Comparing VNS and LNS on instance O-.6-Subl. 

5.5  Study of mechanisms VNS and LDS+CP 
In  order  to  evaluate  the  contribution  of each  component  of 
VNS/LDS+CP we have  carried out experiments  on  instance 
6-Subl, with MAX MOVES - 150, and size = 4 ; the two other 
instances  being  out  of reach  from  complete  searches.  Five 
methods have  been  compared  :  the Depth First Branch  and 
Bound (DFBB), LDS with only one iteration, two variants of 
LNS  (LNS/CP/GR  and  LNS/LDS+CP)  which  mainly  differ 
by  their reconstruction  mechanism,  and  VNS/LDS +CP. For 
the  two  variants  of LNS,  the  best  percentage  of unassigned 
variables represents 60% of the total number of variables. 

Once  again,  discrcp  =  A  constitutes  the  best  parameter 
setting for VNS/LDS+CP.  The behavior of VNS/LDS+CP is 
quite similar to those observed on  instances  6 and  7,  which 
clearly offers better performance profiles than the other com(cid:173)
peting methods. On this instance, VNS/LDS+CP almost finds 
the optimum in a very short time at each run.  We can draw 
some remarks : 

â¢  pure  LDS  (or only  one  iteration  of LDS)  is  completely 
inefficient  in  an  anytime context,  even  if LDS  leads  to 
better performance profiles than DFBB. 

â¢  the  efficiency  of VNS/LDS+CP  is  certainly  partly  due 
to the reconstruction  mechanism.  Indeed,  the  compar(cid:173)
ison  between  performance  profiles  of LNS/CP/GR  and 
LNS/LDS+CP show that,  with an effective propagation 
(lower bounds  computation)  combined  with  LDS,  LNS 
obtains a gain in quality of 7% after 20 seconds. 

â¢  the  use  of variable  size  neighborhoods  is  a  key  point 
in  the  efficiency  of VNS/LDS+CP.  Indeed,  it  produces 
better performance profiles than LNS/LDS+CP.  After 2 
seconds, VNS obtains a gain in quality of 9% ; this gain 
reaches  a  value  of 5%  after  15  seconds.  This  amelio(cid:173)
ration comes  from  the  speed of the  exploration  of rela(cid:173)
tively small neighborhoods (in particular during the first 
moves of VNS). This greatly improves the quality of the 
computed upper bound which will enable a better prun(cid:173)
ing at the next reconstruction step.  This is not the case 
for LNS,  which  needs  much  more  time  to obtain good 
upper bounds, due to the important size of the neighbor(cid:173)
hoods. 

To  evaluate  the  improvement  speed  of  the  quality  of 
solutions  provided  by  VNS  and  LNS,  figure  4  compares 

CONSTRAINTS 

255 

VNS/LDS+CP and LNS/LDS+CP, in term of the average per(cid:173)
centage  of  improvement,  Qp(t),  with  respect  to  the  initial 
cost,  Co,  and  in  term  of the  number of attempted moves  (in 
percentage).  Qp(t)  =  100  .  (C0  -  C(/))/C0,  where  C{t)  is 
the valuation of the best solution found at each instant t. 

As depicted in figure 4, VNS/LDS+CP provides the better 
improvement of the initial cost Co. This difference in quality 
(in favor of VNS) is very  significant during the first instants. 
After only  4  seconds  of computation,  VNS  improves Co  by 
35%, with a percentage  of attempted moves  equal  to 4%  of 
MAXMOVES.  For  comparison,  LNS  needs  15  seconds  and 
practically three times more of local  moves (~  14%) to reach 
the  same  improvement of quality.  Moreover,  the  number  of 
moves  attempted  by  LNS  grows  larger with time,  while  for 
VNS this number remains low and quasi constant. 

6  Resource allocation in ATM networks 
VNS/LDS+CP  has  been  successfully  applied  to  a  real-life 
anytime resource  allocation  problem.  This  application,  de(cid:173)
veloped  for  France  Telecom  R&D,  takes  place  in  an  ATM 
(Asynchronous  Transfer Mode) network administration con(cid:173)
text.  The problem consists  in  planning demands  of connec(cid:173)
tion  over a period of one  year.  Reservations  must be  com(cid:173)
puted within at most one minute per demand. 

A new demand is accepted if both bandwidth requirements 
and  quality  of service are  satisfied.  If not,  we try to  reroute 
some  already  accepted  connections  in  order  to  find  a  route 
for  the  new  demand. 
If rerouting  fails,  the  demand  is  re(cid:173)
jected.  First,  a  routing  heuristic  computes  shortest  paths 
which minimize capacity violations on the links.  From these 
violations,  a  sub-area  of the  network  that  can  be  modified 
by  rerouting  some  already  accepted  connections  is  deter(cid:173)
mined and modelled as a VCSP. Then, rerouting is performed 
with  VNS/LDS+CP.  Experimental  results  show  that  rerout(cid:173)
ing with VNS/LDS+CP enables to admit an average of 67% 
of demands that are rejected with a greedy algorithm without 
rerouting  [Loudni  et al, 2003]. 

7  Conclusions  and further work 
VNS/LDS+CP is a new hybrid method for solving constraint 
optimization  problems  (modelled  as  VCSPs)  in  an  anytime 
context.  It has  been  successfully  applied to  a  real-life any(cid:173)
time resource  allocation problem  in  ATM  networks (67%  of 
rejected demands are now accepted). 

Experiments on the CELAR benchmarks have  shown that 
VNS/LDS+CP provides better performance  profiles than the 
other competing methods.  Moreover, our method is robust  : 
for all considered instances, the best parameters setting is al(cid:173)
ways the same.  Finally, VNS-LDS+CP is stable :  the distri(cid:173)
bution of the medians  1/4,  1/2  and 3/4  shows that the vari(cid:173)
ation  of the  evolution  of solution  quality is negligible within 
the  fifty  runs.  However, the difference between the best run 
and those of the medians is relatively distant for instance 7. 
From an anytime point of view,  in addition to the proper(cid:173)
ties of monotonicity, interruptibility and  measurable  quality, 
our performance profiles also verify the important property of 
diminishing returns,  which  guarantees  that  the  improvement 
in solution quality is larger at the early stages of computation. 

Performance profiles show a decelerating phase leading to 
a quasi stable plateau. To escape from this plateau, we intend 
to  study two possibilities  :  to  cooperate  with  other efficient 
pure local search method [Voudouris and Tsang,  1998] or to 
re-start our method. 

In this paper we have mainly focused on the design of any(cid:173)
time algorithms.  Works remain to be done concerning tech(cid:173)
niques  for monitoring and control  (see  [Hansen  and  Zilber-
stein, 2001]).  We are currently investigating such techniques 
for meta-level control.  The use ofnogoods would help to ob(cid:173)
tain more relevant neighborhoods. 

References 
[Bistarclh et al,  1999]  S.  Bistarclli, U.  Montanari. F.  Rossi, T. Schiex, and G  Verfail-
he  H.  Fargier.  Semiring-based csps and valued csps  Frameworks, properties, and 
comparison.  Constraints,  4(3)-199-240,1999. 

[Boddy  and Dean,  1994]  Mark  Boddy  and  Thomas  L  Dean.  Deliberation  schedul(cid:173)
ing  for  problem  solving  in  time-constrained  environments.  Artificial  Intelligence, 
67.245-295,1994. 

[Cabon et al.. 1999]  B.  Cabon,  S.  de  Givry,  L.  Lobjois,  T  Schiex,  and  J.P  Warn-

ers.  W.K.  Radio  link  frequency  assignment.  Constraints,  4(1).79-89,1999. 

[Caseau et al,  1999]  Y. Caseau,  F.  Laburthe, and G.  Silverstcin  A  meta-hcunstic  fac(cid:173)
In  Pro-

tory for vehicle  routing problems (meta-programming for meta-heunstics) 
ceedings oj CP-99, number  1713  in  LNCS, pages  144  158, VA, USA.  1999. 

[Focacci et al, ]  F.  Focacci,  F.  Laburthe,  and  A  Lodi.  Local  search  and  constraint 
programming.  To  apear  in  F.  Glover  and  G.  Kochenberger (Eds ).  HandBook  on 
Metaheunstics,  Kluwer  Academic  Publishers 

lHansen and Mladenovic,  1997]  P.  Hansen and N. Mladenovic. Variable neighborhood 

search.  Computers And  Operations  Research,  24  1097-1100,1997 

lHansen and Zilberstein, 2001]  Eric  A  Hansen  and  Shlomo  Zilberstem  Monitoring 
and  control  of anytime  algorithms  A  dynamic  programming approach.  Artificial 
Intelligence,  126  139-157,2001 

[Harvey and Ginsberg,  1995]  William  D.  Harvey and  Matthew  L.  Ginsberg.  Limited 

[Laburthe, 2000]  Francois  Laburthe.  Choco. 

discrepancy  search.  In  Proceedings  of  IJCAI  '95,  Montreal,  August  1995 
implementing  a  cp  kernel. 

In  CP00 
Post  Conference  Workshop  on  Techniques for  Implementing  Constraint  program(cid:173)
ming Systems  (TRICS),  Singapore, September 2000. 

[Larrosa et a/.,  1999]  J.  Larrosa,  P.  Meseguer, and  T.  Schiex.  Maintaining reversible 

dac  for solving  max-csp.  Artificial  Intelligence,  107( I)  149  163,1999. 

[Lobjois et al, 2000]  L.  Lobjois,  M.  Lemaitre,  and  G.  Verfaillie  Large  neighbour(cid:173)
hood search  using  constraint propagation and  greedy reconstruction for valued csp 
resolution. 
In  Proceedings  of the  ECAI2000  Workshop  on  Modelling  and  Solving 
Problems  with  Constraints,  2000 

[Loudni et al., 2003]  Samir Loudni, Patrice  Boizumault, and  Philippe David.  On-line 
resources  allocation  for  atm  networks  with  rerouting.  In  Proceedings  of  Integration 
oj Al  and  OR  Techniques  in  Constraints  Programming  for  Combinatioral  Problems 
(CP-AI-OR '03), Montreal, Canada,  May  2003. 

[Prestwich, 2000]  S.  Prestwich.  A  hybrid search  architecture applied to hard random 
3-sat and low-autocorrelation binary sequences. In Proceedings of CP 2000, number 
1894 in LNCS, pages 337-352, Singapore, September 2000. 

[Schiex et  al,  1995]  Thomas  Schiex,  Helene Fargier,  and  Gerard  Verfaillic.  Valued 
In  Proceedings  of IJ(cid:173)

constraint  satisfaction  problems:  Hard  and  easy  problems. 
CAI '95,  Montreal,  August  1995. 

[Shaw,  1998]  Paul  Shaw.  Using constraint programming and  local  search  methods to 

solve  vehicle routing problems.  In  Proceedings of CP-98,  pages 417-431,1998. 

[Voudouris and Tsang,  1998]  C.  Voudouris and E.  Tsang.  Solving the  radio link  fre(cid:173)
quency  assignment  problem  using  guided  local  search. 
In  Proceedings  of NATO 
symposium  on  Frequency  Assignment,  Sharing  and  Conservation  in  Systems,  Aal-
borg, Denmark, 1998. 

[Zilberstein,  1996]  Shlomo Zilberstein.  Using  anytime algorithms in  intelligent sys(cid:173)

tems.  Al  Magazine,  17(3):73-83,1996. 

256 

CONSTRAINTS 

