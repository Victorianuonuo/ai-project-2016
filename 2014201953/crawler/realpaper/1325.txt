A  SYSTEM  WHICH  AUTOMATICALLY 

IMPROVES  PROGRAMS 

Session  18  A u t o m a t ic  Programming 

J.  D a r l i n g t on  and  A.M.  B u x a t a ll 

Department  of  Machine 

I n t e l l i g e n ce 

U n i v e r s i ty  of  Edinburgh 

A b s t r a ct 

We  give  methods  of  mechanically  converting 

programs  that  are  easy  to  understand  i n to  more 
e f f i c i e nt  ones,  converting  recursion  equations  using 
high  l e v el  operations  i n to  lower  level  flowchart 
programs. 

The  main  transformations  involved  are  ( i) 
recursion  removal  ( i i)  eliminating  common  sub(cid:173)
expressions  and  combining  loops  ( i i i)  replacing  pro-
cedure  c a l ls  by  t h e ir  bodies  ( i v) 
assignments  which  overwrite  l i st  c e l ls  no  longer  in 
use  {compile-time  garbage  c o l l e c t i o n ). 

introducing 

t 

Introduction 

This  paper  ia  an  introduction  to  an  automatic 
program  improving  system  that  we  have  implemented 
and  are  developing  f u r t h e r. 

A  programmer  is  able  to  present  h is  algorithms 

to  the  system  in  a  clear  and  abstract  language. 
system  converts  them  to  e f f i c i e nt  but  probably  not 
transparent  versions. 

The 

For  example,  here  are  two  versions  of  one 

program  which  reverses  l i s t s. 

One  is  clear  and  abstract, 

tortuous  but  e f f i c i e n t. 
d e f i n i t i o n,  a  competent  programmer  should  be  able  to 
produce  the  second. 
Our  system  can  do  t h is  f or  him. 

the  other  more 
Siven  the  f i r st  as  a 

The  system  is  b u i lt  around  the  concept  of 

abstract  programming,  and  we  hope  to  encourage  a  user 
to  formulate  h is  algorithms  in  abstract 
appropriate  to  hia  problem  domain  and  leave  to  the 
system  the  task  of  implementing  them  e f f i c i e n t l y. 

terms 

Our  work  was  p a r t ly  inspired  by  Minsky's  homily 

on  form  versus  content  in  computer  science  in  which 
he  recommended  programming  as  a  good  application  area 
f or  A r t i f i c i al 
influeneed  by  D i j k s t r a^ 
gramming,  d i f f e r i ng  in  that  we  s t a rt  from  a  functional 
LISP-like  language. 

ideas  on  structured  pro(cid:173)

Intelligence  work. 

It  was  also 

Our  i n v e s t i g a t i on  took  as  i ts  s t a r t i ng  point  a 

c o l l e c t i on  of  prooedures  w r i t t en  by  Ambler  and 
Burstall  which  aimed  to  provide  transparent,  but 
quite  e f f i c i e nt  operations  on  f i n i te  sets.  We  used 
t h is  example  to  study  the  transformations  which  are 
needed  to  implement  a  c o l l e c t i on  of  high  level  pro(cid:173)
cedures  as  e f f i c i e nt  code. 
To  enable  one  to  write 
programs  about  f i n i te  sets  some  operations  on  sets, 
f or  example,  UNION,  INTERSECTION, StBTBACT.NULLSET, 
NILSET,  CONSSET,  CHOOSE  and  MINUS  are  defined. 

These 

*  The  operations  we  use  are  based  on  the  POP-2 
language,  B u r s t a l l , C o l l i ns  and  Popplestone  .  The  main 
features  to  note  are  that  hd  is  the  LISP  c a r,  t1  the. 
LISP  cdr  and  concat  joins  two  l i s ts  (the  LISP  append;. 

479 

terms  of 

the  a r r ay  or 

implemented  as  s t r u c t u r ed 

in 
t he  programming 

l o o ks  at  h is  d e f i n i t i o n.  he  n o t i c es 

l i st  p r i m i t i v es 
The  u s er  of 
f u n c t i o n s,  such 
However,  when 
t h at  he  c o u ld 

b a s ic  s et  o p e r a t i o ns  must  be 
d e f i n i t i o ns 
a v a i l a b le 
language. 
in 
t he  s et  system  can  d e f i ne  and  r un  new 
as  p o w e r s e t,  u s i ng  these  o p e r a t i o n s. 
he 
have  produced  a  much  more  e f f i c i e nt  program  by  w r i t i ng 
a  s p e c i al  procedure 
the  a r r ay  or 
tem  a t t e m p ts 
L I S P - l i ke 
a r c hy  of 
l e v el 
t h is  h i e r a r c h y. 
seemed  to  be 

Our  system  e l i m i n a t es  h i g h er 
f l a t t e n i ng 

l i st  p r i m i t i v e s. 
to  do. 

f or  powerset  d i r e c t ly  in 

i ts  s t r u c t u re  as  a  h i e r(cid:173)

A  w e ll  w r i t t en  program 

improvement  processes 

to  g a in  e f f i c i e n c y, 

language  expresses 

is  what  o ur  s y s(cid:173)

f u n c t i on  c a l ls 

Four  d i s t i n ct 

i n d i c a t e d. 

f u n c t i o n s. 

terms  of 

This 

in  a 

1.  R e c u r s i on 
2. 

r e m o v a l, 

E l i m i n a t i ng  redundant  c o m p u t a t i o n,  by  merging 
common  subexpressions  and  c o m b i n i ng  l o o p s. 
t h e ir  b o d i e s. 

3.  R e p l a c i ng  procedure  c a l ls  by 
4.  Causing 
are  no 
s t o r a ge  a l l o c a t i on  and  garbage  c o l l e c t i on  at 
r un 

reuse  data  c e l ls  which 
in  o r d er  to  reduce 

the  program  to 
l o n g er  needed, 

t i m e. 

We  have  d e v i s ed  a l g o r i t h ms 

to  p e r f o rm 

these  p r o(cid:173)

these  a l g o r i t h ms  as 

( s e c t i on  7  g i v es  an  example  of 

These  a l g o r i t h ms  a re  a p p l i c a b le 

cesses  on  programs  and  implemented 
POP-2  programs 
u s e ). 
of  domains  and  r e q u i re  o n ly  a  c o l l e c t i on  of 
s p e c i f y i ng  p o t e n t i a l ly  u s e f ul  e q u i v a l e n c es 
p a r t i c u l ar  domain. 
o r i g i n al  example 
can  reproduce  a u t o m a t i c a l ly  a 
p o r a t ed 
s e ts  domain. 

the  o r i g i n al  h a n d w r i t t en  programs 

(programs  about 

l ot  of 

in 

f i n i te  s e t s ),  and  we 
i n c o r-
the 

t r i o ks 
f or 

the 

t h e ir 
to  a  v a r i e ty 

r u l es 
f or  a 

We  have  t r i ed  our  programs  on  our 

The  o v e r a ll  system  u s i ng  processes  1 

to  4 

t a k es 

i n p ut  programs 

in  a  n o n - i m p e r a t i ve 

as 
r e c u r s i ve  d e f i n i t i o ns  and  c o n v e r ts 
mediate  s t a g e s, 
i n to  an  i m p e r a t i ve 
i m p e r a t i ve 
r e c u r s i ve  d e f i n i t i o ns  and  p e r m i ts  assignment 
ponents  of  d a ta  s t r u c t u r e s. 

i n t e r(cid:173)
T h is 
language  uses  w h i le  statements  as  w e ll  as 
to  com(cid:173)

them,  v ia 
language. 

language  of 

In  o r d er 

the  system 
must  use  p r o p e r t i es  such  as  a s s o c i a t i v i ty  or  commutat-
i v i ty 

to  produce  e f f i c i e nt  programs 

to  be  p e r f o r m e d. 

the  o p e r a t i o ns 

f or 
The  p r i n c i p le 

t e c h n i q u es  used  a re 

( i)  m a t c h i n g, 

the 

form  of 
to  d e t e ct  common 

the 

to  d e t e ct 

( i i)  m a t c h i ng 

f u n c t i o n al  symbols,  u s i ng 

f u n c t i o n al  a b s t r a c t i on 

i n v o l v i ng 
a  r e c u r s i ve  d e f i n i t i o n, 
s u b e x p r e s s i o ns  and  compound  o p e r a t i o ns 
occurrence  of  s e v e r al 
a l g e b r a ic  e q u i v a l e n c e s, 
e x t r a ct  meanings 
t e n t a t i v e ly  c o n s t r u c t ed  sequence  of 
duces 
p r o v i ng  t e c h n i q u es  a re  u s e d,  and 
q u i te 
e f f i c i e n t l y. 

the  r e q u i r ed  r e s u l t. 

theorem 
t he  programs  r un 
f a a t,  even  though  we  have  n ot  x r k ed  to  code 

f r om  programs  and  check 

( i i i)  symbolic 

No  e l a b o r a te 

i n v o l v i ng 

r u n n i ng 

t h at  a 

to 

i n s t r u c t i o ns  p r o(cid:173)

them 

2.. 

R e c u r s i on  Removal 

In 

t h is  s t a ge 

t he  system  a t t e m p ts 
to  a  s i n g le 

to  o o n v e rt 
t he 
i t e r a t i ve  p r o(cid:173)

in 

s et  of  r e c u r s i on  e q u a t i o ns 
gram 
p a r t i c u l ar  a t t e n t i on 
o p e r a t i o ns m a k i ng up 

the  same  o p e r a t i o n s. 
is  p a id 
t he  r e c u r s i on  e q u a t i o n s. 

D u r i ng  t h is  process 
the  semantics  of 

the 
T h is 

to 

process  is  generally  applicable; 
required  is  the  set  of  recursion  equations  and  a  table 
laws  f or  the  operations  used. 
of  rules  giving  algebraic 

the  only  input 

There  has  been  considerable  t h e o r e t i c al  invest­
i g a t i on  i n to  how  to  translate  recursive  achemas  i n to 
equivalent  i t e r a t i ve  achemas  e.g.  Strong  ,  Garland  and 
Luckham  ,  although  as  f ar  as  we  know  only  the  BBN  LISP 
compiler  makes  use  of  any  of  these  ideas,  and  t h is 
only  f or  simple  recursions* 
These  studies  apply  to 
translations  of  a  schema  which  preserves  i ts  effect 
f or  a ll  interpretations  of  the  p r i m i t i v e s. 
Our  pro­
gram  uses  translations  which  preserve  the  e f f e ct  of  a 
schema  only  f or  a  class  of  i n t e r p r e t a t i o ns  in  which 
the  p r i m i t i v es  obey  a  given  set  of  algebraic  laws;  we 
follow  Cooper  who  gave  examples  of  such  t r a n s l a t i o n s. 
We  are  only  interested  in  translations  which  w i ll 
improve  e f f i c i e n c y. 
schemas  to  maintain  equivalence  under  a ll  i n t e r­
pretations  seem  to  be  too  weak  f or  practical  purposes. 
The  translations  that  we  achieve  are  of  two  types 
( i)  where  the  computation  sequence  of  the 

The  results  f or  translations  of 

r e s u l t i ng  i t e r a t i ve  program  is  a  rearrangement  of  the 
computation  sequence  of  the  recursive  program  but  con­
tains  the  same  number  of  steps. 
In  these  cases  we 
save  time  and  storage  overheads  associated  w i th  the 
stacking  mechanisms  ( o f. 

f a c t o r i al  function  below) 

Cii)  where  the  tree grown  by  the  recursive  c a l ls 

contains  redundancies  because  the  same  values  are  c a l­
culated  at  separate  nodes. 
Our  system  may  produce  an 
i t e r a t i ve  program  whose  computation  sequence  is  shorte* 
as  w e ll  as  having  fewer  overheads  ( c f. 
function  below). 

the  Fibonacci 

Our  system  f or  recursion  removal  consists  of  four 

p a r t s: 

( i)  A  set  of  t r a n s l a t i on  rules. 

Each  rule  has 
(a)  a  recursive  schema  over  c e r t a in  p r i m i t i v es  (b)  an 
i t e r a t i ve  schema  over  these  p r i m i t i v es  and  (c)  a  set 
of  equations  over  the  p r i m i t i v es  {and  possibly  some 
extra  r e s t r i c t i o n s)  which, 
if  s a t i s f i e d,  ensure  that 
the  i t e r a t i ve  schema  produces  the  same  result  as  the 
recursive  one. 

( i i)  A  matching  algorithm. 

This  determines 
whether  a  set  of  equations  is  an  instance  of  the 
recursive  schema  in  one  of  the  rules,  and  if  so  finds 
the  s u b s t i t u t i o n, 

( i i i)  A  simple  equality-based  theorem  prover. 

This  seeks  to  prove  that  a  substitution  is  l e g i t i m a t e, 
i . e. 
s a t i s f i e d. 

that  the  equations  associated  w i th  the  rule  are 

( i v)  A  control  program. 

This  f i r st  p a r t i t i o ns 

the  smallest  d i s j o i nt  subsets 

the  input  equations  i n to 
such  that  if  the  equation  for  f  involves  a  c a ll  of  g 
and  vice  versa  then  they  are  in  the  same  subset. 
Then, 
it  t r i es  to  f i nd  a 
t r a n s l a t i on  rule  which  applies  to  that  subset,  using 
the  matohing  algorithm  and  the  theorem  prover,  and 
effects 
one. 

f or  each  subset  separately, 

the  t r a n s l a t i on 

finds 

to  i t e r a t i ve 

form  if  it 

finds  a  s u b s t i t u t i on  which 

The  matching  algorithm  is  a  second  order  one, 
takes  p r i m i t i ve 

that  it 
constants  to  expressions  and  also  p r i m i t i ve  functions 
to  functions  gr  lambda  expressions. 
It  is  described 
in  Darlington  .  It  was  coded  f or  l u c i d i t y,  not  speed. 
Consider  f or  example 
Recursion  schema 

t h is  t r a n s l a t i on  rule 

in 

f ( x)  = 

/a  ->  b 
1  no_t  a  ->  h ( d , f ( e )) 

480 

eliminating  redundant  computation  w i th  code  i n t r o­
duction  (Stages  2  and  3 ),  and  destructive  l i st  pro-
ceasing  (Stage  4 ). 

The  system  can  be  applied  to  a  new  domain  of 

just  by  g i v i ng  it  new  rules  and  d e f i n i t i o n s. 

diacourse 
The  table  of  recursive  schemas  and  i t e r a t i ve  equiv­
alents  and  the  table  of  i t e r a t i ve  compounds  are 
independent  of  domain; 
To  apply  the  system  to  the  f i n i te  sets  domain,  so  that 
it 
ations  (conseet,  choose,  nullget  e t c .) 
l i st  processing  programs  or  to  b it  s t r i ng  processing 
programs,  we  have  provided  the  f o l l o w i n g. 

translates  recursion  equations 

they  may  of  course  be  extended 

in  basic  set  oper-

to  destructive 

( i)  Equations  about  the  basic  set  operations, 

conmutativity  etc.  (used  in  Stages  1  and  2) 

( i i)  Procedure  bodies  to  implement  the  basic  set 

operations  by  l i st  operations  (used  in  Stage  ?) 

( i i *) 

as  ( i i) 

f or  b it  strings  instead  of  l i s t s. 

For  the  f i n i te  set  application  the  system  has  a 
fetf  extra  t r i c ks  b u i lt  i n to  it  as  program.  We  would 
l i ke  to  express  these  by  rules  or  tables. 

The  idea  of  symbolic  execution  of  parts  of  a 

program  has  proved  f r u i t f ul  and  we  would  l i ke  to 
explore  f u r t h er  applications  f or  i t. 
been  used  at  Edinburgh  by  Burstall  and  Topor 
Boyer  and  Moore 
techniques  seem  to  go  beyond  those  used  in  current  14 
compilers  (see  f or  example  Sheridan 
; 
Hopgood 

,  page  74  gives  further  references). 

Our  expression  optimising 

,  Roh1  and  Lin 

It  has  also 

and 

. 

484 

Ph.D. 

thesis. 

(1967). 

(7)  Cooper,  D.C.  The  equivalence  of  certain  comput­
ations.  Computer  Journal.  Vol.  9.  No.  1.  May, 
45-52.  (1966). 
(a)  Darlington,  J.  A  semantic  approach  to  automatic 
program  improvement* 
Department  of 
Machine  I n t e l l i g e n c e,  University  of  Edinburgh.  (1972). 
(9)  Ernst,  G.V.  and  Newell,  A.  Generality  and  SPS. 
Carnegie  I n s t i t u te  of  Technology,  Pittsburgh, 
Pennsylvania. 
(10)  Simon,  H.A.  The  heuristic  compiler, 
Representation  and  Meaning  (eds.  H.A.  Simon  and 
L.  Siklossy)  Prentioe  H a l l,  New  Jersey.  (1972). 
(11)  B u r s t a l l,  R.M.  and  Topor,  R.W.  Private 
communication.  (1972)♦ 
(12)  Boyer,  R.S.  and  Moore,  J.S.  Proving  theorems 
about  LISP  functions.  Memo  60,  Department  of 
Computational  Logic,  University  of  Edinburgh. 
(15)  Sheridan,  P.B.  The  arffiimetic  t r a n s l a t o r-
compiler  of  the  IBM  Fortran  automatic  coding  system. 
C.A.C.M..  V o l.  2.  No.  2.  9.  (1959). 
(14)  Rohl,  J.S.  and  L i n,  J.A.  A  note  or.  compiling 
arithmetic  expressions. 
No.  ±,  February,  15-14.  (1972). 
(15)  Hopgood,  F.R.A,  Compiling  techniques. 
Mnnographe.  Macdonald:  London  and  American 
Elsevier  I n c:  New  York.  (1969). 

Computer  Journal.  V o l.  15. 

in 

(1973). 

Computer 

485 

