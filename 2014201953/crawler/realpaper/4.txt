Building the Semantic Web Tower from RDF Straw

Peter F. Patel-Schneider

Bell Labs Research

600 Mountain Ave, Murray Hill, NJ 07974, U. S. A.

pfps@research.bell-labs.com

Abstract

A same-syntax extension of RDF to ﬁrst-order logic
results in a collapse of the model theory due to log-
ical paradoxes resulting from diagonalization. RDF
is thus the wrong material for building the Semantic
Web tower.

1 The Semantic Web

The Semantic Web is an extension of the current web
in which information is given well-deﬁned meaning,
better enabling computers and people to work in co-
operation. [Berners-Lee et al., 2001]

Thus the goals of the Semantic Web are very similar to the
goals of Knowledge Representation—to provide means for
representing information in a way that can be processed by
machines.

The base language of the Semantic Web is RDF [Manola
and Miller, 2004], a simple representation language based on
a graph structure.

The Semantic Web provides a common framework
that allows data to be shared and reused across
application, enterprise, and community boundaries.
[. . . ] It is based on the Resource Description Frame-
work (RDF), which integrates a variety of applica-
tions using XML for syntax and URIs for naming.
[http://www.w3.org/2001/sw/]

RDF is based on labelled graphs—an RDF knowledge base
is (roughly) a graph where some of the nodes have labels (in
the form of URI references and literal data) and the edges
have labels (which are also URI references). Node labels are
unique, i.e., a URI reference can be the label of at most one
node.

The normative surface syntax for RDF is XML. This syn-
tax is called RDF/XML [Dave Beckett, 2004]. There are
other surface syntaxes for RDF, including N-triples [Jan
Grant and Dave Beckett, 2004]. What counts in RDF is the
graph that is conveyed, and not any other aspect of the surface
syntax.

RDF, however, is more than just a graph language. It is ac-
tually a logic, with a model theoretic semantics and an entail-
ment relationship. The details of all this have been speciﬁed
in an W3C Recommendation [Hayes, 2004]. In essence, an

RDF graph can be read as a collection of facts correspond-
ing to the edges in the graph (which are generally referred
to as triples) where an edge with label R (the property) from
node n1 (the subject) to node n2 (the object) corresponds to
the fact R(n1 ;n2).
If n1 (n2) has a label then it is treated
as a constant and its label is the name of the constant, if n1
(n2) doesn’t have a label then it is treated as an existentially
quantiﬁed variable with some arbitrary name. The model the-
ory for RDF is slightly non-standard, to provide an integrated
meaning for edge labels that are also node labels.

So in RDF the only way of providing information is via
triples (graph edges). These triples are often written infor-
mally in a form very similar to N-triples. An edge with label
R from a node labelled with the URI reference A to node la-
belled with the URI reference B is written as

A R B .

As URI references can be very long, names of the form N:L
are very often used where the URI reference is constructed
by concatenating the expansion of N to L. (The expansion
is generally speciﬁed informally or left unspeciﬁed.) Nodes
without labels are given “local tags” of the form :l. These
tags are not URI references or constant names; they instead
correspond to existentially quantiﬁed variables.

Because RDF has only triples, there is no way of provid-
ing syntactic constructs beyond what is speciﬁed above (i.e.,
binary facts, implicit conjunction, and existential quantiﬁca-
tion). Any other syntactic constructs have to be encoded as
triples and their special meaning conveyed by stating seman-
tic conditions in the model theory.

RDF has only a few of these semantic conditions. There is
a particular property, rdf:type, which is considered to be the
typing construct, i.e., the triple

A rdf:type B .

is interpreted as A has type B (or A belongs to the class B).
There is a semantic condition that any name used as an edge
label, i.e., as a property, must have type rdf:Property.

RDF is thus a very simple representation language. How-
ever, triples are a very powerful construct in that any ground
or existentially quantiﬁed atomic fact can be encoded in RDF
triples by by using a new unnamed node with triples that link
it to each of its arguments. This simple trick has been used in
many other knowledge representation formalisms.

2 Extending the Semantic Web
The power of triples has given rise to a vision that RDF
should be the universal language for the Semantic Web. This
means that the syntax of all Semantic Web languages should
be (RDF) triples and their meaning should be speciﬁed as se-
mantic conditions that add to the RDF model theory. (This is
often referred to as a same-syntax extension of RDF.)

This process was successfully carried out with RDF
Schema [Dan Brinkley and R. V. Guha, 2004], an extension
to RDF that provides simple vocabulary structuring facilities.
RDF Schema interprets nodes labelled with particular URI
references as providing these vocabulary structuring facili-
In particular, rdfs:Class is interpreted as the type of
ties.
all types, so that if something is used as a type its types must
include the interpretation of rdfs:Class (and objects of type
rdfs:Class are called classes); and rdfs:subClassOf is in-
terpreted as requiring a subtyping relationship between its ar-
guments. These interpretations are provided by appropriate
semantic conditions that extend the RDF model theory to the
RDF Schema model theory [Hayes, 2004].

Problems ﬁrst arose in this vision when the Seman-
tic Web was extended to include an ontology language.
The charter for the group charged with doing this ex-
tension included the requirement that the language “will
be designed for maximum compatibility with XML and
RDF language conventions” [http://www.w3.org/2002/11/
swv2/charters/WebOntologyCharter]. This was interpreted
for the working group as requiring that the resultant language
be a same-syntax extension of RDF.

After considerable work, and some compromises, the re-
sultant language, OWL [Dean et al., 2004], was ﬁnally spec-
iﬁed as a same-syntax extension of RDF [Patel-Schneider et
al., 2004]. Because the only syntax allowed is triples, com-
plex OWL constructs (such as Description Logic [Baader
et al., 2003] restrictions) have to be encoded as a num-
ber of triples. For example, the Description Logic restric-
tion that represents everything whose friends are lawyers
(8ex:friend:ex:lawyer) is encoded as the triples

:x rdf:type owl:Restriction .
:x owl:onProperty ex:friend .
:x owl:allValuesFrom ex:lawyer .

Because all triples are facts, entailment would not work cor-
rectly in OWL unless OWL interpretations required that there
be facts corresponding to every possible piece of complex
OWL syntax. (These requirements are often called compre-
hension principles.) Otherwise, it would not be the case
that ex:John belonging to 8ex:friend:ex:lawyer entailed
ex:John belonging to 8ex:friend:(ex:lawyer t ex:doctor),
the restriction that represents everything that whose friends
are lawyers or doctors. (Why? Because there might not be
enough facts to encode the union of lawyers and doctors.)

The success of RDF Schema and OWL as same-syntax ex-
tensions of RDF has lead to several calls to make another ex-
tension of the Semantic Web in a similar style to a ﬁrst-order
logic language.

What do I mean here by a “similar style”? Well, “style” is
in the eye of the beholder, but some ground rules can be laid
down. First, the syntactic constructs of the extension have to

be encoded as RDF triples. This means that, for example, en-
coding ﬁrst order sentences as strings or Goedel numbers is
not permitted. Second, the extension has to give meaning to
every RDF graph. This means that the extension can’t iden-
tify a subset of RDF graphs (such as tree-like RDF graphs) as
well-behaved, and only provide meaning for these graphs.

What then would an “RDF Logic” look like? It would pro-
vide enough constructs to nicely provide facilities for all of
ﬁrst-order logic (including predicates, constants, variables,
conjunction, disjunction, negation, quantiﬁcation, equality,
functions, etc.). Its entailment relationship would, when re-
stricted to the constructs that are used to provide the facilities
of ﬁrst-order logic, mirror entailment in ﬁrst-order logic.

A language suitable for this purpose is binary predicate
calculus with equality.
(Recall that predicate calculus is
function-free ﬁrst-order logic without function symbols and
equality [Barr and Feigenbaum, 1981, Volume 1, p. 163].)
As indicated above, binary predicates can be used to encode
predicates of arbitrary arity, also equality can be used to en-
code functions thus obtaining all the facilities of ﬁrst-order
logic.

3 RDF Logic
Our task is thus to design a same-syntax extension of RDF to
binary predicate calculus with equality. We are deﬁning “log-
ical” interpretations, special RDF interpretations that provide
a mechanism for logical constructs. We both add some new
vocabulary and some new semantic conditions, in the same
style as used in the RDF model theory [Hayes, 2004].

3.1 Equality
Equality is the easiest part of our task. All we need to do is to
“anoint” a particular URI reference as the equality predicate
by providing its semantic conditions. As OWL already has
a notion of equality, we will use the URI reference that it
uses for this purpose, which we will write, using the standard
abbreviation, as owl:sameAs.

The semantic condition for equality is
Equality Condition:
hx;yi 2 IEXT(I (owl:sameAs) iff x = y

This condition says that in any logical interpretation two do-
main elements are related by the relationship that is the prop-
erty interpretation (I followed by IEXT)1 of owl:sameAs
precisely if they are the same.

3.2 Encoding Formulae
Because of the need to use only RDF syntax we have to have
an encoding facility for predicate calculus formulae. There
are many possible schemes to do so, but let’s pick one that

1Here we see the slightly unusual nature of the RDF semantics.
In a standard semantics for ﬁrst-order logic we would go directly
from the syntactic token owl:sameAs to its property interpretation.
Here, instead, there is a preliminary mapping to an object in the
domain of discourse (I ) followed by a mapping to the property in-
terpretation (IEXT). This means that properties are objects of the
domain of discourse.

uses RDF as much as possible.2 As in OWL, we are also
going to need comprehension principles so that the formulae
exist in all interpretations, so we might as well introduce them
along with the syntax encoding.

We will use lx:Formula as the class of formulae and
lx:Atomic as the class of atomic formulae. We can’t just use
RDF triples directly as atomic formulae because these formu-
lae might not be true and they might have variables in them.

We require that atomic formulae be formulae, i.e.,

Atomic Formulae Condition:
ICEXT(I (lx:Atomic)) (cid:18) ICEXT(I (lx:Formula))

We are here using some terminology from the RDF Schema
semantic conditions. ICEXT(x), the class extension of x, is
deﬁned as those domain elements that have x as one of their
types.

lx:subject,

We will use lx:predicate,

lx:object, and
lx:subjectv and lx:objectv to construct atomic formulae. In
our syntax anything can be a variable, so we need to distin-
guish when something is being used as a variable or not and
thus we need two variants of the subject and object links. We
do not allow predicates to be variables, i.e., our logic is syn-
tactically ﬁrst-order, not higher-order.

Our ﬁrst comprehension principles are concerned with
atomic formulae, requiring that all atomic formulae exist in
all logical interpretations. There are four different compre-
hension principles corresponding to the different ways vari-
ables can be used in atomic formulae.

Atomic Formulae Comprehension Principles:
8r 2 IP 8x;y 2 IR3

9 f1 2 IR f1 2 ICEXT(I (lx:Atomic)) &

h f1 ;xi 2 IEXT(I (lx:subject)) &
h f1 ;ri 2 IEXT(I (lx:predicate)) &
h f1 ;yi 2 IEXT(I (lx:object));
9 f2 2 IR f2 2 ICEXT(I (lx:Atomic)) &

h f2 ;xi 2 IEXT(I (lx:subjectv)) &
h f2 ;ri 2 IEXT(I (lx:predicate)) &
h f2 ;yi 2 IEXT(I (lx:object));
9 f3 2 IR f3 2 ICEXT(I (lx:Atomic)) &

h f3 ;xi 2 IEXT(I (lx:subject)) &
h f3 ;ri 2 IEXT(I (lx:predicate)) &
h f3 ;yi 2 IEXT(I (lx:objectv));
9 f4 2 IR f4 2 ICEXT(I (lx:Atomic)) &

h f4 ;xi 2 IEXT(I (lx:subjectv)) &
h f4 ;ri 2 IEXT(I (lx:predicate)) &
h f4 ;yi 2 IEXT(I (lx:objectv)).

We will use a limited but complete set of connec-
tives to construct composite formulae, so lx:Negation,
lx:Conjunction, and lx:Exists are our only classes of com-
posite formulae. We will use lx:left and lx:right as our struc-
tural connectives for all composite formulae.

We require that composite formulae be formulae, i.e.,

2It really doesn’t matter which one as long as formulae can be

“manipulated”within the formalism itself.
3IP is the set of all RDF properties.

domain elements, including properties.

IR is the set of all RDF

Composite Formulae Conditions:
ICEXT(I (lx:Negation)) (cid:18) ICEXT(I (lx:Formula))
ICEXT(I (lx:Conjunction)) (cid:18) ICEXT(I (lx:Formula))
ICEXT(I (lx:Exists)) (cid:18) ICEXT(I (lx:Formula))

We also need the composite formulae to exist.

Negation Comprehension Principle:
8 f 2 ICEXT(I (lx:Formula))
9n 2 ICEXT(I (lx:Negation))
hn; f i 2 IEXT(I (lx:left))
Conjunction Comprehension Principle:
8 f ;g 2 ICEXT(I (lx:Formula))
9 j 2 ICEXT(I (lx:Conjunction))
h j; f i 2 IEXT(I (lx:left)) & h j;gi 2 IEXT(I (lx:right))
Quantiﬁcation Comprehension Principle:
8 f 2 ICEXT(I (lx:Formula)); 8v 2 IR
9q 2 ICEXT(I (lx:Exists))
hq;vi 2 IEXT(I (lx:left)) & hq; f i 2 IEXT(I (lx:right))
We have now guaranteed that all ﬁnite non-circular for-
mulae exist in all interpretations. Lots of other formulae or
quasi-formulae might exist as well, of course, but (in keeping
with the permissive nature of RDF) we won’t rule them out.

3.3 Truth
So far all we have is the existence of formulae, not whether
they are true or not. We now need to provide a mechanism
for determining the truth of formulae in an interpretation. We
start out doing this meta-theoretically and only later provide
syntax for determining true formulae.

Because this is a ﬁrst-order logic, i.e., it has variables, we
need some mapping from variables to their values. Our mech-
anism needs to be slightly different from that in standard ﬁrst-
order logic because our variables are just elements of the do-
main of discourse.
Deﬁnition 1 (Variable mapping) Let V be the set of total
mappings from IR to IR.

Now we can provide a meta-theoretic mapping that, given
a formula and a variable mapping, assigns a truth value to the
formula.
Deﬁnition 2 (Formula truth) Let Bool be a total mapping
from IR (cid:2) V into boolean values (true and false) such that
8V 2 V
1. 8 f 2 ICEXT(I (lx:Atomic)); 8x 2 IR; 8r 2 IP; 8y 2 IR

(h f ;xi 2 IEXT(I (lx:subject)) &
h f ;ri 2 IEXT(I (lx:predicate)) &
h f ;yi 2 IEXT(I (lx:object))) !
Bool( f ;V ) = true iff hx;yi 2 IEXT(r)

2. 8 f 2 ICEXT(I (lx:Atomic)); 8x 2 IR; 8r 2 IP; 8y 2 IR

(h f ;xi 2 IEXT(I (lx : subjectv)) &
h f ;ri 2 IEXT(I (lx:predicate)) &
h f ;yi 2 IEXT(I (lx:object))) !
Bool( f ;V ) = true iff hV (x);yi 2 IEXT(r)

3. 8 f 2 ICEXT(I (lx:Atomic)); 8x 2 IR; 8r 2 IP; 8y 2 IR

(h f ;xi 2 IEXT(I (lx:subject)) &
h f ;ri 2 IEXT(I (lx:predicate)) &
h f ;yi 2 IEXT(I (lx:objectv))) !
Bool( f ;V ) = true iff hx;V (y)i 2 IEXT(r)

4. 8 f 2 ICEXT(I (lx:Atomic)); 8x 2 IR; 8r 2 IP; 8y 2 IR

(h f ;xi 2 IEXT(I (lx:subjectv)) &
h f ;ri 2 IEXT(I (lx:predicate)) &
h f ;yi 2 IEXT(I (lx:objectv))) !
Bool( f ;V ) = true iff hV (x);V (y)i 2 IEXT(r)

5. 8 f 2 ICEXT(I (lx:Negation)); 8x 2 IR

h f ;xi 2 IEXT(I (lx:left)) !
Bool( f ;V ) = true iff Bool(x;V ) = false

6. 8 f 2 ICEXT(I (lx:Conjunction)); 8x 2 IR; 8y 2 IR

(h f ;xi 2 IEXT(I (lx:left)) &
h f ;yi 2 IEXT(I (lx:right))) !
Bool( f ;V ) = true iff
(Bool(x;V ) = true& Bool(y;V ) = true)

7. 8 f 2 ICEXT(I (lx:Exists)); 8x 2 IR; 8y 2 IR

(h f ;xi 2 IEXT(I (lx:left)) &
h f ;yi 2 IEXT(I (lx:right))) !
Bool( f ;V ) = true iff 9w 2 IR Bool(y;V 0) = true
where V 0(x) = w, V 0(z) = V (z) otherwise.
Note that this gives truth values to all elements of the
domain of discourse, including non-formulae, but does not
give any speciﬁcation of what these truth values are for non-
formulae. Note also that this does provide conditions on the
truth values for over-speciﬁed formulae like a formula that is
both a conjunction and a disjunction. Finally, note that this is
not a recursive deﬁnition of truth values. Instead we just re-
quire that Boolsatisﬁes the above conditions and rule out in-
terpretations for which no such Boolexists; which amounts to
almost the same thing but with fewer opportunities for para-
doxes. For example, this method will work for inﬁnite and
circular formulae.

Now we need some way of getting at the truth of formu-
lae. We will use lx:True to do so, providing the appropriate
semantic condition so that true formulae belong to its class
extension:

Truth Condition:
f 2 ICEXT(I (lx:True)) iff
9V 2 V Bool( f ;V ) = true
This looks as if ICEXT(I (lx:True)) is deﬁned somehow
after Bool, but this is not really the case, as Bool depends on
ICEXT(I (lx:True)) for formulae that use lx:True.

A logical interpretation is then simply an RDF interpre-
tation that satisﬁes the above semantic conditions, including
having a Bool mapping, and logical entailment is deﬁned in
the obvious way.

3.4 The Result
I claim that this is about as good a version of RDF Logic as
one can get. I would have liked to make the following claim:
Claim 1 For every logical interpretation, L, there is a (stan-
dard) predicate calculus with equality interpretation, P, such
that for every predicate calculus sentence, S, i.e., a predicate
calculus formula with no free variables, for every domain el-
ement, d, in L that corresponds to S (in the obvious way) S is
true in P iff d 2 ICEXT(I (lx:True)).
This could be then used to show a strong correspondence be-
tween RDF Logic and predicate calculus with equality.

Unfortunately, this claim is not true. Ian Horrocks [Hor-
rocks and Patel-Schneider, 2003] has pointed out that there
are sentences whose truth is affected by the unusual nature of
the RDF semantics. (Actually Ian’s observation was done in
the context of SCL (http://www.ihmc.us/users/phayes/CL/),
but SCL has similar semantic features to those of RDF.) For
example, in an RDF interpretation that has only one domain
element, there is only one predicate, no matter what name.

This doesn’t matter much in RDF and RDF Schema be-
cause neither can place conditions on the size of the domain.
However, such conditions can be easily stated in predicate
calculus with equality. For example, the formula

(8x 8y x = y) ! (ex:P(ex:a;ex:a) $ ex:Q(ex:a;ex:a))

is not a theorem of predicate calculus with equality but every
encoding of it is true in every logical interpretation.

So I can only claim that this version of RDF Logic is as
good as any other. Further, I claim that this version of RDF
Logic is as paradox-free as any other.

4 Self-Reference and Diagonalization
Does the above encoding actually work? Well, in a word, no.
It falls prey to one of the (many) paradoxes related to the truth
predicate, ﬁrst noticed by Tarski [Tarski, 1933].

As in OWL, we have only provided comprehension princi-
ples for tree-like formulae. This means we don’t require the
existence of self-referential sentences like the Liar’s sentence
(“I am lying” or “This sentence is false”), which would here
be encoded as

:x rdf:type lx:Negation .
:x lx:left

:x .

If this construction had to exist in every logical interpretation
then there would be no logical interpretations. (Try to deter-
mine whether I ( :x) 2 ICEXT(I (lx:True)).) We have thus
lost something of the free-form ﬂavour of RDF, as some self-
referential sentences are useful and we can’t entail them, but
otherwise our model theory have have easily been shown to
break down.

We have also been careful not to break down on self-
referential sentences if they do occur. For example, if we
had deﬁned Bool in a recursive manner starting with atomic
formulae, then we would have had problems with circular and
inﬁnite formulae.

We have thus been fairly careful not to get hung up on the
obvious problems. However we still have enough power in
our formalism for it to break down. This is actually not a
surprising result—just about any encoding of ﬁrst-order logic
falls prey to the problem, but our minimalist RDF Logic is
weaker in some ways than the standard ﬁrst-order logics in
which this result is usually shown.

What we are going to do next is to show how our encod-
ing breaks down by building a self-referential sentence using
a process of diagonalization. We are proceeding in a some-
what similar fashion as done by Goedel in his diagonalization
lemma.

4.1 Building Up Formulae
Throughout this process we will need to get ahold of compos-
ite syntactic structures. The formulae for this turn out to be

fairly long, so we will introduce some abbreviations. These
are only abbreviations and thus don’t add any power.

First, an abbreviation for a formula that checks for a single

triple.
Deﬁnition 3 Let s, p, and o be URI references, and let sv and
ov be boolean values. Then require(s,sv,p,o,ov) is a formula
that looks like

:r rdf:type lx:Atomic .
:r lx:predicate p .
:r lx:subjectv s .
:r lx:subject s .
:r lx:objectv o .
:r lx:object o .

if sv = true
if sv = false
if ov = true
if ov = false

Next, an abbreviation for a formula that checks for a col-

lection of triples all with the same subject.
Deﬁnition 4 Let s be a URI reference (used for the subject);
let t be a URI reference (used for the type of the subject);
let p1, a1, p2, a2, . . . , pn, an be URI references (used
for predicates and values); let q1, v1, q2, v2,
. . . , qm,
vm be URI references (used for predicates and variables).
Then construct(s;t;p1,a1,. . . ,pn,an;q1,v1,. . . ,qm,vm) is a
formula that is a conjunction of

require(s,true,rdf:type,t,false)
require(s,true,p1,a1,false) . . .
require(s,true,pn,an,false)
require(s,true,q1,v1,true) . . .
require(s,true,qm,vm,true)
This doesn’t actually construct anything, of course. Nei-
ther does it require the existence of anything. However, for
any domain element v such that

v 2 ICEXT(I (t))
hv;I (a1)i 2 IEXT(I (p1)) : : :
hv;I (an)i 2 IEXT(I (pn))
hv;v1i 2 IEXT(I (q1)) : : :
hv;vmi 2 IEXT(I (qm))

then construct(s;t;p1,a1,. . . ,pn,an;q1,v1,. . . ,qm,vm)
is
true under any variable mapping that maps s to v and vi to vi,
1 (cid:20) i (cid:20) m. Note especially that because all the non-circular
formulae exist, from the formula comprehension principles,
therefore any non-circular formula “built” in this way will
exist.

4.2 Diagonalization
Diagonalization of a formula with one free variable is the ap-
plication of that formula to itself, i.e., the diagonalization of
A(x) is A(‘A(x)’), where the quotes are not string quotes, but
instead represent some encoding process. Diagonalization is
part of the process of creating a self-referential structure.
Deﬁnition 5 Let s and g be URI references (used as variable
names) Then diag(s,g) is a formula of the form

:e1 rdf:type lx:Exists .
:e1 lx:left s1 .
:e1 lx:right :e2 .
:e2 rdf:type lx:Exists .
:e2 lx:left s2 .

:e2 lx:right :c1 .
:c1 rdf:type lx:Conjunction .
:c1 lx:left construct(s;lx:Exists;

lx:left,x;lx:right,s1) .

:c1 lx:right c2 .
:c2 rdf:type lx:Conjunction .
:c2 lx:left construct(s1;lx:Conjunction;

;lx:left,s2,lx:right,g) .

:c2 lx:right construct(s2;lx:Atomic;
lx:subjectv,x,
lx:predicate,owl:sameAs;
lx:object,g) .

diag(s,g) is true under a variable mapping V precisely
when there are some domain elements s1 and s2 such that
the variable mapping of s, V (s), is a domain element with
the following characteristics

V (s) 2 ICEXT(I (lx:Exists))
hV (s);I (x)i 2 IEXT(I (lx:left))
hV (s);s1i 2 IEXT(I (lx:right))
s1 2 ICEXT(I (lx:Conjunction))
hs1 ;s2i 2 IEXT(I (lx:left))
hs1 ;V (g)i 2 IEXT(I (lx:right))
s2 2 ICEXT(I (lx:Atomic))
hs2 ;I (x)i 2 IEXT(I (lx:subjectv))
hs2 ;I (owl:sameAs)i 2 IEXT(I (lx:predicate))
hs2 ;V (g)i 2 IEXT(I (lx:object))

Informally, if g is a formula with only x free, which we could
write g(x), then if diag(s;g) then s is the formula g(0g(x)0).

4.3 A Paradoxical Formula
Now consider any logical interpretation. All non-circular ﬁ-
nite formula exist in this interpretation, so, in particular there
is a formula with the following characteristics. (Here I am
being a bit sloppy, using triples instead of a metatheoretical
formulation, but this does not introduce any problems.)

:p1 .

:p rdf:type lx:Exists .
:p lx:left y .
:p lx:right
:p1 rdf:type lx:Conjunction .
:p1 lx:left
:p1 lx:right
:p2 rdf:type lx:Atomic .
:p2 lx:subjectv y .
:p2 lx:predicate owl:sameAs .
:p2 lx:object

:p2 .
:d .

:d .

:d1 .

:d rdf:type lx:Exists .
:d lx:left x .
:d lx:right
:d1 rdf:type lx:Conjunction .
:d1 lx:left diag(x,y) .4
:d1 lx:right
:d2 rdf:type lx:Negation .
:d2 lx:left
:d3 rdf:type lx:Atomic .

:d2 .

:d3 .

4That is,

:d1’s left conjunct is a formula that requires that x be a

diagonalization of y.

:d3 lx:subjectv x .
:d3 lx:predicate rdf:type .
:d3 lx:object lx:True .

Informally this is the formula 9x (x = D) & D where D is

9y diag(y;x) & :True(y).

is

Now what

is the truth value of

:p in
ICEXT(I (lx:True))? Well the truth value of :p is precisely
the truth value of :d under a variable mapping that maps x to
:d, i.e., Bool( :d;x = :d).

i.e.,

:p,

But this is true exactly when there is some diagonalization
of :d whose truth value is f alse and false exactly when every
diagonalization of :d has truth value true. As the diagonal-
ization of :d is a vanilla formula (ﬁnite, non-circular) thus at
least one exists in any interpretation.

But the truth value of any diagonalization of :d is precisely
the truth value of :d under a variable mapping that maps x to
:d, i.e., Bool( :d;x = :d). So if Bool( :d;x = :d) = true
then it must be false, and if Bool( :d;x = :d) = false then it
must be true. Therefore no truth valuation for this formula
can exist.

As a formula of this form exists in every interpretation,
therefore there are no logical interpretations and our exten-
sion breaks down. Nothing in this argument depends on the
details of the encoding and constructions so any extension
falls prey to the same problem as long as it is possible to rep-
resent the diagonalization relationship.

5 Discussion
What happened?

Because the syntax of RDF is so impoverished we had to
write formulae using facts—facts that have to be true every-
where. Then to state that a formula is true we had to use a
truth predicate—no other solution is possible.5 As the resul-
tant logic has sufﬁcient power to specify a form of diagonal-
ization a paradox exists in the logic, resulting in its collapse.

Is is possible to wiggle out of this dilemma?
Not really.
If strings were used for formulae and no string manipula-
tion primitives were available, then there would be no prob-
lem, but I have already argued that such string encodings are
not permissible. In any case, adding string manipulation (i.e.,
concatenation) to the language would bring back the para-
dox. Similar issues rule out using other encodings like Goedel
numbers.
our
so that

per-
If
in KIF
haps
(http://logic.stanford.edu/kif/kif.html),
then it might be
possible to wiggle out. However, our truth predicate forms
the basis of our logic, and thus weakening it weakens our
logic, which I claim is also not permissible.

“predicate” was weakened,
treated itself

truth
it

specially,

as

This also rules out, for example, potential solutions re-
lated to overall incomplete reasoners like the CycL rea-
(http://www.cyc.com/doc/handbook/oe/oe-handbook-
soner

5OWL has a form of truth predicate as well—various OWL prop-
erties, including owl:equivalentClass and rdf:type, play
the role of specialized truth predicates. OWL, however, does not
have the same power as ﬁrst-order logic, and thus might not fall
prey to diagonalization paradoxes.

toc-opencyc.html). It is not that the reasoning process of the
solution is broken. Instead the fundamental model theory of

I see no way out of this dilemma, and so I claim:

Claim 2 A paradox-free same-syntax extension of RDF to
ﬁrst-order logic is not possible.
Note that this is a much stronger claim than
Claim 3 A same-syntax extension of RDF to ﬁrst-order logic
is not desirable.

In conclusion, a puff of philosophical wind is sufﬁcient to
knock over a Semantic Web tower built solely from RDF. A
stronger tower needs better building materials.

References
[Baader et al., 2003] Franz Baader, Diego Calvanese, Deborah L.
McGuinness, Daniele Nardi, and Peter F. Patel-Schneider, edi-
tors. The Description Logic Handbook: Theory, implementation,
and applications. Cambridge University Press, 2003.

[Barr and Feigenbaum, 1981] Avron Barr and Edward A. Feigen-
baum, editors. The Handbook of Artiﬁcial Intelligence. William
Kauffman, Los Altos, California, 1981.

[Berners-Lee et al., 2001] Tim Berners-Lee, James Hendler, and
Ora Lassila. The semantic web. Scientiﬁc American, May 2001.
[Corcoran, 1983] John Corcoran, editor. Logic, Semantics, Meta-
mathematics, papers from 1923 to 1938. Hackett Publishing
Company, Indianapolis, 1983.

[Dan Brinkley and R. V. Guha, 2004] RDF vocabulary description
W3C Recommendation,

language 1.0:
http://www.w3.org/TR/rdf-schema, 2004.

RDF schema.

[Dave Beckett, 2004] RDF/XML syntax speciﬁcation (revised).
http://www.w3.org/TR/rdf-syntax-

W3C Recommendation,
grammar/, 2004.

[Dean et al., 2004] Mike Dean, Guus Schreiber, Sean Bechhofer,
Frank van Harmelen, Jim Hendler, Ian Horrocks, Deborah L.
McGuinness, Peter F. Patel-Schneider, and Lynn Andrea Stein.
OWL web ontology language: Reference. W3C Recommenda-
tion, http://www.w3.org/TR/owl-ref/, 2004.

[Hayes, 2004] Patrick Hayes. RDF semantics. W3C Recommen-

dation, http://www.w3.org/TR/rdf-mt/, 2004.

[Horrocks and Patel-Schneider, 2003] Ian Horrocks and Peter F.
Patel-Schneider. Three theses of knowledge representation in the
semantic web. In The Twelfth International World Wide Web Con-
ference, pages 39–47. ACM Press, May 2003.

[Jan Grant and Dave Beckett, 2004] RDF test cases. W3C Recom-

mendation, http://www.w3.org/TR/rdf-testcases/, 2004.

[Manola and Miller, 2004] Frank Manola and Eric Miller. RDF
primer. W3C Recommendation, http://www.w3.org/TR/rdf-
primer/, 2004.

[Patel-Schneider et al., 2004] Peter F. Patel-Schneider, Patrick
OWL web ontology language:
W3C Recommendation,

Hayes, and Ian Horrocks.
Semantics and abstract syntax.
http://www.w3.org/TR/owl-semantics/, 2004.

[Tarski, 1933] A. Tarski. The concept of truth in the languages
of the deductive sciences [in Polish].
Prace Towarzystwa
Naukowego Warszawskiego, Wydzial III Nauk Matematyczno-
Fizycznych, 34, 1933. Reprinted in Zygmunt 1995, pages 13-
172; expanded English translation in [Corcoran, 1983], pages
152-278.

