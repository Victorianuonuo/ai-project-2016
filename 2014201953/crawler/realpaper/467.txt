A Fast and Simple Algorithm for Bounds Consistency of the 

AllDifferent  Constraint 

Alejandro Lopez-Ortiz1, Claude-Guy Quimper1, John Tromp2, Peter van Beek1 

1 School of Computer Science 

2C WI 

University 

of  Waterloo 

Waterloo, Canada 

P.O. Box 94079, 1090 GB 
Amsterdam, Netherlands 

Abstract 

In  constraint programming one  models  a problem 
by stating constraints on acceptable solutions.  The 
constraint  model  is  then  usually  solved  by  inter(cid:173)
leaving backtracking  search  and  constraint propa(cid:173)
gation. Previous studies have demonstrated that de(cid:173)
signing special  purpose  constraint propagators  for 
commonly  occurring  constraints  can  significantly 
improve the efficiency of a constraint programming 
approach.  In  this paper  we  present  a  fast,  simple 
algorithm  for  bounds  consistency  propagation  of 
the  alldifferent  constraint.  The  algorithm  has  the 
same worst case behavior as the previous best algo(cid:173)
rithm but is much faster in practice.  Using a variety 
of benchmark and random problems, we show that 
our algorithm outperforms existing bounds consis(cid:173)
tency  algorithms  and  also  outperforms—on  prob(cid:173)
lems with an easily identifiable property—state-of-
the-art commercial  implementations of propagators 
for stronger forms of local  consistency. 

Introduction 

1 
Many  interesting  problems  can  be  modeled  and  solved  us(cid:173)
ing constraint programming.  In this approach  one models a 
problem by stating constraints on acceptable solutions, where 
a constraint is simply a relation among several  unknowns or 
variables,  each  taking a value in a given domain.  The con(cid:173)
straint model is then usually solved by interleaving backtrack(cid:173)
ing search and constraint propagation. In constraint propaga(cid:173)
tion the constraints are used to reduce the domains of the vari(cid:173)
ables by ensuring that the values in their domains are locally 
consistent with the constraints. 

Previous studies have  demonstrated that designing special 
purpose constraint propagators for commonly occurring con(cid:173)
straints  can  significantly  improve  the  efficiency  of  a  con(cid:173)
straint programming approach (e.g.,  [Regin,  1994;  Stergiou 
and Walsh,  1999]). In this paper we study constraint propaga(cid:173)
tors  for the alldifferent constraint.  An  alldifferent constraint 
over a set of variables states that the variables must be pair-
wise  different.  The  alldifferent constraint  is  widely  used  in 
practice and because of its importance is offered as a builtin 
constraint in most, if not all, major commercial and research-
based constraint systems. 

Several  constraint propagation algorithms for the alldiffer(cid:173)
ent constraint have been developed,  ranging from weaker to 
stronger forms  of local  consistency  (see  [van  Hoeve,  2001] 
for an excellent survey).  Regin [1994] gives an 0(n2 , 5) algo(cid:173)
rithm  for  domain  consistency  of the  alldifferent  constraint, 
where  n  is  the  number  of  variables,  that  is  based  on  re(cid:173)
lating alldifferent constraints  to  matchings.  Leconte  [1996] 
gives  an  0(n2)  algorithm  for  range  consistency,  a  weaker 
form  of consistency  than  domain  consistency,  that  is  based 
on  identifying  Hall  intervals.  Puget  [1998],  building  upon 
the  work  of Leconte  [1996],  gives  an  O(n  logn)  algorithm 
for bounds consistency, which is in turn a weaker form of lo(cid:173)
cal consistency than range consistency.  Mehlhorn and Thiel 
[2000],  building upon the work of Regin, give an  algorithm 
for bounds consistency  that  is  0(n)  plus the  time  needed  to 
sort the bounds of the domains, and thus has the same worst-
case behavior as Puget's algorithm in the general case. 

In  this  paper  we  present  a  fast  and  simple  algorithm  for 
bounds consistency propagation of the alldifferent constraint. 
The algorithm has the same worst case behavior as the previ(cid:173)
ous best algorithm but is much faster in practice.  Using a vari(cid:173)
ety of benchmark and random problems, we show that our al(cid:173)
gorithm outperforms existing bounds consistency algorithms 
and also  outperforms—on problems  with  an  easily  identifi(cid:173)
able  property—state-of-the-art commercial  implementations 
of propagators for stronger forms of local consistency. 

A  longer version  of the paper containing proofs and addi(cid:173)
tional experimentation is available [Lopez-Ortiz et al., 2003]. 

a finite domain dom 

2  Background 
A constraint satisfaction problem  (CSP)  consists of a  set  of n 
variables, 
of possible 
values for each variable xi{ and a collection of m constraints, 
.  Each  constraint C  is a constraint over some 
set  of variables,  denoted  by  vars{C),  that  specifies  the  al(cid:173)
lowed  combinations  of values  for  the  variables  in  vars(C). 
Given a constraint (7, we use the notation t  C to denote a 
tuple t—an  assignment of a value  to  each  of the variables  in 
vars(C)—that satisfies the constraint C.  We use the notation 
t[x]  to  denote  the  value  assigned  to  variable  x  by  the  tuple 
t.  A  solution  to  a  CSP  is  an  assignment  of a  value  to  each 
variable that satisfies all of the constraints. 

We  assume  in  this  paper that the  domains  are  totally or(cid:173)
dered.  The  minimum  and  maximum  values  in  the  domain 

CONSTRAINTS 

245 

dom(x)  of a  variable  x  are  denoted  by  min(dom(x))  and 
max(dom(x)),  and  the  interval  notation  [a, b]  is  used  as  a 
shorthand for the set of values  {a,a+  1 , . . . b }. 

CSPs  are  usually  solved  by  interleaving  backtracking 
search  and  constraint propagation.  During the backtracking 
search  when a variable is assigned a value, constraint prop(cid:173)
agation  ensures  that  the  values  in  the  domains  of the  unas-
signed variables arc "locally consistent" with the constraints. 

with a'  < a causes the same update.  Thus,  for the purpose of 
updating lower bounds, it suffices  to restrict attention to left-
maximal Hall intervals: those [a, b] for which a is minimal. 
Puget's algorithm first sorts the variables in increasing or(cid:173)
der of max;.  We assume for convenience that max,-  <  maxj, 
for i  <  j.  The algorithm then processes  each  of the variables 
in turn, maintaining a set of counters which count how many 
of the variables  processed  so  far have  a minimum bound of 
at  least  k.  More precisely,  after processing  x,-,  the  counter 
k  denotes  the  cardinality  of the  set  {j  <  i  :  minj,  >  k}. 
ci
The algorithm stores the counters  in a balanced binary tree, 
allowing updates in 0(log n.) time per variable. 

Conceptually, our algorithm is similar to Puget's.  The dif(cid:173)
ference is in the maintenance of the counters.  The key obser(cid:173)
vation is that not all counters are relevant. 

A  CSP  can  be  made  locally  consistent  by  repeatedly  re(cid:173)
moving unsupported values from the domains of its variables. 

is  dominated by 

Capacity 
in the sense that the former 
cannot reach 0 before the latter, and if both reach 0, then the 
Hall  interval  starting  at  k:'  is  not  left-maximal. 
If k  is  not 
equal  to  any  min,-,  then  it  is  always  dominated  by  the next 
greater  min,,  hence  we  need  only  remember  capacities  for 
which  k  equals  some  min,-.  The  critical set  C  is  the  set  of 
such indices of undominated capacities.  This set starts out as 
and becomes smaller over time as variables 
are processed and capacities become dominated.  We denote 
by  Ci  the  critical  set  after processing  x,-.  The  next  lemma 
shows  that  we  can  effectively  test  when  each  particular ca(cid:173)
pacity 

becomes zero or negative. 

Finding  Hall  intervals 

3.1 
Following Leconte  [1996] and Puget [1998], we analyze the 
task in terms of Hall intervals.  An interval /  is a Hall  interval 
if its  size  equals  the  number  of variables  whose  domain  is 
contained in I.  Clearly, any solution must use all the values in 
/ for those variables, making these values unavailable for any 
other variable.  Puget  shows  that  an  algorithm for updating 
lower bounds can also be used to update upper bounds.  The 
lower bound for variable xi- gets updated where  mini  >  b+1, 
whenever a Hall interval  [a, b] with a  <  mini-  <  b  <  max,-
is found.  This condition implies that any Hall interval  [a', b] 

246 

CONSTRAINTS 

This means that differences between adjacent critical capaci(cid:173)
ties remain constant, except in one place:  between capacities 
Vk  and vi  of the ZeroTest Lemma,  where the difference is re(cid:173)
duced by 1. Therefore, testing for a zero or negative capacity 
need only be done at this  vk.  Our linked list data structure is 
designed to perform this operation efficiently.  All dominated 
indices form forests pointing toward the next critical index.  A 
dummy index at the end, which never becomes dominated (3 
larger than the largest max suffices), ensures that every dom(cid:173)
inated index has a critical one to point to.  When a difference 
in capacity,  say between  indices  k\  <  k2,  is reduced  from  1 
to 0,  k2  becomes  dominated.  It must  then point to the  next 
critical  index,  say  k3,  which  instead  of pointing to  k2  must 
now point to A: 1. 

while nb holds the number of unique bounds.  The algorithm 
uses the following arrays: 

•  maxsorted [o . . n-1] :  holds intervals sorted by max. 
•  bounds [0 .  .nb+l]:  sorted array of ruin's and max's. 
• 

t [0 .  . n b + l ]:  holds the  critical  capacity  pointers;  that 
is, t [ i]  points to the predecessor of/  in the bounds list. 
•  d [0 .  .nb+l]  holds the differences between critical ca(cid:173)
pacities;  i.e.,  the difference of capacities between  inter(cid:173)
val  i  and  its predecessor  in  t  viz.  t  [ i ]. 

•  h [ 0.  .nb+l]  holds  the  Hall  interval  pointers;  i.e.,  if 
h [ i] <  i  then  the  half-open  interval  [bounds  [h [i]  ], 
bounds [ i ])  forms a Hall interval, and otherwise holds 
a pointer to the Hall  interval it belongs to.  This Hall in(cid:173)
terval is represented by a tree,  with the root containing 
the value of its right end. 

The  algorithm  uses  two  functions  for  retrieving/updating 
pointer  information,  namely:  pathmax(a,  x)  which  fol(cid:173)
lows the chain x, a [ x ],  a [a [x] ],  ...,  until it stops increas(cid:173)
ing, returning the maximum  found and pathset (a,  x,  y, 
z)  which sets each of the entries a [ x ],  a [a [x] ] 
a [w] 
to z, where w is such that a [w]  equals y. The values minrank 
and maxrank give the index  in array bounds of the min and 
(max-hi)  of an  interval. 

The  algorithm  examines  each  interval  in  turn,  sorted  by 
their  upper  bounds.  It  then  updates  capacities  accordingly, 
followed by  path compression  operations on the  underlying 
data structures.  At  each  step  we  test  for failure (a  negative 
capacity) or a newly discovered Hall interval (a zero capacity, 

3.2  Updating  bounds 
Finding Hall  intervals  is  only  part of the  solution.  We  also 
need to efficiently update the bounds. For this we use another 
linked  list  structure,  in  which  indices  inside a  Hall  interval 
point to the  location representing its upper end,  while those 
outside  of any  Hall  interval  point  left  toward  the  next  such 
index.  We  store  the  list  of bounds in  a  sorted  array  named 
bounds.  Intervals  are  hereafter  numbered  by their order of 
occurrence  in  this array.  The  linked  list  is  implemented  as 
an  array  t  using  indices  to  the  bounds  as  pointers.  The 
differences  between  critical  capacities  appearing  above  the 
arrows in Example 2 are stored in an array d.  The algorithm 
shown in  Figure  1  solves one half of the problem:  updating 
all  lower bounds.  Variable  n holds  the number of intervals, 

CONSTRAINTS 

247 

which  indicates that the width of the  interval is equal  to the 
number of variables whose domain falls within that interval). 

Example 3 Table 1 shows a trace of the algorithm for updat(cid:173)
ing lower bounds (Figure  1)  when  applied to the CSP  from 
Examples  1  &  2.  Each  row represents an  iteration where a 
variable is processed.  In the first graph the nodes are the el(cid:173)
ements of the vector bounds.  The arrows illustrate the con(cid:173)
tent of the vector t  and  the numbers over them  are given by 
the vector d.  The nodes of the second graph are also the val(cid:173)
ues found in vector bounds but the arrows are given by the 
vector h that keeps track of the Hall  intervals. 

latter.  Consider the right-running chains in array t.  Lemma 3 
shows that all but a logarithmic number of indices see a rise 
in value as a result of a path compression operation. 

This implies that a linear number of path compressions take at 
most 0(n log n)  steps.  The  situation with array  h  is  similar. 
It follows then that the algorithm runs in time 0(n log n). 

The  theoretical  performance  of the  algorithm can  be  im(cid:173)
proved further by observing that the union operations are al(cid:173)
ways performed over sets whose bounds appear consecutively 
in a left to right ordering. This is known as the interval union-
find problem.  Gabow  and  Tarjan  [1985]  gave  a  linear  time 
solution  in  a  RAM  computer  provided  that  the  keys  fit  in 
a  single word  of memory.  This  is  a  reasonable  assumption 
in current  architectures with  32  or 64 bit words.  Using this 
technique we  obtain a  linear time  algorithm  which  matches 
the theoretical performance of Mehlhorn and Thiel's solution. 
We  implemented  this  algorithm  on  the  Intel  x386  architec(cid:173)
ture using direct  assembly  code  calls  from  a  C++  program. 
However,  in  practice,  the  0(n log  n)  solution  outperformed 
both Mehlhorn and Thiel's algorithm and the algorithm using 
the interval union find data structure (see [Lopez-Ortiz et al., 
2003] for additional discussion). 

4  Experimental results 
We implemented our new bounds consistency algorithm (de(cid:173)
noted hereafter as BC) and Mehlhorn and Thiel's bounds con(cid:173)
sistency algorithm (denoted MT) using the 1LOG Solver C++ 
library, Version 4.2  [ILOG  S.  A.,  1998]1.  The ILOG  Solver 
already provides implementations of Leconte's range consis(cid:173)
tency  algorithm  (denoted  RC),  Regin's  domain  consistency 
algorithm  (denoted  DC),  and  an  algorithm  that  simply  re(cid:173)
moves the value of an instantiated variable from the domains 
of the remaining variables (denoted as VC, for value consis(cid:173)
tency).  To compare against Puget's bounds consistency algo(cid:173)
rithm, we use the runtime results reported by Puget [ 1998] for 
RC and our own runtime results for RC as calibration points. 
We believe this is valid as Puget also uses a similar vintage of 
ILOG Solver and when we compared, we were careful to use 
the same constraint models and variable orderings. 

We  compared  the  algorithms  experimentally  on  various 
benchmark and random problems.  All the experiments were 
run on a 300 MHz Pentium II  with 228 MB of main memory. 
Each  reported runtime  is  the  average  of  10  runs  except  for 
random problems where  100 runs were performed. 

Table 1: Trace of the example. 

Time  complexity 

3.3 
The running time of the algorithm is dominated by the various 
calls to pathmax and p a t h s e t.  Since each chain followed 
in a pathmax call  is also followed in a subsequent p a t h-
s et call, we can restrict our analysis to the time spent in the 

248 

CONSTRAINTS 

Figure  1:  Time (sec.)  to first solution for Pathological prob(cid:173)
lems. 

BC propagator offers a clear performance improvement over 
propagators for stronger forms of local consistency (see  Fig(cid:173)
ure  1).  Comparing against the best previous bounds consis(cid:173)
tency algorithms, our BC propagator is approx. 2 times faster 
than MT and,  using RC as our calibration point to compare 
against the experimental results reported by Puget [1998], ap(cid:173)
prox. 5 times faster than Puget's algorithm. 

We next consider the Golomb ruler problem (see [Gent and 
Walsh,  1999], Problem 6).  Following Smith et al. [2000] we 
modeled the problem using auxiliary variables (their "ternary 
and all-different model") and we used the lexicographic vari(cid:173)
able ordering.  This appears  to be the same model  as Puget 
[1998] uses in his experiments as the number of fails for each 
problem  and  each  propagator are  the  same.  Here,  our  BC 
propagator  is  approximately  1.6  times  faster  than  the  next 
fastest propagator used in our experiments (see Table 2) and, 
again  using  RC  as  our  calibration  point,  approximately  1.5 
times faster than Puget's bounds consistency algorithm. 

Table 2:  Time (sec.) to optimal solution for Golomb rulers. 

We  next  consider  instruction  scheduling  problems  for 
single-issue  processors  with  arbitrary  latencies. 
Instruction 
scheduling  is  one  of the  most  important  steps  for  improv(cid:173)
ing the performance of object code produced by  a compiler. 
Briefly, in the model for these problems there are n variables, 
one for each  instruction to be scheduled,  latency constraints 
of the form xi, <  xj  + d where d is some small  integer value, 
a  single  alldifferent  constraint  over  all  n  variables,  and  re(cid:173)
dundant  constraints  called  "distance  constraints" In  our  ex(cid:173)
periments, we used fifteen representative hard problems that 
were taken from the SPEC95 floating point, SPEC2000 float(cid:173)
ing point and MediaBench benchmarks.  The minimum  do-

Table  3:  Time  (sec.) 
to  optimal  solution  for  instruction 
scheduling problems.  A blank entry means the problem was 
not solved within a 10 minute time bound. 

main  size  variable ordering heuristic was used in  the search 
(see Table 3). On these problem too, our BC propagator offers 
a clear performance improvement over the other propagators. 
To  systematically  study  the  scaling  behavior  of the  algo(cid:173)
rithms,  we  next  consider  random  problems.  The  problems 
consisted  of a  single  alldifferent  constraint  over  n  variables 
and each variable  xi  had its initial domain set to [a.b], where 
a and b, a < 6, were chosen uniformly at random from [1, n]. 
The  problems  were  solved  using  the  lexicographic variable 
ordering.  In these "pure" problems nearly all  of the run-time 
is due to the alldifferent propagators, and one can clearly see 
the  quadratic  behavior  of the  RC  and  DC  propagators  and 
the nearly  linear incremental  behavior of the BC  propagator 
(see Figure 2).  On these problems, VC (not shown) could not 
solve even the smallest problems {n = 100) within a 10 minute 
time bound and MT (also not shown) was 2.5 - 3 times slower 
than our BC propagator. 

Having  demonstrated  the  practicality  of  our  algorithm, 
we  next  study  the  limits  of  its  applicability.  Schulte  and 
Stuckey  [2001]  investigate  cases  where  it  can  be  proven  a 
priori that maintaining bounds consistency during the search, 
rather than a  stronger form of local  consistency such as do(cid:173)
main  consistency,  does  not  increase  the  size  of the  search 
space.  The  Golomb ruler problem  is one  such  example.  In 
general, of course, this is not the case and using bounds con(cid:173)
sistency can exponentially increase the search space. 

To systematically study the range of applicability of the al(cid:173)
gorithms,  we  next  consider  random  problems  with  holes  in 
the  domains  of the  variables.  The  problems  consisted  of a 
single alldifferent constraint over n  variables.  The domain of 
each  variable was set in two steps.  First,  the  initial domain 
of the variable was set to [a, 6], where a  and b, a  <  b, were 
chosen uniformly at random from [1, n]. Second, each of the 
values a - | - 1 , . . ., b— 1 is removed from the domain with some 
given probability p. The resulting problems were then solved 
using both the  lexicographic and  the minimum domain size 
variable ordering heuristics.  These  problems are  trivial  for 

CONSTRAINTS 

249 

Figure 2:  Time  (sec.)  to  first  solution or to detect  inconsis(cid:173)
tency for random problems. 

domain consistency, but not so for bounds and range consis(cid:173)
tency. We recorded the percentage that were not solved by BC 
and RC within a fixed time bound (see Figure 3). If there are 
no holes  in  the  domains  of the variables,  then  bounds  con(cid:173)
sistency  is  equivalent to range  and  domain  consistency.  As 
the  number  of holes  increases,  the  performance  of  bounds 
and  range  consistency  decreases  and  they  become  less  ap(cid:173)
propriate  choices.  The  range  of applicability of BC  can  be 
extended somewhat  following a suggestion by  Puget  [1998] 
of combining bounds consistency with value consistency (de(cid:173)
noted as BC+ and MT+).  On these problems, BC, BC+, and 
RC are theoretically equivalent when using the lexicographic 
variable ordering and BC+ and RC are experimentally equiv(cid:173)
alent when using minimum domain (see Figure 3). 

We also performed experiments on  n-queens,  quasigroup 
existence,  and  sport  league  scheduling problems.  Interest(cid:173)
ingly, in these experiments,  RC was never the propagator of 
choice.  On problems where holes arise in the domains,  DC 
was the best choice (except for on n-queens problems, where 
VC  was  considerably  faster),  and  on  problems  where  holes 
do  not arise  in  the  domains,  BC  was  the  clear best  choice. 
Clearly,  whether the domains have  holes  in them  is a prop(cid:173)
erty  that  is  easily  identified  and  tracked  during  the  search. 
Thus,  the  best  choice  of propagator could be  automatically 
selected,  rather than left to the constraint modeler to specify 
as is currently the case. 

5  Conclusions 
We  presented  an  improved  bounds  consistency  constraint 
propagation  algorithm  for  the  important  alldifferent  con(cid:173)
straint.  Using a variety of benchmark and random problems, 
we  showed  that our algorithm significantly outperforms the 
previous  best  bounds  consistency  algorithms  for  this  con(cid:173)
straint and can also  significantly outperform propagators for 
stronger forms of local  consistency. 
Acknowledgements 
We thank Kent Wilken for providing the instruction schedul(cid:173)
ing problems used in our experiments. 

Figure 3:  Percentage not solved within a cutoff of 5  seconds 
for problems  with  100  variables.  The  cutoff was chosen  to 
be the value that was at least two orders of magnitude slower 
than DC, the fastest propagator on these problems. 

References 
[Gabow and Tarjan,  1985]  H.  N.  Gabow  and  R.  E.  Tarjan. 
A  linear-time  algorithm  for  a  special  case  of disjoint set 
union. JCSS, 30(2):209-221,1985. 

[Gent and Walsh, 1999]  1. P. Gent and T. Walsh.  CSPlib: A 
benchmark library for constraints.  In CP-99, pp. 480-481. 

[ILOG S. A.,  1998]  ILOG Solver 4.2 user's manual,  1998. 
[Leconte,  1996]  M.  Leconte.  A  bounds-based  reduction 
scheme  for  constraints  of  difference. 
In  Proc.  of the 
Constraint-96  Int 7  Workshop  on  Constraint-Based Rea(cid:173)
soning, pp.  19-28, Key West, Florida, 1996. 

[Lopez-Ortiz et al., 2003]  A. Lopez-Ortiz, C. G. Quimper, J. 
Tromp and P. van Beek.  Faster practical algorithms for the 
all-diff constraint.  Technical Report, CS-2003-05, School 
of Computer Science,  University of Waterloo, 2003. 

[Mehlhorn and Thiel, 2000]  K.  Mehlhorn  and  S.  Thiel. 
Faster algorithms  for bound-consistency of the sortedness 
and alldifferent constraint.  In CP-2000, pp. 306-319. 

[Puget,  1998]  J.-F.  Puget.  A  fast  algorithm  for  the  bound 
consistency  of alldiff constraints.  AAAI-98,  pp.  359-366. 
[Regin,  1994]  J.-C.  Regin.  A  filtering  algorithm  for  con(cid:173)
straints of difference in CSPs.  In AAAI-94, pp. 362-367. 

[Schulte and Stuckey, 2001]  C.  Schulte  and  P.  J.  Stuckey. 
When do bounds and domain propagation lead to the same 
search space.  In PPDP-2001, pp.  115-126. 

[Smith et al. , 2000]  B. M. Smith, K. Stergiou, and T. Walsh. 
Using auxiliary variables and implied constraints to model 
non-binary problems.  In AAAI-2000, pp.  182-187. 

[Stergiou and Walsh, 1999]  K.  Stergiou and T.  Walsh.  The 
difference all-difference makes. In IJCA1-99, pp. 414-419. 
[van Hoeve, 2001]  W.  J.  van  Hoeve.  The  alldifferent con(cid:173)
straint:  A  survey.  Submitted manuscript.  Available from 
http://www.cwi.nl/~wjvh/papers/alldiff.pdf,  2001. 

250 

CONSTRAINTS 

