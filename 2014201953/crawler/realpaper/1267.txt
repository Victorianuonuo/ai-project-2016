Session  2  Theory  of  Heuristic 
Search 

ADDITIVE  AND/OR  GRAPHs 

A.  Martelli  and  U.  Montanari 

I s t i t u to  di  Flaborazione  d e ll 'Informazione 

del  Consigllo  Nazionale  delle  Ricerche 
Via  s.  Maria,  46  -  56100  -  Pisa  I t a l y. 

Abstract 

folded  AND/OR  t r e e s; 

A d d i t i ve  AND/OR  graphs  are  defined  as  AND/ 
/ORgraphs  w i t h o ut  c i r c u i t s,  which  can  be  con(cid:173)
sidered  as 
the  cost 
of  a  common  subproblem  is  added  to  the  cost  as 
many  times  as 
is 
computed  only  once.  A d d i t i ve  AND/OR  graphs  are 
n a t u r a l ly  obtained  by  r e i n t e r p r e t i ng  the  dy(cid:173)
namic  programming  method 
the 
problem-reduction  approach.  An  example  of  t h is 
r e d u c t i on 

the  subproblem  occurs,  but 

is  g i v e n. 

l i g ht  of 

in  the 

i . e. 

it 

A  top-down  and  a  bottom-up  method  are  p r o(cid:173)

r e s p e c t i v e l y,  extensions  of 

posed  f or  searching  a d d i t i ve  AND/OR  graphs. 
These  methods  a r e, 
the  "arrow"  method  proposed  by  Nilsson  f or 
searching  AND/OR  t r e es  and  D i j k s t r a 's  a l g o(cid:173)
f i n d i ng  the  shortest  p a t h.  A  proof 
r i t hm  f or 
is  given 
t h at  the  two  methods 
f i nd  an  optimal 
s o l u t i on  whenever  a  s o l u t i on  e x i s t s. 

1) 

i n t r o d u c t i on 

In 

the 

l i t e r a t u re  on  a r t i f i c i al 

i n t e l l i(cid:173)

is 

.  Usually, 

f or  representing 

f or  any  s o l u t i on  t r e e,  but 

in  a 
the  problem  is  presented  of 

gence,  AND/OR  trees  have  proved  to  be  a  good 
formalism 
the  problem-reduc(cid:173)
t i on  approach  to  problem  s o l v i ng 
the  search 
paper  by  Nilsson 
f i n d i ng 
have  a  given  c o s t,  and  the  cost  of  a 
simply  the  sum  of 
N i l s s on  gives  there  an  a l g o r i t hm  which  as(cid:173)
sumes  a v a i l a b l e, 
the  cost  of 
at 

the  best  s o l u t i on  t r e e,  where  arcs 
t r ee  is 

t r ee  rooted 
t h at  node. 
An  a l g o r i t hm  f or  searching  AND/OR  graphs 

the  "optimal  s o l u t i on 

f or  each  node,  an  estimate  of 

the  costs  of 

the  a r c s. 

is  defined 

in  the  usual  way, 

folded  AND/OR  t r e e s, 

f or  t r e e s, 
the  sum  of 
In  t h is  paper  we 

has  been  proposed  by  Chang  and  S l a g l e3.  Here  a 
s o l u t i on  graph 
and,  as 
graph 
is 

the  cost  of  a  s o l u t i on 
the  costs  of 
i ts  a r c s. 
introduce  a  new  type  of 
AND/OR  graphs  c a l l ed  a d d i t i v e,  which  can  be 
trees 
considered  as 
to 
where  d i f f e r e nt  nodes  have  been  recognized 
be  roots  of  equal  subtrees  and  have  been  i d e n(cid:173)
thus  generating  AND/OR  graphs  without 
t i f i e d, 
c i r c u i t s.  However, 
the  cost  of  a  s o l u t i on  sub(cid:173)
graph 
unfolded  equivalent 
cost  of  a  common  subproblem  is  added 
to  the 
cost  as  many  times  as  the  subproblem  occurs, 
but 

is  defined  as  equal 
t r e e. 

to 
the  cost  of 
In  other  words, 

is  computed  only  once. 

i . e. 

the 

the 

it 

A d d i t i ve  AND/OR  graphs  are  n a t u r a l ly  ob(cid:173)

tained  by  r e i n t e r p r e t i ng 
ming  method  of  o p t i m i z a t i on 
the  problem-reduction  approach4. 

in 

the  dynamic  program(cid:173)

the 

l i g ht  of 

idea  of 

For  g i v i ng  an 

the  technique  of 
r e d u c t i o n,  we  w i ll  consider  here  the  w e l l-
-known  problem  of  halancing  binary  search 
t r e e s,  solved  by  Knuth  viith  a 
dynamic  programming  a l g o r i t h m ".  Here  a  number 
of  ordered 
words, 
f or 

items 
instance)  are  g i v e n, 

( l e x i c o g r a p h i c a l ly  ordered 

together  w i th 

(modified) 

p r o b a b i l i t i es  of  a  new  item  occurence  to 
items  or  to  be  a  new  item 

intermediate  p o s i t i o n.  For 

be  any  of  the  given 
located 
in  any 
example, the data 

mean  t h at  there  are  3  p r o b a b i l i t i es  out  of  31 
t h at  a  new  word  w i ll  be  "do"  and  3  n r o h a h i l i-
t i es  t h at  a  new  word  w i ll  be  any  word  between 
"do"  and 

" i f ". 

A  binary  search  t r ee  f or  these  data  is  a 

in  F i g.  1.  For  instance 

t r ee  of  the  type  shown 
if 
the  new  word  " a r r a y" 
proper 
t e s t s,  namely  comparisons  w i th 
" i f"  and  "begin"  r e s p e c t i v e ly  and  a  termina-
t i on 

is  generated, 
found  by  means  of 

the  given  words 

i ts 
three 

l o c a t i on 

t e s t. 

is 

Given  a  search  t r e e, 

the  average  number  of 
t e s ts  M  necessary  f or  reaching  a  node, 
is  then 
given  by  summing  up  the  products  of  the  number 
mj.  of 
p r o b a b i l i ty  p1 

t e s ts  required 

f or  any  node 

and 

i ts 

i 

For 
f or  the 

instance, 
t r ee 

in  F i g.  1 

is 

the  average  number  of 

t e s ts 

The  problem  is  to 
minimal  cost  M.  For  i n s t a n c e, 
is  optimal 

the  data 

( 1 ). 

f or 

f i nd  a  search  t r ee  w i th 

the  t r ee  of  Fig.1 

An  equivalent  f o r m u l a t i on  of  the  same 

problem  considers 
b a b i l i t i e s. 
In 
weighted  path 

t h is  case 
l e n g t h. 

frequencies 

instead  of  p r o(cid:173)

the  cost 

is  c a l l ed 

technique 

Two  p r o p e r t i es  a l l ow  the  use  of  a  dynamic 
if 

programming 
in 
T  =  (a  A  8) is  an  optimal 
and  having  a  and  6  as  subtrees,  then  both  o 
and  B  are  o p t i m a l.  Furthermore, 
the  data  f or 
and  S  are  d i s j o i nt  substrings  of  the  data 
a 
'LB  are  the 
fA 
f or  T.  Second, 
if 
frequencies  of  A,o 
and  8  and  the  weighted 

t h is  case.  F i r s t, 
t r ee  rooted  in  A 

,fB 

,fa 

'La 

dynamic  order. 

Second, 

if  the  estimate  is  a  lower  bound  of  the 

in  many  cases  estimates  of  the  sub-
problem  costs  are  available,  which  can  be  used 
for  directing  a  top-down  search. 
In  f a c t,  in 
Section  3  we  give  an  extension  of  Nllsson's 
tree  algorithm  to  the  additive  graph  case, 
which, 
minimal  cost,  is  guaranteed  to  find  the  o p t i(cid:173)
mal  solution  graph.  The  algorithm  is  s l i g h t ly 
simplified  if  the  estimate  satisfies  a  "con(cid:173)
sistency"  constraint.  Finally,  various  known 
heuristic  techniques  can  be  applied  to  a d d i t i(cid:173)
ve  AND/OR  graphs,which  can  find  a  good  solu(cid:173)
t i on  where  the  exact  dynamic  programming  algo(cid:173)
rithm  is  too  Expensive6. 

We  emphasize  that  this  paper  extends  to 

general  dynamic  programming  a  reduction  tech(cid:173)
nique  which  is  well-known  in  the  so  called 
"sequential"  case7.  There,  each  alternative 
can  be  computed  by  summing  a  constant  to  the 
cost  of  one  simpler  subproblem,  thus  reducing 
an  additive  AND/OR  graph  to  an  OR  graph.  In 
this  case,  a  solution  tree  reduces  to  a  path 
and  thus  shortest  path  algorithms  apply, 
like 
Dijkstra's  algorithm8  in  the  uninformed  case 
and  the  algorithm  by  Hart,  Nilsson,  and 
Raphael9  if  an  estimate  is  available. 

Finally,  note  that  in  the  shortest  path 

case  no  d i s t i n c t i on  between  top-down  and  bot(cid:173)
tom-up  is  needed,  while  it  is  suggestive  in 
the  general  case. 

2)  Additive  AND/OR  Graphs 

In  t h is  paper,  we  shall  consider  AND/OR 

graphs  without  cycles.  An  example  is  given  in 
Fig.  3.  Node  A  is  called  the  start  node  and 
represents  the  problem  to  be  solved.  Node  A 
is  called  an  OR  node,(*)  because  a  solution  is 
constructed  by  selecting  either  i ts  successor 
B  or  i ts  successor  C.  Node  B  is  called  an  AND 
node,  because  a ll  of  the  suboroblems  represent 
ed  by  i ts  successors  D  and  E  must  be  solved  in 
order  to  solve  problem  B.  An  AND  node  is  i n d i(cid:173)
cate  by  a  line  across  the  arcs  connecting  it 
to  the  successor  nodes.  Nodes  G  and  H  are  c a l(cid:173)
led  terminal  nodes  and  correspond  to  problems 
with  known  solution. 

We  assume  that  a ll  the  nonterminal  nodes 
are  either  OR  nodes  or  AND  nodes,  that  i s, 
there  are  no  nodes  corresponding  to  problems 
which  can  be  solved  by  solving  some  of  their 
successors. 

We  give  here  a  d e f i n i t i on  of  OR  nodes  and 
AND  nodes,  which  is  opposite  to  the  one 
given  by  Nilsson1.  We  do  so,  because  we 
want  each  node  to  be  either  an  OR  node  or 
an  AND  node,  instead,  with  Nllsson's 
d e f i n i t i o n,  we  could  have  a  node  which  is 
at  the  same  time  an  OR  node  because  of  one 
parent  and  an  AND  node  because  of  another 
parent. 

In  the  dynamic  programming  algorithm,  a ll 
the  subproblems  of  the  given  problem  are 
considered,  whose  data  are  substrings  of  the 
given  data.  Such  problems  are  divided  in  lev 
els,  according  to  the  length  of  the  data, 
and  solved  in  increasing  order*  A  problem 
at  a  level  can  be  solved  by  picking  up  a 
root  in  a ll  possible  ways(*)  (say  JO  and 
thus  decomposing  the  problem  in  k  pairs  of 
subproblems  at  lower  levels.  The  cost  of 
every  decomposition  is  computed  using  (2)and 
a  best  decomposition  is  chosen. 

The  optimal 

search  tree  problem  de(cid:173)

scribed  above  is  a  good  example  of  the  gener 
al  case  where,  at  each  stage,  the  computa(cid:173)
tion  of  each  alternative  requires  the  sum  of 
the  costs  of  one  or  more  (in  fact,  two)  sub 
problems. 

In  this  case,  the  structure  of  the  problem 

is  conveniently  reflected  into  an  additive 
AND/OR  graph,  whose  AND  nodes  correspond  to 
subproblem  cost  sums,  and  OR  nodes  to  a l t e r(cid:173)
native  selections.  For 
the  AND/OR 
graph  for  the  optimal  search  tree  problem, 
with  data  (1),  is  shown  in  Fig.  2.  There,AND 
nodes  are  marked  with  circles  and  OR  nodes 
(corresponding  to  subproblems)  with  squares. 
The  optimal  solution  graph,  corresponding  to 
the  search  tree  in  Fig.  1,  is  blackened. 

instance, 

Reduction  of  dynamic  programming  to  addit1 

ve  AND/OR  graphs  can  imply  several  advan(cid:173)
tages.  F i r s t,  the  AND/OR  graph  expresses  the 
structure  of  the  problem  in  the  form  of  a 
p a r t i al  ordering  of  subproblems.  Dynamic  pro 
gramming  solves  a ll  the  subproblems  bottom-
-up  in  some  static  order  which  respects  the 
p a r t i al  orderings.  However,in  Section  4  of 
this  paper  a  bottom-up  algorithm  is  descri(cid:173)
bed,  which  solves  every  time  the  cheapest 
available  subproblem,  thus  considering,  in 
general,  only  a  subset  of  subproblems  in  a 
(*)  Actually,  Knuth5  gives  a  modified  dynamic 

programming  algorithm  which  excludes  a 
p r i o ri  most  of  the  decompositions,  using 
a  particular  monotonieity  property. 

We  s h a ll  be  c o n c e r n ed  w i th  A N D / OR  g r a p hs 

- i m p l i c i t ly  s p e c i f i ed  by  a  s t a rt  node 
s 
a  s u c c e s s or  o p e r a t or  T . A p p l i c a t i on  of  r 
any  node 
s u c c e s s o rs  of 
w h e t h er 
n o d e s, 

f i n i te  number  of 
l a b el  s n e c i f y i no 

t he  s u c c e s s o rs  a re  AND  nodes  or  OR 

q e n e r a t es  a 

and  a 

a nd 
to 

n 

n 

A  s o l u t i on  g r a ph  of  an  AND/OR  g r a nh  G 
P 

is  any  suhoranh  of 

s 

and  h a v i no  t he 

f o l l o w i ng 

w i th  s t a rt  node 
c o n t a i n i ng 
p r o p e r t i e s; 

s 

(1)  Suppose  node 

n 
i n c l u d ed 

of  P 

is  an  OR  node 
t he  s o l u t i on  o r a p h. 

is 

in 

and 
Then  one  and  o n ly  one  of 
of 
n 
g r a p h. 

i n c l u d ed 

is  a l so 

t he  s u c c e s s o rs 
in 
t he  s o l u t i on 

n 
i n c l u d ed 

(2)  Suppose  node 

of  R 

is  an  AND  node 

is 

and 
Then  a ll  of 
a l so 

i n c l u d ed 

in 

t he  s u c c e s s o rs  of 

t he  s o l u t i on  g r a p h. 
a re 

n 

in 

t he  s o l u t i on  o r a n h. 

(3)  The  s o l u t i on  g r a nh 

is 

f i n i t e,  meanlno 

t h at 

it  ends 

in  a  s et  of 

t e r m i n al  n o d e s, 

F i g. 

4  shows 

two  s o l u t i on  o r a n hs  of 

t he 

A N D / OR  q r a ph 

in  F i g.  3. 

In  g e n e r a l,  a  c o st 

is  a s s o c i a t ed  w i th 

c (n 

, n .)  g i ve 

t he  c o st 
t he  are  c o n n e c t i ng  node 

e v e ry  a rc  of  an  AND/OR  G r p h.  L et 
to  he  a s s o c i a t ed 
t i on 
w i th 
w i th  one  of 
i ts  s u c c e s s o rs  nj.  F or  a d d i t i ve  AND/OR  o r a n hs 
t he  c o st  of  a  s o l u t i on  g r a nh 
d e f i n ed  as 

r e c u r s i v e ly 

f o l l o w s: 

f u n c(cid:173)

t he 

ni 

is 

(1)  The  c o st  c  *  0 

is  a s s o c i a t ed  w i th  e v e rv 

t e r m i n al  node 

in 

t he  s o l u t i on  o r a n h. 

(2)  L et  c1, — , ck  be 

t he  c o s ts  a s s o c i a t ed 

k 

t he 

w i th 
t he  s o l u t i on  o r a n h.  Then  we  a s s o c i a te 
w i th 

s u c c e s s o rs  of  node 

o i v en  b y ( *) 

n 

c 

in 

n 

t he  c o st 
k 
C  =  2_ 
i -1 

(c, 

+  c ( n ,n 

)) 

(3)  The  c o st  a s s o c i a t ed  w i th 

t he  s t a rt  node 

s 

is 

t he  c o st  of 

t he  s o l u t i on  o r a n h. 

The  c o st  of  a  s o l u t i on  o r a nh  can  a l w a vs  be 
t he  above  d e f i n i t i o n,  because 

o b t a i n ed  w i th 
s o l u t i on  e/raphs  do  n ot  c o n t a in  c v c l e s. 

The  c o st  of  a  s o l u t i on  g r a ph  can  a l so  be 

r e p r e s e n t i ng 
t r ee  by  d u n l i c a t i nq 

o b t a i n ed  by 
as  a 
at  nodes  w i th  more 
t a k i ng 
t r e e. 

t he  sum  of  a ll 

t he  s o l u t i on  n r a nh 
t he  s u b o r a n hs 

r o o t ed 

t h an  one 

i n c i d e nt  a rc  and 

t he  a rc  c o s ts  of 

t he 

t h at  b o th 

N o te 
a re  h e re 
g r a ph  OR  nodes  c an  have  o n ly  one  s u c c e s s o r. 

t he  OR  c a se 
in  a  s o l u t i on 

i n c l u d e d,  s i n ce 

t he  AND  and 

3 

t he 

F or  e x a m p l e, 
s o l u t i on  oranhs 
u n it  a rc  c o s t s.  The  c o st  of 
t i on 
9,  because 
T 

l et  us  c o n s i d er 
in  F i g.  4,  where  we  assume 
f i r st  s o l u(cid:173)
is 
r o o t ed  at 

t he  c o st  of 
t w i c e. 

t he  second  one 

is  c o n s i d e r ed 

t he  s u b t r ee 

t he  c o st  of 

is  5  and 

two 

t he 

In 

t he  n e xt  s e c t i o n s,  we  s h a ll  o i ve 

two 
f i nd  s o l u t i on  o r a n hs  h a v i ng 

to 

f or  a d d i t i ve  A N D / OR  o r a n h s. 

a l o o r i t h ms 
m i n i m al  c o st 

3)  Top-down  Search  A l o o r i t hm 

in 

t h is  s e c t i on 

The  a l g o r i t hm  o i v en 

t he  s t a rt  node 
t he  o r a n h.  At  e v e rv  s t a oe 

f i n ds 
a  s o l u t i on  o r a nh  h a v i no  m i n i m al  c o s t,  b e o i n-
n i no  w i th 
o e n e r a te 
g e n e r a t i on  of 
made  a b o ut  w h i ch  node  s h o u ld  have 
c e s s o rs  o e n e r a t ed  n e x t. 
c e s s o rs  of  a  node  hv 
r 
a  n o d e . ). 

( R e n e r a t i no 
t he  s u c(cid:173)
Is  c a l l ed  e x p a n d i ng 

t he  g r a p h,  a  d e c i s i on  must  be 

and  u s i ng  T-  to 

I ts  s u c(cid:173)

t he 

in 

s 

t he  a l g o-
t r e es 

The  a l o o r i t hm 

is  an  e x t e n s i on  of 

it 

to 

f or 

f ar 

t he 

t h at 

t h us 

f r om 

t h r o u oh 

t he  s t a rt  node  down 

t he  n a r t i c u l ar  case  of  A N P / OR 

f or  AND/OR 
t wo  a l g o r i t h ms  a re  p r a c t i c a l lv 

to  he  exnanded  n e x t.  Fach  expanded  node 
to  one  and  only  one  of 

r i t hm  n r o n o s ed  hv  N i l s s on 
and 
i d e n t i c al 
t r e e s.  The  s e a r ch  method  uses  a  s et  of  a r r o ws 
to  o u i de 
t he  AND/OR  o r a nh  s e a r c h ed 
node 
has  an  a r r ow  p o i n t i ng 
i ts  s u c c e s s o rs  based  on  e v a l u a t i o ns  of 
s u c c e s s o r s,  when  a  node 
f i r st 
w h i ch  must  be  a v a i l a b le  on  s e p a r a te  " r o u n d s, 
of 
t he  c o st  of  a  m i n i m al  c o st  s o l u t i on  g r a ph 
t h is  n o d e.  The  n e t w o rk  of  a r r o ws 
s t a r t i ng  at 
is  m a i n t a i n ed  bv  u p d a t i ng 
t he  e v a l u a t i o ns  of 
t h at  a re  a n c e s t r al 
nodes 
t he  p r o c e s s.  The  e v a l u a t i on  of  a  node 
d u r i no 
t he  e s t i m a te  of 
g i v es 
s o l u t i on  o r a nh  h a v i no 

t he  c o st  of  an  o p t i m al 
t h at  node  as  s t a rt  n o d e. 

f or 
is  an  e s t i m a t e, 

t h o se  exnanded 

i ts  e v a l u a t i on 

is  o e n e r a t ed 

t i m e, 

t he 

t he 

to 

The  a l o o r i t hm  c o n s i s ts  of 

t he 

f o l l o w i nn 

s t e p s: 

(1)  B e g in  w i th 

t he  s t a rt  node-  s, 

(2) 

s 

If 
o t h e r wi  se  e x it  w i th 
T h is  o r a nh 
at 
of 
of  OR  nodes  s h o u ld  be 

t he  a r r o ws 

and  u s i ng 

s 

is  n ot  marked  SOLVED,  oo 

( 3 ); 
t he  s o l u t i on  g r a p h, 

to 

is  c o n s t r u c t ed  by  s t a r t i ng 
f i n al  d i r e c t i o ns 

t he 

to  d e c i de  w h i ch  s u c c e s s o rs 

i n c l u d e d, 

(3)  T r a ce  down 

t he  a r r o ws 

s 
i t.  Suppose  node 

f r om 

to  a  node 
n 

has 

and  expand 

n 
s u c c e s s o rs  n1. . . . . . . . . . nk. 

(4)  U n d a te 

t he  e v a l u a t i o ns  and  a r r ow  d i r e c(cid:173)

t i o ns  of  node 
to  n,  as 

n 
f o l l o w s: 

and  a ll  nodes  a n c e s t r al 

Tf  a  s u c c e s s or  n1  of 
a t ed  b e f o r e, 
h ( ni). 
f or 

If  a  s u c c e s s or  ni 

t i m e, 

f i r st 

t he 

has  been  o e n e r(cid:173)
it  has  a l r e a dy  an  e v a l u a t i on 

n 

is  g e n e r a t ed 
e v a l u a t i on 

i ts 

is  the  estimate  of  the  cost  of  a 

h ( nj) 
minimal  cost  s o l u t i on  graph  s t a r t i ng  at 
node  n j. 
node, 
marked  SOLVED. 

is  a  terminal 
is 

If  a  successor 

i ts  e v a l u a t i on 

is  zero  and 

it 

If  node  n 
is 

e v a l u a t i on 

is  an  OR  node, 

i ts  undated 

The  arrow  is  d i r e c t ed 
f or  which 
successor  n1 
n 
achieved  and 
and  only  if 
n1 

from  n 
the  minimum 
is  marked  SOLVED 
is  marked  SOLVED. 
i ts 

is  an  AND  node, 

If  node  n 

to  the 
is 
if 

updated  e v a l u a t i on 

is 

n 

from 

i ts  successors  which 

to  one 
is  not  marked 

The  arrow  is  d i r e c t ed 
of 
SOLVED,  according  to  a  given  c r i t e r i o n. 
A  reasonable  h e u r i s t ic  is 
d i r e c t i na 
having 
the  successors  are  marked  SOLVED,  n  is 
marked  SOLVED. 

the  one  of 
t h at  successor 
If  a ll 

l a r g e st  e v a l u a t i o n. 

the  arrow 

the 

to 

The  procedure  of  undating  evaluations 
and  arrow  d i r e c t i o ns 
then  repeated 
f or  a ll 
backing  UP  the  granh  to 

the  ancestors  of  node 

by 

s. 

is 

n 

(5)  Go  to 

(2)+ 

Note  t h at  during  step 

(4)  ,  a  node  can  he 
updated  several  t i m e s,  because  there  can  be 
several  paths  in  the  granh  between  a  n a ir  of 
nodes.  However, 
t e r m i n a t e,  since 
cycles  by  hypothesis. 

the  procedure  w i ll  alwavs 
in  the  graph  there  are  no 

An  example  of  search  w i th  the  given  a l o n-

the  estimate  of 

to  be  u n i ty  and 

in  F i g.  5a.  Arc  costs  are 
terminal  nodes  are 
to  every  node 

r i t hm  is  shown  in  T i n.  5.  The  nranh  to  he 
searched  is  shown 
assumed 
marked.  The  numbers  adjacent 
are 
cost  s o l u t i on  araph  s t a r t i ng  at 
F i g.  5b 
through  5g  show  the  p a r ts  of 
graph  generated  a f t er  each  cycle  of 
a l g o r i t h m.  The  numbers  attached  to  each  node 
are  the  updated  evaluations  and  marked  nodes 
are  SOLVED  nodes.  F i n a l l y,  F i g.  5h  qives 
the  s o l u t i on  graph 
A c t u a l l y, 
c o s t,  as  we  s h a ll  show  below. 

the  cost  of  a  minimal 
t h at  node. 
the 

found  by  the  a l n o r i t h m. 
t h is  s o l u t i on  granh  has  minimal 

the 

As  in  the  case  of 

the  arrow  a l g o r i t hm  of 
the  a l g o r i t hm  of  Hart,  Nilsson 

Nilsson2  or 
and  Raphael9  f or  OR  graphs,  we  can  show 
t h a t, 
is  a 
lower  bound  on  the  cost  of  a  minimal  cost 
s o l u t i on  graph, 
admissible, 
t h at 
minimal  cost  s o l u t i on 

the  a l g o r i t hm  is 
it  w i ll  always 

f u n c t i on  h(n) 

the  estimate 

then 
is 

f i nd  a 

araph. 

if 

4 

Let  a  t in  node  be  a  node  of  the  aranh 

the  a l n o r i t hm 

in  the 

If 

h(n) 

h(n) 

if  a  node 

t in  nodes, 
the  search  process 
a ll  nodes 

nenerated  at  a  c e r t a in  stage  by 
which  has  not  vet  been  expanded.  Let  h(n)  he 
the  cost  of  a  minimal  cost  s o l u t i on  graph 
s t a r t i ng  at  node  n.  we  then  have: 
h(n) 
Lemma  1. 
f or  a ll 
then  at  anv  stane  durinn 
we  have  h(n)  
for 
graph.  Moreover, 
SOLVED  we  have  h(n)  =  h(n) 
s o l u t i on  aranh  can  he  obtained  hv  t r a c i ng 
down  the  arrows 
Proof.  We  s h a ll  prove  the 
on  the  stages  of  the  a l g o r i t h m.  The 
is 
t h at 
is 
us  nrove 
t h at 
node  n ). 

t r ue  at  a  c e r t a in  staae  and 
t h at 

l et 
the  next  stane, 
(sav 

t r i v i a l ly  t r ue  at  staae  0.  Let  us  assume 

is  a f t er  the  exnansion  of  a  node 

lemma  by  i n d u c t i on 

is  marked 

and  an  optimal 

t r ue  at 

from  n. 

lemma 

is 

n 

n 

it 

it 

the  subgraph  G 

l et  us  consider 

(A)  of  the  a l n o r i t h m,  We  update 

in  sten 
the  nodes  which  are  ancestors  of  node  n. 

a ll 
Therefore, 
of 
which  consists  of  a ll 
Beinn  the  graph  without  c y c l e s,  an  index 
be  attached 
n°  =  n, 
node  n1 
with  i  < i. 

the  search  aranh  obtained  un  to  t h is  stage, 
the  ancestors  of  node  n. 
can 
to  each  node  of  Gf  s t a r t i na  w i th 
in  such  a  wav  t h at  a ll  the  naths  from 
to  node  n°  contain  only  nodes  n 

is 

h(n) 

true 

according 

is  c e r t a i n ly 

lemma 
if  anv  of 

if 
the  successor  ni 
f i r st  t i m e,  we  have 

We  s h a ll  nrove  the  lemma  bv  i n d u c t i on  on 
the 
index  i.  The 
f or 
node  n.  Tn  f a c t, 
i ts  successors  n^ 
has  been  nenerated  b e f o r e,  we  have 
bv 
i n d u c t i on  and 
generated  f or  the 
h ( nj)  <  h ( nj)  bv  hypothesis.  Therefore,  bv 
computing 
a l n o r i t h m,  we  have  h(n)  
node  n 
we  know  bv  i n d u c t i on 
n.|  pointed  to  bv  the  arrow  we  have  h (ni) =h (n4) 
and  t h at  an  optimal  s o l u t i on  f or 
he  obtained  bv  t r a c i na  down  the  arrows 
nj,  An  optimal  s o l u t i on  aranh  f or  node  n 
w i ll  contain  node  nj,  since 
s o l u t i on  nranh 
would  have  a  not  smaller  c o s t.  Tn  f a c t, 

if 
is  marked  SOLVED  and  is  an  OP  node, 

through  another  successor  n1 
from 

f or  the  successor 

h ( n ).  Moreover, 

(4)  of  the 

anv  other 

to  sten 

from 

t h at 

can 

n4 

n 

if  node 

is  marked  SOLVED  and 
Thus, 
on  OR  node,  we  have  h(n)  =  h(n) 
and  an 
optimal  s o l u t i on  graph  can  he  obtained  bv 
from  n.  The  same 
t r a c i ng  down  the  arrows 
holds 
is 
if  node 
an  AND  node. 

is  marked  SOLVED  and 

n 

is 

t h at  the 

l et  us  assume 

the  nodes  nj  w i th  j  <  1; 

Now, 
f or  a ll 
lemma  is  t r ue 
shown  e a s i l y,  by  repeating  f or  node  ni 
above  arguments 

f or  node 

f or  node 

lemma 

n. 

ni 

.  This  can  be 

then  the 

is 

the 

t r ue 

Now  we  can  prove  the  f o l l o w i n g: 

Q.E.D. 

, 

6 

If 

is 

In  f a c t, 

This  case 

impossible. 

if 
and  if 

is  admissible. 

than  some  small 

f or  a ll  t ip  nodes  n 

then  the  top-down  algo(cid:173)

a  s o l u t i on  graph  e x i s t s, 

Theorem  1. 
h(n)  <.  h(n) 
a ll  arc  costs  are  l a r g er 
p o s i t i ve  amount 
r i t hm 
Proof.  We  consider  three  cases: 
Case  1.  Termination  without  f i n d i ng  a  s o l u t i on 
graph. 
t e r m i n a t i on  can  only  occur  at  step 
(2)  when 
the  s t a rt  node  is  solved.  But  t h is  can  only 
happen  if  a  s o l u t i on  graph  has  been 
found. 
Case  2.  No  t e r m i n a t i o n.  Let  us  examine  the 
algorithm  at  a  c e r t a in  stage. 
If  we  trace  down 
the  arrows  from  node  s,  we  o b t a in  a  path  from 
node 
to  be  expanded  next. 
Let  c(s,n)  be 
t h is  p a t h, 
is 
the  sum  of 
are 
h ( ni) >c  ( ni, n j)  + h ( n j ).  Therefore,  we  have 
h(s)>  c ( s , n ).  Let  us  assume  now  t h a t,  at  a 
f or  which 
c e r t a in  stage,  we  expand  a  node  n 
c ( s , n ) > h ( s ).  This 
it 
would  imply  h(s)  >  h<s>  c o n t r a d i c t i ng Lemma 
1.  Therefore, 
those  nodes  n 
The  number  of 
every  node  has  a 
and 
hence 

f i n i te  because 
f i n i te  number  of  successors 
than  6, 

( nj, nj),  belonging  to  t h is  p a t h,  we  have 

the  cost  of  every  arc 
the  a l g o r i t hm  must 

the  algorithm  can  only  expand 

f or  which  c(s,n)  <_  h ( s ). 

is  not  possible  because 

the  cost  of 
the  costs  of 

is  greater 
terminate. 

i ts  a r c s.  For  each 

these  nodes 

to  the  node 

t h at 

is 

n 

s 

Case  3.  Termination  w i th  a  s o l u t i on  oraph 
having  non  minimal  cost.  When  the  a l q o r i t hm 
terminates,  node 
s 
we  have  h(s)  =  h(s) 
Lemma  1  s t a t es  t h at  an  optimal  s o l u t i on  graph 
can  be  obtained  by  t r a c i ng  down  the  arrows 
the  algorithm  can  only 
from  s.  Therefore, 
terminate  w i th  an  optimal  s o l u t i on 
graph. 

is  marked  SOLVED  and 
by  Lemma  1.  Moreover, 

Q.E.D. 

(3) 

Hart,  Nilsson  and  Raphael 

introduced  an 

h ( n ),  which  allows  a 
the  a l g o r i t hm 

assumption,  c a l l ed  the  consistency  assumption, 
f or  the  estimate 
s i m p l i f i c a t i on  of 
OR  graphs.  Analogously,  we  can  give  the  con(cid:173)
sistency  assumption 
as  f o l l o w s.  Let  h(n) 
of 
s t a r t i ng  at  n. 
t i on 

be  the  given  estimate 
the  cost  of  a  minimal  cost  s o l u t i on  graph 
Then  the  consistency  assump(cid:173)

f or  a d d i t i ve  AND/OR  graphs 

f or  searching 

is 

if 

n 

is  an  OR  node  . 

h(n)  <_  hfn^)  +  c ( n , n j) 

f or  each  successor  n1 

if 

n 

is  an  AND  node 

5 

h(n) 

(h(n1)  +  c ( n , ni)) 

I 
1 
the  consistency  assumption, 

With 

it 

is 

the 

l a st 

(4)  of  the  algorithm  as 

increase  at  each  stage  of 

t h at  the  evaluation  of  each  node 

easy  to  see 
can  only 
a l g o r i t h m.  Therefore,  we  can  modify  the 
statement  of  step 
f o l l o w s.  One  step  of  the  procedure  of  backinq 
the  ancestors  of  node  n, 
up  the  graph  of 
consists  of  updatino  a ll 
the  parents  of  a 
c e r t a in  node  m.  Assume  t h at  one  of  these 
parents  mi  is  an  OR  node.  Since  the  e v a l u a t i on 
of  each  node  can  only 
the  evaluation 
of  node  mi  w i ll  be  changed  only  if  node  mi 
has  the  arrow  p o i n t i ng  to  node  m.  Therefore, 
in  the  procedure  of  backinq  up  the  qraph  of 
the  ancestors  of  node  n,  we  can  consider  only 
those  OR  parents  of  a  c e r t a in  node  m,  which 
have 
the  arrow  p o i n t i ng  to  m.Note  t h a t,  even 
in  t h is  case,  a  node  can  be  undated  several 
times  d u r i ng  step 

increase, 

( 4 ). 

4)  Bottom-up  Search  A l g o r i t h m. 

This  a l g o r i t hm  f i n ds  a  s o l u t i on  graph 

the  parent  nodes  of 

having  minimal  c o s t,  s t a r t i ng  from  the  t e r m i(cid:173)
nal  nodes  and  expanding  a  node  at  each  stage. 
In  t h is  case,  expandinq  a  node  means  genera(cid:173)
t i ng  a ll 
algorithm  does  not  use  any  e stimate, 
can  be  considered  as  an  extension  of  Dijkstra's 
algorithm  f or  OR  graphs8.  An  e v a l u a t i on 
function  is  computed 
for  each  node  and 
node  whose  evaluation 
is 
expanded.  The  evaluation  f u n c t i on  f or  a  node 
n 
the  cost  of  a  minimal  cost  s o l u t i on 
graph  s t a r t i na  at  node  n,  obtained  so  f a r. 

t h at  node.  The 
thus 

the 
is  minimal 

f u n c t i on 

gives 

it 

The  a l g o r i t hm  is  based  on  the  assumption 

t h at  we  have  a  f i n i te  number  of 
nodes  and 
(1)  Put  every 

the 
terminal  node 

it  consists  of 

t e r m i n al 

f o l l o w i ng  steps: 
ti  on  a 

l i st 

c a l l ed  OPEN  and  set  h ( t i)  =  0  f or  every  i 

(2)  Remove  from  OPEN  t h at  node  whose  h 

t i es  a r b i t r a r i l y ). 

l i st 

it  on  a 

(Resolve 

t h is  node  n. 

is  smallest  and  put 

value 
c a l l ed  CLOSED. 
C a ll 
If 
the  s o l u t i on  graph  obtained  by  t r a c i ng 
back 
c o n t i n u e. 

the  s t a rt  node,  e x it  w i th 

the  p o i n t e r s,  otherwise 

through 

is 

n 

(4)  Expand  node  n,  generating  a ll  of 

i ts 

p a r e n t s.  For  each  parent  ni  do  the 
f o l l o w i n g: 

If  ni. 

is  an  OR  node,  we  can  have 

three  cases 
a) 

is  n e i t h er  on  OPEN  nor  on  CLOSED. 

the  value  of 

the 

ni 
Associate  w i th 
e v a l u a t i on 
•  

ni 
f u n c t i on 
(n)  +  c (ni,n) 

(n1) 

Put  node 
p o i n t er 

ni 

from  it 

to  n. 

on  OPEN  and  d i r e ct  a 

b)  ni 

is  on  OPEN.  Let  h ( n i)  be  the 

e v a l u a t i on  associated  w i th  ni. 
Associate  w i th 
e v a l u a t i on 

f u n c t i on  given  by 

it  a  new  value  of 

the 

If  h(ni)  has  been  changed,  r e d i r e ct 
the  p o i n t er 

to  n. 
is  On  CLOSED.  Continue 

from 

ni 

is  an  AND  node,  we  can  have  two 

c)  ni 
If  ni 
cases 
a)  There 

is  some  successor  of 

is  not  on  CLOSED .  Continue. 

ni  which 

b)  A ll  of  the  successors  of  ni  are  on 
the 

CLOSED.  Associate  w i th  node  ni 
value  of 

the  e v a l u a t i on 

f u n c t i on 

where  the  nodes 
sors  of 
to  a ll  of 
on  OPEN. 
(5)  Go  to  (2)  . 

nk 

are  the  succes(cid:173)
from  ni 

.  D i r e ct  p o i n t e rs 

ni 
i ts  successors  and  put  ni 

This  a l g o r i t hm 

is  c l o s e ly  r e l a t ed 

to 

the 

In 

f a c t, 

dynamic  programming  method. 
l a t t er  can  be  seen  as  a  bottom-up  breadth-
- f i r st  search  a l g o r i t h m,  which  expands  a ll 
the  nodes  according  to  a  f i x ed  o r d e r i n g. 
Our  a l g o r i t h m,  on  the  c o n t r a r y,  expands  the 
nodes  according 
thus  expand(cid:173)
i n g, 
in  g e n e r a l, 

to  t h e ir  c o s t, 
fewer  nodes. 

the 

An  example  of  search  w i th  the  given  algo(cid:173)

i ts  nodes  are  not  used  by  t h is 

Is  given  in  F i g.  5a.  The  estimates 

r i t hm  is  shown  in  F i g.  6.  The  graph  to  be 
searched 
attached  to 
a l g o r i t h m.  F i g s.  6a  through  6j 
p a r ts  of 
the  graph  generated  a f t er  each  cycle 
of  the  a l g o r i t h m.  Marked  nodes  are  the  closed 
nodes  and  the  other  nodes  are  the  open  nodes. 
Arc  costs  are  assumed  to  be  u n i ty  and  the 
numbers  adjacent  to  the  nodes  are  the  values 
of 
h.  Nodes  without  an  adjacent  number  are 
AND  nodes  which  have  some  successor  not  yet 
closed.  F i g.  6k  gives  the  s o l u t i on  graph. 

show  the 

Note  t h at 

the  graph  generated  by  t h is  a l g o(cid:173)

than  the  one 

r i t hm  has  a  simpler  s t r u c t u re 
generated  by  the  top-down  a l g o r i t h m. 
at  every  stage  of  the  a l g o r i t h m,  an  OR  node 
has  only  one  p o i n t er 
whereas,  at  every  stage  of 
a l g o r i t h m, 
graph  has 

the  complete  s t r u c t u re  of 
to  be  r e t a i n e d. 

i ts  successors 
top-down 
the 

In  f a c t, 

to  one 

if 
the 

We  can  show  t h at  the  bottom-up  a l g o r i t hm 

is  a d m i s s i b l e, 
terminate 

t h at 

i s, 

it  w i ll  always 

in  an  optimal  s o l u t i on  graph, 

If  a ll  arc  costs  are  p o s i t i v e, 

whenever  a  s o l u t i on  graph  e x i s t s. 
Lemma  2. 
t h e n,  when  a  node  n 
a l g o r i t h m, we have h(n) = h(n) and theoptimal s o l u t i on graph can be obtained by 
t r a c i ng  down  the  p o i n t e rs  from  n.  Moreover, 
a ll  the  nodes  m  w i th 
been  closed  before  node  n. 

h(m)  <  h(n)  have 

is  closed  by  the 

lemma  w i ll  be  proved  by  i n d u c t i on 

Proof.  The 
on  the  stages  of  the  a l g o r i t h m.  The  lemma 
is  t r i v i a l ly 
t r ue  at  stage  0.  L et  us  assume 
t r ue  at  a  c e r t a in  stage  and 
it 
is 
prove 
t h at 
next  stage. 

it  w i ll  s t i ll  be 

t r ue  a f t er 

l et  us 

the 

Let  n  be  the  open  node  whose  h  value 

t h is  stage.  This  node 

is  smallest  at 
is 
closed  by  the  a l g o r i t h m.  Let  us  assume 
t h at  a  node  m  e x i s ts  w i th  h (m)  <h(n)  , 
which  has  not  yet  been  closed  by  the 
a l g o r i t h m.  Let  G  be  an  o p t i m al  s o l u t i on 
graph  f or  node  m.  C e r t a i n l y, 
t h e re  is  an 
open  node 
of  G,  such  t h at  a ll  of  i ts 
successors  i n_  G 
to  see 
an  AND  node  a ll 
and  by  the 
value 
graph,  hence  h ( r)  *  h ( r ). 

is 
i ts  successors  are  closed 
h 

i n d u c t i on  hypothesis  t h e ir 

h ( r)  =  h ( r ). 

are  closed. 

f a c t, 

t h at 

if  r 

the  cost  of  a  minimal  cost  s o l u t i on 

In 

is 

It  is  possible 

If 

r 

is  an  OR  node,  we  have 

ri 

are  the  successors  of 

where  the  nodes 
r  which  have  been  closed  so  f a r.  But  we 
assumed 
to  an  optimal  s o l u t i on  graph 
f o re 

these  successors  belongs 

t h at  one  of 

t h e r e(cid:173)

h ( r) 

f or 

r, 

-  h ( r)  . 
Moreover  we  have 

the  optimal  s o l u t i on  graph 

since 
a  subgraph  of  G,  and 

f or 

r 

is 

since 
is  smallest.  Therefore  we  have 

is  the  open  node  whose  h  value 

n 

which  c o n t r a d i c ts  our  hypothesis 
m  has  not  y et  been  closed  and  we  have 
shown  t h at  a ll  the  nodes  m  w i th  h(m)<h{n) 
have  already  been  closed. 

t h at  node 

t e r m i n al  node, 

h(n) 
-  h ( n ). 
is  obviously 

Now,  we  can  show  t h at 
t h is 

If 
n 
t r u e. 
is  a 
is  an  OR  node,  we  have  shown  above 
If  n 
which 
t h a t, 
f or  any  successor 
is  not  c l o s e d,  we  have 
h ( n ).  There(cid:173)
f o r e,  an  optimal  s o l u t i on  graph  must  c o n t a in 
a  closed  successor,  because  any  s o l u t i on 

ni 
h ( n i)  

of_ 

n 

6 

6  M a r t e l l i,  A ,,  Edge  Detection  Using 

H e u r i s t ic  Search  Methods,  Computer 
Graphics  and_  Image  Processing,Vol.  1, 
N.  2,  pp.  169-182,  August  1972. 
7  Kaufmann,  A.  and  Cruon,  R.,  Dynamic 

8  D i j k s t r a,  E.,  A  Note  on  Two  Problems 

Programming,  Academic  Press,  1967. 
In 
Connection  w i th  Graphs,  Numerlsche 
Mathematlk,  V o l.  1,  pp.  269-271 

(1959). 

9  H a r t,  P.,  N i l s s o n,  N.J,  and  Raphael,  B., 

f or  the  H e u r i s t ic 

A  formal  Basis 
Determination  of  Minimum  Cost  Paths, 
I . E . E . E.  Trans.  SCC  4,  N.2,  pp.100-107, 
J u ly  1968. 

f or  which 

through  one  successor  which  is  not 

l a r g er  c o s t.  The  p o i n t er 
to  the  closed  successor 

graph 
closed  would  have  a 
is  d i r e c t ed  from 
n 
n 
Is  minimal 
and,  by  the  i n d u c t i on  h y p o t h e s i s , h ( nj) = h ( nj). 
Therefore,  we  have  h(n)  =  h(n) 
optimal  s o l u t i on  graph  f or 
t a i n ed  by  t r a c i ng  down  the  p o i n t e r s. 

( h ( nj)  +  c ( n , n j l) 

and  an 
can  be  ob(cid:173)

n 

If 

n 

is  an  AND  node,  a ll  of 

sors  are  already  c l o s e d.  Since  the 
t r ue 
hypothesis, 

the  successors  by 
t r ue 

is  also 

the 
f or 

f or 

it 

n. 

i ts  succes(cid:173)
lemma  is 

I n d u c t i on 

F i n a l l y,  we  can  prove: 

Q.E.D, 

then  the 

three  cases 

f i n d i ng  a 
impossible 

If  a  s o l u t i on  graph  e x i s ts  and 

the  a l g o r i t hm  can  only 
(3)  w i th  a  s o l u t i on  graph. 

Theorem  2. 
if  a ll  arc  costs  are  p o s i t i v e, 
bottom-up  search  a l g o r i t hm  is  admissible. 
Proof.  We  prove  the  theorem  by  assuming  the 
c o n t r a r y.  There  are 
to  consider: 
Case  1.  Termination  without 
s o l u t i on  graph.  This  case 
is 
because 
step 
Case  2.  No  t e r m i n a t i o n.  Assume  t h at  at  a 
c e r t a in  Btage 
n 
impossible,  be(cid:173)
w i th  h(n)  >  h ( s ).  This  is 
cause,  according  to  Lemma  2,  node 
have  been  closed  before  and  when 
closed 
the  a l g o r i t hm  can  only  close  those  nodes 
w i th  h(n)  <_  h ( s ).  But  the  number  of  these 
nodes 
p o s i t i v e,  and  the  a l g o r i t hm  must  terminate. 

terminates.  Therefore, 
n 

the  a l g o r i t hm  closes  node 

the  arc  costs  are 

s  must 
s 

the  a l g o r i t hm 

f i n i t e,  since 

terminate  at 

is 

is 

Case  3.  Termination  w i th  a  s o l u t i on  graph 
having  nonmlnlmal  c o s t.  This 
because 

it  would  c o n t r a d i ct  Lemma  2. 

is  not  p o s s i b l e, 

Q.E.D. 

Refefences. 

1  N i l s s o n,  N . J .,  Problem-Solving  Methods 

in 
I n t e l l i g e n c e,  Mc  G r a w - H i l l, 

A r t i f i c i al 
New  'fork,  1971. 

2  N i l s s o n,  N . J .,  Searching  Problem-Solving 

and  Game-Playing  Trees 
Cost  S o l u t i o n s,  Proc. 
1968,  H,  pp.  125-130. 

f or  Minimal 
IFIF  Congress 

3  Chang,  C.L,  and  S l a g l e,  J . R .,  An  Admissible 

and  Optimal  A l g o r i t hm  f or  Searching 
AND/OR  Graphs,  A r t i f i c i al 
V o l.  2,  pp.  117-  128 

(1971)  . 

I n t e l l i g e n c e, 

4  M a r t e l l i,  A.  and  Montanari,  u .,  Dynamic 

Programming  v ia  AND/OR  graphs, 
p r e p a r a t i o n. 

in 

5  Knuth,  D.E.,  optimum  Binary  Search  Trees, 

Acta  I n f o r m a t l c a,  V o l.  1,  pp.  14-25 
(1971). 

7 

9 

10 

11 

