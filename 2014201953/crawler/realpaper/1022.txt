Towards an Integration of Golog and Planning

Jens Claßen+ and Patrick Eyerich∗ and Gerhard Lakemeyer+ and Bernhard Nebel∗

+ Department of Computer Science, RWTH Aachen, 52056 Aachen, Germany

(cid:2)classen|gerhard(cid:3)@cs.rwth-aachen.de

∗ Department of Computer Science, University of Freiburg, 79110 Freiburg, Germany

(cid:2)eyerich|nebel(cid:3)@informatik.uni-freiburg.de

Abstract

The action language Golog has been applied suc-
cessfully to the control of robots, among other
things. Perhaps its greatest advantage is that a
user can write programs which constrain the search
for an executable plan in a ﬂexible manner. How-
ever, when general planning is needed, Golog sup-
ports this only in principle, but does not measure
up with state-of-the-art planners. In this paper we
propose an integration of Golog and planning in the
sense that planning problems, formulated as part of
a Golog program, are solved by a modern planner
during the execution of the program. Here we fo-
cus on the ADL subset of the plan language PDDL.
First we show that the semantics of ADL can be
understood as progression in the situation calculus,
which underlies Golog, thus providing us with a
correct embedding of ADL within Golog. We then
show how Golog can be integrated with an existing
ADL planner for closed-world initial databases and
compare the performance of the resulting system
with the original Golog.

1 Introduction
The action language Golog [Levesque et al., 1997] has been
applied successfully to the control of robots [Burgard et al.,
1999], among other things. It is based on Reiter’s version of
the situation calculus [Reiter, 2001], where so-called basic ac-
tion theories (BATs), which deﬁne action preconditions and
effects together with an initial situation, are combined with
a programming language, which offers imperative program-
ming constructs as well as non-deterministic action choices.
Perhaps the greatest advantage of Golog is that a user can
write programs which constrain the search for an executable
plan in a ﬂexible manner. However, when general planning is
needed, Golog supports this only in principle through the use
of non-deterministic actions, but does not measure up with
state-of-the-art planners.

As a running example, consider a taxi-driver agent in a grid
world, whose task it is to deliver passengers to their destina-
tions. Its actions are pickup, dropoff, and moving up, down,
left or right one square in the grid. In Golog, the agent’s high-
level control program can then be speciﬁed like this:

While there are passengers to be served do the following:
choose a passenger, plan a route to her location, follow that
route, pick up the passenger, plan a route to her destination,
follow that route and drop her off.

Planning can easily be speciﬁed in Golog as trying out
actions nondeterministically in a forward-search manner un-
til a given goal is satisﬁed [Reiter, 2001]. While possi-
ble in principle, this quickly becomes infeasible, in our ex-
ample even for small grid worlds. Modern planners like
FF [Hoffmann and Nebel, 2001] or HSP2 [Bonet and Geffner,
2001], on the other hand, are capable of handling much larger
planning problems. So it seems natural to try to combine
Golog with a modern planner. Here we focus on planners
for the ADL [Pednault, 1989] subset of the plan language
PDDL [Fox and Long, 2003].

For the integration, at least two issues arise: differences in
expressiveness and the correctness of the embedding. While
BATs in the situation calculus can use the full power of ﬁrst-
order logic, ADL descriptions are more restricted. For exam-
ple, they assume a ﬁnite domain and the initial state consists
of literals only. As we will see, it is not very difﬁcult to map
ADL into BATs. For the purposes of this paper, it will sufﬁce
to simply use a BAT that is the result of such a mapping; a
companion paper [Eyerich et al., 2006] discusses the expres-
siveness issue in more detail.

As for correctness, we need to make sure that a plan re-
turned by an ADL planner for a given goal and state descrip-
tion is also a legal plan in the situation calculus for the cor-
responding situation. The semantics of PDDL’s ADL sub-
set [Fox and Long, 2003] is given in terms of state transitions
as an adaptation of Lifschitz’ semantics of STRIPS [Lifschitz,
1986]. Roughly, a state consists of a set of literals, and a tran-
sition for a plan operator is obtained by adding and deleting
literals. By extending earlier work by Lin and Reiter [1997],
we are able to show that the ADL semantics is captured pre-
cisely by progression in the situation calculus, which refers
to updating the description of an initial situation so that con-
clusions about the future that can be drawn using the updated
theory are the same as those drawn from the theory before the
update. As a nice side-effect, we obtain a purely declarative
semantics of ADL within the situation calculus.1

1Pednault’s [1989; 1994] original semantics for ADL deﬁned op-
erators similarly by additions and deletions, however of tuples in
relations and functions of ﬁrst-order structures. He also derived sit-

IJCAI07

1846

To obtain our results, we use a variant of the situation
calculus called ES recently proposed by Lakemeyer and
Levesque [2004]. Compared to Reiter’s situation calculus,
this has at least two advantages: for one, the translation of
ADL into the new situation calculus is simpler as there are no
situation terms to worry about (in ES, situations occur only in
the semantics); for another, semantic deﬁnitions like progres-
sion become simpler as it is no longer necessary to consider
arbitrary ﬁrst-order structures but only certain ones over a
ﬁxed universe of discourse. These simpliﬁcations do not lead
to a loss of expressiveness. In fact, Lakemeyer and Levesque
[2005] showed that ES captures precisely the non-epistemic
fragment of the situation calculus and Golog.

After establishing that ADL plans are correct for the cor-
responding BAT, we turn to the embedding of an ADL plan-
ner into Golog.
In particular, we use the latest version of
FF [Hoffmann and Nebel, 2001] together with an implemen-
tation of IndiGolog [Sardina et al., 2004], which incorporates
on-line execution, Reiter’s forward-search planner and pro-
gression. We present ﬁrst experimental results showing the
pay-off of using Golog with FF versus pure Golog.

The paper proceeds as follows. We ﬁrst introduce ES and
show how BATs are formulated in this logic. Next, we deﬁne
ADL problem descriptions and provide a formal semantics
by mapping them into basic action theories. In Section 4, we
deﬁne progression and establish the correctness of updating
an ADL state with respect to progression. In Section 5, we
discuss the integration of Golog and FF. Then we conclude.

2 The logic ES
The language is a ﬁrst-order modal dialect with equality,
predicate and function symbols. For simplicity we assume
that all predicates are ﬂuent and that all function symbols are
rigid, i.e. predicates may be changed by actions while func-
tions may not. The logical connectives are ∧, ¬, ∀, together
with the modal operators 2 and [r] where r may be any term,
including a variable.2 Other connectives like ∨, ⊃, ≡, and ∃
are used as the usual abbreviations.

Terms and formulas are built from these primitives in the
usual way. We let R denote the set of all ground terms.
For simplicity,
instead of having variables of the action
sort distinct from those of the object sort as in the situation
calculus, we lump both of these together and allow to use any
term as an action or as an object. We read [r]α as “α holds
after action r” and 2α as “α holds after any sequence of
actions”. We call a formula without free variables a sentence
and a formula ﬂuent, when it does not contain 2 and [r]
operators and does not mention the special predicate Poss
(which is used to denote executable actions). In addition, we
introduce the following special notation: A type τ is a unary
predicate; we write ∀x:τ. φ instead of ∀x. τ (x) ⊃ φ.
Intuitively, a world w will determine which
The semantics:
ﬂuents are true, but not just initially, also after any sequence
of actions. Formally, let P denote the set of all pairs σ:ρ

uation calculus formulas from ADL operators, but did not show the
semantic correspondence between the two.

2The original ES also considers epistemic operators which we do

not need here and are left out.

where σ ∈ R∗ is considered a sequence of ground actions,
and ρ = F (r1, . . . , rk) is a k-ary ground ﬂuent atom. A
world then is a mapping from P to {0, 1}.

First-order variables are interpreted substitutionally over
the rigid terms R, i.e. R is treated as being isomorphic to a
ﬁxed universe of discourse. This is similar to L [Levesque
and Lakemeyer, 2001], where standard names are used as
the domain. Given a world w, for any sentence α, we de-
ﬁne w |= α as w, (cid:2) (cid:3) |= α where
w, σ |= F (r1, . . . , rk) iff w[σ:F (r1, . . . , rk)] = 1;
w, σ |= (r1 = r2) iff r1 and r2 are identical;
w, σ |= (α ∧ β) iff w, σ |= α and w, σ |= β;
w, σ |= ¬α iff w, σ (cid:11)|= α;
w, σ |= ∀x. α iff w, σ |= αx
w, σ |= [r]α iff w, σ · r |= α;
w, σ |= 2α iff w, σ · σ(cid:3) |= α, for every σ(cid:3) ∈ R∗.
The notation αx
all free occurrences of the variable x by the term t.

t means the result of simultaneously replacing

r , for every r ∈ R;

When Σ is a set of sentences and α is a sentence, we write
Σ |= α (read: Σ logically entails α) to mean that for every w,
if w |= α(cid:3) for every α(cid:3) ∈ Σ, then w |= α. Further |= α (read:
α is valid) abbreviates {} |= α.
Basic Action Theories: Basic action theories can be de-
ﬁned similar to Reiter’s: A set of sentences Σ is a basic ac-
tion theory iff it only mentions the ﬂuents in a given set F
and is of the form Σ = Σ0 ∪ Σ

post, where

∪ Σ

pre

• Σ0 is a ﬁnite set of ﬂuent sentences,
• Σ

pre is a singleton of the form3 2Poss(a) ≡ π, where π

is ﬂuent with a being the only free variable;

• Σ

post is a ﬁnite set of successor state axioms of the form4
2[a]F ((cid:9)x) ≡ γF , one for each ﬂuent F ∈ F \ {Poss},
where γF is a ﬂuent formula whose free variables are
among (cid:9)x and a.

The idea is that Σ0 represents the initial database, Σ

pre is
one large precondition axiom and Σ
post the set of successor
state axioms for all ﬂuents in F (incorporating Reiter’s
solution [Reiter, 2001] to the frame problem).

3 ADL

PDDL’s ADL subset goes beyond STRIPS by supporting
equality, conditional effects and typing. Also, preconditions
may contain negation, disjunction and quantiﬁers.

ADL Problems: These are deﬁned by

1. a ﬁnite list of types τ1, . . . , τl and Object; along with

this a ﬁnite list of statements of the form

τi:(either τi1

· · · τiki

)

(1)

deﬁning τi as the union of the τij ; a primitive type is
one that does not appear on the left-hand side of such a
deﬁnition and is distinct from Object;

3Free variables are understood as universally quantiﬁed from the
outside; 2 has lower syntactic precedence than the logical connec-
tives, i.e. 2Poss(a) ≡ π stands for ∀a.2(Poss(a) ≡ π).

4The [t] construct has higher precedence than the logical connec-

tives. So 2[a]F ((cid:3)x) ≡ γF abbreviates ∀a.2([a]F ((cid:3)x) ≡ γF ).

IJCAI07

1847

2. a ﬁnite list of ﬂuent predicates F1, . . . , Fn;

associated with each Fj a list of types τj1
, . . . , τjkj
(one for each argument of Fj , abbreviated as (cid:9)τFj )

3. a ﬁnite list of objects with associated primitive types

o1:τo1

, . . . , ok:τok (object symbols are constants);

4. a ﬁnite list of ADL operators A1, . . . , Am (see below);
5. an initial state I (see below) and
6. a goal description G in form of a precondition formula.
I and G may only contain the symbols from items 1 to 3. We
further require that all the symbols are distinct. In particular,
this forbids using a type also as an Fj and using an object also
as an Ai. All objects are implicitly of type Object, which is a
supertype of all other types. In the case of closed-world plan-
ning, the initial state I is simply given by a ﬁnite set of ground
ﬂuent atoms F ((cid:9)r), otherwise it is a set of ground literals.

An ADL operator A is a triple ((cid:9)y:(cid:9)τ , πA, A), where (cid:9)y:(cid:9)τ is
a list of variables with associated types,5 πA is a precondi-
tion formula and A an effect formula, both with free vari-
ables among (cid:9)y. Both πA and A have to be constructed using
only the (cid:9)y and the symbols from items 1 to 3 of the problem
description. The name of the operator A has to be a p-ary
function symbol, where p is the number of parameters of A.
Precondition formulas are the following: Every atomic for-
mula F ((cid:9)t) and every equality atom (t1 = t2), where each of
the ti is either a variable or a constant, is a precondition for-
mula. If φ1 and φ2 are precondition formulas, then so are
φ1 ∧ φ2, ¬φ1 and ∀x:τ.φ1. Without loss of generality, we as-
sume that an effect formula is a conjunction of effects of the
following forms, at most one of each kind for each ﬂuent Fj:

∀ (cid:9)xj : (cid:9)τFj
∀ (cid:9)xj : (cid:9)τFj

. (γ+
. (γ−

Fj ,A( (cid:9)xj , (cid:9)y) ⇒ Fj ( (cid:9)xj)) ,
Fj ,A( (cid:9)xj , (cid:9)y) ⇒ ¬Fj ( (cid:9)xj ))

(2)

The notation γ ⇒ ψ stands for a conditional effect: if the
precondition formula γ holds before performing the action,
then ψ will become true afterwards.
An Example: Let us consider the taxi domain. For reasons
of space we only consider the operators, initial state, and goal
description:

1. Operators:

move = ((cid:2)y1:Taxi, y2:Direction(cid:3), TRUE,
∀x1:Object. ∀x2:Xcoord. ∀x3:Ycoord.

((∃z1:Xcoord. ∃z2:Ycoord.

At(y1, z1, z2) ∧ Connects(z1, z2, y2, x2, x3)∧

(x1 = y1 ∨ In(y1, x1))) ⇒ At(x1, x2, x3)) ∧

∀x1:Object. ∀x2:Xcoord. ∀x3:Ycoord.

((∃z1:Xcoord. ∃z2:Ycoord.

At(y1, z1, z2) ∧ Connects(x2, x3, y2, z1, z2)∧

(x1 = y1 ∨ In(y1, x1))) ⇒ ¬At(x1, x2, x3)))
It is always possible to move a taxi into one of the four
main cardinal directions; a move that would lead out of
the grid has no effect. After moving, the location of the
taxi and every passenger in it has changed accordingly.
pickup = ((cid:2)y1:Taxi, y2:Passenger(cid:3),

5(cid:3)y:(cid:3)τ is to be understood as a list of pairs yi:τi.

∃z1:Xcoord. ∃z2:Ycoord. At(y1, z1, z2) ∧ At(y2, z1, z2)

∧ ¬∃z3:Passenger. In(y1, z3),

In(y1, y2))
Picking someone up is only possible when the taxi is at
the same location as the passenger and there is noone
already in the taxi (we assume it can only hold one
person at a time).
drop passenger = ((cid:2)y1:Taxi(cid:3), TRUE,
∀x1:Taxi. ∀x2:Passenger.

(x1 = y1 ∧ In(x1, x2)) ⇒ ¬In(x1, x2))

Finally, it is always possible to drop the taxi’s occupant
(if any) at its current location.

2. Initial State (in a closed world):

I = {At(taxi1, 5, 7), At(passenger1, 3, 1),

Destination(passenger1, 1, 1),
Connects(1, 1, east, 2, 1), . . .
Connects(10, 10, north, 10, 9)}

3. Goal description:

G = ∀p:Passenger. ∀x:Xcoord. ∀y:Ycoord.

Destination(p, x, y) ⊃ At(p, x, y)

Fj ,A((cid:9)o, (cid:9)p) holds.

In [Fox and Long, 2003] a state-transition semantics is
deﬁned for applying ADL operators in the closed-world
case. The idea is roughly this: given any closed state I,
represented as a set of ground atoms, and an operator A((cid:9)p)
whose precondition is satisﬁed in I, then the application of
A((cid:9)p) results in a new state I (cid:3) which is obtained from I by
deleting all those Fj ((cid:9)o) where γ−
Fj ,A((cid:9)o, (cid:9)p) holds in I and
adding all those where γ+
4 Mapping ADL to ES
In this section, we generalize the approach of [Lin and Reiter,
1997] and show that applying ADL operators corresponds
to a certain form of ﬁrst-order progression in ES. We begin
by constructing, given an ADL problem description, a
corresponding basic action theory Σ.
The Successor State Axioms Σ
It is not a coincidence
post:
that the normal form (2) resembles the effect axioms used by
Reiter to construct his successor state axioms as a solution to
the frame problem. Generalizing his approach (also applied
in [Pednault, 1994]), we transform a set of operator descrip-
tions to a set of successor state axioms as follows. Let

(cid:2)

γ+
Fj

def=

∃(cid:9)yi.a = Ai((cid:9)yi) ∧ γ+

Fj ,Ai

(3)

γ+

Fj ,Ai

∈N F (Ai)

Fj ,Ai

By “γ+
for those Ai for which6 there is some γ+
Ai. Using a similar deﬁnition for γ−
state axiom for Fj:

∈ N F (Ai)” we mean that there only is a disjunct
Fj ,Ai in the effect of
Fj , we get the successor

2[a]Fj ( (cid:9)xj) ≡ γ+
Fj

∧ (cid:9)τFj
( (cid:9)xj) ∨ Fj ( (cid:9)xj ) ∧ ¬γ−
(4)
Fj
( (cid:9)xj ) ensures that Fj can only
The additional conjunct7 (cid:9)τFj
become true for instantiations of the (cid:9)xj that are consistent
with the type deﬁnitions for Fj ’s arguments.

6Recall that (2) does not require a conjunct for each Fj and Ai.
7(cid:3)τ ((cid:3)t) abbreviates τ1(t1) ∧ · · · ∧ τk(tk).

IJCAI07

1848

Since our semantics deﬁnes predicates to be ﬂuent and
types have to be situation-independent, we additionally in-
clude for each type τi a successor state axiom

2[a]τi(x) ≡ τi(x).

(5)

Applying all of the above to the example, we get
γ+

= ∃y1.∃y2. a = move(y1, y2) ∧
(∃z1:Xcoord. ∃z2:Ycoord.

At

At(y1, z1, z2) ∧ Connects(z1, z2, y2, x2, x3)∧

(x1 = y1 ∨ In(y1, x1))),

γ−
At

= ∃y1.∃y2. a = move(y1, y2) ∧
(∃z1:Xcoord. ∃z2:Ycoord.

(x1 = y1 ∨ In(y1, x1))),

γ+
In
γ−
In

= ∃y1.∃y2. a = pickup(y1, y2),
= ∃y1. a = drop passenger(y1) ∧

At(y1, z1, z2) ∧ Connects(x2, x3, y2, z1, z2)∧

∀x1:Taxi. ∀x2:Passenger. (x1 = y1 ∧ In(x1, x2))
Notice that, as stated above, not all operators are mentioned
in γ+
At , but only those that possibly cause a positive truth
value for At. Therefore, the construction presented here still
incorporates a solution to the frame problem. Our Σ
post now
consists of the following sentences (among others8):
2[a]At(x1, x2, x3) ≡ γ+

∧ Object(x1) ∧ Xcoord(x2)

At

∧ Ycoord(x3) ∨ At(x1, x2, x3) ∧ ¬γ−

,

At

2[a]In(x1, x2) ≡

γ+

In

∧ Taxi(x1) ∧ Passenger(x2) ∨ In(x1, x2) ∧ ¬γ−

,

In

2[a]Taxi(x1) ≡ Taxi(x1),
2[a]Passenger(x1) ≡ Passenger(x1)
The Precondition Axiom Σ
be obtained by a similar case distinction; in the example:
π = ∃y1:Taxi.∃y2:Direction. a = move(y1, y2) ∨
∃y1:Taxi.∃y2:Passenger. a = pickup(y1, y2)
∧ ∃z1:Xcoord.∃z2:Ycoord. At(y1, z1, z2)

pre: A precondition axiom can

∧ At(y2, z1, z2) ∧ ¬∃z3:Passenger. In(y1, z3) ∨

∃y1:Taxi. a = drop passenger(y1)

(6)
The Initial Description Σ0: We ﬁnally not only have to
encode the information about the initial world state, but also
about the typing of objects:
τi(x) ≡ (τi1

(7)

(x) ∨ · · · ∨ τiki

(x))
) ∧ · · · ∧ τjkj
(xj1
(xjkj
) ⊃ (τj1
, . . . , xjkj
τi(x) ≡ (x = oj1
)
∨ · · · ∨ x = ojki
Object(x) ≡ (τ1(x) ∨ · · · ∨ τl(x))

))

(8)

(9)

(10)
Σ0 contains one sentence (7) for each “either” statement (1).
We further have one sentence of the form (8) for each type
declaration of predicate arguments. For each primitive type
τi such that oj1
, . . . , ojki are all objects declared to be of that
type, we include a sentence of the form (9). (10) ﬁnally de-
clares Object to be the union of all other types. Although the
above sentences in themselves only establish type consistency

Fj (xj1

in the initial situation (there are no 2 operators here), the spe-
cial form of Σ
post deﬁned earlier ensures that these facts will
remain true in successor situations.

To encode the actual initial state, we include for each Fj

9

Fj( (cid:9)xj ) ≡ ( (cid:9)xj = (cid:9)o1 ∨ · · · ∨ (cid:9)xj = (cid:9)oko

)

(11)

)
in case of a closed world, assuming that Fj( (cid:9)o1), . . . , Fj( (cid:9)oko
are all atoms in I mentioning Fj. In an open-world problem,
we instead include

( (cid:9)xj = (cid:9)o1 ∨ · · · ∨ (cid:9)xj = (cid:9)oko
) ⊃ Fj( (cid:9)xj ) ∧
Fj( (cid:9)xj ) ⊃ ¬( (cid:9)xj = (cid:9)p1 ∨ · · · ∨ (cid:9)xj = (cid:9)pkp
)

(12)

if the (cid:9)oi are all the objects in positive literals Fj ((cid:9)oi) and the
(cid:9)pi are all the objects in negative literals ¬Fj ((cid:9)pi) in I.
In
our closed-world example, we end up with a Σ0 consisting of:
At(x1, x2, x3) ⊃ (Object(x1) ∧ Xcoord(x2) ∧ Ycoord(x3)),
In(x1, x2)
Taxi(x)
Passenger(x) ≡ (x = passenger1),
Object(x)
At(x1, x2, x3) ≡ ((x1 = taxi1 ∧ x2 = 5 ∧ x3 = 7)∨

⊃ (Taxi(x1) ∧ Passenger(x2)),
≡ (x = taxi1),

≡ (Taxi(x) ∨ · · · ∨ Passenger(x)),

(x1 = passenger1 ∧ x2 = 3 ∧ x3 = 1)),

In(x1)

≡ FALSE

Correctness: First we note some simple consequences of
the above construction:
Lemma 1 Let A((cid:9)p) be an action (i.e. an operator and object
symbols as instantiations for A’s parameters) and (cid:9)o be object
parameters (i.e. constants) for the ﬂuent Fj . Then

1. Σ0 ∧ (cid:9)τFj

((cid:9)o) is satisﬁable iff the (cid:9)o are of the correct types

(according to the ADL problem description).

2. Σ0 |= γ ∗
Fj

(cid:3)xj a
(cid:3)o A((cid:3)p) iff γ ∗

Fj ,A((cid:9)o, (cid:9)p) is satisﬁed in the origi-

nal ADL state I, where ∗ ∈ {+, −}.

3. Σ0 |= Poss(A((cid:9)p)) iff πA((cid:9)p) is satisﬁed in the original

ADL state I and the (cid:9)p are of the correct types.

We are now ready to show the correspondence between
ADL’s state-transition semantics of adding and deleting lit-
erals and ﬁrst-order progression in ES. The deﬁnition below
is derived from Lin and Reiter’s original proposal of progres-
sion, but it is simpler due to the fact that we need not consider
arbitrary ﬁrst-order structures.

A set of sentences Σr is a progression of Σ0 through a

ground term r (wrt Σ

pre and Σ

post) iff:

1. all sentences in Σr are ﬂuent in (cid:2)r(cid:3)

(i.e. equivalent to [r]φ for some ﬂuent formula φ);

∪ Σ

2. Σ0 ∪ Σ
3. for every world wr with wr |= Σr ∪ Σ

|= Σr;

post

pre

∪ Σ

pre

post, there is

∪ Σ

a world w with w |= Σ0 ∪ Σ
wr, r · σ |= F ((cid:9)t) iff w, r · σ |= F ((cid:9)t)
for all σ ∈ R∗ and all primitive formulas F ((cid:9)t) such that
F ∈ F (including Poss).

post such that:

pre

8Here and in the following we omit axioms concerning the non-
changing predicates Connects and Destination as well as the types
Xcoord, Ycoord and Direction which encode the grid structure.

9If (cid:3)r abbreviates r1, . . . , rk and (cid:3)t stands for t1, . . . , tk, then ((cid:3)r =

(cid:3)t) means (r1 = t1) ∧ · · · ∧ (rk = tk).

IJCAI07

1849

Intuitively, for an observer in the situation after r was per-
formed (and only looking “forward” in time), it is impossible
to distinguish between a world satisfying the original theory
Σ and one that satisﬁes Σr ∪ Σ

∪ Σ

post.

pre

For a basic action theory that is the translation from an
ADL problem, it is quite easy to obtain such a progression
given an action A((cid:9)p) and an ADL state description I. Pro-
vided that Σ0∪Σ
|= Poss(A((cid:9)p)), we do the following for all
(ﬁnitely many) (cid:9)o and Fj such that Fj ((cid:9)o) is type-consistent:10

pre

1. If Σ0 |= γ+
Fj

(cid:3)xj a

(cid:3)o A((cid:3)p): add Fj((cid:9)o).

2. If Σ0 |= γ−
Fj

(cid:3)xj a

(cid:3)o A((cid:3)p): delete Fj((cid:9)o).

For open worlds, additionally delete ¬Fj ((cid:9)o) in the ﬁrst case
and add ¬Fj ((cid:9)o) in the second case. If we then denote the set
of literals to be added by Adds and the ones to be deleted by
Dels, the new state description is
I (cid:3) = (I \ Dels) ∪ Adds.
In the closed-world case, I (cid:3) corresponds precisely to the ADL
state which results from applying the A((cid:9)p) to I according to
the state-transition semantics of [Fox and Long, 2003].
Theorem 2 Let I (cid:3) be obtained as described above, given an
ADL problem and a ground action r = A((cid:9)p). Further let
Σr = {[r]ψ | ψ ∈ Σ0(I (cid:3))}, where Σ0(I (cid:3)) is the result of
applying the constructions in (7)-(12) to I (cid:3) instead of I. For
all Fj , let the consistency condition |= ¬(γ+
)a
r hold.
Fj
Then Σr is a progression of Σ0 through r in the closed-world
case.

∧ γ−
Fj

In the open-world case, this holds under the additional
Fj (with ∗ ∈ {+, −}) it is
(cid:3)xj a
.
(cid:3)o r

condition that whenever for some γ ∗
the case that Σ0∪{γ ∗
Fj

} is satisﬁable, then Σ0 |= γ ∗
Fj

(cid:3)xj a
(cid:3)o r

Let us consider progression in our closed-world example.
Suppose we want to progress through move(taxi1, south)
(m, for short). First note that Σ0 ∪ Σ
|= Poss(m). The
reader may verify (assuming an appropriate axiomatization
of Connects) that

pre

Σ0 |= γ+

8 , Σ0 |= γ−

a x1 x2 x3
m taxi1 5

a x1 x2 x3
m taxi1 5
these are all
and that
type-consistent
a
x1, x2, x3 such that γ+
m respectively γ−
Σ0. Because there are no disjuncts for move in γ+
In , γ+
γ−
x1, x2. The new state description then is
I (cid:3) = {At(taxi1, 5, 8), At(passenger1, 3, 1),

instantiations for
a
m are entailed by
In and
a
m are not entailed for any instantiation of

a
m and γ−

In

In

At

7

At

At

At

Destination(passenger1, 1, 1),
Connects(1, 1, east, 2, 1), . . .
Connects(10, 10, north, 10, 9)}

We obtain the progression Σm consisting of
[m](At(x1, x2, x3) ⊃ (Object(x1) ∧ Xcoord(x2)

∧ Ycoord(x3))),

[m](In(x1, x2)⊃(Taxi(x1) ∧ Passenger(x2))),
[m](Taxi(x)≡(x = taxi1)),
[m](Passenger(x)≡(x = passenger1)),
[m](Object(x)≡(Taxi(x) ∨ · · · ∨ Passenger(x))),

10i.e. those Fj((cid:3)o) such that Σ0 ∧ (cid:3)τFj ((cid:3)o) is satisﬁable

[m](At(x1, x2, x3)≡((x1 = taxi1 ∧ x2 = 5 ∧ x3 = 8)

∨ (x1 = passenger1 ∧ x2 = 3 ∧ x3 = 1))),

for a closed initial state,

[m](In(x1)≡FALSE)
Theorem 2 tells us that,
the
application of an ADL operator under the state-transition
semantics is the same as progressing the initial situation of
the corresponding BAT. In the open-world case, it prescribes
what the result of applying the ADL operator should be. It is
easy to show that the theorem extends to arbitrary sequences
of actions and hence that legal plans under ADL are also
legal plans in the BAT. 11

5 Golog with FF

Golog is a programming language completely deﬁned within
As shown in [Lakemeyer and
the situation calculus.
Levesque, 2005], it can be as well deﬁned directly within
ES. At its core, Golog uses a basic action theory to de-
ﬁne the meaning of its (primitive) actions and the initial sit-
uation. Based on these primitives, complex actions can be
formed using constructs from imperative programming such
as sequence (;),
if-then-else, while-loops and procedures.
In addition, non-deterministic action choices and the non-
deterministic choice of arguments (πx) offer some ﬂexibility
when executing a program, including full planning over the
primitive actions.

For our experimental results, we are using an Eclipse
Prolog implementation of IndiGolog, courtesy of Hector
Levesque; see [Sardina et al., 2004] for details of the seman-
tics. IndiGolog features on-line execution, where a program
is executed step-by-step, and progression in the sense of the
previous section, that is, the initial state is updated after each
execution of a primitive action. IndiGolog also includes an
implementation of Reiter’s forward-search planner (speciﬁed
as a Golog procedure), which can be called as achieve(G)
for a given goal formula G, and which returns as a plan a se-
quence of actions P , if one is found. P then takes the place of
achieve(G) in the program, and step-wise execution resumes,
starting with the execution of P .

The underlying BAT is the translation of the ADL problem
description for the taxi domain. The following program is
used throughout our tests:
while ∃p:Passenger. ¬atDest(p) do

(πp:Passenger)

¬atDest(p)?; achieve(atSamePos(taxi1, p));
pickup(taxi1, p); achieve(atDest(p));
drop passenger(taxi1)

endWhile
Here, atDest(p) stands for
∃x:Xcoord. ∃y:Ycoord. At(p, x, y) ∧ Destination(p, x, y)
and atSamePos(t, p) abbreviates
∃x:Xcoord. ∃y:Ycoord. At(p, x, y) ∧ At(t, x, y).
The following table summarizes, for varying grid sizes and
number of passengers, the run-time behavior (in seconds)
of the original IndiGolog versus IndiGolog where achieve
is replaced by a call to the ADL planner FF [Hoffmann and

11Legal means that all actions are executable and that the goal is

satisﬁed in the ﬁnal state or progressed situation.

IJCAI07

1850

Nebel, 2001]; according to Theorem 2, the legal plans in both
cases are the same. Each test was run on four instances (with
a random distribution of passengers and destinations), and
the average run-time is given. Experiments were carried out
on a Pentium M with 1.8GHz and 1GByte of main memory.

Prob. size
3x3, 1 Pass.
3x3, 5 Pass.
3x3, 10 Pass.
4x4, 1 Pass.
4x4, 5 Pass.
4x4, 10 Pass.
7x7, 1 Pass.
7x7, 5 Pass.
7x7, 10 Pass.

Golog + FF Golog + achieve
6.52
8.21
9.99
11.75
38.33
—
—
—
—

6.50
8.83
12.87
7.25
10.37
16.97
7.55
152.79
—

The table clearly shows that the built-in Golog planner cannot
compete for all but the smallest problem instances. (Missing
entries are tests which did not return a result after 10 minutes
and were aborted.)

We want to emphasize that our approach does not aim
at competing with existing planning systems on solving
classical planning problems.12 Instead, we envision that the
combined system pays off in scenarios where each approach
by itself would be either inefﬁcient or fail completely.
In
particular, this is the case when the problem is very large
and information has to be gathered at run-time. To illustrate
the idea, instead of the toy example above, consider a robot
constantly transporting items in a warehouse: The robot
would execute thousands of actions, including sensing its en-
vironment and servicing new transportation requests. While
it does not seem feasible to solve the whole problem by an
ofﬂine planner, it is certainly possible to write an IndiGolog
program to solve such a task. The role of the planner is then
to solve certain sequential subtasks (e.g. ﬁnding an optimal
schedule for currently pending requests) at which Golog by
itself would be too slow. We believe that the results in this
paper lay the necessary ground work for such scenarios.

6 Conclusion
In this paper we showed that it pays off to combine the action
language Golog with modern planners.
In doing so, we
developed a declarative semantics for ADL as progression
in the situation calculus. Currently we are also considering
larger fragments of PDDL [Fox and Long, 2003] with fea-
tures such as time and preferences. It would be interesting to
also consider other action formalisms like Flux [Thielscher,
2002] or the family of A languages [Gelfond and Lifschitz,
1998]. Our hope is that this will lead to a convergence of the
planning and action-language communities, which have been
largely separated since the inception of STRIPS.

Acknowledgments
This work has partly been supported by the EC under contract
number FP6-004250-CoSy and DFG grants La 747/13-2 and

12In additional experiments we gave FF the overall task of ﬁnding
a plan to deliver all passengers to their destinations. It was usually
faster than the combination of Golog and FF; e.g. ﬁnding a plan for
the 7x7 grid with 5 passengers took 29.74 seconds.

Ne 623/10-1.

References
[Bonet and Geffner, 2001] B. Bonet and H. Geffner. Heuris-

tic Search Planner 2.0. AI Magazine, 22(3):77–80, 2001.

[Burgard et al., 1999] W. Burgard, A.B. Cremers, D. Fox,
D. H¨ahnel, G. Lakemeyer, D. Schulz, W. Steiner, and
S. Thrun. Experiences with an interactive museum tour-
guide robot. Artif. Intell., 114(1-2):3–55, 1999.

[Eyerich et al., 2006] P. Eyerich, B. Nebel, G. Lakemeyer,
and J. Claßen. Golog and PDDL: What is the relative ex-
pressiveness? submitted for publication, 2006.

[Fox and Long, 2003] M. Fox and D. Long. PDDL2.1: An
extension to PDDL for expressing temporal planning do-
mains. J. Artif. Intell. Res., 20:61–124, 2003.

[Gelfond and Lifschitz, 1998] M. Gelfond and V. Lifschitz.
Action languages. Electronic Transactions on AI, 3, 1998.
[Hoffmann and Nebel, 2001] J. Hoffmann and B. Nebel. The
FF planning system: Fast plan generation through heuris-
tic search. J. Artif. Intell. Res., 14:253–302, 2001.

[Lakemeyer and Levesque, 2004] G.

and
H. Levesque. Situations, si! situation terms, no! In Proc.
KR-04. AAAI Press, 2004.

Lakemeyer

[Lakemeyer and Levesque, 2005] G.

and
H. Levesque. Semantics for a useful fragment of the
situation calculus. In Proc. IJCAI-05, 2005.

Lakemeyer

[Levesque and Lakemeyer, 2001] H. Levesque and G. Lake-
meyer. The Logic of Knowledge Bases. MIT Press, 2001.

[Levesque et al., 1997] H.

Reiter,
Y. Lesp´erance, F. Lin, and R. Scherl. GOLOG: A
logic programming language for dynamic domains.
J.
Log. Prog., 31:59–84, 1997.

Levesque,

R.

[Lifschitz, 1986] V. Lifschitz. On the semantics of STRIPS.
In Reasoning about Actions and Plans: Proc. of the 1986
Workshop, pages 1–9. Morgan Kaufmann, 1986.

[Lin and Reiter, 1997] F. Lin and R. Reiter. How to progress

a database. Artif. Intell., 92(1-2):131–167, 1997.

[Pednault, 1989] E. Pednault. ADL: Exploring the middle
In

ground between STRIPS and the Situation Calculus.
Proc. KR-89, pages 324–332, 1989.

[Pednault, 1994] E. Pednault. ADL and the state-transition

model of action. J. Log. Comput., 4(5):467–512, 1994.

[Reiter, 2001] R. Reiter. Knowledge in action: logical foun-
dations for specifying and implementing dynamical sys-
tems. MIT Press, Cambridge, Mass., 2001.

[Sardina et al., 2004] S.

Sardina,

G. De Giacomo,
Y. Lesp´erance, and H. Levesque. On the semantics
of deliberation in IndiGolog: From theory to implemen-
tation. Annals of Mathematics and Artiﬁcial Intelligence,
41(2–4):259–299, 2004.

[Thielscher, 2002] M. Thielscher. Programming of reason-
In Proc. KR-02.

ing and planning agents with FLUX.
AAAI Press, 2002.

IJCAI07

1851

