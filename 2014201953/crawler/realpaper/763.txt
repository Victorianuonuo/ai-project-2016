Non-monotonic Temporal Logics for Goal Speciﬁcation

Chitta Baral and Jicheng Zhao

Department of Computer Science and Engineering

Arizona State University
Tempe, Arizona 85281

{chitta,jicheng}@asu.edu

Abstract

One of the main ways to specify goals of agents is
to use temporal logics. Most existing temporal log-
ics are monotonic. However, in representing goals
of agents, we often require that goals be changed
non-monotonically. For example, the initial goal of
the agent may be to be always in states where p is
true. The agent may later realize that under certain
conditions (exceptions) it is ok to be in states where
p is not true. In this paper, we propose a simple ex-
tension of LTL, which we call N-LTL, that allows
non-monotonic speciﬁcation of goals. We study
properties of N-LTL. We also consider a transla-
tion from N-LTL to logic programs and study the
relationship between N-LTL and logic programs.

1 Introduction and Motivation
In specifying goals of agents [Bacchus and Kabanza, 1998;
Niyogi and Sarkar, 2000; Baral et al., 2001; Baral and Zhao,
2004; 2006] many have used temporal logics such as linear
temporal logic LTL, branching time temporal logics CTL∗,
π-CTL∗, and their extensions. However, all these logics are
monotonic.
In specifying goals of agents, often there is a
need of being able to specify goals non-monotonically. For
example, initially, an agent may be given a goal of having p
true through the trajectory while reaching s. Later, the agent
may decide to weaken its goal so that in certain exceptional
cases p does not have to be true. One way to do that would
be for the agent to replace its original goal by a revised goal.
Coming up with a completely new revised goal, or obtaining
the revised goal by doing surgery on the original goal spec-
iﬁcation violate the principle of elaboration tolerance [Mc-
Carthy, J., 1988]. But if we use existing temporal logics, we
do not have a choice. What we need is a goal speciﬁcation
language that allows us to update the goal speciﬁcation by
simply adding new statements to the original speciﬁcation.
Such a goal speciﬁcation language would be non-monotonic.
Another motivation for having a non-monotonic goal spec-
iﬁcation language that allows easy updating through adding
is that we may not want to give the agent a directive that
is too speciﬁc, too complicated, and that takes into account
all possible exceptions, from the very beginning. Besides
we may not even know all the exceptions initially. A good

non-monotonic goal speciﬁcation language should allow us
to specify a simple goal initially and should allow us to reﬁne
it by adding new exceptions.

Although non-monotonic versions of various modal logics
[McDermott, 1982] have been proposed in the past, so far we
have come across only two1 [Fujiwara and Honiden, 1991;
Saeki, 1987] non-monotonic versions of temporal logics. The
ﬁrst extends auto-epistemic logic with temporal operators and
does not explore issues such as elaboration tolerant represen-
tation of exceptions and weak exceptions. The second has
semantics issues that are mentioned in the ﬁrst.

In this paper we start with developing a non-monotonic
temporal logic based on the linear temporal logic LTL and
then brieﬂy mention non-monotonic versions of a branching
time temporal logic.
In designing our non-monotonic ver-
sions of temporal logics, we keep focus on our overall aim of
having non-monotonic goal languages. So rather than follow
the path of non-monotonic modal logics and auto-epistemic
logic we focus on speciﬁc aspects of knowledge represen-
tation that need non-monotonicity and borrow some speciﬁc
techniques that allow such non-monotonicity.

One of the important use of non-monotonicity is the ability
to express normative statements such as “normally q’s have
the property p.” This resonates well with our need of non-
monotonic goal languages as we may need to specify that
“normally a state should satisfy the property p”. Accompa-
nying normative statements we have various kinds of excep-
tions. For example, consider the age old normative statement
“birds normally ﬂy”. One kind of exception (called “strong
exceptions”) to such a statement is that “penguins are birds
that do not ﬂy”. Another kind of exception, referred to as
weak exceptions, is that “injured birds are weak exceptions to
the normative statement about birds ﬂying;” as for wounded
birds we do not know whether they ﬂy or not. There is a
need of similar exceptions with respect to goal speciﬁcations.
A normative goal speciﬁcation may specify that “normally
a state should satisfy the property p”. Strong exceptions may
be states that satisfy some speciﬁc conditions, while weak ex-
ceptions may be other states that satisfy some other speciﬁc
conditions.

1There are several other papers, such as [Giannotti et al., 1999;
Stein and Morgenstern, 1994; MacNish and Fallside, 1990], which
from their titles seem like dealing with non-monotonic temporal log-
ics. However, they are not quite related.

IJCAI-07

236

To accommodate the above we introduce two special nota-

tions2

• [r]φ
• [[r]]φ

The intuitive meaning of the ﬁrst one is that normally φ holds
in a state and the label r lists the weak exceptions. The intu-
itive meaning of the second one is that normally φ holds in a
state and the label r lists the strong exceptions.

The role of r here is similar to the role of labeling defaults
and normative statements when representing them in logic
programming. There, often the label is used as a parameter
with respect to the ab predicates.

Since the non-monotonicity in goal languages is not due to
having incomplete knowledge about the states, but rather due
to the speciﬁer not quite precisely knowing what she wants,
we do not use operators such as the negation as failure opera-
tor ‘not’ from logic programming. Here the issue is different
from inferring or assuming negation by default.

On the other hand we borrow the idea behind program
completion in logic programming to specify and interpret the
conditions listed corresponding to the label r. Thus there may
be a set of conditions written as
(cid:2)r : ψ1(cid:3)

(cid:2)r : ψk(cid:3)

. . .

that specify the strong exception or weak exception condi-
tions with respect to r. Given the above, the overall condition
associated with r becomes ψ1 ∨ . . . ∨ ψk. One is allowed
to add additional conditions. For example, if (cid:2)r : ψk+1(cid:3) is
added to the above set then the overall condition associated
with r becomes ψ1 ∨ . . . ∨ ψk ∨ ψk+1.

We now illustrate the above with respect to an example.

Example 1 Suppose initially we want to maintain p true
while reaching for s. We know beforehand that our aim to
maintain p is not strict; it is just that we do not know yet, un-
der what conditions truth of p may not be necessary. After a
while, we realize that when q is true we may not need to have
p true.
The initial goal can be written in our language as (cid:2)g :
(2[r]p) ∧ 3s(cid:3). It says that we should maintain p while reach-
ing s. If the strong exception r happens in some states, we
may not need to maintain p in those states. The weak excep-
tion r is then speciﬁed as (cid:2)r : q(cid:3).

To informally illustrate how non-monotonicity is mani-
fested in the above example, we ﬁrst deﬁne when a language
is monotonic.

Deﬁnition 1 A logic L together with a query language Q and
entailment relation |= is monotonic if for all T , T (cid:3) in L and t
in Q, T |= t implies T ∪ T (cid:3) |= t.
2

With respect to Example 1 let T be {(cid:2)g : (2[r]p) ∧ 3s(cid:3)},
T (cid:3) = {(cid:2)r : q(cid:3)}. Intuitively, T |= 2p and T ∪ T (cid:3) is equivalent
to 2(p∨q)∧3s in LTL; thus T ∪T (cid:3) (cid:7)|= 2p. This illustrates the

2Unlike traditional exceptions and weak exceptions, we want the
speciﬁer to have pre-decided control over whether a particular goal
fragment could have a weak exception or an exception, but not both.

non-monotonicity of our proposed language. We now move
to the formal deﬁnition of our language and its semantics.

The rest of this paper is organized as follows: Since our
ﬁrst non-monotonic goal language N-LTL is based on LTL,
we ﬁrst give an overview of the temporal logic LTL. Then, in
Section 3, we propose the syntax and semantics of a new lan-
guage N-LTL, together with its properties. In Section 4, we
study the relationship between N-LTL and logic programs.
We then brieﬂy discuss how one can use a similar approach
to develop non-monotonic versions of other temporal logics
such as CTL∗.

2 Background: Goal Representation Using

LTL

In this section, we summarize the linear temporal logic LTL
and what it means for a sequence of actions to be a plan
with respect to a goal in LTL. Syntactically, LTL formulas
are made up of propositions, propositional connectives ∨, ∧,
and ¬, and future temporal connectives (cid:8), 2, 3 and U. We
now formally deﬁne truth values of temporal formulas with
respect to trajectories. A trajectory is an inﬁnite sequence of
states.
Deﬁnition 2 Let (cid:2)p(cid:3) be an atomic proposition, (cid:2)f (cid:3) an LTL
formula.

(cid:2)f (cid:3) ::= (cid:2)p(cid:3)|(cid:2)f (cid:3) ∧ (cid:2)f (cid:3) | (cid:2)f (cid:3) ∨ (cid:2)f (cid:3) | ¬(cid:2)f (cid:3) | (cid:8) (cid:2)f (cid:3) |
2(cid:2)f (cid:3) |3(cid:2)f (cid:3) |(cid:2)f (cid:3)U(cid:2)f (cid:3)

2

Deﬁnition 3 Let σ given by s0, s1, . . . , sk, sk+1, . . . be a tra-
jectory, p denote a propositional formula, sj (j ≥ 0) denote a
state, and f and fis (i = 1, 2) denote LTL formulas.

• (sj, σ) |= p iff p is true in sj.
• (sj, σ) |= ¬f iff (sj , σ) (cid:7)|= f .
• (sj, σ) |= f1 ∨ f2 iff (sj, σ) |= f1 or (sj, σ) |= f2.
• (sj, σ) |= f1 ∧ f2 iff (sj, σ) |= f1 and (sj, σ) |= f2.
• (sj, σ) |= (cid:8)f iff (sj+1, σ) |= f .
• (sj, σ) |= 2f iff (sk, σ) |= f , for all k ≥ j.
• (sj, σ) |= 3f iff (sk, σ) |= f , for some k ≥ j.
• (sj, σ) |= f1 U f2 iff there exists k ≥ j such that
(sk, σ) |= f2 and for all i, j ≤ i < k, (si, σ) |= f1.
2

Often [Bacchus and Kabanza, 1998; Baral et al., 2001]
planning with respect to LTL goals are formalized with the
assumption that there is complete information about the ini-
tial state, and the actions are deterministic. Let Φ be a tran-
sition function that deﬁnes transitions between states due to
actions. Φ(si, ak) = sj iff the action ak transits the agent
from state si to state sj. Let s be a state designated as the
initial state, and let a1, . . . , an be a sequence of deterministic
actions whose effects are described by a domain description.
Since truth of LTL formulas are deﬁned with respect to
a reference state and a trajectory made up of an inﬁnite se-
quence of states, to deﬁne the correctness of a plan consisting

IJCAI-07

237

of a ﬁnite sequence of actions with respect to an initial state
and an LTL goal, the ﬁnite sequence of states obtained by ap-
plying the plan to the initial state is appended with the last
state inﬁnitely.

The trajectory corresponding to s and a1, . . . , an is the
sequence s0, s1, . . . , that satisﬁes the following conditions:
s = s0, si+1 = Φ(si, ai+1), for 0 ≤ i ≤ n − 1, and
sj+1 = sj, for j ≥ n.
Deﬁnition 4 (Plans with respect to LTL goals) The
se-
quence of actions a1, . . . , an is a plan from the initial state s
for the LTL goal f , if (s, σ) |= f , where σ is the trajectory
corresponding to s and a1, . . . , an.
2

The role of LTL in specifying planning goals has been well
studied and examples of that can be found in [Bacchus and
Kabanza, 1998; Niyogi and Sarkar, 2000; Baral et al., 2001].

3 N-LTL: A Non-monotonic Extension of LTL
In this section, we extend LTL to capture non-monotonic re-
quirements in specifying a goal. We call the new language
N-LTL which stands for non-monotonic LTL. We ﬁrst deﬁne
the syntax and semantics of the language.

3.1 Syntax
While designing the language we asked ourselves two ques-
tions.

• If syntactically the goal is one temporal formula, how
can we revise it to have new goals by just adding to the
original formula?

• How to refer to one part of a speciﬁcation in another part

of the speciﬁcation?

For the ﬁrst we borrow ideas from Reiter’s approach to
reason about actions [Reiter, 2001] where he compiles his
speciﬁcation to classical logic. While the classical logic
part is monotonic, reasoning with respect to the speciﬁca-
tion language is non-monotonic and the non-monotonicity is
achieved through the compilation process. For the second
we borrow ideas from logic programming. Similar to a logic
program consisting of a set of rules, we consider each N-LTL
formula to be a set of rules and we use rule labels such as r
in Example 1 to link these rules into one temporal formula.
Deﬁnition 5 Let {g}, R, and P be three disjoint sets of
atoms. Let (cid:2)r(cid:3) be an atom in R, (cid:2)p(cid:3) be an atom in P ,
e ∈ {g} ∪ R. (cid:2)f (cid:3) is a formula deﬁned below:
(cid:2)f (cid:3) ::= (cid:2)p(cid:3)|(cid:2)f (cid:3) ∧ (cid:2)f (cid:3) | (cid:2)f (cid:3) ∨ (cid:2)f (cid:3) | ¬(cid:2)f (cid:3) | (cid:8) (cid:2)f (cid:3) |2(cid:2)f (cid:3) |
3(cid:2)f (cid:3) |(cid:2)f (cid:3)U(cid:2)f (cid:3) |[(cid:2)r(cid:3)]((cid:2)f (cid:3)) |[[(cid:2)r(cid:3)]]((cid:2)f (cid:3))

An N-LTL formula is a set of rules (cid:2)e : f (cid:3), Where e is the
2

head, and f is the body of the rule (cid:2)e : f (cid:3).
In an N-LTL formula, g is a special symbol that stands for
the ﬁnal goal formula. R is the set of labels to be used to
deﬁne corresponding strong exceptions and weak exceptions.
A formula f deﬁnes the conditions of atoms in R or the con-
ditions of g. Intuitively, [(cid:2)r(cid:3)]((cid:2)f (cid:3)) means that normally f is
true, with the weak exceptions denoted through r. [[(cid:2)r(cid:3)]]((cid:2)f (cid:3))
means that normally f is true, with the strong exceptions de-
noted through r. The weak and strong exception conditions
corresponding to r are deﬁned through other rules.

Deﬁnition 6 (Atom Dependency) Let (cid:2)e1 : f1(cid:3) be a rule in
an N-LTL formula. If e2 ∈ R occurs in the body of (cid:2)e1 : f1(cid:3),
then e2 depends on e1. The dependency relation is transitive.
2

Deﬁnition 7 (Loop Free) An N-LTL formula is loop free if
in the formula, no atom in R depends on itself.
2

Example 2 The following formula

(cid:2)g : [r1](p)Uq(cid:3)
(cid:2)r1 : [r2](s)(cid:3)
(cid:2)r2 : [r1](t)(cid:3)

is not loop free as r1 depends on r2 and r2 depends on r1.

An N-LTL speciﬁcation is a loop free N-LTL formula.

3.2 Semantics of N-LTL Speciﬁcations

As we mentioned earlier, we deﬁne the semantics of N-LTL
speciﬁcations by following the approach taken by Reiter to
reason about actions: we compile N-LTL speciﬁcations to
LTL theories.

Deﬁnition 8 Given a loop-free N-LTL formula (i.e., an N-
LTL speciﬁcation) T , we translate it to an LTL formula
T r(T ) as follows:

1. Let (cid:2)e : f1(cid:3), (cid:2)e : f2(cid:3), · · · , (cid:2)e : fn(cid:3) be all the rules in T
with e in the head, e ∈ {g} ∪ R. We construct a formula
f1 ∨ f2 ∨· · ·∨fn, and we call it E(e). We do this for any
atom e if the set of rules with e in the head is not empty.
2. If atom a1 depends on atom a2, and E(a1) is deﬁned,
we replace any occurrence of [a1](f ) in E(a2) with f ∨
E(a1). The revised formula is still called E(a2).

3. If atom a1 depends on atom a2, and E(a1) is deﬁned,
we replace any occurrence of [[a1]](f ) in E(a2) with
E(a1). The revised formula is still called E(a2).

4. We do Step 2 and Step 3 recursively until no atoms e
depending on g while E(e) is not empty occurs in E(g).
5. Finally, in E(g), we replace all remaining [r](f ) and

[[r]](f ) with f . The revised goal formula is T r(T ).

2

Example 3 Let us consider the N-LTL formula T as follows:

(cid:2)g : (3[r1](p)) ∧ [r3](q)(cid:3)
(cid:2)r1 : [[r2]](v)(cid:3)
(cid:2)r1 : 2t(cid:3)
(cid:2)r2 : s(cid:3)

According to the deﬁnition, we know initially E(g) =
3[r1](p) ∧ [r3](q), E(r1) = [[r2]](v) ∨ 2t, and E(r2) = s.
By replacing the formulas according to the dependence rela-
tions, we have E(g) = 3(p∨[[r2]](v)∨2t)∧[r3](q) = 3(p∨
s ∨ 2t) ∧ [r3](q). There is no rules with r3 as the head. Thus
E(g) = 3(p∨s∨2t)∧q. Further, T r(T ) = 3(p∨s∨2t)∧q.

Loop-free N-LTL formulas (also called N-LTL speciﬁca-

tion) have the following properties.

IJCAI-07

238

Proposition 1 Given an N-LTL speciﬁcation T , T r(T ) is a
well deﬁned LTL formula.

Given this property, we can deﬁne when a plan satisﬁes an

N-LTL goal.

Deﬁnition 9 Let T be an N-LTL speciﬁcation. Given a state
s, and a trajectory σ = s0, s1, · · · , sk, · · · , (s, σ) |= T in
N-LTL if (s, σ) |= T r(T ) with respect to LTL.
2
Deﬁnition 10 (Plans with respect to N-LTL goals) Let T
be an N-LTL speciﬁcation. A sequence of actions a1, · · · ,
an is a plan from the initial state s for the N-LTL goal T , if
σ is the trajectory corresponding to s and a1, · · · , an, and
(s, σ) |= T in N-LTL.
2

N-LTL speciﬁcations that do not have any strong excep-
tions (but may have weak exceptions) always make the goal
weaker by accepting more plans when adding new rules.
Proposition 2 For any N-LTL speciﬁcation T and T ∪ T (cid:3), if
P is a plan with respect to T which does not have any strong
exceptions (but may have weak exceptions), then P is a plan
with respect to T ∪ T (cid:3).

Temporal logics such as LTL have a different property
when we consider an LTL goal formula to be a set of tem-
poral formulas and add new formulas to an existing theory.
If P is a plan with respect to an LTL goal T ∪ T (cid:3) then P is
also a plan with respect to T . In LTL, adding more formulas
reduces (or at best leaves it unchanged) the set of plans satis-
fying it while in N-LTL that does not have strong exceptions,
adding more rules enlarges the set of plans satisfying it (or
at least leaves it unchanged). This is not the case when the
N-LTL theory has strong exceptions.

Example 4 Consider the problem in Example 1. The initial
N-LTL formula is the speciﬁcation T given as:

(cid:2)g : 2[r1](p) ∧ 3s(cid:3)

According to the deﬁnition, since there are no rules with head
r1, we have (sj , σ) |= T in N-LTL iff (sj, σ) |= 2p ∧ 3s in
LTL.

Suppose we add T (cid:3), as given below, to it:

(cid:2)r1 : q(cid:3)

According to the deﬁnition, we know E(g) = (2[r1](p))∧3s
and E(r1) = (q). Further revision makes E(g) = 2(p ∨
q) ∧ 3s. Thus, (sj, σ) |= (T ∪ T (cid:3)) in N-LTL iff (sj, σ) |=
2(p ∨ q) ∧ 3s in LTL.

We can check that any plan satisﬁes LTL formula 2p ∧
3s also satisﬁes 2(p ∨ q) ∧ 3s. T does not have strong
exceptions, and Proposition 2 holds here.

Now, let us deﬁne what do we mean when we say that N-
LTL is non-monotonic. LTL is monotonic since T |= t im-
plies T ∪T (cid:3) |= t where T and T (cid:3) are two sets of LTL temporal
formulas and t is an LTL temporal formula. We consider the
following entailment in N-LTL.
Deﬁnition 11 (Entailment) T |= t if T r(T ) |= t, where T
is an N-LTL speciﬁcation and t is an LTL formula.
2

Proposition 3 The entailment
monotonic.

in Deﬁnition 11 is non-

Let us consider one example to illustrate the use of N-LTL.

Example 5 One professor asks his robot to make a photo-
copy of one document and fetch a cup of coffee. However, be-
fore the robot goes out the ofﬁce, the professor ﬁnds out that
the coffee is sold out. No plan can satisfy the goal given to
the robot. The professor would now like to weaken the goal.
Following are three possibilities:

1. He would be happy with a cup of tea instead;

2. He just needs the copy of the document and is willing to

forget about the coffee;

3. The robot may come back to his ofﬁce with the document

copied and go about looking for the coffee later.

If the professor was using N-LTL and from past experience
knows that he may have to revise his goal, especially with
respect to coffee, he can express his initial goal as:

(cid:2)g : 3(([r]cof f ee) ∧ copy ∧ 3of f ice)(cid:3)

It is equivalent to satisfying 3(cof f ee ∧ copy ∧ 3of f ice)

in LTL.

Later on, according to the new conditions and new alter-
natives, the professor may revise his original goal by adding
one of the following three rules:

1. Adding the new rule (cid:2)r : tea(cid:3) which makes the overall
goal equivalent to 3((cof f ee∨ tea)∧ copy ∧ 3of f ice)
in LTL;

2. Let (cid:12) denote true and ⊥ denote f alse. Adding the new
rule (cid:2)r : (cid:12)(cid:3) which makes the overall goal equivalent to
3((cof f ee ∨ (cid:12)) ∧ copy ∧ 3of f ice) in LTL, which is
equivalent to 3(copy ∧ 3of f ice) in LTL;

3. Adding the new rule (cid:2)r : 3(cof f ee ∧ 3of f ice)(cid:3) which
makes the overall goal equivalent to 3(cof f ee ∧ copy ∧
3of f ice)∨3(copy∧3of f ice∧3(cof f ee∧3of f ice))
in LTL. Now it allows the agent to get the document
copied ﬁrst before waiting for the coffee.

If we want to get tea instead of coffee, we should know
initially that the sub-task of getting coffee can be replaced by
a different goal.3 Now, the initial formulation is

(cid:2)g : 3(([[r]]cof f ee) ∧ copy ∧ 3of f ice)(cid:3)

When we add a new goal (cid:2)r : tea(cid:3). The goal afterwards is
equivalent to 3(tea ∧ copy ∧ 3of f ice) in LTL.

Note that “copy” must be satisﬁed in this domain as the
professor does not want to weaken this condition. While the
robot is on its way of getting things done, some other excep-
tions may happen. With N-LTL, we may further reﬁne part of
the goal.

Note that if a rule in the formula has a substring [[r1]](f ),
then removing rules (cid:2)r1 : ⊥(cid:3) may affect the semantics of the
formula. If there is no substring [[r1]](f ) in any part of the
formula, then we can remove rules(cid:2)r1 : ⊥(cid:3) without affecting
the semantics of the formula.

3We made this design decision consciously. Thus unlike in logic
programming where the same default may have strong exceptions
and weak exceptions, here we empower the initial goal speciﬁer to
make that decision beforehand.

IJCAI-07

239

3.3 Complexity of N-LTL

The complexity of various problems (planning etc.) with re-
spect to N-LTL speciﬁcations is at the same level of the poly-
nomial hierarchy as with respect to LTL speciﬁcations. This
is because, the loop-free criteria and the fact that there are
polynomial number of special symbols like [r] and [[r]] en-
sure that an N-LTL speciﬁcation can be converted to an LTL
speciﬁcation in polynomial time and the increase in size is
also polynomial.

4 Relation to Logic Programs

We now consider the relation between N-LTL goals and logic
programs, especially with respect to planning. Use of tempo-
ral domain knowledge in planning was ﬁrst proposed in [Bac-
chus and Kabanza, 1998]. Planning with temporal logic
LTL has also been studied in [Neljanko and Niemel¨a, 2001;
Son et al., 2002]. In this section, we translate a domain de-
scription and a goal speciﬁed in N-LTL to a logic program.
We consider the relations of stable models of the translated
programs and the original planning problems. In the follow-
ing translation, for i (cid:7)= j, even if si and sj in the trajectory are
referring to the same state, we assign them different labels.
Deﬁnition 12 Let σ given by s0, s1, · · · , sk, · · · be a trajec-
tory, p denote an atom, sj denote a state, f , f1, and f2 denote
LTL formulas that also take elements in R as atoms. We now
deﬁne an encoding of σ, called encoding(σ, T ), where T is
an N-LTL formula. The encoding consists of the following
parts:

1. For any i such that 0 ≤ i, there is a rule

next(si, si+1) ← .

2. For any 0 ≤ i < j, there is a rule

f uture(si, sj) ← .

3. If p is true in state s, there is a rule

6. The following rules corresponding to the temporal oper-

ator U are in the program:

nf irst(s, s2, f ) ← f uture(s, s1),

f uture(s1, s2), holds(s1, f ).

f irst(s, s2, f ) ← not nf irst(s, s2, f ),

f uture(s, s2), holds(s2, f ).

nholds(s, f1Uf2) ← f irst(s, s2, f2), f uture(s, s1),
f uture(s1, s2), holds(s1, ¬f1).

holds(s, f1Uf2) ← not nholds(s, f1Uf2).

2

Deﬁnition 13 We encode an N-LTL formula T into a logic
program, denoted by LP (T ) as follows:

For each rule (cid:2)e : f (cid:3) in T , we create a list of the atoms
from R (the set of rule labels) that occur in f . If one atom
occurs multiple times in f , we include it as many times in the
list. We now revise f to a set of new formulas simplif y(f ):
• For any atom rk in the list, if it is not in the head of
any rule, then we replace all occurrences of [rk](fk) or
[[rk]](fk) with fk;

• Otherwise, suppose the ith atom in the list is ej. If it
occurs in the formula f as [[ej]](fj), then we replace
this sub-formula [[ej]](fj) in f with ej.

• Suppose a list of atoms ei1, ei2, · · · , eil remain in for-
mula f . We calculate a Cartesian product of l sets, where
the sth set is {eis, fis} and the sth atom eis occurs in
the formula f as [eis](fis). We replace each occurrence
[eis](fis) by either eis or fis according to its value in
one element of the Cartesian product. Thus we have 2l
different combinations. We consider each combination
as one instance of simplif y(f ), the revised formula of
f .

We then add the rule

holds(s, e) ← holds(s, simplif y(f )).

holds(si, p) ← .

into LP (T ) for each of formula in simplif y(f ).

2

where si is the ith state in the trajectory and it corre-
sponds to the state s.

Example 6 Suppose one rule in an N-LTL goal T is as fol-
lows:

4. The following rules corresponding to ¬, ∨, and ∧ are in

(cid:2)r : [r1](f ) ∧ [r2](h) ∧ [[r1]](s) ∧ [[r3]](t)(cid:3)

the program

holds(s, ¬f ) ← not holds(s, f ).

holds(s, f1 ∨ f2) ← holds(s, f1).
holds(s, f1 ∨ f2) ← holds(s, f2).
holds(s, f1 ∧ f2) ← holds(s, f1), holds(s, f2).

5. The following rules corresponding to temporal operators

(cid:8), 3, and 2 are in the program:

holds(s, (cid:8)f ) ← holds(s1, f ), next(s, s1).
holds(s, 3f ) ← holds(s1, f ), f uture(s, s1).
holds(s, 2f ) ← not holds(s, 3¬f ).

There are rules in T with the head r1 and also rules with the
head r2. There are no rules in T with the head r3. We need
to add the following 4 rules into LP (T ):

holds(s, r) ← holds(s, f ∧ h ∧ r1 ∧ t).
holds(s, r) ← holds(s, f ∧ r2 ∧ r1 ∧ t).
holds(s, r) ← holds(s, r1 ∧ h ∧ r1 ∧ t).
holds(s, r) ← holds(s, r1 ∧ r2 ∧ r1 ∧ t).

Note that in the translated program, we have an atom
holds(s, f ∧ r2 ∧ r1 ∧ t). r1 and r2 are not atoms in the
transition system. They are deﬁned by other rules.

IJCAI-07

240

Example 7 Consider the N-LTL goal as follows:

(cid:2)g : h(cid:3)
(cid:2)g : 3[r1](f )(cid:3)
(cid:2)r1 : h(cid:3)
(cid:2)r1 : 2t(cid:3)

It is known that this formula is equivalent to the LTL formula
h ∨ 3(h ∨ 2t ∨ f ). We have the following rules in LP (T ):

holds(s, g) ← holds(s, h).
holds(s, g) ← holds(s, 3f ).
holds(s, g) ← holds(s, 3r1).
holds(s, r1) ← holds(s, h).
holds(s, r1) ← holds(s, 2t).

Consider a trajectory σ = s0, s1, s1, · · · , s1, · · · where
only t is true in state s1. No ﬂuent is true in state s0.
In the program encoding(σ, T ), we know holds(s2, 2t) is
true in all its stable models. Thus we have holds(s2, r1)
in all stable models of encoding(σ, T ) ∪ LP (T ). Further,
according to Item 5 in Deﬁnition 12, since there is a rule
holds(s0, 3r1) ← holds(s0, r1), f uture(s0, s1). we know
holds(s1, 3r1). Thus holds(s0, g) is true in all stable mod-
els of the program.
Proposition 4 Given a trajectory σ = s0, s1, · · · , sn, · · · .
Let T be an N-LTL speciﬁcation. (s0, σ) |= T in N-LTL iff
encoding(σ, T ) ∪ LP (T ) |= holds(s0, g).

5 Non-monotonic Extension of CTL∗,

π-CTL∗, and P-CTL∗

Different from LTL, in CTL∗ [Emerson and Srinivasan, 1989;
Emerson, 1990], π-CTL∗ [Baral and Zhao, 2004], and P-
CTL∗ [Baral and Zhao, 2006], formulas are categorized as
state formulas and path formulas. As a consequence, the
corresponding non-monotonic languages should be deﬁned
with respect to path formulas and state formulas respectively.
We now deﬁne the way of extending the deﬁnition of non-
monotonic temporal logics for CTL∗, called N-CTL∗. We
base the language N-CTL∗ on CTL∗.

We refer readers to [Emerson and Srinivasan, 1989; Emer-
son, 1990] for the syntax and semantics of CTL∗. There are
two kinds of formulas in CTL∗: state formulas and path for-
mulas. Normally state formulas are properties of states while
path formulas are properties of paths. Recall that the sym-
bols A and E are the branching time operators meaning ‘for
all paths’ and ‘there exists a path’ respectively.
Deﬁnition 14 Let {g}, Rpf , Rsf and P be four disjoint sets
of atoms. Let (cid:2)rpf (cid:3) be an atom in Rpf , (cid:2)rsf (cid:3) be an atom in
Rsf , (cid:2)p(cid:3) be an atom in P , e ∈ {g} ∪ Rsf . Let (cid:2)sf (cid:3) denote a
state formula, and (cid:2)pf (cid:3) denote a path formula.
(cid:2)sf (cid:3) ::= (cid:2)p(cid:3) | (cid:2)sf (cid:3) ∧ (cid:2)sf (cid:3) | (cid:2)sf (cid:3) ∨ (cid:2)sf (cid:3) | ¬(cid:2)sf (cid:3) |

E(cid:2)pf (cid:3) | A(cid:2)pf (cid:3) | [(cid:2)rsf (cid:3)](cid:2)sf (cid:3) | [[(cid:2)rsf (cid:3)]](cid:2)sf (cid:3)

(cid:2)pf (cid:3) ::= (cid:2)sf (cid:3) | (cid:2)pf (cid:3) ∨ (cid:2)pf (cid:3) | ¬(cid:2)pf (cid:3) | (cid:2)pf (cid:3) ∧ (cid:2)pf (cid:3) | (cid:8) (cid:2)pf (cid:3) |

(cid:2)pf (cid:3) U (cid:2)pf (cid:3) | 3(cid:2)pf (cid:3) | 2(cid:2)pf (cid:3) | [(cid:2)rpf (cid:3)](cid:2)pf (cid:3) |
[[(cid:2)rpf (cid:3)]](cid:2)pf (cid:3)

An N-CTL∗ formula is a set of rules (cid:2)e : sf (cid:3), or (cid:2)rpf : pf (cid:3).
Each of e or rpf is the head of the rule, and each of sf or pf
is the body of the rule (cid:2)e : sf (cid:3) or (cid:2)rpf : pf (cid:3).
2

The semantics of N-CTL∗ is deﬁned in a way similar to
the deﬁnition of the semantics of N-LTL. We now illustrate
the usefulness of N-CTL∗ through two examples.

Example 8 The initial goal is to require that p be true until
q is reached. However, it is realized that in some domain, this
goal is too strong as no plan can always have p until reaching
q. If in some states in the main path, all possible trajectories
will have p true in the future, then we may consider it as a
strong exception and may allow not to have p. The initial
goal can be represented as (cid:2)g : [r](p)Uq(cid:3) in N-CTL∗. This
goal is equivalent to pUq in CTL∗. It can be further reﬁned by
adding one rule about the weak exception r as (cid:2)r : A3p(cid:3). The
revised goal is equivalent to (p∨A3p)Uq, which is equivalent
to (A3p)Uq.

Example 9 Initially, the goal is to make sure that in most tra-
jectories starting from the initial state, 3p is true. However,
later on, we may require that once 3q is satisﬁed by some
trajectories, those trajectories are considered as exceptional
ones and we do not require them to satisfy 3p. The initial
(cid:2)g : A[r](3p)(cid:3). Later, the goal can
goal is represented as:
be weakened by adding the weak exception rule (cid:2)r : (3q)(cid:3).

The initial goal is equivalent to the CTL∗ formula A3p and

the revised goal is equivalent to A(3p ∨ 3q).

6 Conclusion and Future Work

In this paper, we proposed a non-monotonic temporal logic
based on LTL and hinted at a branching time non-monotonic
temporal logic based on CTL∗. We motivated the need for
such non-monotonic temporal logics from the point of view
of needing ways to express goals that can be changed in an
elaboration tolerant manner. We presented several properties
of our non-monotonic goal language N-LTL and brieﬂy dis-
cussed its encoding using logic programming.

One possible controversial design decision that we made is
to empower the speciﬁer to decide whether weak exceptions
or strong exceptions are allowed. This is in contrast to use
of defaults in standard non-monotonic logics where the nor-
mative statement itself does not refer to strong exception or
weak-exception, but rather they are added separately. Further
study to compare the two approaches is an immediate future
work.

7 Acknowledgement

This work was supported by a contract from ARDA and NSF
grant 0412000. We thank the anonymous reviewers for their
comments, especially for pointing us to the earlier work [Fu-
jiwara and Honiden, 1991].

References

[Bacchus and Kabanza, 1998] Fahiem Bacchus and Frodu-
ald Kabanza. Planning for temporally extended goals. An-
nals of Math and AI, 22:5–27, 1998.

IJCAI-07

241

[Baral and Zhao, 2004] Chitta Baral and Jicheng Zhao. Goal
speciﬁcation in presence of non-deterministic actions. In
Proceedings of ECAI’04, pages 273–277, 2004.

[Stein and Morgenstern, 1994] Lynn Andrea Stein and Leora
Morgenstern. Motivated action theory: A formal theory of
causal reasoning. Artiﬁcial Intelligence, 71:1–42, 1994.

[Baral and Zhao, 2006] Chitta Baral and Jicheng Zhao. Goal
speciﬁcation, non-deterministic, and quantifying over
policies. In AAAI-06, 2006.

[Baral et al., 2001] Chitta Baral, Vladik Kreinovich, and
Raul Trejo. Computational complexity of planning with
temporal goals. In IJCAI-01, pages 509–514, 2001.

[Emerson and Srinivasan, 1989] E. Allen Emerson and Jai
Srinivasan. Branching time temporal logic.
In J.W.
de Bakker, W. P. de Roever, and G. Roezenberg, editors,
Linear Time, Branching Time and Partial Order in Logics
and Models for Concurrency, pages 123–172. Springer-
Verlag, Berlin, 1989.

[Emerson, 1990] E. Allen Emerson. Temporal and modal
logic. In J. van Leeuwen, editor, Handbook of Theoreti-
cal Computer Science, volume B, pages 997–1072, 1990.

[Fujiwara and Honiden, 1991] Yasushi

and
Shinichi Honiden. A nonmonotonic temporal logic and its
kripke semantics. J. Inf. Process., 14(1):16–22, 1991.

Fujiwara

[Giannotti et al., 1999] Fosca Giannotti, Giuseppe Manco,
Mirco Nanni, and Dino Pedreschi. On the effective seman-
tics of nondeterministic, nonmonotonic, temporal logic
databases. Lecture Notes in Computer Science, 1584:58–
72, 1999.

[MacNish and Fallside, 1990] Craig MacNish and Frank
Fallside. Temporal reasoning: a solution for multiple agent
collision avoidance.
In IEEE International Conference
on Robotics and Automation, volume 1, pages 494–499,
1990.

[McCarthy, J., 1988] McCarthy, J. Mathematical logic in ar-

tiﬁcial intelligence. Daedalus, 117(1):297–311, 1988.

[McDermott, 1982] Drew McDermott. Non-monotonic logic
II: Nonmonotonic modal theories. Journal of the ACM,
29:33–57, 1982.

[Neljanko and Niemel¨a, 2001] Keijo Neljanko and Ilkka
Niemel¨a. Bounded LTL model checking with stable mod-
els. In LPNMR, pages 200–212, 2001.

[Niyogi and Sarkar, 2000] Rajdeep Niyogi and Sudeshna
Sarkar. Logical speciﬁcation of goals. In Proc. of 3rd in-
ternational conference on Information Technology, pages
77–82, 2000.

[Reiter, 2001] Ray Reiter. Knowledge in action : logical
foundations for specifying and implementing dynamical
systems. MIT Press, 2001.

[Saeki, 1987] M. Saeki. Non-monotonic temporal logic and
its application to formal speciﬁcations (in Japaneese).
Transactions of IPS Japan, 28(6):547–557, 1987.

[Son et al., 2002] Tran Cao Son, Chitta Baral, Nam Tran,
and Sheila Meilraith. Domain-dependent knowledge in an-
swer set planning. CS 007, New Mexico State University,
2002.

IJCAI-07

242

