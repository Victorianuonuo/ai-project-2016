A  NET  STRUCTURE  BASED  RELATIONAL  QUESTION 

ANSWERER:  DESCRIPTION  AND  EXAMPLES.* 

by 

Stuart  C.  Shapiro  &  George  H.  Woodmansee 

Computer  Sciences  Department 

University  of  Wisconsin 

Madison,  Wisconsin,  U.S.A. 

Abstract 

A  question  answering  system  is  described 
which  uses  a  net  structure  for  storage  of  infor­
mation.  The  net  structure  consists  of  nodes  and 
labelled  edges,  which  represent  relations  be­
tween  the  nodes.  The  labels  are  also  nodes, 
and  therefore  definitions  of  relations  may  be 
stored  in  the  net. 
It  is  demonstrated  that  the 
generality  and  complexity  of  this  memory  struc­
ture  allows  a  surprisingly  powerful  question  an­
swering  system  to  be  constructed  using  compari-
tively  simple  executive  routines.  Output  from 
the  question  answerer,  which  is  currently  run­
ning  on  an  interactive,  time  sharing  system, 
is 
included,  showing  its  range  of  applicability  i n­
cluding  question  answering, 
inductive  and  de­
ductive  inference,  simple  theorem  proving  and 
problem  solving. 

Key  words  and  phrases: 

relational  question 

answering,  question  answering,  memory  net, 
memory  structure,  data  structure,  semantic  mem­
ory,  semantic  information  retrieval,  deductive 
inference, 
concept  formation,  relational  logic, 
theorem  proving, 

inductive  inference,  problem  solving, 

learning/ 

fact  retrieval. 
Introduction 
1. 

Our  main  research  interest  has  been  in  the 
organization  of  data  structures  for  question  an­
swering  systems,  systems  that  retrieve  facts  and 
have  deductive  and  inductive  capabilities  to 
derive  new  information  from  the  facts  explicitly 
given  them.  Our  two  main  aims  have  been  to 
maintain  as  much  generality  as  possible  so  that 
no  additional  programming  be  needed  regardless 
of  the  domain  of  knowledge  for  which  the  sys­
tem  is  used  and  to  put  as  much  question  an­
swering  power  as  possible  into  the  memory 
structure  itself  rather  than  in  the  executive 
routines.  This  latter  aim  supports  the  first  in 
that  it  would  allow  special  instructions  for  par­
ticular  domains  to  be  entered  into  the  memory 
in  the  same  way  as  any  other  information. 
SAMENLAQ  I I, 
the  system  described  in  this 
paper  represents  progress  toward  reaching  these 
aims.  Further  progress  is  being  made  in  a  later 
system  (see  Section  5). 

SEMANLAQ  II  is  based  upon  binary  relations. 
This  was  a  natural  starting  point  because  of  the 
generality  of  binary  relations,  and  the  fact  that 

- 3 2 5-

thus  avoiding  the  attendant  problems. 

they  provide  a  reasonable  test  environment  for 
our  ideas.  Since  our  major  interest  is  the  mem­
ory  structure,  we  have  not  used  natural  language 
input, 
I n­
stead,  all  statements  input  to  the  system  are  in 
the  form  x  R  y.  We  hope  it  will  become  evi­
dent  that  even  with  this  restriction  to  binary  re­
lations  and  with  basically  simple  executive  rou­
tines  the  system  attains  a  surprising  amount  of 
power  and  range  of  applicability.  This  derives 
from  the  following  characteristics  of  the  system: 
1.  The  memory  is  a  net  structure,  with  the  re­
lations  serving  as  labels  on  directed  edges. 
Each  statement  x  R  y  is  also  stored  in  the 
converse  form  y  R(CNV)  x  so  that  all  the 
information  about  a  name  is  reachable  from 
the  node  in  the  net  which  represents  it. 

2 .  The  relations ,  though  used  as  labels  on  the 
edges,  are  actually  also  nodes  themselves, 
so  information  about  them  may  be  stored  in 
the  memory  structure.  The  major  use  of 
this  capability  is  to  define  a  relation  in 
terms  of  other  relations. 

3.  The  system  has  the  ability  to  use  the  infor­
mation  stored  about  a  relation  when  search­
ing  memory.  Such  information  may  be  en­
tered  at  any  time  and  in  the  same  manner 
as  any  other  type  of  data  or  it  may  be  con­
structed  and  entered  by  the  system  itself. 
In  our  system,  any  relation  may  be  used  as 
an  undefined  term,  may  be  defined  in  terms 
of  other  relations,  or  may  be  defined  recur­
sively.  Any  single  relation  may  be  used  in 
any  or  all  of  these  ways.  Complex  rela­
tions  may  be  built  out  of  simple  relations 
using  the  relative  product  operation  and 
node  restrictions  to  restrict  the  domains  or 
ranges  of  the  simple  relations.  Thus,  quite 
complicated  relations  may  be  defined. 
The  following  sections  give  more  detailed 

information  about  and  examples  of  the  SAMENLAQII 

*The  research  reported  herein  was  partially 
supported  by  a  grant  from  the  National  Science 
Foundation  (GP-7069).  Use  of  the  University  of 
Wisconsin  Computing  Center  was  made  possible 
through  support, 
Science  Foundation,  other  United  States  Govern­
ment  agencies  and  the  Wisconsin  Alumni  Re­
search  Foundation  (WARF)  through  the  University 
of  Wisconsin  Research  committee. 

from  the  National 

in  part, 

system.  The  final  section  describes  a  later  sys­
tem  which  is  being  developed  to  satisfy  more  com­
pletely  the  goals  discussed  above. 

2. 

Implementation  and  Operation 

SAMENLAQ  II  is  a  revision  of  SAMENLAQ, 
"A  Semantic  Association  MEmory  Net  that  Learns 
and  Answers  Questions"10.  Both  programs  are 
written  in  SNOBOL3  as  interactive  question  an­
swering  systems,  but  SAMENLAQ  I I,  unlike 
SAMENLAQ  which  was  run  in  batch  mode  with 
simulated  interaction  on  a  CDC  3600, 
is  fully 
interactive  and 
is  currently  running  under  the 
University  of  Wisconsin  B5500  time  sharing  sys­
tem.  SAMENLAQ  II  differs  from  SAMENLAQ  in 
that  it  provides  aids  to  the  user,  who  inputs 
data  directly  via  a  teletype,  allows  for  storage 
of  input  files  and  memories  in  disk  files,  and, 
most 
importantly,  allows  for  recursive  defini­
tions  of  relations  and  allows  the  user  to  control 
in  real 
time  how  much  effort  the  system  should 
spend  searching 
information  for  use  in  answering  a  question. 

to  discover  more 

its  memory 

the 

top 

level  of  operation, 

Figures  2a  and  2b  depict  the  overall  flow  of 
control  in  SAMENLAQ  I I.  Figure  1  demonstrates 
its  operation.  At 
three  types  of  input  are  allowable: 
statements, 
questions  and  requests  to  the  system  executive. 
[Bl,2a]*  Representative  examples  are  given  in 
f i g.  1  by  lines  " a ,"  "f,"  and  "b"  respectively. 
Notice  that  user  inputs  are  indicated  by  terminal 
left  arrows  whereas  unterminated  lines  indicate 
SAMENLAQ  II  responses.  Simple  statements 
such  as  line  "c"  result  in  the  construction  of  a 
net  substructure  containing  the  nodes  "BOSTON", 
"EAST.OF",  "EAST.OF(CNV)",  and  "WORCESTER" 
in  which  "BOSTON"  and  "WORCESTER"  are  tied  to­
gether  via  the  "EAST.OF"  node  and  "WORCESTER" 
and  "BOSTON"  are  tied  together  via  the  "EAST. 
OF(CNV)"  node.  This  structure  is  considered  in 
more  detail  in  the  next  section.  More  compli­
cated  statements  such  as  line  " a"  are  inter­
preted  by  the  system  as  a  series  of  simple 
statements. 

The  system  provides  the  user  with  various 

in  the 

feedback,  some  of  which  may  be 

types  of 
turned  off  by  appropriate  requests  to  the  execu­
tive. [B7,2a]  Lines  prior  to  "f"  demonstrate  i n­
put 
limited  response  modes. 
requests  that  the  full  response  mode 
Line  "b" 
be  turned  off.  Requests  are 
identified  by  a 
terminating  " @".  Other  request  options  are  i n­
dicated  in  f i g.  2.[B2,2a] 

full  and 

Several  relation  words  are  built  into  the 

system. 
to  be  limited  to  a  subclass  of all  the  relations 

"MEMBER"  allows  a  particular  net  search 

♦Bracketed  references  refer  to  the  flow  charts 

in  f i g.  2.  E.g.  "[Bl,2a]"  refers  to  Box  1  in 
f i g.  2a. 

- 3 2 6-

represented  in  the  net.  Subclass  definition  may 
take  place  at  any  point  during  a  conversation 
and  is  determined  solely  by  the  user. 
represents  the  introduction  of  the  subclass 
"COMPASS.RELS".  Such  classes  are  useful  for 
handling  questions  involving  paths  in  the  net 
which  connect  prescribed  nodes. 

Line  " d" 

"IMPLBY"  allows  a  given  relation  to  be  de­
It  is  one  of 

fined  in  terms  of  other  relations. 
the  most  important  features  of  SAMENLAQ  I I. 
The  system  has  the  ability  to  utilize  "IMPLBY" 
information  about  a  relation  during  the  question 
answering  process  by  using  it  as  a  generalized 
substitution  rule. 

Line  "e"  demonstrates  the  use  of  IMPLBY  to 

introduce  NORTH.OF(CNV)  as  an  acceptable  re­
placement  for  SOUTH.OF.  The  line  also  results 
in  SOUTH.OF(CNV)  IMPLBY  NORTH.OF  being  i n­
corporated  in  memory. 

To  enhance  readibility, 

the  system  allows 
the  user  to  introduce  his  own  interrogatives  by 
means  of  the  form  "x  IS  QUESTION". 

Questions  are  terminated  by  " * ".  There  are 

illustrates  the  x  R  _  *  type, 

four  possible  types  —  one  verification  type 
(x  R  y  *)  and  three  f i ll  in  the  blank  types 
(x  R  _  * ),  (_  R  y  *)  and  (x  _  y  *).[B3,2a]. 
Line  "f" 
line  " j" 
the  X  _  Y*  type  and  line  "k"  the  _  R  Y*  type. 
Notice  that  non-simple  relations  can  be  handled 
by  the  system.  There  are  three  types  of  rela­
tions  used  in  SAMENLAQ  I I,  simple,  compound 
and  complex.  A  simple  relation  is  of  the  form 
R  or  R(CNV)  where  the  character  string  R  is  not 
meaningfully  decomposable  and  Y  R (CNV)  X  if 
and  only  if  X  R  Y.  A  compound  relation  is  a 
simple  relation  or  a  relative  product  of  simple 
relations  and  is  of  the  form  R1/R2/R3,  (or  some­
times,  as  a  stylistic  variant,  R1/R2/R3/). 
X  R1/R2/R3  Y  holds  if  and  only  if  there  exists 
some  z  and  w  such  that  X  Rl  z,  z  R2  w  and 
w  R3  Y.  A  complex  relation  is  a  compound  re­
lation  or  a  compound  relation  with  node  restric­
tions .  A  node  restriction  is  of  the  form  (R-0) 
where  R  is  a  simple  relation  and  0  is  a  string 
of  names,  each  one  followed  by  a  comma.  Node 
restrictions  are  used  to  restrict  the  domain  or 
range  of  a  simple  relation  which  forms  part  of 
the  complex  relation.  For  example,  (R-0)R1  is 
the  relation  Rl  with  a  restricted  domain,  and 
Rl(R-jZf)  is  Rl  with  a  restricted  range. 

Domain  of  R3 
r(Rl-^l)(R2-^2)R3/(R4-j2f3)(R5-^4)R6/(R7-^5)  y 

Domain  of  R6 

x 

Range  of  R3 

Range  of R6 

, x,  satisfies  the  node  restriction  (R-0) 

A  name 
if  for  all  y  in  the  string  0  xRy  is  explicitly 
stored  in  memory.  Thus  the  relational  statement 
above  holds  if  x  satisfies  (R1-J01)  and  (R2-02), 
y  satisfies  (R7-J2f5)  and  there  exists  some  z  such 

a 

b 

c 

d 

e 

f 

g 

h 

IN  NEW.YORK.STATE-

IN  NEW.YORK.STATE 

ALBANY,BUFFALO,NEW.YORK,POUGHKEEPSIE 
STATEMENT  -  ALBANY, BUFFALO,NEW.YORK,POUGHKEEPSIE 
O K ? . . . Y E S-
W A I T . .. 
READY 
BOSTON,WORCESTER  IN  MASSACHUSETTS-
STATEMENT  -  BOSTON,WORCESTER  IN  MASSACHUSETTS 
O K ? . . . Y E S-
W A I T . .. 
READY 
FLAG  ECHO  O F F 0-
REQUEST  -  FLAG  ECHO  OFF 
READY 
BOSTON  EAST.OF  WORCESTER-
READY 
WORCESTER  EAST.OF  ALBANY-
READY 
ALBANY  EAST.OF  BUFFALO-
READY 
ALBANY  NORTH.OF  POUGHKEEPSIE— 
READY 
POUGHKEEPSIE  NORTH.OF  N E W . Y O R K-
READY 
IN  MEMBER  LOCATION.RELS— 
READY 
NORTH. OF, EAST. OF  MEMBER  COMPASS .RELS— 
READY 
SOUTH.OF  IMPLBY  NORTH.OF(CNV)— 
READY 
WEST.OF 
READY 
WHAT,HAS.WHAT.RELATIONSHIP.TO 
READY 
BOSTON  EAST.OF  WHAT*— 
I  WILL  USE  THE  FOLLOWING  RELATIONS: 

IMPLBY  EAST.OF(CNV)— 

IS  Q U E S T I O N-

EAST. O F/ 

I  FIGURE  BOSTON  EAST.OF/  WORCESTER 
IF  THIS  IS  SUFFICIENT,  RESPOND  -  OK 
OTHERWISE  TYPE  AN  INTEGER  FOR  FUTHER  SEARCH 
OR  -  LIST  TROUBLES  OR  AN  INPUT  STATEMENT  OR  -  EXAMPLES 
1-
I  WILL  USE  THE  FOLLOWING  RELATIONS: 

NO  FURTHER  RELATIONS  F O U N D. 

I  FIGURE  BOSTON  EAST.OF/  WORCESTER 
IF  THIS  IS  SUFFICIENT,  RESPOND  -  OK 
OTHERWISE  TYPE  AN  INTEGER  FOR  FUTHER  SEARCH 
OR  -  LIST  TROUBLES  OR  AN  INPUT  STATEMENT  OR  -  EXAMPLES 
EAST.OF  IMPLBY  EAST.OF/EAST.OF— 
STATEMENT  -  EAST.OF 
O K ? . ..  Y E S-
WAIT 
ENTER  ANY  OF  THE  ABOVE  OPTIONS. 
2— 
I  WILL  USE  THE  FOLLOWING  RELATIONS: 

IMPLBY  EAST.OF/EAST.OF 

EAST.OF/EAST.OF/ 

AND  EAST.OF/EAST.OF/EAST.OF/ 
I  FIGURE  BOSTON  EAST.OF/WORCESTER  AND  ALBANY  AND  BUFFALO 
IF  THIS  IS  SUFFICIENT,  RESPOND  -  OK 

F i g.  1 

A  Conversation  W i th  SAMENLAQ  I I. 

- 3 2 7-

i 

j 

k 

OTHERWISE  TYPE  AN  INTEGER  FOR  FUTHER  SEARCH 
OR  -  LIST  TROUBLES  OR  AN  INPUT  STATEMENT  OR  -  EXAMPLES 
OK— 
W A I T . .. 
ANSWER  -  WORCESTER 

[Answer  to  Question  posed  at 

line 

" f " .] 

AND 
AND 

ALBANY 
BUFFALO 

READY 
BUFFALO  HAS. WHAT. RELATIONSHIP .TO  NEW.YORK*2— 
ENTER  COMMA  LIST  OF  RELATION  CLASSES  TO  BE  USED  OR  -  "  ANY  " 
ANY— 
BUFFALO 
ENTER  -  OK  -  OR  AN  INTEGER  INDICATING  NUMBER  OF  ADDITIONAL  PATH  LINKS. 
1— 
W A I T . .. 

IN  NEW.YORK.STATE 

IN(CNV)  NEW.YORK 

BUFFALO  EAST.OF(CNV)  ALBANY  NORTH.OF  POUGHKEEPSIE  NORTH.OF 
NEW.YORK 
ENTER  -  OK  -  OR  AN  INTEGER  INDICATING  NUMBER  OF  ADDITIONAL  PATH  LINKS. 
OK— 
READY 
FLAG  ASK  OFF[d — 
READY 
FLAG  TRACE  O F F @-
READY 
WHAT  (IN-NEW.YORK.STATE, )SOUTHWEST.OF  BOSTON*— 
I  FIGURE  BOSTON  SOUTHWEST.OF(CNV)/(IN-NEW.YORK.STATE,)  UNKNOWN 
WHAT  NOW? 
LIST  TROUBLES— 
AT  THE  FOLLOWING  NAMES  COULD  NOT  APPLY  THE  LISTED  RELATIONS. 

BOSTON 

-  SOUTHWEST.OF(CNV) 

-  SOUTHWEST.OF 

IMPLBY  SOUTH.OF/WEST.OF,WEST.OF/SOUTH.OF 

IMPLBY  SOUTH.OF/WEST.OF,WEST.OF/SOUTH.OF— 

WHAT  NOW? 
SOUTHWEST.OF 
STATEMENT 
O K ? . ..  Y E S-
W A I T . .. 
WHAT  NOW? 
3— 
I  FIGURE  BOSTON  SOUTHWEST.OF(CNV)/(IN-NEW.YORK.STATE,)  POUGHKEEPSIE 
WHAT  NOW? 
SOUTH.OF 
STATEMENT 
O K ? . .. Y E S-
W A I T . .. 
WHAT  NOW? 
3— 
I  FIGURE  BOSTON  SOUTHWEST.OF(CNV)/(IN-NEW.YORK.STATE,)  POUGHKEEPSIE 
AND  NEW.YORK 
WHAT  NOW? 
OK— 
ANSWER  -  POUGHKEEPSIE 

IMPLBY  SOUTH.OF/SOUTH.OF— 
-  SOUTH.OF 

IMPLBY  SOUTH.OF/SOUTH.OF 

to  question  posed  at 

[Answer 

line 

" k " .] 

AND 

NEW.YORK 

READY 

F i g.  1 

(cont.) 

A  Conversation  W i th  SAMENLAQ  II 

- 3 2 8-

that  z  satisfies 
zR6y. 

( R 4 - 3)  and  ( R 5 - 4) 

,  xR3z,  and 

i d e a s. 
"f" 

Line 

represents  one  of  the 

A  complex  relation  may  also  consist  solely 

is 

them 

it  is  an 

the  node 

in  which  case 

the  statement  of  a  conjunc­

of  node  r e s t r i c t i o n s, 
i d e n t i ty  relation  on  a  restricted  domain  ( v i z.  the 
set  of  a ll  names  w h i ch  satisfy  a ll 
restrictions)  and 
The  executive  routines  have  built 
tive  concept. 
into 
the  a b i l i ty  to  deal  w i th  converse  r e l a­
tions  and  w i th  compound  and  complex  r e l a t i o n s. 
to 
When  a  relation  serves 
label  an  edge  of  the 
its  appearance 
net, 
in 
name, 
treated  as  a  simple  r e l a t i o n.  C o m­
pound  and  complex  relations  are  used  when  d e­
f i n i ng  other  relations  and  may  themselves  have 
d e f i n i t i o n s. 
these 

Lines  beginning  at  " k" 

the  value  of  a 

in 
it  is 

illustrate 

i . e. 

four  question 
to 
the  s y s­

it 

is 

in 

its  mem­

Since 

Since 

the  system  does 

to  "BOSTON". 

represented  e x p l i c i t e ly 

that  "BOSTON  EAST.OF 

transitive  r e l a­
further  nodes 

the  statement  "BOSTON  EAST.OF 

To  answer  i t,  SAMENLAQ  II  attempts 

is  a 
incapable  of  finding 

t y p e s. 
apply  "EAST.OF" 
tem  has 
WORCESTER" 
o r y,  EAST.OF  can  be  successfully  applied  -
yielding  "WORCESTER". 
not  know  e x p l i c i t ly 
ALBANY"  or  that  EAST.OF 
t i o n, 
s a t i s f y i ng  "BOSTON  EAST.OF  X ". 
trated  in  line  " g"  where  " 1" 
SAMENLAQ 
cycle 
currently  attempting 
acceptable  replacements  contained  on  the  r e l a­
tions 
for 
l i st  of  a ll  r e l a t i o n s,  x,  such 
a  relation  R  is  a 
that  R  IMPLBY  X.) 
informed  that  EAST.OF 
t i o n al  IMPLBY  substitution  cycles  are 
quested  by  typing 

it 
to  apply  to  a  node,  a ll 

to  execute  one  substitution 

is 
indicates  that 

IMPLBY  l i s t . [ B l , 2 b] 

for  each  relation 

Two  a d d i­
then  r e­

i . e.  substitute 

IMPLBY  l i st 

the  system 

In  line  " h" 

t r a n s i t i v e. 

in  " 2 ". 

i l l u s­

(The 

This 

is 

is 

is 

is 

II 

- 

Figure  3 

illustrates  an  application  of 

in  a 

is  asked 

In  F i g.  3b 

in  line  " a" 

two  of  these  are 

to  apply  this  r e l a t i o n, 

to  answer  a  question  c o n­

the  relations  of  various  objects 

it  has  never  seen  before. 
is  given  a 

to  rudimentary  conjunctive  concept 
SAMENLAQ 
formation. 
The  statements  presented  in  F i g.  3a 
supply  the  system  w i th  a  small  data  base  c o n­
cerning 
room.  N o t e, 
grouped  into  the  class  "SPLREL". 
SAMENLAQ 
cerning  a  relation 
Failing 
series  of  examples  whose  relationship 
another 
Restricting 
SPLREL,  the  system  obtains  a ll  paths  of  length  2 
or  less  connecting 
properties  common 
same 
For  example 
(CONSTRUCTION-WOOD,)  and 
VATED. HORIZONTAL. SUPPORTING  SURFACE,)  are 

to  one 
is  arbitrarily  designated  CONCEPT1. 

the  example  p a i r s. 
to  each  class  of  nodes  at  the 

(CONSTRUCTION-ELECTRICAL,), 

the  path  are  also  c a l c u l a t e d. 

to  the  relation  class 

(HAS.PART-ELE­

l e v el  along 

its  search 

The 

it 

is 

is 

to  the 

f i r s t,  second,  and 

then  placed  upon 

levels  r e s p e c t i v e l y. 

The  path  connecting 

"ON.TOP/ELEMENT". 

node  properties  common 
third 
the  example  pairs 
relation 
CONCEPT1. 
fine 
C O M M U N I C A T I O N.  DEVICE.THAT.IS0ON.TOP.OF. 
A.PIECE.OF.WOODEN. 
sufficient 
responds  w i th 

the  original  concept  IS.AN.ELECTRICAL. 

Finally  CONCEPT1 

the  IMPLBY  l i st 

is  used  to  d e­

The  system 

information 

the  question  and 

to  answer 

then  has 

This 
for 

the  correct  answer. 
SAMENLAQ  II  Description 

3. 

into 

the  memory  are  of 

in  such  statements 

is  a  simple  r e l a t i o n. 

Statements  entered 
form  "NAME1  RELATION  NAME2"  where 

the 
NAME1  and  NAME2  are  non-decomposable  names 
and  RELATION 
Information 
is  stored  on  paren 
contained 
Thus, 
lists  associated  w i th  NAME]  and  NAME2. 
the  above  statement  produces 
following  paren 
l i st  for  "NAME1  :  "(RELATION-/1)"  where 
contents  of  the  slash  name  " / l" 
l i st  " N A M E 2 , ". 
paren  pair  (WEST.OF-/3)  on 
WORCESTER  indicates 
each  of  the  elements 
named  / 3.  Note 
is  a  comma 
is 
its  paren 

that  the  value  of  a  slash  name 
l i s t,  s i m i l a r ly  the  value  of  a  name 
l i s t. 

In  the  example  below, 
the  paren 

that  Worcester 
found  on 

the 
is  the  comma 

is  West  of 

the  comma 

l i st 

l i st 

the 

the 

for 

BOSTON 
/l 
WORCESTER  = 
/2 
/3 
EAST.  OF 
/4 
/5 

Although 

(EAST.OF-/1) 

= 
=  WORCESTER,ALBANY,  BUFFALO, 

(EAST.OF-/2)(WEST.OF-/3) 

(IMPLBY-/4)(MEMBER-/5) 

=  ALBANY, BUFFALO, 
=  BOSTON 
= 
=  EAST.OF/EAST.OF/, 
=  COMPASS.RELS, . 
the  paren 
-  value 

l i st  looks 
l i st 

like  a  conven­

in 

that 

l i s ts 

l i s ts 

it  differs 

l i s ts  and 

(values)  are 

the  relations 

(attributes)  and 

these  various  paren 

the  names  on 
themselves  names 

The 
thought  of  as  a  directed  graph 

tional  attribute 
both 
the  comma 
of  paren 
mutually  occur  as  elements  of  each  other. 
memory  may  be 
whose  nodes  are  the  names  (BOSTON,  WORCESTER, 
e t c .)  and  whose  edges  are 
t i o n s. 
names  and 
in  the  graph,  we  s h o u l d,  perhaps, 
edges  as  being  labeled  by  passing  through  a 
node,  and  a ll  edges  bearing  the  same 
passing  through  the  same  node. 

labeled  by  the  r e l a­
the  relations  are  also 
thought  of  as  nodes 
think  of  the 

Since,  however, 

thus  should  be 

label  as 

The  statement  NAME1  RELATION  NAME2 

is 
l i s t, 
its  converse,  NAME2  RELATION(CNV)  NAME1 
is  done 

not  only  stored  as  such  on  N A M E l 's  paren 
but 
is  stored  on  NAME2's  paren  l i s t. 
so 
information  contained 
ment  is  recoverable 
this 

involves  duplicate  storage  of  information, 

from  either  name. 

in  the  state­

Although 

that  the 

This 

- 3 3 1-

CHAIR,SHELF,TABLE  HAS.PART  ELEVATED. HORIZONTAL. SUPPORTING. SURFACE— 
READY 
DRESSER,BENCH  HAS.PART  ELEVATED.HORIZONTAL.SUPPORTING.SURFACE-
READY 
SHELF  HAS.PART  BRACKET.SUPPORTS-
READY 
CHAIR,TABLE,DRESSER,BENCH  HAS.PART  L E G S-
READY 
DRESSER  HAS.PART  DRAWERS-
READY 
BENCH,CHAIR,SHELF,TABLE,DRESSER  ELEMENT  FURNITURE-
READY 
T V l, T T Y l, TELl  ,TEL3,PEN1, SIGNAL. U G H T l, RADIOl  USED.FOR  C O M M U N I C A T I O N-
READY 
T V l, T T Y l, TEL3 , T E L l , T E L 2, S I G N A L . U G H T l, RADIOl  CONSTRUCTION  ELECTRICAL-
READY 
PEN1  CONSTRUCTION  M E C H A N I C A L-
READY 
CHAIR1,CHAIR2  ELEMENT  C H A I R-
READY 
SHELF1,SHELF2,SHELF3  ELEMENT  S H E L F-
READY 
TABLE1,TABLE2  ELEMENT  TABLE-
READY 
DRESSER1  ELEMENT  DRESSER-
READY 
CHAIR1,CHAIR2,SHELF2  CONSTRUCTION  M E T A L-
READY 
BENCH 1, SHELF 1, TABLE 1 , TABLE2 , DRESSER1  CONSTRUCTION  W O O D-
READY 
R A D I O l, PEN1  ON.TOP  DRESSER1 — 
READY 
SIGNAL.UGHT1,PICTURE1  ON.TOP  SHELF1— 
READY 
TVl  ON.TOP  TABLE2— 
READY 
TTYl  ON.TOP  BENCH1 — 
READY 
BENCH1  ELEMENT  B E N C H-
READY 
PICTURE3,TEL3  ATTACHED.TO  WALL1 — 
READY 
TELl  ON.TOP  TABLE1— 
READY 
WHAT  IS  Q U E S T I O N-
READY 
ON.TOP,ELEMENT  MEMBER  SPLREL— 
READY 

F i g.  3a  A  Conjunctive  Concept  Formation  Example:  Data  Base  I n p u t. 

a 

- 3 3 2-

a 

IS  A  MEMBER  OF...SPLREL— 

IS.AN.ELECTRICAL.COMMUNICATION.DEVICE.THAT.IS.ON.TOP.OF.A.PIECE. 

WHAT 
OF  WOODEN  FURNITURE*— 
I  FIGURE  FURNITURE 
IS.AN.ELECTRICAL. C O M M U N I C A T I O N. DEVICE. T H A T . I S . O N . T O P . O F . A.  PIECE.OF. WOO 
DEN(CNV  )/  UNKNOWN 
WHAT  NOW? 
EXAMPLES-
RELATION  WHOSE  DEFINITION  IS  TO  BE  F O U N D .. .CONCEPT1 — 
RELATION  CLASS  CONCEPT1 
DEPTH  OF  ALTERNATE  DEFINITIONS.  . .2— 
TYPE  PAIRS  X  Y  SUCH  THAT  X  CONCEPT1  Y. 
WHEN  FINISHED,  TYPE  -  END. 
TEL1  TABLE-
RADIO 1  DRESSER-
SIGNAL. LIGHT 1  S H E L F-
END— 
O K ? . ..  Y E S-
THANK  Y O U. 
W A I T . .. 
FROM  THE  EXAMPLES  YOU  HAVE  GIVEN  M E ,I  WOULD  GUESS  THAT 
CONCEPT1/  IS  THE  SAME  AS 
(CONSTRUCTION-ELECTRICAL,  )(USED.FOR-COMMUNICATION,  )ON.TOP/(CONSTRUCTIO 
N-WOOD,)ELEMENT/(HAS.P 
WHAT  NOW? 
IS.AN.ELECTRICAL. C O M M U N I C A T I O N. DEVICE. T H A T . I S . O N. TOP.OF. A. PIECE.OF 
.WOODEN 
STATEMENT 

ART-ELEVATED.HORIZONTAL.SUPPORTING.SURFACE  ,) 

IMPLBY  CONCEPTl/ELEMENT— 

-

IMPLBY  CONCEPTl/ELEMENT 

I S. A N. ELECTRICAL. C O M M U N I C A T I O N. DEVICE. THAT. I S. O N. TOP. O F. A. PIECE. O F. WOO 
DEN 
O K ? . ..  Y E S-
W A I T . .. 
WHAT  NOW? 
2— 
I  FIGURE  FURNITURE 
I S. A N. ELECTRICAL. C O M M U N I C A T I O N. DEVICE.THAT.IS. O N. TOP.OF. A. PIECE. O F. WOO 
DEN(CNV)/  TTY1  AND  SIGNAL. UGHT1  AND  TEL1  AND  TV1  AND  RADIOl 
WHAT  NOW? 
O K-
W A I T . .. 
ANSWER  -  TTY1 

[Answer  to  Question  posed  at 

" a " .] 

line 

AND 
AND 
AND 
AND 

SIGNAL. UGHT1 
TEL1 
TV1 
RADIOl 

READY 

F i g.  3b 

A  Conjunctive  Concept  Formation  Example: 

Interrogation. 

- 3 3 3-

changing  the  statement  to  its  converse  form  for 
storage  under  the  second  argument  allows  all 
statements  about  a  name  to  be  stored  in  the 
same  place  (the  name's  value)  regardless  of 
whether  the  name  was  the  first  or  second  argu­
ment  in  the  original  statements.  This  contrasts 
with  the  methods  for  retrieving  a  relational 
statement  from  either  argument  used  by  the 
Relational  Data  File4  (RDF)  and  by  DEACON1'* . 
In  RDF,  statements  are  stored 
direction,  but  in  different  files,  ordered  on  dif­
ferent  parts  of  the  statement.  Thus  to  get  all 
information  about  a  single  name,  either  one  file 
must  be  searched  exaustively  or  the  name  must 
be  looked  up  in  all  files. 
In  DEACON,  the 
statements  are  stored  in  the  form  of  closed 
"connecting  rings"  through  the  three  parts  of  the 
statement.  Thus  the  statement  is  reachable  from 
any  part  of  it  without  recourse  to  several  files, 
but  it  is  impossible  to  tell  from  a  connecting 
ring  where  the  statement  should  begin, 
whether  the  ring  through  x,  R,  and  y  represents 
the  statement  xRy,  Ryx,  or  yxR. 

in  only  one 

i . e. 

The  generality  of  SAMENLAQ  derives  largely 

from  the  ability  to  introduce  new  relations  at 
any  time, 
to  introduce  definitions  of  new  rela­
tions  or  relations  that  had  previously  been  un­
defined  and  to  extend  the  definition  of  a  rela­
tion.  Definitions  may  also  be  added  at  any 
time  and  are  stored  in  the  memory  net  structure 
just  like  any  other  data.  Definitions  are  not 
given  in  terms  of  relation  properties  that  have 
been  built  into  the  system,  but  in  terms  of 
other  relations.  Nevertheless,  various  standard 
relation  properties  can  be  dealt  with, 
for  exam­
ple: 
1.  Entering  the  statement, 

"Rl  IMPLBY  Rl/Rl 

3. 

causes  Rl  to  be  transitive. 

2.  Entering  "Rl  IMPLBY  Rl(CNV)"  causes  Rl  to 

be  symmetric. 
It  was  previously  pointed  out  (section  2) 
that  the  complex  relation  consisting  only  of 
a  node  restriction  (R-0)  serves  as  an  iden­
tity  relation  for  all  names  x  such  that  for 
every  name  y  in  the  string  0,  xRy  is  ex­
If  0  were  the  string 
plicitly  in  memory. 
consisting  only  of  the  delimiter  " , ", 
would  be  the  identity  relation  for  all  x 
such  that  for  any  y,  xRy  were  explicitly 
stored. 
ory,  (R-,)  would  be  the  universal  identy 
relation. 
ment  "Rl  IMPLBY  (R-,)"  would  cause  Rl  to 
be  reflexive. 
Thus,  Rl  might  be  defined  to  be  an  equiv­

If  this  were  true  for  all  x  in  mem­

In  that  case  entering,the  state­

(R-0) 

alence  relation  by  entering  "Rl  IMPLBY 
(MEMBER-,),  Rl(CNV),  R l / R l / ". 
In  addition  to 
these  forms  of  definition,  a  relation  may  be  de­
fined  a)  by  using  only  other  relations,  and  b) 
by  combining  other  relations  along  with  the 

In  fact, 

in  "GRAIS". 

relation  being  defined  thus  forming  a  general  re­
cursive  definition.  A  wide  range  of  relations 
may  thus  be  used  without  programming  them  into 
the  executive  routines  as  it  is  done  in  Raphael's 
SIR8  .  This  method  of  defining  relations  also 
contrasts  with  that  used  by  Elliott2 
In  "GRAIS"  relational  properties  are  built  into 
the  executive  routines. 
such  a  way  as  to  provide  specific  routines  for 
32  classes  of  relations.  The  user  introduces  a 
new  relation  by  specifying  which  of  the  32 
classes  it  belongs  in  and  this  determines  how  it 
will  be  handled.  This  does  not  allow  a  user  to 
uce  a  relation  whose  properties  he  either  does 
not  know  completely  or  does  not  wish  to  make 
specific  initially.  A  user  may  also  define  a 
relation  in  terms  of  a  Boolean  function  of  previ­
ously  introduced  relations.  However, 
these  re­
lations  may  not  be  stored  in  the  data  structure, 
only  used  for  question  answering. 

this  is  done  in 

It  is  interesting  to  note  that  the  user  builds 
his  own  logic  system  into  SAMENLAQ  II  when  he 
specifies  IMPLBY  information  (used  as  the  rules 
of  inference)  and  other  statements  (the  axioms). 
The  only  logical  structure  imposed  on  the  user 
is  the  metatheoretic  substitution  rule  embodied 
in  the  procedures  which  apply  IMPLBY  and  the 
limits  on  the  form  of  a  rule  of  inference  im­
If 
posed  by  the  syntax  of  complex  relations. 
the  user  specifies  a  strange  or  even  self-con­
tradictory  "logic"  SAMENLAQ  II  will  produce  de­
ductions  that  are  equally  strange  or  contradic­
tory; 
(For  example, 
from  the  relation  "IS.PART.OF"  only  make  sense 
if  the  interpretation  of  "x  IS. PART.OF  y"  moti­
vating  the  rule  of  inference  "IS.PART.OF  IMPLBY 
IS,PART.OF/IS(CNV)" 
is  that  every  member  of  y 
has  a  part  which  is  a  member  of  x  and  the  i n­
terpretation  of  "IS" 

interpretation  is  in  the  mind  of  the  user. 
in  section  4,  deductions  arising 

is  "is  subset  of.") 

It  would  be  possible  to  append  an  executive 
to  SAMENLAQ  II  which  would  constrain  the  type 
of  logical  system  to  one  with  certain  prescribed 
properties. 

4.  Some  Varied  Applications  of  SAMENLAQ  II 
The  following  sample  conversations  demon­
strate  SAMENLAQ  II's  ability  to  deal  with  rela­
tions  arising  from  a  variety  of  problem  areas. 
The  first  conversation  (Figure  4a,b,c)  i n­

It  demon­

volves  a  subdialogue  from  SIR8 . 
strates  SAMENLAQ"s  ability  to  handle  relations 
such  as  part,subset,  owns  and  element  and  the 
interdependence  between  such  relations.  A l­
though  specific  relations  and  relational  proper­
ties  are  not  built  into  the  system,  SAMENLAQ 
can  utilize  the  information  (x)(Y)(Z)(x  IS.PART. 
OF  Y  &  Z c Y -x  IS.PART.OF  Z)  via  the  IMPLBY 
statement  IS.PART.OF  IMPLBY  IS.PART.OF/IS 
(CNV). 

(See  comments  at  the  end  of  section  3.) 

- 3 3 4-

IMPLBY  IS(CNV)— 

IMPLBY  I S / I S-

IS.PART.OF  PERSON-

IS.PART.OF/  NOSE  AND  PERSON  AND  TEACHER 

IS.PART.OF  IMPLBY  I S. PART. O F / I S. PART. OF, I S. PART. OF/IS (CNV)— 
READY 
SOMETIMES 
READY 
IS 
READY 
NOSE 
READY 
NOSTRIL  IS.PART.OF  NOSE-
READY 
PROFESSOR  IS  TEACHER-
READY 
TEACHER  IS  PERSON-
READY 
NOSTRIL  IS.PART.OF  PROFESSOR*l— 
I  FIGURE  NOSTRIL  IS.PART0OF/  NOSE  AND  PERSON 
WHAT  NOW? 
1— 
I  FIGURE  NOSTRIL 
WHAT  NOW? 
1 — 
I  FIGURE  NOSTRIL  I S. PART.OF/  NOSE  AND  PERSON  AND  TEACHER  AND  PROFESSOR 
WHAT  NOW? 
O K-
W A I T . .. 
ANSWER  -  TRUE 
READY 
PERSON  IS  LIVING  CREATURE-
BAD  INPUT. 
READY 
PERSON  IS  LIVING.CREATURE-
READY 
HAS.AS. PART  IMPLBY  IS.PART.OF(CNV)— 
READY 
LIVING.CREATURE  SOMETIMES/HAS.AS .PART  NOSTRIL* 3— 
I  FIGURE  LIVING.CREATURE  SOMETIMES/HAS.AS.PART/  NOSTRIL 
WHAT  NOW? 
OK— 
ANSWER  -  TRUE 
READY 
CRT  IS  DISPLAY. D E V I C E-
READY 
CRT  I S. PART.OF  B5500— 
READY 
BRUTUS  IS  B5500— 
READY 
SCREEN  I S. PART. OF  DISPLAY. D E V I C E-
READY 
SCREEN  IS.PART,OF  BRUTUS* 1 — 
I  FIGURE  SCREEN  IS.PART.OF/  DISPLAY.DEVICE  AND  CRT 
WHAT  NOW? 
1— 
I  FIGURE  SCREEN  IS.PART.OF/  DISPLAY. DEVICE  AND  CRT  AND  B5500 
WHAT  NOW? 
1— 
I  FIGURE  SCREEN 
BRUTUS 
WHAT  NOW? 

IS.PART.OF/  DISPLAY.DEVICE  AND  CRT  AND  B5500  AND 

TRY  AGAIN. 

F i g.  4a 

Learning  and  Deduction  U s i ng  Several  Relations  From  SIR 

- 3 3 5-

a 

a 

IMPLBY  EXAMPLE.OF-

IS  S L I D E . R U L E-

line 

" a"  F i g.  4 a .] 

IMPLBY  IS/OWNS— 

[Answer  to  question  posed  at 

OK— 
W A I T . .. 
ANSWER  -  TRUE 
READY 
OWNS 
READY 
FIREMAN  OWNS  PAIR.OF.RED.SUSPENDERS-
READY 
DOCTOR  OWNS  PAIR.OF.RED.SUSPENDERS*l— 
I  FIGURE  DOCTOR  O W N S/  UNKNOWN 
WHAT  NOW? 
O K-
W A I T . .. 
ANSWER  -  UNKNOWN 
READY 
FIRECHIEF  IS  F I R E M A N-
READY 
FIRECHIEF  OWNS  PAIR.OF.RED.SUSPENDERS*l — 
I  FIGURE  FIRECHIEF  O W N S/  PAIR.OF.RED.SUSPENDERS 
WHAT  NOW? 
OK— 
W A I T . .. 
ANSWER  -  TRUE 
READY 
EXAMPLE.OF  IMPLBY  EXAMPLE.OF/IS— 
READY 
A 
READY 
STU  OWNS  LOG.LOG.DECITRIGl— 
READY 
LOG.LOG.DECITRIGl  EXAMPLE.OF  LOG.LOG.DECITRIG— 
READY 
LOG.LOG.DECITRIG 
READY 
STU  OWNS/A  SLIDE  R U L E * 1-
I  FIGURE  STU  O W N S / A/  LOG.LOG.DECITRIG 
WHAT  NOW? 
1 — 
I  FIGURE  STU  O W N S / A/  LOG.LOG.DECITRIG  AND  SUDE.RULE 
WHAT  NOW? 
OK— 
ANSWER  -  TRUE 
READY 
ENGINEERING.STUDENT  OWNS  S L I D E . R U L E-
READY 
GEORGE  EXAMPLE.OF  T E C H . M A N-
READY 
TECH.MAN 
READY 
GEORGE  OWNS/A  SLIDE.RULE*1 — 
I  FIGURE  GEORGE  O W N S / A/  UNKNOWN 
WHAT  NOW? 
1— 
I  FIGURE  GEORGE  O W N S / A/  UNKNOWN 
WHAT  NOW? 
OK— 
ANSWER  -  UNKNOWN 
READY 

IS  ENGINEERING.STUDENT-

F i g.  4b 

Learning  and  Deduction  Using  Several  Relations  From  SIR 

- 3 3 6-

[Provide  additional 

information  necessary  to  answer  question^ 

c 

b 

ENGINEERING.STUDENT  EXAMPLE.OF(CNV)/OWNS/EXAMPLE.OF  L O G . L O G . D E C I T R I G * l-
I  FIGURE  ENGINEERING.STUDENT  EXAMPLE.OF(CNV)/OWNS/EXAMPLE.OF/  UNKNOWN 
WHAT  NOW? 
STU  EXAMPLE.OF  TECH.MAN— 
STATEMENT  -  STU  EXAMPLE.OF  TECH.MAN 
O K ? . ..  Y E S-
W A I T . .. 
WHAT  NOW? 
2— 
I  FIGURE  ENGINEERING.STUDENT  EXAMPLE.OF(CNV)/OWNS/EXAMPLE.OF/ 
LOG.LOG.DECITRIG  AND  SLIDE.RULE 
WHAT  NOW? 
OK— 
ANSWER  -  TRUE 
READY 

to  question  posed  at 

[Answer 

line 

" c " .] 

F i g.  4c 

Learning  and  Deduction  Using  Several  Relations  From  SIR 

- 3 3 7-

IS  C I T Y-

IS.LESS.THAN  100000— 

NEW.YORK,LOS.ANGELES,SANTA.BARBARA,ORLANDO 
READY 
NEW.YORK  HAS.POPULATION  7781984— 
READY 
LOS.ANGELES  HAS.POPULATION  2479015— 
READY 
ORLANDO  HAS.POPULATION  88135— 
READY 
SANTA.BARBARA  HAS.POPULATION  58768— 
READY 
7781984,2479015  IS.GREATER.THAN  100000— 
READY 
88135,58768 
READY 
BOEING.707,BOEING.727, DC8  IS  JET.PLANE-
READY 
CONVAIR.240  IS  PROP.PLANE-
READY 
JET.PLANE,PROP.PLANE  SUBSET  AIRPLANE-
READY 
IS 
READY 
BOEING. 707, D C. 8  CARRIES  1 5 0-
READY 
BOEING.727  CARRIES  120— 
READY 
CONVAIR.240  CARRIES  50— 
READY 
150  IS.GREATER.THAN  120— 
READY 
50  IS.LESS.THAN  120— 
READY 
IS.LARGE  IMPLBY  (IS-CITY,)HAS.POPULATION/(IS. GREATER. THAN-100000,) 
HAS. POPULATION(CNV)/lS— 
READY 
IS.LARGE 
(CNVJ/IS— 
READY 
WHAT  IS  QUESTION— 
WHAT  IS  AIRPLANE* 1— 

IMPLBY  (IS-AIRPLANE, )CARRIES/(IS.GREATER.THAN-12 0, )CARRIES 

IMPLBY  IS/SUBSET— 

IS(CNV)/  BOEING.707  AND  BOEING.727  AND  D C .8  AND 

I  FIGURE  AIRPLANE 
CONVAIR.240 
WHAT  NOW? 
O K-
W A I T . .. 
ANSWER  -  BOEING.707 
BOEING.727 
D C .8 
CONVAIR.240 

AND 
AND 
AND 

READY 
D C .8  IS.LARGE  WHAT*1— 
I  FIGURE  D C .8  IS.LARGE/  JET.PLANE  AND  AIRPLANE 
WHAT  NOW? 
O K-
W A I T . .. 
ANSWER  -  JET.PLANE 

AND 

AIRPLANE 

READY 

a 

b 

c 

F i g.  5a 

Application  to  c e n s u s,  airplane  and  a i r l i ne 

f l i g ht  data  w i th  an  ambiguous  r e l a t i o n. 

-338-

WHAT  IS.LARGE  CITY*1 — 
I  FIGURE  CITY  IS.LARGE(CNV)/  NEW.YORK  AND  LOS.ANGELES 
WHAT  NOW? 
OK— 
W A I T . .. 
ANSWER  -  NEW.YORK 

AND 

LOS.ANGELES 

READY 
SANTA.BARBARA,ORLANDO  HAS.POPULATION  WHAT*— 
I  FIGURE  SANTA.BARBARA,ORLANDO  HAS.POPULATION/  58768  AND  88135 
WHAT  NOW? 
OK— 
W A I T . .. 
ANSWER  -  58768 
88135 

AND 

READY 
FLT.207  FLIES.FROM  NEW.YORK-
READY 
FLT.207  FLIES.TO  LOS0ANGELES— 
READY 
D C. 8  USED.ON  FLT.207— 
READY 
FLT.207  DEPARTS.AT  10:00AM— 
READY 
FLT.207  ARRIVES.AT  12:30PM— 
READY 
FLT.308  FLIES.FROM  NEW.YORK-
READY 
FLT.308  FLIES.TO  O R L A N D O-
READY 
BOEING. 727  USED.ON  FLT.308— 
READY 
FLT.45  FLIES.FROM  LOS.ANGELES-
READY 
FLT.45  FUES.TO  SANTA.BARBARA-
READY 
CONVAIR.240  USED.ON  F L T . 4 5-
READY 
FLT.45  DEPARTS.AT  1:30PM— 
READY 
FLT.45  ARRIVES.AT  2:15PM— 
READY 
1:30PM 
READY 
CONNECTS.WITH 
READY 
WHAT  (FLIES.FROM-NEW.YORK, )CONNECTS.WITH/FLIES.TO  SANTA.BARBARA* 1 — 
I  FIGURE  SANTA.BARBARA 
FUES.TO(CNV)/CONNECTS.WITH(CNV)/(FLIES.FROM-NEW.YORK,)  FLT.207 
WHAT  NOW? 
OK— 
ANSWER  -  FLT.207 
READY 
FLT.207  USED.ON(CNV)/lS.LARGE  AIRPLANE*— 
I  FIGURE  FLT.207  USED.ON(CNV)/lS.LARGE/  JET.PLANE  AND  AIRPLANE 
WHAT  NOW? 
O K-
ANSWER  -  TRUE 
READY 
F i g.  5b 

IMPLBY  ARRIVES.AT/ES.LATER.THAN(CNV)/DEPARTS.AT(CNV)— 

Application  to  census,  airplane  and  airline 

IS.LATER.THAN  12:30PM— 

f l i g ht  data  w i th  an  ambiguous  r e l a t i o n. 

-339-

a 

b 

IMPLBY  IMPLEES(CNV)— 

IMPLBY  IMPLIES/IMPLIES— 

IMPLIES  D-

IMPLBY  IMPLIES/FALSE— 

TRUE  IMPLBY  IMPLIES(CNV)/TRUE— 
READY 
FALSE 
READY 
A  IMPLIES  B— 
READY 
A  TRUE  PROPOSITION-
READY 
B  TRUE  PROPOSITION* 1— 
I  FIGURE  B  TRUE/  PROPOSITION 
WHAT  NOW? 
OK— 
W A I T . .. 
ANSWER  -  TRUE 
READY 
FOLLOWS.FROM 
READY 
IMPLIES 
READY 
C 
READY 
D  FALSE  PROPOSITION-
READY 
C  FALSE  PROPOSITION* 1— 
I  FIGURE  C  FALSE/  PROPOSITION 
WHAT  NOW? 
O K-
W A I T . .. 
ANSWER  -  TRUE 
READY 
FORGET  PROPOSITION @— 
FORGET  - 
PROPOSITION 
O K ? . ..  Y E S-
W A I T . .. 
READY 
B  IMPLIES  C— 
READY 
D  FALSE  PROPOSITION-
READY 
A  FALSE  PROPOSITION* 1— 
I  FIGURE  A  FALSE/  UNKNOWN 
WHAT  NOW? 
2— 
I  FIGURE  A  FALSE/  PROPOSITION 
WHAT  NOW? 
O K-
W A I T . .. 
ANSWER  -  TRUE 

F i g.  6a 

A  Simple  Problem  in  Logic  U s i ng  Modus  Ponens 

-340-

IMPLBY  ELEMENT/SUBSET-

READY 
ELEMENT 
READY 
s1  SUBSET  S2— 
READY 
S2  SUBSET  S3— 
READY 
El  ELEMENT  S I-
READY 
WHAT  IS  Q U E S T I O N-
READY 
El  ELEMENT  WHAT*1— 
I  FIGURE  El  ELEMENT/  SI  AND  S2 
WHAT  NOW? 
1— 
I  FIGURE  El  ELEMENT/  SI  AND  S2  AND  S3 
WHAT  NOW? 
O K-
W A I T . .. 
ANSWER  -  SI 
S2 
S3 

AND 
AND 

c 

[Answer 

to  question  posed  at 

READY 
D  FOLLOWS.FROM  A*2— 
I  FIGURE  D  FOLLOWS.FROM/  C  AND  B 
WHAT  NOW? 
1— 
I  FIGURE  D  FOLLOWS.FROM/  C  AND  B  AND  A 
WHAT  NOW? 
O K-
W A I T . .. 
ANSWER  -  TRUE 
READY 
F  IS  A X I O M-
READY 
FIND.PROOF.FROM  IS  Q U E S T I O N-
READY 
A  DERIVABLE.FROM  F— 
READY 
D  FIND.PROOF.FROM  AXIOM*6— 
ENTER  COMMA  UST  OF  RELATION  CLASSES  TO  BE  USED  OR  -  "  ANY 
ANY— 
D  FOLLOWS.FROM  A  DERIVABLE.FROM  F 
WHAT  NOW? 
OK— 
READY 

IS  AXIOM 

line 

" c " .] 

F i g.  6b 

Set  Theory  and  Simple  Theorem  Proving 

- 3 4 1-

IIS  2— 

IMPLBY  PLUS.  L I S / P L U S.  L I S— 

IS  Q U E S T I O N-

1  PLUS. 
READY 
2  PLUS.  L IS  3— 
READY 
3  PLUS.  L IS  4— 
READY 
PLUS. 2 . IS 
READY 
WHAT 
READY 
2  P L U S . 2 . IS  W H A T * 1— 
I  FIGURE  2  P L U S . 2 . I S/  4 
WHAT  N O W? 
OK— 
W A I T . .. 
ANSWER  -  4 
READY 
M I N U S . 2 . IS 
READY 
1  DIVISIBLE.BY.2  F A L S E-
READY 
2  DIVISIBLE.BY.2  T R U E-
READY 
DIVISIBLE.BY.2 
READY 
4  DIVISIBLE.BY.2  W H A T * 2— 
I  FIGURE  4  D I V I S I B L E . B Y . 2/  TRUE 
WHAT  N O W? 
OK— 
W A I T . .. 
ANSWER 
READY 
3  DIVISIBLE.BY.2  W H A T * 3— 
I  FIGURE  3  D I V I S I B L E . B Y . 2/  FALSE 
WHAT  N O W? 
OK— 
W A I T . .. 
ANSWER  -  FALSE 
READY 

-  TRUE 

IMPLBY  PLUS.2  .IS(CNV)— 

IMPLBY  M I N U S .2 . I S / D I V I S I B L E . B Y . 2— 

a 

b 

c 

F i g.  7 

A r i t h m e t ic  and  H a n d l i ng  Recursive  D e f i n i t i o ns 

-342-

3 M 3 CL  1C  0M1CR— 
READY 
3 M 3 CL  1M1C  1M1CR— 
READY 
3 M 3 CL  2C  0M2CR— 
READY 
3 M 3 CL  1C  0M2CR— 
READY 
3 M 2 CL  1M  1M1CR— 
READY 
3 M 2 CL  2C  0M3CR— 
READY 
3 M 1 CL  1C  OM3CR— 
READY 
3 M 1 CL  2M  2M2CR— 
READY 
2 M 2 CL  1M1C  2MCR— 
READY 
2 M 2 CL  2M  3M1CR— 
READY 
1 M 1 CL  1M  3M2CR— 
READY 
1 M 1 CL  1M1C  3M3CR— 
READY 
OM3CL  1C  3M1CR— 
READY 
OM3CL  2C  3M2CR— 
READY 
0 M 2 CL  1C  3M2CR— 
READY 
0 M 2 CL  2C  3M3CR— 
READY 
OM1CL  1C  3M3CR— 
READY 
GET.TO 
READY 
3 M 3 CL  GET.TO  3 M 3 C R * 1 1— 
ENTER  C O M MA  LIST  OF  RELATION  CLASSES  TO  BE  USED  OR  - 
ANY*- 

IS  Q U E S T I O N-

[ F i r st  s o l u t i on 

f o l l o w s :] 

"  ANY  " 

[Second  s o l u t i on 

3 M 3 CL  2C  0M2CR  1C(CNV)  3 M 2 CL  2C  0M3CR  1C(CNV)  3 M 1 CL  2M  2M2CR 
1M1C(CNV)  2 M 2 CL  2M  3M1CR  1C(CNV)  0 M 3 CL  2C  3M2CR  1M(CNV)  1 M 1 CL 
1M1C  3M3CR 
3 M 3 CL  2C  0M2CR  1C(CNV)  3 M 2 CL  2C  0M3CR  1C(CNV)  3 M 1 CL  2M  2M2CR 
1M1C(CNV)  2 M 2 CL  2M  3M1CR  1C(CNV)  0 M 3 CL  2C  3M2CR  1C(CNV)  0 M 2 CL 
3M3CR 
WHAT  N O W? 
OK— 
READY 

f o l l o w s :] 

2C 

F i g.  8 

S o l v i ng 

the  M i s s i o n a r y - C a n n i b al  Problem 

- 3 4 3-

In  attempting  to  answer  a  question, 

it  may 

be  necessary  to  supply  further  information  to  the 
system.  Such  a  situation  is  illustrated  by  line 
" b"  in  the  conversation  starting  at  line  " a ". 

Notice  that  in  the  case  of  a  "WHAT  R  Y" 

question,  SAMENLAQ 
to  apply  the  R(CNV)  relation  to  the  node  Y. 
[B4,2a] 

II  proceeds  by  attempting 

Figure  5  shows  an  application  of  SAMENLAQ 

II  to  census,  airplane  and  airline  flight  data. 
Note  especially  that  even  though  the  relation 
'IS.LARGE" 
is  defined  ambiguously  in  lines  "a" 
and  " b"  as  to  its  application  to  cities  or  air­
planes,  SAMENLAQ  II  can  disambiguate  it  from 
context  (lines  "c"  and  "d"). 

In 

figure  6,  SAMENLAQ  II  works  with  simple 

The  rule  of  inference 

logic  and  set  theory. 
Modus  Ponens  is  entered  in  6a  line  "a"  ,  and 
with  this  and  the  transitivity  of  IMPLIES  given 
in  line  " b ",  simple  "chain  implication"  prob­
lems  can  be  solved. 
SET  and  ELEMENT  are  introduced  along  with  the 
rule  (x)(x  £  A  &  A c B - X e B ).  Then  some  set 
membership  problems  are  solved,  and  finally,  a 
simple  proof  is  constructed. 

In  6b  the  relations  SUB­

II  being  taught 

shows  SAMENLAQ 

Figure  7 
its 
first  lesson  in  arithmetic.  Although  neither 
numbers  nor  arithmetic  functions  have  been  built 
into  the  SAMENLAQ  II  structure  or  executive 
routines,  SAMENLAQ  II 
is  capable  of  being 
taught  arithmetic  the  way  school  children  used 
to  be  taught: 
by  first  memorizing  tables,  and 
then  being  taught  certain  rules.  Notice  espe­
cially  that  divisibility  by  2  was  defined  recur­
sively  in  lines  " a ", 
SAMENLAQ  II  could  have  been  taught  multiplica­
t i o n,  division, 
the  recursive  definitions  for  less 
than  and  greater  than  as  well  as  other  arithme­
tic  relations. 

" b"  and  " c ".  Similarly, 

Figure  8  shows  SAMENLAQ  II  solving  the 

in  the  problem  with  all  the  possible 

Missionary  -  Cannibal  Problem,  with  three  mis­
sionaries, 
three  cannibals  and  a  boat  that  holds 
a  maximum  of  two  people. 
The  problem  was 
described  to  SAMENLAQ  II  as  a  set  of  all  the 
legal  states 
transitions  between  the  states. 
For  example, 
the  first  line  represents  the  fact  that  if  3  mis­
sionaries  and  3  cannibals  are  on  the  left  bank 
with  the  boat  on  the  left  bank, 
then  1  cannibal 
can  take  the  boat  to  the  right  bank,  which  w i ll 
result  in  there  being  0  missionaries  and  1  can­
nibal  on  the  right  bank  with  the  boat  on  the 
right  bank.  SAMENLAQ  II  solves  the  problem 
by  showing  how  the  boat  should  be  used  to  get 
from  the  initial  state,  3M3CL, 
state,  3M3CR.  Any  problem  solving  task  that 
can  be  represented  as  finding  a  path  from  an 
initial  state  to  a 
transition  graph  can  in  theory  be  solved  s i m i­

final  state  through  a  state 

to  the  final 

larly  by  SAMENLAQ 

I I .* 

5.  Extension  of  the  SAMENLAQ  Structure 
Work  is  now  proceeding  on  the  design  and 

2. 

implementation  of  a  memory  net  structure,  MENS9 
which  goes  further  than  SAMENLAQ  II  toward  sat­
isfying  goals  discussed  in  the  first  section  of 
this  paper. 
in  the  SAMENLAQ  structure  are: 
1  . 

The  two  major  improvements  needed 

the  ability  to  deal  with  a  name  which  is 
itself  a  statement 
the  ability  to  store  names  which  represent 
some  unspecified  other  names, 
i . e.  act  as 
variables. 
first  would  facilitate 

The 
the  handling  of  n-ary 
relations  and  statements  which  serve  to  modify 
or  give  further  information  about  other  state­
ments. 
The  second  would  allow  generalizations 
to  be  stored,  and  would  also  permit  the  storage 
of  statements  of  the  predicate  calculus  directly 
in  the  memory  structure. 
could  then  be  interpreted  by  the  executive  and 
used  as  rules  of  inference  to  direct  the  memory 
search  routines 
in  a  manner  similar  to  the  way 
SAMENLAQ  II  deals  with  IMPLBY  definitions. 
The  currently  extant  implementation  of  MENS 
(which  is  programmed  in  Burroughs  Extended 
ALGOL  and  uses  ASLIP,  a  SLIP  like  package  of 
list  processing  routines) 
improvement,  and  work  is  progressing  on  the  de­
sign  of  the  implementation  of  the  second  i m­
provement. 

These  statements 

incorporates 

the  first 

items 

Thus, 

The  basic  element  of  the  MENS 

The  main  generalization  involved  in  going 
from  SAMENLAQ  to  MENS  was  to  let  xRy  state­
ments  be  nodes  in  the  net  along  with  arguments 
and  relations. 
structure  is  called  an  item,  which  may  be  an 
unstructured  unit  or  may  be  a  structure  consist­
ing  of  a  pair  or  triple  of  items. 
are  similar  to  the  "events"  used  by  Simmons  et 
al  in  Protosynthex  I I1 1.  As  in  SAMENLAQ,  a 
major  characteristic  of  the  MENS  structure 
is 
that  there  is  no  duplication  of  items  or  struc­
tures; 
the  physically  same  item  is  used  every­
where  that  the  structure 
to  in  a  containing  structure.  Several  implica­
tions  of  this  uniqueness  of  items  are: 
(1)  two 
structures  which  have  a  substructure  in  common 
actually  overlap  in  the  net, 
item  representing  logical  implication,  all  struc­
interpretable  as  rules  of  inference  w i ll  be 
tures 
discoverable  directly  from 
it  w i ll 
be  a  central  substructure  of  all  of  them,  (3)  in 
♦Since  SAMENLAQ  II  exhaustively  searches 

(2)  if  there  is  an 

that  item  since 

it  represents 

is  referred 

the  state  transition  graph, 
Thus  in  certain 
nential  growth  is  ever  present. 
interesting  problems  exhaustive  search  would  be 
infeasible  and  heuristic  search  techniques  would 
be  necessary. 

the  threat  of  expo­

-344-

5. 

6. 

A  Computer  System  for 

Inference  Execution  and  Data  Retrieval. 
RM-5085-PR,  The  RAND  Corporation, 
Santa  Monica,  California,  Sept.,  1966. 
Also  C.ACM  10,11  (Nov.  1967),  715-
721. 

Longyear,  C.  R.  Memory  Structure  in 
DEACON  Natural  Language  Question-
Answering  Systems.  P-129,  General 
Electric  Company,  TEMPO,  Santa 
Barbara,  California,  1966. 

7.  Quillian,  M.  R.,  Semantic  Memory,  un­

published  Ph.D.  dissertation,  Carnegie 
Institute  of  Technology,  Pittsburgh, 
Pennsylvania,  1966.  Also  AFCRL-66-
189,  Bolt  Beranek  and  Newman,  I n c ., 
Cambridge,  Massachusetts,  1966. 

8.  Raphael,  B.,  Semantic  Information  Retrie­

val,  unpublished  Ph.D.  dissertation, 
Massachusetts  Institute  of  Technology, 
Cambridge,  Massachusetts,  1964.  Also 
TR-2,  Project  MAC,  Massachusetts 
Institute  of  Technology,  Cambridge 
Massachusetts,  1964. 

9.  Shapiro,  S.  C,  A  Memory  Net-  Structure: 
Present  Implementation  and  a  Proposed 
Language,  Technical  Report  #53,  Com­
puter  Sciences  Department,  University 
of  Wisconsin,  Madison,  Wisconsin, 
Dec.  1968. 

,  Woodmansee,  G.  H ., 
Krueger,  M.  W .,  A  Semantic  Associa-
tional  Memory  Net  That  Learns  and 
Answers  Questions  (SAMENLAQ).  Tech­
nical  Report  #8,  Computer  Sciences  De­
partment,  University  of  Wisconsin, 
Madison,  Wisconsin,  Jan.,  1968. 

10. 

1 1.  Simmons,  R.  F.,  Burger,  J.  F.,  A 

Semantic  Analyzer  for  English  Sentences. 
SP-2 987,  Systems  Development  Corp., 
Santa  Monica,  California,  Jan.,  1968. 

the  separate  occurrences  of  the  variable 

general  statements  involving  a  quantified  varia­
ble, 
w i ll  all  be  pointers  to  a  single  item,  so  that  a 
substitution  attached  to  that  item  will  serve  as 
a  substitution  for  all  occurrences  of  the  varia­
ble. 

Allowing  a  structure  to  be  formed  from  a 

pair  of  substructures  provides  for  the  represen­
tation  of  unary  relations  such  as  negation  and 
quantification.  Allowing  a  structure  to  be 
formed  from  a  triple  of  substructures  provides 
for  the  representation  of  binary  relation,  and 
since  any  of  the  substructures  may  in  fact  be 
structures  as  well  as  unstructured  items  pro­
vides  for  the  representation  of  n-ary  relations. 
A  more  direct  representation  of  n-ary  relations 
is  provided  in  another  version  of  MENS  being 
implemented*,  which  will  allow  any  structure  to 
consist  of  any  number  of  substructures. 

It  is  demonstrated  in  the  examples  given  in 

the  MENS  structure  should  enable 

Section  4  that  SAMENLAQ  II  is  capable  of  an­
swering  questions  in  formal  logic  involving  simple 
chains  of  inference  and  basic  set  theory.  With 
its  ability  to  store  statements  of  the  predicate 
calculus, 
simple  question  answering  routines  to  perform 
more  complicated  theorem  proving.  Although  we 
should  perhaps  not  expect  a  high  powered 
theorem  prover  to  be  developed  in  this  way, 
MENS  extension  of  SAMENLAQ  will  provide  an 
interesting  contrast  to  systems,  such  as  Green 
and  Raphael's  QA23,  which  use  theorem  proving 
techniques 

to  answer  questions. 

the 

References 

1.  Craig,  J.  A.,  Berezner,  S.  C,  Carney, 

H.  C,  Longyear,  C.  R.,  DEACON: 
Direct  English  Access  and  CONtrol.  Proc. 
AFIPS  FJCC  (1966),  365-380. 

2.  Elliott,  R.  W .,  A  Model  for  a  Fact  Retrie­
val  System,  unpublished  Ph.D.  disserta­
tion,  University  of  Texas,  Austin,  Texas, 
1965. 

3.  Green,  C.  C,  Raphael,  B.,  Research  on 
Intelligent  Question-Answering  System. 
AFCRL-67-0370,  Stanford  Research  Insti­
tute,  Menlo  Park,  California,  May,  1967. 

4. 

Levien,  R.,  Maron,  M.  E.,  Relational 

Data  File:  A  Tool  for  Mechanized  Infer­
ence  execution  and  Data  Retrieval. 
RM-4793-PR,  The  RAND  Corporation, 
Santa  Monica,  California,  1965. 

*A  paper  describing  this  version  of  MENS 

and  the  natural  language  question  answering 
system  which  will  use  it  is  forthcoming  from  the 
RAND  Corporation  as  a  RAND  Memorandum  by 
Martin  Kay,  Ronald  M.  Kaplan,  and  Stuart  C. 
Shapiro. 

- 3 4 5-

APPENDIX  -  MEMORY  STRUCTURE 

READY 

DUMP  MEMORY  ON  TELETYPE@ — 

THE  MEMORY  IS  — 

(DIV.BY,2V20)(PLUS,2JS-/13)(PLUS>1.IS-/4)(PLUS>1JS(INV)-/1) 

(DIV.BY.2-/24)(PLUS.2.IS(INV)-/l2)(PLUS.l.IS(INV)-/5) 

(DIV.BY.2/25)(PLUS.l.IS-/6)(PLUS,l,IS(INV)-/3) 

2  = 
/l  =  1, 
1  =  (DIV.BY.2-/l8)(PLUS.l.IS-/2) 
/2  =  2, 
3  = 
/3  =  2, 
/4  =  3, 
4  = 
/5  =  3, 
/6  =  4, 
PLUS. 1.IS/PLUS. L IS  =  (IMPLBY(INV)-/7) 
/7  =  PLUS.2.IS, 
PLUS. 2. IS (IN V) = (IMPLBY(INV)-/14)(IMPLBY-/8) 
/8  =  PLUS.1.IS(INV)/PLUS.1.IS(INV)/, 
PLUS. 2. IS  =  (IMPLBY-/9) 
/9  =  PLUS. 1.IS/PLUS. l . I S /, 
QUESTION  =  (IS(INV)-/10) 
/10  =  WHAT, 
WHAT  =  ( I S - / H) 
/ ll  =  QUESTION, 

/13  =  4f 
/14  =  MINUS.2.IS, 
MINUS.2.IS(INV)  =  (IMPLBY-/15) 
/15  =  PLUS.2.IS/, 
MINUS. 2.IS  =  (IMPLBY-/16) 
/16 = PLUS. 2. IS (IN V)/, 
FALSE  =  (DIV.BY.2(INV)-/17) 
/17  =  1,3 
/18  =  FALSE, 
TRUE  =  (DIV.BY.2(INV)-/19) 
/19  =  2,4 
/ 20  =  TRUE, 
MINUS. 2. IS/DIV. BY. 2  =  (IMPLBY(INV)-/2l) 
/ 2l  =  DIV.BY.2, 
DIV.BY.2(INV)  =  (IMPLBY-/22) 
/22  =  DIV.BY.2(INV)/MINUS.2.IS(INV)/, 
DIV. BY. 2  =  (IMPLBY-/23) 
/23  =  MINUS.2.IS/DIV.BY.2/, 
/24  =  TRUE, 
/25  =  FALSE, 
READY 

Fig.  9 

Shows  SAMENLAQ  II's  actual  memory  structure  after  its  arithmetic 

lesson,  which  was  shown  in  figure  7.  The  underlined  material  was  learned 
after  being  discovered  as 

implicit  information  while  answering  questions. 

-346-

