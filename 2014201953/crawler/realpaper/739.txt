Conditional Constraint Satisfaction: Logical Foundations and Complexity

Georg Gottlob

Computing Laboratory

Oxford University

OX1 3QD Oxford, UK

georg.gottlob@comlab.ox.ac.uk

Gianluigi Greco
Dip. di Matematica

Toni Mancini

Dip. di Informatica e Sistemistica
Universit`a della Calabria Universit`a di Roma “La Sapienza”

I-87030 Rende, Italy
ggreco@mat.unical.it

I-00198 Roma, Italy

tmancini@dis.uniroma1.it

Abstract

Conditional Constraint Satisfaction Problems (CC-
SPs) are generalizations of classical CSPs that sup-
port conditional activation of variables and con-
straints. Despite the interest emerged for CCSPs
in the context of modelling the intrinsic dynamism
of diagnosis, structural design, and product conﬁg-
uration applications, a complete characterization of
their computational properties and of their expres-
siveness is still missing. In fact, the aim of the pa-
per is precisely to face these open research issues.
First, CCSPs are formally characterized in terms of
a suitable fragment of ﬁrst-order logic. Second, the
complexity of some basic reasoning tasks for CC-
SPs is studied, by establishing completeness results
for the ﬁrst and the second level of the polynomial
hierarchy. Finally, motivated by the hardness re-
sults, an island of tractability for CCSPs is identi-
ﬁed, by extending structural decomposition meth-
ods originally proposed for CSPs.

1 Introduction

Constraint satisfaction is a static framework in its original
formulation that cannot be used to model and solve deci-
sion problems in scenarios where uncertainty and dynamism
come into play.
Indeed, a Constraint Satisfaction Problem
(CSP) instance (e.g., [Dechter, 2003]) is basically a triple
(Var , U, C), where Var is a ﬁnite set of variables, U is a ﬁ-
nite domain of values, and C = {C1, C2, . . . , Cq} is a ﬁnite
set of constraints, where each Ci is a pair (Si, ri), in which
Si ⊆ Var is called the constraint scope, and ri ⊆ U |Si|
is
called the constraint relation. Then, by solving a CSP in-
stance, we simply mean determining whether there is a sub-
stitution θ : Var (cid:3)→ U that satisﬁes all constraints.

To remove the assumption that all the variables, the do-
mains of values, and the constraints are known beforehand
and do not change over time, several generalized CSP frame-
works have been already proposed in the literature (see, e.g.,
[Verfaillie and Jussien, 2005] and the references therein). In
this paper, we focus on the core of these extensions, by con-
sidering the framework for Conditional Constraint Satisfac-
tion Problems (CCSPs).

Indeed, CCSPs (proposed with the name of Dynamic CSPs
in [Mittal and Falkenhainer, 2000]) are CSPs tailored to sup-
port conditional activation of variables and constraints, which
have been used in model diagnosis, structural design, and
conﬁguration problems. As an example application, one may
think of an automated personal computer (PC) conﬁgurator
devoted to assemble several PC components. Conditional
constraints may require other components to be added to the
current conﬁguration, depending on the choices made for the
others. E.g., if the motherboard does not embed a video-card,
then a compatible one should be added.

Despite the interest emerged for the CCSPs framework
and the efforts spent in the design of specialized algo-
rithms for their efﬁcient solution (e.g., [Soininen et al., 1999;
Bowen and Bahler, 1991; Sabin et al., 2003; Gelle and Falt-
ings, 2003; Keppens and Shen, 2004]), many aspects have
not yet been investigated and several research questions are,
in fact, still open. For instance, both the expressiveness and
the complexity issues arising in this setting have only par-
tially been studied in the literature [Soininen et al., 1999;
Bowen and Bahler, 1991; Mittal and Falkenhainer, 2000].
And, more importantly, differently from the case of classical
CSPs where several classes of instances that are efﬁciently
solvable have been singled out (e.g., [Pearson and Jeavons,
1997; Gottlob et al., 2000]), no island of tractability is known
for CCSPs, whose identiﬁcation is instead crucial for appli-
cations in real world scenarios.

The aim of this paper is precisely to shed lights on these
aspects and to face the above research questions. To make
our analysis formal, we shall exploit the logic-based charac-
terization of a CSP instance (cf. [Kolaitis and Vardi, 1998])
as a pair (φ, D), where D is the constraint database, i.e.,
the set of all the constraint relations ri, for each constraint
Ci = (Si, ri), and φ is a ∃F O∧,+ sentence, i.e., an ex-
istentially quantiﬁed ﬁrst-order formula with no negations
or disjunctions, over the relational vocabulary consisting of
the atoms ri(Si). Within this framework, we investigate the
class of those constraint satisfaction problems build over the
∃F O→,∧,+ fragment of the ﬁrst-order logic, which consists
of all the formulas obtained extending ∃F O∧,+ with the im-
plication connective “→”. The rationale of this approach is
that enhancing ∃F O∧,+ with the implication connective is a
mathematically well-founded approach to model conditional
activation of variables, as for it is next exempliﬁed.

IJCAI-07

88

Example 1. Consider again the PC conﬁguration scenario.
Then, the ∃F O→,∧,+ formula:
∃M motherboard (M ) ∧ (hasNoVideo(M ) →

∃V, C ﬁt(M, V ) ∧ cost (V, C))
states, intuitively, that a motherboard M is needed to assem-
ble a PC; moreover, if M has no embedded video, then a
video-card V ﬁtting the requirements of M has to be chosen
(and, C is the additional cost).
(cid:4)
In fact, we show that ∃F O→,∧,+ formulas characterize (in
a precise, logical sense) the class of CCSPs. Based on this
result, we then embark on a systematic study of ∃F O→,∧,+.
In summary:

 We investigate the expressive power of CCSPs by depict-
ing, in Section 3, a clear picture of its relationships with
other logic-based CSP formalisms. The results of this com-
parison are graphically summarized in Figure 1.

 In Section 4, we study the computational complexity of
some basic reasoning tasks for CCSPs. We considered both
the case where one is interested in ﬁnding a generic solu-
tion and the case where solutions are reﬁned by means of
some pro-orders. From our analysis, summarized in Fig-
ure 2, it emerges that reasoning with CCSPs is intractable,
with hardness and membership results being established for
various classes at the ﬁrst and the second level of the poly-
nomial hierarchy.

 Motivated by the above complexity results, in Section 5,
we turn to identify tractable classes of ∃F O→,∧,+ formulas,
by issuing restrictions on the constraints interactions. As
a bad news, we show that decomposition methods for tra-
ditional CSPs do not guarantee the tractability of CCSPs.
Indeed, the NP-hardness of the SATISFIABILITY problem
also holds for the class of CCSPs whose constraints inter-
actions can be modelled with an acyclic primal graph (see,
e.g., [Dechter, 2003]).

 The major reason for the failure of traditional decompo-
sition methods is that the primal graph obscures the real
nature of the interactions occurring in CCSPs due to the
variables activation. Hence, in Section 5.2, we introduce
a special graphical representation for CCSPs, called impli-
cation graph, and show that SATISFIABILITY is feasible
in LOGCFL and hence in polynomial time, over instances
whose implications graphs are acyclic or have, more gener-
ally, bounded treewidth [Robertson and Seymour, 1986].

2 ∃F O→,∧,+ Formulas: Syntax and Semantics
In this section, we propose a framework for modelling condi-
tional activation of variables and constraints in CSPs, which
is based on an extension of the fragment ∃F O∧,+ with the
logical implication, as formalized next.

An ∃F O→,∧,+ sentence (over a vocabulary R of constraint
relations) is a formula ∃ (cid:5)X φ( (cid:5)X), where φ( (cid:5)X) belongs to the
fragment F O→,∧,+ of ﬁrst-order logic, deﬁned as follows:
- “true” and “false” are in F O→,∧,+;
- Any atom of the form r( (cid:5)X) (r ∈ R) is in F O→,∧,+;

- If φ( (cid:5)X) and ψ( (cid:5)Z) are in F O→,∧,+, then φ( (cid:5)X) ∧ ψ( (cid:5)Z) is

in F O→,∧,+;

- If φ( (cid:5)X) is in F O∧,+ and ψ( (cid:5)X, (cid:5)Y ) is in F O→,∧,+, then

φ( (cid:5)X) → ∃(cid:5)Y ψ( (cid:5)X, (cid:5)Y ) is in F O→,∧,+.

The set of all the variables in ψ is denoted by V(ψ).
Example 2. The following formula ψ0 ∈ ∃F O→,∧,+ adds
some further requirements to the conﬁguration constraints in
Example 1 (names have been shortened, for simplicity):
∃M m(M ) ∧ (h(M ) → ∃V, C f (M, V ) ∧ c(V, C))
∧ (e(M ) → (b(M ) → ∃H g(M, H)))

Here, we have V(ψ0) = {M, V, C, H}.

(cid:4)
Given a constraint database D and an ∃F O→,∧,+ formula
ψ, we denote by (ψ, D) the constraint satisfaction problem
instance of deciding an assignment for variables in ψ that sat-
isﬁes all the constraints over D.

Note that because of the presence of the implication con-
nective, differently from the standard CSPs, a formula ψ ∈
∃F O→,∧,+ can be satisﬁed by partial assignments over V(ψ).
Formally, a partial assignment θ for (ψ, D) is a mapping from
a subset of V(ψ) to values in D. Then, the θ-reduct of ψ is
the formula θ(ψ) resulting from ψ by (1) applying all the sub-
stitutions in θ to the variables in ψ, and (2) by replacing all
the atoms in which a variable in V(ψ) \ V(θ) occurs with
“false”, where V(θ) denotes the variables in the domain of θ.
A solution for (ψ, D) is a partial assignment θ such that θ(ψ)
evaluates to true over D, denoted by D |= θ(ψ).
Example 3. Consider the database D0 containing the rela-
tions: m = {(m1), (m2)}, h = {(m2)}, f = {(m2, v2)},
c = {(v2, c4), (v1, c3)}, e = {(m1)}, b = {(m1)} and
g = {(m1, h4)}. Then, the followings assignments are par-
tial:

θ1 = {M/m2, V /v2, C/c3}
θ2 = {M/m1, H/h4}

Note that θ1 is not a solution for (ψ0, D0). On the other
(cid:4)

hand, the θ2-reduct of ψ0 evaluates true over D0.

3 Expressiveness of ∃F O→,∧,+ Formulas
The ﬁrst crucial questions for CCSPs are how they relate with
other approaches to deal with conditional activation of vari-
ables and constraints, and whether they are more expressive
(in a precise logical sense) than classical CSPs. Both the
questions are answered in this section.

Let F be a CSP formalism, i.e., a formalism for modelling
constraint satisfaction problems (e.g., a subset of F O), and let
D be a constraint database. For a formula φ ∈ F , let S(φ, D)
denote the set of all the solutions, and for a set of variables
V, let S(φ, D)[V] denote the set obtained from S(φ, D) by re-
stricting each solution over the variables in V.

Let F1 and F2 be two CSP formalisms. We say that
F1 weakly simulates F2 if for each φ2 ∈ F2 there exists
φ1 ∈ F1 such that for each constraint database D, S(φ2, D) =
S(φ1, D)[V(φ2)]. We say that F1 is more expressive than F2 iff
F1 simulates F2 but F2 does not simulate F1. If F1 simulates
F2 and viceversa, F1 and F2 are equivalent. If F1 does not
simulate F2, and F2 does not simulate F1, we say that F1 and
F2 are incomparable.

IJCAI-07

89

Figure 1: Expressiveness of ∃F O→,∧,+.

Armed with the notions above, we compared the expres-
siveness of ∃F O→,∧,+ with conditional CSPs (CCSP)s, with
∃F O∧,+ and with the positive existential disjunctive frag-
ment ∃F O∨,∧,+ of F O. Results are summarized in Figure 1.

3.1 Comparison with Conditional CSPs
A CCSP speciﬁcation π is a tuple (cid:8)Var , Var I , CC, CA(cid:9),
where Var is a set of variables, Var I ⊆ Var is a set of
initial variables (intuitively, of the variables that are initially
“active”), and where the set of constraints is partitioned into
compatibility (CC) and activity (CA) constraints.

Compatibility constraints are constraint atoms (as in tra-
ditional CSPs), while activity constraints are of the follow-
ing kinds: require variable (RV): c(V1, . . . , Vk) RV→ V ; al-
ways require variable (ARV): {V1, . . . , Vk}ARV→ V ; require
not (RN): c(V1, . . . , Vk)RN→ V ; always require not (ARN):
{V1, . . . , Vk}ARN→ V , with {V1, . . . , Vk, V } ⊆ Var .

A CCSP instance is a pair (π, D), where π is a speciﬁ-
cation and D is a constraint database. A legal assignment for
(π, D) is a partial mapping θ from variables in Var to domain
values in D. A solution is a legal assignment such that: (1)
Var I ⊆ V(θ); (2) θ satisﬁes every active compatibility con-
straints, i.e., those compatibility constraints whose variables
are in V(θ); and (3) θ satisﬁes every activity constraint:
• W ARV→ V is satisﬁed if W ⊆ V(θ) implies V ∈ V(θ);
• c(V1, . . . , Vk) RV→V is satisﬁed if {V1, . . . , Vk} ⊆ V(θ)

and (θ(V1), . . . θ(Vk)) ∈ c (in D) implies V ∈ V(θ);
• W ARN→ V is satisﬁed if W ⊆ V(θ) implies V (cid:10)∈ V(θ);
• c(V1, . . . , Vk)RN→V is satisﬁed if {V1, . . . , Vk} ⊆ V(θ)

and (θ(V1), . . . θ(Vk)) ∈ c (in D) implies V (cid:10)∈ V(θ);
As usual, the set of all the solutions is denoted by S(π, D).

We next show that ∃F O→,∧,+ formulas are, in fact, an el-

egant, mathematically-founded characterization of CCSPs.
Theorem 1. ∃F O→,∧,+ simulates CCSP.
Proof (Sketch). Let π be (cid:8)Var , Var I , CC , CA(cid:9). We build an
∃F O→,∧,+ formula ψπ = ∃Var , Var I
φc, where
φc is obtained as follows:
• if c is the compatibility constraint c(V1, . . . , Vk), then
φc =
• if c is the activity constraint c(V1, . . . , Vk) RV→V , φc is given
by c(V1, . . . , Vk) → dom(V ).

V ∈{V1,...,Vk}\Var I dom(V ) → c(V1, . . . , Vk);

c∈CC ∪CA

(cid:2)

V

Note that other activity constraints can be, in fact, simulated
by RV and compatibility constraints (cf. [Mittal and Falken-
hainer, 2000]). Moreover, w.l.o.g., we have assumed the ex-
istence of a monadic relation dom listing all possible values
for the variables — without this relation, the simulation is
also possible, but would have required a much intricate con-
struction for ψπ.

It is possible to show (details omitted for lack of space)
that, for every constraint c of π, a legal assignment θ satisﬁes
c iff the corresponding partial assignment θ of ψπ satisﬁes the
subformula φc. Hence, ∀D, it is: S(π, D) = S(ψπ, D).

Not surprisingly, CCSPs have been previously simulated
by means of different logic-based frameworks. For instance,
[Bowen and Bahler, 1991] expressed CCSPs by means of
the FOF logic; and, [Bacchus and Walsh, 2005] discussed a
rich formalism where implications can be simulated by nega-
tions and disjunctions, by introducing a speciﬁc propagation
method and characterizing when this method enforces gener-
alized arc-consistency. Yet, the precise logical characteriza-
tion of CCSPs was unknown, which is made clear below.
Theorem 2. CCSP simulates ∃F O→,∧,+.
Proof (Sketch). Let ψ be an ∃F O→,∧,+ formula. We build
a CCSP πψ as follows. First, all the atoms are converted
into compatibility constraints. Then, for each subformula
φ(cid:6)( (cid:5)X) → ∃(cid:5)Y φ(cid:6)(cid:6)( (cid:5)X, (cid:5)Y ) where φ(cid:6) = c1( (cid:5)X)∧· · ·∧ck( (cid:5)X), and
j
where (cid:5)Y = {Y1, . . . Ym}, we create m × k fresh variables Y
i
(1 ≤ i ≤ m, 1 ≤ j ≤ k), m × k activation constraints of the
m (1 ≤ j ≤ k), and m ARV
form cj( (cid:5)X) RV→Y
constraints of the form {Y 1
i }ARV→ Yi. It can be shown
that for each database D, S(ψ, D) = S(πψ, D)[V(ψ)].

j
1 , . . . cj( (cid:5)X) RV→Y j

i , . . . , Y k

Interestingly, if ψ is such that the left-hand side of any im-
plicative formula is a constraint atom only, the encoding can
be adjusted not to use fresh variables. Hence, we can show a
stronger kind of simulation: ∀D, S(ψ, D) = S(πψ, D).
Corollary 1. CCSP and ∃F O→,∧,+ are equivalent.

Before leaving the section, note that in [Mittal and Falken-
hainer, 2000] solutions to CCSPs are also required to be
subset-minimal. In fact, the simulation techniques of The-
orem 1 and 2 (in the case left sides of implications are con-
straint atoms) established a one-to-one correspondence be-
tween solutions of CCSPs and assignments for ∃F O→,∧,+
formulas. Hence, further properties on the solutions are pre-
served as well, but formal results are omitted.

3.2 Comparison with Other Logics for CSPs
A comparison between CSPs and CCSPs has been proposed
in [Soininen et al., 1999], by focusing on a knowledge repre-
sentation perspective. Indeed, it is shown that CCSPs are not
modular representable by standard CSPs, i.e., intuitively, that
small changes in a CCSP may result in signiﬁcant changes in
any corresponding CSP, which is an encoding for it.

Based on the logical equivalence between CCSPs and
∃F O→,∧,+, we can now formally compare CCSPs with
CSPs, and in fact prove that there are CCSPs (formulas in
∃F O→,∧,+) that cannot be “simulated” in ∃F O∧,+. The ar-
gument is that there is no way to encode the “→” connective
by means of conjunctions. In turn, “→” cannot encode dis-
junction of atoms. Thus, the following relationships hold1.
Theorem 3. ∃F O→,∧,+ is such that: (1) it is more expressive
than ∃F O∧,+; and, (2) it is incomparable with ∃F O∨,∧,+.

1Proofs are reported in an extended version of the paper available

at www.unical.it/∼ggreco.

IJCAI-07

90

4 The Complexity of Reasoning with CCSPs
Let (ψ, D) be a CCSP instance. The intrinsic complexity of
some basic reasoning tasks for (ψ, D) has been studied in
[Soininen et al., 1999; Mittal and Falkenhainer, 2000]. In par-
ticular, it is known that the SATISFIABILITY problem (does
there exists a partial assignment θ such that θ is a solution for
(ψ, D)?) is NP-complete.

However, there are other important reasoning tasks that of-
ten come into play with CSPs, and whose complexity has not
been investigated for CCSPs. In this section, we explore these
issues, by focusing on the following problems:

• CHECKING: Given a partial assignment θ, is θ a solution

for (ψ, D)?

• RELEVANCE: Given a variable X, is X contained in

V(θ) for some solution θ for (ψ, D)?

• NECESSITY: Given a variable X, is X contained in

V(θ) for every solution θ for (ψ, D)?

When moving to CCSPs, these problems can be specialized
to take care of those solutions that are partial assignments.
Indeed, knowing whether there are solutions in which some
variable is not “active” may be quite relevant. For instance,
in product conﬁguration, one may be interested in ﬁnding the
conﬁguration with the minimum number of (additional) com-
ponents that, yet, meets the users’ requirements.

In order to model scenarios as above, it is convenient to re-
ﬁne the notion of solutions by means of some pre-order (cid:13) on
the set of all the possible partial assignments. Accordingly, a
solution θ for (ψ, D) is said (cid:13)-minimal if for each solution θ(cid:6)
,
it holds: θ (cid:13) θ(cid:6)
. In particular, we next consider (cid:13)-minimal
solutions, where (cid:13) is one of the following pre-orders2:
subset minimality “⊆”: θ1 ⊆v θ2 iff V(θ1) ⊆ V(θ2).
minimum cardinality “≤”: θ1 ≤ θ2 iff |V(θ1)| ≤ |V(θ2)|.
weighted cardinality “(cid:14)”: A weight w is attached to each

variable, and
θ1 (cid:14) θ2 iff

(cid:3)

X∈V(θ1) w(X) ≤

(cid:3)

X∈V(θ2) w(X).

Next, we depict a complete picture of the complexity ﬁg-

ures arising in the CCSP setting.

Theorem 4. The complexity of CHECKING, RELEVANCE,
and NECESSITY and of their variants for (cid:13)-minimal solu-
tions ((cid:13)∈ {“⊆”, “≤”, “(cid:14)”}) is as shown in Figure 2.

Proof (Sketch). When no pre-order is considered, results eas-
ily derive from standard results on CSPs. Due to space limi-
tations, we next only report the proof sketches for the variants
of CHECKING.
CHECKING⊆ is co-NP-complete: (Membership) Let (ψ, D)
be a CCSP instance, and let θ be a partial assignment such that
θ |= ψ. Consider the complementary problem of deciding
whether there is an assignment θ(cid:6)
is a solution
for (ψ, D) and (ii) V(θ(cid:6)) ⊆ V(θ) does not hold. Clearly, θ(cid:6)
can be guessed in NP, while (i) and (ii) can be checked in P.
(Hardness) Deciding whether a Boolean formula in con-
junctive normal form Φ = c1 ∧ . . . ∧ cm over the variables

such that (i) θ(cid:6)

2In fact, these pre-orders have been widely used for reﬁning so-

lution concepts in other AI frameworks.

—

CHECKING
in P
RELEVANCE NP-c
NECESSITY co-NP-c

“⊆”
co-NP-c

ΣP

2 -c

co-NP-c

“≤”
co-NP-c

PNP[O(log n)]-c
PNP[O(log n)]-c

“(cid:6)”
co-NP-c
PNP-c
PNP-c

Figure 2: Complexity of CCSPs (‘c’ stands for complete).

{X (cid:6)

X1, . . . , Xn is not satisﬁable, i.e., deciding whether there ex-
ist no truth assignments to the variables making each clause
cj true, is a well-known co-NP-complete problem.

(cid:2)

n, Z

j1 , X (cid:6)

j2 , X (cid:6)
j3

n} is a variable such that Xji occurs in cj.

We build a CCSP instance (ψ(Φ), D(Φ)) as follows.
∨
For each clause cj, which is w.l.o.g. of the form tj1
∨ tj3 , where tj1 is a variable Xi or its negation ¬Xi,
tj2
D(Φ) contains the relation rcj = {(T1, T2, T3) | Ti ∈
= Ti, ∀i}.
{“true”, “false”} s.t. cj is not satisﬁed when tji
Then, for each variable Xi in Φ, D(Φ) contains the rela-
tion rvi = {(“true”), (“false”)}. Finally, unsat = {(1)}
is in D(Φ), and no other relation is in D(Φ). The for-
1, ..., X (cid:6)
mula ψ(Φ) is of the form ∃X (cid:6)
1≤i≤n rvi(X (cid:6)
i) ∧
(cid:2)
) → unsat(Z)), where X (cid:6)
∈
ji

1≤j≤m(rcj (X (cid:6)
1, ..., X (cid:6)
Let x be a truth value assignment for the variables in Φ. Let
θx denote the assignment for (ψ(Φ), D(Φ)) such that: X (cid:6)
i is
mapped to “true” (resp., “false”) in θ(x) iff Xi is true (resp.,
false) x, and such that Z/1 is in θx iff x is not satisfying.
Then, any solution θ(cid:6)
for (ψ(Φ), D(Φ)) is such that V(θ(cid:6)) ⊇
{X (cid:6)
n}; moreover, Z may not occur in V(θ(cid:6)) if and
only if there is a satisfying assignment x for Φ such that θ(cid:6) =
θx. To conclude the proof, we can hence take an assignment
xu that does not satisfy Φ and notice that θxu is ⊆-minimal
⇔ there is no satisfying assignment for Φ.
CHECKING≤ and CHECKING(cid:9) are co-NP-complete: Mem-
berships can be shown with similar arguments as above. The
hardness of CHECKING≤ can be shown by observing that,
in the above reduction, θxu is in fact ≤-minimal ⇔ θxu ⊆-
minimal ⇔ there is no satisfying assignment for Φ. Finally,
the hardness of CHECKING⊆ follows by assigning unitary
weights to all the variables of ψ(Φ).

1, ..., X (cid:6)

5 Restricted Classes of CCSPs

In the light of the intractability results of the previous section,
it is relevant to single out classes of CCSPs that can be efﬁ-
ciently solved. To this aim, we next investigate how to adapt
the approaches used in traditional CSPs, where tractable
classes are identiﬁed by structural decomposition methods
(e.g., [Pearson and Jeavons, 1997; Gottlob et al., 2000]).

5.1 The Hardness of Acyclic Structures
Let ψ be a F O formula. The structure of constraints interac-
tions in ψ can be represented by the primal graph G(ψ) =
(V(ψ), E), where two variables occur in some edge of E if
they appear together in a constraint atom in ψ. We next focus
on classes of primal graphs having bounded treewidth.

A tree decomposition of a graph G = (V, E) is a pair
(cid:8)T, χ(cid:9), where T = (N, F ) is a tree, and χ is a function as-
signing to each vertex p ∈ N a set of vertices χ(p) ⊆ V ,
such that the following conditions are satisﬁed: (1) ∀b ∈ V ,
∃p ∈ N such that b ∈ χ(p); (2) ∀{b, d} ∈ E, ∃p ∈ N such

IJCAI-07

91

to sj, then rSji(Xi) evaluates false over the database, and
the implication is trivially satisﬁed. Otherwise, i.e., if Xi is
mapped to sj, we must have that Xi(cid:2) with Ii(cid:2) ∈ Sj is mapped
to sj as well, which in fact holds by construction of θC

(⇐) Assume there is a solution θ for (φ(I, S), D(I, S)).
We ﬁrst notice that the following properties hold on θ: (P1)
V(θ) = {X1, ..., Xn}; and (P2) if Xi is mapped to sj in θ,
then Xi(cid:2) is mapped to sj, for each Ii(cid:2) ∈ Sj. Then, we can
build the set Cθ = {Sj | ∃Xi that is mapped to sj in θ}, and
notice that it is an exact cover.

.

5.2 Tractable Classes
Since classical approaches fail in isolating classes of tractable
CCSPs, we next propose and study a decomposition strategy
speciﬁc for ∃F O→,∧,+ formulas. We shall focus on plain
formulas, where nesting of the implication connective is not
allowed. Formally, a plain ∃F O→,∧,+ formula is of the form:

(cid:5)

∃ (cid:5)X φ( (cid:5)X) ∧

(bi( (cid:5)X) → ∃ (cid:5)Yihi( (cid:5)X, (cid:5)Yi))

where n ≥ 0, and φ, bi, hi are in F O∧,+.

1≤i≤n

In fact, arbitrary formulas can be made plain by iteratively
substituting each subformula (φ → ((φ(cid:6) → φ(cid:6)(cid:6)) ∧ φ(cid:6)(cid:6)(cid:6))) with
(φ ∧ φ(cid:6) → φ(cid:6)(cid:6)) ∧ (φ → φ(cid:6)(cid:6)(cid:6)); this transformation preserves
the set of all the solutions, and is feasible in quadratic time.

Let ψ be a plain ∃F O→,∧,+. Constraint interactions in
ψ can be represented with the implication graph IG(ψ) =
(V, E), where V = V(ψ) ∪ {b1, ..., bn} ∪ {h1, ..., hn} and
edges have the form: (X, Y ) between pairs of variables oc-
curring in the same atom; (X, bi) if X occurs in some atom of
bi; (X, hi) if X occurs in some atom of hi; and (bi, hi), for
each subformula (bi( (cid:5)X) → ∃ (cid:5)Yihi( (cid:5)X, (cid:5)Yi)). E.g., a portion
of the implication graph for the EXACT-COVER-BY-3-SETS
instance in the proof of Theorem 5, which reveals the “hid-
den” intricacy of the problem, is reported in Figure 3 (bj,i,i(cid:2)
and hj,i,i(cid:2) refer to the implication rSji(Xi) → rSji(cid:2) (Xi(cid:2) )).
Then, the class CSP [i]btw(∃F O→,∧,+) is deﬁned as the set
of all the CCSPs instances (ψ, D), where ψ is a plain for-
mula in ∃F O→,∧,+ such that tw(IG(ψ)) is bounded by a
ﬁxed constant. An algorithm, called DecideSolutionk, decid-
ing whether an instance in CSP [i]btw(∃F O∧,+) has a solution
is reported in Figure 4.

The algorithm works on an tree decomposition of IG(φ) of
width k, whose shape is T = (N, F ). Roughly, it is based
on a recursive procedure ﬁndSolution that receives in input
a vertex v ∈ N . Each vertex is equipped with some nodes
associated with variables of φ, denoted by V(v), as well as
with nodes from {b1, ..., bn} and {h1, ..., hn}. The sets of
these nodes are denoted by B(v) and H(v), respectively.

Basically, ﬁndSolution guesses for each child c of v (in
F ), a partial assignment θc for V(c) (conforming with the
assignment for θv), and two “states” bc and hc. The state bc
(resp., hc) is a mapping from B(c) (resp., Hc) to the values
{T, F, willF, wasF}. The mapping bc(bi) = T states that the
In fact, when bc(bi) = T,
conjunct bi of φ must be true.
it must be the case that the atoms in bi restricted over the
assignment for v are satisﬁed in D (short: D |= πbi
(v) in B1).
Note that the information that bc(bi) = T is propagated to all

Figure 3: An EXACT-COVER-BY-3-SETS instance.

that {b, d} ⊆ χ(p); (3) ∀b ∈ N , the set {p ∈ N | b ∈ χ(p)}
induces a connected subtree of T . The width of (cid:8)T, χ(cid:9) is
maxp∈N |χ(p) − 1|, and the treewidth of G (short: tw(G)) is
the minimum width over all its tree decompositions.

Let L be a subset of F O. We denote by CSP btw(L) the
class of all the CSP instances (φ, D), where φ is in L and
where tw(G(φ)) is bounded by a ﬁxed constant. It is well-
known (see, e.g., [Gottlob et al., 2000]) that SATISFIABILITY
can be solved in polynomial time on CSP btw(∃F O∧,+). We
next show that this is not the case for CSP btw(∃F O→,∧,+),
even when further restricted on the class CSP ac(∃F O→,∧,+)
of acyclic instances (i.e., those having treewidth 1).

Theorem 5. SATISFIABILITY is NP-hard, even when re-
stricted on the class CSP ac(∃F O→,∧,+).
Proof. Let I = {I1, ..., In} be a set of elements, and let S =
{S1, ..., Sm} be a number of sets each one containing exactly
three elements in I. Recall that the EXACT-COVER-BY-3-
SETS problem of deciding whether there exists a set C ⊆
{S1, ..., Sm} such that
Si∈C Si = {I1, ..., In} and Si∩Sj =
∅, for each Si, Sj ∈ C with i (cid:10)= j, is NP-complete.

(cid:4)

As an example instance, Figure 3 shows (on the left)
the sets S1 = {I1, I2, I3}, S2 = {I4, I5, I6}, and S3 =
{I3, I4, I5}. A solution consists of the set {S1, S3}.

| Sj ∈ S and Ii ∈ Sj}.

We build a CCSP instance (ψ(I, S), D(I, S)) as fol-
For each item Ii, D(I, S) contains the relation
lows.
rIi = {(sj)
For each
set Sj and item Ii ∈ Sj, D(I, S) contains the re-
lation rSji = {(sj)}. And, no other relation is in
D(I, S). Moreover, the formula ψ(I, S) is of the form:
(rSji(Xi) →
i rIi(Xi) ∧
∃X1, ..., Xn,
rSji(cid:2) (Xi(cid:2) )).
Importantly, given that constraint relations in
ψ(I, S) are unary, G((ψ(I, S), D(I, S))) does not contain
any edge and, hence, it is trivially acyclic.

i,i(cid:2),j|{Ii,Ii(cid:2) }⊆Sj

We now claim that: there exists an exact cover of I with

(cid:2)

(cid:2)

sets from S ⇔ (ψ(I, S), D(I, S)) admits a solution.

(⇒) Let C be an exact cover. Consider the assignment θC
build as follows: (1) V(ψ(I, S)) = V(θC); and (2) Xi is
mapped to sj if and only if Ii ∈ Sj and Sj ∈ C. Note that
the conjunction
, by construction
of the relation rIi in D(I, S). Hence, it remains to show that
each implication of the form (rSji(Xi) → rSji(cid:2) (Xi(cid:2) )) is sat-
isﬁed as well. We distinguish two cases. If Xi is not mapped

i rIi(Xi) is satisﬁed by θC

(cid:2)

IJCAI-07

92

Input: (φ, D), and a k-width tree decomposition (cid:10)T, V, H, B(cid:11)

of IG((φ, D)) with T = (N, F );

Output: true iff there is a solution θ for (ψ, D);
Boolean Function ﬁndSolution (v : vertex in N ;
θv : partial assignment; bv : state for B(v); hv : state for H(v));
begin
for each c s.t. (v, c) ∈ F guess:

a partial assignment θc for V(c);
a “state” bc for B(c), and
a “state” hc for H(c);

check that the following conditions hold:
V 1 : D |= πφ(v);
V 2 : for each c ∈ N s.t. (v, c) ∈ F

θv conforms with θc;

B1 : for each bi ∈ B(v)

bv(bi) = T ⇒ D |= πbi
bv(bi) = F ⇔ D (cid:14)|= πbi

(v);
(v);

B2 : for each bi ∈ B(p) s.t. bp(bi) = T

∀(v, c) ∈ F , bi ∈ B(c) ⇒ bp(bi) = T;
B3 : for each bi ∈ B(p) s.t. bp(bi) = F ∨ wasF

∀(v, c) ∈ F , bi ∈ B(c) ⇒ bp(bi) = wasF;

B4 : for each bi ∈ B(p) s.t. bp(bi) = willF

∀(v, c) ∈ F , bi ∈ B(c) ⇒ bc(bi) (cid:14)= T;
∃(v, c) ∈ F s.t. bi ∈ B(c) ∧ (bc(bi) = willF ∨ F);

H1 : for each hi ∈ H(v)

hv(hi) = T ⇒ D |= πhi
hv(hi) = F ⇔ D (cid:14)|= πhi

(v);
(v);

H2 : for each hi ∈ H(p) s.t. hp(hi) = T

∀(v, c) ∈ F , hi ∈ H(c) ⇒ hp(hi) = T;
H3 : for each hi ∈ B(p) s.t. hp(bi) = F ∨ wasF;

∀(v, c) ∈ F , hi ∈ H(c) ⇒ hp(hi) = wasF;

H4 : for each hi ∈ H(p) s.t. hp(hi) = willF

∀(v, c) ∈ F , hi ∈ H(c) ⇒ hc(hi) (cid:14)= T;
∃(v, c) ∈ F s.t. hi ∈ H(c) ∧ (hc(bi) = willF ∨ F);

I1 : for each (bi, hi) ∈ B(v) × H(v)

bv(bi) = T ⇒ hv(hi) = T;
R1 : for each c ∈ N s.t. (v, c) ∈ F ,

ﬁndSolution (c, θc, bc, hc);

if this check fails then return false;
else return true;
end;

begin (* MAIN *)

let v be the root of T ;
guess the sets θv , bv, and hv;
check conditions (V 1), (B1), (H1), and (I1);
if this check fails then return false;
else return ﬁndSolution (r, θv , bb, hv);

end.

Figure 4: Algorithm DecideSolutionk.

the children (B2), so that all the atoms in bi are eventually
satisﬁed. On the other hand, when bc(bi) = F the algorithm
must ﬁnd an atom which is not true in the database (B1).
Moreover, all the children are advertised that bi is false, by
putting them into the state wasF in (B3), which is basically
a do not care state — this is also done when bp(bi) = wasF,
to propagate this knowledge in the tree. Note that, it may
happen that bi will be made false during the computation but
not in the current node v. For these cases, we use the state
willF, which forces (B4) that none of its children are in state
T and that there is at least a children with state willF or F.
Similar considerations apply to the mapping hv. Eventually,
(I1) checks whether the implications are satisﬁed, while (V 1)
checks whether the pure conjunctive part is satisﬁed.

The proof of correctness of DecideSolutionk is omitted.
For the running time, we can adapt the techniques in [Got-
tlob et al., 2002] to show the following.
Theorem 6. On CSP [i]btw(∃F O→,∧,+), SATISFIABILITY is
in LOGCFL, hence, tractable and highly-parallelizable.

Acknowledgments

This work was supported by a Royal Society Wolfson Re-
search Merit Award, allowing G. Gottlob to invite G. Greco
and T. Mancini to Oxford.

In addition, G. Greco’s work was supported by M.I.U.R.
under project “tocai.it: Tecnologie Orientate alla Conoscenza
per Aggregazioni di Imprese in Internet”.

References
[Bowen and Bahler, 1991] J. Bowen and D. Bahler. Condi-
tional existence of variables in generalised constraint
networks. In Proc. of AAAI’91, pages 215–220, 1991.

[Bacchus and Walsh, 2005] F. Bacchus and T. Walsh. Prop-
agating Logical Combinations of Constraints. In Proc.
of IJCAI’05, pages 35–40, 1995.

[Dechter, 2003] R. Dechter. Constraint Processing. Morgan

Kaufmann, Los Altos, 2003.

[Gelle and Faltings, 2003] E. Gelle and B. Faltings. Solving
mixed and conditional constraint satisfaction problems.
Constraints, 8(2):107–141, 2003.

[Gottlob et al., 2000] G. Gottlob, N. Leone, and F. Scarcello.
A comparison of structural csp decomposition methods.
Artif. Intell., 124(2):243–282, 2000.

[Gottlob et al., 2002] G. Gottlob, N. Leone, and F. Scarcello.
Computing logcﬂ certiﬁcates. TCS, 270(1-2):761–777,
2002.

[Keppens and Shen, 2004] J. Keppens and Q. Shen. Compo-
sitional model repositories via dynamic constraint sat-
isfaction with order-of-magnitude preferences. JAIR,
21:499–550, 2004.

[Kolaitis and Vardi, 1998] P. G. Kolaitis and M. Y. Vardi.
Conjunctive-query containment and constraint satisfac-
tion. JCSS, 61(2):302–332, 1998.

[Mittal and Falkenhainer, 2000] S. Mittal and B. Falken-
hainer. Dynamic Constraint Satisfaction Problems. In
Proc. of AAAI’90, pages 25–32, 2000.

[Pearson and Jeavons, 1997] J.K. Pearson and P.G. Jeavons.
A survey of tractable constraint satisfaction problems.
CSD-TR-97-15, Royal Holloway, University of Lon-
don, July 1997.

[Robertson and Seymour, 1986] N. Robertson and P. D. Sey-
mour. Graph minors. II. algorithmic aspects of tree-
width. J. of Algorithms, 7(3):309–322, 1986.

[Sabin et al., 2003] M. Sabin, E. C. Freuder, and R. J. Wal-
lace. Greater efﬁciency for conditional constraint satis-
faction. In Proc. of CP 2003, pages 649–663, 2003.

[Soininen et al., 1999] G. Soininen, T. Esther,

and I.
Niemel¨a. A ﬁxpoint deﬁnition of Dynamic Constraint
Satisfaction. In Proc. of CP’99, pages 419–433, 1999.

[Verfaillie and Jussien, 2005] G. Verfaillie and N. Jussien.
Constraint solving in uncertain and dynamic environ-
ments: A survey. Constraints, 10:253–281, 2005.

IJCAI-07

93

