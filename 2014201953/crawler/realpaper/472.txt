Tractable Symmetry Breaking for CSPs with Interchangeable Values 

Department of Computer Science 

Brown University, Box 1910 

P. Van Hentenryck 

Providence, Rl 02912 

P. Flener, J. Pearson, and M. Agren 

Department of Information Technology 

Uppsala University, Box 337 
S-751 05 Uppsala, Sweden 

Abstract 

Symmetry breaking in CSPs has attracted consid­
erable  attention  in  recent  years.  Various  general 
schemes  have  been  proposed  to  eliminate  sym­
metries during search.  In general, these schemes 
may  take  exponential  space  or  time  to  eliminate 
all  symmetries.  This  paper  studies  classes  of 
CSPs  for  which  symmetry  breaking  is  tractable. 
It identifies several CSP classes which feature var­
ious  forms  of value  interchangeability  and  shows 
that symmetry breaking can be performed in con­
stant time and space during search using dedicated 
search procedures. Experimental results also show 
the benefits of symmetry breaking on these CSPs, 
which encompass many practical applications. 

Introduction 

1 
Symmetry  breaking  for constraint  satisfaction  problems  has 
attracted  considerable attention  in  recent years (See the  last 
CP proceedings,  the  CP'01  and  CP'02  workshops on  sym­
metries, and [Crawford et al., 1996; Freuder, 1991; Backofen 
and  Will,  1999;  Puget,  1993]  for some  less  recent papers). 
Indeed,  many  applications naturally  exhibit symmetries  and 
symmetry  breaking  may  drastically  improve  performance 
(e.g., [Barnier and Brisset, 2002; Meseguer and Torras, 2001; 
Puget, 2002]). An important contribution in this area has been 
the  development  of various  general  schemes  for  symmetry 
breaking in  CSPs  (e.g.,  SBDS  [Gent and Smith,  2000]  and 
SBDD [Fahle et  al,  2001; Focacci and Milano, 2001]).  Un­
fortunately, these schemes, in general, may require exponen­
tial resources to break all symmetries. Indeed, some schemes 
require exponential space to store all the nogoods generated 
through symmetries, while others may take exponential time 
to discover whether a partial assignment is symmetric to one 
of the existing nogoods. As a consequence, practical applica­
tions often place limits on how many nogoods can be stored 
and/or which symmetries to break. 

This  paper approaches  symmetry breaking from  a  differ­
ent,  orthogonal,  standpoint.  Its goal is  to  identify classes of 
CSPs  that  are practically  relevant  and for  which  symmetry 
breaking  is  tractable,  i.e.,  symmetry  breaking  is polynomial 
in  time and space.  It  identifies  several  such  classes,  which 

encompass  many  practical  applications.  These  CSPs fea(cid:173)
ture  various forms  of value  interchangeability  and  the paper 
shows that symmetry breaking can  be performed in  constant 
time and space during search  using dedicated search proce-
dures.  The paper also  reports preliminary  experimental re­
sults indicating that symmetry breaking on these CSPs brings 
significant  computational  benefits.  Finally,  the  paper  intro­
duces  the  new  notions  of existential  and  abstract  nogoods, 
which  were  used  to  derive  the  results  for  the  various  CSP 
classes.  We  believe that these  notions are  helpful to  derive 
many  other  classes  of tractable  symmetries. 
In  particular, 
they  also  allowed  us  to  derive  classes  of tractable  variable 
symmetries, which we cannot include here for space reasons. 
As such,  this paper should be  viewed only as a  first  step  in 
this fascinating area. 

It is also useful to contrast our approach with the research 
avenue pioneered by  [Freuder,  1991]  on  value  interchange-
ability.  Freuder also introduced various forms of value inter­
changeability. However, his goal was to discover symmetries 
inside CSPs and to reformulate them by preprocessing to re­
move symmetries.  Unfortunately, discovering symmetries in 
CSPs  is  not  tractable  for many  interesting  classes  of CSPs. 
Our research,  in contrast,  assumes that modellers are aware 
of  the  symmetries  in  their  applications.  It  focuses  on  how  to 
exploit this knowledge during search to eliminate symmetries 
efficiently.  Consider,  for instance,  the  scene-shooting prob­
lem featured in [Van Hentenryck, 2002].  This problem aims 
at producing a movie (or a series) at minimal cost by decid­
ing when to shoot scenes.  Each scene  involves a number of 
actors and at most 5 scenes a day can be filmed. All actors of 
a scene must be present on the day the scene is shot.  The ac­
tors have fees representing the amount to be paid per day they 
spend in the studio. The goal of the application is to minimize 
the production costs.  An optimal solution to this problem can 
be modelled as an assignment of scenes to days which min­
imizes  the  production  costs. 
It  should  be  apparent that  the 
exact days assigned to the scenes have no importance in this 
application and are fully interchangeable.  What is important 
is how the scenes are clustered together.  Our approach does 
not  aim  at discovering this  fact;  rather it  focuses on how to 
exploit it to eliminate the symmetries it induces. 

The rest of the paper is organized as  follows.  After some 
preliminaries, Sections 3,4, and 5 study three classes of CSPs 
for which symmetry breaking is tractable.  For space reasons, 

CONSTRAINTS 

277 

only the first class is presented in full detail with proofs. Sec­
tion  6  briefly  reports some  experimental  results.  Section  7 
concludes the paper. 

2  Preliminaries 
This  section  defines  the  main  concepts  used  in  this  paper. 
The definitions, although they capture the informal meaning 
of CSPs,  are  non-standard  and  simplify  the  definitions  and 
proofs  considerably.  The  basic  idea  is  that  the  set  of con­
straints is abstracted by a Boolean function which holds if all 
the constraints are satisfied (since we are not interested in the 
constraint structure).  Solutions are also represented as func­
tions (assignments) from variables to their sets of values. 

Algorithms to solve CSPs manipulate partial assignments.  It 
is often important to reason about which variables are already 
assigned (the domain of the partial assignment) and the set of 
values  they  are  assigned  to  (the  image  of the  assignment). 
Note  that  domains  represent  sets  of variables  in  this  paper 
(not values as is traditional), since we use functions to model 
(partial) assignments. 

3  Value-Interchangeable CSPs 
There  are  many  applications  in  resource  allocation  and 
scheduling where the exact values taken by the variables are 
not important.  What is significant is which variables take the 
same  values  or,  in  other terms,  how  the  variables are  clus­
tered.  This notion of symmetry is what [Freuder,  1991] calls 
full  interchangeability  for  all  variables  and  all  values.  The 
prototypical example is graph-coloring.  Another, more com­
plex,  example is the  scene  allocation  application mentioned 
in the introduction. This section shows that symmetry break­
ing for these problems is tractable and takes constant time and 
space. We first define value-interchangeable CSPs. 

In the following, we use ICSP as an abbreviation for value-
interchangeable CSP. The following theorem is a fundamental 
characterization  of nogoods for  ICSPs. 

We  now  show  that  the  closure  of a  nogood  can  be  charac­
terized  compactly  and  that  membership  to  the  closure  of a 
nogood can be tested in linear time for ICSPs. We first intro­
duce the concept of existential nogood, which  simplifies the 
proofs and intuitions. 

278 

CONSTRAINTS 

Lemmas  3.8  and  3.9  indicate  that  symmetry  breaking  is 
tractable  for  ICSPs.  Lemma  3.9  indicates  that  abstract  no-
goods  are  needed  only  for  frontier  nodes  of the  search  tree 
(i.e., closed nodes whose parents are open). Once its children 
are explored, the abstract nogood of the parent subsumes the 
abstract nogoods of its children.  Hence, maintaining the no-
good takes  space  0(|F||F|)  if F  is  the  set of frontier nodes. 
We formalize this result using variable decomposition trees. 

The  result  above  can  be  strengthened  considerably  in  fact. 
We will show that search procedures exploring a variable de­
composition tree can remove all symmetries in constant time 
and space.  Before presenting the theoretical results, we illus­
trate the intuition using depth-first search. The basic intuition 
comes  from  the  structure of the abstract nogoods.  Consider 
the partial assignment 

and assume that depth-first search tries to assign variable V6 
and  that  the  set  of possible  values  is  1...10.  The  failure  of 
V6  — 1 produces an abstract nogood 9 which holds if 

Since  V\,..., v5 remain  instantiated  when the  next  value  is 
tried  for  V6,  the  abstract  nogood  for  this  part  of this  next 
branch  holds if Φ(VQ) =  1  imposing  that  v6  be  assigned  a 
value different from 1.  The assignments  v6  —  2 and  v6  =  3 
produce  similar  abstract  nogoods.  Now  observe  what  hap­
pens for an assignment of a value i  £  4..10,  say 6.  The ab­
stract nogood 6 is now defined as 

It is not obvious that membership to an existential nogood can 
be tested efficiently, since it involves an existential quantifica­
tion. However, due to the nature of the underlying constraints, 
it is easy to eliminate the existential variables by selecting a 
representative for each set  a-1  (di).  This is precisely the mo­
tivation  underlying  the  concept  of abstract  nogoods  defined 
below.  Consider the existential  formula 

Lemma 3.8. Let V be an ICSP, a be a nogood for V, and 6 
be a partial assignment.  There exists a  linear-time algorithm 
that  tests  whether 0  violates  any nogood in  Closure(a,P). 
Proof. Direct consequence of lemmas 3.5 and 3.7 and the fact 
that the abstract nogood is linear in 
□ 

IVI. 

CONSTRAINTS 

279 

Lemma  3.14.  Let V  be an  ICSP and T  be a  compact  vari(cid:173)
able  decomposition  tree for  V.  The partial  assignment  a  of 
a node in T never matches any nogood generated during the 
exploration of T (except the one it possibly generates). 

Proof  By Lemma 3.9, it suffices to show that a partial assign­
ment 0 never matches a nogood generated by  its siblings or 
the siblings of one of its ancestors in the tree.  The proof is by 

which  cannot be  satisfied  by  any  assignment  to  v6.  It  fol­
lows that V6 must only be assigned to the previously assigned 
values  1,2,3  or to  exactly one new  value  in  4..10.  In  other 
words,  in  a  variable  decomposition  tree,  only  some  of the 
children  need  to  be  explored:  those  which  assign  variable 
Vik+i  to  a  value in dorri(a)  and exactly one other child.  Note 
that  this  result  is  independent  from  the  set  of  constraints.  It 
is  the  essence  of the  labeling  procedure  for  graph-coloring 
in  [Kubale and Jackowski,  1985] and in the scene allocation 

To our knowledge, this paper provides the first formal proof 
that these algorithms break all the symmetries in their respec­
tive  problems.  To  prove  the  correctness  of  ILABEL,  and 
other related search procedures,  it is  useful  to  introduce the 
concept of compact variable decomposition tree. 

The following lemma, which states that compact variable de­
composition trees are complete, follows directly from the ex­
amination of the nogoods above. 

Our next lemma states that a compact variable decomposition 
tree never matches any nogood generated during search. 

The correctness of Procedure  ILABEL  follows from the two 
lemmas above.  Other search  strategies,  e.g.,  LDS,  also  re­
move all symmetries in constant time and space. 
Theorem  3.15.  Procedure  ILABEL  breaks  all  the symme(cid:173)
tries in constant time and constant space for an ICSP V, i.e., 
it  never  matches  any  member  of the  closure  of any  nogood 
generated during search. 

4  Piecewise-Interchangeable CSPs 
In many applications, e.g., in resource allocation and schedul­
ing,  the  values are  taken  from  disjoint sets  but they  are  in­
terchangeable in each  set.  For instance,  in the scene alloca­
tion problem, we can easily imagine a version of the problem 
where  days  are  divided  in  morning  and  afternoon  sessions. 
Actors probably have  strong preferences (and thus  different 
fees for the morning and afternoon sessions) but the day of the 
session may not matter.  This paper captures this (more lim­
ited) form of interchangeability by piecewise interchangeable 
CSPs. We first define this class of CSPs formally and then de­
rive similar results as for lCSPs. We state the main definitions 
and theorems only,  since the derivation  is similar to the one 
for ICSPs.  As traditional, we use D\  +  D2 to denote the dis­
joint  union  of D\  and  D2.  Our  definitions  and  results  only 

280 

CONSTRAINTS 

consider two  distinct sets of values,  for simplicity.  It is easy 
to generalize them to an arbitrary number of sets. 

Figure 2 depicts a labeling procedure PILABEL for PICSPs, 
which breaks all value symmetries in constant time and space. 
Procedure PILABEL generalizes ILABEL by considering the 
already assigned values in both sets  D1  and D2, as well as one 
new value (if any) from both sets. 
Theorem  4.5.  Procedure  PILABEL  breaks  all the symme(cid:173)
tries in constant time and constant space for PICSPs. 

5  Wreath-Value Interchangeable CSPs 
We  now  consider  another,  more  complex,  class  of  CSPs, 
which  assigns  a  pair of values  ( d1, d2f r om  a  set  D1  x  D2 
to  each  variable  v.  Values  in  D1  are  fully  interchangeable 
and, for a fixed value  in  D1,  the values in D2  are fully  inter­
changeable as well. These problems are called wreath value-
interchangeable  in  this  paper,  because  the  symmetry  group 
corresponds to a wreath product of symmetry groups [Camer-
son,  1999].  Such problems arise naturally in a variety of ap­
plications  in  resource  allocation  and  scheduling.  Consider, 
for instance, the problem of scheduling a meeting where dif­
ferent groups must meet some day of the week in some room 
subject to constraints. The days are fully interchangeable and, 
on  a given  day,  the  rooms are  fully  interchangeable.  Sym­
metry  breaking  for  a  wreath  value-interchangeable  CSP  is 
tractable. 

CONSTRAINTS 

281 

Table  1: Experimental Results on ICSPs and PICSPs. 

complex structure (e.g., a Cartesian product).  There are sev­
eral  classes  of such  CSPs  for  which  symmetry  breaking  is 
tractable,  although more  complex.  Finding effective  search 
procedures for these CSPs is also a challenging problem. 

8  Acknowldegments 
Special thanks to the reviewers for their very interesting com­
ments.  All  authors  are  partly  supported  by  a  STINT  insti­
tutional  grant  1G2001-67  of STINT.  P.  Van  Hentenryck  is 
partly supported by an NSF  ITR  Award DMI-0121495.  The 
Sweden-based  authors  are  also  supported  by  grant  221-99-
369 of the Swedish Research Council. 

References 
[Backofen and Will, 1999] Rolf Backofcn and Sebastian Will. Ex­

cluding symmetries in constraint-based search. In CP'99. 

[Barnier and Brisset, 2002]  N. Barnier and P. Brisset.  Solving the 

Kirkman\s schoolgirl problem in a few seconds. In CP'2002. 

[Camcrson, 1999]  P. Cameron.  Permutation Groups,  Cambridge 

Univ. Press, 1999. 

[Crawford et a/., 1996]  J. Crawford et al. Symmetry breaking pred­

icates for search problems. In KR'96. 

[Fahle et a/., 2001]  Schamberger  Fahle,  Torsten,  Stefan,  and 

Meinolf Sellmann. Symmetry breaking. In CP'2001. 

[Focacci and Milano, 2001]  Filippo Focacci and Michacla Milano. 

Global cut framework for removing symmetries. In CP'2001. 

[Freuder, 1991]  E. Freuder.  Eliminating interchangeable values in 

constraint satisfaction problems. In Proc. AAAI'91. 

[Gent and Smith, 2000] Ian P. Gent and B. Smith. Symmetry break­

ing during search in constraint programming. In ECAI2000. 

[Kubale and Jackowski, 1985]  M.  Kubale  and  D.  Jackowski.  A 
Generalized Implicit Enumeration  Algorithm  for Graph Color­
ing. C4CA/,28(4):412-418, 1985. 

[Meseguer and Torras, 2001]  P. Meseguer and C. Torras.  Exploit­
ing symmetries within constraint satisfaction search.  Artificial 
Intelligence, 129(1-2): 133-163, 2001. 

[Puget, 1993] J.-F. Puget. On the satisfi ability of symmetrical con­

strained satisfaction problems. In ISMIS'93. 

[Puget, 2002]  J.-F.  Puget.  Symmetry  Breaking  Revisited. 

CP'2002. 

In 

[Van Hentenryck, 2002]  P.  Van  Hentenryck.  Constraint  and  In­
teger Programming in OPL.  Informs Journal on Computing, 
14(4):345-372, 2002. 

Figure 3:  A Labeling Procedure for WICSPs. 

Theorem  5.5.  Procedure  WILABEL  oreaks  all the symme(cid:173)
tries in constant time and constant space for a WICSP. 

6  Experimental Results 
This section gives some preliminary results showing the ben­
efits of symmetry breaking on these classes of problems.  Ta­
ble 1 gives results on graph coloring, an JCSP, and on parti­
tioned graph coloring, a PICSP. In partitioned graph coloring, 
the colors are divided in 4 groups and are fully interchange­
able in each group.  The constraints express the usual graph-
coloring property:  no two adjacent vertices are colored with 
the  same  color.  Table  1  gives the  result of coloring graphs 
with 50% edge density with at most n/(2 *  log-2,(n))  colors, 
where n  is the number of nodes.  The  first  column gives the 
number of nodes, the  second column gives the time to color 
the graphs using the default labeling procedure, and the third 
and  fourth  columns report the  time  to  color the  graphs and 
the partitioned graphs with symmetry breaking. Note that the 
default  labeling  does  not  exploit  symmetries  and  hence  its 
time is similar for both graph coloring and partitioned graph 
coloring  (second  column).  The  last  column  gives  the  ratio 
of PI LABEL  and  the  default  labeling  procedure  (the  gains 
are too  large  for coloring to be reported as a ratio).  All re­
sults are an average of 5 runs in milliseconds under SlCStus-
Prolog.  They clearly show that symmetry breaking on these 
CSPs brings significant benefits. 

7  Conclusion 
This paper studied  three  classes  of CSPs  for which  symme­
try  breaking  is  tractable.  These  CSP  classes  feature  vari­
ous  forms  of value  interchangeability  and  allow  symmetry 
breaking to be performed in constant time and space during 
search.  Experimental results also  show the benefits of sym­
metry breaking on these CSPs, which encompass many prac­
tical  applications.  There  are  many  directions  for  future  re­
search.  Of particular interest  is the study of tractable classes 
of CSPs exhibiting variable symmetries where the set V has a 

282 

CONSTRAINTS 

