Constraint Partitioning for Solving Planning Problems

with Trajectory Constraints and Goal Preferences

∗

Chih-Wei Hsu and Benjamin W. Wah

Ruoyun Huang and Yixin Chen

Dept. of Electrical and Computer Engineering

Dept. of Computer Science and Engineering

and the Coordinated Science Laboratory
University of Illinois, Urbana-Champaign

Washington University in St Louis

St Louis, MO 63130, USA

Urbana, IL 61801, USA

{chsu,wah}@manip.crhc.uiuc.edu

rh11@cec.wustl.edu
chen@cse.wustl.edu

Abstract

The PDDL3 speciﬁcations include soft goals
and trajectory constraints for distinguishing high-
quality plans among the many feasible plans in a
solution space. To reduce the complexity of solv-
ing a large PDDL3 planning problem, constraint
partitioning can be used to decompose its con-
straints into subproblems of much lower complex-
ity. However, constraint locality due to soft goals
and trajectory constraints cannot be effectively ex-
ploited by existing subgoal-partitioning techniques
developed for solving PDDL2.2 problems.
In
this paper, we present an improved partition-and-
resolve strategy for supporting the new features in
PDDL3. We evaluate techniques for resolving vi-
olated global constraints, optimizing goal prefer-
ences, and achieving subgoals in a multi-valued
representation. Empirical results on the 5th Inter-
national Planning Competition (IPC5) benchmarks
show that our approach is effective and signiﬁ-
cantly outperforms other competing planners.

1 Introduction

As plan quality is a major issue in many planning prob-
lems, traditional quality criteria in PDDL2.2 planning, like
makespan, are inadequate. Inspired by real applications, soft
goals and trajectory constraints have been introduced in the
PDDL3 speciﬁcations [Gerevini and Long, 2005].

Soft goals can be used for modeling goal preferences. For
instance, one may prefer storing crate1 in depot1 to storing
crate1 in depot2, since the latter leads to a higher violation
cost in the plan metric value. Planning with soft goals entails
the selection of an appropriate subset of the soft goals when
it is infeasible to achieve all of them. In the worst case, an
exhaustive search is needed to identify the best subset.

Trajectory constraints, on the other hand, are hard or
soft constraints over intermediate states during plan exe-
cution. They are used to express temporal logic in plan-
ning and to identify a good path among the many feasi-
ble paths to a goal state.
Informally, for a plan trajectory

∗Research supported by the National Science Foundation Grant

IIS 03-12084.

n

n

, t

)(cid:4), where S

π = (cid:3)(S0, t0), (S1, t1), . . . , (S
i is the inter-
mediate state at time t
i, a trajectory constraint can be deﬁned
by a logical formula, respectively, at the end of, to be always
true in, some time in, some time before t of, or at most once in
the trajectory. A trajectory constraint can also deﬁned to en-
force one formula before another, or to enforce two formulas
within time t in the trajectory. Clearly, trajectory constraints
pose more challenges on planning, even when the number of
actions or facts is not increased.

In view of the new features in PDDL3 problems, we study
in this paper a partition-and-resolve strategy for solving these
problems efﬁciently. For a planning problem, we represent
the actions scheduled as variables and identify constraints on
mutual exclusion (mutex), goal state, and trajectory for ac-
tions in a given (possibly infeasible) plan. We then partition
the constraints into subproblems, solve the subproblems in-
dividually by an existing but modiﬁed planner, and resolve
those violated global constraints across the subproblems.

Constraint partitioning has been demonstrated to be a
very effective technique for solving large planning prob-
lems [Chen et al., 2006]. Because each subproblem only has
a fraction of the original constraints and is a signiﬁcant relax-
ation of the original problem, it is of much lower complexity
as compared to that of the original problem. The technique,
however, leads to global constraints across the subproblems,
which can be effectively resolved using the extended saddle-
point condition [Wah and Chen, 2006].

Our constraint partitioning approach has four components:
i) problem representation, ii) attributes used for partitioning,
iii) partitioning algorithm, and iv) subproblem formulation.
The design of each component depends on the problem rep-
resentation and the planner used for solving the subproblems.
Note that the variables and the constraints of a planning prob-
lem studied are not determined beforehand because the length
of its solution plan is not known. Hence, we cannot directly
partition its constraints by a clustering algorithm. Instead, we
identify some problem-dependent attributes that can be used
to characterize constraint localities in an initial (but possibly
infeasible) plan. We then use these attributes to partition the
constraints of the initial plan into subproblems with good lo-
calities before solving the subproblems.

For IPC4 benchmarks represented in PDDL2.2 [Edelkamp
and Hoffmann, 2004], our original partition-and-resolve
strategy in SGPlan4 [Chen et al., 2006] partitions the con-

IJCAI07

1924

250

200

150

100

50

D

I
 
e
l
b
a
i
r
a
V

50

100

150

200

250

300

350

Constraint ID

Figure 1: The constraint-variable structure depicting a strong
constraint locality when the constraints of the IPC5 Rovers-
Propositional-30 instance is clustered by its subgoals.

straints of these benchmarks by their subgoals. The goals of
many of these benchmarks are a conjunctive list of facts, with
a strong locality of the mutex constraints by the subgoals of
each problem. Here, constraint locality is measured by the
fraction of constraints that are global, which span across mul-
tiple subproblems after the problem has been partitioned. Fig-
ure 1 shows a strong locality after clustering the constraints of
the IPC5 Rovers-Propositional-30 instance [Gerevini et al.,
2006] by its subgoals. The approach works well because the
goal is indeed a conjunctive list of facts.

Subgoal partitioning, however, is not always effective for
PDDL3 domains. The presence of soft goals and trajectory
constraints may lead to constraint localities that are different
from those observed in PDDL2.2 domains. Figure 2a depicts
the constraint-variable distribution after clustering the con-
straints of the TPP-QualitativePreferences-5 instance by its
soft goals. Because trajectory constraints are not considered
in clustering, the result leads to a poor constraint locality.

In clustering constraints of IPC5 instances, we observe that
the propositional representation of binary facts in SGPlan4
usually requires superﬂuous facts and obscures many mu-
texes. For example, the location of truck1 in the TPP do-
main is represented by several binary facts, like at(truck1,
market1), . . . , at(truck1, market8), with some implicit con-
straints for enforcing their consistency. To represent these
constraints more compactly, we use a multi-valued domain
formulation (MDF) in this paper based on the SAS+ formal-
ism [B¨ackstr¨om and Nebel, 1995]. MDF has been used in
several planners for the previous versions of PDDL, including
Fast Downward [Helmert, 2004] and the IP planner [van den
Briel et al., 2005]. This representation makes implicit mu-
texes explicit and reduces the number of global constraints
across the subproblems. For instance, the location of truck1
can now be denoted by one variable with multiple values.

Our main contributions in this paper are the design of a new
strategy for clustering and for partitioning the constraints of
PDDL3 planning problems and the demonstration of its suc-
cess in a prototype planner. Based on the constraint locality
observed, we partition mutexes and hard and soft trajectory
constraints of a planning problem into loosely related sub-
problems by some multi-valued state variables. We study
various design options in partitioning and demonstrate their
improvements in constraint locality. To handle the features in
PDDL3, we develop new techniques, both at the global and
the subproblem levels, for optimizing goal preferences and
for resolving trajectory and mutex constraints.

2 Partitioning Strategy

In this section, we ﬁrst illustrate the constraint locality of a
PDDL3 problem when it is partitioned by its trajectory con-
straints and soft goals. We then present our partitioning algo-
rithm and the results on some IPC5 benchmarks.

2.1 Constraint Locality by Trajectory Constraints

and Soft Goals

As is shown in Figure 2a, clustering the constraints of a
PDDL3 problem by its subgoals does not lead to high con-
straint locality. Our goal in this section is, therefore, to iden-
tify new problem-independent attributes that allow PDDL3
problems to be partitioned with better constraint locality.

Recall that a solution plan for a PDDL3 problem is rep-
resented in multi-valued variables and satisﬁes mutex, trajec-
tory, and goal-state constraints. We have found that constraint
locality can be improved when some state variables in goal-
state constraints (called guidance variables) are used for clus-
tering the constraints into subproblems. Since the goal-state
representation is also a conjunction of facts, our partition-
and-resolve approach in SGPlan4 can be applied directly.

Figure 2b illustrates the constraint-variable distribution
when we cluster the mutex constraints (in red points) in TPP-
QualitativePreferences-5 by the ﬁve guidance variables that
represent the stored quantity of the ﬁve products. Although
constraint locality is greatly improved over that in Figure 2a,
the result is still unsatisfactory because there are a number of
soft constraints (in blue points) that are not localized.

To address this issue, we further cluster the soft constraints
by the same guidance variables. Figures 2c shows that all
the constraints are now clustered well, leading to a good
constraint locality. Note that we may have constraints that
involve a limited number of guidance variables yet exhibit
strong constraint locality. In the next section, we study the
granularity of partitioning in order to further reduce the num-
ber of global constraints.

In addition to good locality, one advantage of using guid-
ance variables is that they can be converted into classical
planning goals. This greatly reduces the efforts of implement-
ing a planner for solving a subproblem because current plan-
ners can only solve subproblems with nonempty and conﬂict-
free goals. This also explains why we cannot arbitrarily con-
struct subproblems with inconsistent goals or constraints us-
ing direct graph partitioning.

2.2 Proposed Partitioning Algorithm

Based on our observation that constraint locality is associated
with some guidance variables, we present in this section our
algorithm for identifying the guidance variables, selecting a
suitable number of partitions, and clustering the constraints
by these variables. As the algorithm requires all the con-
straints to be expressed in MDF, we have implemented a pre-
processing engine by following the techniques in [Helmert,
2004] for translating a PDDL representation into MDF. The
use of MDF does not introduce new types of constraints be-
cause any mutex in MDF must also be a mutex in PDDL.

We ﬁrst deﬁne the guidance variables to be the set of vari-
ables in the goal-state constraints. Once the values of these

IJCAI07

1925

250

200

150

100

50

D

I
 
e
l
b
a
i
r
a
V

160
140
120
100
80
60
40
20

D

I
 
e
l
b
a
i
r
a
V
F
D
M

 

0

1000

2000
3000
Constraint ID

4000

5000

0

200

600

400
MDF Constraint ID

800 1000 1200 1400

160
140
120
100
80
60
40
20

D

I
 
e
l
b
a
i
r
a
V
F
D
M

 

0

200

600

400
MDF Constraint ID

800 1000 1200 1400

a) Na¨ıve clustering by soft goals

b) Clustering mutexes by guidance variables c) Clustering mutex and trajectory constraints
Figure 2: The constraint-variable distributions (after some rearrangement) of the TPP-QualitativePreferences-5 instance that
show the different degrees of constraint locality using three ways of clustering the constraints.

variables have been determined by satisfying all the hard goal
constraints and by minimizing to some extent the penalties of
the soft goal constraints, we deﬁne the goal of a subproblem
to be a partial assignment of the set of guidance variables.
We also specify the maximum number of partitions to be the
number of guidance variables.

The number of partitions is an important parameter of our
partitioning algorithm. Although it is desirable to enumer-
ate different numbers of partitions and to study their trade-
offs, it is not the best approach here because there are some
problem-dependent features that can be utilized. We employ
a logical choice through the identiﬁcation of bottleneck vari-
ables. In various planning domains, some limited objects are
the sources of mutexes because actions want to concurrently
access them. They can be treated as bottleneck resources that
limit parallelism. Speciﬁcally, we search for a group of state
variables of the same type (called bottleneck variables) that
the changes of other state variables must depend on.
For
example, the locations of vehicles in the transportation do-
mains are bottleneck variables because every action asserts
the location of one vehicle. Our strategy is to set the num-
ber of partitions to be the smaller of the number of guidance
variables and the number of bottleneck variables.

In addition to MDF analysis, we also identify and remove
accompanying state variables in order to eliminate possibly
redundant guidance and bottleneck variables. These are state
variables whose values can be inferred from the values of
other state variables. For example, on(crate1, depot0-1-1) im-
plies in(crate1, depot0), given that in(depot0-1-1 depot0) is true
(where depot0-1-1 is a storage area in depot0). This identiﬁca-
tion is possible because action add on(crate1, depot0-1-1) must
also add in(crate1, depot0), whereas delete in(crate1, depot0)
must also delete on(crate1, depot0-1-1). For each candidate
state variable, we test if all its values have the above relation-
ship with the values of other state variables.

Table 1 shows the trade-offs in granularity on the IPC5
Trucks-TimeConstraints-20 instance. When the instance is
partitioned with respect to the bottleneck variables, the result
conﬁrms our claim in Section 1 that the time for solving a sub-
problem decreases by three orders of magnitude, whereas the
number of partitions (and the number of global constraints)
is increased by a small number. However, as the number of
partitions is increased further (when partitioning is done with
respect to the guidance variables), there is diminishing reduc-
tion in the time to solve a subproblem, whereas the number of
global constraints is increased dramatically. In this case, par-

Table 1: Trade-offs on the number of partitions for the Trucks-
TimeConstraints-20 instance.

Partitioning Strategy No Partitioning Bottleneck Guidance

1
0

4
20

22
573

21274

1404

230.1

# partitions

# global constraints
avg. # local const.

per subproblem
time/subproblem

>1800 sec.

0.16 sec.
Bottleneck: # partitions = min(# bottleneck var., # guidance var.)
Guidance: # partitions = # of guidance variables
Subgoal:

subgoal partitioning

2.04 sec.

titioning is best done with respect to the bottleneck variables.
Finally, we cluster the guidance variables by formulat-
ing a graph partitioning problem. We deﬁne a node in the
graph to be a guidance variable, and an edge between two
nodes when there is a constraint on these variables. We
do not include those constraints that are automatically sat-
isﬁed by the values of the guidance variables. For example,
(imply (stored goods11 level1) (stored goods18 level2)) is true if
we have determined the value of stored(goods11) to be level1,
and the value of stored(goods18) to be level2. For preferences
on soft constraints, we set the weight on an edge to be the
violation cost of the corresponding soft constraint. Last,
we apply any competent graph partitioning software, such
as METIS (http://glaros.dtc.umn.edu/gkhome/
views/metis/), to cluster the constraints into groups that
are related by a minimal number of global constraints.

2.3 Results on Some IPC5 Benchmarks

In this section, we report the evaluation results of our pro-
posed partitioning strategies on some IPC5 benchmarks.
We have chosen the QualitativePreferences track whose in-
stances have both soft goals and trajectory constraints. Ta-
ble 2 shows the average fraction of all constraints that are
active global constraints initially for three partitioning strate-
gies. Some entries in the table are zeroes because no parti-
tioning was done for those domain-strategy combinations.

The result shows that partitioning based on guidance vari-
ables leads to better constraint locality than that of subgoal
partitioning. Further, our strategy for controlling granularity
can avoid exorbitant resolution overheads when the locality is
weak and when a subproblem is too complicated to be solved
without partitioning. We address this issue in Section 3.2 us-
ing subproblem-level decomposition techniques. Note that
all three partitioning strategies work well for the Storage do-

IJCAI07

1926

Table 2: Fraction of constraints that are active global con-
straints initially averaged over all
the instances of each
IPC5 QualitativePreferences domain under three partitioning
strategies. (See the keys in Table 1.)

The planner ﬁrst decides on the values of the partitioning
guidance state vector x before partitioning the constraints.
The metric value for each assignment x(cid:2) of x is estimated
by solving the following relaxed problem:

Domain
TPP
OpenStacks
Trucks
Storage
Rovers

Bottleneck

Guidance

0.0153
0.0000
0.0000
0.0007
0.0227

0.0733
0.1728
0.0749
0.0032
0.0464

Subgoal
0.2892
0.1834
0.1623
0.0109
0.0488

Plan

Evaluation

Penalty-Value
Update Strategy

Global Constraints on Subproblems

G1

G2

GN

P1,1

P1,c1

PN,1

PN,cN

Basic Planner

FF/MCDC Heuristic Planner

Trajectory
constraints

engine

Temporal

engine

Search−space

reduction

g
n
i
n
n
a
l

P

l
e
v
e
L
-
l
a
b
o
l
G

g
n
i
n
n
a
l

P

l
e
v
e
L
-
l
a
o
g
b
u
S

Techniques

Studied

Global-

Constraint
Resolution

Handling
Preferences

Constraint
Partitioning

in MDF

Granularity

Control

Temporal
Engine

Trajectory
constraints

Engine

Search-
Space

Reduction

Figure 3: Architecture of SGPlan5.

main because its constraint locality is very strong. However,
since the instances in this domain have a huge number of con-
straints, even a small fraction of violated global constraints
would need to be resolved in many iterations.

3 Architecture of SGPlan5

SGPlan5 partitions a planning problem into subproblems,
each with a goal state, and ﬁnds a feasible plan for each
(Figure 3).
In the global level, it partitions the problem
by its guidance/bottlenecek variables and resolves any vio-
lated global constraints. In the local level, it calls a modiﬁed
Metric-FF planner for solving each subproblem, using the vi-
olated global constraints and the global preferences as biases.

3.1 Global-Level Search

SGPlan5 solves a planning problem formulated in one ob-
jective and one or more constraints. Using a penalty func-
tion of the objective and the transformed constraint func-
tions weighted by their penalties, it looks for extended sad-
dle points (ESPs) of the function [Wah and Chen, 2006].
In
each iteration, the planner solves a subproblem by generating
a feasible plan that satisﬁes the local constraints as well as to
minimize the weighted violations of the global constraints.

min

π

subject to

and

J(x(cid:2), π) = J
x

(x(cid:2)) + J
π

(π)

H(π) = 0, R(x(cid:2)) = 0

S

n

(cid:2) x(cid:2),

(1)

n

n

, t

where π = (cid:3)(S0, t0), . . . , (S
)(cid:4) deﬁnes the plan trajec-
tory, H(π) is the set of hard constraints, and R(x) is the value
of the reachability test. The metric function J(x(cid:2), π) consists
x whose value can be wholly inferred from x(cid:2), and J
of J
π
whose value is calculated by evaluating the plan trajectory.
Without additional restriction on π, we prune those cases in
which the violation of H can be deduced from x(cid:2).

We ﬁnd the best x(cid:2) by a heuristic search with backtrack-
(π) is unknown until planning ends, we use
ing. Since J
π
˜J(x(cid:2), π), the plan metric value of the relaxed plan for x(cid:2), to
estimate J(x(cid:2), π). This relaxed plan is provided by the ba-
sic planner (modiﬁed Metric-FF) and is used for reachability
(π) is zero, then the above search reduces
tests as well. If J
π
to an enumeration of all reachable assignments of x. In that
case, the solution is optimal when the best x(cid:2) for (1) is found.
In general, our strategy does not guarantee optimality because
the basic planner does not ensure the optimality of J
π

(π).

Sometimes the search can be decomposed by the goal-state
constraints, and the corresponding variables can be parti-
tioned into disjoint sets. However, since the number of reach-
able assignments is exponential with respect to x, we gener-
ally limit the number of assignments explored when the space
enumerated is still too large after the decomposition.

The handling and enumeration of general trajectory con-
straints is difﬁcult because it involves a number of interme-
diate states rather than one ﬁnal state. Further, due to the
large feasible space, inconsistencies between constraints are
difﬁcult to detect. Our approach is to divide the trajectory
constraints into local and global constraints. Hard local con-
straints are enforced by the basic planner, whereas global con-
straints are resolved by the penalty method. We follow a sim-
ilar procedure for resolving mutexes when handling global-
level trajectory constraints. Since soft constraints do not have
to be always satisﬁed, we compute the plan metric at the end
of each iteration and record the incumbent. Note that the
penalties used for resolving constraint violations differ from
the preference weights used for computing the metric value.

3.2 Subproblem-Level Search

Our basic planner mainly follows Metric-FF’s heuristic algo-
rithm [Hoffmann, 2003], but employs a new heuristic func-
tion to better handle the new features in PDDL3. Using MDF,
we have implemented a new heuristic that is similar to that
in Fast Downward [Helmert, 2004]. Our minimum causal
dependency-cost (MCDC) heuristic employs a complete re-
cursive depth-ﬁrst search for generating a heuristic plan with
the minimum cost and without pruning the causal graphs. In
contrast, the Fast Downward heuristic is incomplete since
it prunes arcs from the causal graphs. Although MCDC

IJCAI07

1927

provides a more accurate heuristic plan, its efﬁciency can-
not compete with Metric-FF’s “ignore-delete-lists” heuristic
function. We only use MCDC as a better dead-end detector
R(x) and metric-value estimator

˜J(x, π).

We have implemented the parser and the preprocessor for
supporting PDDL3 domains. To synchronize the checks of
constraints and the evaluation of violation costs, we encode
each constraint (resp. preference value) by an artiﬁcial predi-
cate (resp. function). All constraints are grounded, and quan-
tiﬁers are compiled away. During state transitions, the values
of these artiﬁcial ﬂuents are derived from the existing trajec-
tory using axioms. Having the above encoding and modiﬁ-
cation allows us to perform a breadth-ﬁrst search (BFS) in
satisfying the constraints or in optimizing the preferences.

To improve the efﬁciency of BFS, we incorporate new
heuristics for constraint satisfaction into Metric-FF’s heuris-
tic function. Our solution is to add artiﬁcial facts of local
constraints into the goal state of a subproblem, and compute
the combined heuristic value as the sum of the heuristic value
for the constraints and that for the subgoal. Since it is not
meaningful to sum the heuristic values for hard and soft con-
straints, we penalize soft- or global-constraint violations by
iteratively increasing their weights.

Before solving a partitioned subproblem, we can often
eliminate many irrelevant actions in its search space. We
identify relevant actions by traversing the causal graphs in
MDF and by ignoring those actions that are not useful for
achieving the current subgoal variables. We also prioritize
actions that do not cause an inconsistent assignment of MDF
variables. This is done by ﬁrst ﬁnding the set of bottleneck
variables and by applying the helpful-action idea in FF [Hoff-
mann and Nebel, 2001] to defer those actions that concur-
rently change the value of the bottleneck variables.

With the subproblems generated, it is possible that a sub-
problem is too complicated to be solved, especially when the
proposed partitioning strategy chooses a small number of par-
titions. Reducing the grain size further would not be effective
due to the complexity of resolving the global constraints. For
instance, all the subproblems in the IPC5 OpenStacks domain
are trivial to solve, but the challenge is to resolve the global
constraints. In case that the basic planner fails to ﬁnd a fea-
sible subplan, we use incremental planning [Hsu et al., 2005]
or landmark analysis [Hoffmann et al., 2004] to further de-
compose a subproblem into more manageable units.

4 Experimental Results

We ﬁrst evaluate the performance of our proposed partition-
ing strategy, which selects the number of partitions to be the
minimum of the number of bottleneck variables and the num-
ber of guidance variables. We test our proposed strategy on
a number of large IPC5 instances. We do not select instances
from domains with preferences, since most of them can be
readily solved by relaxing all their soft constraints.

Table 3 shows the slowdowns of solving each instance
using some ﬁxed number of partitions with respect to our
proposed partitioning strategy.
It shows that our pro-
posed strategy is usually the best, except in solving the
OpenStacks-MetricTime domain. Although OpenStacks-

Table 3: Slowdowns of solving some large IPC5 instances by
some ﬁxed number of partitions with respect to our proposed
partitioning strategy.

IPC5 Instance

TPP-PR-30
TPP-MT-40
TPP-MTC-22

Proposed Strategy
(g, b) min(g, b)
(20,8)
(25,10)

(4,2)

1
−

−

−

# of Partitions
2
−

4

8

1.00
2.01
−

g

1.72
1.29
−

4.98
2.92
−

16.35
1.00
3.34
0.76
−

8
10
2
1
50
5
5
5
1
5
4
30
40
14
14
9
9

−

−

1.00
0.76
−

(100,1)
OpenStacks-PR-30
OpenStacks-MT-30 (50,N/A)

5.01
1.00
0.72
9.23
0.98
−

(20,5)
(20,5)
(9,5)
(20,1)
(32,5)
(22,4)

Storage-PR-30
Storage-TI-30
Storage-TC-9
Trucks-PR-20
Trucks-TI-30
Trucks-TC-20

3.34
4.09
0.76
0.76
7.64
45.66
6.15
40.68
1.98
1.01
10.45 −
0.63
0.57
2.23
12.77 −
1.00
100.91
14.37
6.98
1.00
587.23 213.34 54.31 12.89 1.00
2.78
3.44
2.89 −
1.00
1.34
1.28
1.00
b:
# of guidance variables
’−’: CPU time exceeding 30 minutes; N/A: No bottleneck variables

(30,N/A)
(40,N/A)
(69,14)
(55,14)
(9,26)
(9,26)

Rovers-PR-40
Rovers-MT-38

19.23
1.00
3.27
−

PipesWorld-PR-45
PipesWorld-MT-45

Pathways-PR-30
Pathways-MT-30

# of bottleneck variables;

209.12
37.32

3.45
7.82
0.71

11.73
11.12

0.89
0.91

6.98
−

5.01
−

g:

−

−

−

−

Table 4: Number of instances solved by SGPlan5 with respect
to the total number of instances (in parenthesis) in each vari-
ant. (− means no instances in that domain. MetTime for TPP
and OpenStacks includes both Metric and MetricTime.)

TPP

Domain

Prop. MetTime Simp. Qual. Comp. Const.
30(30)
20(20) 20(20) 20(20) 18(30)
20(20) 20(20)
OpenStacks 30(30)
20(20) 20(20) 20(20) 20(20)
28(30)
20(20) 20(20) 20(20) 9(30)
30(30)
30(30)
30(30)
40(40)
20(20) 20(20)
PipesWorld 30(50)

79(80)
40(40)
30(30)
30(30)
30(30)
32(40)
30(50)

Trucks
Storage
Pathways

15(18) 0(20)

Rovers

30(30)

−

−

−

−

−

−

−

−

MetricTime has a similar problem structure as that of
OpenStacks-Propositional, our strategy fails to detect its
weak locality because it does not ﬁnd any bottleneck vari-
ables. Moreover, the beneﬁt of partitioning in this domain is
not tangible because its instances are rather easy.

Table 4 summarizes the statistics of the IPC5 instances
solved by SGPlan5 and shows that it can solve about 90%
of all the instances. Most of the unsolved instances are in the
MetricTimeConstraint track and the PipesWorld domain.

For the MetricTimeConstraint track, the weak performance
of SGPlan5 is due to the ineffective heuristics for handling
trajectory constraints when one logical formula is before an-
other, either quantitatively or qualitatively.

For the PipesWorld domain in which SGPlan5 does not
perform well, we have observed two interesting features. In
this domain, the set of guidance variables overlaps with that
of the bottleneck variables, and, unlike other domains, the
bottleneck (resp., guidance) variables have strong causal de-
pendencies with each other. The identiﬁed locality is also
weaker because the density of the shared resources is higher.
Finally, Figure 4 compares the performance of SGPlan5 on
six domain variants with that of other competing planners that
participated in IPC5. All the experiments were conducted on
a 3-GHz Intel Xeon Linux computer under a time limit of 30
minutes and a memory limit of 1 Gbytes. The results show
that SGPlan5 is much faster and can solve many more in-
stances, when compared to other competing planners that do

IJCAI07

1928

# Actions
 80

 70

 60

 50

 40

 30

 20

 10

 0

Plan Metric
 2000
 1800
 1600
 1400
 1200
 1000
 800
 600
 400
 200
 0

 0

 2

TPP-SimplePref (20 Instances)
Mips-BDD (9  solved)
Mips-XXL (9  solved)
SGPlan5 (20  solved)
YochanPS (12  solved)

 4

 6

 8  10  12  14  16  18  20

Storage-Prop (30 Instances)
Downward04sa (18  solved)
IPPLAN-G1SC (10  solved)
Mips-XXL (14  solved)
SGPlan5 (30  solved)
YochanPS (12  solved)
Downward.ipc04 (18  solved)

Plan Metric
 25000

Openstacks-MetricTime (20 Inst.)

Mips-XXL (9  solved)
SGPlan5 (20  solved)
SGPlan.ipc04 (20  solved)

 20000

 15000

 10000

 5000

 0

 0  2  4  6  8  10  12  14  16  18  20  22  24  26  28  30

 0

 2

 4

 6

 8  10  12  14  16  18  20

Plan Metric
 12000

 10000

Rovers-QualPref (20 Instances)
SGPlan5 (20  solved)
HPlan-P (14  solved)

 8000

 6000

 4000

 2000

 0

 0

 2

 4

 6

 8  10  12  14  16  18  20

Plan Metric
 60

Pathways-ComplexPref (30 Inst.)

Plan Metric
 4000

Trucks-TimeConstraints (20 Inst.)

 50

 40

 30

 20

 10

 0

Mips-XXL (14  solved)
SGPlan5 (30  solved)

 0  2  4  6  8  10  12  14  16  18  20  22  24  26  28  30

 3500

 3000

 2500

 2000

 1500

 1000

 500

Mips-XXL (4  solved)
SGPlan5 (20  solved)

 0

 2

 4

 6

 8  10  12  14  16  18  20

Figure 4: Performance comparison on selected domains of SGPlan5 and other competing planners in the 5th International
Planning Competitions (reproduced from the results posted in [Gerevini et al., 2006]). (The x axis shows the instance number.)

not use constraint partitioning. With respect to the plan metric
value, SGPlan5 is clearly the best planner. For PDDL2.2 do-
mains, with the aid of new domain analysis techniques and a
good partitioning strategy, SGPlan5 can either solve more in-
stances (Storage-Propositional) or achieve better plan quality
(OpenStacks-MetricTime).

The complete results at the IPC5 Web site [Gerevini et al.,
2006] show that SGPlan5 ranks ﬁrst (resp., second) in 32
(resp., 3) of the domain variants. The other competing plan-
ners that rank ﬁrst/second in at least one of the domain vari-
ants include Downward (1/4), MIPS-BDD (0/1), MIPS-XXL
(0/14), HPlan-B (0/5), and YochanPS (1/8).

In the future, we like to enhance the efﬁciency of evaluat-
ing trajectory constraints. We will improve the heuristics in
SGPlan5 for handling complex trajectory constraints. We will
also consider using the techniques in [Edelkamp, 2006] that
translates trajectory constraints into some automata in order
to more efﬁciently check the satisfaction of constraints.

References
[B¨ackstr¨om and Nebel, 1995] C. B¨ackstr¨om and B. Nebel.
Complexity results for SAS+ planning. Computational In-
telligence, 11:625–656, 1995.

[Chen et al., 2006] Y. X. Chen, B. W. Wah, and C. W. Hsu.
Temporal planning using subgoal partitioning and reso-
lution in SGPlan. J. of Artiﬁcial Intelligence Research,
26:323–369, August 2006.

[Edelkamp and Hoffmann, 2004] S. Edelkamp and J. Hoff-
mann. Classical part, 4th International Planning Compe-
tition. http://ls5-www.cs.uni-dortmund.de/
˜edelkamp/ipc-4/, 2004.

[Edelkamp, 2006] S. Edelkamp. On the compilation of plan
In ICAPS, pages 374–377,

constraints and preferences.
2006.

[Gerevini and Long, 2005] A. Gerevini and D. Long. Plan
constraints and preferences for PDDL3. Technical report,
R.T. 2005-08-07, Dept. of Electronics for Automation, U.
of Brescia, Brescia, Italy, August 2005.

[Gerevini et al., 2006] A.

Gerevini,

Y.

P. Haslum,

Dimopou-
Determinis-
5th International Planning Competition.

los,
tic
http://eracle.ing.unibs.it/ipc-5/, 2006.

and A. Saetti.

part,

[Helmert, 2004] M. Helmert. A planning heuristic based on

causal graph analysis. In ICAPS, pages 161–170, 2004.

[Hoffmann and Nebel, 2001] J. Hoffmann and B. Nebel. The
FF planning system: Fast plan generation through heuris-
tic search. J. of Artiﬁcial Intelligence Research, 14:253–
302, 2001.

[Hoffmann et al., 2004] J. Hoffmann, J. Porteous, and L. Se-
bastia. Ordered landmarks in planning. J. of Artiﬁcial
Intelligence Research, 22:215–278, 2004.

[Hoffmann, 2003] J. Hoffmann. The Metric-FF planning
system: Translating ignoring delete lists to numeric state
variables. J. of Artiﬁcial Intelligence Research, 20:291–
341, 2003.

[Hsu et al., 2005] C. W. Hsu, B. W. Wah, and Y. X. Chen.
Subgoal ordering and granularity control for incremental
planning. In Proc. IEEE Int’l Conf. on Tools with Artiﬁcial
Intelligence, pages 507–514, November 2005.

[van den Briel et al., 2005] M. van den Briel, T. Vossen, and
S. Kambhampati. Reviving integer programming ap-
proaches for AI planning: A branch-and-cut framework.
In ICAPS, pages 310–319, 2005.

[Wah and Chen, 2006] B. Wah and Y. X. Chen. Constraint
partitioning in penalty formulations for solving temporal
planning problems. Artiﬁcial Intelligence, 170(3):187–
231, 2006.

IJCAI07

1929

