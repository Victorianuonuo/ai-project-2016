Regret-based Utility Elicitation in Constraint-based Decision Problems

Craig Boutilier

Relu Patrascu

Pascal Poupart

Dale Schuurmans

Dept. of Computer Science

Dept. of Computer Science

School of Computer Science

Dept. of Computing Science

University of Toronto
cebly@cs.toronto.edu

University of Toronto
relu@cs.toronto.edu

University of Waterloo

ppoupart@cs.uwaterloo.ca

University of Alberta
dale@cs.ualberta.ca

Abstract

We propose new methods of preference elicitation for
constraint-based optimization problems based on the use
of minimax regret. Speciﬁcally, we assume a constraint-
based optimization problem (e.g., product conﬁguration)
in which the objective function (e.g., consumer prefer-
ences) are unknown or imprecisely speciﬁed. Assum-
ing a graphical utility model, we describe several elicita-
tion strategies that require the user to answer only binary
(bound) queries on the utility model parameters. While a
theoretically motivated algorithm can provably reduce re-
gret quickly (in terms of number of queries), we demon-
strate that, in practice, heuristic strategies perform much
better, and are able to ﬁnd optimal (or near-optimal) con-
ﬁgurations with far fewer queries.

1 Introduction
The development of automated decision software is a key
focus within decision analysis [21; 16] and AI [7; 3]. To
deal with different users, some form of preference elicitation
must be undertaken in order to capture speciﬁc user prefer-
ences to a sufﬁcient degree to allow an (approximately) op-
timal decision to be taken. In this work, we study the prob-
lem of preference elicitation in constraint-based optimization
(CBO). CBO provides a natural framework for specifying
and solving many decision problems, such as conﬁguration
tasks [15], in which hard constraints capture options avail-
able to a customer and an objective (or utility) function re-
ﬂects customer preferences. Explicit formulation as a math-
ematical program or using a soft constraint framework [17;
2] has been successfully used to model such problems.

Unfortunately, the requirement of complete utility infor-
mation demanded by CBO is often problematic. For instance,
users may have neither the ability nor the patience to provide
full utility information to a system. Furthermore, in many if
not most instances, an optimal decision (or some approxima-
tion thereof) can be determined with a very partial speciﬁca-
tion of the user’s utility function. As such, it is imperative
that preference elicitation procedures be designed that focus
on the relevant aspects of the problem (e.g., by ignoring in-
feasible parts of utility space, or utility for outcomes provably
dominated given current information).

Our framework is as follows. We assume a set of (hard)
constraints together with a graphical utility model [1; 4] cap-

turing user preferences. While the structure of the utility
model is known, the parameters of this utility model are im-
precise, given by upper and lower bounds. Adopting the min-
imax regret model of [5], a robust decision can be made with
respect to this utility uncertainty, by choosing the minimax
optimal conﬁguration. This is the solution the user would re-
gret the least should an adversary impose a utility function
consistent with our knowledge of the user’s preferences. If
regret is unacceptably high, we query the user for more in-
formation about their preferences, until the worst-case error
(regret) is small enough (zero if optimality is required).

In this work, we elicit preferences using bound queries
(a local form of standard gamble queries [9])—that provide
tighter upper or lower bounds on the utility parameters—
since these are reasonably easy for users to assess and have
been studied extensively in the decision analysis literature.
We develop several new strategies for elicitation using bound
queries whose aim is to reduce the worst-case error (i.e.,
get guaranteed improvement in decision quality) with as few
queries as possible. These include strategies with good theo-
retical guarantees (related to polyhedral methods in conjoint
analysis [18; 11]), as well as several heuristic methods that
perform better empirically. We also show that one of these
strategies is largely unaffected by computational approxima-
tion of the required minimax solutions.

2 Problem Formulation
We assume some system is charged with making or recom-
mending a decision on behalf of a user, for example, conﬁgur-
ing a (multiattribute) product for a consumer (e.g., the choice
of a car and options). However, since user preferences vary,
an appropriate conﬁguration requires that the system inter-
act with the user to determine enough about her preferences
over feasible alternatives to make a good (or possibly opti-
mal) choice. Thus, the system must engage in some form of
preference elicitation. This basic problem lies at the heart
of considerable work in multiattribute utility theory [12; 20;
14] and the theory of consumer choice (such as conjoint anal-
ysis [18; 11]). Our approach differs from classic approaches
in several important respects, as we emphasize below. Most
importantly, our decision model and elicitation strategies will
be driven by the minimax regret criterion. To present our
results, we ﬁrst need to review previous work on minimax
regret and the framework of [5] in more detail.

2.1 Optimization with Graphical Utility Models
Following [5], we assume a ﬁnite set of attributes X =
fX1; X2; : : : ; XNg with ﬁnite domains, characterizing a set
of choices available to a decision maker (or consequences
thereof). These might be, say, car options such as make,
engine size, transmission type, etc. An assignment x 2
Dom(X) is often referred to as a state. For ease of pre-
sentation, we assume attributes are boolean. We also have
a set of hard constraints C over these attributes. Each con-
straint C‘, ‘ = 1; :::; L, is deﬁned over a subset of attributes
X[‘] (cid:26) X, and thus induces a set of legal conﬁgurations of at-
tributes in the subset X[‘] (e.g., the set of products that can be
proposed). We assume that the constraints C‘ are represented
in some logical form and can be expressed compactly (e.g.,
X1 ^ X2 (cid:27) :X3). For instance, we might have that model
Passat and engine 2.8T do not allow transmission 5Speed-
Man. We let Feas(X) denote the subset of feasible states
satisfying C.
Suppose the system had access to the user’s utility function
u : Dom(X) ! R, representing a user’s strength of prefer-
ence for various conﬁgurations (e.g., we might view this as
what they are willing to pay). The constraint-based optimiza-
tion (CBO) problem is to ﬁnd an optimal feasible state x(cid:3)

:

x(cid:3) 2 arg max
x2Feas(X)

u(x):

For multiattribute problems of this type, one generally as-
sumes some utility function structure [12; 8]. In this work, we
adopt a generalized additive independence (GAI) model [8;
1]. Speciﬁcally, we assume that the utility function can be
written as the sum of K local utility functions, or factors,
over small sets of variables:
u(x) =

f k(x[k]):

X

(1)

k(cid:20)K

Here each function f k depends only on a local family of at-
tributes X[k] (cid:26) X. We denote by x[k] the restriction of state
x to the attributes in X[k]. This model is attractive due to its
naturalness and generality (encompassing both linear models
[12] and UCP-nets [4] as special cases). The problem of ﬁnd-
ing an optimal conﬁguration can be formulated as an integer
program (IP), and can often be solved very effectively.

2.2 Minimax Regret
While many approaches to elicitation focus on obtaining full
utility information, it will often be infeasible, undesirable, or
unnecessary to extract a complete utility function from the
user [20]. As a consequence, a system must make decisions
in the face of incompletely speciﬁed utility functions. Sev-
eral approaches have been proposed for representing utility
uncertainty, as well as making decisions given this uncer-
tainty. For example, Bayesian methods quantify uncertainty
about preferences probabilistically [7; 3]. Other techniques
simply pose constraints on the set of possible utility func-
tions and use various criteria to ﬁnd or reduce the set of de-
cisions or otherwise direct elicitation; for example, one can
identify Pareto optimal [21] or dominant alternatives [20; 13;
14], or decisions that minimize regret [4; 16; 19; 5].

In this paper we adopt the minimax regret criterion, fol-
lowing the formulation of [5]. Unlike Bayesian methods,
minimax regret recommends decisions given only a set of
possible utility functions rather than a probabilistic prior.
Thus it is suitable when reasonable priors are hard to for-
mulate and does not require the computational approxima-
tions often needed in reasoning with complex priors [7;
3]. Minimax regret also allows recommendation of decisions
that are robust in the face of utility function uncertainty since
it provides tight bounds on the worst-case error, which is ap-
pealing in many circumstances (and unlike many schemes
proffers a speciﬁc decision rather than, say, a Pareto optimal
set). Previously this has been found to be an attractive crite-
rion in real-world procurement settings [6]. As we will see,
regret is also very effective in focusing elicitation effort even
when priors are available [19].

Suppose the utility function for a CBO problem is un-
known, but constraints on its parameters (e.g., in the form
of bounds) are available and some decision must be recom-
mended.1 The minimax regret decision criterion suggests
that one adopt the (feasible) assignment x that obtains mini-
mum max-regret, where max-regret is the largest quantity by
which one could “regret” choosing x (while allowing the util-
ity function to vary within the bounds). More formally, let U
denote the set of feasible utility functions. We refer to a pair
hC;Ui, where C is a set of conﬁguration constraints, as an
imprecise CBO problem. The pairwise regret of state x with
respect to x0

over feasible utility set U is deﬁned as
) − u(x)g;

(2)
which is the most our system could regret choosing x for the
user instead of x0
(e.g., if an adversary could impose any util-
ity function in U). The maximum regret of decision x is:

R(x; x0;U) = max
u2U

fu(x0

MR(x;U) =

max

x02Feas(X)

R(x; x0;U)

(3)

(4)

The minimax regret of feasible utility set U is:

MMR(U) =

MR(x;U)

min

x2Feas(X)

If the only information we have about a user’s utility function
is that it lies in the set U, then a minimax-optimal decision x(cid:3)
s.t. MR(x(cid:3);U) = MMR(U)) minimizes the worst-
(i.e., x(cid:3)
case loss w.r.t. possible realizations of utility u 2 U.

Computation of minimax regret in CBO problems requires
care; the explicit minimization in Eq. 4 is infeasible. For-
tunately, one can formulate it in a manner that exploits the
graphical structure of the utility model, thereby admitting (in
practice) computationally tractable solution [5]. The proce-
dure of [5] assumes an imprecise CBO problem with factors
f k, k (cid:20) K, deﬁned over local families X[k]. The parame-
ters of this utility function are denoted by ux[k] = f k(x[k]),
where x[k] ranges over Dom(X[k]). Upper and lower bounds
on each of these parameters are assumed, denoted by ux[k]"
and ux[k]#, respectively. Effective computation of pairwise re-
gret, max regret and minimax regret is possible by exploiting
structure in the constraints and graphical utility model.

1These constraints reﬂect knowledge of the user’s utility func-

tion, generally obtained through elicitation as we elaborate below.

Input: imprecise CBO problem, worst-case error tolerance (cid:28).

1. Compute minimax regret value mmr
2. Repeat until mmr < (cid:28)

(a) Ask bound query q about some utility parameter u(x[k]).
(b) If u(x[k]) (cid:20) q then lower ux[k]" to q.
(c) Otherwise raise ux[k]# to q
(d) recompute mmr

Table 1: General form of the interactive elicitation procedure.

In particular, the minimax optimization in Eq. 4 is rewrit-
ten as as minimization with an inﬁnite number of constraints.
A constraint generation procedure is used to generate con-
straints incrementally until all (ﬁnitely many) active con-
straints are enumerated. The mixed integer programs (MIPs)
required to solve both the main minimization and the gen-
eration of the most violated constraint are compact, with a
number of variables linear in the size (number of parameters)
of the GAI model. An important property of this procedure is
that it generates both an optimal solution x(cid:3)
and an adversar-
ial witness xw for the current U: xw is the assignment that the
maximizes regret of x(cid:3)
in Eq. 4 (as the x0
variable in Eq. 3).
We refer to [5] for further algorithm details. The procedure
was shown to handle signiﬁcant practical problems, generally
generating very few constraints, with solution times ranging
from fractions of a second to 1000 seconds [5].

In practice, since minimax regret will be computed be-
tween elicitation queries, it is critical that minimax regret be
estimated in a relatively short period of time (say 5 seconds).
For this reason, we propose several improvements to the pro-
cedure of [5] that can speed up regret computation with elic-
itation in mind: (1) The constraint generation procedure for
solving the MIP can be accelerated by simply ﬁnding a feasi-
ble x given the current set of constraints, rather than explicitly
searching for a minimax optimal x given current constraints.
(2) Since minimax regret is computed incrementally by gen-
erating constraints, it has an anytime nature and early stop-
ping can be used. This has the effect that some violated con-
straints may not have been generated, but the “early” solution
provides a lower bound on true minimax regret. We can also
compute an upper bound by computing the max regret of the
x found for the last MIP solved. These bounds are often tight
enough to provide good elicitation guidance. (3) The mini-
max regret problem solved after receiving a response to one
query is very similar to that solved before posing the query.
As such, one can “seed” the minimax procedure invoked after
a query with the constraints generated at the previous step. In
this way, typically, only a few extra constraints are generated
during each minimax computation.

While we focus on the use of upper and lower bounds
on utility parameters, the procedures described here can be
adapted to problems with arbitrary linear constraints over util-
ity parameters. Handling such constraints is important when
comparison queries are used (see below). With this back-
ground in place, we can now turn to elicitation.

3 Elicitation Strategies
We consider an interactive process in which the decision soft-
ware queries the user for information about her utility func-

tion, reﬁning initial bounds on the parameters, until minimax
regret reaches an acceptable level (cid:28).2 Table 1 summarizes the
general form of the interactive elicitation procedure.
3.1 Bound Queries
The types of queries we consider are bound queries in which
we ask the user whether one of her utility parameters lies
above a certain value. A positive response raises the lower
bound on that parameter, while a negative response lowers
the upper bound: in both cases, uncertainty is reduced.3

While users often have difﬁculty assessing numerical pa-
rameters, they are typically better at comparing outcomes [12;
9]. However, a bound query can be viewed as a local form of
a standard gamble query (SGQ), commonly used in decision
analysis; these, in fact, ask for comparisons. An SGQ for a
speciﬁc state x asks the user if she prefers x to a gamble in
which the best outcome x> occurs with probability l and the
worst x? occurs with probability 1 − l [12]. A positive re-
sponse puts a lower bound on the utility of x, and a negative
response puts an upper bound. Calibration is attained by the
use of common best and worst outcomes across all queries
(and numerical assessment is restricted to evaluating proba-
bilities). The foundations of such queries can be made pre-
cise using results of Fishburn [8]; we defer details for space
reasons (see [10] for more on elicitation in GAI networks).4

Our query strategies rely on the following deﬁnitions.

Defn 1 Let hC;Ui be an imprecise CBO problem. An opti-
mistic state xo, a pessimistic state xp, and a most uncertain
state xmu are any states satisfying:
u2U u(x)
max
u2U u(x)
min
max
u;u02U

xo 2 arg max
x2Feas(X)
xp 2 arg max
x2Feas(X)
xmu 2 arg max
x2Feas(X)

fu(x) − u0

(x)g

An optimistic state is a feasible state with the greatest upper
bound on utility. A pessimistic state has the greatest lower
bound on utility. A most uncertain state has the greatest dif-
ference between its upper and lower bounds. Each of these
states can be computed in a single optimization by setting the
parameters of the utility model to their upper bounds, their
lower bounds, or their difference, and solving the correspond-
ing (precise) CBO problem.

In this framework, the goal of an elicitation strategy is to
reduce minimax regret using as few queries as possible. The
challenge is to select such queries efﬁciently—avoiding in-
tractabilities inherent in outcome enumeration and lookahead,
while nevertheless reducing minimax regret effectively.

2We could insist that regret reaches zero (i.e., a provably optimal
solution), or stop when regret reaches a point where further improve-
ment is outweighed by the cost of further interaction.

3If the user’s true value is close to the query point, she may feel
“roughly indifferent;” in this case we could impose a constraint that
the true value is “close” (e.g., within some ") to this point.
4While we focus on bound queries, other queries are quite natu-
ral. Comparison queries ask if one state x is preferred to another x0
.
A response imposes a linear constraint on utility parameters. Regret
computation must then take the general form alluded to above.

3.2 The Halve Largest Gap Strategy
The ﬁrst query strategy we consider is the halve largest gap
(HLG) strategy. It asks a query at the midpoint of the largest
interval, i.e., corresponding to the parameter x[k] with the
largest gap between its upper and lower bounds. This is moti-
vated by theoretical considerations based on simple worst-
case bounds on minimax regret. Deﬁne, respectively, the
gap of a utility parameter u(x[k]), the span of factor f k and
maxspan of a utility model U as follows:5
gap(x[k]) = ux[k]" − ux[k]#
span(f k) =
x[k]2Dom(X[k])
X
maxspan(U) =
span(f k)

gap(x[k])

(5)
(6)

max

(7)

k

The quantity maxspan measures the largest gap between the
upper and lower utility bound, regardless of feasibility. We
can show that this quantity bounds minimax regret:
Proposition 1 For any hC;Ui, MMR(U) (cid:20) maxspan(U).
Since MMR(U) (cid:20) MR(xo;U) and for any optimistic state xo
we have MR(xo;U) (cid:20) maxspan(U), the result follows.6

This suggests an obvious query strategy, the HLG method,
in which a bound query is asked of the parameter p with the
largest gap, at the midway point of its interval, (p" − p#)=2.
This method ensures rapid reduction in max regret:
Proposition 2 Let U be an uncertain utility model with n
parameters and let m = maxspan(U). After n log(m=")
queries by HLG, minimax regret is no greater than ".

In the worst case, no query strategy can reduce regret more
quickly than HLG. Furthermore, there are classes of utility
functions for which the bound is tight, so worst-case U and
conﬁguration constraints C exist that ensure regret will never
be reduced to zero in ﬁnitely many queries.7 This strategy
is similar to heuristically motivated polyhedral methods in
conjoint analysis used in product design and marketing [18;
11]).
In fact, HLG can be viewed as a special case of the
method of [18] in which our polyhedra are hyper-rectangles.

3.3 The Current Solution Strategy
While HLG allows one to provide strong worst-case guaran-
tees on regret improvement, it is “undirected” in that con-
siderations of feasibility play no role in determining which
queries to ask. An alternative strategy is to focus attention on
parameters that participate in deﬁning the max regret, namely,
the minimax optimal x(cid:3)
and the adversarial witness xw for
the current U (recall that the witness maximizes the regret
of x(cid:3)
). The current solution (CS) query strategy asks about
5We denote the upper and lower bounds of any parameter p by p"

and p# respectively.

6The deﬁnition of maxspan can be tightened to account for logi-
cal consistency of the assignments to different factors, or by restrict-
ing attention to feasible states (w.r.t. C). The result still holds.

7The bound is not generally tight if there is overlap in factors;

but is tight if maxspan accounts for logical consistency.

the utility parameter in the set fx(cid:3)[k] : k (cid:20) Kg [ fxw[k] :
k (cid:20) Kg with largest gap(x[k]) and queries the midpoint of
the corresponding utility interval. Intuitively, should the an-
swer to a query raise the lower bound on some u(x(cid:3)[k]) or
lower the upper bound on some u(xw[k]), then the pairwise
regret R(x(cid:3); xw) will be reduced, and usually minimax regret
as well. Of course, if the answer lowers the upper bound on
some u(x(cid:3)[k]) or raises the lower bound on some u(xw[k]),
then pairwise regret R(x(cid:3); xw) remains unchanged. (Note
that minimax regret might still be reduced.)

We have also experimented with a variant of the CS strat-
egy in which regret is computed approximately to ensure fast
interactive response by imposing a time bound on computa-
tion (as described above). While we can’t be sure we have the
minimax optimal solution with early termination, the solution
may be good enough to guide the querying process. Further-
more, since we can compute the max regret of the anytime
solution, we know the quality of the solution, and we have
an upper bound on minimax regret which can be used as a
natural termination criterion for the querying process.

3.4 Alternative Strategies

Finally, we have experimented with several other strategies,
which we describe brieﬂy. The optimistic query strategy com-
putes an optimistic state xo and queries (at the midpoint of the
interval) the utility parameter in xo with the largest gap. In-
tuitively, an optimistic xo is a useful adversarial choice, so
reﬁning information about it can help reduce regret. The pes-
simistic query strategy is analogous, relying on the intuition
that a pessimistic choice is useful in preventing the adversary
from making us regret our decision too much. The optimistic-
pessimistic (OP) strategy combines the two: it queries the pa-
rameter that has the largest gap among both states. These
strategies are computationally appealing since they require
only standard CBO, not minimax optimization.

The most uncertain state (MUS) strategy is a variant of
HLG that accounts for feasibility: we compute a most un-
certain state xmu and query (at the midpoint) the parameter in
xmu with the largest gap. Finally, the second-best (SB) strat-
egy is based on the following intuition: suppose we have the
optimistic state xo and the second-best optimistic state x2o
(i.e., that state with the second-highest upper bound—this is
computable with a single optimization). If we could ask a
query which reduced the upper bound utility of xo to lower
than that of x2o, we ensure that regret is reduced (since the
adversary can no longer attain this most optimistic value); if
the lower bound of xo were raised to the level of x2o’s upper
bound, then we could terminate—knowing that xo is optimal.
Thus we would like to query xo at x2o’s upper bound: a neg-
ative response will reduce regret, a positive response ensures
xo is optimal. The SB method “distributes” this query across
the relevant factor parameters, asking several bound queries.
The myopically optimal (MY) strategy computes the aver-
age regret reduction of the midpoint query for each utility
parameter by solving the minimax problem for each response
to each query; it then asks the query with the largest average
reduction. This approach is generally infeasible, but we test

it on small problems to see how the other methods compare.8

4 Empirical Results
We tested the effectiveness of our query strategies on a
variety of problems. For each problem we tested: halve
largest gap (HLG), current solution (CS), current solution
with a computation-time bound of ﬁve seconds per query
(CS-5), optimistic-pessimistic (OP), second-best (SB), and
most uncertain state (MUS). We also compared these against
the more computationally demanding myopically optimal
method (MY) on small problems. We implemented the con-
straint generation approach of [5] and used CPLEX as the
generic IP solver. Our experiments considered two realistic
domains—car rentals and real estate—as well as randomly
generated synthetic problems.

First, we tested small synthetic problems to allow a com-
parison of our heuristics with the MY strategy. Fig. 1 reports
the average minimax regret over 45 small synthetic problems
constructed by randomly setting the utility bounds and the
variables on which each utility factor depends. Each prob-
lem has 10 attributes that can take at most 4 values and 10
factors that depend on at most 3 attributes. We simulate user
responses by drawing a random utility function u for each
trial, consistent with the bounds, representing a user’s prefer-
ences. Responses to queries are generated using u (assuming
the user accurately answers queries relative to u). Results are
shown for two cases: utility parameters drawn from a uni-
form distribution over each interval, and those drawn from a
(truncated) Gaussian centered at the midpoint of the interval
(reﬂecting that a user is somewhat more likely to have a true
value near the middle of the range).9 In both cases, we ob-
serve that the OP, CS and CS-5 heuristics decrease minimax-
regret at a rate very close to MY. This suggests that OP, CS
and CS-5 are computationally feasible, yet promising alter-
natives to the computationally prohibitive MY strategy.

We report on further experiments using all strategies ex-
cept MY with larger synthetic problems, a real-estate prob-
lem and a car rental problem taken from [5], drawing users
from uniform distributions (Gaussian results are very sim-
ilar both in shape and magnitude). As above, all results
are averaged over 45 trials. The car-rental problem is mod-
eled with 26 (multivalued) variables that specify various at-
tributes of a car relevant to typical rental decisions, result-
ing in 61,917,360,000 possible conﬁgurations. The factored
utility model consists of 36 local factors, each deﬁned on at
most ﬁve variables, with 150 utility parameters. Performance
of the various query strategies is depicted in Fig. 2(a). Ini-
tial utility bounds are set to give minimax regret of roughly
18% of the optimal solution. Both CS and CS-5 perform
extremely well: regret is reduced to almost zero within 160
queries on average.10 More importantly, these methods show

8By doing lookahead of this type for k stages, we could in fact

compute the optimal query plan of k-steps.

9All experiments show a reasonably small variance so we ex-

clude error bars for legibility.

10Though this may seem like a lot of queries, recall that the
problem is very large, with a utility model with 150 parameters.
We intentionally choose problems this large to push the compu-

excellent anytime performance: after only 80 queries, aver-
age minimax regret has dropped from 18% to under 2%. In-
terestingly, the time bound of 5 seconds imposed by CS-5,
while leading to approximately minimax optimal solutions,
does not affect query quality: the approximate solutions give
rise to queries that are virtually as effective as the optimal
solutions. The CS strategy requires on average at most 83s
per query. The OP strategy works very well too, and re-
quires less computation time (0.1s per query) since it does
not need to solve minimax problems (except to verify termi-
nation “periodically,” which is not reﬂected in query compu-
tation time). However, both OP and CS-5 are fast enough to
be used interactively on problems of this size. MUS, HLG,
and SB do not work nearly as well. Note the HLG per-
forms poorly since it fails to account for the feasibility of op-
tions, thus directing its attention to parts of utility space for
which no product exists (hence polyhedral methods alone [18;
11] will not offer reasonable elicitation in our setting). MUS
signiﬁcantly outperforms HLG for just this reason.

The real-estate problem is modeled with 20 (multivalued)
variables, with 47,775,744 possible conﬁgurations. The fac-
tored utility model consists of 29 local factors, giving rise
to 100 utility parameters. Query performance is shown in
Fig. 2(b), using the same regime as above. Again, both CS
and CS-5 perform best, and the time bound of CS-5 has no
effect on the quality of the CS strategy. Interestingly, OP per-
forms almost identically to these, with somewhat lower com-
putational cost (CS takes 14s/query, CS-5 5s, and OP 0.1s).
Each of these methods reduces minimax regret from 40% of
optimal to under 5% in about 120 queries. As above, SB fails
to make progress, while HLG and MUS do somewhat better.
We also tested the query strategies on larger randomly gen-
erated problems (with 25 variables of domain size no more
than four, and 20 utility factors with no more than three vari-
ables each). The same performance patterns as in real-estate
emerge, with CS, CS-5 and OP all performing much better
than the others (see Fig. 2(c)). Although OP performs slightly
better than CS/CS-5, the difference is not signiﬁcant.

5 Concluding Remarks
We have developed a number of query strategies for elicit-
ing bounds on the parameters of graphical utility models for
the purpose of solving imprecise constraint-based optimiza-
tion problems. The most promising of these strategies, CS
and OP, perform extremely well, requiring very few queries
(relative to the model size) to provide dramatic reductions in
regret. We have shown that using approximation of minimax
regret reduces interactive computation time to levels required
for real-time response without a noticeable effect on the per-
formance of CS. OP also can be executed in real-time, since
it does not require the same intensive minimax computation.
We plan to extend this research a number of directions. We
would like to consider additional query types, such as com-
parisons of outcomes and tackle the associated computational

tational boundaries of regret-based elicitation. Furthermore, while
160 queries may be large for typical consumer choice problems, it is
more than reasonable for high stakes conﬁguration applications.

Small Random Problem −− Uniform Prior

Small Random Problem −− Gaussian Prior

t

e
r
g
e
r
 
x
a
m
n
M

i

i

140

120

100

80

60

40

20

0
0

MY

SB

20%

17%

15%

12%

 9%

 6%

 3%

HLG

CS−5

CS

OP

MUS

y
t
i
l
i
t

u
 
x
a
m

 
/
 
t

e
r
g
e
r
 
x
a
m
n
M

i

i

140

120

100

80

60

40

20

HLG

CS−5

CS

OP

MUS

SB

20%

17%

15%

12%

 9%

 6%

 3%

t

e
r
g
e
r
 
x
a
m
n
M

i

i

50

100

Number of queries

150

 0%

200

MY

0
0

50

100

Number of queries

150

 0%

200

y
t
i
l
i
t

u
 
x
a
m

 
/
 
t

e
r
g
e
r
 
x
a
m
n
M

i

i

Figure 1: Avg. max regret on small random problems (45 instances) as a function of number of queries given (a) uniform and
(b) Gaussian distributed utilities.
Car Rental Problem −− Uniform Prior

Large Random Problem −− Uniform Prior

House Buying Problem −− Uniform Prior

t

e
r
g
e
r
 
x
a
m
n
M

i

i

399

350

300

250

200

150

100

50

0
0

CS

CS−5

MUS

SB

HLG

OP

18%

16%

13%

11%

 9%

 7%

 4%

 2%

50

100

Number of queries

150

 0%

200

y
t
i
l
i
t

u

 
x
a
m

 
/
 
t

e
r
g
e
r
 
x
a
m
n
M

i

i

t

e
r
g
e
r
 
x
a
m
n
M

i

i

764

600

500

400

300

200

100

0
0

HLG

CS−5

MUS

SB

OP

CS

40%

32%

26%

21%

16%

11%

 5%

50

100

Number of queries

150

 0%

200

y
t
i
l
i
t

u

 
x
a
m

 
/
 
t

e
r
g
e
r
 
x
a
m
n
M

i

i

t

e
r
g
e
r
 
x
a
m
n
M

i

i

512

450
400
350
300
250
200
150
100
50
0
0

HLG

SB

CS−5

CS

OP

MUS

50

100

Number of queries

150

36%

32%
28%
25%
21%
18%
14%
11%
 7%
 4%
 0%

200

y
t
i
l
i
t

u

 
x
a
m

 
/
 
t

e
r
g
e
r
 
x
a
m
n
M

i

i

Figure 2: Avg. max regret (45 instances, uniform density) as a function of number of queries: (a) car; (b) real estate; (c) large
random problems.

problems. We also plan to explore new query strategies, in-
cluding those that exploit probabilistic information to com-
pute queries yet still use (distribution-free) regret to make de-
cisions [19]. Non-myopic models are also of considerable
interest. Finally, human factors must be addressed, including
framing and presentation, and dealing with the fact that users
often “construct” preferences during analysis, rather than “re-
veal” existing preferences—this can often lead to inconsis-
tency. While our current approach will never ask a query for
which a response could be inconsistent with prior responses,
allowing a user to backtrack still may be important.

Acknowledgements: This research was supported by the
the Institute for Robotics and Intelligent Systems (IRIS)
and the Natural Sciences and Engineering Research Council
(NSERC). Poupart was supported by a scholarship provided
by Precarn Incorporated through IRIS.

References
[1]

F. Bacchus and A. Grove. Graphical models for preference and utility. UAI-95,
pp.3–10, Montreal, 1995.
S. Bistarelli, U. Montanari, and F. Rossi. Semiring-based constraint satisfaction
and optimization. JACM, 44:201–236, 1997.

[2]

[7] U. Chajewska, D. Koller, and R. Parr. Making rational decisions using adaptive

[8]

utility elicitation. AAAI-00, pp.363–369, Austin, TX, 2000.
P. C. Fishburn.
expected utility theory. Intl. Econ. Rev., 8:335–342, 1967.
S. French. Decision Theory. Halsted, New York, 1986.

Interdependence and additivity in multivariate, unidimensional

[9]
[10] C. Gonzales and P. Perny. GAI networks for utility elicitation. KR-04, pp.224–

234, Whistler, BC, 2004.

[11] V. S. Iyengar, J. Lee, and M. Campbell. Q-Eval: Evaluating multiple attribute

items using queries. ACM EC-01, pp.144–153, Tampa, FL, 2001.

[12] R. L. Keeney and H. Raiffa. Decisions with Multiple Objectives: Preferences and

Value Trade-offs. Wiley, NY, 1976.

[13] C. W. Kirkwood, R. K. Sarin. Ranking with partial information: A method and

an application. Op. Res., 33:38–48, 1985.

[14] A. M. M´armol, J. Puerto, F. R. Fern´andez. The use of partial information on
weights in multicriteria decision problems. J. Multicrit. Dec. Anal., 7:322–329,
1998.

[15] D. Sabin and R. Weigel. Product conﬁguration frameworks—a survey. IEEE Intel.

Sys. and their Appl., 13(4):42–49, 1998.

[16] A. Salo and R. P. H¨am¨al¨ainen.

Preference ratios in multiattribute evalua-
tion (PRIME)–elicitation and decision procedures under incomplete information.
IEEE SMC, 31(6):533–545, 2001.

[17] T. Schiex, H. Fargie, and G. Verfaillie. Valued constraint satisfaction problems:

Hard and easy problems. IJCAI-95, pp.631–637, Montreal, 1995.

[18] O. Toubia, J. Hauser, and D. Simester. Polyhedral methods for adaptive choice-

based conjoint analysis. TR 4285-03, Sloan School of Mgmt., MIT, 2003.

[19] T. Wang and C. Boutilier. Incremental utility elicitation with the minimax regret

decision criterion. IJCAI-03, pp.309–316, Acapulco, 2003.

[3] C. Boutilier. A POMDP formulation of preference elicitation problems. AAAI-02,

[20] M. Weber. Decision making with incomplete information. Eur. J. Op. Res., 28:44–

pp.239–246, Edmonton, 2002.

57, 1987.

[4] C. Boutilier, F. Bacchus, and R. I. Brafman. UCP-Networks: A directed graphical

representation of conditional utilities. UAI-01, pp.56–64, Seattle, 2001.

[5] C. Boutilier, R. Patrascu, P. Poupart, D. Schuurmans. Constraint-based optimiza-

tion with the minimax decision criterion. CP-2003, pp.168–182, Kinsale, 2003.
[6] C. Boutilier, T. Sandholm, and R. Shields. Eliciting bid taker non-price prefer-

ences in (combinatorial) auctions. AAAI-04, pp.204–211, San Jose, CA, 2004.

[21] C. C. White, III, A. P. Sage, and S. Dozono. A model of multiattribute deci-
IEEE SMC,

sionmaking and trade-off weight determination under uncertainty.
14(2):223–229, 1984.

