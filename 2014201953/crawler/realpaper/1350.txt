A  L I SP  MACHINE  W I TH  VERY  COMPACT  PROGRAMS 

Session  25  Hardware  and  Software 
for  A r t i f i c i al 

Intelligence 

Xerox  c o r p o r a t i o n,  Palo  A l to  Research  center 

Palo  A l t o,  C a l i f o r n ia  94304 

L.  Peter  Deutsch 

A b s t r a ct 

The  machine  language  is  a 

This  paper  presents  a  machine  designed  f or 
compact  r e p r e s e n t a t i on  and  r a p id  execution 
of  LISP  programs. 
f a c t or  of  2  to  5  more  compact  than 
S-expressions  or  c o n v e n t i o n al  compiled  code, 
and  t h e . c o m p i l er  is  extremely  s i m p l e. 
encoding  scheme 
data  as  w e ll  as  program. 
provides 

The  machine  a l so 
f or  u s e r - d e f i n ed  data  s t r u c t u r e s. 

is  p o t e n t i a l ly  a p p l i c a b le  to 

The 

I n t r o d u c t i on 

T h is  mismatch 

implementor  of 

time  r a t h er  than 

r e c u r s i ve  procedures,  or 

t he  usual  software  s o l u t i o ns  to 

languages  designed 
i n f o r m a t i o n. 

Pew  e x i s t i ng  computers  permit  convenient  or 
e f f i c i e nt 
implementation  of  dynamic  storage 
a l l o c a t i o n, 
operations  on  data  whose  type  is  represented 
e x p l i c i t ly  at  run 
determined  at  compile  t i m e. 
between  machine  and  language  design  plagues 
every 
f or 
manipulation  of  s t r u c t u r ed 
Neither  of 
t h is  problem 
I n t e r p r e t i ve  systems  are  easy  to  b u i ld  and 
f l e x i b l e,  but 
compilers  which  approach  t he  e f f i c i e n cy  of 
those 
w r i te  and  o f t en  f o r ce  t he 
user) 
language 
e f f i c i e n c y.  On  many  machines  compiled  code 
a l so  occupies  at  l e a st  as  much  space  as  a 
s t r u c t u r ed  r e p r e s e n t a t i on  of 
program. 

(and 
to  s a c r i f i ce  v a l u a b le  but  expensive 

is  e n t i r e ly  s a t i s f a c t o r y. 

languages  are  hard  to 

f or  conventional 

i n t r i n s i c a l ly 

i n e f f i c i e n t; 

implementor 

t he  sake  of 

t he  source 

f e a t u r es 

f or 

language  was 

the  machine  to  t he 

t h e ir  major 
This  approach  of 

An  a l t e r n a t i ve  approach  to  t h is  problem  is 
to  design  machines  whose  code  s t r u c t u re  more 
c l o s e ly  resembles 
t h at  of 
programming  language(s). 
t a i l o r i ng 
f i r st  used  in  t he  Burroughs  B5000  and 
successor  machines,  which  were  designed  to 
execute  ALGOL  60  programs.'  In  recent  years, 
the  a v a i l a b i l i ty  of  microprogrammed 
processors  and  the  c o n t i n u i ng  d e c l i ne 
cost  of  processor  hardware  and  design  have 
prompted  s e v e r al  experiments  of  t h is  s o rt  at 
u n i v e r s i t i e s*  and  at  l e a st  one  successful 
experiment  by  a  l a r ge  company*  and  one 
unsuccessful  new  commercial  v e n t u r e .3 

in  the 

BBN-LISP  is  an 

The  present  paper  describes  a  machine  design 
f or  e f f i c i e nt  r e p r e s e n t a t i on  and  execution 
of  BBN-LISP  programs. 
i n t e r a c t i ve  system  developed  from  the  L i sp 
language.*  10  Readers  u n f a m i l i ar  w i th  LISP 
should  c o n s u lt  weissman's  e x c e l l e nt  p r i m e r5; 
some  d e t a i ls  p a r t i c u l ar  to  BBN-LISP  appear 
in  t he  next  s e c t i o ns  of  t h is  paper. 
complete  and  w e l l - m a i n t a i n ed  but  voluminous 
reference  manual 
a v a i l a b l e ."  The  machine  design  presented 
here  w i ll  be  r e f e r r ed  to  as  MicroLISP,  a 
name  intended  to  connote  both  code 
compactness  and  p o s s i b le  microprogrammed 
implementation. 

f or  BBN-LISP  is  a l so 

A 

(PARC) 

Data  Types 

to 

l i s t, 

LISP  has  many  data  types  ( e . g. 
s y m b o l ic  a t o m, 
i n t e g e r)  b ut  no  d e c l a r a t i o n s. 
The  usual  implementation  of  languages  w i th 
t h is  property  a f f i x es  a 
tag  to  each  datum  to 
i n d i c a te  i ts  t y p e, 
in  LISP,  however,  t he  , 
vast  m a j o r i ty  of  data  are  p o i n t e rs 
l i s ts 
or  atoms,  and  it  would  be  wasteful  to  leave 
room  f or  a  f u ll  word  plus  tag  (the  space 
needed  f or  an  i n t e g er  datum, 
in 
f or  example) 
every  place  where  a  datum  can  appear  such  as 
the  CAR  and  CDR  of  l i st  c e l l s. 
Consequently, 
p o i n t e r; 
referenced  i n d i r e c t l y. 
in  quanta,  and  each  quantum  holds  data  of 
only  one  t y p e,  so  what  type  of  o b j e ct  a 
given  p o i n t er  references 
of 
t he  o b j e c t 's  address, 
i t s e l f. 

i n t e g e r s,  s t r i n g s,  e t c.  are  a ll 

in  BBN-LISP  every  datum  is  a 

Storage  is  a l l o c a t ed 

t he  p o i n t er 

f u n c t i on 

j u st  a 

is 
i . e. 

the 

This 

(such  as  PLUS, 

leads  to  f r e q u e n t, 

from  -1536  to  +1535 

is  t h at 
f u n c t i on  which  produces  a 

The  c h i ef  drawback  of  t h is  scheme 
every  b u i l t - in 
number  as  a  r e s u lt 
a d d i t i on  f u n c t i o n)  must  a l l o c a te  a  word  to 
hold  t he  r e s u l t. 
time-consuming  garbage  c o l l e c t i o n s. 
BBN-LISP  circumvents  t h is  problem  f or  t he 
most  p a rt  by  permanently  s t o r i ng  a ll  the 
integers 
in  consecutive 
c e l ls  and  j u st  r e t u r n i ng  a  pointer  to  one  of 
these  c e l ls 
in  t h is 
range, 
In  MicroLISP,  which  is 
reasonably  e f f i c i e nt  numerical 
data  on  t he  stack 
v a r i a b le  bindings)  c a r ry  a  type  t ag 
i d e n t i f y i ng  them  as 
numbers,  or  p o i n t e r s. 
numerical  c a l c u l a t i o ns  can  take  place 
w i t h o ut  any  consumption  of  a l l o c a t ed  space. 

language, 
(temporary  r e s u l ts  and 

r a t h er  than  a l l o c a t i ng  a  new  c e l l. 

if  a  numerical  r e s u lt 

intended  as  a 

In  t h is  way, 

i n t e g e r s, 

f l o a t i ng  p o i nt 

long 

is 

f a c i l i t y,  since 

includes  such  a 

No  e x i s t i ng  LISP  system  permits  t he  user  to 
define  h is  own  packed  data  s t r u c t u r e s. 
MicroLISP 
it 
can  be  made  inexpensive  when  implemented  in 
the  machine  language  and  since  i ts  absence 
from  LISP  is  one  of  the  reasons  most 
f r e q u e n t ly  c i t ed 
languages 
The  d e t a i ls  are  presented  in  Appendix  A, 
since  t h ey  are  somewhat  p e r i p h e r al 
r e st  of 
is  worth  n o t i ng 
the  scheme  could  be  implemented  w i t h in 
BBN-LISP  and  even  lends 
c o m p i l a t i on  in 

f or  complex  symbolic  computation. 

i t s e lf 
the  usual  case. 

f or  choosing  other 

to  e f f i c i e nt 

t h is  paper. 

to  t he 

t h at 

It 

C o n t r ol  and  Binding  S t r u c t u re 

MicroLISP  uses  a  s i n g le  stack  s t r u c t u re 
both  c o n t r ol  and  v a r i a b le  b i n d i n g s, 
e s s e n t i a l ly  as  described  in  a  recent  paper.1 
A  f u n c t i on  c a ll  a l l o c a t es  a  "basic  frame" 
f or  t he  arguments  and  a  "frame  e x t e n s i o n" 
f or  c o n t r ol 
values* 
f u n c t i on  name, 

i n f o r m a t i on  and  temporary 
The  basic  frame  contains  the 

the  argument  values 

f or 

697 

the 

i . e. 

i n f o r m a t i o n. 

frame  extension  and  a 

The  frame  extension  holds  a  p o i n t er 

f u n c t i on  and  a  b i n d i ng 
is  p r o v i d ed  through  a  p r i m i t i ve 

( b i n d i n g s ),  and  a  p o i n t er  to  t he  argument 
names. 
to  the  c a l l e r 's 
v a r i e ty  of  o t h er  bookkeeping 
The  FUNARG  c a p a b i l i ty  of  LISP  1.5, 
a b i l i ty  to  c o n s t r u ct  a  data  o b j e ct 
comprising  a 
environment, 
f u n c t i on  which  creates  an  "environment 
d e s c r i p t o r"  p o i n t i ng  to  a  s p e c i f i ed 
frame. 
As  long  as  t h e re  are  a c c e s s i b le  references 
to  t h is  d e s c r i p t o r, 
frame  continues  to 
Environment  d e s c r i p t o rs  a l so  a l l ow 
e x i s t. 
the  user 
to  c o n s t r u ct  cooperating  s e q u e n t i al 
processes 
t r e e - s t r u c t u r ed  r a t h er 
t he  Burroughs  B6500.1* 

the  stack  becomes 
in 

( c o r o u t i n e s ); 

l i n e a r,  as 

than 

t he 

languages, 
to 

f or  data  s t r u c t u r es  as  w e ll 

l i ke  most  programming 
two  kinds  of  accesses 

BBN-LISP, 
recognizes 
v a r i a b l e s:  " l o a d"  and  " s t o r e ".  T h is  d u a l i ty 
a c t u a l ly  e x i s ts 
(CAR-RPLACA,  GET-POT,  e t c .)  but 
t r e a t ed  s y s t e m a t i c a l l y.  MicroLISP 
systematizes  t h is  concept  by  a l l o w i ng  a 
f u n c t i on  to  have, 
d e f i n i t i o n s,  one  f or  t he 
c o n t e x t,  one  f or  t he  " s t o r e"  c o n t e x t. 
SET  f u n c t i on 
f i r st  argument 

is  extended  so  t h at 

two 
(normal) 

in  e f f e c t, 

" l o a d" 

is  n ot 

is  a 

l i st 

The 

the 

if 

( fn  a r gl 

. ..  argn) 

the 

r a t h er  than  a  v a r i a b l e, 
fn  is 
c a l l ed  in  " s t o r e"  mode  w i th  arguments  a r gl 
. ..  argn  and  newvalue 
(the  second  argument 
of  SET). 
obvious  way,  b ut 
A  more  u s e f ul 

SETQ  is  alsO  extended 

is  not  p a r t i c u l a r ly  u s e f u l. 

f u n c t i on  is 

f u n c t i on 

in  t he 

(SETFQ  (f  n  a r gl  . ..  argn)  newvalue) 

if 

in 

f or 

than 

l i n k ", 

which  quotes  t he  f u n c t i on  name  and  evaluates 
e v e r y t h i ng  e l s e. 
example, 

This  a l l o ws  RPLACA, 

to  be  d e f i n ed  as 

frame,  e t c. 

l i n k"  p o i n t er 

t h is  contains 

(LAMBDA  (X  Y) 

t he  c a l l er  p o i n t er  or 

in  t he  frame  extension 

to  cover  a p p l i c a t i on  of 

t he  v a r i a b le  is  unbound. 

t he  s p e c i al  value 
( In  f a c t, 

search  the  c u r r e nt  basic  frame, 
f or  a  b i n d i ng 
if  none 
the 

(SETFQ  (CAR  X)  Y>) -
The  semantics  of  v a r i a b l es  are  simple 
p r i n c i p l e: 
then  t he  c a l l e r 's 
of  a  v a r i a b le  w i th  t he  d e s i r ed  name; 
is  f o u n d,  c o n s u lt  the  " v a l ue  c e l l"  of 
v a r i a b l e; 
NOBIND, 
the  search  f o l l o ws  a  chain  through  an 
"access 
r a t h er 
" c o n t r ol 
FUNARGs.)  MicroLISP  (and  compiled  BBN  LISP) 
a c t u a l ly  use 
t h r ee  v a r i a t i o ns  of 
searching  s t r a t e gy  depending  on 
s i t u a t i o n. 
the  c u r r e nt 
r e l a t i ve 
known  to  t he  compiler  and  they  can  be 
accessed  by  i n d e x i n g. 
Searching  f or 
v a r i a b l es  which  are  set  at  t he  t op 
never  rebound 
compiler  d e c l a r a t i on  to 
s p e c i f ic  v a r i a b l es 
go  d i r e c t ly  to  the  value  c e l l.  Repeated 
searches 
once 
in 
MicroLISP  t he  search  always  occurs  at  t he 
time  of  t he 
repeated 

to 
to  bypass  t he  search  and 

is  p o i n t l e s s: 
t he  basic  frame  are 

f i r st  reference  and  is  n ot 

Searching 
f u n c t i on 
in 

f or  a  v a r i a b le  referenced  more  than 

f u n c t i on  are  w a s t e f u l; 

f or  t he  arguments  of 

is  time-consuming: 

l e v el  and 
t h e re  is  a 

f o r ce  references 

t h e r e a f t e r. 

in  a  given 

l o c a t i o ns 

t h is 
the 

t h e ir 

in 

In 

f or  t he  name, 

In 
t he  basic 

t he  basic  frame  contains  a  s i n g le 

(the  LNT;  see 
E i t h er  scheme  r e q u i r es  t h at  any 

In  both  BBN-LISP  and  MicroLISP,  a ll  v a r i a b le 
bindings  appear  in  the  b a s ic  frame. 
BBN-LISP  h a lf  of  each  word 
frame  is  reserved 
MicroLISP, 
p o i n t er  to  a  t a b le  of  names 
below). 
PROG  or  open  LAMBDA  which  does  n ot 
c o n s t i t u te  the  e n t i re  body  of  a  f u n c t i on  be 
made  a  separate  s u b f u n c t i o n,  since  PROG 
v a r i a b l es  are  bound  at  t he  time  t he  frame  is 
c r e a t e d, 
is  entered. 
The  MicroLISP  scheme  may  slow  down  f r ee 
v a r i a b le  searches,  since  a  name  t a b le  may 
not  be  in  core  any 
the  search 
advantages  are  t h at 
wants  to  scan  i t. 
it 
i n s e rt  t he  name  of 
each  v a r i a b le  at  f u n c t i on  e n t ry  t i m e,  and 
t h at  t he  e n t i re  word 
h o l d i ng  t he  b i n d i n g,  which 
a  few  t y pe  b i ts  elsewhere 
thus  be  a 

( w i th  t he  h e lp  of 
in  t he  frame)  may 
f u l l - w o rd  i n t e g er  or  r e al  number. 

longer  when 
Its 
is  not  necessary  to 

i . e.  when  the 

is  a v a i l a b le 

f u n c t i on 

f or 

Code  Design 

the 

j u st 

t h at 

in  the 

formats 

f r a c t i on 

(half  or  more)  of 

in  which  a 
t he  b i ts 

T h is  approach  tends 

t a b le 
f u n c t i o n - l o c al 

it  must  be  convenient  f or  any 

Conventional  machines  g e n e r a l ly  t a ke 
a t t i t u de 
i n s t r u c t i on  to  reference  any  word 
o v e r a ll  address  space. 
to  produce 
i n s t r u c t i on 
l a r ge 
are  devoted  to  a  memory  address.  MicroLISP 
takes  advantage  of  the  observed  f a ct  t h at  a 
given  LISP  f u n c t i on  references  r a t h er  few 
f u n c t i o ns  and  v a r i a b l es  and  t h e r e f o re  can 
make  do  w i th  very  short  addresses  which 
index  a  g l o b al 
(of  commonly  used 
f u n c t i o n s)  or  a 
l o c al  v a r i a b l es  and  l e ss  common  f u n c t i o n s ). 
Furthermore,  a  given  name 
used  as  e i t h er  a  f u n c t i on  or  a  v a r i a b l e,  not 
b o t h.  MicroLISP  tags  each  name  in  t he 
t a b l es  w i th  a 
e l i m i n a t es 
s t r u c t u re  as  a  s y n t a c t ic  d e v i c e,  and  tags 
f u n c t i o ns  w i th  an  argument  count,  which 
e l i m i n a t es  t he  need  f or  s u b l i s ts  as  scope 
d e l i m i t e r s. 
Thus  MicroLISP  code  is 
e s s e n t i a l ly  a  s t r i ng  of  b y t e - s i z ed 
i n s t r u c t i o n s, 
s-expression 
bytes  r e f e r e n ce  e i t h er  a  " g l o b al  name  t a b l e" 
(GNT)  or  a  " l o c al  name  t a b l e" 
(LNT)  as  j u st 
d e s c r i b e d. 

r e p r e s e n t i ng 
the  o r i g i n al 
in  p o s t f ix  f o r m,  where  most 

f u n c t i o n / v a r i a b le  f l a g,  which 

is  u s u a l ly  only 

t he  need  f or 

l e v e ls  of 

t a b le 

l i st 

(of 

i n t e r n al 

argument  names  come  f i r s t,  then 

The  " b i n d i n g"  of  a  f r ee  v a r i a b le  is  a 

free  v a r i a b l e s,  then  e v e r y t h i ng 

t r ue  b i n d i n g,  and  t he 

The  LNT  a c t u a l ly  has  a d d i t i o n al 
s t r u c t u r e: 
PROG  and 
e l s e. 
p o i n t er  to  the 
v a r i a b le  searching  a l g o r i t hm  uses  t h is 
knowledge: 
since  a ll  t he  b i n d i n gs  in  a 
given  frame  are  i d e n t i f i ed  by  a  s i n g le 
p o i n t er 
associated  LNT, 
t e ll 
v a r i a b l e,  and 
more  s t ep  to  o b t a in  t he  value 

from  the  t ag  if  t he  match  was  on  a 

from  t he  b a s ic  frame  to  t he 

t he  searching  process  can 

f r ee 
f o l l ow  t he  p o i n t er  one 

if  d e s i r e d. 

if  s o, 

l i ke  LISP  programs,  are 

MicroLISP  programs, 
s t r u c t u r ed  i n to  f u n c t i o n s. 
haB  a  header  which  gives  t he  expected  number 
of  arguments  and  t he  l e n g th  of 
t he  LNT.  The 
former  determines 
frame. 
e n t ry  p o i n t,  since  the  LNT  immediately 

l a t t er  determines  t he  f u n c t i o n 's 

t he  s i ze  of  t he  basic 

Each  f u n c t i on 

The 

f o l l o ws  t he  header  and  precedes  the  code, 
and  also  f i x es  the  range  of  b y te  values  t h at 
addresses  the  LNT: 
l a r g er  b y te  values 
address  t he  GNT,  a f t er  being  adjusted 
downward  by  t he  s i ze  of  t he  LNT. 
i t - b it 
Each  GNT  or  LNT  e n t ry  c o n s i s ts  of  a 
tag  and  a  datum  (pointer)  whose 
i n t e r p r e t a t i on  depends  on  t he  value  of  t he 
To  accommodate  the  usual  o r g a n i z a t i on 
t a g. 
of  memories  i n to  words,  each  NT  is  organized 
i n to  blocks  of  e n t r i e s: 
t he  arrangement  f or 
a  3 6 - b it  memory, 
f or  example,  appears  below. 

i n f o r m a t i on 

A  few  p r i m i t i ve  o p e r a t i o n s,  such  as 
r e t u r n i ng  from  a  f u n c t i o n,  cannot  be 
represented  by  f u n c t i on  c a l l s,  so  a  few  byte 
values  are  reserved  f or  them. 
These  are  the 
only  r e al  "opcodes"  in  MicroLlSP.  Some  of 
them  are  f o l l o w ed  by  displacements  or  other 
parametric 
in  the  next  byte  or 
b y t e s;  a  few  (STORE,  DSTORE)  are  followed  by 
an  o r d i n a ry  v a r i a b le  reference  which  is 
i n t e r p r e t ed  s p e c i a l l y. 
The  convention 
in 
the  opcodes, 
f o l l o w ed 
in  t he  examples  in  Appendix  B, 
and  also 
is 
t h at  upper-case  words  l i ke  STORE  represent 
opcodes; 
lower-case  words  represent 
parameter  b y t e s;  upper-case  words  in 
[ b r a c k e t s]  represent 
f u n c t i o n s; 
represent  references 

to 
references 
to  v a r i a b l e s. 

t he  d e s c r i p t i on  of 

lower-case  words 

in  brackets 

Data  Movement 
STORE, 

[ v] 

This  causes  the  t op  value  on  the  stack, 
A,  to  be  s t o r e d. 
depends  on 

The  i n t e r p r e t a t i on 

the  tag  of  v: 

i ' th  name 

The  a l g o r i t hm  f or  computing  t he  l o c a t i on  of 
the 
in  a  N  is  a t u a l ly  q u i te  simple 
and  only 
The  p o s s i b le  t ag  values  are  presented 
immediately  below  and  discussed 
f o l l o w i ng  paragraphs. 

i n v o l v es  a d d i t i on  and  s h i f t i n g. 

in  the 

CONST  GVAR 
FNO  FN1  FN2  FN3  FN4  FN5  FN6 
FN* 

FVAR 

IVAR 

the  most 

f u n c t i on  c a l ls  w i th 

Function  t ag  values  must  i n c l u de  t he  number 
of  s u p p l i ed  arguments; 
t he  datum  holds  the 
f u n c t i on  name.  The  tags  FNO  . ..  FN6 
represent 
common  argument  counts.  FN*  represents  a 
f u n c t i on  c a ll  w i th  more 
than  6  arguments: 
the  a c t u al  argument  count 
l a st  argument,  and  t he  machine  removes 
before  c o n s t r u c t i ng  t he  new  frame. 
The 
p r i m i t i ve  f u n c t i o ns  APPLY  and  APPLY*  provide 
t he  a b i l i ty  to  c a ll  a 
f u n c t i on  whose  name  is 
computed: 
d i r e c t ly  by  a  tag  v a l u e. 

is  not  represented 

is  s u p p l i ed  as  the 

t h is  a b i l i ty 

it 

t he  o ld 

f o ur  v a r i a b le 

frame  extension 

tags  represent  d i f f e r e nt 

f or  o b t a i n i ng  t he  value  of  the 
A ll  v a r i a b le  references 
in  pushing  t he  value  of 
the  end  of 
t he  c u r r e nt 

The 
s t r a t e g i es 
v a r i a b l e. 
e v e n t u a l ly  r e s u lt 
the  v a r i a b le  onto 
frame  e x t e n s i o n;  a  f u n c t i on  c a ll  severs  the 
a p p r o p r i a te  number  of  arguments 
from  the  end 
of 
f or  i n c o r p o r a t i on 
in  t he  new  b a s ic  frame.  CONST  (CONstant) 
simply  pushes  the  datum  i t s e l f.  GVAR 
(Global  VARiable)  pushes  t he  contents  of  the 
value  c e ll  of 
t he  v a r i a b le  whose  name  is  the 
datum,  or  t r a ps 
NOBIND. 
use  t he  datum: 
value  from  the  basic  frame,  where  N  is  the 
a c t u al  b y te  v a l u e. 
FVAR  (Free  VARiable) 
works  s i m i l a r l y,  b ut  takes  t he  value  as  a 
p o i n t er 
t he  p o i n t er 
has  not  been  s et  up,  a  stack  search  occurs 
f i r st  to 
the  p o i n t er 

if  the  value  c e ll  contains 
IVAR  (Indexed  VARiable)  does  not 

f i nd  the  nearest  b i n d i ng  and  set 

j u st  pushes  the  N'th 

t r ue  b i n d i n g; 

to  t he 

i t. 

to 

it 

if 

699 

in  t he  binding 

is  replaced  by 

in  t he  addressed  binding 

is 

IVAR,  GVAR: 

The  value 
Z. 
FVAR: 
The  value 
replaced  by  Z. 

CONST: 

E r r or 

( t r a p ). 

FNO  . ..  FN6: 

The  f u n c t i on  is  c a l l ed  at  i ts  " s t o r e" 
e n t ry  p o i nt  w i th  one  more  argument  than 
i ts 

t ag  s p e c i f i e s. 

FN*: 

f u n c t i on  is  c a l l ed  at  i ts  " s t o r e" 
(immediately  below  Z  on  t he 

The 
entry  p o i nt  w i th  one  more  argument  than 
the  count 
stack)  s p e c i f i e s. 

DSTORE, 

[ v] 

Performs  t he  same  a c t i on  as  STORE 
followed  by  POP. 

ADDRX,  n1,  n 2;  ADDRXX,  n1,  n2  n3 

These  serve  to  increase  the  range  of 
addresses. 
parameter  is  i n t e r p r e t ed  as  an  address 
in  the  LNT  or  GNT  as  a p p r o p r i a t e. 

The  2-byte  or  3-byte 

POP 

Removes  the  top  item  from  the  stack. 

COPY 

Pushes  t he  t op  value  on  t he  stack  onto 
the  s t a c k, 
SELECTQ. 

only  apparent  use 

is  f or 

ARG 

If  N  is  t he  t op  v a l ue  on  t he  stack 
i n t e g e r ), 
replaces  N  by  the  N ' th 
argument  of 

f u n c t i o n. 

t he 

(an 

SETARG 
If  Z 
item 
argument  of 
removes  N  from  the  stack 
squeezing  N  o u t ). 

is  t he  t op  item  and  N  is  t he  next 
(an 

i n t e g e r ),  s e ts  the  N ' th 

t he  f u n c t i on  to  Z  and 

(but  r e t a i ns  z, 

is 

followed  by  a  parameter 

jump  opcodes  are 

i n t e r p r e te  as  a  2's 

C o n t r ol 
The 
b y t e,  d,  which 
complement  address  displacement  r e l a t i ve 
t he  opcode 
adjusted  by  +3 
small  v a l u e s. 
reserved  to 
byte 
displacements. 

is 
to  e l i m i n a te  meaningless 
A  few  values  of  6  are 

l a r g er  range  of 

If  p o s i t i v e,  d 

to  provide  a 

i t s e l f. 

i n d i c a te  extension  i n to  a  second 

to 

JUMP,  d 

Always 
i n s t r u c t i o n. 

jumps  d  b y t es  r e l a t i ve  to  the 

TJUMP,  d 

Tests  the  t op  value  on  the  stack  and 
pops  i t; 
if  t he  datum  was 
t r ue 

(not  NIL)  . 

jumps 

then 

FJUMP,  d 

The 

inverse  of  TJUMP 

(jumps 

if  N I L ). 

NTJOMP,  d 

jump  f a i ls 

Like  TJUMP,  but  pops  the  value  o n ly  if 
t he 
is 
f or  COND's  w i th  clauses  l a c k i ng  a 
consequent,  where  t he  value  of 
becomes 

the  t e st 
t r u e. 

t he  v a l ue  of 

t he  COND  if 

is  N I L ). 

(value 

This 

TYPEJUMP, 

t,  d 

The  bottom  b i ts  of  t  g i ve  a  t y pe  number; 
the  t op  b it  of 
jumping  on  t r ue 
The  t op  value  on  the  stack  is 
or  f a l s e. 
removed, 
jump  or  no  jump  depending 
on  i ts  t y p e. 

t  s e l e c ts 

then 

t he  c u r r e nt 

GOTOSELF 
C a l ls 
by 
r e p l a c i ng 
PROGITER-type  c a l l. 

j u m p i ng 

to 

f u n c t i on 

r e c u r s i v e ly 

i ts  e n t ry  p o i nt  a f t er 

t he  a r g u m e n t s, 

i . e.  a 

RETURN 

Returns  t he  t op  value  on  t he  stack  as 
the  value  of  t he  c u r r e nt 

f u n c t i o n. 

Conclusions  and  Comments 

to 

the 

is  due 

ITS  L I S P1 1, 

former  advantage 

in  BBN-LISP  which  r e s u lt  in 

is  about  o n e - t h i rd  t he  s i ze  of 

MicroLISP  programs  are  c o n s i s t e n t ly 
o n e - t h i rd  to  o n e - f o u r th  t he  s i ze  of  BBN-LISP 
compiled  programs,  and  t he  NicroLISP 
compiler 
corresponding  p a rt  of  the  BBN-LISP  compiler. 
Some  of  t he 
design  d e c i s i o ns 
bulky  code: 
remored  to  produce  code  o n e - t h i rd  t he  s i ze 
of  BBN-LISP  or  only  o n e - t h i rd 
than 
MicroLISP.  However, 
t h is  compactness  is 
achieved  at  t he  expense  of  many  of 
a t t r a c t i ve  f e a t u r es  of  BBN-LISP: 
observations  about  compilers 
i n t r o d u c t i o n, 
e x i s t s, 
However,  a  microprogrammed  implementation 
and  a  software 
p r e p a r a t i o n. 

t h e re  are  no  comparable  t i m i ng  d a t a. 

since  no  MicroLISP  machine 

i n t e r p r e t er  are  in 

f or  example, 

r e c a ll  t he 

l a r g er 

in  t he 

t he 

is 

MicroLISP  has  been  presented  as  a  machine 
language,  but  s l i g ht  a d d i t i o ns  would  permit 
i n to 
unambiguous  decompilation 
t he  o r i g i n al 
S-expression 
f or  e d i t i n g. 
This  approach  is 
o n ly  f e a s i b le 
in  general  when  t he  machine 
language  c l o s e ly  resembles 

t he  source  code: 

700 

f or  c o n v e n t i o n al  machines  must 

compilers 
rearrange  and  suppress  the  o r i g i n al  program 
s t r u c t u re  e x t e n s i v e ly 
e x e c u t i o n. 
g e n e r a l ly  do  r e c o n s t r u ct  t he  source  t e xt 
from  an  i n t e r m e d i a te  r e p r e s e n t a t i o n,  o f t en 
u s i ng  t h e ir  knowledge  of 
s t r u c t u re  to  advantage 
i n d i c a te  depth  of 

I n t e r p r e t i ve  systems,  of  course, 

to  achieve  e f f i c i e nt 

l o g i c al  n e s t i n g ). 

i n d e n t i ng  to 

t he  program 

( e . g. 

f or 

j u st 

to  spend 

time  contemplating 

l a r g er  primary 

type  of  design 

f e e l i ng  t h at  t he 

from  t he  A r t i f i c i al 

to  t r a d i t i o n al  machine  and 

f a c t o rs  prompted  t he  author  to 

Several 
i n v e s t i g a te  the 
presented.  One  was  t he 
constant  demands 
I n t e l l i g e n ce  community 
memories  were  based  as  much  on 
d i s i n c l i n a t i on 
a l t e r n a t i v es 
program  o r g a n i z a t i on  as  on  a  r e al  need  to 
deal  w i th 
i n f o r m a t i o n. 
Another  was  the  hope,  based  on  an  e a r l i er 
experience  w i th  a  small  computer7, 
t h at  a 
LISP  minicomputer  could  p r o v i d e,  at  a 
f r a c t i on  of 
now  a v a i l a b le  only 
through 
time-shared  i n s t a l l a t i o n s, 
announcement 
encouraging 

f or  a  desktop  BASIC  machine 

l a r g er  amounts  of 

t h is  r e g a r d. 

t he  k i nd  of 

f a c i l i t i es 
l a r g e,  expensive 
A  recent  product 
is 

the  c o s t, 

in 

l e ss  expensive  LISP 

f or 

t he  user 

f a c i l i t i es 

R e a l i z i ng  t h is  hope  f or 
systems  r e q u i r es  compressing  t he  data  as 
w e ll  as  the  program.  One  approach  is  to 
provide 
to  d e f i ne 
h is  own  packed  data  s t r u c t u r e s;  a  simple 
proposal  along  t h is 
appendix. 
Another 
" c o m p i l i n g"  data 
programs.  A  c a r e f ul  reading  of 
MicroLISP  design  r e v e a ls 
scheme  works  on  a r b i t r a ry  l i s t s,  not 
The  e s s e n t i al  ideas  a r e: 
programs. 

l i ne  is  described 
is 

in  a  manner  s i m i l ar  to 

to  consider 

t h at 

the 

j u st 

t he  encoding 

in  an 

f o r c i ng 

E l i m i n a t i ng  CDR  p o i n t e rs  by 
l o g i c a l ly  successive  data  to  be 
p h y s i c a l ly  consecutive; 
E l i m i n a t i ng  non-atomic  CAR  p o i n t e rs  by 
a s s o c i a t i ng  an  operand  count  w i th  each 
o p e r a t o r,  so  t he  end  of  a  s u b l i st 
(subexpression) 
i m p l i c i t l y; 
Compressing  atoms  by  use  of  t a b l e s,  on 
t he  assumption  t h at  some  few  atoms 
( d i f f e r e nt 
account 

f or  d i f f e r e nt  contexts)  w i ll 

t he  r e f e r e n c e s. 

f or  most  of 

is  defined 

These  ideas  are  a p p l i c a b l e,  s e p a r a t e ly  or 
t o g e t h e r, 
to  data  as  w e ll  as  programs,  and 
o f f er  a  p a r t i al  s o l u t i on  to  the  "address 
e x p l o s i o n"  problem; 
addresses  to  become  longer  and  longer  as 
v i r t u al  memories  become 
l a r g e r,  so  t h at  one 
winds  up  paying  f or  many  b i ts  of  memory  used 
to  h o ld 

l a r g e ly  u n i n t e r e s t i ng 

t he  tendency  f or 

l i n k s. 

Acknowledgements 

idea  of  using  v e ry  s h o rt  i n s t r u c t i o ns 

The 
and  accessing  t he  e n t i re  environment  through 
a  t a b le  o r i g i n a t ed 
Burroughs  B5000. 
contemplate  t he  present  design  by  some 
suggestions  of  B u t l er  Lampson  and  Charles 
Thacker  of  xerox  PARC. 
The  idea  of  a  STORE 
e n t ry  to  a  f u n c t i on  is  due  to  Alan  Kay,  a l so 
of  PARC. 

in 
The  author  was  i n s p i r ed  to 

t he  design  of  t he 

Appendix  A:  Deer-Defined  Data  s t r u c t u r es 

Appendix ,B; 

16-  AND  3 2 - B it  Words 

f a c i l i ty 

(fixed)  number  of  p o i n t e r s, 

The  data  s t r u c t u re  d e f i n i t i on 
allows  the  user  to  d e f i ne  classes  of  objects 
which  are  e s s e n t i a l ly  g e n e r a l i z a t i o ns  of 
l i st  c e l l s. 
L i st  c e l ls  have  two  components, 
which  are  p o i n t e r s;  u s e r - d e f i n ed  s t r u c t u r es 
may  have  any 
i n t e g e r s,  and  r e a ls 
numbers).  CONS  c a l l ed  w i th  fewer  than  two 
arguments 
w i th  NIL: 
values  f or  h is  own  s t r u c t u r e s. 
corresponding  g e n e r a l i z a t i o ns  of  CAR  and  CDR 
f or  e x t r a c t i ng  components 
s t r u c t u r e s,  and  of  RPLACA  and  RPLACD  f or 
r e p l a c i ng  components. 

f i l ls 
t he  user  may  s p e c i fy  t he  d e f a u lt 

the  missing  components 

( f l o a t i ng  p o i nt 

There  are 

from  user 

in 

is  always  awkward  to 

is  not  q u i te 
is  t oo  many. 

It 
implement  systems 
i n v o l v i ng  p o i n t e rs  on  machines  w i th  16-  or 
3 2 - b it  words,  since  16  b i ts 
enough  f or  a  p o i n t er  but  32 
However,  a  s l i g h t ly  d i f f e r e nt  a p p l i c a t i on  of 
the  basic  idea  of  MicroLISP 
s t a t i s t i c al  knowledge  about  the  topology  of 
data  s t r u c t u r es 
to  reduce  the  number  of  b i te 
r e q u i r ed  to  represent  them)  can  produce  a 
u s e f ul  256K  address  space  on  a  3 2 - b it 
The  idea  is  to  make  u  subspaces, 
machine. 
each  of  64K 
using  g l o b al  conventions 
subspace  number  when  f o l l o w i ng  any  given 
p o i n t e r. 

( r e q u i r i ng  1 6 - b it  p o i n t e r s ),  and 

to  supply  the 

(the  use  of 

The  user  d e f i n es  a  new  c l a ss  of  s t r u c t u r es 
by  c a l l i ng 

(STRUCTURE  number-of-pointers 
number-of-integers  number-of-reals 
i n i t i a l - v a l u e - l i s t ). 

STRUCTURE  r e t u r ns 
" t e m p l a t e" 
The  template  serves  t h r ee  purposes. 

f or  o b j e c ts  of  t he  new  c l a s s. 

(a  p o i n t er  to)  a 

F i r s t, 

(STRUCPARS 

t e m p l a t e) 

the 

l i st  of 
to 

t he  c a ll  of  STRUCTURE  which 

r e t u r ns  a 
arguments 
created  the  template.  Second,  applying  the 
template  as  a 
component  values  creates  a  new  o b j e ct  of  the 
c l a s s,  e . g. 
by 

if  complex  numbers  are  defined 

f u n c t i on  to  a  l i st  of 

(PUTD  (QUOTE  COMPLEX) 

(STRUCTURE  0  0  2) ) , 

(STRUCP  any-datum) 

(ELTR  object  component-number  f i r s t - b it 

then  (COMPLEX  1  -1)  would  create  the  complex 
number  1-i.  Third,  there  is  a  function 
which  returns  the  template  if  any-datum  is 
an  object  from  a  user-defined  class  and  NIL 
otherwise. 
The  generalized  extraction  function 
number-o f - b i t s) 
returns  a  component  selected  by  positions 
components  are  numbered  from  0,  f i r st 
pointers,  then  integers,  then  reals. 
F i r s t - b it  and  number-of-bits  are  only  legal 
if  the  component  is  an 
if  omitted, 
a  f u ll  word  is  fetched.  The  corresponding 
replacement  function  is 

integer; 

(SETFQ 

(ELTR 

. . .)  v a l u e ), 

c o n s i s t e nt  w i th  t he  MicroLISP  n o t i on  of 
" l o a d"  and  " s t o r e"  e n t r i es  to  a  f u n c t i o n-
For  e f f i c i e n c y, 

(ELTFN  template  component- 
number-of-bits) 
f u n c t i on 

f  such  t h at 

r e t u r ns  a 

f i r s t - b it 

(f  o b j e c t) 
is  e q u i v a l e nt 

to 

(ELTR  o b j e ct  component-number 
number-of-bits) 

f i r s t - b it 

t h at 

is  of 

t he  o b j e ct 

provided 
t he  class 
given  by  t he  t e m p l a t e,  or  at  l e a st  of  a 
c l a ss  whose  components  up  to  and  i n c l u d i ng 
the  s p e c i f i ed  one  a ll  have  the  same  types  as 
the  corresponding  components  of 
g i v e n. 
s p e c i al  data 
works  as  e f f i c i e n t ly  as  CAR  and  CDR;  CAR  is 
a c t u a l ly 
ELTFN  (STRUCTURE  2)  1)  and  CDR  as 
(ELTFN  (STRUCTURE  2)  0) . 

type  c a l l ed  " s e l e c t o r"  which 

implemented  as 

t he  f u n c t i on  f 

In  MicroLISP, 

t he  class 

is  of  a 

The  software  MicroLISP 
implementation 
c u r r e n t ly  under  c o n s t r u c t i on  uses  the 
f o l l o w i ng  subspaces: 
atom  print-names,  and  t he  atom  hash  t a b l e; 
(C)  arrays  and  compiled  code; 
l i s t s, 
atom  heads,  and  other  d e s c r i p t o r s.  The 
subspace  number  f or  p o i n t e rs  from  each  of 
these  areas 

is  supplied  as 

(A)  stack; 

f o l l o w s: 

(D) 

(B)  s t r i n g s, 

Stack 

(A); 

l i n k" 
The  " c o n t r ol  l i n k"  and  "access 
r e f er  to  space 
the  "resumption 
p o i n t"  c a r r i es  an  e x p l i c it  subspace 
d e s i g n a t o r,  since 
to  an 
S-expression 
(space 
p o i n t e rs  are  to  space 

(D)),  compiled  code 
( C ) ),  or  machine  code;  a ll  other 

it  may  r e f er 

(space 

(D)  . 

S t r i n g s,  print-name s 

There  are  no  p o i n t e rs  in 
spaces. 

these 

Atom  hash  t a b le 

A ll  p o i n t e rs  are  to  atoms, 
(D). 

Arrays,  compiled  code 

A ll  p o i n t e rs  are  to  space 

A ll  p o i n t e rs  are  to  space 

L i s ts 

Atom  heads 

in  space 

(D)  . 

(D). 

(D)  ; 

CAR  (value  c e l l)  and  CDR  (property 
l i s t)  are  to  space 
d e f i n i t i on  c a r r i es  an  e x p l i c it 
f or  t he  same 
subspace  designator, 
reason  as  the  resumption  p o i nt  on 
the  s t a c k; 
the  print-name  p o i n t er 
is  to  space 

( 6 ). 

t he 

S t r i ng  d e s c r i p t o rs 

These  p o i nt  to  space 

Environment  d e s c r i p t o rs 

These  p o i nt  to  space 

Array  d e s c r i p t o rs 

(B). 

(A). 

These  p o i nt  to  space 

( c ). 

This  scheme  works  as  long  as  t he  number  of 
d i f f e r e nt  a r r a y s,  environments  w i th 
d e s c r i p t o r s,  and  s t r i n gs 
t oo  l a r g e. 
When  these  numbers  become  l a r g e,  a  great 
deal  of  space 
u n i n t e r e s t i ng  d e s c r i p t o r s. 

(D)  becomes  devoted  to 

is  not 

These  examples  compare  t he  s - e x p r e s s i o n, 
the 
MlcroLISP  code,  and  the  PDP-10  code  produced 
by  t he  present  BBN-LISP  c o m p i l e r. 
The 
MicroLISP  code  assumes  t h at  a  p o i n t er 
occupies  2  bytes  and  t h at  H  bytes  f i ll  a 
word. 
f or  t he  compiled 
codes  do  not  i n c l u de  1  word  of  header  f or 
MicroLISP  and  2  words  f or  BBN-LISP 
r e s p e c t i v e l y. 

The  s i ze  f i g u r es 

702 

14  J . F.  R u l i f s o n,  J.A.  Derkson,  R.A. 

Waldinger 
QA4:  A  Procedural  Calculus 
Reasoning 
A r t i f i c i al 
Note  73 
Stanford  Research 
Menlo  Park,  C a l i f o r n ia 
Nov.  1972 

I n s t i t u te 

f or  I n t u i t i ve 

I n t e l l i g e n ce  center  Technical 

eferences 

I 

' 

Daniel  G.  Bobrow,  Ben  Wegbreit 
A  Model  and  Stack  Implementation  of 
M u l t i p le  Environments 
BBN  Report  #2334 
March  1972 

Burroughs  B5500 
System  Reference  Manual 
Burroughs  Corporation 
196* 

Information  Processing 

3  computer  Operations 

Incorporated 

GEMINI  Reference  Manual 
( d i s t r i b u t ed 
i n t e r n a l l y) 

4  J.  Moore,  D.  S t e i n g a r t,  H.R.  zaks 

A  Firmware  APL  Time-Sharing  System 
1971  SJCC 

5  Clark  Weissman 
LISP  1.5  Primer 
Dickenson  Publishing  company 
1967 

• 

R.  Rice  et  a l. 
SYMBOL  -  A  Major  Departure  from  Classic 
Software-Dominated  Von  Neumann  Computing 
Systems 
1971  SJCC 

7  E.C.  Berkeley,  L.P.  Deutsch 

The  LISP  Implementation  f or  the  PDP-1 
Computer 
in  the  Programming  Language 
LISP: 
I ts  Operation  and  A p p l i c a t i o ns 
M.I.T.  Press 
1966 

• 

9 

Hewlitt-Packard  Corporation 
advertisement 
Feb.  1973 

in  S c i e n t i f ic  American 

John  McCarthy 
Recursive  Functions  of  Symbolic 
Expressions  and  T h e ir  Computation  by 
Machine 
Communications  of  t he  ACM 
A p r il  1960 

10  John  McCarthy  et  a l. 

LISP  1.5  Programmer's  Manual 
M . I . T.  Press 
1962 

11  M . I . T.  P r o j e ct  MAC  A r t i f i c i al 

I n t e l l i g e n ce  Laboratory 
no  a v a i l a b le  reference 

12  E.A.  Hauck,  B.A.  Dent 

Burroughs  B6500/B7500  Stack  Mechanism 
1968  SJCC 

13  W.  Teitelman  et  a l. 

BBN-LISP  TENEX  Reference  Manual 
B o lt  Beranek  and  Newman  I n c. 
Cambridge,  Mass. 
l a t e st  r e v i s i o n:  Feb.  1972 

703 

