Session  3  Theorem  Proving  and 
Logic: 

I 

A  MAN-MACHINE  THEOREM  PROVING  SYSTEM 

W.  W.  Bledsoe  and  Peter  B r u e ll 

University  of  Texas,  Austin 

is  w r i t t en  in  LISP  and  is 

with  the  mathematician.  The  theorem  prover,  which  is 
described  in  Section  3, 
based  on  IMPLY  (see  Section  4  of 
given  in 
the  a b i l i ty  to  prove 
theorems  on  i ts  own;  human  intervention  is  used  to 
increase  i ts  power  and  speed  up  proofs. 
The  DETAIL  Feature. 

[1])  and  the  methods 

[1]  and 

It  has 

[ 2 ], 

One  of  the  p r i n c i p al  d i f f i c u l t i es  with  most  man-

machine  provers  is  in  knowing  when  and  how  the  man 
should  intervene.  F i r s t ly  the  human  may  have  trouble 
in  reading  and  comprehending  the  text  on  the  scope, 
and  secondly,  he  doesn't  know  when  the  machine  should 
be  helped,  and  how  much  he  should  do.  He  does  not 
want  to  make  a  l ot  of  unneeded  e n t r i e s,  and  if  he 
makes  a  mistake  he  wants  to  easily  recover. 

The 

f i r st  d i f f i c u l ty 

is  solved 

in  the  system 

described  here  by  employing  the  human  oriented  lan(cid:173)
guage  IMPLY  and  in  displaying  the  theorem  on  the  scope 
in  a  " p r e t t y - p r i n t" 
below. 

further  described 

form.  This  is 

it 

if 

The  second  d i f f i c u l ty  is  handled  by  a  procedure 

is  w e l l,  but 

theorem  (or  subgoal). 

it  p r i n ts  on  the  scope  the  statement  of  the 

to  f i r st  t ry  to 
it  succeeds, 
f a i ls  w i t h in  a  prescribed 

which  allows  the  computer  by  i t s e lf 
prove  the 
If 
a ll 
l i m i t, 
theorem  and  the  word  "FAILURE"  and  awaits  a  command 
from  the  user. 
then  it  w i ll 
(again)  with  i ts  proof  to  the  point  where  the 
proceed 
current  goal 
it 
p r i n ts  on  the  scope  the  statement  of  the  new  subgoal 
for  which  it  f a i l ed  and  stops,  and  the  whole  process 
can  be  repeated. 

If  he  commands  "DETAIL" 

into  subgoals.  At 

that  point 

then 
time-

is  s p l it 

At  any  of  these  stops  the  user  can  employ  a 

v a r i e ty  of  other  commands  such  as  DEFN,  PUT,  USE,  etc. 
(which  are  described  below) 
to  help  with  the  proof. 
In  t h is  way  he  can  easily  isolate  the  d i f f i c u l ty  and 
make  only  those  entries  needed  by  the  machine  in  i ts 
proof. 
Indeed  he  can  s t a rt  the  machine  on  the  proof 
of  a  theorem  without  enough  hypotheses  (reference 
theorems)  and  supply 
needed 
in  the  proof. 

them  only  when  and 

if  they  are 

The  following  is  a  symbolic  example  for  explain(cid:173)

ing  the  DETAIL  process.  Real  examples  are  given  in 
Section  4. 

(Austin) 

ABSTRACT:  This  paper  describes  a  man-machine  theorem 
proving  system  at  the  University  of  Texas 
which  has  been  used  to  prove  a  few  theorems  in 
general  topology.  The  theorem  (or  subgoal)  being 
proved 
is  presented  on  the  scope  in  i ts  natural  form 
so  that  the  user  can  easily  comprehend  it  and,  by  a 
series  of  i n t e r a c t i ve  commands,  can  help  with  the 
proof  when  he  desires.  A  feature  called  DETAIL  is 
employed  which  allows 
the  human  to  interact  only  when 
needed  and  only  to  the  extent  necessary  for  the  proof. 

The  program  is  b u i lt  around  a  modified  form  of 

IMPLY,  a  natural-deduction-like  theorem  proving 
technique  which  has  been  described  e a r l i e r. 

A  few  examples  of  proofs  are  given. 

1. 

Introduction. 

Some  workers  in  automatic  theorem  proving, 

i n(cid:173)

( if  ever)  before  machines  alone  can  prove 

cluding  the  authors,  believe  that  it  w i ll  be  many 
years 
d i f f i c u lt  theorems  in  mathematics.  Thus  some,  who 
hope  to  see  machines  used  as  p r a c t i c al  assistants  to 
pure  mathematicians,  have  redirected 
t h e ir  attention 
[3,  4,  5]  and  theorem 
to  man-machine  theorem  provers 
proof  checking  [6,  7,  B ]. 

The  present  paper  describes  a  man-machine  theo(cid:173)
rem  proving  system  at  the  University  of  Texas  which 
has  been  used  to  prove  a  few  theorems 
topology.  Our  system  is  organized 
way  as  those  of  Guard  [ 3 ],  Luckham  [ 4 ],  and  Huet  [ 5 ], 
but  with  many  major  differences.  For  example, 
Luckham  and  Huet  use  variations  of  Resolution  as 
t h e ir  p r i n c i p al  rules  of  inference  whereas  we  use  a 
modified  form  of  IMPLY 
tion-type  method. 

[ 1 ],  which  is  a  natural-deduc(cid:173)

in  general 

in  the  same  general 

Also  our  system  displays  formulas  on  the  scope 
in  a  n a t u r a l,  easy  to  read,  manner  and  has  available 
a  v a r i e ty  of  i n t e r a c t i ve  commands  the  user  can  employ 
to  help  with  the  proof.  Among  these  is  a 
called  DETAIL  which  allows 
when  needed  and  only  as  much  as  is  required  for  the 
proof. 

the  human  to  interact  only 

feature 

The  program  is  s t i ll 

As  yet  t h is  system  has  proved  no  new  theorem  in 
in  the  state  of  devel(cid:173)

topology. 
opment  and  It  w i ll  be  sometime  before  we  can  deter(cid:173)
mine  whether 
It  can  materially  help  a  mathematician 
prove  new  theorems. 

This  paper  describes 

the 

f a c i l i t y, 

the 

i n t e r(cid:173)

active  commands  available  to  the  user  mathematician, 
the  modified  version  of  IMPLY  which  is  used,  and 
gives  a  few  examples  of  proofs  of  theorems. 

2. 

The  F a c i l i ty  and  I n t e r a c t i ve  Commands. 

The  f a c i l i ty  consists  of  a  Datapoint  3300  ter(cid:173)
minal  connected  to  the  CDC  6600  computer  via  the  UT 
i n t e r a c t i ve  (time-sharing)  system  TAURUS 
mathematician  (the  user)  s i ts  at  the 
types 
in  a  theorem  to  be  proved  and  occasionally  helps  the 
program  w i th  the  proof  by  providing  information  he 
feels 
poses. 

is  needed  and  answering  questions  the  program 

terminal, 

[ 1 1 ].  A 

The  computer  program  consists  of  a  large  auto(cid:173)

matic  theorem  prover  and  a  subroutine  for  i n t e r a c t i ng 

56 

The  other  subgoals  of 

(3)  are  handled  s i m i l a r l y, 

using  other  hypotheses  from  H. 

Thus  the  very  d i f f i c u lt  problem  (1)  has  been  re­

duced  to  a  series  of  easier  problems  by  the  human 
action  (2)  and  some  machine  manipulations. 
is 
true  that  the  mathematician  is  required  to  provide 
the  most  d i f f i c u lt  step 
then  the 
computer  does  the  r e s t,  proving  a  series  of  smaller 
theorems  and  v e r i f y i ng  that  the  mathematician's 
choice  for  G  was  indeed  c o r r e c t, 
wrong  choice  at  (2)  he  might  want  to  intervene  l a t e r, 
backup,  and  t ry  a  d i f f e r e nt  value  for  G. 
though  quite  simple, 

The  PUT  feature, 

in  the  proof  but 

if  he  made  a 

It  alone  makes  a  tremendous  d i f f e r­
powerful  device. 
ence  in  the  number  of  theorems  the  computer  program 
can  prove. 

It 

is  a  very 

58 

If  commanded  the  program  keeps  a  record 

to  be  p r i n t e d. 
HISTORY. 
(history)  of  each  step 
including  steps  where  the  human  intervenes 
theorem, 
but  excluding  unproductive  steps.  This  history  can 
be  used  by  the  mathematician  l a t e r,  upon  the  command 
"RUN  HISTORY  N", 
without  i n t e r r u p t i o n,  and  to  t ry  if  desired  a 
d i f f e r e nt 

to  rerun  a ll  or  part  of  the  proof 

it  has  taken  in  the  proof  of  a 

l i ne  of  proof  at  any  step. 

3.  The. Machine  Prover 

The  prover  used  by  this  system  consists  mainly 
of  a  modified  form  of  IMPLY  (Section  4  of  [ 1 ] ),  with 
the  addition  of  REDUCE  (see  p.  57  of  [ 2 ] ),  and  other 
concepts  from  [2]  and  [ 1 7 ]. 

Two  of  the  p r i n c i p al  differences 

in  the  present 

that  IMPLY 

is  now  the  main  routine  (instead 

version  is 
of  CYCLE),  and  REDUCE  is  now  applied  inside  IMPLY. 
The  SPLIT  functions  (p.  56  of 
[2])  are  an  integral 
part  of  IMPLY  i t s e l f.  Also  IMPLY  has  been  given  a 
b r e a d t h - f i r st  search  capacity  (see  below),  and  the 
back-up  feature  (see  Footnote  11  of  [1])  has  been 
removed  and  replaced  by  a  human  back-up  c a p a b i l i t y. 
IMPLY. 
processes 
[9,  10]). 
rules  such  as 

formulas  in  t h e ir  " n a t u r a l" 
It  consists  p a r t i a l ly  of  a  few  rewrite 

IMPLY  is  a  natural  deduction  type  system  which 

form  (see  also 

It  also 

is  a  con(cid:173)

(Open  X),  (Open  

(Open  i n t e r i or  A), 

REDUCE  helps  convert  expressions  into  forms  which  are 
more  easily  provable  by  IMPLY. 
venient  place  to  store  facts  that  can  be  used  by  the 
machine  as  they  are  needed.  For  example  REDUCE  returns 
"TRUE"  when  applied  to  such  formulas  as  (Closed  C1ST 
A), 
etc. 
Forward  Chaining. 
It  seems  that  unrestrained  forward 
chaining  is  a  poor  idea  in  automatic  theorem  proving 
because  it  tends  to  produce  an  excessive  number  of 
useless  hypotheses 
versions  of  IMPLY  r e l i ed  heavily  on  backward  chaining. 
However, 
the  use  of  the  man-machine  system  (especially 
the  PUT  feature)  on  theorems  in  topology  has  brought 
to  our  attention  the  power  of  forward  chaining  in 
many  proofs,  especially  in  cases  where  the  chaining 
expression  is  a  ground  ( a ll  constant)  formula.  We 
therefore  have  provided  ground  forward  chaining  as  a 
new  rule  in  IMPLY. 
RULE  (forward  chaining). 
is  a  ground  expres(cid:173)
sion  ( i . e .,  contains  no  variables) which  is  an  instance 
of  P ( i . e ., 
PO  =  PT) 

(lemmas).  Consequently,  our  e a r l i er 

there  is  a  substitution  T 

then  the  goal 

for  which 

If  PO 

is  converted  to  the  new  goal 

which  convert  the  expression  being  proved  from  one 
form  to  another. 
goal 

I ts  main  function  is 

into  subgoals 

to  s p l it  a 

backchain,  substitute  equals,  and  forward  chain  (new 
addition).  A  fundamental  part  of  IMPLY  is  a  matching 
routine  ( u n i f i c a t i o n ): 
u n i f i er  of  A  and  A' 

if  T 
then  the  subgoal 

is  a  most  general 

further  subgoals. 

is  judged  "TRUE"  with  T  being  returned  to  be  applied 
to 
REDUCE.  REDUCE  consists  wholly  of  a  set  of  rewrite 
rules  which  converts  parts  of 
It  contains 
special  h e u r i s t i cs  for  set  theory, 
For  example 

topology,  etc. 

formulas. 

This  rule  need  only  be  applied  at  the  time  some(cid:173)
thing  new  is  added  to  the  hypothesis,  such  as  when  an 
expression 
or  when  another  forward  chaining  step  has 
completed. 

is  converted 

just  been 

to  (H 

B)) 

(H 

(A 

A 

This  rule  has  been  further  extended  in  the  system 

B), 

to  provide  for  so-called  "PEEK 
which  works  as  follows: 
RULE  (PEEK  forward  chaining). 
expression,  P.  = 
then  the  goal 

forward  chaining", 

If  P 

is  a  ground 

A  has  the  d e f i n i t i on 

(P 

Q), 

is  converted  to  the  new  goal 

Note  that  the  machine  "peeks"  at  the  d e f i n i t i on  of 

if  forward  chaining  is  possible,  but  then 
A 
to  see 
returns  A 
to  i ts  o r i g i n al  form.  This  v a r i a t i on  is 
very  useful  (see  Example  2,  (111  H1)).  Returning  A 
to  I ts  o r i g i n al  form  makes 
to 
comprehend 
for  the  mathematician  reading  the  display 
on  the  scope. 

the  theorem  much  easier 

Forward  chaining  s t i ll  tends 

to  c l u t t er  up  the 

scope  with  useless  hypotheses,  and  the  user  occasion(cid:173)
a l ly  finds  It  useful  to  remove  some  of  them  by  the 
command  DELETE.  More  importantly  the  user,  when  he 
gives  the  computer  a  theorem  to  prove,  need  not  l i st 
a ll  required  lemmas  but  can  give  them  only  as  they  are 
aeeded  In  the  proof,  and  thereby  can  eliminate  much 
irrelevant 
Breadth-First-Search.  One  of  the  d i f f i c u l t i es  with 
previous  version  of  IMPLY  was  that  i ts  search  was 
essentially  " d e p t h - f i r s t ."  For  example, 
in  proving 

forward  chaining. 

the 

is  now  called  from  inside  IMPLY, 

*Since  REDUCE 
it  (RE(cid:173)
DUCE)  must  eliminate  quantifiers  and  skolemize  in  the 
course  of  reducing  formulas.  As  was  explained  in  Sec(cid:173)
t i on  2  under  DEFN, 
depends  on  the  p o s i t i on  of  the  expression  in  the  theorem. 
59 

the  exact  form  of  t h is  skolemization 

It  would  back  chain  o ff  of 

try 

to  prove  H(x  ), 

before  f i n a l ly  getting 

A  more  serious  d i f f i c u l ty 

before  t r y i ng  to  establish  H(xO). 

A  human,  acting  more  i n t e l l i g e n t l y,  would 

and 
around  to  the  t r i v i al  proof  (P(xO)  ->  P(x  ) ). 
casually  glance  across  the  hypotheses,  and  notice 
P(xo.) 
i n s t a n t i a t i ng  d e f i n i t i o n s, 
t i on  is  provided  as 
instantiate 
f i r s t.  As  a  general  r u l e,  an  expression  such  as  " r e g" 
should  not  be  replaced  by  i ts  d e f i n i t i on  unless 
w i ll  "do  some  good."  Otherwise  a  glut  of  new  symbols 
hamper  both  man  and  machine.  Also  it 
better  to  i n s t a n t i a te  d e f i n i t i o ns 
before  those 
d e f i n i t i o ns  of  "strange"  terms  such  as  "paracompact" 
before  those  of  ordinary  terms  such  as  "closed"  or 

in  the  conclusion 
in  the  hypothesis,  and  to  i n s t a n t i a te 

in  that  not  enough  direc(cid:173)

to  which  d e f i n i t i on  to 

is  encountered  in 

is  usually 

it 

We  have  attempted  to  remedy  these  two  d i f f i(cid:173)

c u l t i es  and  have  also  added  another  feature  called 
"PAIRS"  which 
hypothesis  which 
when  a  complete  match  cannot  be  made. 

if  possible 
l i ke  the  desired  conclusion,  even 

t r i es 
is 

to  apply 

that 

The 

following  is  a  rather  sketchy  description  of 

the  revised  IMPLY  program,  which  gives  only  the 
flavor  of  I t.  A  detailed  description  is  given  in 
[12]. 

When  a  theorem  (or  subgoal) 

it 

i ts  own  rewrite  rules,  and  SPLITS 

f i r st  calls  REDUCE, 
is  given  for  IMPLY  to  prove, 
it 
then  applies 
appropriate.  Next  it  does  a  b r e a d t h - f i r st  search 
by  t r y i ng  the  following  seven  steps  In  the  order 
indicated. 
it  goes 
the  success  of  a  step  usually  results 
to  the  function  IMPLY. 

to 
in  another  c a ll 

If  any  step 

the  next; 

f a i ls 

if 

These  are  described  in  more  d e t a il  below.  With 

the  exception  of  step  5  each  of  the  steps 
involves  a  c a ll  from  IMPLY  to  a  function  called  HOA. 
What  basically  happens 
the 
theorem  into  subgoals  on  the  basis  of  the  OR-AND 
structure  of  C  ,  and  HOA  attempts  to  use  the  hypo(cid:173)
theses 

to  prove  these  subgoals. 

IMPLY  s p l i ts 

is  that 

l i s t ed 

1.  Try  matching  the  conjuncts  of  H  with  C. 
is  of  the  form  H1  -  H2  -  H3 
That  is  if  H 
it  t r i es  to  match  C  with  one  or  the  H.. 

2.  Same  as  1 .,  except  that  backchaining  is 

allowed.  For  example, 

in 

60 

4.  Examples. 

The  examples  we  have  explored  are  mostly  from 
though  in  fact  any 

Kelley's  General  topology 
reasonably  precise  text  would  do. 

[13], 

We  have  taken  examples  from  various  parts  of  the 
book.  Example  2  is  a  theorem  about  paracompactness. 
The  examples  t r i ed  so  far  have  been  about  just  one 
fixed 
topology. 
symbols  T  and  X 
X.  The  space  X 
is  assumed  to  be  non-empty.  The 
d e f i n i t i o ns  used  by  the  computer  are  stored  (perma­
nently) 

for  the  topology  T  on  the  space 

is  convenient  since 

in  i ts  memory. 

it  allows 

This 

The  theorem  labels  used  in  the  following  examples 
are  also  those  used  by  the  computer.  They  help  inform 
the  user  where  he  is 
goal  has  theorem  label  (1  2)  and  it  SPLITS, 
two  parts  w i ll  be  labeled  (1  2  1)  and  ( 12  2). 
back  chaining  is  used  on  a  theorem  labeled  L, 
the  two  steps  are  labeled  (LB)  and  (LH). 

in  the  proof.  For  example, 

if  a 
then  the 

If 
then 

The  presentation  on  the  scope  is  always  in  the 

" p r e t t y - p r i n t"  format  depicted  on  page  11.  But  to 
conserve  space  we  have  here  shown  our  examples  in  a 
more  compact 
form,  and  some  lines  of  the  proof  are 
omitted. 

In  t h is  presentation,  an 

cates  a  human  input,  an 
comment,  and  an 
m's  are  omitted 
few  lines  of  each  example. 

" h" 

at  the  l e ft  i n d i­
"Ed"  indicates  an  e d i t o r i al 
"m"  indicates  machine  output.  The 
in  our  description  after  the 

f i r st 

In  the  examples 

61 

62 

Ed 

Ed 

In  t h is  writeup  we  have  denoted  by  GO 
the  skolem  expression  G(F').  The 
machine  retains 
i ts  complete  skolem 
expressions  but  p r i n ts  only 
scope 
for  ease  of  reading. 

(G)  on  the 

0 

Since  the  new  entry  [->]  in  the  hypothesis 
is  an  implication,  and  since  F'  has  been 
given  a  value, 
proving  OcF'  before  proceeding.  This  is 
done  in  (111  H)  below. 
it  w i ll 

the  machine  f i r st  t r i es 

If  It  succeeds 

then  r e t a in 

the  hypothesis 

63 

This  work  was  supported  in  part  by  NSF  Grant 

GJ-32269  and  NIH  Grant  5801  GM  157-69-05. 

References 

1.  W.  W.  Bledsoe,  R.  S.  Boyer,  and  W.  H.  Henneman, 

Computer  Proofs  of  Limit  Theorems, 
A r t i f i c i al  Intelligence  3  (1972),  27-60. 

2.  W.  W.  Bledsoe,  S p l i t t i ng  and  Reduction  Heuristics 

in  Automatic  Theorem  Proving,  A r t i f i c i al 
Intelligence  2  (1971),  55-77. 

3. 

4. 

J.  R.  Guard,  F.  C.  Oglesby,  J.  H.  Bennett,  and 
L.  G.  S e t t l e,  Semi-automated  Mathematics, 
JACM  16  (1969),  49-62. 

John  Allen  and  David  Luckham,  An  Interactive 

Theorem-Proving  Program,  Machine  Intelligence 
5  (1970),  321-336. 

5.  G.  P.  Huet,  Experiments  with  an  Interactive  Prover 

for  Logic  with  Equality,  Report  1106, 
Jennings  Computing  Center,  Case  Western 
Reserve  University. 

6. 

John  McCarthy,  Computer  Programs  for  Checking 

Mathematical  Proofs,  Proc.  Aroer ■  Math.  Soc. 
on  Recursive  function  Theory,  held  in 
Ney  York,  A p r i l,  1961. 

7.  Paul  W.  Abrahams,  Machine  V e r i f i c a t i on  of  Mathe­

matical  Proof,  Doctoral  Dissertation  in 
Mathematics,  MIT,  May,  1963. 

8.  W.  W.  Bledsoe  and  E.J  .  Gilbert,  Automatic  Theorem 
Proof-Checking  in  Set  Theory:  A  Preliminary 
Report,  Sandia  Corp.  Report  SC-RR-67-525, 
July,  1967. 

9.  Arthur  J.  Nevins,  A  Human  Oriented  Logic  for 

Automatic  Theorem  Proving,  MIT  AI  Memo  No. 
268,  October,  1972. 

10.  Raymond  Reiter,  The  Use  of  Models  in  Automatic 

Theorem  Proving,  Dept.  of  Computer  Science, 
University  of  B r i t i sh  Columbia,  September, 
1972. 

11.  TAURUS,  described  in  Users  Manual,  Computation 

Center,  University  of  Texas,  Austin. 

12.  Peter  B r u e l l,  A  Description  of  the  Functions  of 
The  Man-Machine  Topology  Theorem  Prover, 
(under  preparation). 

13.  John  L.  Kelley,  General  Topology,  van  Nostrand, 

1955. 

14.  James  R.  Slagle,  Automatic  Theorem  Proving  with 

B u i l t - in  Theories 
Ordering,  and  Sets,  JACM  19  (1972), 
120-135. 

Including  Equality,  P a r t i al 

15.  Robert  Boyer,  Locking:  A  Restriction  on  Resolution, 

Ph.D.  Dissertation,  Mathematics  Dept., 
University  of  Texas,  Austin,  1971. 

16.  Dallas  S.  Lankford,  Equality  Atom  Term  Locking, 

Ph.D.  D i s s e r t a t i o n,  Mathematics  Dept., 
University  of  Texas,  Austin,  1972. 

17.  George  Ernst, 

The  U t i l i ty  of 

in  Theorem  Proving, 
v o l.  18,  3,  1971. 

independent  subgoals 
Information  and  Control, 

Many  of  the  a b i l i t i es  which  are  b u i lt 

into  this 

man-machine  f a c i l i ty  have  been  developed  only  after  a 
In  fact  the  reason  for 
period  of  t r i al  and  e r r o r. 
many  of  these  is  to  provide 
for  more  ease  in  checking 
out  and  changing  the  program.  We  expect  the  program 
to  continue  to  change  as  it  is  t r i ed  on  more  and 
more  examples,  hopefully  evolving  i n to  a  system  which 
w i ll  be  useful  to  the  researcher  in  topology.  So  far 
t h is  is  not  the  case,  we  have  handled  only  well  known 
theorems.  Our  next  step  involves  work  on  the  system 
by  some  p r a c t i c i ng  topologist.  This  should  help 
determine  whether  such  a  system  might  have  any  p r a c t i c al 
value 

in  the  near 
An  i n t e r e s t i ng  point  is  t h i s-  Even  though  the 

f u t u r e. 

mathematician  is  able 
to  intervene  at  any  point  in  the 
proof,  he  is  nevertheless  very  annoyed  when  he  has  to 
for  example,  he  PUTS 
do  so  in  a  t r i v i al  way.  When, 
the  values  for  F'  and  G 
in  Example  2,  he  feels  he 
has  done  enough  and  r i g h t f u l ly  expects  the  computer 
to  do  the  r e s t.  Thus  even  in  a  man-machine  system, 
theorems 
that  the  machine  alone  is  required  to  prove 
are  far  from  t r i v i a l. 
In  fact  experience  so  far  shows 
that  they  are  on  a  par  with  the  hardest  theorems  being 
proved  today  by  automatic  theorem  provers. 

the 

Therefore, 

it 

is 

machine-alone  programs 
man-machine  e f f o r t. 

f e lt  that  any  improvement 

is 

t r u ly  worthwhile  to 

in 
the 

Acknowledgment. 

Various  people  both  at  U.T.  and  elsewhere  have 

greatly 
influenced  our  thinking  about  automatic  theorem 
proving  and  interactive  systems.  We  want  to  especially 
thank  B i ll  Hemneman,  Robert  Anderson,  Dave  Luckham, 
Vesko  Marinov,  B i ll  Bennett,  Mike  Ballentyne,  and 
Howard  Ludwig. 

65 

