Solving Logic Program Con(cid:3)ict through Strong and Weak Forgettings

Yan Zhang

Norman Foo

School of Computing & IT
University of Western Sydney

School of Comp. Sci. & Eng.
University of New South Wales

NSW 1797, Australia

NSW 2052, Australia

Kewen Wang

School of Computing & IT

Grif(cid:2)th University
QLD 4111, Australia

E-mail: yan@cit.uws.edu.au

E-mail: norman@cse.unsw.edu.au

E-mail: k.wang@cit.gu.edu.au

Abstract

We consider how to forget a set of atoms in a logic
program. Intuitively, when a set of atoms is forgot-
ten from a logic program, all atoms in the set should
be eliminated from this program in some way, and
other atoms related to them in the program might
also be affected. We de(cid:2)ne notions of strong and
weak forgettings in logic programs to capture such
intuition and reveal their close connections to the
notion of forgetting in classical propositional the-
ories. Based on these notions, we then propose a
framework for con(cid:3)ict solving in logic programs,
which is general enough to represent many impor-
tant con(cid:3)ict solving problems. We also study some
essential semantic and computational properties in
relation to strong and weak forgettings and con(cid:3)ict
solving in our framework.

1 Introduction
One promising approach in the research of reasoning about
knowledge dynamics is to represent agents’ knowledge bases
as logic programs on which necessary updates are conducted
as a way to model agents’ knowledge evolution. A key issue
in this study is to solve various con(cid:3)icts and inconsistencies
in logic programs, e.g. [Leite, 2003].

While different logic program update approaches have
been developed recently, we observe that some typical con-
(cid:3)ict solving problems in logic programs have yet to be thor-
oughly investigated in the literature. Let us consider a sce-
nario. John wants Sue to help him to complete his assign-
ment. He knows that Sue will help him if she is not so busy.
Tom is a good friend of John and wants John to let him copy
John’s assignment. Then John also learns that Sue hates Tom,
and will not help him if he lets Tom copy his assignment,
which will be completed under Sue’s help. While John does
not care whether Sue hates Tom or not, he has to consider
Sue’s condition to offer him help. What is John going to do?
We formalize this scenario in a logic programming setting.
John’s knowledge base (cid:5)J :

r1 : Complete(John; Assignment)  
Help(Sue; John),

r2 : Help(Sue; John)   notBusy(Sue),

r3 : Goodf riend(John; T om)  ,
r4 : Copy(T om; Assignment)  

Goodf riend(John; T om),
Complete(John; Assignment),

and Sue’s knowledge base (cid:5)S:
r5: Hate(Sue; T om)  ,
r6:   Help(Sue; John); Copy(T om; Assignment).
In order to take Sue’s knowledge base into account, sup-
pose John updates his knowledge base (cid:5)J in terms of Sue’s
(cid:5)S. By applying proper logic program update approach, John
may obtain a solution: (cid:5)f inal
= fr1; r2; r3; r5; r6g or its sta-
ble model, from which we know that Sue will help John to
complete the assignment and John will not let T om copy his
assignment. Although the con(cid:3)ict between (cid:5)J and (cid:5)S has
been solved by updating, the result is somehow not always
satisfactory. For instance, while John wants Sue to help him,
he may have no interest at all in integrating the information
that Sue hates Tom into his new knowledge base.

J

As an alternative, John may just weaken his knowledge
base by forgetting atom Copy(T om; Assignment) from (cid:5)J
in order to accommodate Sue’s constraint. Then John may
have a new program (cid:5)f inal
= fr1; r2; r3g - John remains
a maximal knowledge subset which is consistent with Sue’s
condition without being involved in Sue’s personal feeling
about Tom.

The formal notion of forgetting in propositional theories
was initially considered by Lin and Reiter from a cognitive
robotics perspective [Lin and Reiter, 1994] and has recently
received a great attention in KR community.
It has been
shown that the theory of forgetting has important applications
in solving knowledge base inconsistencies, belief update and
merging, abductive reasoning, causal theories of actions,
and reasoning about knowledge under various propositional
[Lang and Marquis, 2002;
(modal) logic frameworks, e.g.
Lang et al., 2003; Lin, 2001; Su et al., 2004].

In this paper, we consider how to forget a set of atoms from
a propositional normal logic program and how this idea can
be used in general con(cid:3)ict solving under the context of logic
programs. The rest of this paper is organized as follows. We
present preliminary de(cid:2)nitions and concepts in section 2. In
section 3, we give formal de(cid:2)nitions of strong and weak for-
gettings in logic programs. Based on these notions, in section
4, we propose a framework called logic program contexts for

J

general con(cid:3)ict solving in logic programs. In section 5, we
investigate related semantic and computational properties. In
section 6 we conclude the paper with some discussions.
2 Preliminaries
We consider (cid:2)nite propositional normal logic programs in
which each rule has the form:

a   b1; (cid:1) (cid:1) (cid:1) ; bm; notc1; (cid:1) (cid:1) (cid:1) ; notcn

(1)
where a is either a propositional atom or empty, and
b1; (cid:1) (cid:1) (cid:1) ; bm, c1; (cid:1) (cid:1) (cid:1) ; cn are propositional atoms. When a is
empty, rule (1) is called a constraint. Given a rule r of the
form (1), we denote head(r) = fag, pos(r) = fb1; (cid:1) (cid:1) (cid:1) ; bmg
and neg(r) = fc1; (cid:1) (cid:1) (cid:1) ; cng, and therefore, rule (1) may be
represented as the form:

head(r)   pos(r); not neg(r):

(2)
We also use Atom(r) to denote the set of all atoms oc-
curring in rule r. For a program (cid:5), we de(cid:2)ne notions
head((cid:5)) = Sr2(cid:5) head(r), pos((cid:5)) = Sr2(cid:5) pos(r),
neg((cid:5)) = Sr2(cid:5) neg(r), Atom((cid:5)) the set of all proposi-
tional atoms occurring in program (cid:5). Given sets of atoms P
and Q, we may use notion

r0 : head(r)   (pos(r) (cid:0) P ); not (neg(r) (cid:0) Q)

to denote rule r0 obtained from r by removing all atoms oc-
curring in P and Q in the positive and negation as failure parts
respectively.

The stable model of a program (cid:5) is de(cid:2)ned as follows.
Firstly, we consider (cid:5) to be a program in which each rule
does not contain negation as failure sign not. A (cid:2)nite set S
of propositional atoms is called a stable model of (cid:5) if S is
the smallest set such that for each rule a   b1; (cid:1) (cid:1) (cid:1) ; bm from
(cid:5), if b1; (cid:1) (cid:1) (cid:1) ; bm 2 S, then a 2 S. Now let (cid:5) be an arbitrary
normal logic program. For any set S of atoms, program (cid:5)S
is obtained from (cid:5) by deleting (1) each rule from (cid:5) that con-
tains not c in the body and c 2 S; and (2) all forms of not c
in the bodies of the remaining rules. Then S is a stable model
of (cid:5) if and only if S is a stable model of (cid:5)S. A program
may have one, more than one, or no stable models at all. A
program is called consistent if it has a stable model. We say
that an atom a is entailed from program (cid:5), denoted as (cid:5) j= a
if a is in every stable model of (cid:5).

Given two programs (cid:5)1 and (cid:5)2. (cid:5)1 and (cid:5)2 are equivalent
if (cid:5)1 and (cid:5)2 have the same stable models. (cid:5)1 and (cid:5)2 are
called strongly equivalent if for every program (cid:5), (cid:5)1 [ (cid:5)
and (cid:5)2 [ (cid:5) are equivalent [Lifschitz et al., 2001].
Observation: Let (cid:5) be a logic program. If each rule r in (cid:5)
is of one of the following two forms: (1) head(r) 6= ; and
head(r) (cid:18) pos(r), or (2) pos(r) \ neg(r) 6= ;, then (cid:5) is
strongly equivalent to the empty set.

For a later reference, we call the two types of rules men-

tioned above redundant rules.

Let (cid:5) be a logic program. We use [(cid:5)]C to denote the con-
junctive normal form obtained from (cid:5) by translating each
rule of the form (1) in (cid:5) in to the clause: a_:b1 _(cid:1) (cid:1) (cid:1)_:bm _
c1 _ (cid:1) (cid:1) (cid:1) _ cn. For instance, if (cid:5) = fa   notb; c   ag, then
we have [(cid:5)]C = (a _ b) ^ (c _ :a). In general, we may write
[(cid:5)]C = fC1; (cid:1) (cid:1) (cid:1) ; Cng where each Ci is a conjunct of [(cid:5)]C.

If Ci is a clause, we call any sub formula of Ci a subclause
of Ci.

Now we introduce the notion of forgetting in a classical
propositional theory [Lin and Reiter, 1994; Lin, 2001]. Let T
be propositional theory. We use T (p=true) (or T (p=f alse),
resp.) to denote the theory obtained from T by substituting all
occurrences of propositional atom p with true (or false, resp.).
For instance, if T = fp (cid:27) q; (q ^ r) (cid:27) sg, then T (q=true) =
fr (cid:27) sg and T (q=f alse) = f:pg. Then we can de(cid:2)ne the
notion of forgetting in terms of a propositional theory. For a
given propositional theory T and a set of propositional atoms
P , the result of forgetting P in T , denoted as F orget(T; P ),
is de(cid:2)ned inductively as follows:

Forget(T; ;) = T ,
Forget(T; fpg) = T (p=true) _ T (p=f alse),
Forget(T; P [fpg) = Forget(Forget(T; fpg); P ).

It is easy to see that the ordering in which atoms in P are
considered does not affect the (cid:2)nal result of forgetting P from
T . Consider T = fp (cid:27) q; (q ^r) (cid:27) sg again. From the above
de(cid:2)nition, we have Forget(T; fqg) = f(r (cid:27) s) _ :pg.
3 Strong and Weak Forgettings in Logic

Programs

Let us consider how to forget a set of atoms from a logic pro-
gram. Intuitively, we would expect that after forgetting a set
of atoms, all occurrences of these atoms in the underlying
program should be eliminated in some way, and moreover,
other atoms having connections to them through rules in the
program might also be affected. We observe that the notion of
forgetting in propositional theories is not applicable to logic
programs since there is no disjunctive operation for logic pro-
grams. Further, different ways of handling negation as failure
in forgetting may also lead to different resulting programs.
To formalize our idea of forgetting in logic programs, we (cid:2)rst
introduce a program transformation called reduction.
De(cid:2)nition 1 (Program reduction) Let (cid:5) be a program and
p an atom. We de(cid:2)ne the reduction of (cid:5) with respect to p,
denoted as Reduct((cid:5); fpg), to be a program obtained from (cid:5)
by (1) for each rule r with head(r) = p and each rule r0 with
p 2 pos(r0), replacing r0 with a new rule r00 : head(r0)  
(pos(r) [ pos(r0) (cid:0) fpg); not(neg(r) [ neg(r0)); (2) if there
is such rule r0 in (cid:5) and has been replaced by r00 in (1), then
removing rule r from the remaining program. Let P be a
set of atoms. Then the reduction of (cid:5) with respect to P is
inductively de(cid:2)ned as follows:

Reduct((cid:5); ;) = (cid:5),
Reduct((cid:5); P [ fpg) = Reduct(Reduct((cid:5); fpg); P ).

Note that in our program reduction de(cid:2)nition, step (1) is
the same as logic program unfolding [Brass and Dix, 1999].
While unfolding is to eliminate positive body occurrences of
an atom in a logic program, the reduction, on other hand, is
further to remove those rules with heads of this atom.
Example 1 Let (cid:5)1 = fa   notb; a   d; c   a; noteg,
(cid:5)2 = fa   c; notb; c   notdg, and (cid:5)3 = fa  
b; b   notd; c   a; noteg. Then Reduct((cid:5)1; fag) =
fc   notb; note; c   d; noteg, Reduct((cid:5)2; fag) = (cid:5)2,
and Reduct((cid:5)3; fa; bg) = fc   notd; noteg. (cid:3)

De(cid:2)nition 2 (Strong forgetting) Let (cid:5) be a logic program,
and p an atom. We de(cid:2)ne a program to be the result of
strongly forgetting p in (cid:5), denoted as SForgetLP ((cid:5); fpg),
if it is obtained from the following transformation:

1. (cid:5)0 = Reduct((cid:5); fpg);
2. (cid:5)0 = (cid:5)0 (cid:0) fr j r is a redundant ruleg;
3. (cid:5)0 = (cid:5)0 (cid:0) fr j head(r) = pg;
4. (cid:5)0 = (cid:5)0 (cid:0) fr j p 2 pos(r)g;
5. (cid:5)0 = (cid:5)0 (cid:0) fr j p 2 neg(r)g;
6. SForgetLP ((cid:5); fpg) = (cid:5)0.
Let us take a closer look at De(cid:2)nition 2. Step 1 is just to
perform reduction on (cid:5) with respect to atom p. This is to re-
place those positive body occurrences of p in rules with other
rules having p as the head. Step 2 is to remove all redundant
rules which may be introduced by the reduction of (cid:5) with
respect to p. From Observation in section 2, we know that
this does not change anything in the program. Steps 3 and 4
are to remove those rules which have p as the head or in the
positive body. Note that after Steps 1 and 2, there does not
exist any pair of rules r and r0 such that head(r) = fpg and
p 2 pos(r0). Then the intuitive meaning of Steps 3 and 4 is
that after forgetting p, any atom’s information in rules having
p as their heads or positive bodies will be lost because they are
all relevant to p, i.e. these atoms either serve as a support for
p or p is in part of the supports for these atoms. On the other
hand, Step 5 states that any rule containing p in its negation as
failure part will be also removed. The consideration for this
step is as follows. If we think neg(r) is a part of support of
head(r), then when p 2 neg(r) is forgotten, head(r)’s en-
tire support is lost as well. Clearly, such treatment of negation
as failure in forgetting is quite strong in the sense that more
atoms may be lost together with not p. Therefore we call this
kind of forgetting strong forgetting.

With a different way of dealing with negation as failure,
we have a weak version of forgetting. We de(cid:2)ne a pro-
gram to be the result of weakly forgetting p in (cid:5), denoted
as WForgetLP ((cid:5); fpg), exactly in the same way as in De(cid:2)-
nition 2 except that Step 5 is replaced by the following step:

(cid:5)0 = ((cid:5)0 (cid:0) (cid:5)(cid:3)) [ (cid:5)y, where
(cid:5)(cid:3) = fr j p 2 neg(r)g and (cid:5)y = fr0 j r0 : head(r)  
pos(r); not(neg(r) (cid:0) fpg) where r 2 (cid:5)(cid:3)g.

Suppose we have a rule like r : head(r)   pos(r),
not neg(r) where p 2 neg(r). Instead of viewing neg(r)
as part of the support of head(r), we may treat it as a default
evidence of head(r), i.e. under the condition of pos(r), if
all atoms in neg(r) are not presented, then head(r) can be
derived. Therefore, forgetting p will result in the absence of
p in any case. So r may be replaced by r0
: head(r)  
pos(r); not (neg(r) (cid:0) fpg).

Strong and weak forgettings can be easily extended to the

case of a set of atoms:

SForgetLP((cid:5); ;) = (cid:5),
SForgetLP((cid:5); P [ fpg) =

SForgetLP(SForgetLP ((cid:5); fpg); P ),

and WForgetLP ((cid:5); P ) is de(cid:2)ned accordingly. The follow-
ing proposition ensures that our strong and weak forgettings
in logic programs are well de(cid:2)ned under strong equivalence.

Proposition 1 Let (cid:5) be a logic program and p; q two propo-
sitional atoms. Then

1. SForgetLP (SForgetLP((cid:5); fpg); fqg)

is

strongly

equivalent to SForgetLP (SForgetLP((cid:5); fqg); fpg);

is

2. WForgetLP (WForgetLP ((cid:5); fpg); fqg)

strongly
equivalent to WForgetLP (WForgetLP ((cid:5); fqg); fpg).
Example 2 Let (cid:5) = fb   a; c; d   nota; e   notf g.
Then we have SForgetLP((cid:5); fag) = fe   notf g, and
WForgetLP ((cid:5); fag) = fd  ; e   notf g. Now we
consider Forget([(cid:5)]C; fag), which is logically equivalent
to formula (b _ :c _ d) ^ (f _ e). Then it is clear that
j= Forget([(cid:5)]C; fag) (cid:27) [SForgetLP ((cid:5); fag)]C, and
j= [WForgetLP ((cid:5); fag)]C (cid:27) Forget([(cid:5)]C; fag). (cid:3)

The above example motivates us to examine the deeper
relationships between strong and weak forgettings in logic
programs and forgetting in propositional theories. Let (cid:5)
be a program and L a clause, i.e. L = l1 _ (cid:1) (cid:1) (cid:1) _ lk
where each li is a propositional literal. We say that L is (cid:5)-
coherent if there exists a subset (cid:5)0 of (cid:5) and a set of atoms
P (cid:18) Atom((cid:5)) (P could be empty) such that L is a sub-
clause of [Reduct((cid:5)0; P )]C (i.e. [Reduct((cid:5)0; P )]C is a sin-
gle clause). The intuition behind this notion is to specify
those clauses that are parts of clauses generated from pro-
gram (cid:5) through reduction. Consider program (cid:5) = fa  
b; d   a; notc; e   notdg. Clause d _ b is (cid:5)-coherent,
where clause :d _ e is not. Obviously, for each rule r 2 (cid:5),
[frg]C is (cid:5)-coherent. The following proposition provides a
semantic account for (cid:5)-coherent clauses.
Proposition 2 Let (cid:5) be a program and L a (cid:5)-coherent
clause. Then either j= [(cid:5)]C (cid:27) L or j= L (cid:27) (cid:8) for some
clause (cid:8) where j= [(cid:5)]C (cid:27) (cid:8).
De(cid:2)nition 3 Let (cid:5) be a logic program, ’, ’1 and ’2 three
propositional formulas where ’1 and ’2 are in conjunctive
normal forms.

1. ’1 is called a consequence of ’ with respect to (cid:5) if j=
’ (cid:27) ’1 and each conjunct of ’1 is (cid:5)-coherent. ’1 is
a strongest consequence of ’ with respect to (cid:5) if ’1 is
a consequence of ’ with respect to (cid:5) and there does
not exist another consequence ’0
1 6(cid:17) ’1) with
respect to (cid:5) such that j= ’0
1 (cid:27) ’1.

1 of ’ (’0

2. ’2 is called a premiss of ’ with respect to (cid:5) if j= ’2 (cid:27)
’ and each conjunct of ’2 is (cid:5)-coherent. ’2 is a weak-
est premiss of ’ with respect to (cid:5) if ’2 is a premiss
of ’ with respect to (cid:5) and there does not exist another
2 of ’ (’0
premiss ’0
2 6(cid:17) ’2) with respect to (cid:5) such that
2.
j= ’2 (cid:27) ’0

Example 3 (Example 2 continued) It
is easy to verify
that [SForgetLP((cid:5); fag)]C is a strongest consequence of
Forget([(cid:5)]C; fag) and [WForgetLP ((cid:5); fag)]C is a weakest
premiss of Forget([(cid:5)]C; fag). In fact, the following theorem
con(cid:2)rms that this is always true. (cid:3)
Theorem 1 Let (cid:5) be a logic program and P a set
Then [SForgetLP ((cid:5); P )]C is a strongest
of atoms.
consequence of Forget([(cid:5)]C ; P ) with respect
to (cid:5)
and [WForgetLP ((cid:5); P )]C is a weakest premiss of
Forget([(cid:5)]C; P ) with respect to (cid:5).

Theorem 1 actually provides a precise semantic character-
ization for strong and weak forgettings in logic programs in
terms of the forgetting notion in the corresponding proposi-
tional theory.
4 Solving Con(cid:3)icts in Logic Program

Contexts

In this section, we de(cid:2)ne a general framework called logic
program context to represent a knowledge system which con-
sists of multiple agents’ knowledge bases. We consider the
issue of con(cid:3)icts occurring in the reasoning within the under-
lying logic program context. As we will show, the notions of
strong and weak forgettings provide an effective way to solve
such con(cid:3)icts.
De(cid:2)nition 4 (Logic program context) A logic program con-
text is a n-ary tuple (cid:6) = ((cid:8)1; (cid:1) (cid:1) (cid:1) ; (cid:8)n), where each (cid:8)i is a
triplet ((cid:5)i; Ci; Fi) - (cid:5)i and Ci are two logic programs, and
Fi (cid:18) Atom((cid:5)i) is a set of atoms. We also call each (cid:8)i the
ith component of (cid:6). (cid:6) is consistent if for each i, (cid:5)i [ Ci is
consistent. (cid:6) is con(cid:3)ict-free if for any i and j, (cid:5)i [ Cj is
consistent.

In the above de(cid:2)nition, for a given logic program context
(cid:6), each component (cid:8)i represents agent i’s local situation,
where (cid:5)i is agent i’s knowledge base, Ci is a set of constraints
that agent i should comply and will not change in any case,
and Fi is a set of atoms that agent i may forget if necessary.
To simplify our following discussion, we assume that for each
component (cid:8)i, the corresponding agent’s knowledge base (cid:5)i
does not contain constraints (i.e. rules with empty heads). Al-
ternatively such constraints will be contained in the constraint
set Ci though Ci may also contain rules with nonempty heads.
Now the problem of con(cid:3)ict solving under this setting
can be stated as follows: given a logic program context
(cid:6) = ((cid:8)1; (cid:1) (cid:1) (cid:1) ; (cid:8)n), which may not be consistent or con(cid:3)ict-
free, how can we (cid:2)nd an alternative logic program context
n) such that (cid:6)0 is con(cid:3)ict-free and is closest
(cid:6)0 = ((cid:8)0
to the original (cid:6) in some sense?
De(cid:2)nition 5 (Solution) Let (cid:6) = ((cid:8)1; (cid:1) (cid:1) (cid:1) ; (cid:8)n) be a logic
program context, where each (cid:8)i = ((cid:5)i; Ci; Fi). We call a
logic program context (cid:6)0 a solution that solves con(cid:3)icts in (cid:6),
if (cid:6)0 satis(cid:2)es the following conditions:

1; (cid:1) (cid:1) (cid:1) ; (cid:8)0

1. (cid:6)0 is con(cid:3)ict-free;
2. (cid:6)0 = ((cid:8)0
1; (cid:1) (cid:1) (cid:1) ; (cid:8)0

SForgetLP ((cid:5)i; Pi) or (cid:5)0
some Pi (cid:18) Fi.

n), where (cid:8)0

i = ((cid:5)0

i =
i = WForgetLP ((cid:5)i; Pi) for

i; Ci; Fi), and (cid:5)0

We denote the set of all solutions of (cid:6) as Solution((cid:6)).
De(cid:2)nition 6 (Ordering on solutions) Let (cid:6), (cid:6)0 and (cid:6)00 be
three logic program contexts, where (cid:6)0; (cid:6)00 2 Solution((cid:6)).
We say that (cid:6)0 is closer or as close to (cid:6) as (cid:6)00, denoted
i; Ci; Fi) 2 (cid:6)0 and
as (cid:6)0 (cid:22)(cid:6) (cid:6)00, if for each i, (cid:8)0
(cid:8)00
i = SForgetLP ((cid:5)i; Pi)
i = WForgetLP ((cid:5)i; Pi) for some Pi (cid:18) Fi, and
or (cid:5)0
(cid:5)00
i = WForgetLP((cid:5)i; Qi)
for some Qi (cid:18) Fi respectively, we have Pi (cid:18) Qi (cid:18) Fi. We
denote (cid:6)0 (cid:30)(cid:6) (cid:6)00 if (cid:6)0 (cid:22)(cid:6) (cid:6)00 and (cid:6)00 6(cid:22)(cid:6) (cid:6)0.

i = SForgetLP ((cid:5)i; Qi) or (cid:5)00

i ; Ci; Fi) 2 (cid:6)00, where (cid:5)0

i = ((cid:5)00

i = ((cid:5)0

De(cid:2)nition 7 (Preferred solution) Let (cid:6) and (cid:6)0 be two logic
program contexts. We say that (cid:6)0 is a preferred solution of (cid:6),
if (cid:6)0 2 Solution((cid:6)) and there does not exist another (cid:6)00 2
Solution((cid:6)) such that (cid:6)00 (cid:30)(cid:6) (cid:6)0.
Example 4 Let (cid:6) = ((cid:8)1; (cid:8)2), where

(cid:8)1:

(cid:5)1: a  ,

b   a; notc,
d   a; note,
f   d,

C1:   d; notf,

  notd; notf,

F1: fa; b; cg,

(cid:8)2:

(cid:5)2: c  ,

d   note,
e   c,
f   d,

C2:   b; notc,

b   c,

F2: fa; b; c; d; e; f g.

It is easy to see that (cid:6) is consistent but not con(cid:3)ict-free
because neither (cid:5)1 [ C2 nor (cid:5)2 [ C1 is consistent. Now
consider two logic program contexts (cid:6)1 = ((cid:8)0
2) and
(cid:6)2 = ((cid:8)00

2 ), where

1 ; (cid:8)00

1; (cid:8)0

(cid:8)0
(cid:8)0
(cid:8)00
(cid:8)00

1 = (SForgetLP ((cid:5)1; fcg); C1; F1),
2 = (WForgetLP ((cid:8)2; feg; C2; F2), and
1 = (WForgetLP ((cid:5)1; fa; cg); C1; F1),
2 = (WForgetLP ((cid:8)2; feg; C2; F2).

It can be veri(cid:2)ed that both (cid:6)1 and (cid:6)2 are solutions of (cid:6), but
only (cid:6)1 is a preferred solution. (cid:3)

5 Semantic and Computational Properties
In this section, we study some important semantic and com-
putational properties in relation to strong and weak forget-
tings and con(cid:3)ict solving.
5.1 Semantic Characterizations
We observe that
the consistency of program (cid:5) does
not necessarily imply a consistent SForgetLP((cid:5); P ) or
WForgetLP ((cid:5); P ) for some set of atoms P , and vice
versa. For example, consider program (cid:5) = fa  ; b  
nota; notbg, then weakly forgetting a in (cid:5) will result in an
inconsistent program fb   notbg. Similarly, strongly forget-
ting a from an inconsistent program (cid:5) = fb   nota; c  
b; notcg will get a consistent program fc   b; notcg.

To understand why this may happen, we (cid:2)rst introduce
some notions. Given program (cid:5) and a set of atoms P ,
we specify two programs X and Y . Program X is a sub-
set of (cid:5) containing three types of rules in (cid:5): (1) for each
p 2 P , if p 62 head((cid:5)), then rule r 2 (cid:5) with p 2 pos(r)
is in X; (2) for each p 2 P , if p 62 pos((cid:5)), then rule
r 2 (cid:5) with head(r) = fpg (cid:18) X; and (3) rule r 2 (cid:5)
with neg(r) \ P 6= ; but not of the types (1) and (2) is
also in X. Clearly, X contains those rules of (cid:5) satisfying
Atom(r) \ P 6= ; but will not be affected by Reduct((cid:5); P ).
On the other hand, program Y is obtained as follows: for each
rule r in X of the type (3), a replacement of r of the form:
r0 : head(r)   pos(r); not(neg(r) (cid:0) P ) is in Y . It should
be noted that both X and Y can be obtained in linear time in
terms of the sizes of (cid:5) and P .
Theorem 2 Let (cid:5) be a program and P a set of atoms. A
subset S of atoms occurring in SForgetLP((cid:5); P ) (or in
WForgetLP ((cid:5); P )) is a stable model of SForgetLP((cid:5); P )

(or WForgetLP((cid:5); P ) resp.) iff program (cid:5) (cid:0) X (or ((cid:5) (cid:0)
X) [ Y resp.) has a stable model S 0 such that S = S0 (cid:0) P .
Theorem 2 presents an interesting result: given program (cid:5)
and set of atoms P , although computing SForgetLP((cid:5); P ) or
WForgetLP ((cid:5); P ) may need exponential time (see Section
5.3), its stable models, however, can be computed through
some program that is obtained from (cid:5) in linear time.

Now we consider the existence of (preferred) solutions for
logic program contexts in con(cid:3)ict solving. It is easy to see
that not every logic program context has a preferred solution.
For instance, (cid:6) = ((fa   notag; ;; ;)) has no solution, and
hence has no preferred solution neither. The following result
shows that the existence of a (cid:6)’s solution always implies the
existence of (cid:6)’s preferred solution, and vice versa.
Theorem 3 Let (cid:6) be a logic program context. (cid:6) has a pre-
ferred solution iff Solution((cid:6)) 6= ;.

Although deciding whether a (cid:6) has a (preferred) solution
is NP-hard (see Theorem 6 in section 5.3), we can identify
a useful class of logic program contexts whose solutions al-
ways exist (we have showed in our full paper that all major
logic program update approaches can be transformed into the
following form of con(cid:3)ict solving context).
Proposition 3 Let (cid:6) = ((cid:8)1; (cid:1) (cid:1) (cid:1) ; (cid:8)n) be a logic program
context. If for each (cid:8)i = ((cid:5)i; Ci; Fi), Ci is consistent, and
for each r 2 (cid:5)i, Fi \ Atom(r) 6= ;, then Solution((cid:6)) 6= ;.
Proof: We show that (cid:6)0 = ((cid:8)0
n), where
i = (;; Ci; Fi) (1 (cid:20) i (cid:20) n) is a solution of (cid:6). Since
(cid:8)0
for each i, Fi \ Atom(r) 6= ; for each r 2 (cid:5)i, we have
i = SForgetLP((cid:5)i; Fi) = ; (note that this is because
(cid:5)0
we already assumed that (cid:5)i does not contain any rules with
empty heads. Instead, this type of rule is contained in Ci).
This follows that (cid:5)0
i [ Cj = Cj for all j = 1; (cid:1) (cid:1) (cid:1) ; n are con-
sistent. So ((;; C1; F1); (cid:1) (cid:1) (cid:1) ; (;; Cn; Fn)) is a solution of (cid:6). (cid:3)

1; (cid:1) (cid:1) (cid:1) ; (cid:8)0

5.2 Representing Logic program Updates
One major advantage of the proposed framework of logic pro-
gram contexts is that it can represent new con(cid:3)ict solving
scenarios for which the traditional logic program update ap-
proaches may not handle properly, like the one discussed in
section 1 (or Example 4). In fact, our framework can also
represent previous logic program update approaches. To il-
lustrate this, we take Sakama and Inoue’s update approach
[Sakama and Inoue, 1999] as an example (note that we need
to restrict their approach to a normal logic program setting).
De(cid:2)nition 8 [Sakama and Inoue, 1999] Let (cid:5)1 and (cid:5)2 be
two consistent logic programs. Program (cid:5)0 is a SI-result
of a theory update of (cid:5)1 by (cid:5)2 if (1) (cid:5)0 is consistent, (2)
(cid:5)2 (cid:18) (cid:5)0 (cid:18) (cid:5)1 [ (cid:5)2, and (3) there is no other consistent
program (cid:5)00 such that (cid:5)0 (cid:26) (cid:5)00 (cid:18) (cid:5)1 [ (cid:5)2.

Now we transform Sakama and Inoue’s theory update into
a logic program context. First, for each rule r 2 (cid:5)1, we intro-
duce a new atom lr which does not occur in Atom((cid:5)1 [ (cid:5)2).
for each r 2 (cid:5)1, rule
1:
Then we de(cid:2)ne a program (cid:5)0
1. That
r0 : head(r)   pos(r); not(neg(r) [ flrg) is in (cid:5)0
is, for each r 2 (cid:5)1, we simply extend its negative body
1 be
with a unique atom lr. This will make each r0 in (cid:5)0

removable by strongly forgetting atom lr without in(cid:3)uenc-
ing other rules. Finally, we specify (cid:6)SI = ((cid:8)1; (cid:8)2), where
(cid:8)1 = ((cid:5)0

1; ;; flr j r 2 (cid:5)1g) and (cid:8)2 = (;; (cid:5)2; ;).

For convenience, we also use (cid:5)(cid:0)notP to denote a program
obtained from (cid:5) by removing all occurrences of atoms in P
from the negative bodies of all rules in (cid:5). For instance, if (cid:5) =
fa   b; notc; notdg, then (cid:5)(cid:0)notfcg = fa   b; notdg.
Now we have the following characterization result.
Theorem 4 Let (cid:5)1 and (cid:5)2 be two consistent programs, and
(cid:6)SI as speci(cid:2)ed above. (cid:5)0 is a SI-result of updating (cid:5)1 by
(cid:5)2 iff (cid:5)0 = (cid:5)(cid:0)notflr jr2(cid:5)1g [ (cid:5)2, where (cid:6)0 = (((cid:5); ;; flr j
r 2 (cid:5)1g); (;; (cid:5)2; ;)) is a preferred solution of (cid:6)SI.

In our full paper we have showed that other logic program
update approaches such as Eiter et al’s causal rejection and
Dynamic Logic Programming [Eiter et al., 2002; Leite, 2003]
for dealing with sequence of programs can also be embedded
into our framework. In this sense, the logic program context
provides a uni(cid:2)ed framework for logic program updates.

5.3 Complexity Results
We assume that readers are familiar with the complexity
2. The class of
classes of P, NP, coNP, (cid:6)P
DP contains all languages L such that L = L1 \ L2 where L1
is in NP and L2 is in coNP. The class coDP is the comple-
ment of class DP (readers refer to [Papadimitriou, 1994] for
further details).

2 = co(cid:6)P

2 and (cid:5)P

We observe that the main computation of strong and weak
forgettings relies on the procedure of reduction that further
inherits the computation of program unfolding. Hence, in
general computing strong and weak forgetting may need ex-
ponential steps of rule substitutions in terms of the sizes of the
input program and the set of forgotten atoms. However, the
following result shows that the inference problem associated
to strong and weak forgettings still remains in coNP.
Proposition 4 Let (cid:5) be a logic program, P a set of atoms,
and a an atom. Then deciding whether SForgetLP ((cid:5); P ) j=
a (or WForgetLP ((cid:5); P ) j= a) is coNP-complete.
Proof: (Sketch) The hardness is followed by setting P = ;,
and the membership can be proved by using Theorem 2. (cid:3)

Now we consider the complexity of irrelevance in re-
lation to strong and weak forgettings and con(cid:3)ict solving.
From a semantic viewpoint, the irrelevance tells us whether a
strong/weak forgetting or con(cid:3)ict solving procedure will af-
fect some particular atoms occurring in the underlying pro-
grams. Hence, studying its associated computational proper-
ties is important.
De(cid:2)nition 9 (Irrelevance) Let (cid:5) be a logic program, P a set
of atoms, and a an atom. We say that a is irrelevant to P in
(cid:5), if either (cid:5) j= a iff SForgetLP((cid:5); P ) j= a, or (cid:5) j= a iff
WForgetLP ((cid:5); P ) j= a.

We generalize the notion of irrelevance to the logic pro-
gram context. Formally, let (cid:6) be a logic program context and
a an atom, we say that a is derivable from (cid:6)’s ith component,
denoted as (cid:6) j=i a, if (cid:8)i = ((cid:5)i; Ci; Fi) 2 (cid:6) and (cid:5)i j= a.

De(cid:2)nition 10 (Irrelevance wrt logic program contexts)
Let (cid:6) and (cid:6)0 be two logic program contexts where (cid:6)0 2
Solution((cid:6)), and a an atom. We say that a is irrelevant with
respect to (cid:6) and (cid:6)0 on their ith components, or simply say
that a is ((cid:6); (cid:6)0)i-irrelevant, if (cid:6) j=i a iff (cid:6)0 j=i a.
Theorem 5 Let (cid:5) be a logic program, P a set of atoms, a
an atom, and (cid:6) and (cid:6)0 two logic program contexts where
(cid:6)0 2 Solution((cid:6)). The the following results hold:

1. Deciding whether a is irrelevant to P in (cid:5) is coDP-

complete;

2. Deciding whether a is ((cid:6); (cid:6)0)i-irrelevant

complete.

is coDP-

1; (cid:1) (cid:1) (cid:1) ; C 0

Proof:
(Sketch) We describe the main idea of proving
the hardness part of Result 1. a is irrelevant to P in (cid:5) if
(1) (cid:5) j= a iff SForgetLP ((cid:5); P ) j= a, or (2) (cid:5) j= a iff
WForgetLP ((cid:5); P ) j= a. Here we consider case (1) and
proof for case (2) is the same. Let ((cid:8)1; (cid:8)2) be a pair of
CNFs, where (cid:8)1 = fC1; (cid:1) (cid:1) (cid:1) ; Cmg and (cid:8)2 = fC 0
ng,
j (1 (cid:20) i (cid:20) n, 1 (cid:20) j (cid:20) n) are sets
and each Ci and C 0
of propositional
literals respectively. We also assume
Atom((cid:8)1) \ Atom((cid:8)2) = ;. We know that deciding
whether (cid:8)1 is satis(cid:2)able or (cid:8)2 is unsatis(cid:2)able is coDP-
complete [Papadimitriou, 1994]. We construct a program (cid:5)
polynomially based on set Atom((cid:8)1) [ Atom((cid:8)2) [ ^X [
^Y [ fl1; (cid:1) (cid:1) (cid:1) ; ln; p; a; sat(cid:8)1; unsat(cid:8)1; unsat(cid:8)2g, where any
two sets of atoms are disjoint and j ^Xj = jAtom((cid:8)1)j and
j ^Y j = jAtom((cid:8)2)j. (cid:5) consists of four groups of rules where
atom p only occurs in (cid:5)4:
(cid:5)1: rules to generate all truth assignments of (cid:8)1 and (cid:8)2;
(cid:5)2: rules to derive unsat(cid:8)1 and unsat(cid:8)2 if (cid:8)1 and (cid:8)2 are
unsatis(cid:2)able respectively;
(cid:5)3: rules to force a truth assignment of (cid:8)2 making :(cid:8)2 true
if unsat(cid:8)2 is derivable from (cid:5);
(cid:5)4 contains 4 rules: sat(cid:8)1   notunsat(cid:8)1, a   sat(cid:8)1,
unsat(cid:8)2   nota, p  .
Then we can prove that (cid:8)1 is satis(cid:2)able or (cid:8)2 is unsatis(cid:2)able
iff ((cid:5) j= a and SForgetLP((cid:5); fpg) j= a) or ((cid:5) 6j= a and
SForgetLP ((cid:5); fpg) 6j= a). (cid:3)

Finally, the following theorem summarizes major com-
plexity results of con(cid:3)ict solving in logic program contexts.
Theorem 6 Let (cid:6) = ((cid:8)1; (cid:1) (cid:1) (cid:1) ; (cid:8)n) and (cid:6)0 = ((cid:8)0
1; (cid:1) (cid:1) (cid:1) ; (cid:8)0
n)
be two logic program contexts, where for each (cid:8)i =
((cid:5)i; Ci; Fi) 2 (cid:6) (1 (cid:20) i (cid:20) n), (cid:8)0
i 2 (cid:6)0 is of the form
i = SForgetLP((cid:5)i; Pi) or
(cid:8)0
(cid:5)0

i = ((cid:5)0
i = WForgetLP((cid:5)i; Pi) for some Pi (cid:18) Fi.
1. Deciding whether (cid:6) has a preferred solution is NP-hard;
2. Deciding whether (cid:6)0 is a solution of (cid:6) is NP-complete;
3. Deciding whether (cid:6)0 is a preferred solution of (cid:6) is in
2, if strong and weak forgettings in (cid:6) can be computed

i; Ci; Fi), where (cid:5)0

(cid:5)P
in polynomial time 1;

1In our full paper, we have classi(cid:2)ed certain classes of logic pro-
gram contexts, where for each (cid:8)i = ((cid:5)i; Ci; Fi) 2 (cid:6) and each
Pi (cid:18) Fi, SForgetLP ((cid:5)i; Pi) and WForgetLP ((cid:5)i; Pi) can always
be computed in polynomial time.

4. For a given atom a, deciding whether for each (cid:6)00 2
2, if strong and weak for-

Solution((cid:6)), (cid:6)00 j=i a is in (cid:5)P
gettings in (cid:6) can be computed in polynomial time.

6 Conclusions
In this paper, we de(cid:2)ned notions of strong and weak forget-
tings in logic programs, which may be viewed as an analogy
of forgetting in propositional theories. Based on these no-
tions, we developed a general framework of logic program
contexts for con(cid:3)ict solving and studied the related semantic
and computational properties.

Our work presented in this paper can be extended in several
directions. One interesting topic is to associate dynamic pref-
erences to sets of forgettable atoms and components in logic
program contexts, so that the extended framework is more
(cid:3)exible to handle task-dependent con(cid:3)ict solving.
References
[Brass and Dix, 1999] S. Brass and J. Dix. Semantics of (dis-
junctive) logic programs based on partial evaluation. Jour-
nal of Logic programming, 40(1):1(cid:150)46, 1999.

[Eiter et al., 2002] T. Eiter, M. Fink, G. Sabbatini, and
H. Tompits. On properties of update sequences based on
causal rejection. Theory and Practice of Logic program-
ming, 2:711(cid:150)767, 2002.

[Lang and Marquis, 2002] J. Lang and P. Marquis. Resolv-
ing inconsistencies by variable forgetting. In Proceedings
of KR2002, pages 239(cid:150)250, 2002.

[Lang et al., 2003] J. Lang, P. Liberatore, and P. Marquis.
Propositional independence - formula-variable indepen-
dence and forgetting. Journal of Arti(cid:2)cial Intelligence Re-
search, 18:391(cid:150)443, 2003.

[Leite, 2003] J.A. Leite. Evolving Knowledge Bases: Speci-

(cid:2)cation and Semantics. IOS Press, 2003.
[Lifschitz et al., 2001] V. Lifschitz, D.

and
A. Valverde. Strongly equivalent logic programs. ACM
Transactions on Computational Logic, 2(4):426(cid:150)541,
2001.

Pearce,

[Lin and Reiter, 1994] F. Lin and R. Reiter. Forget it!

In
Working Notes of AAAI Fall Symposium on Relevance,
pages 154(cid:150)159, 1994.

[Lin, 2001] F. Lin. On the strongest necessary and weakest
suf(cid:2)cient conditions. Arti(cid:2)cial Intelligence, 128:143(cid:150)159,
2001.

[Papadimitriou, 1994] C.H. Papadimitriou. Computational

Complexity. Addison Wesley, 1994.

[Sakama and Inoue, 1999] C. Sakama and K. Inoue. Updat-
ing extended logic programs through abduction. In Pro-
ceedings of LPNMR’99, pages 2(cid:150)17, 1999.

[Su et al., 2004] K. Su, G. Lv, and Y. Zhang. Reasoning
about knowledge by variable forgetting. In Proceedings
of KR2004, pages 576(cid:150)586, 2004.

