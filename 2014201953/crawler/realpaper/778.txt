∗
Complexity Results for Checking Equivalence of Stratiﬁed Logic Programs

Thomas Eiter, Michael Fink, Hans Tompits, and Stefan Woltran

Institut f¨ur Informationssysteme, Technische Universit¨at Wien,

Favoritenstraße 9–11, A-1040 Vienna, Austria
{eiter,ﬁnk,tompits,stefan}@kr.tuwien.ac.at

Abstract

Recent research in nonmonotonic logic program-
ming under the answer-set semantics focuses on
different notions of program equivalence. How-
ever, previous results do not address the impor-
tant classes of stratiﬁed programs and its sub-
class of acyclic (i.e., recursion-free) programs, al-
though they are recognized as important tools for
knowledge representation and reasoning.
In this
paper, we consider such programs, possibly aug-
mented with constraints. Our results show that in
the propositional setting, where reasoning is well-
known to be polynomial, deciding strong and uni-
form equivalence is as hard as for arbitrary normal
logic programs (and thus coNP-complete), but is
polynomial in some restricted cases. Non-ground
programs behave similarly. However, exponential
lower bounds already hold for small programs (i.e.,
with constantly many rules). In particular, uniform
equivalence is undecidable even for small Horn
programs plus a single negative constraint.

1 Introduction

In recent years, a large body of work in answer-set program-
ming (ASP) has been devoted to obtain semantical and com-
putational characterizations of different notions of equiva-
lence between nonmonotonic logic programs. These investi-
gations were mainly concerned with strong equivalence [Lif-
schitz et al., 2001], which facilitates a replacement property
under nonmonotonicity akin, e.g., to the familiar one which
holds for classical logic, and weaker notions such as uni-
form equivalence [Eiter and Fink, 2003; Pearce and Valverde,
2004]. While the general case and certain fragments like pos-
itive programs are well-understood [Eiter et al., 2005b], the
picture remains unclear for many other fragments.

Two important such fragments are stratiﬁed programs
and its subclass of acyclic (i.e., recursion-free) programs,
which are widely used in knowledge representation (cf., e.g.,
Baral [2003]), and also play, for instance, an important role

∗This work was partially supported by the Austrian Science Fund

(FWF) under project P18019.

in deductive databases. The attractive features of such pro-
grams are their unambiguous semantics as well as their (in
the propositional case) polynomial complexity.

In ASP, programs often contain stratiﬁed subprograms
which serve, in a generate-and-test methodology [Gelfond
and Leone, 2002; Niemel¨a, 1999; Baral, 2003], for check-
ing whether a candidate is in fact a solution to the problem at
hand. For example, in the program

bad ← not ok ,
ok ← choose(X),

choose(X) ← option(X), not omit (X),

omit (X) ← option(X), not choose(X),

the ﬁrst two statements check whether at least one option was
chosen, and output “bad” if this is not the case. Typically,
to eliminate such unwanted models, a constraint ← bad is
added. This remains true if bad is deleted from the head of
the ﬁrst rule. In fact, the sets of rules P = {← bad ; bad ←
not ok ; ok ← choose(X)} and Q = { ← bad ; ← not ok ;
ok ← choose(X)} are strongly equivalent, and thus P can be
replaced by Q (and vice versa) within an arbitrary program.
If no rules in it deﬁne bad , then we can also safely drop the
constraint ← bad . We note that, as in this example, checking
parts are often acyclic. However, recursion may occur, e.g.,
in computing the transitive closure for reachability in a graph;
we remind that the capability of expressing transitive closure
is one of the assets of logic programming.

Given their importance in practice, in this paper, we con-
sider testing the equivalence of stratiﬁed programs which are
possibly augmented with constraints. Our contributions can
be brieﬂy summarized as follows.

(1) We provide a detailed picture of the computational
complexity of deciding strong and uniform equivalence be-
tween stratiﬁed respectively acyclic logic programs in the
propositional case. As we show, these problems are coNP-
complete already in very simple cases, and thus as hard as
in the general case of normal logic programs. This con-
trasts with the non-ground case, where syntactic restrictions
make strong equivalence testing (which is co-NEXPTIME-
time complete in general) easier in some cases.

(2) We elucidate the role of constraints in this context.
Without constraints, in some cases testing strong equivalence
becomes tractable and thus easier than testing uniform equiv-
alence, which remains intractable. There is a similar picture

IJCAI-07

330

in the non-ground case. A noticeable result which we estab-
lish is that uniform equivalence of two programs P and Q is
undecidable as soon as both P and Q are permitted to contain,
besides Horn rules, a single negative constraint ← not w,
where w is a propositional atom.
If it is removed in only
one of them, then we have decidability (also in the presence
of arbitrary positive constraints).

(3) We discuss the effect of some restrictions which are
important in practice including “small” programs, where the
number of rules is bounded by a constant. While strong and
uniform equivalence become unsurprisingly tractable in the
propositional case, both remain intractable (at least exponen-
tial) in the non-ground case. In fact, uniform equivalence re-
mains undecidable.

Our results ﬁll a gap in the knowledge about the complexity
of testing equivalence for stratiﬁed programs with constraints,
and complement previous results. They show that, some-
what surprisingly, already for simple propositional programs,
testing strong respectively uniform equivalence is intractable.
Recall that deciding ordinary equivalence of such programs,
i.e., whether they have the same answer set, is polynomial (in
fact, feasible in linear time). Furthermore, our results show
that also under some restrictions relevant in practice the prob-
lems remain intractable, i.e., have exponential lower bounds,
or remain even undecidable.

2 Background
We use a language containing the following (possibly inﬁnite)
sets: a set A of predicate symbols, a set V of variables, and a
set C of constants (called the domain). An atom is an expres-
sion of form p(t1, . . .,tn), where p ∈ A has arity α(p) = n
and ti ∈ C ∪ V, for 1 ≤ i ≤ n.

A rule, r, is of the form

a ← b1, . . . , bk, not bk+1, . . . , not bm,

where a is an atom or empty, b1, . . . , bm are atoms (m ≥
k ≥ 0), and “not ” denotes default negation. If a is empty,
r is a constraint; if m = 0, r is a fact; and if m = k, r
is Horn. The head of r is given by H(r) = a, and the body
of r by B(r) = {b1, . . . , bk, not bk+1, . . . , not bm}. We
also use B+(r) = {b1, . . . , bk} and B−(r) = {bk+1, . . . , bm}.
Moreover, we assume that all rules are safe, i.e., each variable
in H(r) ∪ B−(r) also occurs in B+(r).

A program is a ﬁnite set of rules. The set of variables oc-
curring in an expression e (atom, rule, program, etc.) is de-
noted by Ve, and the set of constants (resp., predicates) occur-
ring in e by Ce (resp., Ae). Expression e is ground iff Ve = ∅.
A predicate p ∈ AP is called extensional (in P ) iff there is
no r ∈ P with H(r) = p, otherwise it is intensional (in P ).
The Herbrand base, BA,C, is the set of all ground atoms over
predicates A and constants C. BP = BAP ,CP is the Herbrand
base of a program P .

Given a rule r and a set of constants C ⊆ C, we deﬁne
Gr (r, C) as the set of all rules obtained from r by all possible
substitutions of Vr by elements from C. For any program P ,
the grounding of P with respect to C is given by Gr (P, C) =
(cid:2)
r∈P Gr (r, C). In particular, Gr (P ) stands for Gr (P, Cp),
referred to simply as the grounding of P , where CP = {c} if
no constant appears in P .

A program is constraint-free, if no constraint occurs in it,
and Horn, if all rules are Horn. Constraint-free Horn pro-
grams are also called deﬁnite. A program P is called acyclic
(resp., stratiﬁed) iff there is a function f : A → N such that,
for each r ∈ P with H(r) = h being nonempty, (i) f (Ab) <
f (Ah), for each b ∈ B−(r), and (ii) f (Ab) < f (Ah) (resp.,
f (Ab) ≤ f (Ah)), for each b ∈ B+(r).

By an interpretation, I, we understand a set of ground
atoms. A ground rule r is satisﬁed by I, symbolically I |= r,
iff whenever B+(r) ⊆ I and B−(r) ∩ I = ∅, then H(r) ∈ I.
I satisﬁes a ground program P , denoted by I |= P , iff each
r ∈ P is satisﬁed by I. A set I ⊆ BP is an answer set of P
iff I is a subset-minimal set satisfying the Gelfond-Lifschitz
reduct P I [Gelfond and Lifschitz, 1991] of Gr (P ) with re-
spect to I, given by

P I = {H(r) ← B+(r) | r ∈ Gr (P ), I ∩ B−(r) = ∅}.

The set of all answer sets of P is denoted by AS(P ). As well
known, every stratiﬁed program P has at most one answer
set, which in case that P is acyclic can be deﬁned by the
completion of P [Ben-Eliyahu and Dechter, 1994].

We consider the following notions of equivalence between

two programs P and Q:

• ordinary equivalence, P ≡o Q: AS(P ) = AS(Q);
• uniform equivalence, P ≡u Q: for each ﬁnite set F of

facts, AS(P ∪ F ) = AS(Q ∪ F ); and

• strong equivalence, P ≡s Q:

AS(P ∪ S) = AS(Q ∪ S).

for each program S,

We remark that the difﬁculty to deal with uniform or strong
equivalence in the non-ground case has its origin in the ex-
tended programs which naturally enlarge the active domain,
and thus the original Herbrand bases of the programs are not
useful anymore [Eiter et al., 2005a].

3 The Propositional Case

In this section, programs are assumed to be propositional (i.e.,
all predicates have arity 0) and normal unless speciﬁed oth-
erwise. The following proposition collects results by Eiter et
al. [2005b] and some known properties.
Proposition 1 Deciding P ≡e Q for normal programs P and
Q, where e ∈ {s, u, o}, is in coNP, and if both programs are
Horn, the problem is in P. For stratiﬁed programs, deciding
P ≡o Q is in P.

We start proving a P-hardness result for the simplest class

of programs considered.
Lemma 1 Deciding P ≡e Q for acyclic deﬁnite Horn pro-
grams is P-hard, for e ∈ {o, u, s}.
Proof. We reduce the P-complete problem of monotone cir-
cuit value [Goldschlager, 1977] to the equivalence problems
in question. Such a circuit is given by a directed acyclic graph
(V, E), where V = {1, . . . , n} and each (i, j) ∈ E satisﬁes
i < j. Elements of V are so-called gates of speciﬁc sorts, viz.
(cid:13), ⊥, ∧, or ∨. Gates of the former two sorts have in-degree
0, the others have in-degree 2. All gates except n have outgo-
ing edges; n itself is called the output gate. Their semantics

IJCAI-07

331

is deﬁned straightforwardly by induction for each gate j as
follows: We have v(j) = 1 (resp., v(j) = 0), if j is of sort
(cid:13) (resp., ⊥). In the other cases, we have exactly two edges
(i1, j), (i2, j) in E and deﬁne v(j) = v(i1) · v(i2) in case j
is of sort ∧ and as v(j) = 1 iff v(i1) + v(i2) ≥ 1 in case j is
of sort ∨. Deciding whether v(n) = 1 for the output gate n is
the problem of monotone circuit value.

Given (V, E), we deﬁne a program P as follows: for each
gate j of sort (cid:13), there is a fact pj in P ; for each gate j of
sort ∨ having (i1, j), (i2, j) in E, we have rules pj ← pi1
and pj ← pi2 in P ; for each gate j of sort ∧ having (i1, j),
(i2, j) in E, we have the rule pj ← pi1
, pi2 in P . Now, given
output gate n, we compare the programs P ∪ {o ←} and
P ∪ {o ← pn}. Obviously both programs are acyclic Horn
without constraints and can be constructed from the given cir-
cuit (V, E) in polynomial time using logarithmic space.

As easily veriﬁed, we have P ∪ {o ←} ≡o P ∪ {o ← pn}
iff v(n) = 1 holds in (V, E). Moreover, by monotonicity, this
correspondence extends to ≡u and ≡s.
2

Next, we establish a further P-membership result.

Lemma 2 Deciding P ≡s Q between a normal program P
and a Horn program Q is in P, if at least one of the programs
is constraint-free.
Proof (Sketch). Since P or Q is constraint-free, the interpre-
tation I = AP ∪Q has to be a model of both P I
and Q as a
necessary condition for strong equivalence to hold. This test
is in P. However, this can only hold if the Horn program Q is
constraint-free. That is, the test amounts to check whether P
is strongly equivalent to a deﬁnite Horn program, and to test
whether P I ≡s Q, which are both in P.
2
Let us now turn to acyclic normal programs. For acyclic

programs with constraints, we obtain the following result:
Lemma 3 Deciding P ≡s Q is coNP-hard for acyclic pro-
grams (with constraints), even if Q is Horn.
Proof. We use an embedding of the coNP-complete exact
hitting set problem, given by an instance (C, S), where C
is a family of subsets of a ﬁnite set S. The problem is
to decide whether there exists a subset S(cid:4) ⊆ S such that
|S(cid:4) ∩ C (cid:4)| = 1, for each C (cid:4) ∈ C. Any such S(cid:4)
is an ex-
act hitting set (EHS) for C. For coNP-hardness, it is sufﬁ-
cient to consider C containing sets of cardinality 3. So, let
C = {{c1,1, c1,2, c1,3}, . . . , {cn,1, cn,2, cn,3}}. We construct
the acyclic program P consisting of the constraints
← ci,1, ci,2, ← ci,1, ci,3, ← ci,2, ci,3,
← not ci,1, not ci,2, not ci,3,

(2)
for 1 ≤ i ≤ n. Furthermore, consider Q = {a ←; ← a},
which is also acyclic and Horn. We show that there exists an
EHS for C iff P (cid:17)≡s Q. Clearly, this equivalence problem is
constructible in polynomial time in the size of (C, S).

Suppose that P (cid:17)≡s Q. Then, there exists a classical model
M of P . By the Constraints (2), the model is nonempty and
|{ci,1, ci,2, ci,3} ∩ M | > 0, for each 1 ≤ i ≤ n. Further-
more, in view of Constraints (1), |{ci,1, ci,2, ci,3} ∩ M| ≤ 1
has to hold for each 1 ≤ i ≤ n. But then M is an EHS.

For the only-if direction, one easily shows that any EHS S(cid:4)
of (C, S) is a classical model of P . Thus, the existence of an
EHS implies P (cid:17)≡s Q.
2

(1)

≡s / ≡u
deﬁnite
Horn
constr.-free
normal

normal
P / coNP

coNP
coNP
coNP

constr.-free Horn
P / coNP
P / coNP

P
P

coNP

deﬁnite

P

Table 1: Complexity landscape for propositional programs.

Disallowing constraints yields coNP-hardness only if both

programs use negation.
Lemma 4 Deciding P ≡s Q is coNP-hard for constraint-
free acyclic programs.
Proof (Sketch). Take the exact hitting set problem (C, S)
from the proof of Lemma 3, and deﬁne

(cid:2)

R =

1≤i≤n{a ← ci,1, ci,2; a ← ci,1, ci,3; a ← ci,2, ci,3;

a ← not ci,1, not ci,2, not ci,3;
b ← ci,1, ci,2; b ← ci,1, ci,3; b ← ci,2, ci,3;
b ← not ci,1, not ci,2, not ci,3},

P = R ∪ {b ← not a}, and
Q = R ∪ {a ← not b}.

Both P and Q are acyclic and constructible in polynomial
time from (C, S). It can be shown, that there exists an EHS
for (C, S) iff P (cid:17)≡s Q.
2
In case of checking uniform equivalence, this task is coNP-

hard as soon as negation is involved:
Lemma 5 Deciding P ≡u Q is coNP-hard for acyclic con-
straint-free programs, even if Q is Horn.

Proof. Again, take (C, S) from the proof of Lemma 3. De-

ﬁne now program P as containing, for any 1 ≤ i ≤ n,
a ← ci,2, ci,3,

a ← ci,1, ci,2,
a ← ci,1, ci,3,
a ← not ci,1, not ci,2, not ci,3.

(4)
We show that there exists an EHS for (C, S) iff P (cid:17)≡u {a ←}.
Suppose there is a set F of facts such that AS(P ∪ F ) (cid:17)=
{F ∪ {a}}. Hence, a /∈ F , and thus, without loss of general-
ity, we can assume F ⊆ S. Since a is not derived in P ∪ F ,
we must have, for each 1 ≤ i ≤ n, |{ci,1, ci,2, ci,3} ∩ F | ≤ 1
(by Rules (3)) and |{ci,1, ci,2, ci,3} ∩ F | > 0 (by Rules (4)).
But then, F is an EHS.

(3)

of P ∪ S(cid:4)

S(cid:4)
a does not occur in C, we have a /∈ S(cid:4)
turn has S(cid:4) ∪ {a} as its only answer set. Thus, P ∪ S(cid:4)
equivalent to S(cid:4) ∪ {a ←}, hence P (cid:17)≡u {a ←}.

For the only-if direction, one shows that adding any EHS
of (C, S) to P yields an answer set S(cid:4)
. Since
. But S(cid:4) ∪ {a ←} in
is not
2
Since all established hardness results carry over to stratiﬁed
programs, we eventually obtain a full picture of the complex-
ity of deciding P ≡e Q for e ∈ {u, s} between programs of
the considered classes. Note that restrictions to stratiﬁed and
even to acyclic programs did not lower the complexity.

Theorem 1 The complexity of deciding strong (resp., uni-
form) equivalence between normal propositional programs is
summarized in Table 1. All entries are completeness results,
which hold also for stratiﬁed and acyclic normal programs.

IJCAI-07

332

We complement these results by giving complexity bounds

for ordinary equivalence.

Theorem 2 Deciding ordinary equivalence between normal
stratiﬁed programs is P-complete. Hardness holds already
for acyclic deﬁnite Horn programs. Moreover, if one of the
programs is arbitrary normal, the problem is coNP-complete.

Structure-Preserving Notions of Equivalence An impor-
tant observation in case of strong equivalence is that the added
rules may destroy syntactical properties of the programs un-
der comparison, which may be unwanted. Given two acyclic
(resp., stratiﬁed) programs P and Q, it is natural to com-
pare the two programs under any admissible extension, that
is to say, only under programs which do not introduce cycles
(resp., cycles involving at least one negation) when joined
with P or Q. To the best of our knowledge, equivalence no-
tions which are sensitive to the compared programs have not
been introduced so far, with the notable exception of strong
equivalence between prioritized logic programs [Faber and
Konczak, 2005].
Deﬁnition 1 Programs P and Q are acyclicity-preserving
(resp., stratiﬁcation-preserving) strongly equivalent, denoted
P ≡ap
s Q), iff, for each program R such that
both P ∪ R and Q ∪ R are acyclic (resp., stratiﬁed), P ∪ R
and Q ∪ R possess the same answer sets.

s Q (resp., P ≡sp

For programs without negations, P ≡sp

s Q is clearly the
same as P ≡s Q. Moreover, from known results, we already
have that in this case P ≡s Q equals P ≡u Q. Thus, also
P ≡ap
s Q collapses to uniform and strong equivalence for
positive programs. Indeed, since strong and uniform equiva-
lence coincide, P (cid:17)≡s Q is witnessed by some set F of facts.
However, F does not create cycles if added to P and Q.

In general, the relation ≡sp

s differs from strong equiv-
alence, as illustrated by the following example: Consider
P = {a ← not b; a ← b} and Q = {a ← not c; a ← c}.
We have P ≡u Q but P (cid:17)≡s Q. However, P ≡sp
s Q holds
since every counterexample for P ≡s Q destroys the struc-
ture of at least one of the programs.
Theorem 3 Deciding P ≡ap
s Q) is coNP-
hard for constraint-free programs P and Q, even if Q is Horn.
Proof (Sketch). We use the same construction as in the proof
of Lemma 5, i.e., an exact hitting set problem (C, S) and the
corresponding program P . One can show that there exists an
EHS for (C, S) iff P (cid:17)≡i
2

s {a ←}, for i ∈ {ap, sp}.

s Q (resp., P ≡sp

4 Results for the General Non-Ground Case
In this section, we ﬁrst review known results for the non-
ground case, and then provide new results revealing the fol-
lowing insights: (i) Contrary to the propositional case, we
prove that for non-ground programs the complexity of decid-
ing strong and uniform equivalence decreases for acyclic pro-
grams in certain cases; and (ii) we show a new undecidability
result for uniform equivalence, strengthening an earlier re-
sult [Eiter et al., 2005a] given for disjunctive programs to the
case of normal programs.

Let us ﬁrst review the complexity of ordinary equivalence.

As follows from Dantsin et al. [2001], deciding P ≡o Q is

• EXPTIME-complete for Horn programs P , Q; and
• co-NEXPTIME-complete for normal programs P , Q.
Furthermore, it is well known that the program complexity
for acyclic Horn programs (without constraints) is PSPACE-
complete (cf., e.g., again Dantsin et al. [2001]). Hence, de-
ciding ordinary equivalence between acyclic Horn programs
can easily be shown to be PSPACE-complete.

Strong Equivalence Note that for (acyclic) Horn programs
it is known that strong and uniform equivalence coincide with
classical equivalence, which is refutable in nondeterministic
polynomial time using an oracle for the ordinary equivalence
of (acyclic) Horn programs, and thus feasible in EXPTIME
(resp., in PSPACE for acyclic programs). In turn, classical
equivalence is also hard for these classes, as shown by a re-
duction of deciding inference of an atom from a program.
Theorem 4 Deciding P ≡e Q, where e ∈ {o, u, s}, is
EXPTIME-complete given that P, Q are Horn, and PSPACE-
complete given that P, Q are acyclic and Horn. Moreover, in
each case, hardness already holds for deﬁnite programs.

Let us now consider normal programs. For arbitrary such
programs, deciding strong equivalence is in co-NEXPTIME
[Lin, 2002] as well as co-NEXPTIME-hard [Eiter et al.,
2005a]. By suitable modiﬁcations, the hardness proof can
be strengthened to acyclic programs. We therefore obtain:
Theorem 5 Deciding P ≡s Q is co-NEXPTIME-complete
for acyclic (stratiﬁed) normal programs P, Q. Hardness even
holds for constraint-free programs.

Uniform Equivalence As shown next, uniform equiva-
lence between normal programs is undecidable. The proof
reduces query equivalence between Horn programs [Shmueli,
1987] to uniform equivalence. Query equivalence (with re-
spect to a predicate q) is the problem of deciding, given Horn
programs P and Q over extensional predicates E and inten-
sional predicates I, whether for any ﬁnite database (i.e., set of
facts) D for E, it holds that P ∪ D and Q ∪ D derive the same
facts for q. We use linear programs here (i.e., programs with
at most one intensional predicate in the rule bodies) for which
query equivalence remains undecidable [Feder and Saraiya,
1992], and adapt a construction due to Eiter et al. [2005a].

First, we reduce query equivalence to program equivalence
(i.e., to the test whether P ∪ D and Q ∪ D have the same
answer sets for every ﬁnite database D) as follows: Deﬁne

P ∗ = P ∪ Q(cid:4) ∪ { p∗(X) ← p(X) } and
Q∗ = P ∪ Q(cid:4) ∪ { p∗(X) ← p(cid:4)(X) },

results from Q by replacing each intensional pred-
where Q(cid:4)
icate symbol i by i(cid:4)
is a fresh predicate which refers
to the query predicate p. Then, P and Q are query equivalent
with respect to p iff P ∗

are program equivalent.

and Q∗

and p∗

We now map the problem of program equivalence between
(linear) Horn programs to uniform equivalence between nor-
mal programs. The basic idea is that the computation of min-
imal models of programs is transformed to the computation
of certain maximal models of program reducts, viz. so-called

IJCAI-07

333

UE-models, characterizing uniform equivalence [Eiter et al.,
2005a].

In what follows, given a linear Horn program P over exten-
sional predicates EP and intensional predicates IP , let d be a
new unary predicate, w be a new propositional atom, and, for
each rule r ∈ P , denote by

• Er the list of atoms in B(r) having a predicate from EP ,
\ (VH(r) ∪
• Dr the list d(X1), . . . , d(Xm), where VIr

VEr

) = {X1, . . . , Xm}, and

• Ir the intensional predicate in B(r), if one exists, other-

wise let Ir = w.

Let now A∗
predicate symbols, and deﬁne P (cid:2)→

P = AP ∪ ¯EP , where

as follows:

¯EP = {¯e | e ∈ EP } are new

{w ← H(r) | r ∈ P, B(r) = ∅} ∪
{Ir ← Er, H(r), Dr | r ∈ P, B(r) (cid:17)= ∅} ∪
{d(c) ←| c ∈ CP } ∪
{d(Xi) ← p(X1, . . . , Xn) | p ∈ A∗
P , 1 ≤ i ≤ n} ∪
{p(X1, . . . , Xn) ← w, d(X1), . . . , d(Xn) | p ∈ A∗
{w ← e(X1, . . . , Xn), ¯e(X1, . . . , Xn) | e ∈ EP } ∪
{ ← not w}.

(5)

(6)

(7)

(8)
P } ∪ (9)
(10)

(11)

Observe that P (cid:2)→
is normal and contains a single negation.
The forthcoming result relies on the observation that two
Horn programs P and Q over the same domain (i.e., such that
CP = CQ) are program equivalent iff P (cid:2)→ ≡u Q(cid:2)→
. Together
with the result of Feder and Saraiya [1992], we thus obtain:
Theorem 6 Deciding P ≡u Q between normal programs P
and Q is undecidable. This holds already for deﬁnite Horn
programs augmented by a single negative constraint.

We remark that the problem becomes decidable if one of
the programs, say Q, is negation-free and the other has nega-
tion only in negative constraints (possibly augmented with
“domain predicates” for guaranteeing safety). Intuitively, by
monotonicity of Q, we can then disregard all the negative
constraints in P if Q is not inconsistent, while otherwise (if
Q is inconsistent) we obtain P (cid:17)≡u Q.

5 Restricted Cases

Finally, we consider results for equivalence checking in case
some parameter associated with the compared programs is
ﬁxed by a constant. Due to space reasons, the discussion here
is rather succinct and informal. A detailed formal account of
the results will be given in the full version of the paper.

In the propositional case, a ﬁxed number
Few predicates
of atoms clearly makes all considered equivalence problems
tractable. For the non-ground case, the traditional technique
for rewriting arbitrary programs to programs over a single
predicate can be shown to be faithful with respect to strong
equivalence. Hence, all the hardness (and undecidability) re-
sults for the non-ground case carry over to programs over a
few predicate symbols.

Small programs For small programs, i.e., programs with
a constant bound on the number of rules, again the proposi-
tional case shows decreasing complexity, i.e., given a ﬁxed
integer k, deciding P ≡e Q between programs with at most k
rules, for e ∈ {o, s, u}, is feasible in polynomial time.

The result in the non-ground setting is obtained from the
programs proving the undecidability of query equivalence
between deﬁnite linear Horn programs [Feder and Saraiya,
1992]. While these programs, say P and Q, have only three
rules, the number of predicates and constants is not bounded.
Thus, the programs P (cid:2)→
, used to prove Theorem 6,
are not small yet. While the number of predicate symbols in
the original programs is easily bound (which in turn bounds
the number of rules in Sets (9) and (10)), Sets (7) and (8)
still introduce an unbounded number of rules. However, both
sets can be ﬁxed to have just three rules using the following
argument rotation technique: replace (7) by the three rules

and Q(cid:2)→

d(cid:4)(c1, . . . , ck) ←,
d(cid:4)(X1, . . . , Xk) ← d(cid:4)(X2, . . . , Xk, X1),
d(X1) ← d(cid:4)(X1, . . . , Xk),

where c1, . . . , ck are all constants occurring in P . For each
p ∈ A∗
by

be a new predicate and replace (8) in P (cid:2)→

P , let p(cid:4)

p(cid:4)(X1, . . . , Xn) ← p(X1, . . . , Xn),
p(cid:4)(X1, . . . , Xn) ← p(cid:4)(X2, . . . , X1, Xn),
d(X1) ← p(X1, . . . , Xn),

where n is the arity of p. With theses modiﬁcations, undecid-
ability can be shown as before.
Theorem 7 P ≡u Q is undecidable for small programs P, Q.

Another method to restrict the number of rules is due
to Gottlob and Papadimitriou [2003], who show how Horn
programs can be faithfully transformed into single-rule pro-
grams. They also prove that logical implication between two
single Horn rules is EXPTIME-hard. From this result and the
above argument rotation technique, we can derive:
Theorem 8 Deciding P ≡e Q, where e ∈ {s, u, o}, is
EXPTIME-complete for small Horn programs P, Q.

Bounded Predicates Arities Finally, we brieﬂy discuss
bounding the predicate arities by a constant. Checking strong
and ordinary equivalence then become signiﬁcantly easier.
Note that checking answer-set existence is ΣP
2 -complete in
this setting [Eiter et al., 2004a]. Indeed, the size of the Her-
brand base BP of a program P is polynomial in the size of
P , and classical model checking (i.e., deciding I |= P given
P and I ⊆ BP ) is in coNP (note that the grounding of P can
still be exponential). For strong equivalence, it is sufﬁcient
to consider an extended Herbrand base BAP ,C, where C aug-
ments CP by polynomially many new constant symbols (this
readily follows from proofs given by Eiter et al. [2005a]).

In case of strong equivalence and ordinary equivalence, we
thus obtain that equivalence checking between normal pro-
grams is on the second level of the polynomial hierarchy.
For uniform equivalence, a similar restriction of the domain
seems not possible. In fact, in case of disjunctive programs,

IJCAI-07

334

uniform equivalence of stratiﬁed programs with constraints
remains undecidable even under bounded predicate arities
(which follows from the proof given by Eiter et al. [2005a]).
A complete picture with respect to different classes of pro-
grams in this setting is subject of future work.

Few negations A further topic for future work is concerned
with programs having a ﬁxed number of negations. We ex-
pect that all considered equivalence notions are tractable in
the propositional case, while for the non-ground setting, The-
orem 6, for instance, shows that adding a single negation to
Horn programs makes uniform equivalence undecidable.

6 Conclusion
We presented a number of complexity results about equiva-
lence testing for the important classes of stratiﬁed and acyclic
programs, which have not been studied so far, in the possi-
ble presence of constraints. We have also considered the ef-
fect of various syntactic restrictions on programs relevant in
practice. The results reveal that, already in the propositional
case, deciding strong or uniform equivalence is intractable
for simple programs. Similarly, in the non-ground case, the
problems are as difﬁcult as for arbitrary normal logic pro-
grams, and uniform equivalence is undecidable with a single
negative constraint. However, they become (much) easier un-
der certain restrictions. Therefore, our results provide useful
insights for the development of algorithms and implementa-
tions of equivalence checkers and for program optimization.
While the picture is complete for the propositional case,
in the non-ground case several issues remain open. One is
the question of (un)decidability of uniform equivalence be-
tween stratiﬁed programs in the absence of constraints. While
decidability for monadic programs follows from results by
Halevy et al. [2001] and is known for programs with joint
stratiﬁcation [Levy and Sagiv, 1993], the general case is open.
Similarly, the effect of bounded predicate arities remains to
be clariﬁed. Finally, the study of further notions of equiva-
lence, such as relativized versions of equivalence [Eiter et al.,
2005b], is subject to future work. Clearly, relativized equiv-
alence is undecidable for very limited fragments, as follows
from results on program equivalence. Nevertheless, our re-
sults provide lower complexity bounds and may help to de-
rive characterizations for relativized equivalence in the non-
ground case, which have not been formulated so far.

References
[Baral, 2003] C. Baral. Knowledge Representation, Reason-

ing and Declarative Problem Solving. CUP, 2003.

[Ben-Eliyahu and Dechter, 1994] R. Ben-Eliyahu and R.
Dechter. Propositional Semantics for Disjunctive Logic
Programs. AMAI, 12:53–87, 1994.

[Dantsin et al., 2001] E. Dantsin, T. Eiter, G. Gottlob, and
A. Voronkov. Complexity and Expressive Power of Logic
Programming. ACM CSUR, 33(3):374–425, 2001.

[Eiter and Fink, 2003] T. Eiter and M. Fink. Uniform Equiv-
alence of Logic Programs under the Stable Model Seman-
tics. In Proc. ICLP 2003, pp. 224–238, LNCS 2916.

[Eiter et al., 2004a] T. Eiter, W. Faber, M. Fink, G. Pfeifer,
and S. Woltran. Complexity of Answer Set Checking and
Bounded Predicate Arities for Non-ground Answer Set
Programming. In Proc. KR 2004, pp. 377–387, 2004.

[Eiter et al., 2005a] T. Eiter, M. Fink, H. Tompits, and
S. Woltran. Strong and Uniform Equivalence in Answer-
Set Programming: Characterizations and Complexity Re-
sults for the Non-Ground Case. In Proc. AAAI 2005, pp.
695–700.

[Eiter et al., 2005b] T. Eiter, M. Fink, and S. Woltran. Se-
mantical Characterizations and Complexity of Equiva-
lences in Stable Logic Programming. ACM TOCL. Forth-
coming.

[Faber and Konczak, 2005] W. Faber and K. Konczak.
Strong Equivalence for Logic Programs with Preferences.
In Proc. IJCAI 2005, pp. 430–435.

[Feder and Saraiya, 1992] T. Feder and Y.P. Saraiya. Decid-
ability and Undecidability of Equivalence for Linear Dat-
alog with Applications to Normal-Form Optimizations. In
Proc. ICDT 1992, pp. 297–311, LNCS 646.

[Gelfond and Leone, 2002] M. Gelfond and N. Leone. Logic
Programming and Knowledge Representation - The A-
Prolog Perspective. Artiﬁcial Intell., 138(1-2):3–38, 2002.

[Gelfond and Lifschitz, 1991] M. Gelfond and V. Lifschitz.
Classical Negation in Logic Programs and Disjunctive
Databases. New Generation Computing, 9:365–385, 1991.

[Goldschlager, 1977] L. M. Goldschlager. The Monotone
and Planar Circuit Value Problems are Complete for P.
SIGACT News, 9, 1977.

[Gottlob and Papadimitriou, 2003] G. Gottlob and C. Pa-
padimitriou. On the Complexity of Single-Rule Datalog
Queries. Inf. Comput., 183(1):104–122, 2003.

[Halevy et al., 2001] A.Y. Halevy, I.S. Mumick, Y. Sagiv,
and O. Shmueli. Static Analysis in Datalog Extensions.
JACM, 48(5):971–1012, 2001.

[Levy and Sagiv, 1993] A.Y. Levy and Y. Sagiv. Queries In-
dependent of Updates. In Proc. VLDB 1993, pp. 171–181.

[Lifschitz et al., 2001] V. Lifschitz, D.

A. Valverde.
ACM TOCL, 2(4):526–541, 2001.

and
Strongly Equivalent Logic Programs.

Pearce,

[Lin, 2002] F. Lin. Reducing Strong Equivalence of Logic
Programs to Entailment in Classical Propositional Logic.
In Proc. KR 2002, pp. 170–176.

[Niemel¨a, 1999] I. Niemel¨a. Logic Programs with Stable
Model Semantics as a Constraint Programming Paradigm.
AMAI, 25(3,4), 1999.

[Pearce and Valverde, 2004] D. Pearce and A. Valverde.
Uniform Equivalence for Equilibrium Logic and Logic
Programs. In Proc. LPNMR 2004, LNCS 2923.

[Shmueli, 1987] O. Shmueli. Decidability and Expressive-
ness Aspects of Logic Queries. In Proc. PODS 1987, pp.
237–249.

IJCAI-07

335

