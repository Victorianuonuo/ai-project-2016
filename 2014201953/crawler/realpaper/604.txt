Maximizing Flexibility: A Retraction Heuristic for Oversubscribed Scheduling 

Problems 

Laurence A. Kramer  and  Stephen F. Smith 

The Robotics Institute, Carnegie Mellon University 

5000 Forbes Avenue, Pittsburgh PA 15213 

{lkramer,sfs}@cs.cmu.edu 

Abstract 

In this paper we consider the solution of schedul(cid:173)
ing problems that are  inherently over-subscribed. 
In such problems, there are always more tasks to 
execute within a given time frame than available 
resource capacity will allow,  and hence decisions 
must  be  made  about  which  tasks  should be  in(cid:173)
cluded  in the schedule and  which should be ex(cid:173)
cluded.  We  adopt  a  controlled,  iterative  repair 
search approach, and focus on improving the re(cid:173)
sults of an initial priority-driven solution generation 
procedure. Central to our approach is a new retrac(cid:173)
tion heuristic, termed max-flexibility, which is re(cid:173)
sponsible for identifying which tasks to (temporar(cid:173)
ily) retract from the schedule for reassignment in an 
effort to incorporate additional tasks into the sched(cid:173)
ule.  The  max-flexibility  heuristic  chooses  those 
tasks that have maximum flexibility for assignment 
within their feasible windows. We empirically eval(cid:173)
uate the performance of max-flexibility using prob(cid:173)
lem data and the basic scheduling procedure from a 
fielded airlift mission scheduling application.  We 
show  that  it  produces  better improvement  results 
than two contention-based retraction heuristics, in(cid:173)
cluding  a  variant  of min-conflictsLMinton  et  al., 
1992], with significantly less search and computa(cid:173)
tional cost. 

Introduction 

1 
Many scheduling domains present problems that are oversub(cid:173)
scribed; problems where there are more tasks to be performed 
over a given time frame than can be feasibly accommodated 
by available resources. In such problems, it is inevitably nec(cid:173)
essary to exclude some tasks from the schedule.  Hence, a 
basic objective is to maximize resource utilization (or some(cid:173)
what equivalently to accommodate as many tasks as possi(cid:173)
ble).  However, in many cases, the situation is further com(cid:173)
plicated.  Input tasks are often differentiated by priorty, im(cid:173)
plying that some tasks are more important than others and if 
necessary should be included at the expense of others. In the 
particular domain that motivates this work, for example, task 
priorities must be rigidly respected. Though it is theoretically 

possible to trade one higher priority task for a set of lower pri(cid:173)
ority tasks in some circumstances, this is the exception rather 
than the rule. Thus, the objective is to accommodate as many 
tasks as possible within this constraint. 

Oversubscribed problems present an interesting challenge 
for  constraint-directed  search  procedures.  Oversubscribed 
problems  are  not  particularly  well  suited  to  formulation 
within a standard backtracking search framework. Hence the 
application of constructive approaches depends heavily on the 
ability of search control heuristics to anticipate resource inter(cid:173)
actions. Repair-based approaches, on the other hand, tend to 
operate myopically through infeasible intermediate states in 
hopes of arriving at a better final feasible state.  Their effec(cid:173)
tiveness in the presence of global constraints (such as enforce(cid:173)
ment of priority) will similarly rely on the ability of search 
heuristics to effectively focus the repair process. 

In this paper, we take a repair-based search perspective of 
the problem and focus on locally improving an initial solu(cid:173)
tion. We assume that the initial solution generator is priority-
driven, and define a controlled, task swapping search proce(cid:173)
dure for finding and exploiting opportunities to rearrange cur(cid:173)
rently scheduled tasks and incorporate additional tasks that 
were  excluded  from the initial solution.  To direct the re(cid:173)
pair process we introduce a novel retraction heuristic, max-
flexibility,  for choosing  which  tasks  to  (temporarily)  retract 
to  make  room  for  additional,  lower priority tasks.  Max-
flexibility chooses based on a simple measure of the relative 
temporal  flexibility  that alternative competing tasks have for 
feasible re-assignment elsewhere in the schedule. 

We  evaluate  the  efficacy  of  this  approach  using  data 
and  the  basic  scheduling procedure  obtained from  a  real-
world,  multi-mission scheduling  problem:  the  day-to-day 
airlift scheduling problem  faced  by  the  USAF  Air Mobil(cid:173)
ity Command (AMC). We compare the performance of max-
flexibility to a variant of the min-conflicts heuristic  [Minton 
et ai,  1992] (adapted to serve as a retraction heuristic) and 
another more-informed contention-based heuristic. 

2  Basic Allocation Procedure 
Without loss of generality the AMC scheduling problem can 
be characterized abstractly as follows: 

•  A  set  T  of tasks  (or missions)  are  submitted for exe(cid:173)
cution.  Each task  i  £  T has  an earliest pickup time 

1218 

SCHEDULING 

a latest delivery time 

a pickup location  

a  dropoff location  desti,  a  duration di, (determined  by 
origi  and  desti)  and  a priority  pri 

•  A  set  Res  of resources  (or air  wings)  are  available  for 
has 
(corresponding to the number of con(cid:173)

assignment  to  missions.  Each  resource  r 
capacity 
tracted aircraft for that wing). 

•  Each  task  i  has  an  associated  set 

of  feasible  re(cid:173)
sources (or air wings), any  of which can be assigned to 
carry out i.  Any given task  i requires  1  unit of capacity 
(i.e.,  one  aircraft)  of the  resource  r  that  is  assigned  to 
perform it. 

•  Each  resource  r  has a  designated  location  home,.  For 
requires a posi(cid:173)
and 
to travel  from desti  back 

a given task  i,  each  resource  r 
tioning time 
a de-positioning time 
to  homer. 

to  travel  from  homer  to 

A  schedule  is  a feasible assignment  of missions  to  wings. 
To  be  feasible,  each  task  i  must  be  scheduled  to  execute 
within  its 
interval,  and  for  each  resource  r  and 
time  point  /, 
Typically,  the  prob(cid:173)
lem  is  over-subscribed  and  only  a  subset  of tasks  in  T  can 
be  feasibly accommodated.  If all  tasks cannot be scheduled, 
preference is given to higher priority tasks.  Tasks that cannot 

Both the scale and continuous, dynamic nature of the AMC 
scheduling  problem  effectively  preclude  the  use  of system(cid:173)
atic solution procedures that can guarantee any  sort of maxi(cid:173)
mal  accommodation of the tasks  in T.  The approach adopted 
within  the  AMC  Allocator  application  instead  focuses  on 
quickly  obtaining  a  good  baseline  solution,  and  then  pro(cid:173)
viding a  number  of tools  for the  end  user  to  selectively  re(cid:173)
lax  problem  constraints  to  incorporate  as  many  additional 
(initially unassignable) tasks  as  possible [Becker and  Smith, 
2000; Kramer and Smith, 2002]. 

The  basic  allocation procedure used  within the AMC  Al(cid:173)
locator constructs a  schedule  incrementally;  the set of unas-
signcd  input  missions  is  first  prioritized,  and  then missions 
are successively inserted into the current partial scheduling in 
priority order.  The prioritization scheme utilized in the initial 
step considers the assigned priority pr(i)  of each mission i as 
its dominant ordering criterion.  In case  of missions of equal 
priority,  secondary  criteria  give preference  to missions  with 
earlier possible start times and smaller overall slack.  A given 
mission  i  is  inserted into the  schedule  via  a  search  of alter(cid:173)
native options.  More  specifically,  for each  r  R  i,  a  set  of 
candidate execution intervals is generated and evaluated, and 
the highest ranked alternative  is selected as  the assignment. 
In  the  search  procedure's  basic  configuration,  only  feasible 
intervals  are  generated  and  the  evaluation  function  empha(cid:173)
and execute i as 
sizes choices that minimize 
early as possible.  If a mission cannot be feasibly assigned, it 
is marked as unassignable. 

This scheduling process  allows  for assignment of individ(cid:173)
ual  missions  on  the  order  of  milliseconds,  with  a  two  to 

three  week  window  of approximately  a  thousand  missions 
assignable in a few seconds. 

Since it is generally expected that several or more missions 
will be unable to be assigned during the first pass allocation 
process,  the  user can  direct the  system  to automatically ex(cid:173)
plore  the  space  of constraint  relaxation  options  on  a  given 
mission, or can do this on a more interactive basis.  Available 
relaxation options include delaying a mission beyond its due 
date,  over-allocating beyond contracted capacity on a  wing, 
bumping  a  lower priority  mission,  or  some  combination  of 
these basic options.  Specifically tailored evaluation functions 
are used  when searching in the space  of relaxed  constraints. 
For instance, when searching for delay options, the dominant 
optimization criterion is minimizing tardiness.1 

Improving on the Initial Solution 

3 
The  quality  of any  schedule  produced  by  the  above  greedy 
procedure  will  be  a  function  in  large  part  of its  prioritiza(cid:173)
tion  heuristic.  This  heuristic dictates  the  assignment  possi(cid:173)
bilities that will  be  available to a  given  task  i  at the  time  it 
is  inserted into the  schedule,  and  consequently  which tasks 
will ulitmately end up as unassignable. As just indicated, this 
heuristic gives over-riding preference to higher priority tasks. 
This  bias  in  fact  reflects  the  basic  scheduling  policy  in  the 
AMC application domain. 

At the same  time,  strict relance  on  this ordering heuristic 
can obviously lead to sub-optimal solutions.  It is quite pos(cid:173)
sible that some "rearrangement" of the assignments of higher 
priority tasks could enable the feasible insertion of additional, 
lower  priority  tasks.  Since,  in  practice,  the  end  user  may 
spend non-trivial amounts  of time analyzing and  negotiating 
constraint relaxation options to enable  incorporation of addi(cid:173)
tional unassignable missions, it makes sense to consider tech(cid:173)
niques for productively broadening the  search  performed  by 
this basic procedure. 

Two broad classes of approaches have been pursued in the 
literature.  One set of approaches (e.g.,  LJoslin and Clements, 
1998; Bresina,  1996; Cicirello and Smith, 2002]) focuses on 
exploring a "neighborhood" around the trajectory of the base 
heuristic. 
In  our context,  this  would  correspond  to  repeat(cid:173)
edly perturbing the task order in  some  manner and  reapply(cid:173)
ing the  basic  search  procedure.  Another  set  of approaches 
have been termed iterative repair (e.g.,  [Minton et  al,  1992; 
Zweben et al., 1994; Rabideau et ai,  1999]), wherein an ini(cid:173)
tial base solution is progressively revised (and hopefully im(cid:173)
proved) over time.  In our context,  this would correspond to 
repeated  retraction  and  (rc)assertion  of subsets  of task  as(cid:173)
signments.  Both  sets  of approaches  have  natural  anytime 
properties.  One  interesting requirement  in the  current  con(cid:173)
text, however,  is that we would like to guarantee that higher 
priority missions won't be  supplanted by  lower priority mis(cid:173)
sions.  In the case of iterative re-solving approaches, enforce(cid:173)
ment of this constraint would seem  possible only in a  rather 

'A separate search procedure designed to identify and exploit 
opportunities  for  reclaiming  resource  capacity  by  combining  (or 
"merging") two or more roundtrip missions into one is  also pro(cid:173)
vided, but this capability is orthogonal to the techniques discussed 
in the current paper. 

SCHEDULING 

1219 

indirect way  (through global  filtering  of the solutions gener(cid:173)
ated).  Iterative repair approaches typically involve generation 
of infeasible  solutions  and  are  thus  potentially  well-suited 
to  controlled exploration  of solution  improvement  opportu(cid:173)
nities.  However,  they  are  generally  not designed to enforce 
global solution constraints. 

Accordingly,  the  approach  we  propose takes the  solution 
improvement  perspective  of  iterative  repair  methods  as  a 
starting point,  but  manages  solution change  in  a  more  sys(cid:173)
tematic, globally constrained manner.  Starting with an initial 
baseline solution and a set U of unassignable tasks, the basic 
idea is to spend some amount of iterative repair search around 
the "footprint" of each  unassignable task's feasible execution 
window in the schedule.  Within the repair search for a given 
criteria other than task priority are used to determine 
which task(s) to retract next, and higher priority tasks can be 
displaced  by  a  lower priority  task. 
If the  repair search  car(cid:173)
ried out for a given task u can find a feasible rearrangement 
of currently scheduled tasks that allows u to be incorporated, 
then  this solution  is  accepted,  and  we  move  on  to the  next 
unconsidered task 
If, alternatively, the repair search 
for a given task u is not able to feasibly reassign all tasks dis(cid:173)
placed by the insertion of u into the schedule, then the state of 
the schedule prior to consideration of u is restored, and u re(cid:173)
mains unassignable.  Conceptually, the approach can be seen 
as successively relaxing and reasserting the global constraint 
that higher priority missions must take precedence over lower 
priority missions, temporarily creating "infeasible" solutions 
in hopes of arriving at a better feasible solution. 

In the  subsections  below,  we  describe  this task  swapping 

procedure, and the heuristics that drive it, in more detail. 

3.1 

Task Swapping 

Figure 2:  Basic MissionSwap Search Procedure 

Given  these  preliminaries,  the  basic  repair  search  proce(cid:173)
dure  for inserting an  unassignable task,  referred  to as  Mis(cid:173)
sionSwap, is outlined in Figure 2.  It proceeds by computing 
(line  2),  and  then  retracting  one  conflict(cid:173)
ing task for each 
(line3). 
This  frees  up  capacity  for inserting task  (line  5),  and  once 
this is done, an attempt is made to feasibly reassign each re(cid:173)
tracted  task  (line  6).  For  those  retracted  tasks  that  remain 
unassignable,  MissionSwap  is  recursively  applied  (lines  7-
10). As a given task is inserted by MissionSwap, it is marked 
as  protected,  which  prevents  subsequent  retraction  by  any 
later calls to MissionSwap. 

In  Figure  3,  top-level  InsertUnassignableTasks  proce(cid:173)
dure is shown.  Once  MissionSwap has been  applied to all 
unassignable tasks,  one last attempt is made to schedule any 
remaining tasks.  This step attempts to capitalize on any op(cid:173)
portunities  that  have  emerged  as  a  side-effect  of Mission-
Swap's schedule re-arrangement. 

The  driver of this repair process  is the retraction heuristic 
ChooseTaskToRetract.  We define several possibilities in the 
next subsection. 

1220 

SCHEDULING 

Figure 3:  InsertUnassignableTasks procedure 

3.2  Retraction  Heuristics 
In designing a retraction heuristic, our general goal is to re(cid:173)
tract the task  assignment that posseses  the  greatest potential 
for reassignment. One simple estimate of this potential is the 
scheduling  flexibility  provided by  a task's feasible execution 
interval.  More precisely,  let 
repre(cid:173)
sent the amount of time available for executing task ?. Then a 
simple, resource-indepedent measure  of flexibility is 

However, recall that di is not the total amount of time that 
the  supporting resource  must  be  allocated  for.  dt  only  ac(cid:173)
counts  for the  time  required to execute  the  task;  it does not 
account  for the time to position and  deposition the resource 
for  task  execution.  The  total  time  that  a  given  resource  r 
must be allocated for is 
Given that the resources being allocated are generally sched(cid:173)
uled near to capacity, a worst-case, resource-dependent mea(cid:173)
sure offlexibilty is  

A potentially more  informed measure  of contention is one 
that considers the proportion of a task  i's  required execution 
interval on resource  r that is currently unavailable (i.e.,  con(cid:173)
tained in a conflict).  For any conflict 
assume  that  dure  designates  the  duration  of int.  Then  we 
define a task /'s overall contention level as 

Using this measure, we can define a third retraction heuristic: 

4  Computational Analysis 
The genesis  of the max-flexibility heuristic and the mission-
swap  algorithm  took  place  while  experimenting  with  the 
canonical data set used to test and demonstrate the AMC Al(cid:173)
locator. This data set, which we'll refer to as the Tutorial Data 
Set, consists of 982 actual missions (3,251 operations) and 12 
actual air wings, and represents a two to three week  horizon 
of AMC  airlift and air refueling missions. 

Using the basic allocation procedure the system  is able to 
feasibly allocate all but two of the 982 missions in the Tutorial 
Data Set.  For demonstration purposes those two missions are 
usually added to the schedule by over-allocating a given wing. 
It  turned  out  that  this  particular  data  set  was  not  as  re(cid:173)
source  over-constrained  as  we  had  thought.  Application of 
the  mission-swap  algorithm  with  even  a  random  retraction 
heuristic  is  able  to  schedule  the  two  unassignable  missions 
in a few seconds. 

4.1  Experimental  Design 
For our experiments we generated data sets using the Tutorial 
Data  Set  as  a  seed:  five  data  sets  of twenty problems  each 
were  generated,  with the  wing capacities  randomly reduced 

For each  data set,  the basic allocation procedure was 
employed to quickly schedule as many missions as possible 
in priority order.  The  number of unassignable  missions was 
recorded,  and  then  InsertUnassignableTasks  was  executed 
on  the  set  of unassignable  missions.  Then  run-time,  nodes 
searched  (number  of times  MissionSwap  was  called),  and 
final  number  of unassignable  missions  were  recorded.  For 
each run this process was repeated  with min-conflicts,  min-
contention, max-flexibility and random choice as the retrac(cid:173)
tion heuristic (ChooseTaskToRetract,  in Figure2). 

Experiments  were  run  on  a  1.8Ghz  Pentium  IV  PC  with 
1 Gb of RAM, running Windows 2000. The scheduling engine 
is implemented in Allegro Common Lisp 6.1. 

4.2  Results 
The  results  of  our  experiments  are  shown  in  Figures  4, 
5,  and  6.  As  expected,  as  the  random  degree  of  over-
allocation was  increased  from  10% to  50%,  the  number of 
initial unassignable missions increased, as did the numbers of 
unassignables after application of InsertUnassignableTasks. 
Over  all  problem  sets  the  baseline  random-choice  heuristic 

SCHEDULING 

1221 

Figure 6:  Search Nodes Explored 

more highly constrained, contention will increase to the limit 
of available capacity, and thus its measure will serve as a less 
informed heuristic.  Under these  conditions, though, a  met(cid:173)
ric based on a task's "innate"  flexibility to schedule along a 
timeline might be more useful. 

5  Related Work 
The use of measures of temporal flexibility and resource con(cid:173)
tention as guidance for variable and value ordering has a long 
history in the  field  of constraint-directed scheduling  [Sadeh, 
1991; Smith and Cheng, 1993; Beck, 1999], although for the 
most part use has been  in constructive search contexts.  Our 
work, alternatively, seeks to exploit these measures in an iter(cid:173)
ative repair search context, to determine which tasks to retract 
and reassign. 

Work in manufacturing scheduling domains has addressed 
a  broad  range  of priority  based  scheduling  problems [Mor(cid:173)
ton and Pentico,  1993], and some of this work (e.g.,  [Smith, 
1994])  discusses  heuristic  techniques  for  schedule  repair. 
However, a broad assumption that underlies most of this work 
is that due dates are relaxable and the objective is to minimize 
tardiness. As such, these are not over-subscribed problems in 
the same sense as the type of problem considered here. 

Research  in  the  domain  of  space  mission  planning  and 
scheduling, alternatively, has focused on the solution of over(cid:173)
subscribed  problems  (e.g.,  [Minton  et  al.,  1992;  Johnston 
and Miller,  1994; Rabideau et al,  1999]).  Generally this re(cid:173)
search is aimed at solving the single mission, single resource 
problem (e.g., the observing schedule for a space telescope). 
[Zweben et al.9  1994]'s shuttle ground processing domain is 
one  exception,  wherein  both  multiple  resources  and  multi-
capacity resources  are  considered.  The  approach  employed 
here  is  repair-based,  and  simple  heuristics are  employed  to 
mitigate  resource  constraint  violations. 
It  is  not  clear  how 
useful this technique would be, however, in addressing prob(cid:173)
lems where maintaining task priority is crucial. 

Recent work in the area of scheduling observations on mul(cid:173)
tiple  earth  satellites  comes  closest  to  tackling  the  same  is(cid:173)
sues  which  we  address:  multiple  resources,  multi-capacity 
resources, fixed time windows, and mission priority.  [Pem-
berton, 2000] proposes a solution to preserving priority in the 

Figure 5:  Computational Cost 

was able to assign 36% of the unassignable missions.  Min-
conflicts, min-contention and max-fiexibility were able to as(cid:173)
sign 30%, 38%, and 42%, respectively. 

What is most striking, though, are the results shown in fig(cid:173)
ures  five  and six.  While max-flexibility achieved  somewhat 
better results in solution quality, it did so while searching far 
less and reaching a solution far more quickly than any of the 
competing heuristics. 

4.3  Discussion 
Our  preliminary  results  show  that  in  the  face  of a  resource 
constrained scheduling problem, the decision of what tasks to 
temporarily retract in order admit more tasks into the sched(cid:173)
ule may be delegated to an extremely simple and cheap retrac(cid:173)
tion heuristic:  max-flexibility.  In order for this heuristic to be 
effective it should retract tasks that have a high likelihood of 
reassignment elsewhere within their feasible windows. 

It is somewhat counter-intuitive, then, that max-flexibility 
is able to perform so well, based only on task  flexibility  to re(cid:173)
schedule,  irrespective of other competing tasks in the sched(cid:173)
ule.  Min-contention  performance  approaches  that  of max-
flexibility,  but  only  at  significant  additional  cost  -  approxi(cid:173)
mately triple the run-time on average in our experiments. 

Our conjecture  is  that  as  a  schedule  becomes  more  and 

1222 

SCHEDULING 

face  of over-constrained  resources  by  segmenting  the  prob(cid:173)
lem  into priority classes,  solving them  individually, and re-
combining them.  [Frank  et al,  2001]  propose a  contention-
based  heuristic  for  use  in  solving  a  very  similar  problem 
within an iterative sampling framework.  However, no experi(cid:173)
mental analysis is given. 

Finally,  work  in  constraint  satisfaction  problem  solving 
(CSP) has  explored ideas  similar to those  introduced in  this 
paper.  [Verfaillie and Schiex,  1994] describe a repair proce(cid:173)
dure  similar to  MissionSwap  for  non-disruptively resolving 
conflicts  in  dynamic  CSPs  (actually  motivated  by  previous 
work on a continuous, single-resource scheduling problem). 
[Prcstwich,  2001] utilizes a "largest  domain  first"  retraction 
heuristic to drive an incomplete backtracking procedure. 

6  Conclusions 
We  have  presented  a  novel  retraction  heuristic,  max-
flexibility,  and  shown its applicability to a multi-mission air-
lift  scheduling  problem.  This  heuristic  is  much  faster  and 
less memory intensive than min-confiicts and min-contention, 
and  provides better  solution quality.  We  suggest  that  max-
flexibility  as  used  in  a  generic  task  swapping  algorithm 
like mission-swap may  generally  be  applicable to resource-
constrained  scheduling  problems  with  fixed  time  windows. 
This  method  is  particularly  suitable  to  dynamic  scheduling 
domains,  where  an  existing  schedule  must  be  preserved  as 
tasks change and new ones are added. 

It is possible that with further study and experimentation a 
more informed retraction heuristic than max-flexibility might 
be found.  It is likely, though, that such a heuristic would be 
much more expensive, and that a heuristic that is fairly smart, 
but very cheap, may be the best choice of all. 

Acknowledgements 
The  work  reported  in  this  paper  was  sponsored  in  part 
by  the  Department  of Defense  Advanced  Research  Projects 
Agency  (DARPA)  and  the  US  Air  Force  Research  Labora(cid:173)
tory  under  contracts  F30602-00-2-0503  and  F30602-02-2-
0149,  by  the  USAF  Air Mobility  Command  under subcon(cid:173)
tract  10382000  to  Northrop-Grumman  Corporation,  and by 
the CMU Robotics Institute. 

References 
[Beck, 1999] J.C. Beck. Texture measurements as a Basis for 
Heuristic  Commitment  Techniques  in  Constraint-Directed 
Scheduling.  PhD thesis, Dept. of Computer Science,  Uni(cid:173)
versity of Toronto,  1999. 

[Becker and Smith, 2000]  M.A  Becker  and  S.F  Smith. 
Mixed-initiative  resource  management:  The  amc  barrel 
In  Proc.  5th  Int.  Conf.  on  AI  Planning  and 
allocator. 
Scheduling, pages 32-41, Breckenridge CO, April 2000. 
[Bresina,  1996]  J. Bresina.  Heuristic-baised stochastic sam(cid:173)
In  Proceedings  13th  national  Conference  on  AI, 

pling. 
pages 271-278, Portland OR, 1996. AAA1 Press. 

[Cicirello and Smith, 2002]  V. Cicirello and S.F Smith. Am(cid:173)
plification  of search  performance  through  randomization 

of heuristics. 
Practice  of  Constraint  Programming, 
2002. Springer-Verlag. 

In  Proc.  8th  Int.  Conf  on  Principles  and 
Ithaca  NY,  Sept 

[Frank etal., 2001]  J.  Frank,  A.  Jonsson,  R.  Morris,  and 
Smith  D.E.  Planning  and  scheduling  for fleets of earth 
In  Proc.  6th Int.  Symposium on AI, 
observing satellites. 
Robotics and Automation for Space, 2001. 

[Johnston and Miller,  1994]  M.D.  Johnston  and  G.  Miller. 
Spike:  Intelligent  scheduling  of hubble  space  telescope 
In  M.  Zweben  and  M.  Fox,  editors,  Intel-
observations. 
ligent Scheduling. Morgan Kaufmann Publishers,  1994. 

[Joslin and Clements,  1998]  D.E.  Joslin and  D.P.  Clements. 
Squeakywheel  optimization.  In Proc.  15th National Con(cid:173)
ference on AI, Madison Wl, July  1998. AAA1 Press. 

[Kramer and Smith, 2002]  L.  Kramer and  S.F  Smith.  Opti(cid:173)
mizing for change:  Mixed-initiative resource management 
In  Proc.  3rd  Int.  Work(cid:173)
with  the  amc  barrel  allocator. 
shop on Planning and Scheduling for Space, Houston, Oct 
2002. 

[Minton et ai,  1992]  S. Minton, M.D. Johnson, A.B Philips, 
and  P.  Laird.  Minimizing  conflicts:  A  heuristic  repair 
method  for  constraint  satisfaction  and  scheduling  prob(cid:173)
lems.  Artificial Intelligence,  58(1): 161-205,1992. 

[Morton and Pentico,  1993]  T.E.  Morton and  D.W.  Pentico. 
Heuristic scheduling Systems.  John Wiley and Sons,  1993. 
[Pemberton, 2000]  J.C. Pemberton. Toward scheduling over-
constrained remote-sensing satellites.  In Proceedings 2nd 
Int.  NASA  Workshop  on  Planning  and  Scheduling  for 
Space, San Francisco, CA, March 2000. 

[Prcstwich, 2001]  S. Prestwich.  Local search and backtrack(cid:173)
In  Proc.  AAA1 Fall 
ing  vs  non-systematic  backtracking. 
Symposium  on  Using  Uncertainty  within  Computation, 
North Falmouth, MA, Nov 2001. 

[Rabideau  et  a.,  1999]  G.  Rabideau,  R.  Knight,  S.  Chien, 
A.  Fukanaga,  and  A.  Govindjee. 
Iterative  planning  for 
spacecraft operations using the aspen system.  In Proc.  5th 
Int. Sym. on Ah Robotics and Automation for Space, 1999. 
[Sadeh,  1991]  N.  Sadeh.  Look-Ahead techniques for Micro-
Opportunistic Job Shop Scheduling.  PhD  thesis,  Dept.  of 
Computer Science, Carnegie Mellon University,  1991. 

[Smith and Cheng,  1993]  S.F  Smith  and  C.  Cheng.  Slack-
based heuristics for constraint satisfaction scheduling.  In 
Proc. 11th  National  Conference  on  Artificial  Intelligence, 
pages 139-144, Wash DC, July 1993. AAA1 Press. 

[Smith,  1994]  S.F.  Smith.  Opis:  A methodology and archi(cid:173)
tecture for reactive scheduling.  In M. Zweben and M. Fox, 
editors, Intelligent Scheduling. Morgan Kaufmann,  1994. 
[Verfaillie and Schiex,  1994]  G. Verfaillie and T. Schiex. So(cid:173)
lution reuse  in  dynamic  constraint satisfaction problems. 
In Proc.  12th National Conf. on AI, Seattle WA, Aug  1994. 
[Zweben et al.,  1994]  M.  Zweben,  B.  Daun,  E.  Davis,  and 
M.  Deale.  Scheduling  and  rescheduling  with  iterative 
In  M.  Zweben  and  M.  Fox,  editors,  Intelligent 
repair. 
Scheduling. Morgan Kaufmann Publishers,  1994. 

SCHEDULING 

1223 

