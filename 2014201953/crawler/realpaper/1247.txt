STATE  SPACE  MODELS  OF  REMOTE  MANIPULATION  TASKS* 

D a n i el  E.  Whitney 

A s s i s t a nt  P r o f e s s o r,  Department  of  M e c h a n i c al  E n g i n e e r i ng 

Massachusetts 

I n s t i t u te  of  Technology 

Cambridge,  Massachusetts 

Summary 

to 

f or 

t he 

t a sk 

remote 

t he  m a n i p u l a t or  and 

is  a  d e s i r ed  new  s t a t e. 

f o r m u l a t i on  of 
is  p r e s e n t e d,  a p p l i c a b le 

A  d i s c r e te  s t a te  v e c t o r,  c o n t a i n i ng  p o s i(cid:173)
r e l e v a nt 

A  s t a te  v a r i a b le 
m a n i p u l a t i on  p r o b l em 
human  s u p e r v i s ed  or  autonomous  c o m p u t e r - m a n i p u l a(cid:173)
t o r s. 
t i on  v a r i a b l es 
o b j e c t s,  spans  a  q u a n t i z ed  s t a te  space  c o m p r i s i ng 
many  s t a t ic  c o n f i g u r a t i o ns  of  o b j e c ts  and  h a n d. 
A  m a n i p u l a t i on 
t r a n s i t i o ns  a re  a s s i g n ed  c o s ts  and  are  accom(cid:173)
p l i s h ed  by  commands: 
l e a s e,  p u s h, 
t he  p r o b l em 
t o ry 
( if  any) 
theorem  p r o v i ng 
and  axioms 
t a s k. 
"The 
to 
f i n d i ng 
A  method  s i m i l ar 
to  d e t e r m i ne 

hand  m o t i o ns  p l us  g r a s p,  r e(cid:173)
terms 

to  p r o ve 
. 
. is  p o s s i b l e ." 
t he  s h o r t e st  p a th 

t he  cheapest  c o n t r ol  h i s(cid:173)
In 

to  combine  p r e d i c a t es 
the  p r o p o s i t i on 

Each  corresponds 
to 

to  Dynamic  Programming 

t he  o p t i m al  h i s t o r y. 

t he  d e s i r ed  s t a t e. 

to  d e s i r ed  s t a t e. 

( or  d i s p r o v e) 

from  p r e s e nt 

t w i s t,  e t c. 

In  c o n t r ol 

is  used 

t h e o ry 

terms 

f i nd 

to 

is 

is 

it 

S t a te 

is  c a p a b le  of  o b s t a c le  a v o i d a n c e, 

The  system 
r e n d e z v o u s, 
remembering  r e s u l ts  of  p r e v i o us 

i n c o r p o r a t i on  of  new  sensor 

t a s k s,  and 

grasp 
d a t a, 
so  o n. 

Keywords: 

Remote  M a n i p u l a t i on 
C o n t r ol  Theory 
Problem  S o l v i ng 
Theorem  P r o v i ng 

to  maneuver  and  m a n i p u l a te  u n a i d ed 

ed 
t a nt  e n v i r o n m e n t .1 1*1 

in  a  d i s(cid:173)

Major  problems 

in 

t he  d e s i gn  of  human  s u p e r(cid:173)

v i s ed  or  autonomous  c o m p u t e r - m a n i p u l a t o rs  a re 

1)  Model  and  r e al  w o r ld  of  h a n d s,  o b j e c ts 

and  o b s t a c l e s. 

the  n o t i on  of  m a n i p u l a t i on 

2)  D e f i ne 
t a s k. 
3)  Develop  methods  w h i ch  g e n e r a te  p l a ns  of 
r e l e v a nt 
m a n i p u l a t i ve  a c t i on  w h i ch  a re 
to 
in 
1 ))  and  w h i ch  a re  capable  of  a c h i e v i ng 
t he  s t a t ed  g o al 

t a sk  e n v i r o n m e nt 

(as  expressed 

(as  m o d e l l ed 

In  2 ) ). 

t he 

To  s o l ve 

these  p r o b l e m s,  we  s h a ll  c o n s i d er 

i n(cid:173)

t he 

t he  hand 

in  w h i ch  o n ly 

t a sk  s i te  as  a  s y s(cid:173)

to  be  c o n t r o l l ed  by  an  o p e r a t or  or  o t h er 

T h is  approach  d i f f e rs 
is 
A  s t a te  v e c t or 

t he  m a n i p u l a t o r 's  hand  and 
tem 
from  p r e v i o us 
t e l l i g e n c e. 
i n c l u d ed 
in 
w o r k1" *15 
is  d e f i n e d, 
t he  system  m o d e l. 
c o n t a i n i ng  n ot  o n ly  v a r i a b l es  w h i ch  d e s c r i be 
the 
m a n i p u l a t i ve  d e v i c e,  b ut  a l so  v i t al  parameters  of 
l o c a t i o ns  of 
t a sk  s i t e,  p o s s i b le 
v a nt  o b j e c ts  and  o b s t a c l e s. 
T h is  v e c t o r,  s u i t a b ly 
q u a n t i z e d,  spans  a  d i s c r e te  s t a te  space  w h i c h c o n(cid:173)
t a i ns  many  d i f f e r e nt  s t a t ic  c o n f i g u r a t i o ns  of 
the 
m a n i p u l a t or  and 
A 
to  be  m a n i p u l a t e d. 
m a n i p u l a t i on 
w h i ch 
t he  m a n i p u l a t o r - o b j e c t s - o b s t a c l es  system 
S t a te 
q u a n t i z ed  b a s ic  m o t i o ns  of 
p l us  g r a s p, 
r e l e a s e,  p u s h, 

t h en  d e f i n ed  as  a  new  s t a te 
(human  or  computer)  wishes 

t r a n s i t i o ns  a re  a c c o m p l i s h ed  by  commands: 

t he  m a n i p u l a t o r 's 
t w i s t,  and  so  o n. 

is 
t he  " o p e r a t o r" 

t he  o b j e c ts 

i n c l u d i ng 

r e l e(cid:173)

jaws 

t a sk 

to  o c c u p y. 

I n t r o d u c t i on  and  Problem  Statement 

One  may 

I n t e r p r et 

t he  r e s u l t i ng  problem 

in 

Remote  m a n i p u l a t i on 

i n v o l v es  a  human  o p e r a(cid:173)

t oo 

t he 

t a sk  or 

t he  man  a l o n e,  were 

t o g e t h er  p e r f o r m i ng  a 

l a r g e,  s m a l l,  d i s t a n t,  p o n d e r(cid:173)

t or  and  a  machine 
t a sk 
w h i ch  c o u ld  be  p e r f o r m ed  more  e a s i ly  and  e f f i(cid:173)
c i e n t ly  by 
v i r o n m e nt  n ot 
o u s,  d e l i c a t e,  o b s c u r e,  dangerous  or  some  c o m b i n(cid:173)
a t i on  of 
f or  u n d e r w a t er  r e(cid:173)
complex  h ot 
f or  c o m p l e te  o p e r a t i on  and  maintenance 
t r i e v a l, 
of 
r a d i o a c t i ve 
f or 
l a r ge 
e x t e n d ed  p e r i o ds  of 
to  name  a 

t h e s e.  M a n i p u l a t o rs  a re  used 

i n s t a l l a t i o ns 
in  r o b ot 

r e s e a r ch 
t i m e ,8  and 

l ab  e x p e r i m e n t s ,17 

few  e x a m p l e s. 

In  q u i te 

I ts  e n(cid:173)

r e s e a r c h ,11 

t i m e,  s c a le  or 
r e s e a r ch  have  d e(cid:173)

i n v o l ve  c o m b i n i ng  a  m a n i p u l a t or  and 

t he  Human  S u p e r v i s ed  Remote 

To  overcome 

t he  handicaps  of 

two 

l i n es  of 

d i s t a n ce  b a r r i e r s, 
v e l o p ed  w h i ch 
a  c o m p u t e r.  One 
C o m p u t e r - M a n i p u l a t o r ,14  d e p i c t ed 
H e r e,  a  human  o p e r a t or 
in  p l a n n i ng  and  e x e c u t i ng 
approach 

t he  autonomous 

is  a i d ed  by 
t a s k. 

t he 

is 

is 

in  F i g u re  1. 

t he  computers 

The  o t h er 

r o b o t,  w h i ch 

is 

i n t e n d-

*Work  s u p p o r t ed  by  NASA  G r a nt  NsG  107-61 

- 4 9 5-

t h e o ry 
t r a n s i t i on  c o s ts  a  known  amount, 

terms  as 

f o l l o w s: 

g i v en 

t he  cheapest 

Modern  C o n t r ol 
t h at  each  s t a te 
f i nd 
s e nt  s t a te 
p r e s e n ts 
p l i s h i ng 

to 

( s h o r t e s t)  p a th 

t he  d e s i r ed  s t a t e. 

t he  o p t i m al  c o n t r ol  p o l i cy 
t he  g i v en 

t a s k. 

from 
t he  p r e(cid:173)
T h is  p a th  r e(cid:173)
f or  accom(cid:173)

A l t e r n a t i v e l y,  one  may  v i ew 

t he  s t a te  space 

theorem  p r o v i n g: 
i n s t a n ce  of 
t he 

j a ws  move 

t he  new  s t a te 
t he 
. ,"  or  " If 

is 
r e(cid:173)
jaws 

jaws  move  one 

i n ch 

t he  same  d i s(cid:173)

to 

t he  o ld 

is  s p e c i f i ed  by  a r(cid:173)
the  name  of 
t he  problem 

i n ch 
to 

t he  r i g h t, 

t he  r i g h t, 

t h en  o b j e ct  A  moves 

t h en 
. 
t he 

terms  of  problem  s o l v i ng  or 

in 
each  s t a te 
t r a n s i t i on  r e p r e s e n ts  an 
a  p r e d i c a te  or  an  axiom  such  as  " If 
to 
one 
l a t ed 
t he  o ld  s t a te  b y. 
a re  g r a s p i ng  o b j e ct  A  and 
to 
tance  and 
s t a te  b y. 
guments 
a  r e l e v a nt  o b j e c t,  and  so  o n. 
is  p u r e ly  g e o m e t r i c, 
axiom  or  p r e d i c a te 
t he  g o a l. 
of  as 
of 
t he 

The  r e s u l t i ng  p a th  may 
t he  problem 
t he  s p e c i f i ed 

t he  new  s t a te 
. 

t he  s o l u t i on 
theorem) 

t he  c u r r e nt  s t a t e, 
Since 

is  unambiguously 

to 
"Can 

I n c l u d i ng 

i n s t a n ce 

r e l a t ed 

Each 

is 

•" 

t he  r e s u lt  of  a p p l y i ng  any 
to 

r e l a t ed 

t h o u g ht 

t h en  be 
( or 
t a sk  be  accom-

t he  p r o of 

pUshed?" 

Tasks  and  Commands 

At  the  outset  ve  should  d i s t i n g u i sh  two  types 

tasks, 

the  task  "Find 

those  which  can  be  planned  ahead  and 

of 
those  which  cannot•  An  excellent  example  of  the 
l a t t er  is 
the  p e n c i l ."  Execution 
cannot  be  planned  open  loop,  along  the  l i n es  o f: 
Move  jaws  to  l o c a t i on  X,  pick  up  p e n c i l.  Rather, 
execution  consists  of  continual  i n t e r a c t i on  be(cid:173)
tween  the  manipulator-computer  and  i ts  environ(cid:173)
ment*  The  type  of  plan  needed  closes  a  loop 
through  the  manipulator's  sensors,  and  has  many 
of 
in 
" I f"  statements.  Such  problems  have  been  studied 
by  Ernst4  and  Barber1.  Larson  and  Keckler21  have 
used  Dynamic  Programming  to  f i nd  search  and  motion 
s t r a t e g i es  f or  a  robot  in  an  unexplored  environ(cid:173)
ment* 

the  features  of  a  numerical  algorithm  r i ch 

Aside  from  searches  and  other  tasks  whose 

It  is 

h i s t o ry  and  outcome  are  almost  unknown  £  p r i o r i, 
most  manipulation  tasks  can  be  planned  out  In  ad(cid:173)
vance*  The  l i k e l i h o od  of  the  p l a n 's  success  de(cid:173)
pends  g r e a t ly  on  the  accuracy  of  a  p r i o ri  i n f o r(cid:173)
mation  concerning  l o c a t i on  of  named  places  and 
o b j e c t s,  and  also  on  p l a in 
luck.  Less  than  cer(cid:173)
t a in  success  is  not,  however,  any  reason  f or  not 
planning. 
the  a b i l i ty  to  formulate  and  a t(cid:173)
tempt  execution  of  plans  that  makes  an  automatic 
or  semi-automatic  manipulator  d i f f e r e nt 
from  and 
superior 
Furthermore, 
information  can  be  compensated  f or  by  execution 
routines  which  combine  obedience  to  the  plan  w i th 
minor-range 
in 
the  execution  routines  w i ll  allow  more  u n c e r t a i n(cid:173)
ty 
information  without  degrading 
the  c e r t a i n ty  of  o v e r a ll  task  completion.. 

to  a  manually  c o n t r o l l ed  manipulator. 
the  a  p r i o ri 

searches.  Greater  s o p h i s t i c a t i on 

lack  of  c e r t a i n ty  in 

the  £  p r i o ri 

in 

Of  a ll  tasks  which  can  be  planned  out  in  ad(cid:173)
vance,  we  s h a ll  consider  what  f or  ordinary  mani(cid:173)
p u l a t i on  c o n s t i t u te  the  great  b u l k,  namely  those 
in  which  the  positions  or  o r i e n t a t i o ns  of  objects 
and  e f f e c t o rs  (jaws, 
t o o l s,  etc*)  are  changed. 
Thus  ve  s p e c i f i c a l ly  exclude  such  a c t i v i t i es  as 
bouncing  a  b a ll  or  balancing  a  s t i ck  on  end.  By 
ignoring  v e l o c i t i es  and  accelerations,  we  may  con(cid:173)
centrate  on  the  geometric  constraints 
fundamental 
to  manipulation: 
obstacle  avoidance,  rendezvous 
of  a  jaw-borne  object  and  i ts  d e s t i n a t i on  f or 
pushing,  r e l e a s i n g,  pouring,  i n s e r t i n g,  and  so  on. 
(Granted  a  jaw-borne  object  has  a  v e l o c i t y: 
nev(cid:173)
ertheless  what 
important  about  carrying 
that  jaws  and  object  maintain  a  f i x ed  geometric 
r e l a t i on  to  each  other  throughout.)  Then  one  may 
s t a te  the  planning  problem  as  t h at  of  f i n d i ng  a 
sequence  of 
the 
f or 
task  s i te  to  occupy  on  the  way,  so  to  speak, 
from 
the  i n i t i al  c o n f i g u r a t i on  to  the  desired  one. 

intermediate  configurations 

Is 

is 

To  enable  the  computer  to  solve  such  prob(cid:173)
lems,  we  must  equip  it  w i th  a  model  of  manipula(cid:173)
t i on  tasks  so  t h at  it  can  determine  what  c o n f i g(cid:173)
urations  may  f o l l ow  from  a  given  c o n f i g u r a t i o n, 
or  e q u i v a l e n t ly  what  changes  can  be  made  to  a 

-496-

given  c o n f i g u r a t i o n.  This  requires  a  way  of  ex(cid:173)
pressing  geometric  constraints  or  equlvalently 
manipulative  predicates  and  how  they  are  altered 
by  changes  in  the  task  s i t e.  More  generally,  we 
must  recognize  that  some  configurations  are  "near 
neighbors"  while  others  are  n o t,  but  rather  are 
separated  by  one  or  more  intervening  configura(cid:173)
t i o n s,  some  of  which  are  near  neighbors.  Near 
nelghborllne88  of  two  configurations  may  be  de(cid:173)
fined  as  a  (usually  b i l a t e r a l)  a t t r i b u te 
imply(cid:173)
ing  that  one  single  simple  motion  of  the  mani(cid:173)
pulator  jaws,  probably  of 
l i m i t ed  extent,  w i ll 
carry  the  task  s i te  from  one  configuration  to  the 
other.  Working  w i th  a  small,  w e ll  chosen  set  of 
such  subnotions,  we  can  plan  a  wide  v a r i e ty  of 
tasks.  To  be  precise,  c a ll  the  submotlons  atomic 
commands.  For  example: 

Move  jaws  l e ft  one  Inch 
Move  jaws  r i g ht  one  inch 
Open  jaws 
Close  jaws 

( 

. 

In  what  follows  we  s h a ll  describe  a  method  by 
which  a  task  s i te  may  be  modelled, 
may  request  a  task,  and  the  computer  can  devise 
a  sequence  of  atomic  commands  which, 
to  the  de(cid:173)
gree  of  precision  of  the  task  model,  can  accom(cid:173)
p l i sh 

the  "operator" 

task. 

the 

The  State  Space  Model 

The  problem  we  have  posed  is  to  f i nd  a  se(cid:173)

f i n i te  elements  which  has  a  p a r t i c u l ar 

quence  of 
property.  We  may  dispense  w i th  enumeration  of 
the  p o s s i b i l i t i e s,  since  there  are  f ar  too  many, 
and  f ar  too  few  of  them  are  worth  considering. 

the  manipulator 

Let  x  be  a  vector  containing  the  p o s i t i on 
the  positions  of  r e l e(cid:173)

of 
vant  objects  and  any  other  variables  of 
such  as  object  o r i e n t a t i o n s.  Then  the  manipula(cid:173)
t o r - t a sk  system  is  governed  by  the  equation 

jaws, 

I n t e r e s t, 

(2) 

leading  out 

the  geometric  task  con(cid:173)

is  a  vector  of  admissible  controls 

where  tj(k) 
such  as  equation  ( 1 ),  and  A  is  a  state  dependent 
matrix  which  expresses 
s t r a i n ts  mentioned  in  the  previous  s e c t i o n.  These 
constraints  are  more  e a s i ly  v i s u a l i z ed  on  a  f i n i te 
graph-5  in  which  each  node  represents  a  state  x. 
and  each  branch 
to  another  state  i n(cid:173)
dicates  an  allowed  command  at  state  x_.  States 
connected  by  a  single  branch  are  thus  near  neigh(cid:173)
bors.  The  t o t a l i ty  of  nodes,  some  connected  by 
branches,  c o n s t i t u t es  the  state  space. 
represent  a ll 
task 
the  configurations  which 
s i te  can  assume  as  a  r e s u lt  of  the  execution  of 
a r b i t r a ry  s t r i n gs  of  atomic  commands.  A l t e r n a(cid:173)
t i v e l y, 
the  l i m i t ed 
the  manipulative  predicates 
set  of 
being  considered, 
in  the 
arguments  associated  w i th  each,  and  the  set 
bounded  by  the  l i m i ts  on  each  s t a te  v a r i a b l e.  We 

the  s t a te  space  represents 
Instances  of 

the  instances  d i f f e r i ng 

I ts  nodes 

the 

may  then  say  that  paths  through  the  space  repre­
sent  s t r i n gs  of  atomic  commands 
(controls  or  proof 
steps)  which  make  coherent  (though  not  necessarily 
purposeful  or  e f f i c i e n t)  changes 
in  the  task  s i t e. 
For  example,  consider  the  task  s i te  in  Figure  2. 
The  Jaws  may  move  from  point  to  point  along  the 
l i n e,  open  and  close,  but  may  not  move  the  block. 
(This 
l a st  c a p a b i l i ty  is  added  below.)  Given  the 
atomic  command  set  ( 1 ), 
the  state  space  corres-
ponding  to  Figure  2  is  shown  in  Figure  3.  The 
coordinates  on  the  axes  are  xT,  jaw  p o s i t i o n,  and 
H,  Jaw  s t a t u s.  Xj  and  H  are  the  state  v a r i a b l e s. 
The  configuration  of  Figure  2  (jaws  in  location 
is  represented  by  the  f l ag  at  state 
4,  closed) 
[4,1] 
in  Figure  3.  The  v e r t i c al  lines  indicate 
that  the  Jaws  may  open  or  close  at  any  x,  while 
the  h o r i z o n t al  lines 
indicate  allowed  jaw  move­
ment.  Movement  d i r e c t ly  i n to  [2,1] 
[1,1] 
t h is  would  involve  c o l­
l i s i on  between  jaws  and  o b j e c t.  Thus  [3,1]  and 
[2,1]  are  not  neighbors  in  the  sense  defined  above. 

forbidden  since 

[3,1]  or 

from 

is 

[4,1] 

to  state 

[ 1 , 1 ] .* 

if 

the 

fact 

the  computer 

If  we  wish  the  jaws  to  move  to  location  x - 1, 
jaws  closed,  we  ask  the  computer  to  f i nd  a  s a t i s­
factory  path  from  state 
to  derive  by  it-
(Naturally  we  want 
the  jaws  must  straddle  the  ob­
s e lf 
that 
it  e x i s t s,  can 
j e ct  on  the  way.)  Such  a  path, 
be  translated  immediately  i n to  a  s t r i ng  of  atomic 
commands  s u i t a b le  for  accomplishing 
since 
intermediate  configurations 
s i te  should  pass  on  the  way  to  the  desired  con­
f i g u r a t i o n.  There  are  countless  possible  paths, 
most  of  which  go  nowhere  purposive.  But  a  short­
est  path  cannot  go  nowhere  and  in  p a r t i c u l ar  can­
not  loop.  So  l et  us  f i nd  shortest  paths. 

the  sequence  of  neighboring 

through  which 

the  task, 

the  path 

t e l ls 

the  task 

lack  of  information,  or  some  (normalized) 

Many  algorithms  are  available  for  finding 
shortest  paths  in  networks,  among  them  Dynamic 
Programming,2  Ford's  algorithm,6  and  the  Hart-
Nilsson-Raphael  algoritlun.  **  Of  more  i n t e r e st 
to  us  is  the  general  i n t e r p r e t a t i on  we  can  give 
to  " s h o r t e s t ":  A  path  may  be  short  in  time,  f u e l, 
r i s k, 
combination  of  these, 
may  w e ll  be  costly  in  f u el  a ll  over,  but  costly 
in  r i sk  only  in  c e r t a in  areas.  Sometimes  a  given 
command, 
at  other  times  the  cost  of  a  command  may  depend 
on  the  state  at  which  it  is  being  executed  (for 
example,  carrying  through  a  crowded  region  of  phy­
s i c al  apace).  By  specifying  the  dimension,  mag­
lines 
nitude  and  d i s t r i b u t i on  of 
between  points  in  the  state  space, 
the  operator 

for  example.  A  state  space 

the'lengths"  of 

l i ke  c a r r y i n g, 

is  costly  everywhere,  while 

can  to  some  degree  a f f e ct  the  nature  or  " s t y l e" 
of  the  r e s u l t i ng  s o l u t i o n.  The  arrangement  of 
lengths  shown  in  Figure  4  r e s u l ts  in  the  path  i n­
(This  schedule  of  lengths 
dicated  by  the  arrows. 
suppresses  unnecessary  motions  of 
the  open  jaws.) 
The  corresponding  work  plan  i s: 

Move  l e ft  one  inch 
Open 
Move  l e ft  one  inch 
Move  l e ft  one  inch 
Close 

for  the  case  where 

the  object  is  in  loca­

A  path  which  allows  the  jaws  to  grasp  the 
object  is  shown  in  Figure  5.  The  corresponding 
path 
t i on  x -1  is  shown  in  a  new  state  space  in  Figure 
6.  By  making  the  o b j e c t 's  location  a  new  state 
v a r i a b l e,  y0,  we  may  represent  carrying  and  push­
ing  in  a  larger  state  space,  Figure  7.  This 
figure  is  made  by  combining  Figures  5,  6,  and 
others  l i ke  them,  each  corresponding  to  a  p a r t i­
cular  value  of  y0.  Note  that  pushing  is  not  ex­
pressed  88  a  t r a n s i t i on  analogous  to  that  from 
[3,1] 
ample. 
forbidden  since 
t e l ls  nothing  about  what  hap­
pens  to  the  pushed  object.  Pushing  is  properly 
expressed  in  Figure  7  as  a  v a r i a t i on  of  c a r r y i n g. 

in  Figures  3,  4,  and  5, 
for  ex­
type  of  state  t r a n s i t i on  is  s t i ll 

to  [2,1] 
This 

it 

Physical  Demonstration 

The  ideas  of  the  previous  section  were  im­
plemented  on  a  three  degree  of  freedom  manipu­
l a t or  converted  from  a  p l o t t i ng  t a b l e.  Square 
objects  could  be  grasped  and  moved  about  in  a  r e­
gion  15  inches  on  a  side.  The  manipulator  jaws 
were  equipped  with  g r ip  sensors  inside  and  con­
tact  sensors  outside.  No  jaw  rotations  were  pos­
s i b l e.  A  D i g i t al  Equipment  Corp.  PDP-8  computer 
contained  a  2000  word  program  and  a  500  word  state 
space.*  The  state  vector  consisted  of  ( X j,  Y j, 
H),  while  objects  and  obstacles  were  kept  track 
of  in  a  separate  l i s t.  The  2000  word  program  con­
tained  a ll  I/O,  a  path  f i n d i ng  algorithm, 
sensor  evaluation  r o u t i n e s,  stepping  motor  c o n t r o l, 
plus  i n t e r p r e t a t i on  of  commands  such  as 

touch 

If  a  new  object  was  discovered  by  the  touch  sen­
sors  while  a  path  was  being  executed, 
the  system 
estimated  i ts 
l o c a t i o n,  asked  the  operator  for  a 
name  and  then  computed  a  new  path  to  the  o r i g i n al 
goal, 
This  object  could  be  referred  to  l a t er  by  name, 
picked  up,  c a r r i e d,  and  so  on.  A  more  complete 
description  appears  in 

incorporating  knowledge  of 

the  new  o b j e c t. 

. 

♦Suitable  computer  routines  can  generate  the 
value  of  the  desired  state  from  a  less  formal­
ized  input  command,  such  as  "Go  to  the  l e ft  of 
the 

object" 

the  complexity  l e v el  considered 
in 

tasks  at 
t h is  a n a l y t ic  approach  seems  superior, 

**For 
here, 
terms  of  computer  time  and  l i k e l i h o od  of  success, 
to  s i m i l ar  work  employing  Heuristic  Programming 
to  e l i c it  strategies.16 

*Twelve  b i ts  per  word. 

-497-

A  More  Complex  Example 

Suppose  we  wish  to  move  a  long  t h in  spar 

two-dimensional  environment. 

through  a  crowded 
(Picture  carrying  a  sofa  from  the  l i v i ng  room  to 
the  porch.)  Here  the  i n t e r a c t i o ns  between  the  en­
vironment  and  the  spar's  p o s i t i on  and  o r i e n t a t i on 
are  of  the  most  i n t e r e s t.  To  map  motions  of  the 
spar  once  it 
we  choose  state  variables 

is  grasped  by  a  r o t a t i ng  pair  of 

jaws, 

consequence  of  the  kind  of  atomic  commands  we  a l­
low  and  of  our  I n t e r e st  In  the  main  motion  f e a­
tures  of  tasks  f or  planning  purposes.  The  atomic 
commands  may  be  thought  of  as  task  d i f f e r e n t i a l s, 
but  u l t r a f l ne  quantization 
nor  necessary,  especially 
a v a i l a b l e. 
q u i r e, 
mension,  quantization  poses  staggering  computer 
(6  state  v a r i a b l e s,  10  points 
storage  problems. 
per  axis  -  106  p o i n t s .) 
factors  m i t i g a te 
such  d i f f i c u l t i e s: 

Is  neither  p r a c t i c al 
if  good  sensors  are 

In  p r i n c i p l e,  state  spaces  of  higher  d i­

In  f a c t,  since  more  complex  tasks  r e­

Three 

The  allowed  commands  are 

Thus  both  p o s i t i on  and  o r i e n t a t i on  of  the  spar  are 
quantized. 

The  physical  space 

is  shown  in  Figure  ft. 

Walls  are  shown  as  open  rectangles,  while  the  two 
possible  o r i e n t a t i o ns  of  the  spar  are  shown  by 
cross  l i n es  at  each  possible  p o s i t i o n.  The  c h a l­
lenge  is  provided  by  the  doorways,  which  allow  the 
spar  to  pass  a x l a l ly  but  not  athwart.  This  con­
s t r a i nt  and  the  presence  of  walls  are  shown  in  the 
s t a te  space  by  d e l e t i ng  the  l i n es  corresponding 
to 

the  forbidden  t r a n s i t i o n s. 

The  state  space  appears  in  Figure  9.  We  as­

Let  the  spar 

l o c a t i on  (2,2) 

sume  f or  i l l u s t r a t i on  that  each  "move"  is  of 
length  2,  each  " r o t a t e"  of  length  3. 
be  i n i t i a l ly  at 
space,  oriented  p a r a l l el  to  the  y  a x i s,  and  say 
we  want  it  moved  to  ( 3 , 3 ),  ending  up  oriented 
p a r a l l el  to  the  x  a x i s.  Then  the  i n i t i al  state 
is 
[ 3 , 3 , 0 ].  These 
are  marked  S t a rt  and  End,  r e s p e c t i v e l y,  on  Figure 
9. 

[ 2 , 2 , 1]  and  the  f i n al  s t a te  is 

in  the  physical 

There  are  two  equal  length  s o l u t i on  paths, 
shown  In  Figure  10  and  v i s u a l i z ed  on  a  sketch  of 
the  task  s i te  in  Figure  1 1.  These  paths  do  not 
"look  l i k e"  the  most  d i r e ct  r o u t e.  Closer  exam­
i n a t i o n,  however,  reveals  that  these  paths,  by 
i n i t i a l ly  moving 
the  object  away  from  the  f i n al 
s t a t e,  are  able  to  save  two  r o t a t i o ns  by  spending 
a  l i t t le  more  d i s t a n c e.  Again, 
if  we  read  a  s o l u­
t i on  p a t h,  we  get  a  l i st  of  the  required  moves 
and  rotates  in  the  correct  order.  A  more  general 
s o l u t i on  to  t h is  problem  which  includes  grasping 
and  releasing 
the  spar  in  a r b i t r a ry  (quantized) 
positions  and  o r i e n t a t i o n s,  may  be  found  in  Chap­
t er  V  of  Reference  1

8. 

Discussion  of 

the  State  Space  Model 

and 

i ts 

Implications 

The  main  feature  of  the  State  Space  Models 

t h e ir  q u a n t i z a t i o n.  This  Is  a  d i r e ct 

above  is 

-498-

1)  Only  a  handful  of  these  points  need  be 

in  l i ve  (core  memory)  storage  at  any  one  time. 
In  f a c t, 
the  problem  of  f i n d i ng  shortest  paths 
by  d e f a u l t,  one  of  State  Increment  Dynamic  Pro­
gramming, 9 which  l a t t er  may  be  greatly  speeded 
by  algorithms  such  as  that  of  Hart,  Nilsson  and 
Raphael,  which  pursue  only  the  currently  most 
promising  path. 

i s, 

2)  The  state  space  need  not  be  b u i lt  and 

i n t a ct  in  storage,  but  rather  only 

held  whole  and 
those  sections  needed  as  a  p a r t i c u l ar  path  is 
pursued.  The  state  space  is  j u st  a  l o g i c al  con­
sequence  of  a  l i st  of  object  and  jaw  l o c a t i o n s, 
sizes  and  o r i e n t a t i o n s,  plus  extremely  l o c al  "know­
ledge"  of  what  circumstances  p r o h i b it  a  given  com­
mand.  The  needed  portions  of  the  state  space  may 
be  b u i lt  to  order,  using  the  information  in  the 
l i s t.  Then,  merely  by  concentrating  on  one  state 
the  com­
and  i ts  immediate  neighbors  at  a  time, 
puter  can  plan  tasks  which  involve  hundreds  (or 
any  number)  of  s t a t e s. 
In  most  algorithms,  more­
over,  progress  is  monotone  so  that  a  s t a t e,  once 
considered, 
is  never  considered  again.  These  no­
tions  suggest  that  the  state  space  ie_  a  l i st  and 
that  l i s t - p r o c e s s i ng  computer  languages  may  be 
useful 

in  dealing  with 

i t. 

3)  A  state  space  describing  a  complex  task 

that  only 

the  state 

the  space  stores 

it  should  be  clear 

tasks  consist  of  r e­

to  considering  only  a 

is  of  high  dimension  only  because 
the  r e l a t i o ns  f or  a ll  tasks  which  could  be  per­
formed  by  manipulating  the  objects  and  Jaws  in 
question.  No  command,  however,  asks  for  a ll  tasks, 
and  because  rearrangement 
peated  sequences  such  as  "Move  empty  Jaws  to  l o­
cation  X,  grasp,  carry  object  to  l o c a t i on  Y,  r e­
lease," 
variables  a c t u a l ly  involved  in  one  such  sequence 
need  be  considered  v a r i a b le  at  one  time.  This  is 
obviously  equivalent 
l i m i t ed 
and  much  lower  dimension  cross  section  of  the  o r i­
g i n al  space.  Great  savings  in  computer  time  and 
storage  may  be  effected  by  t r e a t i ng  sequences  of 
such  cross  sections,  Indeed  considering  them  as 
atomic  actions  on  a  much  higher  l e v el  than  the 
atomic  commands  which  underlie  them.  We  are  thus 
afforded  two  levels  of  planning,  an  upper  l e v el 
in  which  gross  motion  goals  are  selected,  and  a 
lower 
motions  are  evolved  and  t h e ir  costs  evaluated. 
Thus  we  can  consider  more  complex  tasks  without 
recourse  to  unmanageable  state  spaces. 
In  t h is 
way,  competing  gross  plans  may  be  judged  f or  cost-
effectiveness  and  the  best  one  ( f or  the  given  cost 
structure)  selected. 
that 

l e v el  in  which  d e t a i l ed  s t r a t e g i es 

It  is  worth  speculating 

f or  such 

methods  of  Heuristic  Programming5  would  be  useful 
at  the  higher  l e v e l,  but  some  comparisons19  show 
that  f or  actually  f i n d i ng  detailed  paths,  even  the 
r e l a t i v e ly 
faster 
methods. 

i n e f f i c i e nt  Ford  algorithm 
than  Travis'16  h e u r i s t ic  path 

is  greatly 
finding 

Extending  the  Power  of  the  State  Space  Method 

Now  we  have  reduced  some  basic  manipulation 
to  shortest  path  problems. 
In  t h is  section 
tasks 
we  show  how  to  make  use  of  the  basic  pick-up-and-
carry  c a p a b i l i ty  demonstrated  in  Figure  7  to  pro­
gram  more  complex 
to  enor-
mous  state  spaces,  preserving  the  " o p e r a t o r ' s" 
a b i l i ty  to  shape 
the  r e­
s u lt  without  having 

the  general  features  of 
to  specify  d e t a i l s. 

tasks  without  recourse 

We  think  of  commands  as  functions  whose  ar­
guments  (specified  by  the  operator)  may  be  place 
or  object  names,  and  whose  values  are  paths  in 
one  or  more  related  state  spaces.  The  basic  func­
t i on  "Take"  is  evaluated  by  a  state  space  such  as 
Figure  7.  Formally: 

To  exchange  objects  A  and  B,  we  may  use  "Take"  to 
define  " S w i t c h ",  using  an  appropriate  i n t e r p r e t i ve 
computer 

language: 

(A) 

2.  Bellman,  R.E.,  and  S.E.  Dreyfus,  Applied  Dy-

namic  Programming,  Princeton:  Princeton  U n i(cid:173)
v e r s i ty  Press,  1962. 

3.  Berge,  Claud,  Theory  of  Graphs  and  I ts  Appli-
c a t i o n,  New  York,  JOhn  Wiley  and  Sons,  1962. 

4.  Ernst,  H.A.,  "A  Computer-Operated  Mechanical 

Hand,"  Sc.D.  Thesis,  M . I . T .,  Department  of 
E l e c t r i c al  Engineering,  December,  1961. 

5.  Feigenbaum,  E.A.,  and  J.  Feldman,  e d i t o r s, 

Computers  and  Thought,  New  York:  McGraw-Hill 
Book  Co.,  1963. 

6.  Ford,  La.R.,  J r .,  "Network  Flow  Theory,"  Rand 

Corp.  Paper  P-923,  August  14,  1956. 

Department  of  Mechanical  Engineering,  January, 
1968. 

19.  Whitney,  D.E.,  op.  c i t .,  p.  106. 

20.  Whitney,  D.E.,  op.  c i t .,  pp.  113-123. 

2 1.  Larson,  R.E.,  and  V.G.  Keckler,  "Optimum 

Adaptive  Control  in  an  Unknown  Environment," 
IEEE  Trans.  Auto.  C o n t r o l,  V  AC-13  ( 4 ), 
August,  1968,  pp.  438-9. 

7.  Hart,  P.E.,  N.J.  N l l s s o n,  and  B.  Raphael,  "A 
the  H e u r i s t ic  Determination 

Formal  Basis 
of  Minimum  Cost  Paths,"  IEEE  Trans,  on  Systems 
Science  and  Cybernetics,  V.  SSC-4  ( 2 ),  J u l y, 
196S,  pp.  100-107. 

f or 

8. 

Johnsen,  Edwin,  Discussant  at  11th  Annual  Meet(cid:173)
ing  of  the  Human  Factors  Society,.  September 
25-28,  1967. 

9.  Larson,  R.E.,  "Dynamic  Programming  w i th  Re(cid:173)

duced  Computational  Requirements,"  Trans. 
IEEE  Auto.  C o n t r o l,  V  AC-10  ( 2 ),  pp.  135-43, 
A p r i l,  1965. 

10.  Mergler,  H.W.,  and  P.W.  Hammond,  "A  Path  O p t i(cid:173)

mization  Scheme  f or  a  Numerically  Controlled 
Remote  Manipulator,"  6th  Annual  Symposium  of 
the  IEEE  Human  Factors  in  Electronics  Group, 
May,  1965. 

1 1.  Minsky,  M.L.,  and  S.A.  Papert,  Research  on  I n(cid:173)

t e l l i g e nt  Automata,  Status  Report  I I,  Sept., 
1967,  M.I.T.  Project  MAC. 

12.  N l l s s o n,  N .,  and  B.  Raphael,  "Preliminary  De(cid:173)

sign  of  an  I n t e l l i g e nt  Robot," 
and  Information  Sciences  -  I I,  New  York:  Aca(cid:173)
demic  Press,  1967. 

in  Computer 

13.  Roberts,  L.G.,  "The  Lincoln  Wand,"  FJCC  1966, 

pp.  223-26. 

14.  F e r r e l l,  W.R.,  and  T.B.  Sheridan,  "Supervisory 

Control  of  Remote  Manipulation,"  IEEE  Spectrum, 
V  4  ( 1 0 ),  pp.  81-88,  October,  1967. 

15.  Tomovlc,  R.,  and  G.  Bonl,  "An  Adaptive  A r t i f i(cid:173)

c i al  Hand,"  IRE  Trans.  Automatic  C o n t r o l,  AC-7, 
A p r i l,  1962,  pp.  3-10. 

16.  T r a v i s,  L . E .,  "Experiments  w i th  a  Theorem-Uti(cid:173)

l i z i ng  Program,"  SJCC  1964,  pp.  339-58. 

17.  Weinberg,  A l v l n,  "Transuranlc  Elements  and  the 

High-Flux  Isotope  Reactor,"  Physics  Today, 
V  20  ( 1 ),  p.  29. 

18.  Whitney,  Daniel  E.,  "State  Space  Models  of  Re(cid:173)
mote  Manipulation  Tasks,"  Ph.D.  Thesis,  M.I.T. 

-500-

- 5 0 6-

