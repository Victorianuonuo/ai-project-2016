On Solution Correspondences in Answer-Set Programming(cid:3)

Thomas Eiter, Hans Tompits, and Stefan Woltran

Institut f¤ur Informationssysteme, Technische Universit¤at Wien,

Favoritenstra(cid:223)e 9(cid:150)11, A-1040 Vienna, Austria

[eiter,tompits,stefan]@kr.tuwien.ac.at

Abstract

We introduce a general framework for specifying
program correspondence under the answer-set se-
mantics. The framework allows to de(cid:2)ne different
kinds of equivalence notions, including previously
de(cid:2)ned notions like strong and uniform equiva-
lence, in which programs are extended with rules
from a given context, and correspondence is deter-
mined by means of a binary relation.
In particu-
lar, re(cid:2)ned equivalence notions based on projected
answer sets can be de(cid:2)ned within this framework,
where not all parts of an answer set are of relevance.
We study general characterizations of inclusion and
equivalence problems, introducing novel semanti-
cal structures. Furthermore, we deal with the issue
of determining counterexamples for a given corre-
spondence problem, and we analyze the computa-
tional complexity of correspondence checking.

equivalence [Inoue and Sakama, 2004]. Informally, the for-
mer notions consider programs P and Q to be equivalent, if
P [ R and Q [ R have always the same answer sets, where
R is a set of rules from a particular collection of rules. Thus,
if R is regarded as possible input, equivalent P and Q are
guaranteed to compute always the same answer sets. Note
that also open logic programs [Bonatti, 2001], in which part
of the rules are to be added at runtime, (cid:2)t within this scheme.
However, none of these works have considered the practi-
cably important setting of projected answer sets in ASP. Here,
not a whole answer set of a program P is of interest, but only
its intersection on a subset B (cid:18) U of all letters; this includes,
in particular, removal of auxiliary letters in computation. For
a simple example, consider the programs

P = f sel (X)   s(X); not out(X);

out(X) _ out(Y )   s(X); s(Y ); X 6= Y g and

Q = f sel (X)   s(X); not skip(X);

skip(X)   sel (X); s(Y ); X 6= Y g:

Introduction

1
With the availability of ef(cid:2)cient
implementations of the
answer-set semantics [Gelfond and Lifschitz, 1991] for non-
monotonic logic programs, answer-set programming (ASP)
has been recognized as a fruitful paradigm for declarative
problem solving. In this approach, a problem is encoded as
a logic program such that its models, called answer sets, cor-
respond to the solutions of the problem, which can be easily
extracted from them. Due to the availability of default nega-
tion, ASP has become an important host for solving many AI
problems, including planning, diagnosis, information integra-
tion, and inheritance reasoning (cf. Gelfond and Leone [2002]
for an overview on ASP).

To support engineering of ASP solutions, an important is-
sue is determining equivalence of different encodings, given
by two programs. To this end, various notions of equivalence
between programs under the answer-set semantics have been
studied in the recent past, viz. strong equivalence [Lifschitz
et al., 2001], uniform equivalence [Eiter and Fink, 2003], and
relativized notions thereof [Woltran, 2004], as well as update

(cid:3)This work was supported by the Austrian Science Fund under
grant P18019, and by the EC via projects FET-2001-37004 WASP,
IST-2001-33570 INFOMIX, and IST-2001-33123 CologNeT.

They should select, by means of sel, one element satisfying s
in their answer sets. Here, an important issue is whether the
programs are equivalent with respect to the (cid:147)output(cid:148) predicate
sel, for all (cid:147)inputs(cid:148) s, where s may be de(cid:2)ned by rules over
predicates from a set A, say, or given by facts.

Another aspect is that, apart from equivalence, other rela-
tionships between the sets of answer sets of P and Q might
be of interest. A natural example is inclusion, which means
that each answer set of P is also an answer set of Q. Here Q
can be viewed as an approximation of P , which is sound with
respect to cautious reasoning from P .

Motivated by these observations, in this paper, we consider
solution correspondences in ASP at a generic level. Our main
contributions are brie(cid:3)y summarized as follows.

(1) We introduce a general framework for correspondences
between the answer sets of programs P and Q, which are
augmented by further rules from a context C of possible ex-
tensions, where the correspondence is determined by a binary
relation (cid:26). Previous notions of equivalence and projected an-
swer sets amount to particular instances of this framework.

(2) We provide characterizations of inclusion correspon-
dence and equivalence between programs under projected
answer sets, in terms of novel semantical structures, called
spoilers, which refute this property, and certi(cid:2)cates, which

capture the essence of equivalence, similar as SE-models and
UE-models do for strong and uniform equivalence, respec-
tively. Based on these characterizations, we present interest-
ing correspondence results on varying projection sets in ASP.
(3) We show how spoilers can be used to construct coun-
terexamples to an inclusion resp. equivalence correspon-
dence, consisting of a suitable interpretation M and a rule
set R such that M is an answer set of exactly one of P [ R
and Q [ R.

(4) Finally, we determine the computational complexity of
correspondence checking for propositional disjunctive pro-
grams under projected answer sets. Our main result is that
equivalence checking is (cid:5)P
4 -complete in general, and thus
feasible in polynomial space as compared to a naive guess-
and-check procedure which requires exponential space. Fur-
thermore, we show that for restricted settings, the complexity
gradually decreases from (cid:5)P

4 to coNP.

The results presented in this paper signi(cid:2)cantly advance
the current state of equivalence testing in ASP towards highly
relevant settings for practical applications, and provide novel
insight into the structure of equivalent programs. Besides
the papers quoted above, further related work mostly ad-
dresses semantic and complexity characterizations of equiva-
lence [Lin, 2002; Turner, 2003], or describes implementation
methods [Eiter et al., 2004; Oikarinen and Janhunen, 2004].
The recent work by Pearce and Valverde [2004] addresses
strong equivalence of programs over disjoint alphabets which
are synonymous under structurally de(cid:2)ned mappings.

The characterizations we present are non-trivial and, as
shown by our complexity results, necessarily involved in the
sense that no (cid:147)simple(cid:148) criteria exist. Together with counterex-
amples, they provide a basis for powerful program optimiza-
tion and debugging tools for ASP, which are lacking to date.

2 Preliminaries
We deal with propositional disjunctive logic programs, which
are (cid:2)nite sets of rules of form

a1 _ (cid:1) (cid:1) (cid:1) _ al   al+1; : : : ; am; not am+1; : : : ; not an;

(1)
n (cid:21) m (cid:21) l (cid:21) 0, where all ai are propositional atoms and not
denotes default negation; for n = l = 1, we usually identify
the rule with the atom a1. If all atoms occurring in a program
P are from a given set A of atoms, we say that P is a program
over A. The set of all programs over A is denoted by PA. We
call a rule (resp., program) normal iff it contains no disjunc-
tion _. A program is unary if it contains only rules of the form
a   b or a  ; P un
A denotes the set of all unary programs over
For a set of atoms A = fa1; : : : ; amg, not A denotes
A.
the set fnot a1; : : : ; not amg. Accordingly, rules of form (1)
will also be written as a1 _ (cid:1) (cid:1) (cid:1) _ al   B1; not B2, where
B1 = fal+1; : : : ; amg and B2 = fam+1; : : : ; not ang.

Following Gelfond and Lifschitz [1991], an interpreta-
tion I, i.e., a set of atoms, is an answer set of a program P
iff it is a minimal model of the reduct P I, which results from
P by (i) deleting all rules containing default negated atoms
not a such that a 2 I and (ii) deleting all default negated
atoms in the remaining rules. The set of all answer sets of
a program P is denoted by AS(P ). The relation I j= P be-
tween an interpretation I and a program P is de(cid:2)ned as usual.

Under the answer-set semantics, two programs P and Q
are regarded as (ordinarily) equivalent iff AS(P ) = AS(Q).
The more restrictive forms of strong equivalence [Lifschitz
et al., 2001] and uniform equivalence [Eiter and Fink, 2003]
have recently been generalized as follows [Woltran, 2004]:
Let P; Q be programs over U, and let A (cid:18) U. Then, P and Q
are strongly (resp., uniformly) equivalent relative to A iff, for
any R 2 PA (resp., R (cid:18) A), AS(P [ R) = AS(Q [ R).

If A = U, strong (resp., uniform) equivalence relative to A
reduces to strong (resp., uniform) equivalence simpliciter; if
A = ;, ordinary equivalence results in either case.

We use the following notation. For an interpretation I and
a set S of (pairs of) interpretations, we write SjI = fY \ I j
Y 2 Sg (SjI = f(X \ I; Y \ I) j (X; Y ) 2 Sg). If S = fsg,
we write sjI instead of SjI, if convenient.

For any A (cid:18) U and any Y (cid:18) U, a pair (X; Y ) of interpre-
tations is an A-SE-interpretation (over U) iff either X = Y
or X (cid:26) Y jA. (X; Y ) is an A-SE-model of a program P iff
(i) Y j= P ;
(ii) for all Y 0 (cid:26) Y with Y 0jA = Y jA, Y 0 6j= P Y ; and
(iii) X (cid:26) Y implies the existence of an X 0 (cid:18) Y with

X 0jA = X such that X 0 j= P Y holds.

A pair (X; Y ) is total iff X = Y , and non-total otherwise.

The set of all A-SE-models of P is denoted by SE A(P ).

For A = U, A-SE-interpretations (resp., A-SE-models) are
simply called SE-interpretations (resp., SE-models), coincid-
ing with the notions de(cid:2)ned by Turner [2003], and we write
SE (P ) instead of SE U (P ).
Proposition 1 ([Woltran, 2004]) Two programs P and Q
are strongly equivalent relative to A iff SE A(P ) = SE A(Q).
Example 1 Consider the following two programs, P1 and
P2, which we shall use as a running example:

P1 = P0 [ fc _ d   a; c _ d   bg;
P2 = P0 [ fc _ d   a; b; d   b; not c; c   a; not dg;
for P0 = fa   c; b   c; a   d; b   d;   not c; not dg.

They have the following SE-models:1

SE (P1)=f(;;abc);(;;abd);(;;abcd);(abcd;abcd);

(abc;abcd);(abd;abcd);(abc;abc);(abd;abd)g;

SE (P2)=SE (P1)[f(b;abc);(a;abd);(b;abcd);(a;abcd)g:
Hence, P1 and P2 are not strongly equivalent. On the other
hand, AS(P1) = AS(P2) = ;, i.e., P1 and P2 are (ordinar-
ily) equivalent. Moreover, P1 and P2 are strongly equivalent
relative to A iff A \ fa; bg = ;. For A = fa; bg, we get

SE A(P1) = f(;; abc); (;; abd); (abc; abc); (abd; abd)g;
SE A(P2) = SE A(P1) [ f(b; abc); (a; abd)g:

3 General Framework
In order to deal with differing notions of program equivalence
in a uniform manner, taking in particular the currently ex-
isting notions of equivalence, as presented above, as well as

1We write abc instead of fa; b; cg, a instead of fag, etc.

equivalence notions based on the projection of answer sets
into account, we introduce a general framework for express-
ing solution correspondences between logic programs. In this
framework, we parameterize, on the one hand, the set R of
rules to be added to the programs P and Q, and, on the other
hand, the relation that has to hold between the collection of
answer sets of P [ R and Q [ R. Concerning the latter pa-
rameter, besides equality, other comparison relations like set-
inclusion may be used. This leads to the following notion:
De(cid:2)nition 1 By a correspondence frame, or simply frame, F,
we understand a triple (U; C; (cid:26)), where (i) U is a set of atoms,
called the universe of F, (ii) C (cid:18) PU , called the context
(cid:2)22U .
programs of F, or simply the context, and (iii) (cid:26) (cid:18) 22U
For all programs P; Q 2 PU , we say that P and Q are
F-corresponding, symbolically P ’F Q, iff, for all R 2 C,
(AS(P [ R); AS(Q [ R)) 2 (cid:26).

Intuitively, in a correspondence frame F = (U; C; (cid:26)), U
determines the general alphabet under consideration, C de-
termines the kind of rules used for comparison, and (cid:26) is the
speci(cid:2)c operation used for checking the correspondence of
two programs.

It is quite obvious that the equivalence notions discussed
above are special cases of F-correspondence. Indeed, for any
universe U and any A (cid:18) U, we have that strong equivalence
relative to A coincides with (U; PA; =)-correspondence, and
uniform equivalence relative to A coincides with (U; 2A; =)-
correspondence. Consequently, it holds that (i) strong equiv-
alence coincides with (U; PU ; =)-correspondence, (ii) uni-
form equivalence coincides with (U; 2U ; =)-correspondence,
and (iii) ordinary equivalence coincides with (U; f;g; =)-
correspondence.

In this paper, we are mainly concerned with correspon-
dence frames of form (U; PA; (cid:18)B) and (U; PA; =B), where
A (cid:18) U is some set of atoms, and (cid:18)B and =B are projections
of the standard subset and set-equality relation, respectively,
to a set B (cid:18) U, de(cid:2)ned as follows: for sets S; S 0 of interpre-
tations,

(cid:15) S (cid:18)B S 0 iff SjB (cid:18) S 0jB, and
(cid:15) S =B S 0 iff SjB = S 0jB.
In particular, =B amounts to answer-set existence if B =

;, and to correspondence between answer sets if B = U.

In what follows, if F is of the form (U; C; =B), we refer
to F also as an equivalence frame, and, accordingly, to F-
correspondence also as F-equivalence. As well, a frame of
the form (U; C; (cid:18)B) is also referred to as an inclusion frame.
For later purposes, we also introduce the following no-
tion: A correspondence problem, (cid:5), over U, is a quadru-
ple (P; Q; C; (cid:26)), where P; Q 2 PU and (U; C; (cid:26)) is a frame.
We say that (cid:5) holds iff P ’(U ;C;(cid:26)) Q holds. In accord with
the above designations, we call (cid:5) an equivalence problem if
(U; C; (cid:26)) is an equivalence frame and an inclusion problem if
(U; C; (cid:26)) is an inclusion frame.

For a correspondence problem (cid:5) = (P; Q; C; (cid:26)) over U,
we usually leave U implicit, assuming that it consists of all
atoms occurring in P , Q, and C.

We next list some basic properties of F-equivalence.

Proposition 2 Let (U; C; =B) be an equivalence frame and
P; Q 2 PU . Then, the following conditions hold:

1. If P ’(U ;C;=B ) Q, then P ’(U ;C 0;=B0 ) Q, for all C0 (cid:18) C

and all B0 (cid:18) B.

2. P ’(U ;C;=B ) Q iff P ’(U ;C;(cid:18)B ) Q and Q ’(U ;C;(cid:18)B ) P .
We recall an important result due to Woltran [2004], ex-

tending an analogous result by Lifschitz et al. [2001].
Proposition 3 Consider a frame (U; PA; =), for A (cid:18) U, and
let P; Q 2 PU . Then, P ’(U ;PA;=) Q iff P ’(U ;P un
Example 2 We have already seen that for P1, P2 from Ex-
ample 1, P1 6’(U ;PA;=) P2 holds, for A = fa; bg and U =
A ;=) P2. This
fa; b; c; dg. Hence, by Proposition 3, P1 6’(U ;P un
is witnessed by the fact that, e.g., AS(P1[fag) = fabc; abdg
while AS(P2 [ fag) = fabcg.

A ;=) Q.

The relevance of Proposition 3 is that it allows to dras-
tically reduce the number of required rules for equivalence
checking. However, the proposition does not generalize to
projections of answer sets.
Theorem 1 For any equivalence frame (U; PA; =B) with
A; B (cid:18) U, and any P; Q 2 PU , if P ’(U ;PA;=B ) Q, then
A ;=B ) Q, but the converse does not hold in general.
P ’(U ;P un
Proof. That P ’(U ;PA;=B )Q implies P ’(U ;P un
A ;=B )Q is im-
mediate from Part 1 of Proposition 2. Our running exam-
ple shows the failure of the converse: P1 ’(U ;P un
A ;=B ) P2
holds, where U = fa; b; c; dg and A = B = fa; bg, but
P16’(U ;PA;=B )P2. The latter holds in view of AS(P1 [
fa _ b  g) = fabc; abdg but AS(P2 [ fa _ b  g) = ;,
as easily shown.

2

The above theorem also holds if the set P un

A is substituted
by the class of all normal programs over A. Indeed, programs
P1 and P2 of our running example are corresponding with
respect to a frame using normal programs over A = fa; bg as
context, because in each stable model of P1 [ R resp. P2 [ R,
both a and b must be true. Thus, rules in R ((cid:18) PA) with
negative literals in the body are immaterial.

Theorem 1 indicates that equivalence for projected answer
sets is more involved. The same holds for inclusion, since
as an easy corollary to Theorem 1, P ’(U ;PA;(cid:18)B ) Q implies
A ;(cid:18)B ) Q, but not vice versa. In fact, the next re-
P ’(U ;P un
sult shows that, in general, a smallest extension R violating
inclusion has exponential size.
Theorem 2 There exists a family of problems (cid:5) = (P; Q;
PA; (cid:18)A) such that each R (cid:18) PA witnessing AS(P [R)jA 6(cid:18)
AS(Q [ R)jA is exponential in the size of P and Q.
Proof (Sketch). The idea is to encode a propositional CNF
(cid:30) = Vn
i=1 Ci over atoms V , for Ci = ci;1 _ (cid:1) (cid:1) (cid:1) _ ci;ki, into
(cid:5) = (P; Q; PA; (cid:18)A) such that, for any R 2 PA, AS(P [
R)jA 6(cid:18) AS(Q [ R)jA and : ~R must include a DNF for (cid:30),
where ~R is the result of interpreting R as a classical formula.
Let (cid:22)V = f(cid:22)v j v 2 V g, V 0 = fv0 j v 2 V g, (cid:22)V 0 = f(cid:22)v0 j v 2
V g, and G = fg1; : : : ; gng be sets of new atoms. We de(cid:2)ne

P = fv _ (cid:22)v  ;   not v;   not (cid:22)v j v 2 V g [

fv   u; (cid:22)u; (cid:22)v   u; (cid:22)u j v; u 2 V g [
fv   C (cid:3)

i ; (cid:22)v   C (cid:3)

i j v 2 V ; 1 (cid:20) i (cid:20) ng;

i = c(cid:3)

where C (cid:3)
Q = fv _ (cid:22)v  ; v0   (cid:22)v;not (cid:22)v0; (cid:22)v0   v;not v0 j v 2 V g [

i;ki, v(cid:3) = (cid:22)v, and (:v)(cid:3) = v, and

i;1; : : : ; c(cid:3)

f  v0; (cid:22)v0;   not v0; not (cid:22)v0 j v 2 V g [
fv   u0; (cid:22)v   u0; v   (cid:22)u0; (cid:22)v   (cid:22)u0 j v; u 2 V g [
fgi   bci;j j i = 1::n; j = 1::kig [ f  g1; : : : ; gng;
with bv = v0 and c:v = (cid:22)v0. Let A = V [ (cid:22)V . Informally, P [ R
only admits answer sets containing A, and indeed it holds that
(A; A) 2 SE(P [ R)jA n SE(Q [ R)jA, for some R. For any
such R, the SE-models (X; A) with X (cid:26) A must be precisely
those where X is a countermodel of (cid:30). This means that ~RA is
a CNF for :(cid:30), and thus : ~RA amounts to a DNF for (cid:30). This
proves the claim. Now, as well-known, the smallest DNF for
a CNF (cid:30) can be exponential in (cid:30), which proves the result. 2

We can similarly construct a family of problems showing
that a smallest extension R violating equivalence has expo-
nential size. Hence, a naive guess and check algorithm to
disprove inclusion or equivalence needs exponential space.
For a better algorithm, we have to develop suitable semanti-
cal characterizations, which must take disjunctive extensions
into account.

4 Characterizations
In this section, we (cid:2)rst present some characteristic structures
associated with inclusion and equivalence problems under
projections of answer sets, termed spoilers and certi(cid:2)cates.
Based on them, we then discuss some interesting invariance
results.

We start with some general properties.

De(cid:2)nition 2 A set S of SE-interpretations is complete iff, for
each (X; Y ) 2 S, also (Y; Y ) 2 S as well as (X; Z) 2 S,
for any Y (cid:18) Z with (Z; Z) 2 S.

It can be shown that the set SE (P ) of all SE-models of a

program P is always complete.

The following guarantees that a complete set S of SE-

interpretations can be represented by some program P .
Proposition 4 Let S be a complete set of SE-interpretations,
and let A be a set of atoms. Then, there exists a program
PS;A 2 PA such that SE (PS;A)jA = SjA.

(i) (Y; Y ) 2 SE A(P ),
(ii) for each (Z; Z) 2 S, some non-total (X; Z) 2 S exists,
(iii) (Z; Z) 2 S iff (Z; Z) 2 (cid:27)A[B
(iv) (X; Z) 2 S implies (X; Y ) =2 SE A(P ).

(SE A(Q)), and

Y

Intuitively, in a spoiler (Y; S), the interpretation Y is an
answer set of P [ R but not of Q [ R, for some R, which is
semantically given by S.
Example 3 For P1 and P2 from our running example and
A = fa; bg, (Y1; S) and (Y2; S) are the only spoilers for
(P1; P2; PA; (cid:18)A), where Y1 = fabcg, Y2 = fabdg, and
S = f(a; abd); (b; abc); (abc; abc); (abd; abd)g, with the lat-
Y2 (SE A(P2)) =
ter being a subset of (cid:27)A
S [ f(;;abc); (;;abd)g, as required in De(cid:2)nition 3.

Y1(SE A(P2)) = (cid:27)A

The central property of spoilers is as follows:

Theorem 3 Let F = (U; PA; (cid:18)B) be a frame. Then, for any
P; Q 2 PU , P ’F Q iff there is no spoiler for (P; Q; PA; (cid:18)B).
An immediate consequence of this theorem, together with

Part 2 of Proposition 2, is the following result:
Corollary 1 Let F = (U; PA; =B) be an equivalence frame
and P; Q 2 PU . Then, P ’F Q iff neither (P; Q; PA; (cid:18)B)
nor (Q; P; PA; (cid:18)B) has a spoiler.

As discussed later on, spoilers provide a semantical basis

for counterexample generation.
4.2 Certi(cid:2)cates
After having introduced structures which disprove program
correspondence, we now discuss structures which prove pro-
gram correspondence. Roughly speaking, the structures in-
troduced below express the essence of a program P , with re-
spect to program equivalence, in terms of a semantic condi-
tion on P alone.
De(cid:2)nition 4 Let C be a set of atoms and S a set of SE-
interpretations. A pair (X ; Y ), where X is a set of inter-
pretations and Y (cid:18) C, is a C-projection of S iff there exists
some set Z such that (i) (Z; Z) 2 S, (ii) ZjC = Y jC, and
(iii) X = fX j (X; Z) 2 S; X (cid:26) Zg.

For a program P , we call an (A [ B)-projection of

One possibility to obtain PS;A from S is as follows: take
rules   Y; not (A n Y ), for each Y (cid:18) A such that (Y; Y ) =2
SjA, and rules Wp2(Y nX) p   X; not (A n Y ), for each X (cid:26)
Y such that (X; Y ) =2 SjA and (Y; Y ) 2 SjA.
4.1 Spoilers
The (cid:2)rst class of characteristic structures associated with pro-
gram correspondence we are dealing with are of such a nature
that their existence prevents the equivalence of programs un-
der projected answer sets.

We need the following auxiliary notation: Let S be a set of
Y (S) =

SE-interpretations and Y , C sets of atoms. Then, (cid:27)C
f(X; Z) 2 S j ZjC = Y jCg.
De(cid:2)nition 3 Let (cid:5) = (P; Q; PA; (cid:18)B) be an inclusion prob-
lem over U, let Y (cid:18) U be an interpretation, and consider
S (cid:18) (cid:27)A[B

(SE A(Q)). The pair (Y; S) is a spoiler for (cid:5) iff

Y

SE A(P ) an (A; B)-certi(cid:2)cate of P .

The following lemma can be shown by means of spoilers,
and expresses that programs are corresponding with respect
to inclusion frames iff their certi(cid:2)cates satisfy a certain con-
tainment relation.
Lemma 1 Correspondence of (P; Q; PA; (cid:18)B) holds, iff for
each (A; B)-certi(cid:2)cate (X ; Y ) of P , an (A; B)-certi(cid:2)cate
(X 0; Y ) of Q exists with X 0 (cid:18) X .

The next result expresses the central property of certi(cid:2)-
cates. Towards its formulation, we require a further concept:
An (A;B)-certi(cid:2)cate (X ;Y ) of a program P is minimal iff,
for any (A;B)-certi(cid:2)cate (Z;Y ) of P , Z (cid:18) X implies Z = X .
Theorem 4 Let F = (U; PA; =B) be an equivalence frame.
Then, for any P; Q 2 PU , P ’F Q iff the minimal (A; B)-
certi(cid:2)cates of P and Q coincide.

Note that this result is the pendant to Proposition 1, which
deals with a model-theoretic characterization of relativized
strong equivalence.
Indeed, two programs P; Q 2 PU are
strongly equivalent relative to A iff their minimal (A; U)-
certi(cid:2)cates coincide. Some further relations between program
correspondence and relativized and non-relativized strong
equivalence, respectively, are given in the next subsection.
Example 4 In our running example with A = B = fa; bg,
we get that P1 has a single (A; A)-certi(cid:2)cate, (f;g; fabg),
while P2 has two (A; A)-certi(cid:2)cates, (f;; fagg; fabg) and
(f;; fbgg; fabg), all of them minimal. Since they do not
coincide, we obtain that P1 and P2 are not (U; PA; =A)-
equivalent, as expected.
4.3
Theorem 4 allows us to derive some interesting invariance
results with respect to varying projection sets B.
Theorem 5 Let U be a set of atoms and A; B (cid:18) U. Then, for
any P; Q 2 PU , P ’(U ;PA;=B ) Q iff P ’(U ;PA;=A[B ) Q.

Invariance Results

This result follows immediately from Theorem 4 and De(cid:2)-
nition 4, by observing that (A; B)-certi(cid:2)cates of a program P
and (A; A[B)-certi(cid:2)cates of P are actually identical objects,
since (A [ B)-projections of SE A(P ) trivially coincide with
(A [ (A [ B))-projections of SE A(P ).

Theorem 5 has several interesting consequences.

Corollary 2 For programs P; Q and any set A of atoms,
(P; Q; PA; =;) holds iff (P; Q; PA; =A) holds.

That is, answer-set existence (which is relevant regarding
Boolean properties) relative to additions from PA is tanta-
mount to relativized strong equivalence under projection to A.
Corollary 3 Let U be a set of atoms. Then, for any programs
P; Q 2 PU and any set B (cid:18) U of atoms, P ’(U ;PU ;=B ) Q iff
P and Q are strongly equivalent.
This result is quite striking as it shows that strong equivalence
corresponds to (U; PU ; =B)-equivalence, for any projection
set B. It is derived from the fact that, for any B, the (U; B)-
certi(cid:2)cates of a program P are in a one-to-one correspon-
dence to the SE-models of P as follows: (fX1; : : : ; Xmg; Y )
is a (U; B)-certi(cid:2)cate of P iff (X1; Y ), . . . , (Xm; Y ), (Y; Y )
are all the SE-models of P with (cid:2)xed second component Y .
In particular, consistency under answer-set semantics (i.e.,
if B = ;) coincides with strong equivalence. More generally:
Corollary 4 Let U be a set of atoms. Then, for all programs
P; Q 2 PU and all sets A and B of atoms such that A [
B = U, P ’(U ;PA;=B ) Q iff P and Q are strongly equivalent
relative to A.
In fact, in this setting, a correspondence between A-SE-
models of a program and its (A; B)-certi(cid:2)cates is analo-
gously established as above.

(cid:15) R 2 PA such that AS(P [ R) 6(cid:18)BAS(Q [ R), and
(cid:15) M 2 AS(P [ R) and M jB =2 AS(Q [ R)jB.
Furthermore, a counterexample for an equivalence prob-
lem (P; Q; PA; =B) is any counterexample for either (P; Q;
PA; (cid:18)B) or (Q; P; PA; (cid:18)B).

Our notion of a spoiler from De(cid:2)nition 3 provides a basis

for such counterexamples.
Theorem 6 Suppose (Y; S) is a spoiler for a correspondence
problem (cid:5) = (P; Q; PA; (cid:18)B). Then, (PS;A; Y ) is a coun-
terexample for (cid:5), where PS;A is as in Proposition 4.

This result follows from Theorem 3 and Proposition 4 by

the fact that SjA is complete for any spoiler (Y; S).
Example 5 For our example and the sketched construction
after Proposition 4, we derive counterexamples (R; fabcg)
and (R; fabdg), where R = fa _ b   ;   not a;   not b;
  not a; not bg; obviously, the last rule is redundant.

Note that if an inclusion problem (P; Q; PA; (cid:18)B) fails,

some counterexample as in Theorem 6 does exist.

We observe that the programs in the counterexamples of
Theorem 6 may contain redundant clauses, as succinctness
is not a concern of spoilers. For instance, in our example,
R0 = fa _ b  g would yield a simpler counterexample. In
fact, spoilers are not geared towards providing minimal coun-
terexamples with respect to particular syntactic subclasses of
contexts.

Towards facilitating special counterexamples, we may ex-
tend the notion of a spoiler to pairs (Y; S), where S 6(cid:18)
(SE A(Q)) is admitted for complete S, by replacing in
(cid:27)A[B
Y
Y (SE A(Q)) and in
De(cid:2)nition 3 the set S in (ii) with S \ (cid:27)B
(SE A(Q)), calling the result an
(iii) and (iv) with S \ (cid:27)A[B
extended spoiler.
Example 6 In our running example, (cid:5) = (P1; P2; PA; (cid:18)A)
has spoilers (fabcg; S) and (fabdg; S), with S = f(a; abd);
(b; abc); (abc; abc); (abd; abd)g.
62
SE A(P2) and (abcd; abcd) 62 SE A(P2), one can verify that
any complete superset S 0 of S not containing any (;; Z),
with ZjA = fabg, yields extended spoilers (fabcg; S 0) and
(fabdg; S 0).
In particular, we may set S 0 = S [ f(a; a);
(b; b)g. Note that S 0jA = f(a; a); (a; ab); (b; b); (b; ab);
(ab; ab)g. Now, the simpler program R0 = fa _ b  g ful-
(cid:2)lls SE (R0)jA = S 0jA; thus, (R0; fabcg) and (R0; fabdg)
are counterexamples for (cid:5).

Since both (ab; ab)

Y

Theorems 3 and 6 generalize to extended spoilers. More
counterexamples can be constructed using such spoilers in
general, which may include a counterexample of particular
form. In our example, adding f(a; a); (b; b)g to an ordinary
spoiler allowed us to give a counterexample program which
is positive. On the other hand, we can show that no coun-
terexample program which is normal exists (as no (;; Z) with
ZjA = fabg can be added). An elaboration of this issue re-
mains for further work.

5 Counterexamples
Given that a correspondence problem (cid:5) = (P; Q; PA; (cid:18)B)
does not hold, it is interesting to know why this is the case.
We de(cid:2)ne a counterexample for (cid:5) as a pair (R; M ), where

6 Computational Complexity
Our (cid:2)rst result is concerned with recognizing whether an in-
terpretation is a discriminating answer set for the extended
programs P [ R and Q [ R, i.e., a (cid:147)partial(cid:148) spoiler.

Lemma 2 Given programs P and Q, sets A and B of atoms,
and an interpretation Y , deciding whether (P; Q; PA; (cid:18)B)
has some spoiler whose (cid:2)rst component is Y is (cid:5)P
3 -complete.
Proof (Sketch). We show (cid:6)P
3 -membership of deciding that
no spoiler of form (Y; S) exists. By De(cid:2)nition 3, it suf(cid:2)ces
to check whether (a) (Y; Y ) =2 SE A(P ) or (b) whether there
(SE A(Q)) such that each non-total
exists a (Z; Z) 2 (cid:27)A[B
(X; Z) 2 SE A(Q) implies (X; Y ) 2 SE A(P ). Part (a) is
feasible in polynomial time with an NP oracle. For Part (b),
note that given Y and Z, checking whether, for each non-
total (X; Z) 2 SE A(Q) also (X; Y ) 2 SE A(P ), is in (cid:5)P
2 .
Therefore, Part (b) is in (cid:6)P

3 .
3 , and the entire test is in (cid:6)P

3 -hardness is shown by a sophisticated reduction
from suitable quanti(cid:2)ed Boolean formulas (QBFs), using ma-
chinery from the exponential counterexample construction
which was used for showing Theorem 2.
2

The (cid:5)P

Y

From this result, we can easily derive the membership part
of our main complexity result given below; its hardness part
is again shown by an encoding of QBFs.
Theorem 7 Given programs P and Q and sets A and B of
atoms, deciding whether (P; Q; PA; (cid:18)B) holds is (cid:5)P
4 -com-
plete. Moreover, (cid:5)P
4 -hardness holds even for B = ;, i.e., for
answer-set existence.

For the particular case where B = A, which constitutes the
setting where auxiliary letters are used in logic programs, we
obtain in combination with Theorem 5 the same complexity.
Notice that the (cid:147)partial(cid:148) spoiler of Lemma 2 avoids a naive
guess of a (possibly exponentially large) full spoiler (Y; S)
which proves the failure of (P; Q; PA; (cid:18)B), at the expense of
checking involved conditions on SE A(P ) and SE A(Q).

The above results for inclusion problems carry over to
equivalence problems, since they are polynomially intertrans-
latable, as seen by Part 2 of Proposition 2 and the following
fact:
Proposition 5 P ’(U ;PA;(cid:18)B ) Q iff Q ’(U ;PA;=B ) LP;Q,
where LP;Q = fgP _ gQ  ;   gP ; gQg [ fH   gR; B j
R 2 fP; Qg; H   B 2 Rg and gP ; gQ are new atoms.
This holds by virtue of Lemma 1 and Theorem 4, and the fact
that the (A; B)-certi(cid:2)cates of LP;Q are those of P and Q.

If the size of each program in the context C is polynomially
bound by the size of the compared programs P and Q (as is
the case for ordinary and uniform equivalence), the complex-
ity is lower. Let us call such problems (P; Q; C; (cid:26)) bound.
Theorem 8 Given programs P and Q, a context C, a set B
of atoms, such that (cid:5) = (P; Q; C; (cid:18)B) is bound, deciding
whether (cid:5) holds is (cid:5)P
3 -hardness holds even
for C = f;g, i.e., for ordinary equivalence with projection.

3 -complete. (cid:5)P

For other instances of the framework, the complexity is

even lower.
Theorem 9 Given programs P and Q over U and sets A
and B of atoms, deciding whether (P; Q; PA; =B) holds
is (i) coNP-complete if A = U, and (ii) (cid:5)P
2 -complete if
(A [ B) = U.

This result follows from the invariance results in Sec-

tion 4.2 and complexity results due to Woltran [2004].

7 Conclusion and Further Work
We have presented a general framework for expressing solu-
tion correspondences between nonmonotonic logic programs,
and have then developed semantic characterizations of inclu-
sion and equivalence problems under projected answer sets
within a context of possible changes. As we have shown,
they match the intrinsic complexity of the problem.

Our results provide a semantical basis for developing op-
timization and debugging techniques, which are lacking at
present but vital for further enhancements of ASP as a pro-
gramming paradigm.

Several issues remain for future work. One is to extend our
study to different classes of contexts and compared programs,
and to provide suitable semantical and complexity character-
izations. Another issue concerns the construction of (cid:147)good(cid:148)
counterexamples, according to their possible form. Finally,
exploring other notions of correspondences than =B and (cid:18)B
in the general framework is an intriguing issue.

References
[Bonatti, 2001] P.A. Bonatti. Reasoning with open logic pro-

grams. In Proc. LPNMR 2001, pp. 147(cid:150)159.

[Eiter and Fink, 2003] T. Eiter and M. Fink. Uniform equiva-
lence of logic programs under the stable model semantics.
In Proc. ICLP 2003, pp. 224(cid:150)238.

[Eiter et al., 2004] T. Eiter, M. Fink, H. Tompits, and
S. Woltran. Simplifying logic programs under uniform and
strong equivalence. In Proc. LPNMR-7, pp. 87(cid:150)99.

[Gelfond and Leone, 2002] M. Gelfond and N. Leone. Logic
Programming and Knowledge Representation - The A-
Prolog Perspective. AIJ, 138(1-2):3(cid:150)38, 2002.

[Gelfond and Lifschitz, 1991] M. Gelfond and V. Lifschitz.
Classical negation in logic programs and disjunctive data-
bases. New Generation Computing, 9:365(cid:150)385, 1991.

[Inoue and Sakama, 2004] K. Inoue and C. Sakama. Equiv-
alence of logic programs under updates. In Proc. JELIA
2004, pp. 174(cid:150)186.

[Lifschitz et al., 2001] V. Lifschitz, D. Pearce, and A. Val-
verde. Strongly equivalent logic programs. ACM Trans.
Computational Logic, 2(4):526(cid:150)541, 2001.

[Lin, 2002] F. Lin. Reducing strong equivalence of logic pro-
In

grams to entailment in classical propositional logic.
Proc. KR 2002, pp. 170(cid:150)176.

[Oikarinen and Janhunen, 2004] E. Oikarinen and T. Jan-
hunen. Verifying the equivalence of logic programs in the
disjunctive case. In Proc. LPNMR-7, pp. 180(cid:150)193.

[Pearce and Valverde, 2004] D. Pearce and A. Valverde.
Synonymous theories in answer set programming and
equilibrium logic. In Proc. ECAI 2004, pp. 388(cid:150)392.

[Turner, 2003] H. Turner. Strong equivalence made easy:
Nested expressions and weight constraints. Theory &
Practice of Logic Programming, 3(4-5):602(cid:150)622, 2003.

[Woltran, 2004] S. Woltran. Characterizations for relativized
In

notions of equivalence in answer set programming.
Proc. JELIA 2004, pp. 161(cid:150)173.

