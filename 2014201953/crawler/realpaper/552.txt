Aggregate Functions in Disjunctive Logic Programming: 

Semantics, Complexity, and Implementation in DLV* 

Tina  Dell'Armi 

Wolfgang Faber 

Dept.  of Mathematics, 

Inst. f. Informationssysteme 184/3, 

Univ.  of Calabria 

87030 Rende (CS), Italy 
dellarmi@mat.unical.it 

TU Wien 

A-1040Wien, Austria 
faber@kr.tuwien.ac.at 

Giuseppe  Ielpa 

Dept.  of Mathematics, 

Univ.  of Calabria 

87030 Rende (CS), Italy 

ielpa@mat.unical.it 

Nicola Leone 

Gerald  Pfeifer 

Dept.  of Mathematics, Univ.  of Calabria 

Inst. f. Informationssysteme 184/2, TU Wien 

87030 Rende (CS), Italy 

leone@unical.it 

A-1040 Wien, Austria 

pfeifer@dbai.tuwien.ac.at 

Abstract 

Disjunctive  Logic  Programming  (DLP)  is  a  very 
expressive  formalism:  it  allows  to  express  every 
property of finite structures that  is decidable in the 
complexity class E^  (NP N H).  Despite the high ex(cid:173)
pressiveness of DLP, there are some simple proper(cid:173)
ties, often arising in real-world applications, which 
cannot be encoded in a simple and natural manner. 
Among  these,  properties  requiring  to  apply  some 
arithmetic operators (like  sum,  times,  count) on  a 
set  of elements  satisfying  some  conditions,  can(cid:173)
not  be  naturally  expressed  in  DLP.  To  overcome 
this  deficiency,  in  this  paper  we  extend  DLP  by 
aggregate  functions.  We  formally  define  the  se(cid:173)
mantics  of the  new  language,  named  DLP-4.  We 
show  the  usefulness  of the  new  constructs  on  rel(cid:173)
evant knowledge-based problems.  We analyze the 
computational  complexity of DLP" 4,  showing that 
the  addition of aggregates does  not bring a higher 
cost in that respect.  We provide an implementation 
of the  DLP- 4  language  in  D L V-  the  state-of-the-
art DLP  system - and report on experiments which 
confirm  the  usefulness  of the  proposed  extension 
also for the efficiency of the computation. 

1 

Introduction 

Expressiveness of DLP.  Disjunctive Logic Programs (DLP) 
are  logic programs where (nonmonotonic) negation may oc(cid:173)
cur in  the bodies, and disjunction may occur in  the heads of 
rules.  This  language  is  very  expressive  in  a  precise  math(cid:173)
ematical  sense: 
it  allows  to  express  every  property  of  fi(cid:173)
nite  structures  that  is  decidable  in  the  complexity  class  Ep
2 
(NP N P).  Therefore,  under  widely  believed  assumptions, 
*This work was supported by the European Commission under 
projects IST-2002-33570 INFOMIX, IST-2001-32429 ICONS, and 
FET-2001-37004WASP. 

DLP  is  strictly  more  expressive  than  normal  (disjunction-
free)  logic programming, whose expressiveness is limited to 
properties decidable in NP.  DLP can thus express problems 
which  cannot  be  translated  to  Satisfiability  of CNF  formu(cid:173)
las  in  polynomial  time. 
Importantly,  besides  enlarging  the 
class of applications which can be encoded in the  language, 
disjunction  often  allows  for  representing  problems  of lower 
complexity in a simpler and more natural fashion (see  [Eiter 
et al., 2000]). 

The  problem.  Despite this high expressiveness, there  are 
some  simple properties,  often  arising  in  real-world  applica(cid:173)
tions, which cannot be encoded in DLP in a simple and nat(cid:173)
ural manner.  Among these are properties requiring to apply 
some arithmetic operator (e.g., sum, times, count) on a set of 
elements satisfying some conditions.  Suppose, for instance, 
that you  want  to  know  if the  sum  of the  salaries  of the  em(cid:173)
ployees working in a team exceeds a given budget (see Team 
Building,  in  Section  3).  To this end,  you should first order 
the employees defining a successor relation. You should then 
define a sum predicate, in a recursive way, which computes 
the sum of all salaries, and compare its result with the given 
budget.  This approach has two drawbacks:  (1) It is bad from 
the KR perspective, as the encoding is not natural at all; (2) it 
is inefficient, as the (instantiation of the) program is quadratic 
(in the cardinality of the input set of employees).  Thus, there 
is a clear need to enrich DLP with suitable constructs for the 
natural  representation  and to provide  means  for an  efficient 
evaluation of such properties. 

Contribution.  We overcome the above deficiency of DLP. 
Instead of inventing new constructs from scratch, we extend 
the  language with a sort of aggregate functions, first studied 
in  the  context  of deductive  databases,  and  implement  them 
in  DLV  [Eiter el  al. f  2000]  -  the  state-of-the-art  Disjunctive 
Logic  Programming system.  The  main  contributions of this 
paper are the following. 
•  We  extend  Disjunctive  Logic  Programming  by  aggregate 
functions  and  formally  define  the  semantics  of the  resulting 

NONMONOTONIC REASONING 

847 

language, named DLP*4. 
•  We address knowledge representation issues,  showing the 
impact of the new constructs on relevant problems. 
•  We  analyze the  computational  complexity of DLP* 4.  Im(cid:173)
portantly,  it  turns  out  that  the  addition  of aggregates  does 
not increase the computational complexity, which remains the 
same as for reasoning on DLP programs. 
•  We provide an  implementation of DLP* 4  in the  DLV  sys(cid:173)
tem, deriving new algorithms and optimization techniques for 
the efficient evaluation. 
•  We report on experimentation, evaluating the impact of the 
proposed language extension on efficiency.  The experiments 
confirm that, besides providing relevant advantages from the 
knowledge representation point of view,  aggregate functions 
can bring significant computational gains. 
•  We compare DLP*4 with related work. 
We present the most relevant aspects of DLP*4  and of its im(cid:173)
plementation here, referring the interested reader to a techni(cid:173)
cal report with all details [DellArmi et  al,  2003]. 

2  The  DLP A  Language 
In this section, we provide a  formal definition of the syntax 
and semantics of the  DLP*4  language - an extension of DLP 
by  set-oriented  functions  (also  called  aggregate  functions). 
We assume that the reader is familiar with standard DLP; we 
refer to atoms, literals, rules, and programs of DLP, as stan(cid:173)
dard atoms,  standard literals,  standard rules,  and  standard 
programs, respectively.  For further background, see [Gelfond 
and  Lifschitz,  1991;  Eiter etal, 2000]. 

2.1  Syntax 
A  (DLP*4)  set  is  either  a  symbolic  set  or  a  ground  set.  A 
symbolic set  is  a  pair 
,  where  Vars  is a  list 
of variables  and  Coiij  is  a  conjunction  of standard  literals.1 
A ground set  is  a  set  of pairs  of the  form 
, where 
l  is  a  list  of constants  and  Conj  is  a  ground  (variable  free) 
conjunction  of  standard  literals.  An  aggregate  function  is  of 
,  where  5  is  a  set,  and  /  is  a function  name 
the  form 
An  aggre(cid:173)
among 
~  where f(S)  is an aggregate 
gate atom is  ~ 
, and Lg and Rg (called 
function, 
left guard,  and  right guard,  respectively)  are  terms.  One  of 
can be omitted.  An atom is cither a 
standard (DLP) atom or an aggregate atom.  A  literal L  is an 
atom A or an atom A preceded by the default negation symbol 
not;  if A is an aggregate atom, L is an aggregate literal, 

rule r  is a construct 

where a \, • • •, an are standard atoms, b1, • • •, bm are atoms, 
and 

The  disjunction  a.\   

is 

the  head  of  r,  while 

the  conjunction 
is the body of r.  A  (DLP* 4; 

not 

bu...,bk, 
program is a set of DLP*4  rules. 
Syntactic  Restrictions and  Notation 

'intuitively,  a  symbolic  set 
the  set  of  A'-values  making 

for 

als may occur in the conjunction Conj of a symbolic set. 

stands 
i.e., 
.  Note that also negative liter(cid:173)

true, 

For simplicity,  and  without  loss  of generality,  we assume 
that  the  body  of each  rule  contains  at  most  one  aggregate 
atom.  A global  variable  of a  rule  r  is  a  variable  appearing 
in some standard atom of r;  a local variable of r  is a variable 
appearing solely in an aggregate function in r. 

Safety. A rule r is safe if the following conditions hold: (i) 
each global variable of r appears in a positive standard literal 
in  the body  of r;  (ii)  each  local  variable  of r' appearing in  a 
symbolic set 
, also appears in a positive literal 
in  Conj\  (iii)  each  guard of an  aggregate atom of r* is  either 
a constant or a global variable.  A program is safe if all of its 
rules are safe. 
Example 1  Consider the following rules: 

The first rule is safe, while the second is not, since both local 
variables Z and S violate condition (ii).  The third rule is not 
safe cither, since the guard T is not a global variable, violating 
condition (iii). 

Stratification.  A  DLP* 4 program V is aggregate-stratified 
, called level mapping, from the 
if there  exists a  function 
set of (standard) predicates of V to ordinals, such that for each 
pair a  and  b of (standard) predicates  of 
, and for each rule 
appears in the head of r,  and 6 appears in an 
aggregate atom  in the body of r, then 
, and (ii) if 
a appears in the head of r, and b occurs in a standard atom in 
the  body of r,  then   
Example 2  Consider the program consisting of a set of facts 
for predicates a and b, plus the following two rules: 

aggregate-stratification 

The  program  is  aggregate-stratified,  as  the  level  mapping 
satisfies  the  required 
If  we  add  the  rule  b(X):-p(X),  then  no  legal 
conditions. 
level-mapping  exists  and  the  program  becomes  aggregate-
unstratificd. 
Intuitively, 

recursion 
through  aggregates,  which  could  cause  an  unclear  se(cid:173)
mantics 
the 
(aggregate-unstratified)  program  consisting  only  of  rule 
is 
an  intuitive  meaning for the program.  We  should probably 
assert that the above program does  not have any answer set 
(defining  a  notion  of  "stability"  for  aggregates),  but  then 
positive  programs  would  not  always  have  an  answer  set  if 
there  is  no  integrity constraint.  In the  following we  assume 
that DLP*4 programs are safe and aggregate-stratified. 

.  Neither  p(a)  nor 

in  some  cases. 

for  instance, 

Consider, 

forbids 

2.2  Semantics 
denote the set of constants 
Given a DLP*4 program 
the set of the natural numbers oc(cid:173)
appearing in 
curring in Up and B-p the set of standard atoms constructive 
from  the  (standard)  predicates  of V  with  constants  in  Up. 
Furthermore, given a set 
denotes the set of all  multi(cid:173)
sets over elements from X.  Let us now describe the domains 
and the meanings of the aggregate functions we consider: 

count:  defined over 

, the number of elements in the set. 

848 

NONMONOTONIC  REASONING 

, the sum of the numbers in the set. 

sum: defined over 
times:  over 
min,  max: 

the product of the numbers in the set.2 
defined  over 

the  mini(cid:173)
mum/maximum  element  in  the  set;  if the  set  contains  also 
strings, the lexicographic ordering is considered.3 
If the argument of an aggregate function does not belong to its 
domain, the aggregate evaluates to false, denoted as J_ (and 
our implementation issues a warning in this case). 

A substitution  is  a mapping from a  set of variables to  the 
set Up  of the constants appearing in the program V.  A  sub(cid:173)
stitution  from the set of global  variables of a  rule r  (to  U-p) 
is  a  global substitution for  r;  a  substitution  from  the  set  of 
local  variables of a symbolic  set 5  (to  Up)  is  a local substi(cid:173)
tution/or  5.  Given  a  symbolic  set  without  global  variables 
5  =  {  Vars  :  Conj},  the  instantiation  of  set  5  is  the  follow(cid:173)
ing ground  set  of pairs  inst(S): 

A ground instance  of a  rule  r  is  obtained in  two  steps:  (1) 
a  global  substitution  a  for  r  is  first  applied  over r;  (2)  ev(cid:173)
ery  symbolic  set  S  in  o(r)  is  replaced  by  its  instantiation 
inst(S).  The  instantiation  Ground(V)  of  a  program  V  is 
the  set of all  possible instances of the rules of V. 

Example 3  Consider the following program V\: 

The  instantiation  Ground(V\)  is  the  following: 

An  interpretation  for a DLP*4  program V  is a set of stan(cid:173)
. The truth valuation I {A), where 
dard ground atoms 
A is a standard ground literal or a standard ground conjunc(cid:173)
tion, is defined in the usual way.  Besides assigning truth val(cid:173)
ues to the standard ground literals, an interpretation provides 
the meaning also to (ground) sets, aggregate functions and ag(cid:173)
gregate literals; the meaning of a set, an aggregate function, 
and an aggregate atom under an interpretation, is a multiset, 
a value, and a truth-value, respectively.  Let f(S) be a an ag(cid:173)
gregate  function.  The  valuation  I(S)  of set  5  w.r.t.  /  is  the 
multiset of the first constant of the first components of the ele(cid:173)
ments in S whose conjunction is true w.r.t. J. More precisely, 
let 
Conj is true 
w.r.t. I}, then I(S)  is the multiset 
The  valuation  I(f(S))  of an  aggregate  function  f(S)  w.r.t.  / 
is the  result of the application  of the  function /  on  7(5).  (If 
the multiset 7(5) is not in the domain  o f /,   

An  aggregate  atom . 

w.r.t.  I  if: 

is  true 
and, (ii) the relationships 
hold  whenever they 

are present; otherwise, A is false. 

Using  the  above  notion  of truth  valuation  for  aggregate 
atoms, the truth valuations of aggregate literals and rules, as 
times applied over an empty set return 0 and 1, 

sum and 

respectively. 

3The latter is not yet supported in our f\ rst implementation. 
4Given a substitution a and a DLP*4 object Obj (rule, conjunc(cid:173)
tion, set, etc.), with a little abuse of notation, we denote by a (Obj) 
the object obtained by replacing each variable X in Obj by 

(X). 

well as the notion of model, minimal model, and answer set 
for DLP*4  are an  immediate extension of the corresponding 
notions in DLP [Gelfond and Lifschitz,  1991], 
Example 4  Consider  the  aggregate  atom  A  —  #sum{(l  : 
p(2,l)),(2  :  p(2,2))}  >  1  from  Example  3.  Let  5  be 
the  ground  set  appearing  in  A.  For  interpretation  I  = 
{r/(2),/;(2,2),t(2)j,  I(S)  = 
[2],  the  application  of  #sum 
over [2] yields 2, and A is therefore true w.r.t. 7, since 2 >  1. 
I is an answer set of the program of Example 3. 

3  Knowledge Representation in DLP*4 
In this section, we show how aggregate functions can be used 
to encode relevant problems. 
Team Building.  A project team has to be built from a set of 
employees according to the following specifications: 
(pi)  The team consists of a certain  number of employees. 
(p2)  At  least  a  given  number  of  different  skills  must  be 
present in the team. 
(p3) The sum of the salaries of the employees working in the 
team must not exceed the given budget. 
(p/i) The salary of each individual employee is within a spec(cid:173)
ified  limit. 
(pr}) The number of women working in the team has to reach 
at least a given number. 
Suppose that our employees are provided by a number of facts 
of the form emp(EmpId,Sex,Skill,Salary); the size of the team, 
the minimum number of different skills, the budget, the max(cid:173)
imum salary, and the minimum number of women are speci(cid:173)
fied  by the  facts  nEmp(N),  nSkill(N),  budget(B),  maxSal(M), 
and women(W). We then encode each property pj above by an 
aggregate atom  A^  and  enforce  it by  an  integrity  constraint 
containing  not  A t. 

Intuitively, the disjunctive rule "guesses" whether an em(cid:173)
ployee  is  included  in  the  team  or  not,  while  the  five  con(cid:173)
straints  correspond  one-to-one  to  the  five  requirements p i-
P5.  Thanks to  the  aggregates  the  translation  of the  specifi(cid:173)
cations  is  surprisingly  straightforward.  The  example  high(cid:173)
lights  the  usefulness  of  representing  both  sets  and  multi(cid:173)
sets  in  our  language  (a  multiset  can  be  obtained  by  spec(cid:173)
ifying  more  than  one  variable  in  Vans  of a  symbolic  set 
{Vars 
:  Conj}).  For  instance,  the  encoding  of  p2  re(cid:173)
quires  a  set,  as  we  want  to  count  different skills;  two  em(cid:173)
ployees  in  the  team  having  the  same  skill,  should  count 
once w.r.t. p-2-  On the contrary,  p3  requires to sum the ele(cid:173)
ments of a multiset;  if two  employees have the  same salary, 
both  salaries  should  be  summed  up  for  p3.  This  is  ob(cid:173)
tained  by  adding  the  variable  I  to  Vars.  The  valuation 
of {5a, 7  :  c?7?p(7,5x,5fc,  5a),in(1)}  yields  the  set  5  = 
:  Sa  is  the  salary  of  employee  I  in  the  team}. 
{(5a, 7) 
Then, the sum function is applied on the multiset of the first 
components Sa of the tuples  (5a, 7)  in 5 (see Section 2.2). 
Seating.  We  have  to  generate  a  sitting  arrangement  for 
a  number  of guests,  with  ra  tables  and  n  chairs  per  table. 

NONMONOTONIC  REASONING 

849 

Guests who like each other should sit at the same table; guests 
who dislike each other should not sit at the same table. 

Suppose  that  the  number  of chairs  per  table  is  specified 
by  nChairs(X)  and  that  person(P)  and  table(T)  represent 
the guests and the available tables, respectively. Then, we can 
generate a seating arrangement by the following program: 
% Guess whether person P sits at tabic T or not. 
at(P,  T)  V  not.at(P,  T).-person(P),  table(T). 
% The persons sitting at a table cannot exceed the chairs. 
:-table{T)rnChairs(C),not 
% A person is seated at precisely one table; equivalent 
%  to  :-person(P),at(P9T),at{P,  U),T 
:-peraon(P),not 
% People who like each other should sit at the same table... 
:-like(Pl,P2),at(Pl1T)inotat(P2,T). 
% ...while people who dislike each other should not. 
:-dislikc(Ph 

U. 
count{T  :  at(P,T)}  =  1. 

count{P :  at(P,T)}  C. 

P2),at(Pl,T),at(P2,T). 

4  Computational  Complexity  of DLP* 4 
As  for  the  classical  nonmonotonic  formalisms  [Marek  and 
Truszczyhski,  1991], two important decision problems, cor(cid:173)
responding to two different reasoning tasks, arise in DLP- 4: 
(Brave  Reasoning)  Given  a  D L P 4  program  V  and  a 

ground literal L, is  L true in some answer set of  p? 

(Cautious  Reasoning)  Given  a  DLP* 4  program  V  and  a 

ground literal L, is  L true in all answer sets of V? 

The  following  theorems  report  on  the  complexity  of the 
above  reasoning  tasks  for  propositional  (i.e.,  variable-free) 
DLP*4  programs  that  respect  the  syntactic  restrictions  im(cid:173)
posed in  Section 2  (safety and aggregate-stratification).  Im-
portantly, it turns out that reasoning in  DLP -4  does not bring 
an increase in computational complexity, which remains ex(cid:173)
actly  the  same  as  for standard  DLP.  (See  [Dell'Armi  et al., 
2003] for the proofs.) 
Theorem 5  Brave Reasoning on ground DLP* 4 programs is 

-complete. 

Theorem 6  Cautious Reasoning on ground DLP- 4 programs 
is 

-complete. 

Implementation  Issues 

5 
The  implementation of DLP* 4  required changes to  all  mod(cid:173)
ules of DLV. Apart from a preliminary standardization phase, 
most of the  effort concentrated on the  Intelligent Grounding 
and Model Generator modules. 

are  set  to 

formed  such  that both  guards  are present and both 

Standardization. After parsing, each aggregate A is trans(cid:173)
and 
.  The  conjunction  Conj  of  the  symbolic 
set  of A  is  replaced  by  a  single,  new  atom  Aux  and  a  rule 
Aux:-Conj  is  added  to  the  program  (the  arguments  of Aux 
being  the  distinct  variables  of Conj). 

Instantiation.  The  goal  of the  instantiator is  to  generate 
a ground program which has precisely the same answer sets 
as  the  theoretical  instantiation  Ground(V)f  but  is  sensibly 
smaller.  The instantiation proceeds bottom-up following the 
dependencies induced by the rules, and, in particular, respect(cid:173)
ing the ordering imposed by the aggregate-stratification.  Let 
"H:—B,aggr"  be  a  rule,  where  H  is  the  head  of the  rule, 
B  is the conjunction of the  standard body literals,  and aggr 

is  an  aggregate  literal  over  a  symbolic  set 
for  the  literals  in  B; 
First  we  compute  an  instantiation 
this  binds the  global  variables appearing  in  Aux.  The  (par(cid:173)
tially  bound)  atom 
is  then  matched  against  its  exten(cid:173)
sion (since the bottom-up instantiation respects the stratifica(cid:173)
tion,  the  extension  of 
is  already  available),  all  match(cid:173)
ing  facts  are  computed,  and  a  set  of  pairs  

is  an  admissible  instance  of 

is  a  substitution  for  the  local  variables  in 

is  generated,  where 
such 
that 
(recall  that 
DLV's instantiator produces only those instances of a predi(cid:173)
cate which  can  potentially become true  [Faber et al,  1999a; 
Leone et al., 
.  Also,  we only store those elements of 
the symbolic set whose truth value cannot be determined yet 
and process the others dynamically, (partially) evaluating the 
aggregate already during instantiation.  The same process is 
then repeated for all further instantiations of the literals in  B. 

Example 7  Consider the following rule r: 

The standardization rewrites r to: 

Suppose  that  the  instantiation  of  the  rule  for  aux  gener(cid:173)
ates  3  potentially  true  facts  for  aux:  aux(l,a),  aux(l,b),  and 
aux(2,c).  If the potentially true  facts for q are </(l)  and q(2), 
the following ground instances are generated:6 

Duplicate Sets Recognition.  To optimize the evaluation, 
we have designed a hashing technique which recognizes mul(cid:173)
tiple occurrences of the same set in the program, even in dif(cid:173)
ferent rules, and stores them only once.  This saves memory 
(sets may be very large), and also  implies a significant per(cid:173)
formance gain, especially in the model generation where sets 
are frequently manipulated during the backtracking process. 
Example 8  Consider the following two constraints: 

Our  technique  recognizes that  the  two  sets  are  equal,  and 
generates only one instance which is shared by c1 and c2-

Now  assume  that  both  constraints  additionally  contain  a 
standard literal p(X).  In this case, c\  and c-2 have n instances 
each,  where  n  is  the  number of facts  for  p(X).  By  means 
of our technique, each pair of instances of c1 and c2  shares a 
common set, reducing the number of instantiated sets by half. 
Model  Generation.  We  have  designed  an  extension  of 
the  Deterministic Consequences operator of the  DLV  system 
[Faber et al.,  1999b]  for  DLP*4  programs.  The  new opera(cid:173)
tor makes both  forward and backward  inferences on  aggre(cid:173)
gate  atoms,  resulting  in  an  effective  pruning  of the  search 
space.  We have then extended the Dowling and Gallier al(cid:173)
gorithm [Dowling and Gallier,  1984] to compute a fixpoint of 
5 A ground atom A can potentially become true only if we have 

generated a ground instance with A in the head. 

6Note that a ground set contains only those aux atoms which are 

potentially true. 

850 

NONMONOTONIC  REASONING 

this  operator in  linear time  using  a  multi-linked  data  struc(cid:173)
ture  of pointers.  Given  a  ground  set  T9  say,   

,  this  structure  allows us  to 
access  T  in  O(1)  whenever  some  Aux1  changes  its  truth 
value  (supporting  fast  forward  propagation);  on  the  other 
hand,  it  provides  direct  access  from  T  to  each  Aux1  atom 
(supporting fast backward propagation). 

6  Experiments and Benchmarks 
To assess the usefulness of the proposed DLP extension and 
evaluate  its  implementation, we  compare the  following two 
methods for solving a given problem: 
•  DLV-4.  Encode the problem in DLP-4 and solve it by using 
our extension of DLV  with aggregates. 
•  DLV. Encode the problem in standard DLP and solve it by 
using standard DLV. 

To generate DLP encodings from  DLP- 4  encodings, suit(cid:173)
able logic definitions of the aggregate functions are employed 
(which are recursive for 

sum, and 

times). 

count, 

We compare these methods on two benchmark problems: 
Time Tabling is  a  classical planning problem.  In partic(cid:173)
ular,  we  consider  the  problem  of planning  the  timetable  of 
lectures  which  some  groups  of students  have  to  take.  We 
consider a  number of real-world  instances at our University, 
where instance k deals with k groups. 

Seating is  the problem described  in  Section 3.  We con(cid:173)
sider 4  (for small  instances)  or 5  (for larger instances)  seats 
per table, with increasing numbers of tables and persons (with 
numPersons  —  numSeats  *  numTables).  For  each  prob(cid:173)
lem size (i.e., seats/tables configuration), we consider classes 
with different numbers of like resp. dislike constraints, where 
the percentages are  relative to  the maximum  number of like 
resp.  dislike  constraints  such  that  the  problem  is  not  over-
constrained7.  In particular, we consider the following classes: 
-) no like/dislike constraints at all;  -) 25% like  constraints; 
-)  25%  like  and  25% dislike  constraints;  -)  50% like  con(cid:173)
straints;  -)  50%  like and 50% dislike constraints.  For each 
problem size,  we have randomly generated  10 instances for 
each class above. 

For Seating we  use the  DLP-4  encoding reported in  Sec(cid:173)
tion  3;  all  encodings  and  benchmark  data  are  also  avail(cid:173)
able  on  the  web  at  h t t p : / / w w w . d l v s y s t e m . c o m/ 
e x a m p l e s / i j c a i 0 3 . z i p. 

Figure 1:  Experimental Results for Timetabling 

Figure 2:  Experimental Results for Seating 

We ran the benchmarks on AMD Athlon 1.2 machines with 
512MB of memory, using FreeBSD 4.7 and GCC 2.95.  We 
have allowed a maximum running time of 1800 seconds per 
instance and  a maximum memory  usage of 256MB.  Cumu(cid:173)
lated results are provided in Figures 1 and 2. In particular, for 
Timetabling we report the execution time and the size of the 
residual  ground instantiation (the total  number of atoms oc(cid:173)
curring in the instantiation, where multiple occurrences of the 
same atom are counted).8  For Seating, the execution time is 
the average running time over the instances of the same size. 
A  "-"  symbol  in  the  tables  indicates  that  the  corresponding 
instance (some of the instances of that size, for Seating) was 
not solved within the allowed time and memory limits. 

On  both problems,  DLV- 4  clearly  outperforms  DLV.  On 
Timetabling,  the  execution  time  of  DLV- 4  is  one  order  of 
magnitude  lower than  that  of DLV  on all problem instances, 
and DLV could not solve the last instances within the allowed 
memory and time limits.  On Seating, the difference becomes 
even  more  significant.  DLV  could  solve  only the  instances 
of small  size  (up  to  16  persons  -  4  tables,  4  seats);  while 
DLV-4 could solve significantly larger instances in a reason(cid:173)
able time.  The information about the instantiation sizes pro(cid:173)
vides  an  explanation  for such  a  big  difference between  the 
execution  times  of DLV  and  DLV* 4.  Thanks to  the  aggre(cid:173)
gates,  the  DL?A  encodings  of Timetabling  and  Seating  are 
more succinct than the corresponding encodings in  standard 
DLP; this succinctness is also reflected in the ground instan(cid:173)
tiations of the programs.  Since the evaluation algorithms are 
then exponential (in the worst case) in the size of the instan(cid:173)
tiation,  the  execution  times  of DLV- 4  turn  out  to  be  much 
shorter than the execution times of DLV. 

7  Related Works 
Aggregate  functions  in  logic  programming  languages  ap(cid:173)
peared already  in  the  80s,  when  their need  emerged in  de(cid:173)
ductive databases like LDL  [Chimenti et al,  1990] and were 
studied in detail,  cf.  [Ross and Sagiv,  1997; Kemp and Ra-
mamohanarao,  1998].  However,  the  first  implementation in 
Answer Set Programming, based on the Smodels system,  is 
recent  [Simons et ai,  2002]. 

Comparing DLP-4 to the language of Smodels, we observe 
a strong similarity between cardinality constraints there and 
sum and weight constraints in Smodels are 

count.  Also 

7Beyond these maxima there is trivially no solution. 

8 Note that also atoms occurring in the sets of the aggregates are 

counted for the instantiation size. 

NONMONOTONIC  REASONING 

851 

max, and 

similar in spirit.  Indeed, the  DLpA  encodings of both Team 
Building and Seating can be easily translated to Smodels' lan-
guage.  However,  there  are  some  relevant differences.  For 
instance,  in  DLP*4  aggregate  atoms  can  be  negated,  while 
cardinality  and weight constraint literals in  Smodels cannot. 
Smodels, on the other hand, allows for weight constraints in 
the  heads  of rules,  while  DLP"4  aggregates cannot occur in 
heads. (The presence of weight constraints in heads is a pow(cid:173)
erful KR feature; however, it causes the loss of some seman(cid:173)
tic  property  of nonmonotonic  languages  [Marek  and  Rem-
mel, 2002].) Observe also that DLP*4 aggregates like  min, 
times  do not have  a  counterpart in  Smodels. 
Moreover,  DLP-4  provides a general  framework where  fur(cid:173)
ther aggregates can be easily accommodated (e.g.,  any and 
avg  are  already  under  development).  Furthermore,  note 
that  symbolic  sets  of DLP*4  directly  represent pure  (math(cid:173)
ematical)  sets,  and  can  also  represent  multisets  rather  nat(cid:173)
urally  (see  the  discussion  on  Team  Building  in  Section  3). 
Smodels weight constraints, instead, work on multisets, and 
additional rules are needed to encode pure sets; for instance. 
Condition p>2  of Team Building cannot be encoded directly 
in a constraint, but needs the definition of an extra predicate. 
A positive aspect of Smodels is that, thanks to stricter safety 
conditions (all variables are to be restricted by domain pred(cid:173)
icates),  it is  able to deal  with recursion through aggregates, 
which is forbidden in D L P ^.  Finally, note that DLP- 4 deals 
with  sets  of terms,  while  Smodels deals with  sets  of atoms. 
As  far as the  implementation is concerned, also  Smodels is 
endowed  with  advanced  pruning  operators  for  weight  con(cid:173)
straints, which are efficiently implemented; we are not aware, 
though, of techniques for the automatic recognition of dupli(cid:173)
cate sets in Smodels. 

DLP-4 also seems to be very similar to a special case of the 
semantics for aggregates discussed in [Gelfond, 2002], which 
we are currently investigating. 

Another interesting research line uses 4-valued logics and 
approximating operators to define the semantics of aggregate 
functions  in  logic-based  languages  [Denecker et aL,  2001; 
2002; Pelov, 2002].  These approaches are founded on very 
solid theoretical grounds, and appear very promising, as they 
could provide a clean formalization of a very general frame-
work for arbitrary aggregates in logic programming and non(cid:173)
monotonic reasoning, where aggregate atoms can also "pro(cid:173)
duce" new values (currently, in both DLP- 4 and Smodels the 
guards of the  aggregates  need  to  be  bound to  some  value). 
However,  these  approaches  sometimes  amount  to  a  higher 
computational complexity [Pelov, 2002], and there is no im(cid:173)
plementation available so far. 

8  Conclusion 
We have proposed DLP-4, an extension of DLP by aggregate 
functions, and have implemented DLP*4 in the DLV system. 
On  the  one  hand,  we  have demonstrated that the  aggregate 
functions  increase  the  knowledge  modeling power  of DLP, 
supporting a more natural and concise knowledge represen(cid:173)
tation.  On  the  other hand,  we  have  shown  that  aggregate 
functions  do  not  increase  the  complexity  of the  main  rea(cid:173)
soning tasks.  Moreover, the experiments have confirmed that 

the  succinctness of the  encodings employing aggregates has 
a strong positive impact on the efficiency of the computation. 
Future work will concern the introduction of further aggre(cid:173)
gate  operators,  the  relaxation  of the  syntactic  restrictions of 
D L P A , and the design of further optimization techniques and 
heuristics to improve the efficiency of the computation. 

We  thank  the  anonymous  reviewers  for  their  thoughtful 

comments and suggestions for improvements of this paper. 
References 
[Chimenti et al, 1990]  D.  Chimcnti,  R.  Gamboa,  R.  Krishna-
murthy, S. Naqvi, S. Tsur, and C. Zaniolo.  The LDL System 
Prototype. IEEE TKDE, 2(1), 1990. 

[DeirArmie/a/.,2003]  T.  Dell'Armi,  W.  Faber,  G. 

Ielpa, 
N. Leone, and G. Pfeifer.  Semantics and Computation of Ag(cid:173)
gregate Functions in Disjunctive Logic Programming.  Technical 
Report INFSYS RR-1843-03-07, TU Wien, April 2003. 
Pelov, 

and 
M.  Bruynooghe.  Well-Founded  and  Stable  Model  Seman(cid:173)
tics  for  Logic  Programs  with  Aggregates. 
ICLP-2001,  pp. 
212-226. Springer, 2001. 

[Denecker  etal,  2001]  M.  Denecker, 

[Denecker et aL, 2002]  M.  Denecker, 

and 
M.  Truszczynski.  Ultimate  Approximations  in  Monotonic 
Knowledge Representation Systems. KR-2002, pp. 177-188. 

V.  Marek, 

[Dowling and Gallier, 1984]  W.  F.  Dowling  and  J.  H.  Gallicr. 
Linear-time Algorithms for Testing the Satisfability of Proposi-
tional Horn Formulae. JLP, 3:267-284, 1984. 

N. 

[Eiter et al., 2000]  T.  Eiter,  W.  Faber,  N.  Leone,  and G.  Pfeifer. 
Declarative Problem-Solving  Using the DLV  System.  Logic-
Based Artificial Intelligence, pp. 79-103. Kluwer, 2000. 

[Faber et al, 1999a]  W. Faber, N. Leone, C. Mateis, and G. Pfeifer. 
Using  Database  Optimization  Techniques  for  Nonmonotonic 
Reasoning. DDLP '99, pp. 135-139. 

[Faber etal, 1999b]  W. Faber, N. Leone, and G. Pfeifer.  Pushing 
Goal Derivation in DLP Computations.  LPNMR'99, pp.  177-
191. Springer. 

[Gelfond and Lifschitz, 1991]  M. Gelfond and V. Lifschitz. Classi(cid:173)
cal Negation in Logic Programs and Disjunctive Databases. New 
Generation Computing, 9:365-385, 1991. 

[Gelfond, 2002]  M.  Gelfond.  Representing  Knowledge  in  A-

Prolog. Computational Logic. Logic Programming and Beyond, 
number 2408 in LNCS, pp. 413-451. Springer, 2002. 

[Kemp and Ramamohanarao, 1998]  D. B. Kemp and K. Ramamo-
hanarao.  Effi cient Recursive Aggregation and Negation in De(cid:173)
ductive Databases. IEEE TKDE, 10:727-745, 1998. 

[Leone et aL, 2001]  N. Leone, S. Perri, and F. Scarcello. Improving 
ASP Instantiators by Join-Ordering Methods. LPNMR '01, LNAI 
2173. Springer, September 2001. 

[Marek and Remmel, 2002]  V.W.  Marek  and  J.B.  Remmel.  On 
Logic Programs with Cardinality Constraints.  NMR '2002, pp. 
219-228, April 2002. 

[Marek and Truszczynski, 1991 ] V.W. Marek and M. Truszczynski. 

Autoepistemic Logic. JACM, 38(3):588-619, 1991. 

[Pelov, 2002]  N. Pelov.  Non-monotone Semantics for Logic Pro(cid:173)
grams with Aggregates,  h t t p: / /www. cs . kuleuven. ac. 
be/~pelov/papers/nma.ps  .gz.,October 2002. 

[Ross and Sagiv, 1997]  K. A. Ross and Y. Sagiv. Monotonic Aggre(cid:173)
gation in Deductive Databases. Journal of Computer and System 
Sciences, 54(l):79-97, February 1997. 

[Simons etal, 2002]  P. Simons, I. Niemela, and T. Soininen.  Ex(cid:173)
tending and Implementing the Stable Model Semantics. Artificial 
Intelligence, 138:181-234, June 2002. 

852 

NONMONOTONIC  REASONING 

