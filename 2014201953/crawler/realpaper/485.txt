Formal Verification of Diagnosability via Symbolic Model Checking 

Alessandro Cimatti 

Charles Pecheur 

Roberto Cavada 

ITC-irst 

ITC-irst 

RIACS/NASA Ames Research Center 

Povo, Trento, Italy 
mailto:cimatti@irst.itc.it pecheur@ptolcmy.arc.nasa.gov cavada@irst.itc.it 

Moffett Field, CA, U.S.A. 

Povo, Trento, Italy 

Abstract 

This paper addresses the formal verification of di(cid:173)
agnosis systems. We tackle the problem of diagnos(cid:173)
ability:  given a partially observable dynamic sys(cid:173)
tem, and a diagnosis system observing its evolution 
over time, we discuss how to verify (at design time) 
if the diagnosis system will be able to infer (at run(cid:173)
time) the required information on the hidden part of 
the dynamic state. We tackle the problem by look(cid:173)
ing for pairs of scenarios that are observationally 
indistinguishable, but lead to situations that are re(cid:173)
quired to be distinguished. We reduce the problem 
to a model checking problem. The finite state ma(cid:173)
chine modeling the dynamic system is replicated to 
construct such pairs of scenarios; the diagnosabil(cid:173)
ity conditions are formally  expressed in temporal 
logic;  the  check  for diagnosability  is  carried out 
by solving a model checking problem.  We focus 
on the practical applicability of the method.  We 
show how the formalism is adequate to represent 
diagnosability problems arising from a significant, 
real-world application.  Symbolic model checking 
techniques are used to formally verify and incre(cid:173)
mentally refine the diagnosability conditions. 

Introduction 

1 
Diagnosis  is  the process  of inferring  the  (most  plausible) 
causes for the behavior of a given system, given a set of ob(cid:173)
servations.  In many control applications,  ranging from in(cid:173)
dustrial plants (e.g. production, power) to transportation (e.g. 
railways, avionics, space), diagnosis needs to be carried out 
on-line, in parallel with the control process. This is needed to 
identify whether the controlled system is working correctly 
or not, and to provide the controller with information on the 
degraded conditions (e.g.  what are the malfunctioning de(cid:173)
vices), so that the appropriate counter-measures can be taken. 
The ability to validate such diagnosis systems becomes very 
important, in particular in the case of applications operating 
in hazardous or inaccessible conditions and carrying out vital 
functions. 

In this paper, we focus on the key issue of diagnosability, 
i.e. the possibility for an ideal diagnosis system to infer accu(cid:173)
rate and sufficient run-time information on the behavior of the 

observed system. We propose a new, practical approach to the 
verification of diagnosability, making the following contribu(cid:173)
tions. First, we provide a formal characterization of diagnos(cid:173)
ability problem, using the idea of context, that explicitly takes 
into account the run-time conditions under which it should be 
possible to acquire certain information. 

Second, we show that a diagnosability condition for a given 
plant is violated if and only if a critical pair can be found. A 
critical pair is a pair of executions that are indistinguishable 
(i.e.  share the same inputs and outputs), but hide conditions 
that should be distinguished (for instance, to prevent simple 
failures to stay undetected and degenerate into catastrophic 
events). We define the coupled twin model of the plant, and 
show that it can be used to search for critical pairs. 

Third, we recast the problem in the framework of Model 
Checking [Clarke et al, 1999], a verification technique that 
is gaining increasing interest also in AI. With model check(cid:173)
ing, it is possible to exhaustively analyze the (possibly infi(cid:173)
nite) behaviors of (large sized) finite state machines, and to 
check if requirements expressed in terms of Temporal  Log(cid:173)
ics [Emerson,  1990] are met.  We show how to represent a 
diagnosability problem in terms of temporal logic formulae, 
and how to reduce it to a model checking problem over the 
coupled twin model. 

Finally, we demonstrate the practical applicability within 
the Livingstone framework, a model-based diagnosis system 
developed at NASA  Ames  Research Center  [Williams and 
Nayak, 1996]. We developed a platform able to generate for(cid:173)
mal models for the twin plant, starting from Livingstone mod(cid:173)
els.  Several diagnosability problems corresponding to inter(cid:173)
esting scenarios from real-world applications were tackled by 
means of the NuSMV model checker [Cimatti et al, 2002], 
An experimental analysis shows that the verification of diag(cid:173)
nosability can be practical: large Livingstone models of space 
transportation systems are automatically analyzed within sec(cid:173)
onds by means of SAT-based symbolic model checking tech(cid:173)
niques. 

The paper is organized as follows.  In Section 2, we state 
our working hypotheses. In Section 3 we formalize the prob(cid:173)
lem, while in Section 4 we characterize our approach. In Sec(cid:173)
tion 5, we discuss the application of model checking tech(cid:173)
niques.  In Section 6, we describe the experimental frame-
work. Finally, Section 7 reviews similar work, and Section 8 
draws some conclusions and outlines future lines of activity. 

DIAGNOSIS 

363 

Figure  1:  Architecture of a diagnosis system 

2  Working Hypotheses 
We consider a diagnosis system connected to a feedback con(cid:173)
trol  loop  between  a plant and  its  controller (Figure  1).  The 
inputs of the plant are the commands issued by the controller; 
its outputs are measurements returned back to the controller. 
The role of the diagnosis system is to observe the inputs and 
the outputs to the plant, and to report a state estimation, track-
ing the evolution of the unobservable state of the plant.  This 
task is substantially more complex than diagnosis for a com(cid:173)
binatorial,  memory-less  system.  An estimation consists of a 
set of possible states of the plant, in the following referred to 
as a belief state. Although diagnosis might rank these states 
based on likelihood, as a first approach we ignore that aspect. 
We also disregard issues such as the correspondence between 
the model  of the plant and the plant itself.  We will  focus on 
plants modeled as  finite-state  discrete systems.  We  assume 
that  we  have  a  model  of the plant as  a  partially observable 
transition system, according to the following definition. 
Definition  1  A  (partially  observable)  plant  is  a  structure 
where  X, 17, Y  are finite  sets,  respectively 

called  the  state  space,  input  space  and  output  space, 
X  x  U  x  X  is  the  transition  relation,  and 
the observation relation. 
We  assume  that  a p
l

is  given.  We  use 

t

is 

n
to  denote  states  of 

a

to  denote 
inputs of P,  y,  y0,  y1,  • • •  to  denote  outputs  of P.  We  write 
The 
state  is  the  "hidden"  part  of the  plant:  only  the  sequences 
of inputs  and  outputs  are  observable.  P  covers  all  types  of 
behaviors  that  diagnosis  is  expected  to  handle —  including 
faulty behaviors, with X  containing faulty states.  In general, 
P need not be deterministic.  Thus, the state after a transition 
may not be uniquely determined the state before the transition 
and by the input.  Observability is modeled by associating to 
each state a (non empty) set of possible outputs. It is therefore 
possible  to model different forms of observation,  e.g.  when 
the information conveyed by the sensors is also uncertain.  In 
this paper, we present the (input,  state and output) spaces of 
a  plant by  means  of assignment to  (input,  state  and  output) 
variables ranging over finite sets of values; the transition and 
observation relation can be compactly presented with boolean 

formulae.  (Notice  however  that  the  content  of the  paper  is 
independent of the specific description used to present  P.) 
Definition 2  A  feasible  execution  of 
a  sequence 

steps  in  P  is 
such 

and 

for  0 

as  the  set  of all feasible  execu(cid:173)

r

c

a

e.  The 

tions  of P.  The  observable  trace  of a  feasible  execution 
is 
such a a exists. 
The above definition defines the dynamics of a plant and  its 
has  k 
observable  counterpart.  Notice  that  if an  execution 
steps,  then  the  corresponding  t
In the 
set of traces is  in general a subset 
to denote a feasible execution, and w to 
following we use 
denote the corresponding (observable) trace.  For explanatory 
purposes,  we consider the plant outlined in  Figure 2,  that is 
a  simplified  segment of the  real-world application described 
in  Section 6.  A  pneumatic  valve (PV) controls  the  flow  of a 
feeding line to the engine, and it is closed in its resting posi(cid:173)
tion (determined by the action of a spring).  A solenoid valve 
(SV),  when  open,  can  open  PV  by  directing the pneumatic 
flow against the spring.  When SV is closed, the action of the 
spring is no longer contrasted and PV can close.  SV can re(cid:173)
ceive an input (open/close), but has no  observables.  PV has 
two  sensors,  each providing information on a position (e.g. 
whether  it  is  open  or  not).  Both  valves  can  become  stuck 
in  their  current  position.  The  position  of the  valves  influ(cid:173)
ences  the  pneumatic  and  engine  flows.  Each  of the  valves 
has  two  unobservable  variables:  s t a t e,  with  values  open 
and c l o s e d, and  f a i l u re  mode,  with values  s t u ck and 
ok.  The input variable can take the values no-cmd, open, 
and c l o s e. The effect of a command depends on the current 
status.  Failures  can  occur at  any time,  and  are  permanent. 
Sensors  of PV  are  also  associated  with  a  f a i l u r e _ m o de 
variable, that determines what information is conveyed. 

3  Diagnosability 
Run-time  diagnosis  starts  from  a  (possibly  partial)  initial 
knowledge, observes the sequence of inputs and outputs, and 
tries to update a belief state that is an estimate of the possible 
states of the plant. For instance, if S V is commanded open, 
and the PV is not sensed open, then some problem should be 
diagnosed.  It could be that SV or PV are stuck, or even that 

364 

DIAGNOSIS 

both PV sensors are not working correctly.  Ideally, a diagno­
sis function should return belief states that are as specific (i.e. 
as small) as possible, but include the actual state of the plant. 

The intuition behind correct diagnosis values is that they en­
compass all potential current states, so that they cannot miss 
the actual state.  In the following, we restrict ourselves to cor­
rect diagnosis functions. 

telling  if any  fault  is 
or fault  separation,  i.e.  distin­

Diagnosability  aims  at  detecting  if (parts  of)  the  hidden 
state can be accurately tracked by  looking at the observable 
traces.  We  use diagnosis  conditions to  specify which  infor­
mation on the state we are interested in distinguishing. 
Definition  4  A  diagnosis  condition for a plant P  is  a pair of 
nonempty sets of states 
We  can  express fault  detection,  i.e. 
present 
guishing between different faults (or fault classes) ( 
faulty).  Intuitively,  a  diagnosis  value  is  not  satisfactory  if it 
intersects  with  both  sides  of the  condition.  In  the  example, 
a  fault separation condition  is  not satisfied  if we have a be­
lief state containing both a state where PV is faulty, and one 
where SV is faulty. 
However, it would be unrealistic to require that diagnosis pro­
vide correct and exact state estimations,  instantaneously and 
under all  circumstances.  For instance,  a  stuck  PV  will  stay 
unnoticed at least as long as SV is not operated.  Rather, we 
require  a  diagnosis  system  to be able to decide between al­
ternative conditions on the state of the system  in the context 
where the distinction becomes critical. 

Figure 3:  Critical pair 

4  Diagnosability as Coupled Reachability 
Our approach  to  reasoning  about  diagnosability  is based on 
refutation, i.e.  we search for ways in which the diagnosability 
property can be violated.  Intuitively,  we verify the diagnos­
by checking that P does not have a critical 
ability  of 
pair, i.e.  two executions with identical observable traces, one 
leading to c1, one leading to c2  (see Figure 3). 
Definition  7  A  critical  pair  of  a  plant  P,  with  trace  w,  for  a 
diagnosis  condition 
is a pair of feasible executions 

in a given context is 
to be diag-

is diagnosable over C in P, if and only 

The absence of critical pairs  for 
a necessary and sufficient condition  for 
nosable in that context. 
Theorem 8 
if P  has  no  critical pair  for 
To prove the theorem, we introduce the notion of perfect di-
agnosis,  written 
i.e.  the  most  specific  correct  diagnosis 
function that can be made assuming full knowledge of P. 
Definition  9  The perfect diagnosis for a plant P is the diag-
nosis function 
Given an initial belief state X0 and trace 
returns 
exactly all states that can be reached from x0 through w.  It is 
is correct, and that it is the most informative 
easy to see that 
for any correct 
diagnosis function, i.e. 
is diagnosable in a 
from 

plant P over a context C if and only if 
Definition  6,  if 
C2.  Therefore, 
satisfies  any  diagnosable  condition,  since 
its  diagnosis  values are more specific than any other correct 
diagnosis function. 
Proof of Theorem 8 
if and only  if there exist  X0  and  w  such that 

is not diagnosable in P over C; 

" 

can be stated as 

Intuitively, 0 defines the initial conditions under which diag­
nosability is to be investigated, by inducing of a set of disjoint 
belief states.  Basically,  the  initial  belief state  XQ  must  fall 
(the condition on 
within one of the belief states  induced by 
For 
example, 
can  partition  states  according to the positions  of 
PV and SV, to capture the assumption that we initially (only) 
know those positions. 
characterizes pairs of relevant exe­
cutions.  For instance, we may want to express the fact that the 
controller commands  SV  to be open and closed at least one 
time.  In  the  case  of fault  detection,  we  might want to  state 
that the elements  of 
are pairs of traces, there the first are 
without faults, while the second ones have exactly one fault. 
Notice that expressing 
would be inadequate: 
for instance, in fault separation it would be impossible to con­
strain the two runs to have different failures.  In the following 
we assume that a context 
is given.  The notion 
of diagnosability is precisely characterized as follows. 

We  observe that a condition 

DIAGNOSIS 

365 

if  and  only  if  there  exist 

such that 

x2 

if  and  only  if there  exists  a  critical  pair  for 

and 

for 

In order to search for critical pairs in P, we build the cou­
pled twin plant  for P,  written  P  •  P,  i.e.  a "Siamese  twins** 
plant, made out of two copies of P, whose inputs and outputs 
are forced to be identical. 

In  the  following,  we  assume  that  the  coupled  twin  plant 
P • P of P is given. The importance of the coupled twin plant 
construction is shown by the following theorem. 

1

1a

re 

two 

Theorem 
feasible  executions  in  P  if and  only  if 
(x1, X2) is a feasible execution in P ■ P. 
This  is  easily  demonstrated  by  induction  on  the  length  k  of 
From  Defini­
executions.  When 
•  X  and 
tion  10, 
The step case is proved by extend­
ing with a transition the executions of length k, for which the 
theorem holds.  From  Definition  10, the transitions  in P •  P 
mimic the transitions  in P.  For the last observation, we rea­
son as for the base case. 

5  Diagnosability via Model Checking 
We  work  in the framework of Model Checking  [Clarke et al, 
1999], a formal verification technique that is increasingly ap­
plied  to  the  design  of industrial  digital  systems  (e.g.  com­
munication protocols, hardware design).  Model checking al­
lows to verify  if the  (possibly  infinite) behaviors  of a system 
satisfy a given property.  The system being analyzed is pre­
sented as a Kripke structure, while properties are expressed 
in a temporal  logic  [Emerson,  1990].  Model checking algo­
rithms are based on the exhaustive exploration of the Kripke 
structure.  The  technique  is  completely  automatic  and,  if a 
property is violated,  it can produce a counterexample, i.e.  a 
simulation witnessing the violation.  Symbolic model check­
ing  [McMillan,  1993]  is  based  on the  manipulation  of sets 
of states  described  by  boolean  formulae;  efficient  engines, 
such  as  Binary  Decision  Diagrams  (BDDs)  [Bryant,  1986] 
and SAT solvers [Moskewicz et al., 2001 ], provide a basis for 
efficient representation and exploration of the search space. 

Our  approach  to  diagnosability  inherits  several  elements 
from model checking.  The first is that a plant P can be asso­
ciated  with  a  Kripke  structure  Kp  representing  its  behavior. 
This makes it possible for us to directly analyze a plant with 
model checking techniques.  A Kripke structure is basically a 
nondeterministic transition system, where transitions are not 
labeled, while information is associated with states (i.e.  each 
state  is  associated  with  a  valuation to  the  state  variables  of 
the  structure).  The  mapping  from plant to  Kripke  structure 

366 

is rather simple, and is based on the idea that the state, input 
and output spaces  of the plant can be encoded into the  state 
space of the Kripke structure. The information on the inputs, 
labeling the transitions in P, simply becomes part of the state 
of Kp, and is to be interpreted as "the input that will be pro­
cessed in the next transition**.  More formally, each state s in 
Kp  is  associated  with  a  valuation  that characterizes  a  triple 
P  is  in state x,  output y  is  observed and input 
u is received.  The dynamics of P directly induce the dynam­
ics  of Kp.  For  each  feasible  execution 
in  P  of the  form 
there is a corresponding 
in  Kp,  i.e.  a  sequence  of s t a t e s w h e re 

path 
each  S  is  associated  with  the  triple 
The same 
mapping lifts to the coupled twin plant construction.  (In the 
above description, we omit a few technical details, having to 
do  in  particular  with  the  fact  that  a  Kripke  structure  is  as­
sumed to be total, i.e.  every state has at least one successor. 
In this way, it is possible to assume that the analyzed paths are 
infinite.  Since  inputs become part of the state,  it  is possible 
that the transition relation is no longer total.  There are stan­
dard workarounds to this problem, routinely used in verifica­
tion and in AI planning.  See for instance  [Cimatti and Roveri, 
2000].) 
In  the  following,  we  assume  that  Kripke  structure 
Kp.p corresponding to the coupled twin plant P ■ P is given. 
The second element from model  checking is the symbolic 
representation.  The  state  of Kp.p  is  defined  with  a  vec­
tor of variables  ( x1, x2, u , y ),  respectively  ranging  over Ar, 
X,  U  and  Y.  We  can  use  formulae  to  characterize  sets  of 
In  Kp.p  we  express  atomic  propositions  over  such 
states. 
variables.  We can have equalities between variables and the 
corresponding  values:  P I . P V , i n p ut  =  c l o se  denotes 
the  set  of states  where  the  first  instance  of PV  receives  the 
c l o se command. Variables of the same type can be equated: 
P I. SV. f a i l u r e _ m o de  =  P2  . SV. f a i l u re  mode  de­
scribes  the  set  of states  where  the  two  instances  of SV  in 
Any  subset 
the  twin  plant  have  the  same  failure  mode. 
c  of  XxXxUxY  can  be  described  with  a 
formula 
c(x1,X2,y,u).  For instance,  the  formula 
expresses a state of the twin plant where the first instance is in 
C1 and the second is in C2. Similarly, 
is a (proposi-
tional) formula expressing, in symbolic form, the equivalence 
relation 

and 

are LTL  formulae,  so  are 

The  third  ingredient  from  model  checking  is  the  use  of 
temporal logics  to  characterize  behaviors  of the  system  over 
time.  We use LTL (Linear Temporal Logic [Emerson, 1990]), 
where formulae are constructed starting by combining atomic 
propositions with boolean operators and temporal modalities. 
If 
(sometimes in  the 
future 
(always in the  f u t u r e ( s o m e t i m es  in 
the future  and, until then, 
An  LTL formula  holds on a path TT (written 
. If p is an atomic propo­
true in n at (step) 0 (written 
sition, then 
p is  true according to the assignment 
associated with the i-th state  of  Boolean connectives have 
the standard interpretation 
and 
The interesting cases of temporal operators are as 

(in the next time step 

iff 

iff there exists 

DIAGNOSIS 

MODULE  main 
VAR 

{  no_cmd,  open,  close  }; 

sv_cmd  : 
:  EX_type(sv_crnd, 
PI 
P2  :  EX_type(sv_cmd, 

. . . ); 
. . . ); 

{abvThresh,blwThresh}; 
: 

{open,closed}; 

INVAR 

MODULE  SV_type 

(cmd_in) 

MODULE  PV_type  (  ) 
VAR  pneumaticsLineln 
: 
VAR  valvePositionValue 
VAR  mode 

: 

{stuckOpen,nominal,stuckClosed}; 

(PI.PV.sense_open  =  P2.PV.sense_open)  &  .  .  . 

:=  {stuckOpen,stuckClosed}; 

:=  mode  in  __faultmodes; 

:=  _broken; 
:= 

DEFINE  _faultmodes 
DEFINE  _broken 
DEFINE  _brokencount 
DEFINE  _brokenprob 
case 

mode  =  stuckOpen 
mode  =  stuckClosed 
else 
esac; 

:  3; 
:  3; 
:  0; 

MODULE  EX_type 
SV  :  SV_type(sv_cmd_in); 
PV 

:  PV_type(  ); 

(sv_cmd_in, 

. . .) 

DEFINE  _brokencount 

:=  SV.__broken  + 
PV.  broken  + 

Figure 4:  The SMV model for the example 

such that 

A  diagnosis  condition  with  a  context  is  represented  with 
temporal logic formula 
holds  iff there 
is a critical  pair.  We express reachability in P • P of a criti­
cal pair  for a diagnosis condition 
with the formula: 
Model  checking can  be run  on  the 
problem 
.  If the answer is true, 
then we have a witness for the a critical pair.  Given the con­
we  enforce  the  initial  condition  with 
text 
the formula 
.  The conjunc­
tion  has  the  effect  of restricting  the  analysis  to  the paths  in 
Kp.p  starting  from  the  states  that  satisfy 
is  taken 
into  account  assuming  that  a  characterization  of the  sets  of 
traces is described by an LTL formula 
. The 
model  checking problem  corresponding  to  diagnosability  is 

In  practice,  several  simplifications  are  possible.  Often 
can be expressed in terms of propositional 
constraints 
that must hold on all the states 
of the  execution;  in  such  cases  diagnosability  in  context  C 
is  basically  represented  by  the  LTL  formula 

.  Notice  that  the 
formula  holds  if the path  condition 
holds until  the  con­
ditions  c1  and  c2  are  reached.  When  the  context  does  not 
constraint the executions, the above formula is equivalent to 

Figure 5:  The SMV schema for the twin plant 

6  Experimental Evaluation 

We  analyzed  the  practical  applicability  of  our  approach 
within the Livingstone  framework.  Livingstone  is  a model-
based  health  monitoring  system  developed  at  NASA  Ames 
[Williams  and Nayak,  1996].  It uses  a model  of a physical 
system,  such as a spacecraft, to  infer its  state and diagnose 
faults from observations.  Livingstone is one of the three parts 
of the  Remote  Agent  (RA),  an  autonomous  spacecraft  con­
troller  developed  by  NASA  Ames  Research  Center jointly 
with the  Jet  Propulsion  Laboratory. 
RA  was  the  first  Al 
software to control  an operational  spacecraft  [Muscettola et 
al,  1998].  Livingstone  has also been  used  in  other applica­
tions such as the control of the In-Situ Propellant Production 
system  (1SPP)  for  Mars  missions  [Clancy  et  al,  1999],  the 
monitoring of a mobile robot [Simmons et al., 2001 ], and In­
telligent Vehicle Health Management (IVHM) for experimen­
tal space transportation vehicles [Bajwa and Sweet, 2002]. 

Livingstone uses a qualitative relational  model  describing 
the evolution of observable and hidden variables. Continuous 
physical  domains  are  abstracted  into  discrete  intervals  such 
as  { l o w,  n o m i n a l,  h i g h }.  Each  component has a mode 
variable identifying its nominal and fault modes.  Livingstone 
models are specified in a hierarchical, declarative formalism 
called JMPL, or using a graphical development environment. 
Livingstone  observes  the  commands  issued to  the plant  and 
uses the model to predict the plant state.  It then compares the 
predicted state against observations received from the actual 
sensors.  If a  discrepancy  is  found,  Livingstone  performs  a 
diagnosis  by  searching  for  the  most  likely  configuration  of 
component modes that are consistent with the observations. 
Livingstone  models  directly  induce  a  synchronous  transi­
tions  systems,  very  similar  to  a  plant  model.  Pecheur  and 
Simmons  [Pecheur  and  Simmons,  2000]  have  developed  a 
translator  able  to  convert  a  Livingstone  model  and  a  re­
lated set of specifications  in the language of the SMV  model 
checker [McMillan,  1993], and to convert back the diagnostic 
traces in terms of the Livingstone model.  Figure 4 outlines 
the structure of the example plant in SMV language. For each 
component type, there is a corresponding module.  The first 
module  statements define the  model  for the  SV  and the PV. 
For each of the components, a set of variables is defined, the 
dynamics of which  is  directly  induced  from the  Livingstone 
model.  Notice the _ b r o k e n p r ob variable, whose numeri­
cal  value is the (negated) logarithm of the probability of fail­
ure for the component (e.g.  10 -3). This enables for a (rough) 
analysis  of failure  probabilities.  These  modules  are  instan­
tiated  in  the  EX  module,  with  a parameter representing  the 
commands to PV. 

DIAGNOSIS 

367 

In order to tackle diagnosability,  we devised a systematic 
way of constructing the SMV coupled twin plant of a Living(cid:173)
stone model.  The construction  is  outlined in  Figure 5.  The 
EX plant is instantiated twice in the main, at top level, gen(cid:173)
erating  PI  and  P2.  The  same  input  variable  (sv_cmd)  is 
given  in  input  to  both  instances.  Then,  the  outputs  of the 
two instances of the plant are constrained to exhibit the same 
behavior by means of an  INVAR statement,  i.e.  a condition 
that  must hold  in  all  states.  The  SMV  language enables  for 
the specification of context.  The basic building blocks of the 
properties  are  propositional  conditions  over states,  that  can 
be  expressed  by  means  of the  DEFINE  construct.  For  in(cid:173)
stance,  it  is possible to express conditions on the number of 
failures, using the _ b r o k e n c o u nt  variable defined in Fig(cid:173)
ure 4.  For instance, P I. _ b r o k e n c o u nt  <  2  in the main 
module  states  that  at  most  one  failure  can  occur  in  the first 
instance of the circuit. 

In the experimental analysis, we tackled several problems 
for  the  Livingstone  model  of the  Main  Propulsion  System 
for the  X-34,  a  next-generation  vehicle  for the  Space  Shut(cid:173)
tle [Bajwa and Sweet, 2002].  We interacted with the NASA 
experts  of diagnosis,  to check the representational  adequacy 
of our formalism, and to characterize diagnosability problems 
of practical  relevance.  The  problems  were  defined  starting 
from simulation runs, that tested a specific fault in a specific 
context.  We  remark  the  impact  of our  approach  is  far  be(cid:173)
yond the one of testing, since it performs an exhaustive anal(cid:173)
ysis  (though  at  a  higher  abstraction  level)  within  the  cases 
captured  by  the  context.  The  experimental  evaluation  was 
carried  out  by  running  different  symbolic  model  checking 
tools  on  models  described  in  SMV  language,  such  as  the 
CMU  SMV  [McMillan,  1993],  Bwolen  Yang's  version  of 
SMV  [Yang etal,  1999], and NuSMV  [Cimatti et al, 2002]. 
While  the  former  ones  are  based  on  Binary  Decision  Dia(cid:173)
grams (BDDs) [Bryant,  1986], NuSMV also enables the use 
of SAT-based techniques  [Moskewicz et al,  2001].  This  ac(cid:173)
tivity suggested several considerations.  First, the experimen(cid:173)
tal analysis was fundamental to tune the formalism.  Several 
improvements  (e.g. 
the  notion  of context)  were  conceived 
while trying to  encompass  representational  issues  arising  in 
practice.  Second,  contexts  are  incrementally  characterized. 
Although the requirements for the diagnosis system can usu(cid:173)
ally suggest an initial version for the context, it is seldom the 
case that the precise conditions for diagnosability are known 
(or  can  be  precisely  stated)  in  advance.  The  ability  of the 
model checker to find critical pairs was very useful in the re(cid:173)
finement, since it helped to explain why diagnosability fails, 
i.e.  to understand whether the context is not strict enough, or 
because a problem was found. 

In  terms  of performance,  the  critical  factor  was  the  size 
of the  models  to  be  analyzed.  The  most  significant  plant 
we  analyzed  has  about  800  scalar  variables.  This  number 
almost  doubles  in  the  case  of the  twin  plant,  and  (after the 
elimination  of equivalent  variables)  we  are  left  with  mod(cid:173)
els  having  about  600  state  variables.  Different  versions  of 
SMV  were  used to tackle  the resulting diagnosability  prob(cid:173)
lems.  All the BDD-based verification engines were defeated 
by the size of models for coupled twin plants (i.e. no solution 
found after running for 24hs).  This failure  occurred despite 

the use of advanced techniques such as dynamic reordering, 
invariant discovery, and conjunctive partitioning.  We remark 
that some of these BDD-based engines, most notably Bwolen 
Yang's  SMV,  were  able  to  tackle  verification  problems  on 
single  plants  very  efficiently.  On  the  other  hand,  the  use 
of model checking techniques based on SAT solving, imple(cid:173)
mented in the  NuSMV  system  [Cimatti  etal, 2002], proved 
to be very effective on these problems.  We used a combined 
approach,  integrating bounded  model  checking (oriented to 
finding bugs) and inductive reasoning. The SAT-based engine 
of NuSMV  was  able  to  solve  all  the  verification  problems 
in  less than two  seconds.  The  analysis  of the  results  shows 
that Livingstone models tend to feature a huge state space but 
little  depth;  therefore,  the  symbolic  processing provided by 
SAT turns  out to  be  very  appropriate.  It  is  worth mention(cid:173)
ing that, while trying to refine a diagnosability property, we 
discovered an unexpected behavior in the model of the X-34. 
Further  analysis  highlighted  a  missing  statement  in  the  de(cid:173)
scription. This result is quite significant, since the model had 
been repeatedly tested. 

7  Related Work 
The  idea  of diagnosability  has  received  a  lot  of attention  in 
In  [Sampath  et 
the  framework  of Discrete  Event  Systems. 
al,  1995;  1996],  diagnosability  is  precisely  defined  and  an 
algorithm  for checking diagnosability is presented.  The ap(cid:173)
proach is limited to failures represented as reachability prop(cid:173)
erties.  Jiang and Kumar [Jiang and Kumar, 2002] generalize 
the approach to the case of failures described as formulae in 
linear temporal logics.  The approach  is based on a polyno(cid:173)
mial algorithm for testing the diagnosability, formulated with 
techniques from automata theory  [Jiang et al, 2001].  In par(cid:173)
ticular,  they  define  a  self-product  automaton  similar  to  our 
twin  plant.  Console,  Picardi  and  Ribaudo  [Console  et  al, 
2000]  propose  the  use  of a  particular  form  of process  alge(cid:173)
bras, PEPA, for the formalization and the analysis of diagno(cid:173)
sis and diagnosability problems. 

Our  work  is  rather  different  from  the  works  mentioned 
above, that are mostly oriented to the definition of the theoret(cid:173)
ical framework, and do not address the problems related to the 
practical application  of the proposed techniques.  Our objec(cid:173)
tive  is the definition of an effective platform  for the analysis 
of diagnosability,  that  can  be  practically  applied  in  the  de(cid:173)
velopment process of diagnosis  systems.  The "twin-models" 
approach allows  us  to directly reuse  standard model  check(cid:173)
ing tools,  without having to reimplement a complex tableau 
construction  described  in  [Jiang et  al,  2001].  Furthermore, 
our  approach  preserves  the  semantics  of the  problem,  thus 
making it possible  to tune the decision procedure to  the ap(cid:173)
plication domain.  In  terms  of expressivity,  our work  shares 
several  underlying  assumptions  with  [Sampath  et al,  1995; 
1996], considering failures that can be represented as reach(cid:173)
ability conditions.  Compared to  [Jiang et al, 2001], we only 
tackle  zero-delay  diagnosability,  although  it  seems  that  our 
framework could be extended in this respect. 

Our  approach  makes  no  hypothesis  on  the  way  the  con(cid:173)
troller exploits the information provided by the diagnosis sys(cid:173)
tem.  For this  reason,  we  introduce  the  notion  of context  in 

368 

DIAGNOSIS 

order  to  qualify  the  conditions  under  which  diagnosability 
should hold.  In active diagnosis  [Sampath et al,  1998],  the 
controller  is  designed  taking  into  account  the  issues  of di(cid:173)
agnosability.  Similar problems  are  also  tackled  in  planning 
under partial observability, where the planner can decide the 
most appropriate actions to diagnose the fault, e.g. by probing 
the system with actions that will provide suitable information, 
and recover from it (see for instance  [Bertoli  et al, 2002]). 
8  Conclusions 
In this paper, we have proposed a novel approach to the ver(cid:173)
ification of diagnosability, with emphasis on  its practical ap(cid:173)
plicability.  Our work is based on a new conceptualization of 
the problem,  with the twin plant construction and the use of 
temporal logic formulae to describe the context of a diagnos(cid:173)
ability problem. To the best of our knowledge, this is the first 
approach to diagnosability that enables the direct exploitation 
of symbolic  model  checking technology.  We  tackled signif(cid:173)
icant diagnosability problems  from a real-world application, 
discussed a practical methodology for the incremental refine(cid:173)
ment  of diagnosis  contexts,  and  were  able  to  verify  large-
sized problems.  In the future, we will try to take into account 
the  fact  that diagnosis  can propose  several  candidates,  with 
different degrees of likelihood.  A compositional  approach to 
verification,  exploiting  the  modular  structure  of the  design, 
will be investigated. In the longer term, we plan to tightly in(cid:173)
tegrate the approach within the Livingston toolset, in order to 
allow Livingstone application developers to use model check(cid:173)
ing to assist them in designing and correcting their models, as 
part of their usual  development  environment. 
References 
[Bajwa and Sweet, 2002]  A.  Bajwa and A.  Sweet.  The Liv(cid:173)
In  Proc. 

ingstone  Model  of a  Main  Propulsion  System. 
IEEE Aerospace Conference. IEEE, 2002. 

[Bertoli et al.,2002] P.  Bertoli,  A.  Cimatti,  J.  Slaney,  and 
S.  Thiebaux.  Solving power supply restoration problems 
In  Proc. 
with  planning  via  symbolic  model  checking. 
ECAI'02, Lyon, France, 2002. 

[Bryant,  1986]  R.  E.  Bryant.  Graph-Based  Algorithms  for 
IEEE  Transactions  on 

Boolean  Function  Manipulation. 
Computers, C-35(8):677-691, August 1986. 

[Cimatti and Roveri, 2000]  A. Cimatti and M. Roveri.  Con(cid:173)
formant  Planning  via  Symbolic  Model  Checking.  Jour-
nal  of  Artificial  Intelligence  Research  (JAIR),  13:305-338, 
2000. 

[Cimatti et al, 2002]  A. Cimatti, E. Giunchiglia, M.  Pistore, 
M.  Roveri,  R.  Sebastiani,  and  A.  Tacchella. 
Integrat(cid:173)
ing BDD-based and SAT-based symbolic model checking. 
In  Proc.  FROCOS,  volume  2309  of LNAI,  pages  49-56. 
Springer-Verlag, April 2002. 

[Clancy et  al,  1999]  D.  Clancy,  W.  Larson,  C.  Pecheur, 
P.  Engrand,  and  C.  Goodrich.  Autonomous  control  of 
an  in-situ propellant production  plant.  In Proceedings of 
Technology 2009 Conference, November 1999. 

[Clarke et al.,  1999]  E.  M.  Clarke,  O.  Grumberg, and D.  A. 
Peled. Model Checking. The MIT Press, Cambridge, Mas(cid:173)
sachusetts, 1999. 

[Console etai, 2000]  L.  Console,  C.  Picardi,  and  M.  Rib-
audo.  Diagnosis  and  diagnosability  using  Pepa. 
In 
Proc. ECA1 '00, pages 131-136, Berlino, Germany, August 
2000. IOS Press. 

[Emerson,  1990]  E. A. Emerson.  Temporal and modal logic. 
In J. van Leeuwen, editor, Handbook of Theoretical Com(cid:173)
puter Science,  Volume B:  Formal Models and Semantics, 
chapter 16, pages 995-1072. Elsevier, 1990. 

[Jiang and Kumar, 2002]  S. Jiang and R. Kumar.  Failure di(cid:173)
agnosis of discrete event systems  with  linear-time tempo(cid:173)
ral  logic fault specications,  2002.  IEEE Trans,  on Auto(cid:173)
matic Control. 

[Jiang et  al,  2001]  S.  Jiang,  Z.  Huang,  V.  Chandra,  and 
R.  Kumar.  A  polynomial  algorithm  for  testing  diagnos(cid:173)
ability  of discrete  event  systems. 
IEEE  Transactions  on 
Automatic Control, 46(8): 1318-1321, August 2001. 

[McMillan,  1993]  K.L.  McMillan.  Symbolic Model Check(cid:173)

ing.  Kluwer Academic Publ.,  1993. 

[Moskewicz et al., 2001]  M.  Moskewicz,  C.  Madigan, 
Y. Zhao, L. Zhang, and S. Malik.  Chaff:  Engineering an 
efficient  SAT solver.  In Proc.  ofDAC-38, pages  530-535. 
ACM, 2001. 

[Muscettola et al., 1998]  N. Muscettola, P. P. Nayak, B. Pell, 
and B.  Williams.  Remote Agent:  To boldly go where no 
Al  system has  gone  before.  Artificial Intelligence,  103(1-
2):5-48, August 1998. 

[Pecheur and Simmons, 2000]  Charles  Pecheur  and  Reid 
Simmons.  From  Livingstone  to  SMV:  Formal  verifica(cid:173)
tion  for autonomous  spacecrafts.  In Proc.  First  Goddard 
Workshop on Formal Approaches to Agent-Based Systems, 
2000. 

[Sampath et al.,  1995]  M.  Sampath,  R.  Sengupta,  S.  Lafor-
tune, K. Sinnamohideen, and D. Teneketzis.  Diagnosabil(cid:173)
ity of discrete-event systems.  IEEE Transactions on Auto(cid:173)
matic Control, 40(9): 1555-1575, September  1995. 

[Sampath et al.,  1996]  M.  Sampath,  R.  Sengupta,  S.  Lafor-
tune, K. Sinnamohideen, and D. Teneketzis.  Failure diag(cid:173)
nosis using discrete event models.  IEEE Transactions on 
Control Systems, 4(2): 105-124, March 1996. 

[Sampath et al,  1998]  M.  Sampath,  S.  Lafortune,  and 
D. Teneketzis.  Active diagnosis of discrete event systems. 
IEEE  Transactions  on Automatic  Control,  43(7):908-929, 
July  1998. 

[Simmons  etal,  2001]  R.  Simmons,  R.  Goodwin,  K.  Zita 
Haigh, S. Koenig, J. CVSullivan, and M. Veloso.  Xavier: 
Experience with a layered robot architecture.  Intelligence, 
2001. 

[Williams and Nayak, 1996]  B. C. Williams and P. P. Nayak. 
A  model-based approach to reactive self-configuring sys(cid:173)
tems. In Proceedings of AAA 1-96, 1996. 

[Yung et  al,  1999]  B. Yang, R.  Simmons, R. E. Bryant, and 
D.R.  O'Hallaron.  Optimizing  symbolic  model  checking 
for contraint-rich models.  In Proc.  CAV'99, number  1633 
in LNCS, pages 328-340. Springer-Verlag, 1999. 

DIAGNOSIS 

369 

