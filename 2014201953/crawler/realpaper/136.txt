Updating Action Domain Descriptions(cid:3)

Thomas Eiter, Esra Erdem, Michael Fink, and J´an Senko

Institute of Information Systems, Vienna University of Technology, Vienna, Austria

Email: (eiter j esra j michael j jan)@kr.tuwien.ac.at

Abstract

How can an intelligent agent update her knowl-
edge base about an action domain, relative to some
conditions (possibly obtained from earlier observa-
tions)? We study this question in a formal frame-
work for reasoning about actions and change, in
which the meaning of an action domain descrip-
tion can be represented by a directed graph whose
nodes correspond to states and whose edges corre-
spond to action occurrences. We deﬁne the update
of an action domain description in this framework,
and show among other results that a solution to this
problem can be obtained by a divide-and-conquer
approach in some cases. We also introduce meth-
ods to compute a solution and an approximate solu-
tion to this problem, and analyze the computational
complexity of these problems. Finally, we discuss
techniques to improve the quality of solutions.

1 Introduction
This paper discusses how an intelligent agent can modify her
knowledge of the world, subject to some given conditions,
in particular, when some new knowledge about the world is
added. The given conditions can be domain-dependent (e.g.,
assertions obtained from earlier observations), or domain-
independent (e.g., general properties of a knowledge base).
The goal is to obtain a consistent knowledge base with mini-
mal changes only to a variable part of the existing knowledge
base such that the given conditions are satisﬁed.

We study the problem of knowledge base updates, brieﬂy
described above, in the context of reasoning about actions and
change, so the agent’s knowledge base is about domains of
actions. For instance, consider an agent having the following
knowledge, D, about a TV with remote control:

1. If the power is off, pushing the power button on the TV

turns the power on.

2. If the power is on, pushing the power button on the TV

turns the power off.

3. The TV is on whenever the power is on.
4. The TV is off whenever the power is off.

(cid:3)Work supported by the Austrian Science Fund (FWF) grant
P16536-N04 and the European Commission IST programme grants
FET-2001-37004 WASP and IST-2001-33123 CologNeT.

Note that she does not know how a remote control works (e.g.,
she does not know the effect of pushing the power button on
the remote control). Suppose that later she obtains the fol-
lowing information, Q, about remote controls:

1. If the power is on and the TV is off, pushing the power

button on the remote control turns the TV on.

2. If the TV is on, pushing the power button on the remote

control turns the TV off.

A desired condition, C, for the effective use of this TV system
is the following:

Pushing the power button on the remote control is al-
ways possible.

If Q is added to D, then condition C is not satisﬁed: when
the power and the TV are on, pushing the power button on the
remote control is not possible, since Item 2 of Q and Item 3
of D above contradict. The question is then how the agent
can update D by Q relative to C.

We describe domains of actions, like D above, in a frag-
ment of the action language C [Giunchiglia and Lifschitz,
1998], by “causal laws.” For instance, the direct effect of
the action PushPBTV stated in Item 1 of D in the example
above is described by the causal law

caused PowerON after PushPBTV ^ :PowerON ,

which expresses that the action PushPBTV causes the value
of the ﬂuent PowerON to change from false to true; the in-
direct effect of this action stated in Item 3 of D is described
by the causal law

caused TvON if PowerON ,

(1)
which expresses that if the ﬂuent PowerON is caused to be
true, then the ﬂuent TvON is caused to be true as well. An ac-
tion (domain) description is partitioned into two: Du (invari-
able) and Dm (variable). The meaning of an action descrip-
tion can be represented by a “transition diagram”—a directed
graph whose nodes correspond to states and whose edges cor-
respond to action occurrences.

We describe given conditions, like C above, in an action
query language, similar to R [Gelfond and Lifschitz, 1998],
by “queries”. For instance, condition C above can be de-
scribed by the query

executable fPushPBRC g:

(2)
The main contributions of this paper brieﬂy are as follows:
(cid:15) Given an action description D = (Du; Dm), a set Q of
causal laws, and a set C of conditions, what is an update of
D by Q relative to C? We answer this question in Section 3.

fP ushP BRC g
fg

fP ushP BT V g

fP ushP BT V ; P ushP BRC g

fP ushP BRC g
fg

P owerON

T vON

:P owerON

:T vON

fP ushP BT V ; P ushP BRC g

fP ushP BT V g

Figure 1: A transition diagram.

(cid:15) Given an action description D = (Du; Dm), a set Q of
causal laws, and a set C of conditions, consider the prob-
lem of computing an update of D by Q relative to C. We
show that this problem is difﬁcult in general (both (cid:6)P
3 - and
3 -
3 -hard), and that already checking a given solution is (cid:5)P
(cid:5)P
complete. We also show that, under some conditions, these
two problems are easier (Section 5).
(cid:15) We provide conditions under which computing a solution
to the problem above can be structurally decomposed. For in-
stance, if the inputs of the problem satisfy the disjointness
property, a divide-and-conquer approach is feasible (Sec-
tion 4). We introduce methods to compute solutions and to
compute “near-solutions” approximating them (Section 6).

Variations of the problem of updating knowledge bases
have been studied in the AI literature, e.g., [Winslett, 1990;
Katsuno and Mendelzon, 1991; Pereira et al., 1991; Li and
Pereira, 1996; Liberatore, 2000; Eiter et al., 2002; Sakama
and Inoue, 2003]. The problem addressed in this paper is
more general (see Section 7 for a more detailed comparison).

2 Preliminaries
Transition diagrams. We start with a (propositional) ac-
tion signature that consists of a set F of ﬂuent names, and a
set A of action names. An action is a truth-valued function
on A, denoted by the set of action names that are mapped to t.
A (propositional) transition diagram of an action signature
L = hF; Ai consists of a set S of states, a function V :
F (cid:2) S ! ff; tg, and a subset R (cid:18) S (cid:2) 2A (cid:2) S of transitions.
We say that V (P; s) is the value of P in s. The states s0 such
that hs; A; s0i 2 R are the possible results of the execution of
the action A in the state s. We say that A is executable in s,
if at least one such state s0 exists.

A transition diagram can be thought of as a labeled directed
graph. Every state s is represented by a vertex labeled with
the function P 7! V (P; s) from ﬂuent names to truth values.
Every triple hs; A; s0i 2 R is represented by an edge lead-
ing from s to s0 and labeled A. An example of a transition
diagram is shown in Figure 1.
Action description languages. We consider a subset of
the action description language C [Giunchiglia and Lifschitz,
1998] that consists of two kinds of expressions (called causal
laws): static laws of the form

caused L if G,

(3)
where L is a literal (an expression of the form P or :P , where
P is a ﬂuent name) and G is a propositional combination of
ﬂuent names, and dynamic laws of the form

caused PowerON after PushPBTV ^ :PowerON
caused :PowerON after PushPBTV ^ PowerON
caused TvON if PowerON
caused :TvON if :PowerON
inertial PowerON ; :PowerON
inertial TvON ; :TvON

Figure 2: An action description.

where L and G are as above, and U is a propositional com-
bination of ﬂuent names and action names. In (3) and (4) the
part if G can be dropped if G is True.

An action description is a set of causal laws. For instance,
the knowledge base about a TV system, D, of the agent in the
previous section, can be described by causal laws in Figure 2.
Thereby, an expression of the form:

inertial P; :P ,

where P is a ﬂuent name stands for the dynamic laws

caused P if P after P ,
caused :P if :P after :P ,

describing that the value of the ﬂuent P stays the same unless
some action changes it.

The meaning of an action description can be represented by
a transition diagram. Let D be an action description with a
signature L = hF; Ai. Then the transition diagram hS; V; Ri
described by D is deﬁned as follows:
(i) S is the set of all interpretations s of F such that, for

every static law (3) in D, s satisﬁes G (cid:27) L,

(ii) V (P; s) = s(P ),
(iii) R is the set of all triples hs; A; s0i such that s0 is the only

interpretation of F which satisﬁes the heads L of all
– static laws (3) in D for which s0 satisﬁes G, and
– dynamic laws (4) in D for which s0 satisﬁes G and

s [ A satisﬁes U.

The laws included in (iii) above are those that are applica-
ble to the transition from s to s0 caused by executing A. For
instance, the transition diagram described by the action de-
scription of Figure 2 is presented in Figure 1. We say that an
action description is consistent if it can be represented by a
transition diagram with nonempty state set.

In the following we suppose that an action description D
consists of two parts: Du (unmodiﬁable causal laws) and Dm
(modiﬁable causal laws). Therefore, we sometimes denote an
action description D by the pair (Du; Dm).
Action query languages. To talk about observations of the
world, or assertions about the effects of the execution of ac-
tions, we use an action query language similar to R [Gel-
fond and Lifschitz, 1998]. We consider a language with static
queries of one of the two forms:

holds F ,
always F ,

(5)
(6)

where F is a propositional combination of ﬂuent names, and
dynamic queries of the form:

caused L if G after U,

(4)

necessarily F after A0; : : : ; An,

(7)

where F is a propositional combination of ﬂuent names, and
each Ai (0 (cid:20) i (cid:20) n) is an action. A query is a propositional
combination of both kinds of expressions.

As for the semantics, let T = hS; V; Ri be the transition
diagram representing an action description D. A history of T
of length n is a sequence

s0; A1; s1; : : : ; sn(cid:0)1; An; sn

(8)
where each hsi; Ai+1; si+ii (0 (cid:20) i < n) is a transition in R.
The satisfaction relation between a state s in S and a query q
relative to D (denoted D; s j= q) is deﬁned as follows:
(i) if q is a static query (5), it is satisﬁed at s if the interpre-

tation P 7! V (P; s) satisﬁes F ;

(ii) if q is a static query (6), it is satisﬁed at s if, for each state

s0 2 S, the interpretation P 7! V (P; s0) satisﬁes F ;

(iii) if q is a dynamic query (7), it is satisﬁed at s if, for every
history s = s0; A0; s1; : : : ; sn(cid:0)1; An; sn of T of length
n + 1, the interpretation P 7! V (P; sn) satisﬁes F ;

(iv) for any other q, satisfaction is deﬁned by the truth tables

of propositional logic.

We remark that holds F (cid:17) :holds :F , but not so for a static
query of form (6), i.e., always F 6(cid:17) :always :F .

For a set C of queries, we denote by S D

C the set of all states
:C the set
C . We say that D entails C (denoted D j= C) if S = S D
C .

s 2 S such that D; s j= q for every q 2 C, and by S D
S nSD
For instance, a set of queries containing the query

necessarily :TvON after fPushPBRC g

is not entailed by the action description in Figure 2, because
the query above is not satisﬁed at the state where both ﬂuents
TvON and PowerON are mapped to t. On the other hand,
this action description entails the queries:

always P owerOn (cid:17) TvON ,

holds PowerON ^ TvON (cid:27)

:necessarily :TvON after fPushPBTV g:

(9)

(10)

Queries allow us to express various pieces of knowledge
about the domain (possibly acquired from earlier observa-
tions), like the following.
(cid:15) Existence of certain states: There exists a state of the
world where a formula F holds (assuming consistency of D):

:always :F:

(cid:15) Executability of actions: An action sequence A0; : : : ; An
is executable at every state:

:necessarily False after A0; : : : ; An:

As in (2), this query can be abbreviated as
executable A0; : : : ; An:

(cid:15) Mandatory effects of actions: A sequence A0; : : : ; An of
actions will always have certain effects in a given context:

holds G (cid:27) necessarily F after A0; : : : ; An

Here F describes the effects and G the context. For instance,
the query
holds TvON (cid:27) necessarily :TvON after fPushPBRC g
expresses that the result of executing fPushPBRC g at any
state where TvON is mapped to t is a state where TvON
is mapped to f. Note that queries of this form allow
us to express all possible executions of a conformant plan
hA0; : : : ; Ani to reach a goal speciﬁed by F from an initial
state described by G.

(cid:15) Possible effects of actions: A sequence A0; : : : ; An of ac-
tions may have certain effects in a given context:

holds G (cid:27) :necessarily :F after A0; : : : ; An;

like in (10). Here F describes the effects and G the context.
Queries of this form allow us to express, e.g., the observation
that executing hA0; : : : ; Ani in some initial state described
by G leads to a state where F holds (e.g., as for (10), that the
TV is on). Formula G may describe a collection of states.

3 Problem Description
We deﬁne an Action Description Update (ADU) problem by
an action description D = (Du; Dm), a set Q of causal laws,
and a set C of queries, all with the same signature. We say
that an action description D0 accomplishes an (action de-
scription) update of D by Q relative to C, if
(i) D0 is consistent,
(ii) Q [ Du (cid:18) D0 (cid:18) D [ Q,
(iii) D0 j= C,
(iv) there is no consistent action description D00 such that

D0 (cid:26) D00 (cid:18) D [ Q, and D00 j= C.

Such a D0 is called a solution to the ADU problem (D; Q; C).
Condition (i) expresses that an action description update
modeling a dynamic domain, such as the TV system in Sec-
tion 1, must have a state. According to Condition (ii), new
knowledge about the world and the invariable part of the ex-
isting action description are kept, and causal laws in the vari-
able part are considered to be either “correct” or “wrong”,
and in the latter case simply disposed.

Condition (iii) imposes semantical constraints C on D0,
which comprise further knowledge about the action domain
gained, e.g., from experience. It is important to note that C
can be modiﬁed later for another action description update.
If Q is a revision (containing more precise knowledge about
the domain), then reasonably C should contain all conditions
corresponding to observations made about the domain, while
other conditions may be kept or dropped; on the other hand,
if Q is a change of the world per se, then conditions corre-
sponding to observations might be dropped.

Finally, Condition (iv) applies Occam’s Razor to select so-
lutions as simple as possible. Simplicity is measured by a
smallest set (in terms of inclusion) of causal laws which need
to be dropped.

We call any D0 which satisﬁes (i)-(iii) a near-solution of

the ADU problem (D; Q; C).
Example 1 For instance, take D the action description in
Figure 2, with Dm containing the ﬁrst four causal laws; con-
sider Q to be the set containing the following two causal laws:
caused TvON after PushPBRC ^ P owerOn ^ :TvON ,
caused :TvON after PushPBRC ^ TvON ;

and let C be the set containing queries (2), (10), and

executable fPushPBTV g:

The transition diagram described by D [ Q is shown in Fig-
ure 3. Here we can see that at the state where both PowerON
and TvON are mapped to t, the action PushPBRC is not exe-
cutable. Therefore, D [ Q is not a solution. In fact, a solution
to the ADU problem (D; Q; C) is obtained by dropping the
static law (1) from D [ Q.
2

fg

fP ushP BT V g

fP ushP BT V ; P ushP BRC g

fP ushP BRC g
fg

P owerON

T vON

:P owerON

:T vON

fP ushP BT V ; P ushP BRC g

fP ushP BT V g

Figure 3: Transition diagram described by D [ Q of Ex. 1.

4 Properties of Updates
We ﬁrst consider some basic properties of solutions to an
ADU problem. To this end, we deﬁne the subsumption re-
lation between an action description D and a causal law, both
with the same signature L = hF; Ai, as follows:
(cid:15) A static law (3) is subsumed by D if, for every state s in
the transition diagram described by D, the interpretation of F
describing the state s satisﬁes G (cid:27) L;
(cid:15) a dynamic law (4) is subsumed by D if, for every transi-
tion hs; A; s0i in the transition diagram described by D, the
following holds: if the interpretation of F [ A describing the
state s and the action A satisﬁes U, then the interpretation
of F describing s0 satisﬁes G (cid:27) L.

A set Q of causal laws is subsumed by an action description
D, if every law in Q is subsumed by D. A causal law is
tautological, if it is subsumed by every action description D.
Proposition 1 (Subsumption) Let (D; Q; C) be an ADU
problem, such that D is consistent and D j= C. If D sub-
sumes Q then D [ Q is a solution to (D; Q; C).

From this result, we obtain the following corollaries.

Corollary 1 (Void Update) Let (D; ;; C) be an ADU prob-
lem. If D is consistent and D j= C, then D is the unique
solution to (D; ;; C).
Corollary 2 (Idempotence) Let (D; D; C) be an ADU prob-
lem, such that D is consistent and D j= C, then D is a solu-
tion to (D; D; C).
Corollary 3 (Addition of Tautologies) Let (D; Q; C) be an
ADU problem, such that D is consistent and D j= C. If Q is
tautological, i.e., every causal law of Q is a tautology, then
D [ Q is a solution to (D; Q; C).
Notice that a similar property fails for logic programming up-
dates as in [Alferes et al., 2000; Eiter et al., 2002].

We next consider a structural property of solutions and
near-solutions, which can be exploited for a syntactical de-
composition of an ADU problem, in a divide-and-conquer
manner. Because of the involved semantics of transitions and
causation, in general some prerequisites are needed. For any
action signature L = hF; Ai, we denote by LX the part of it
which appears in X. We say that an action description D per-
mits NOP, if there is some transition hs; ;; s0i in the transition
diagram described by D. A query F occurs positively (resp.
negatively) in a set C of queries if F occurs in the scope of
an even (resp. odd) number of negations, :, in a query in C.
Theorem 1 (Disjointness) Let (D; Q; C) be an ADU prob-
lem with signature L = hF; Ai. Let fD0; D1g, fQ0; Q1g,

and fC 0; C 1g be partitionings of D, Q, and C, respectively,
such that (i) LD0 \ LD1 = ;, (ii) LQ0 (cid:18) LD0 ^ LQ1 (cid:18) LD1,
and (iii) LC 0 (cid:18) LD0 ^ LC 1 (cid:18) LD1.
(i) Let X i be a near-solution to (Di; Qi; C i), for i = 0; 1.
Suppose that, for i = 0; 1, X i permits NOP if some dy-
namic query occurs negatively in C 1(cid:0)i. Then X 0 [ X 1
is a near-solution to (D; Q; C).

(ii) Let X be a near-solution to (D; Q; C), and let
fX 0; X 1g be a partitioning of X such that X 0 (cid:18) D0
and X 1 (cid:18) D1. Suppose that, for i = 0; 1, X i permits
NOP if some dynamic query occurs positively in C 1(cid:0)i.
Then, for i = 0; 1, X i is a near-solution to (Di; Qi; C i).
Informally, the permission of NOP in Theorem 1 is needed
to ensure that the transition diagrams of near-solutions to the
sub-problems can be “combined”. Here are two useful con-
sequences of Proposition 1:
Corollary 4 Let (D; Q; C) be an ADU problem, and let
fD0; D1g, fQ0; Q1g, fC 0; C 1g be partitionings of D, Q, C,
respectively, satisfying Conditions (i)–(iii) of Theorem 1.
(i) Suppose that no dynamic query occurs in C.

If, for
i = 0; 1, X i is a solution to (Di; Qi; C i), then X 0 [ X 1
is a solution to (D; Q; C). Furthermore, every solution
to (D; Q; C) can be represented in this form.

(ii) If no dynamic query occurs in C 1, and X 1 is a solution
to (D1; Q1; C 1) permitting NOP, then, for every solution
X 0 to (D0; Q0; C 0), X 0[X 1 is a solution to (D; Q; C).
Example 2 Consider the ADU problem (D [ D0; Q; C),
with D, Q, and C as in Example 1, and D0 consisting of
the causal laws:

inertial LightON ; :LightON ,
(11)
caused LightON after SwitchLight ^ :LightON , (12)
caused :LightON after SwitchLight ^ LightON . (13)
Since X 0 = D [ Q n f(1)g is a solution to (D; Q; C) (Ex-
ample 1), X 1 = D0 is a solution to (D0; ;; ;), and D0 permits
NOP, by Corollary 4 (ii) X 0 [ X 1 = (D [ D0 [ Q) n f(1)g
is a solution to (D [ D0; Q; C).
2

5 Computational Complexity
An important subtask in solving ADU problems is checking
whether a set of queries is entailed by an action description.
Theorem 2 Given an action description D and a set C of
queries, deciding D j= C is (i) (cid:5)P
2 -complete in general, and
(ii) PNP

k -complete if C does not involve dynamic queries.
k means polynomial-time with a single parallel eval-

Here PNP
uation of calls to an NP oracle.
Proof.
(Sketch) W.l.o.g., C contains a single query c. As
for the membership part of (ii), deciding whether D j= a
for a static query a of form (5) is polynomial and of form
(6) is in coNP. Hence, for a Boolean combination c of such
queries a1; : : : ; an, deciding whether D; s j= c is feasible
in polynomial time with a single parallel evaluation of NP
oracles. For (i), deciding whether D; s 6j= d for a given state
s and a dynamic query d of form (7) is in NP. Thus D; s 6j= d
for a general query d is decidable in polynomial time with an
NP oracle, which means deciding D 6j= d is in NPNP = (cid:6)P
2 .

2 = co-(cid:6)P

Hence, deciding D j= d is in (cid:5)P
2 . The hardness
results follow from transformations from deciding whether
(i) a Boolean combination of Quantiﬁed Boolean Formulas
(QBFs) of the form 9XEj, 1 (cid:20) j (cid:20) m, is true and (ii) a QBF
of the form 8X9Y E is true, respectively.
2
As for ﬁnding solutions, we note that deciding whether D[
Q is a solution to an ADU problem (D; Q; C) has the same
complexity as deciding D j= C in general. Deciding the
existence of an arbitrary solution is harder.
Theorem 3 Deciding if a given ADU problem (D; Q; C) has
a solution (or a near-solution) is (i) (cid:6)P
3 -complete in general,
2 -complete if C does not involve dynamic queries, and
(ii) (cid:6)P
(iii) NP-complete if C = ;.
Proof. (Sketch) Let D = Du [ Dm. We can guess a near-
solution D0 such that Du [ Q (cid:18) D0 (cid:18) Du [ Q, along with a
state s for D0 (to witness consistency), and check D j= C for
(i) and (ii) in polynomial time with the help of (i) a (cid:6)P
2 -oracle
and (ii) an NP-oracle respectively. This proves membership
in (i) (cid:6)P
2 , and (iii) NP, respectively. The hardness
results follow from transformations from deciding whether (i)
a QBF of the form 9XF is true, (ii) a QBF of form 9Z8XF
is true, and (iii) a QBF of the form 9Z8X9Y F is true.
2
Similarly, testing arbitrary solution candidates has higher

3 , (ii) (cid:6)P

3 -complete in general, (ii) (cid:5)P

complexity than testing D [ Q.
Theorem 4 Given an ADU problem (D; Q; C) and an action
description D0, deciding whether D0 is a solution for it is
2 -complete if C does not
(i) (cid:5)P
involve dynamic queries, and (iii) coNP-complete if C = ;.
Hence, even recognizing solutions is quite hard. However,
recognizing near-solutions is easier ((cid:5)P
2 -complete in general,
PNP-complete if C has no dynamic queries, and polynomial
if C = ;). This follows easily from Theorem 2.

6 Computing Solutions
With an oracle for near-solutions, we can incrementally com-
pute a solution to an ADU problem (D; Q; C) where D =
(Du; Dm), in polynomial time as follows:

1. If ((Du; Dm); Q; C) has a near-solution

then D0 := ; else halt;

2. For each qi 2 Dm = fq1; : : : ; qmg do

u = Du [ D0 [ fqig; Di

m = fqi+1; : : : ; qmg;

Di
if ((Di

u; Di

m); Q; C) has a near-solution then

D0 := D0 [ fqig;

3 - and (cid:5)P

3. Output Du [ D0.
2
By virtue of Theorems 3 and 4, no substantially better al-
gorithm of this type is likely to exist, since computing a solu-
3 -hard, and thus needs the power of a
tion is both (cid:6)P
3 oracle. If a near-solution Dn for (D; Q; C) is known, we
(cid:6)P
may compute, starting from it, a solution in the manner above
(assuming Dn = fq1; : : : ; qkg, set D0 = Dn and i = k + 1).
Near-solutions to a given ADU problem may be nondeter-
ministically computed as in the membership part of Theo-
rem 3, or obtained from a QBF encoding using a QBF solver.
We present here a different computation method, using “up-
date descriptions” and “update ﬂuent sets.”

Let D = (Du; Dm) be an action description with signature
hF; Ai. The update description of D is the action description
obtained from D as follows:

1. Extend hF; Ai by a set H of k = jDmj new ﬂuents

(called update ﬂuents) H1; : : : ; Hk;

2. label each static law (3) in Dm with a ﬂuent Hi 2 H:

caused L if G ^ Hi;

(14)
and each dynamic law (4) in Dm with a ﬂuent Hi 2 H:
(15)
such that no two laws are labeled by the same ﬂuent Hi;

caused L if G after U ^ Hi,

3. for each Hi labeling a law, add the dynamic law:

inertial Hi; :Hi:

(16)

Let D = (Du; Dm) be an action description and C be a set
of queries with the same signature. Let E be the update de-
scription of D, with a set H of update ﬂuents. Let hS E; V E;
REi be the transition diagram described by E. An update
(ﬂuent) set for E relative to C is a subset M of H such that
(i) M is a hitting set for S E
:C (i.e., it contains for each state

s 2 SE

:C some ﬂuent which is true at s);
(ii) H n M is contained in some state in S E
C .

With the notions above, we can ﬁnd a near-solution to an
ADU problem (D; Q; C), where D = (Du; Dm), as follows:
1. If D [ Q is consistent and D [ Q j= C, output D [ Q.
2. Otherwise, construct the update description E of D [ Q

= (Du [ Q; Dm).

3. Take a minimal update set M for E relative to C, if one

exists; otherwise, take M = H.

4. Identify the set W of causal laws in Dm labeled by the

elements of M.

5. Output Du [ (Dm n W ) [ Q.

Proposition 2 Let (D; Q; C) be an ADU problem, with D =
(Du; Dm). If there is a nonempty update set for the update
description of D [ Q = (Du [ Q; Dm) relative to C, then the
method above generates a near-solution to (D; Q; C).
Example 3 Consider the ADU problem (D; Q; C) presented
in Example 1. Note that D [ Q 6j= C (as explained in Ex-
ample 1). We obtain the following update description E of
(Du [ Q; Dm), which contains Du [ Q and the laws:

caused PowerON after PushPBTV ^ :PowerON ; H1,
caused :PowerON after PushPBTV ^ PowerON ; H2,
caused TvON if PowerON ; H3,
caused :TvON if :PowerON ; H4,
inertial Hi; :Hi

(1 (cid:20) i (cid:20) 4).

According to the transition diagram described by E,

:C = fPowerON ; TvON ; H3g (cid:2) 2H,
SE
C = ffH1; H2; H4g; : : :g.
SE

The only minimal update set for E relative to C is fH3g. We
thus remove from D [ Q the law labeled by H3, i.e., (1). The
result is a near-solution and also a solution to the problem. 2
Example 4 Take D to be the action description of Exam-
ple 1, with the following causal laws added to Dm:

caused TvON after PushPBTV ^ :PowerON ,
caused :TvON after PushPBTV ^ PowerON .

Take Q and C as in Example 1. The transition diagram de-
scribed by D [ Q is shown in Figure 3. Due to the same
reasons mentioned in Example 1, D [ Q 6j= C. The update
description E of (Du [ Q; Dm) consists of the update de-
scription presented in Example 3 and the causal laws:

caused TvON after PushPBTV ^ :PowerON ; H5,
caused :TvON after PushPBTV ^ PowerON ; H6,
inertial Hi; :Hi

(5 (cid:20) i (cid:20) 6).

According to the transition diagram described by E,
:C = fPowerON ; TvON ; H3g (cid:2) 2H[
SE

fH4; H5g (cid:2) 2HnfH1g,

SE

C = ffH1; H2; H4; H5; H6g; : : :g:

The minimal update sets for E relative to C are fH3; H4g
and fH3; H5g. We may choose either one and, by removing
from D [ Q the corresponding two causal laws, we get a
near-solution to the problem. None of the near-solutions is
however a solution, as removing (1) is sufﬁcient.
2

7 Discussion
Related work. Despite conceptional similarities to model
based diagnosis, for space reasons, we focus our discus-
sion on more closely related approaches. Updating knowl-
edge bases has been studied extensively in the context of
both databases and AI, with different approaches, and in
various representation frameworks, e.g., [Winslett, 1990;
Katsuno and Mendelzon, 1991; Pereira et al., 1991; Eiter et
al., 2002; Sakama and Inoue, 2003; Li and Pereira, 1996;
Liberatore, 2000]. The last three are related more closely.

[Sakama and Inoue, 2003] is similar to our work in that it
also studies update problems in a nonmonotonic framework
(yet in logic programming) and considers the same criterion
of minimal change. It deals with three kinds of updates to a
knowledge base D: theory update of D by some new infor-
mation Q, inconsistency removal from D, and view update of
D = (Du; Dm) by some new information Q. In the context
of reasoning about actions and change, these kinds of updates
are expressible as ADU problems (D; Q; ;), (D; ;; ;), and
((Du; Dm [ Q); ;; ;). Sakama and Inoue show that check-
ing for solution existence is NP-hard for each problem; this
complies with Theorem 3 (iii). An important difference to
[Sakama and Inoue, 2003] is that in an ADU problem (D, Q,
C), conditions C may not be directly expressed in D. More-
over, the semantics of an action description D in C is a transi-
tion diagram, and only captured by all answer sets of a logic
program corresponding to D by known transformations.

[Li and Pereira, 1996] and [Liberatore, 2000] study, like
we do, theory update problems in the context of reason-
ing about actions and change, based on an action language
(but language A instead of C). New information, Q, con-
tains facts describing observations over time (e.g., the ac-
tion PushPBRC occurs at time stamp 0). The action lan-
guage C we use is more expressive than A in that it accom-
modates nondeterminism and concurrency, and the changes
in the world are not only due to direct effects of actions. To
formulate temporal observations, we can extend our query
language by queries of the forms

E occurs at ti,
P holds at ti,

(17)
(18)
where E is an action name, P is a ﬂuent name, and ti is a time
stamp; a state s satisﬁes a query (17) resp. (18) if, for some
history (8) such that s = s0, E is in Ai+1 resp. si satisﬁes P .

Our notion of consistency of an action description D (in
essence, the existence of a state) is different from that of
Zhang et al. [2002]. They describe action domains in propo-
sitional dynamic logic, and require for consistency the exis-
tence of some model of an action description. Different from
the setting here, conﬂicting action effects may prevent any
model. With the extension of our query language discussed
above, other forms of consistency studied in [Zhang et al.,
2002] can be achieved in our framework, by describing pos-
sible scenarios or formulas as queries.
Repair of action descriptions. We can sometimes improve
solutions (and near-solutions) to an ADU problem (D; Q; C)
by considering a slightly different version of the problem. We
may take the view that a causal law is not completely wrong,
and for instance holds in certain contexts. Suppose that Q is
a dynamic law of the form:

caused L0 after A0 ^ G0,

where L0 is a literal, G0 is a propositional combination of
ﬂuents, and A0 is an action. We can obtain an action descrip-
tion D(cid:3) from D, which describes the same transition diagram
as D, by replacing each dynamic law (4) in Dm with:

caused L if F after U ^ G0,
caused L if F after U ^ :G0.

Here, we can observe that for each solution D0 to (D; Q; C)
some solution D(cid:3)0 to (D(cid:3); Q; C) exists which contains D0.
Therefore, such a method can be useful to prevent “com-
plete removal” of some laws from the given action descrip-
tion. Similar methods are also useful for repairing an action
description, e.g., if some dynamic laws (4) in the action de-
scription have missing formulas in U. The study of such tech-
niques is a part of future work.
References
[Alferes et al., 2000] J. J. Alferes, J. A. Leite, L. M. Pereira,
H. Przymusinska, and T. C. Przymusinski. Dynamic Up-
dates of Non-Monotonic Knowledge Bases. Journal of
Logic Programming, 45(1–3):43–70, 2000.

[Eiter et al., 2002] T. Eiter, M. Fink, G. Sabbatini, and
H. Tompits. On properties of update sequences based on
causal rejection. TPLP, 2(6):721–777, 2002.

[Gelfond and Lifschitz, 1998] M. Gelfond and V. Lifschitz.

Action languages. ETAI, 3:195–210, 1998.

[Giunchiglia and Lifschitz, 1998] E. Giunchiglia and V. Lif-
schitz. An action language based on causal explanation:
Preliminary report. In Proc. AAAI, pp. 623–630, 1998.

[Katsuno and Mendelzon, 1991] H. Katsuno and A. O.
Mendelzon. On the difference between updating a knowl-
edge base and revising it. In Proc. KR, pp. 387–394, 1991.
[Li and Pereira, 1996] R. Li and L. M. Pereira. What is be-

lieved is what is explained. In Proc. AAAI, pp. 550–555.

[Liberatore, 2000] P. Liberatore. A framework for belief up-

date. In Proc. JELIA, pp. 361–375, 2000.

[Pereira et al., 1991] L. M. Pereira, J. J. Alferes, and J. N.
Aparicio. Contradiction removal within well-founded se-
mantics. In Proc. LPNMR, pp. 105–119, 1991.

[Sakama and Inoue, 2003] C. Sakama and K. Inoue. An
abductive framework for computing knowledge base up-
dates. TPLP, 3(6):671–713, 2003.

[Winslett, 1990] M. Winslett. Updating Logical Databases.

Cambridge University Press, 1990.

[Zhang et al., 2002] D. Zhang, S. Chopra, and N. Foo. Con-

sistency of action descriptions. In Proc. PRICAI, 2002.

