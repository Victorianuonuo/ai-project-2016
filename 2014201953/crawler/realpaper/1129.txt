Dynamically Weighted Hidden Markov Model for Spam Deobfuscation

Seunghak Lee

Iryoung Jeong

Seungjin Choi

Department of Chemistry

Department of Computer

Department of Computer Science

POSTECH, Korea
boy3@postech.ac.kr

Science Education

Korea University, Korea
crex@comedu.korea.ac.kr

POSTECH, Korea

seungjin@postech.ac.kr

Abstract

Spam deobfuscation is a processing to detect obfus-
cated words appeared in spam emails and to convert
them back to the original words for correct recog-
nition. Lexicon tree hidden Markov model (LT-
HMM) was recently shown to be useful in spam
deobfuscation. However, LT-HMM suffers from a
huge number of states, which is not desirable for
practical applications.
In this paper we present
a complexity-reduced HMM, referred to as dy-
namically weighted HMM (DW-HMM) where the
states involving the same emission probability are
grouped into super-states, while preserving state
transition probabilities of the original HMM. DW-
HMM dramatically reduces the number of states
and its state transition probabilities are determined
in the decoding phase. We illustrate how we con-
vert a LT-HMM to its associated DW-HMM. We
conﬁrm the useful behavior of DW-HMM in the
task of spam deobfuscation, showing that it signiﬁ-
cantly reduces the number of states while maintain-
ing the high accuracy.

1 Introduction
Large vocabulary problems in hidden Markov models
(HMMs) have been addressed in various areas such as hand-
writing recognition [A. L. Koerich and Suen, 2003] and
speech recognition [Jelinek, 1999]. As the vocabulary size
increases, the computational complexity for recognition and
decoding dramatically grows, making the recognition system
impractical. In order to solve the large vocabulary problem,
various methods have been developed, especially in speech
and handwriting recognition communities.

For example, one approach is to reduce the lexicon size
by using the side information such as word length and word
shape. However, this method reduces the global lexicon to
only its subset so that the true word hypothesis might be dis-
carded. An alternative approach is to reduce a search space in
the large lexicon, since the same initial characters are shared
by the lexical tree, leading to redundant computations. Com-
pared to the ﬂat lexicon where whole words are simply cor-
rected, these methods reduce the computational complexity.
However, the lexical tree still has a large number of nodes

and its effect is limited. Other approaches involve various
search strategies. The Viterbi decoding is a time-consuming
task for HMMs which contain a large vocabulary (e.g., 20,000
words). The beam search algorithm [Jelinek, 1999] speeds up
the Viterbi decoding by eliminating improper state paths in
the trellis with a threshold. However, it still has a limitation
in performance gain if a large number of states are involved
(e.g., 100,000 states) since the number of states should still
be taken into account in the algorithm.

Spam deobfuscation is an important pre-processing task
for content-based spam ﬁlters which use words of contents in
emails to determine whether an incoming email is a spam or
not. For instance, the word ”viagra” indicates that the email
containing such word is most likely a spam. However, spam-
mers obfuscate words to circumvent spam ﬁlters by inserting,
deleting and substituting characters of words as well as by in-
troducing incorrect segmentation. For example, ”viagra” may
be written as ”vi@graa” in spam emails. Some examples of
obfuscated words in real spam emails are shown in Table 1.
Thus, an important task for successful content-based spam ﬁl-
tering is to restore obfuscated words in spam emails to origi-
nal ones. Lee and Ng [Lee and Ng, 2005] proposed a method
of spam deobfuscation based on a lexicon tree HMM (LT-
HMM), demonstrating promising results. Nevertheless, the
LT-HMM suffers from a large number of states (e.g., 110,919
states), which is not desirable for practical applications.

Table 1: Examples of obfuscated words in spam emails.

con. tains forwa. rdlook. ing sta. tements
contains forwardlooking statements
th’e lowest rates in thkhe u.s.
the lowest rates in the us
D1scl a1mer Bel ow:
Disclaimer Below

In this paper, we present a complexity-reduced structure of
HMM as a solution to the large vocabulary problem. The
core idea is to group states involving the same emission
probabilities into a few number of super-states, while pre-
serving state transition probabilities of the original HMM.
The proposed complexity-reduced HMM is referred to as dy-
namically weighted HMM (DW-HMM), since state transition

IJCAI-07

2523

probabilities are dynamically determined using the data struc-
ture which contains the state transition probabilities of the
original HMM in the decoding phase. We illustrate how
to construct a DW-HMM, given a LT-HMM, reducing the
number of states dramatically. We also explain conditions
for equivalence between DW-HMM and LT-HMM. We apply
DW-HMM to the task of spam deobfuscation, emphasizing
its reduced-complexity as well as performance.

2 Dynamically Weighted Hidden Markov

Model

A hidden Markov model is a simple dynamic Bayesian net-
work that is characterized by initial state probabilities, state
transition probabilities, and emission probabilities. Notations
for HMM are as follows:

1. Individual hidden states of HMM are denoted by
{q1, q2, q3, . . . , qK}, where K is the number of states.
The hidden state vector at time t is denoted by qt ∈ RK
.
2. Observation symbols belong to a ﬁnite alphabet,
{y1, y2, . . . , yM }, where M is the number of distinct ob-
servation symbols. The observation data at time t is de-
noted by yt ∈ RM

.

3. The state transition probability from state qi to state qj

is deﬁned by P (qj|qi).

4. The emission probability of observation symbol yi,

given state qj is denoted by P (yi|qj).

5. The initial state probability of state qi is denoted by

Π(qi).

With these deﬁnitions, HMM is characterized by the joint dis-
tribution of states q1:T = {q1, . . . , qT } and observed sym-
bols y1:T = {y1, . . . , yT }, which is of a factorized form

T(cid:2)

P (q1:T , y1:T ) = Π(q1)P (y1|q1)

P (qt|qt−1)P (yt|qt).

t=2

We ﬁrst illustrate the DW-HMM with a simple example.
Figure 1 shows a transition diagram of a 8-state HMM and its
associated DW-HMM that consists of four super-states, s1,
s2, s3, and s4. In this example, the original 8-state HMM
(as shown in the top in Figure 1) has four distinct emission
probabilities, i.e.,

P (y|q1),

P (y|q2) = P (y|q4) = P (y|q6),
P (y|q3) = P (y|q5) = P (y|q7),

P (y|q8).

The states involving the same emission probability, are
grouped into a super-state, denoted by s in the DW-HMM
(as shown in the left of the bottom in Figure 1). In such a
case, we construct a DW-HMM containing 4 super-states, s1,
s2, s3, and s4, where the following is satisﬁed:

P (y|s1) = P (y|q1),

P (y|s2) = P (y|q2) = P (y|q4) = P (y|q6),
P (y|s3) = P (y|q3) = P (y|q5) = P (y|q7),

P (y|s4) = P (y|q8).

In the DW-HMM, the number of states is reduced from 8 to
4.

The data structure Φ (as shown in the right of the bottom in
Figure 1) is constructed, in order to preserve the state transi-
tion probabilities deﬁned in the original HMM. Each node
in Φ is labeled by the super-state which it belongs to and
state transition probabilities are stored, following the origi-
nal HMM.

q1

q2

q3

q4

q5

q6

q7

q8
s8

HMM

P (q4|q2)

P (q2|q1)

s2

s2

P (q5|q2)

s4s4

Π(q1)
s1

P (q3|q1)

s3

s3

P (q6|q3)

s2

P (q7|q3)

s3
Φ

P (q8|q4)
P (q8|q5)
P (q8|q6)
P (q8|q7)

s4

s1

s2

s3

DW-HMM

Figure 1: Transition diagrams for the 8-state HMM, its asso-
ciated 4-state DW-HMM, and the data structure Φ, are shown.
The original HMM contains 8 different states with 4 different
emission probabilities. The nodes with the same emission
probabilities are colored by the same gray-scale. DW-HMM
contains 4 different super-states and the data structure Φ is
constructed in such a way that the transition probabilities are
preserved for the DW-HMM.

The trellis of the 4-state DW-HMM is shown in Figure 2.
Transition probabilities are determined by searching Φ using
a hypothesis, s1:t. To show the relation between DW-HMM
and HMM, we deﬁne that super-state sequence of DW-HMM,
s1:T , is corresponding to state sequence of HMM, q1:T , if

P (y|qi) = P (y|si),

1 ≤ i ≤ T.

Thus, in Figure 2, the hypothesis of the 8-state HMM cor-
responding to s1:4 = {s1, s2, s3, s4} is the state sequence,
q1:4 = {q1, q2, q5, q8}. Given an observation sequence,
y1:4 = {y1, y2, y3, y4}, the joint probabilities of the state
sequence and the observation sequence are as follows:

P (q

1:4

, y

1:4) = Π(q

1)P (y

1

|q

1)

P (qt|qt−1)P (yt|qt),

4(cid:2)

t=2

IJCAI-07

2524

Observation

y1

Super-states

P (s2|s1)

Π(s1)
s1

s2

s3

s4

y2

s1

s2

s3

s4

y3

s1

s2

s3

s4

P (s3|s2)

y4

s1

s2

s3

s4

P (s4|s3)

Hypothesis

{s1}

{s1, s2}

{s1, s2, s3}

{s1, s2, s3, s4}

s2

Π(s1)

Φ

s1

s3

s2

s3

s2

s3

s4

s1

P (s2|s1)

s2

s3

s2

s3

s2

s3

t = 1

t = 2

s2

s2

s3

s4

s1

P (s3|s2)

s4

s1

s3

s2

s3

t = 3

P (s4|s3)

s4

s2

s3

s2

s3

s2

s3

t = 4

Figure 2: Trellis of the 4-state DW-HMM converted from the 8-state HMM. Transition probabilities are determined by searching
a data structure, Φ, with a hypothesis, s1:t. The search process at a time instance is represented by the thick line in Φ.

P (s1:4, y

1:4) = Π(s1)P (y

1

|s1)

4(cid:2)

t=2

P (st|st−1)P (yt|st).

{y1, y2, . . . , yT } of HMMs equals that of the corresponding
super-state sequence s1:T = {s1, s2, . . . , sT } and the same
observation sequence y1:T of converted DW-HMMs as
follows:

Since q1:4 is the state sequence corresponding to s1:4, the
emission probabilities involved in the joint probabilities are
equal as follows:

P (y|q1) = P (y|s1),
P (y|q2) = P (y|s2),
P (y|q5) = P (y|s3),
P (y|q8) = P (y|s4).

The DW-HMM searches Φ with the hypothesis, s1:t, deter-
mining the transition probabilities as follows:

Π(s1) = Π(q1),

P (s2|s1) = P (q2|q1),
P (s3|s2) = P (q5|q2),
P (s4|s3) = P (q8|q5).

By the above equalities, the 8-state HMM and the 4-state DW-
HMM have the same joint probability as follows:

P (q

1:4

, y

1:4) = P (s1:4, y

1:4).

In searching of a probability, P (st|st−1), we assume that
state sequence s1:t is unique in Φ. The constraint is not so
strong in that if there are several state sequences which have
exactly the same emission probabilities for each state, it is
very possible that the model has redundant paths. Therefore,
it is usual when the constraint is kept in HMMs.

The

=
{q1, q2, . . . , qT } and an observation sequence y1:T =

joint probability of

state

sequence q1:T

P (q1:T , y1:T ) = P (s1:T , y1:T ).

The state transition probability of DW-HMM is deﬁned as

follows:

P (st|st−1) =

(cid:3)

0

if s1:t does not match
any paths in Φ

ω(s1:t) otherwise,

where s1:t
is state sequence decoded so far, s1:t =
{s1, s2, . . . , st−1, st}. ω(s1:t) is a weight function which
returns transition probabilities from Φ. The weight function,
ω(s1:t), traces a hypothesis, s1:t, in Φ, and returns a state
transition probability, P (st|st−1) that is stored in a node vis-
ited by st. For example, in Figure 2, ω(s1:3) determines the
state transition probability, P (s3|s2) at t = 3. The thick line
in Φ shows that ω(s1:3) traces the hypothesis s1:3, and re-
turns the transition probability, P (s3|s2), stored in the node,
s3, which is the same as the value of P (q5|q2) as shown in
Figure 1. If a node contains several state transition probabil-
ities, we choose the correct one according to the node vis-
ited at t − 1. It should be noted that DW-HMM determines
the transition probability by searching the data structure of Φ
whereas HMMs ﬁnd them in the transition probability matrix.
DW-HMMs converted from HMMs have the following
characteristics.
First, DW-HMMs are useful for HMMs
which have a very large state transition structure and com-
mon emission probabilities among a number of states, such
as LT-HMMs. When we convert a HMM to its associated
DW-HMM, the computational complexity signiﬁcantly de-
creases because the number of states is dramatically reduced.

IJCAI-07

2525

Second, there is no need to maintain a transition probability
matrix since the weight function dynamically gives transition
probabilities in the decoding phase. Third, DW-HMMs are so
ﬂexible that it is easy to add, delete, or change any states in
the state transition structure since only the data structure, Φ,
needs to be updated. Fourth, the speed and accuracy are con-
ﬁgurable by using beam search algorithm and N-best search
[Jelinek, 1999] respectively, thus securing a desirable perfor-
mance.

2.1 Conversion algorithm
To convert a HMM to DW-HMM, we should make a set
of super-states, S, from the states of HMM which repre-
sent unique emission probabilities. When S consists of
a small number of super-states and the original HMM’s
state transition structure is large, the DW-HMM is more
efﬁcient than HMMs. For example, a LT-HMM is a good
candidate to convert to a DW-HMM, because it only has a
few states with unique emission probabilities and contains
large trie dictionary. The following explains the algorithm of
converting a HMM to DW-HMM.

Algorithm: Conversion of HMM to DW-HMM

1. Make a set of super-states which have unique emission
probabilities, S = {s1, s2, . . . , sK}, from a HMM. In
this step, the number of states of HMM is reduced as
shown in Figure 1.

2. If there are any loops (self-transitions) in the HMM,
if si has
add additional super-states. For example,
a loop, an additional sj state is made.
It makes it
possible to distinguish between self-transitions and
non-self-transitions.

3. Construct the DW-HMM associated with the HMM
using super-states in S.
State transitions are made
between super-states if there exists a state transition in
the HMM, from which the super-states are made. For
example, in Figure 1, the 4-state DW-HMM has a state
transition from s2 to s3 because q2 may transition to q5
in the 8-state HMM.

4. Make a data structure, Φ, to deﬁne a weight function,
ω(s1:t), which gives the transition probability of the
DW-HMM. Φ contains the transition structure of the
HMM and stores transition probabilities in each node.
In making Φ, self-transitions in the HMM are changed
as shown in Figure 3. The super-state that has a loop
transitions to an additional super-state made from step
2 and it transitions to states where the original state
goes. The structure of Φ and the state transition struc-
ture of the HMM may be different due to self-transitions.

of the HMM.

s1

s2

s3

s4

s3

s1

s2

Figure 3: Representation of self-transitions of HMMs in Φ.

2.2 Conditions for equivalence

In the conversion process, DW-HMM conserves transition
and emission probabilities. However, there is a difference
between HMM and its associated DW-HMM when we use
straightforward Viterbi algorithm. Figure 4 illustrates trellis
of DW-HMM at t = 3 and the state s1, the only state path
{s1, s2, s1} that can propagate further since {s1, s3, s1} has
a smaller probability than {s1, s2, s1}. Therefore, the path
{s1, s3, s1} is discarded in a purging step of the Viterbi algo-
rithm. However, in case of HMM shown in Figure 5, at t = 3
and the state q1, both state paths {q1, q2, q1} and {q1, q3, q1}
can propagate to the next time instant because there are two
q1 states.

To ensure that the results of DW-HMM and HMM are the
same, we adapt N-best search for DW-HMMs and we choose
the best path at the last time instant in the trellis. Figure 6
shows that the two-best search makes two hypotheses at s1
and t = 3. Both state paths {s1, s2, s1} and {s1, s3, s1} are
kept to propagate further.

s1

s2

s3

s1

s2

s3

s1

s2

s3

t = 1

t = 2

t = 3

Figure 4: Trellis for DW-HMM.

q1

q1

q2

q3

q1

q1

q2

q3

q1

q1

q2

q3

t = 1

t = 2

t = 3

Figure 5: Trellis for HMM.

5. Deﬁne emission probabilities of the DW-HMM’s super-
states which are the same as of the corresponding states

Figure 7 illustrates the case when two-best search is useful
in LT-HMM. We denote the physical property of the states
in the nodes, showing which states have the same emission

IJCAI-07

2526

s1

s1

s2

s2

s3

s3

s1

s1

s2

s2

s3

s3

s1

s1

s2

s2

s3

s3

t = 1

t = 2

t = 3

Figure 6: Trellis for two-best search.

probability. q1 and qN are the initial and ﬁnal state of the LT-
HMM, respectively. Assuming that there exist two hypothe-
ses at t = 4, {q1, a, b, a}, {q1, a, c, a}, the LT-HMM allow
them to propagate further. However, the DW-HMM cannot
preserve both at t = 4 if we use one-best search. Since the
states labeled ”a” in the LT-HMM are grouped into a super-
state, one hypothesis should be selected at t = 4. Thus,
in case of the DW-HMM, if the answer’s state sequence is
{q1, a, c, a, c, i, a, qN }, and only one hypothesis, {q1, a, b, a},
is chosen at t = 4, we will fail to ﬁnd the answer. We address
the problem with N-best search. If we adapt two-best search,
two hypotheses, {q1, a, b, a}, {q1, a, c, a}, are able to propa-
gate further, thereby preserving the hypothesis for the answer.
HMM and converted DW-HMM give exactly the same re-
sults if we adapt the N-best search where N is the maximum
number of states of HMMs that compose the same super-state
and propagate further at a time instant. However, for practi-
cal purposes, N does not need to be large. Our application
for spam deobfuscation shows that the DW-HMM works well
when N is just two.

q1

a

z

b

c

e

a

a

b

c

c

r

a

i

a

a

qN

Figure 7: Transition diagram of LT-HMM. By using two-best
search, its associated DW-HMM is able to keep two states
labeled ”a” at a time instance.

3 Application

A lexicon tree hidden Markov model(LT-HMM) for spam
deobfuscation was proposed by Lee and Ng [Lee and Ng,
2005]. It consists of 110,919 states and 70 observation sym-
bols, such as the English alphabet, the space, and all other
standard non-control ASCII characters. We transform the LT-
HMM to the DW-HMM which consists of 55 super-states and

the same observation symbols as the model of Lee and Ng.
Transition probabilities of the DW-HMM are determined in
the decoding phase by a weight function equipped with Φ,
which is a data structure of lexicon tree containing transition
probabilities of the LT-HMM. Null transitions are allowed
and their transition probabilities are also determined by the
weight function. It recovers deletion of characters in the in-
put data. 1

The set of individual hidden super-states of the DW-HMM

converted from the LT-HMM is as follows:

S = {s1, s2, s3, . . . , s55},

where s1 is an initial state and states in {s2, . . . , s27} are
match states. States in {s28, . . . , s54} are insert states and s55
is the ﬁnal state. A match state is the super-state representing
the letters of the English alphabet and an insert state is the
state stems from the self-transitions of the LT-HMM. Since
self-transitions of the LT-HMM reﬂect insertion of characters
in obfuscated words, the state is named an insert state. The
ﬁnal state is the state which represents the end of words.
Transition probability of the DW-HMM is as follows:

(cid:3)

0

P (st|st−1) =

if s1:t does not match
a preﬁx in Φ

ω(s1:t) otherwise.

The structure of Φ is made using lexicon tree and each node

of Φ has the transition probability of the LT-HMM.

Here, a hypothesis s1:t starts from s1 which is the initial
state decoded. The DW-HMM converted from the LT-HMM
has only one initial state and it may appear many times in
the hypothesis since the input data is a sentence. To reduce
the computational cost in searching Φ, we can use the sub-
sequence of s1:t to search Φ since it is possible to reach the
same node of Φ if a subsequence starts from the initial state
at any time instant.

We deobfuscate spam emails by choosing the best path us-
ing decoding algorithms given observation characters. For
example, given the observation characters, ”vi@”, the best
state sequence, {s1, s23, s10, s2}, is chosen which represents
”via”.

We deﬁne emission probabilities as follows:

P (yt|st) when st is a match state

ρ1
ρ2
ρ3

if yt is a corresponding character
if yt is a similar character
otherwise

P (yt|st) when st is a insert state

=

(cid:3)
⎧⎪⎨
⎪⎩

σ1

σ2

=

(cid:3)

if yt is a corresponding character,
a similar character,
or not a letter of the English alphabet
otherwise

P (yt|st) when st is a ﬁnal state
if yt is a white space
if yt is not a letter of the English alphabet
otherwise.

ψ1
ψ2
ψ3

=

1More than one consecutive character deletion is not considered

due to the severe harm in readability.

IJCAI-07

2527

An emission probability mass function is given according
to the type of the observation. Here, a corresponding charac-
ter is a physical property of each node. For example, if a node
represents a character ”a”, the letter ”a” is the corresponding
character. A similar character is given by Leet, 2 which lists
analogous characters. For example, ”@” is a similar character
of the letter ”a.”

the parameter for the self-transition should be signiﬁcantly
smaller than the parameter for non-self-transition, because
the insertion of characters is less frequent than correctly writ-
ten letters. From the starting point, we optimize each value
(cid:6)θ0 which is locally maximized around the initial
in
values of the parameters.

(cid:6)θ and get

3.1 Decoding

4 Experimental results

The straightforward Viterbi algorithm is used to ﬁnd the best
state sequence, s1:T = {s1, s2, . . . , sT }, for a given observa-
tion sequence y1:L = {y1, y2, . . . , yL}. Here, T and L can
be different due to null transitions.

The accuracy and speed are conﬁgurable for DW-HMM by
using the N-best search and the beam search algorithm. N-
best search makes it possible to improve the accuracy in that
multiple super-states are preserved in the decoding phase. For
our model, we select the best path rather than N most prob-
able paths at the ﬁnal time instant in the trellis. However, it
increases computational complexity at a cost of the improved
accuracy.

The time complexity of the Viterbi algorithm is O(K 2T ),
where K is the number of states and T is the length of the
input. When the N-best search is used, the time complexity
is O((N K)2T ). To address the speed issue, the beam search
algorithm is used and it improves the speed without losing
much accuracy. Although LT-HMMs are also able to speed
up by using beam search algorithm, the large number of states
limits the speed to some extent.

In our experiment, when we use the Viterbi algorithm, the
rate of process was 246 characters/sec. We speed up the de-
obfuscation process at a rate of 2,038 characters/sec with a
beam width of 10 by using the beam search algorithm.

When it comes to the complexity of the weight function,
ω(s1:t), it is almost negligible since trie has O(M ) complex-
ity where M is the maximum length of words in the lexicon.

3.2 Parameter learning

(cid:6)θ 3, which should be
Our model has several parameters,
optimized. We adapt greedy hillclimbing search to get local
maxima. By using a training set which consists of obfuscated
words and corresponding answers, we ﬁnd the parameter set
which locally maximize the log likelihood.

(cid:8)

(cid:6)θ0 = arg max(cid:2)θ

n log(P (s1:t, y

1:t)|(cid:6)θ),

where (s1:t, y1:t) is a pair of obfuscated observations in the
(cid:6)θ0
training data and corresponding answer’s state sequence.
is the locally optimized parameter set and n is the number of
lines of the training set. η and  determine the probability of
the self-transition and null transition respectively [Lee and
Ng, 2005].

We start optimizing parameters,

(cid:6)θ, from initial values
which are set according to their characteristics. For example,

In our experiment, we deﬁne transition probabilities,
P (qt|qt−1), and make Φ using a English dictionary (83,552
words) and large email data from spam corpus. 4 Parameters
of our model are optimized with actual spam emails contain-
ing 65 lines and 447 words. We perform an experiment with
actual spam emails which contain 313 lines and 2,131 words,
including insertion, substitution, deletion, segmentation, and
the mixed types of obfuscation. Almost all the words are in-
cluded in the lexicon that we use. Table 2 exhibits some ex-
amples of various types of obfuscation.

Table 2: Some examples of various types of spam obfusca-
tion.

Type

Insertion
Substitution
Deletion
Segmentation
Mixed

Obfuscated
words
ci-iallis sof-tabs
ultr@ @liure
disolves under
assu mptions
in-ves tment

Deobfuscated
words
cialis softabs
ultra allure
dissolves under
assumptions
investment

Our experiments are performed using various decoding
methods. We use the one-best and two-best searches with var-
ious beam widths and evaluate the results in terms of the ac-
curacy and speed. Table 3 shows the accuracy of the results of
spam deobfuscation when two-best search with a beam width
of ﬁve is used. It represents that our model performs well for
the insertion, substitution, segmentation, and the mixed types
of obfuscation. However, considering that the deletion type
of obfuscation is rare in real spam emails, our model has not
trained it well.

Table 3: Accuracy of DW-HMM with two-best search and a
beam width of ﬁve.

Type
Insertion
Substitution
Deletion
Segmentation
Mixed
All obfuscation
All words

Success Total Accuracy
420
246
5
129
118
672
2066

0.925
0.925
0.263
0.942
0.887
0.932
0.969

454
266
19
137
133
721
2131

2Leet

is deﬁned as the modiﬁcation of written text,

see

(en.wikipedia.org/wiki/Leet) website.

3(cid:2)θ = {η, , ρ1, ρ2, ρ3, σ1, σ2, ψ1, ψ2, ψ3}.

4We use 2005 TREC public spam corpus. For more information,

see (plg.uwaterloo.ca/˜gvcormac/treccorpus/) website.

IJCAI-07

2528

Figure 8 shows the effect of N-best search and beam width
for the overall accuracy and computation speed 5 of our
model. Overall accuracy is deﬁned as the fraction of correctly
deobfuscated words and the computation speed is the number
of processed characters per second. As the beam width in-
creases, the overall accuracy rises a little only when the one-
best search with a beam width of ﬁve is used. However, it
turns out that the two-best search signiﬁcantly improves the
overall accuracy compared to the one-best search. The two-
best search with a beam width of ﬁve shows the accuracy of
96.9% and the processing speed of 2,136 characters/sec. The
experimental results show that two-best search with a beam
width of ﬁve is a desirable conﬁguration maintaining the high
accuracy and a low computational cost.

 100

 95

 90

 85

)

%
(
y
c
a
r
u
c
c
A

 
l
l

a
r
e
v
O

One-best Overall Accuracy
One-best Computation Speed
Two-best Overall Accuracy
Two-best Computation Speed

 6000

 5000

 4000

 3000

 2000

 1000

)
c
e
s
/
s
r
e

t
c
a
r
a
h
c
(
d
e
e
p
S
n
o

 

i
t

a

t

u
p
m
o
C

 80

 5

 10

 15

 20

Beam Width

 0

 25

Figure 8: Effect of beam width and N-best search on the
speed and overall accuracy.

5 Conclusions

We have presented dynamically weighted hidden Markov
model (DW-HMM) which dramatically reduced the number
of states when a few sets of states had distinct emission prob-
abilities. The states sharing the same emission probabilities
were grouped into super-states in DW-HMM. State transi-
tion probabilities in DW-HMM were determined by a weight
function which reﬂects the original state transitions main-
tained in the data structure Φ, rather than a large transition
probability matrix. We have shown how an HMM is con-
verted into its associated DW-HMM, retaining a few num-
ber of super-sates. We have applied DW-HMM to the task of
spam deobfuscation, where the LT-HMM was replaced by the
DW-HMM. Our experimental results showed that it improves
the speed from 10 characters/sec to 207 characters/sec when a
straightforward Viterbi algorithm is applied. DW-HMM can
be applied to diverse areas where a highly structured HMM
is used with a few distinct emission probabilities. For exam-
ple, in speech and handwriting recognition areas, our model
may be used to address the large vocabulary problems. We

5Computation speed is evaluated when DW-HMM is executed

on PC with Pentium 4 1.66GHz and 512MB RAM.

can also use DW-HMM where the state transition structure
frequently changes since it is easy to maintain such changes
for DW-HMM.

Acknowledgment

Portion of this work was supported by Korea MIC under
ITRC support program supervised by the IITA (IITA-2005-
C1090-0501-0018).

References
[A. L. Koerich and Suen, 2003] R. Sabourin A. L. Koerich
and C. Y. Suen. Large vocabulary off-line handwriting
recognition: A survey. Pattern Analysis and Applications,
6(2):97–121, 2003.

[Chow and Schwartz, 1989] Y. Chow and R. Schwartz. The
n-best algorithm: An efﬁcient procedure for ﬁnding top
n sentence hypotheses.
In Proc. Speech and Natural
Language Workshop, pages 199–202, Cape Cod, Mas-
sachusetts, 1989.

[H. Murveit and Weintraub, 1993] V. Digalakis H. Murveit,
J. Butzberger and M. Weintraub. Large vocabulary dic-
tation using SRIs DECIPHER speech recognition system:
Progressive search techniques.
In Proc. ICASSP, pages
319–322, Minneapolis, 1993.

[Jelinek, 1999] F. Jelinek. Statistical Methods for Speech
Recognition. MIT Press, Cambridge, Massachusetts,
1999.

[Lee and Kim, 1999] H. Lee and J. Kim. An HMM-based
threshold model approach for gesture recognition. IEEE
Transactions on Pattern Analysis and Machine Intelli-
gence, 21(10):961–973, October 1999.

[Lee and Ng, 2005] H. Lee and A. Y. Ng. Spam deobfusca-
tion using a hidden Markov model. In Proc. 2nd Confer-
ence on Email and Anti-Spam, Stanford University, CA,
USA, 2005.

[Lifchitz and Maire, 2000] A. Lifchitz and F. Maire. A fast
lexically constrained Viterbi algorithm for on-line hand-
writing recognition.
In Proc. 7th International Work-
shop on Frontiers in Handwriting Recognition (IWFHR-
7), pages 313–322, Amsterdam, The Netherlands, Septem-
ber 2000.

[Rabiner, 1989] L. R. Rabiner. A tutorial on hidden Markov
models and selected applications in speech recognition.
Proceedings of the IEEE, 77(2):257–286, February 1989.

[S. Procter and Mokhtarian, 2000] J. Illingworth S. Procter
and F. Mokhtarian. Cursive handwriting recognition using
hidden Markov models and a lexicon-driven level build-
ing algorithm. Vision, Image, and Signal Processing,
147(4):332–339, August 2000.

IJCAI-07

2529

