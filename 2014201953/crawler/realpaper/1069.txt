Topological Mapping through Distributed, Passive Sensors

Dimitri Marinakis, Gregory Dudek

Centre for Intelligent Machines, McGill University

3480 University St, Montreal, Quebec, Canada H3A 2A7

{dmarinak,dudek}@cim.mcgill.ca

Abstract

In this paper we address the problem of inferring
the topology, or inter-node navigability, of a sen-
sor network given non-discriminating observations
of activity in the environment. By exploiting mo-
tion present in the environment, our approach is
able to recover a probabilistic model of the sen-
sor network connectivity graph and the underlying
trafﬁc trends. We employ a reasoning system made
up of a stochastic Expectation Maximization algo-
rithm and a higher level search strategy employing
the principle of Occam’s Razor to look for the sim-
plest solution explaining the data. The technique is
assessed through numerical simulations and exper-
iments conducted on a real sensor network.

1 Introduction

In this paper, we are interested in recovering a topologi-
cal representation of a sensor network embedded region that
identiﬁes physical inter-sensor connectivity from the point of
view of an agent navigating the environment (ﬁgure 1); as op-
posed to a description of the network’s wireless communica-
tion connectivity (the conventional use of the word topology
in wireless networks).

We assume that we have no prior knowledge of the rela-
tive locations of the sensors and that we have only unlabelled
observations of activity in the environment (i.e. we make the
pessimistic assumption that the objects being observed can-
not be distinguished from one another). We must use ob-
servational data returned from our sensors to understand the
motion of agents present in the environment. By inferring
underlying patterns in their motions we can then recover the
relationships between the sensors of our network.

Our approach employs a reasoning system that is built on
a fundamental topology inference algorithm that takes the
sensor observations and environmental assumptions as in-
puts and returns the network parameters. This algorithm
is formulated using Monte Carlo Expectation Maximization
(MCEM), but it depends on ﬁxed values for certain numerical
parameters that represent a priori knowledge regarding trafﬁc
patterns in the environment. The reasoning system searches
over the input parameter space of the fundamental algorithm

C

E

A

B

D

(a)

C

E

A

B

D

(b)

Figure 1: Example of a sensor network layout (a) and corre-
sponding topology (b).

to ﬁnd a global solution that optimizes a more abstract objec-
tive function based on the principle of Occam’s Razor. 1

The ﬁnal output of our approach is a probabilistic model
of the sensor network connectivity graph and the underlying
trafﬁc trends. The simplest application of this work would al-
low a set of sensors to be “dropped” into an environment and
to automatically learn the topology of their layout. This au-
tonomous calibration ability can be considered a step towards
the larger goal of self-conﬁguring intelligent systems. The
information could be used in the self-calibration of a moni-
toring application or for route-planning purposes in a hybrid
system employing a mobile robot. Additionally, applications
that log data for ofﬂine analysis should be able to beneﬁt from
our technique. For example, a vehicle monitoring network
distributed about a city could help make decisions about road
improvements which might best alleviate congestion.

The topology of a sensor network, as we deﬁne it, must
take into account the spatial constraints of the environment as
they determine the inter-node connectivity parameters. The
topological mapping problem has been well explored in mo-
bile robotics [Shatkay and Kaelbling, 1997] [Choset and Na-
gatani, 2001] [Remolina and Kuipers, 2004] [Ranganathan
and Dellaert, 2005]. Most sensor network related inves-
tigations, however, have been more recent [Makris et al.,
2004] [Marinakis and Dudek, 2006]; the outcome is gener-
ally a graph where vertices represent embedded sensors in
the region and edges indicate navigability. By combining this
topological description with any additional metric informa-
tion obtainable from the surrounding environment, further in-

1Occam’s Razor is the principle enunciated by William of Occam

that the simplest explanation is the best.

IJCAI-07

2147

formation regarding obstructions and motion corridors could
be inferred. For example, two spatially proximal nodes that
were not topologically adjacent would suggest a barrier of
some sort.

While much of the research conducted on sensor networks
is based on developing distributed and efﬁcient algorithms
appropriate for networks of low-powered sensor platforms,
recently there has been a shift towards more complex ap-
proaches incorporating advanced probabilistic techniques and
graphical models [Ihler et al., 2005] [Paskin et al., 2005].
The traditional sensor network assumption of homogenous
systems of impoverished nodes is making way for tiered
architectures that incorporate network components of some
computational sophistication [Dantu and Sukhatme, 2006].
Note that a hierarchical arrangement based on computational
power holds true for several real world sensor networks, es-
pecially in data collection systems [Wang et al., 2003].

One problem in sensor networks that occasionally requires
above average computational effort is the processing of dis-
tributed and information-poor observations. For example, in
[Songhwai Oh and Sastry, 2006], event detections alone were
used for the tracking of multiple targets using Markov Chain
Monte Carlo (MCMC). Similarily, [Pasula et al., 1999] ap-
proached a trafﬁc monitoring problem using limited sensor
data observations through a stochastic sampling technique.

A related problem domain that generally employs a com-
plex probabilistic framework and computationally intensive
techniques is the simultaneous localization and mapping
(SLAM) problem in mobile robotics. Recently hybrid robot
/ sensor network systems have been employed to address
SLAM issues. Examples include [Rekleitis et al., 2005] in
their use of an extended Kalman ﬁlter, and [Djugash et al.,
2006] who incorporate inter-sensor range data from a de-
ployed sensor network in their approach.

In remainder of this paper we describe a computationally
heavy but powerful approach for constructing a topologi-
cal representation of a network embedded region based on
distributed observations collected from passive, information-
poor sensors. Our approach builds on some recent work
[Marinakis et al., 2005] [Marinakis and Dudek, 2006] that
has shown the validity of an MCEM-based algorithm for sen-
sor network topology inference. This technique uses only
detection events from the deployed sensors and is based on
reconstructing plausible agents trajectories. However, the al-
gorithm requires signiﬁcant prior knowledge regarding local
trafﬁc patterns that limit its general applicability. In the ap-
proach presented here, we incorporate the fundamental algo-
rithm developed in this previous work into a higher level rea-
soning system that is able to remove much of its reliance on
prior assumptions.

2 Problem Description

We describe the problem of topology inference in terms of
the inference of a weighted directed graph which captures
the spatial relationships between the positions of the sen-
sors’ nodes. The motion of multiple agents moving asyn-
chronously through a sensor network embedded region can
be modeled as a semi-Markov process. The network of sen-

sors is described as a directed graph G = (V, E), where the
vertices V = vi represent the locations where sensors are de-
ployed, and the edges E = ei,j represent the connectivity
between them; an edge ei,j denotes a path from the position
of sensor vi to the position of sensor vj. The motion of each
of the N agents in this graph can be described in terms of their
transition probability across each of the edges An = {aij},
as well as a temporal distribution indicating the duration of
each transition Dn. The observations O = {ot} are a list of
events detected at arbitrary times from the various vertices of
the graph, which indicate the likely presence of one of the
N agents at that position at that time. In other words, each
observation is identiﬁably generated by one of the sensors.

The goal of our work is to estimate the parameters de-
scribing this semi-Markov process based on a number of as-
sumptions. We assume that the behavior of the agents can
be approximated as being homogeneous; i.e.
the motion of
all agents are described by the same A and D. In addition,
we must make some assumptions about the distribution of the
inter-vertex transition times. Generally, we make the assump-
tion that the delays are normally distributed and bounded
within a ﬁxed range. We will show later, however, that we
relax this assumption in some situations.

Given the observations O and the vertices V , the problem
is to estimate the network connectivity parameters A and D,
subsequently referred to as θ.

3 Fundamental Topology Inference Algorithm

The fundamental topology inference algorithm used by our
technique infers the connectivity of a sensor network given
non-discriminating observations.
It assumes knowledge of
the number of agents in the environment and additionally, re-
quires some prior information regarding motion patterns in
the system. The inference algorithm is based on the statistical
technique of Expectation Maximization (EM). It constructs
plausible trajectories of agent motions based on current esti-
mates of connectivity parameters (E Step), and then updates
the parameters to maximum likelihood estimates based on the
sampled trajectories (M Step). In this section, we will brieﬂy
outline the methodology behind this technique; full details
can be found in [Marinakis and Dudek, 2006].

The algorithm simultaneously converges toward both the
correct observation data correspondences and the correct net-
work parameters by iterating over the following two steps:

1. The E-Step: which calculates the expected log likelihood
of the complete data given the current parameter guess:

(cid:5)

(cid:2)

(cid:3)

(cid:4)

(i−1)

Q

θ, θ

= E

log p(O, Z|θ)|O, θ

(i−1)

where O is the vector of binary observations collected
by each sensor, and Z represents a hidden variable that
determines the data correspondence between the obser-
vations and agents moving throughout the system.

2. The M-Step: which then updates our current parameter
guess with a value that maximizes the expected log like-
lihood:

(cid:2)

(cid:3)

(i)

θ

= argmax

θ

Q

θ, θ

(i−1)

IJCAI-07

2148

The E-Step is calculated by approximating Q
(m) = {l

θ, θ
m
i } which
with M samples of an ownership vector L
uniquely assigns the agent i to the observation oi in sample
m:

(cid:6)

(cid:8)

(i)

θ

= argmax

θ

1
M

log p(L

(m)

, O|θ)

(cid:2)

(cid:3)

(i−1)

M(cid:7)

m=1

(m)

(i−1)

is drawn using the previously estimated θ

where L
according to a MCMC sampling technique. At every itera-
tion, the M samples of the ownership vector L are used to
re-estimate the connectivity parameter θ (the M-Step). The
algorithm continues to iterate over the E-Step and the M-Step
until subsequent iterations result in very small changes to θ.

Markov Chain Monte Carlo sampling is used to assign each
of the observations to one of the agents. Given some guess
of the connectivity parameter θ and the current state in the
Markov Chain speciﬁed by the current observation assign-
ment L, proposals are generated by reassigning a randomly
selected observation to a new agent selected uniformly at
random. This new data association L(cid:2) is then accepted or
rejected based on an acceptance probability which is deter-
mined by the Metropolis algorithm.

The technique uses an inter-vertex delay model that allows
for the possibility of agent transitions to and from sources and
sinks in the environment. In addition to maintaining a ver-
tex that represents each sensor in the network, the algorithm
assumes an additional vertex that represents the greater envi-
ronment outside the monitored region: a source/sink node. A
mixture model is employed during the E-Step of the iterative
EM process in which potential changes to agent trajectories
are evaluated. An inter-vertex delay time is assumed to arise
from either a Gaussian distribution or from a uniform distri-
bution of ﬁxed likelihood.

The data assigned to the Gaussian distribution are assumed
to be generated by “through-trafﬁc” and are used to during the
M-Step to update our belief of the inter-node delay times and
transition likelihoods. However, the data ﬁt to the uniform
distribution are used only for updating the belief of transitions
to and from the source/sink node for the associated vertices.
The portion of data ﬁt to each component of the mixture
model is controlled through a a tunable parameter, called
Source Sink Log Likelihood (SSLLH), that determines the
threshold probability necessary for the delay data to be in-
corporated into parameter updates. The probability for an
inter-vertex delay is ﬁrst calculated given the current belief of
the (Gaussian) delay distribution. If this probability is lower
than the SSLLH then this motion is interpreted as a transition
made via the source/sink node and the transition is not used
to update the network parameters associated with the origin
and destination vertices. The value assigned to the SSLLH
parameter determines how easily the algorithm discards out-
liers and, hence, provides a compromise between robustness
to observational noise and a tendency to discard useful data.

ﬁnd reasonable solutions. We construct a heuristic evalua-
tion function that quantitatively assesses a potential solution
based on the principle of Occam’s Razor. The topology infer-
ence algorithm takes the following inputs: the observations
O; the assumed number of agents in the environment N ; and
the SSLLH parameter. The outputs of the algorithm are the
network parameters θ and the ratio of data Rdata incorpo-
rated into the parameter updates:

(θ, Rdata) ← alg(O, N, SSLLH)

Different input values result in different environmental as-
sumptions and, hence, produce different outputs.

We have created a metric that attempts to assess the valid-
ity of a solution by making the assumption that a good solu-
tion both explains the majority of the data and is as simple as
possible. This principle, known as Occam’s razor, states, “if
presented with a choice between indifferent alternatives, then
one ought to select the simplest one.” The concept is a com-
mon theme in computer science and underlies a number of
approaches in AI; e.g. hypothesis selection in decision trees
and Bayesian classiﬁers.

Our simplicity metric incorporates a measure of the sim-
plicity of the transition matrix and the amount of data ex-
plained by the solution. We measure the simplicity of a transi-
tion matrix by rewarding it in inverse proportion to how close
it is to a uniform belief of transition probabilities:

(cid:7)

Asimp =

ai∈A

(ai)β

where β determines the degree of the reward. We measure the
utility of a given data use ratio by constructing an adjusted
data ratio that attempts to reﬂect our belief in the solution as
a function of the data used. The adjusted data ratio should
incorporate the fact that some small portion of discarded data
is actually optimal, but that our belief tails off rapidly as the
discarded portion grows:

Rdata =

|# Explained Observations|

|# Total Observations|

Radj = exp− 1

τ

(Rdata−γ)2

where γ and τ describe the shape of the belief curve (ﬁgure
2). The ﬁnal simplicity metric incorporates a weighted com-
bination of Asimp and Radj:

Qsimp = (Asimp)κ ∗ (Radj)λ

where κ and λ reﬂect the relative weights assigned to the two
portions.

With the construction of the simplicity metric Qsimp, we
have shifted our dependence from speciﬁc a priori assump-
tions that must be made on a case to case basis. Instead, we
depend on more general assumptions regarding the attributes
of a believable solution for this problem domain.

4 Automatic Parameter Selection

Our reasoning system treats the fundamental topology infer-
ence algorithm described in the previous section as a ‘black
box’ and attempts to search over its input parameter space to

5 Simulation Results
In this section, we attempt to validate our general approach
for selecting nearly optimal input parameters for the funda-
mental topology inference algorithm by using attributes of

IJCAI-07

2149

Adjusted Ratio
line y=x

1

0.8

0.6

0.4

0.2

o
i
t
a
R
 
e
s
U
 
a
t
a
D
 
d
e
t
s
u
d
A

j

0
0

0.2

0.4

0.6

Data Use Ratio

0.8

1

Figure 2: Example relationship between Rdata and Radj with
γ = 0.9 and τ = 0.1.

β

2

γ
0.9

τ
0.2

κ

2

λ

1

Table 1: Table of values used to shape the simplicity quotient
Qsimp.

the solution it produces. We select parameters deﬁning the
Qsimp metric based both on domain knowledge and experi-
mental methods (Table 1).

In order to justify these parameter values and to assess
the effectiveness of this approach, we conducted a number
of simulations in which we varied the input parameters and
looked for a correlation between the performance of the algo-
rithm and the simplicity metric.

Experiments were conducted by simulating agent trafﬁc
through an environment represented as a planar graph. The
simulation tool takes as input the number of agents in the
system and a weighted graph where the edge weights are pro-
portional to mean transit times between the nodes. The out-
put is a list of observations generated by randomly walking
the agents through the environment. Two types of noise were
modeled in order reﬂect observations collected from realis-
tic trafﬁc patterns. First, a ‘white’ noise was generated by
removing a percentage of correct observations and replacing
them with randomly generated spurious observations. Sec-
ond, a more systematic noise was generated by taking a per-
centage of inter-vertex transitions and increasing the Gaus-
sian distributed delay time between them by an additional de-
lay value selected uniformly at random. The range of this
additional delay time was selected to be from 0 to 20 times
the average normal delay time.

For each experiment, the results were obtained by calcu-
lating the squared error between the true A and inferred A(cid:2)
transition matrix:

(cid:7)

ErrA =

aij ∈A,a(cid:2)
ij

∈A(cid:2)

(aij − a(cid:2)

2
ij)

1

0.8

0.6

0.4

0.2

x
i
r
t

a
M
n
o

 

i
t
i
s
n
a
r
T

 
f

o

 
r
o
r
r

 

E
d
e
r
a
u
q
S

0
1

2

No Noise
Moderate Noise

Correct

3

4

5

6

7

8

Assumed Number of Agents

(a)

No Noise
Moderate Noise

Correct

t

n
e

i
t

o
u
Q
 
y
t
i
c

i
l

p
m
S

i

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0
0

0.5

0.45

0.4

0.35

0.3

0.25

0.2

0.15

0.1

0.05

x
i
r
t

a
M
n
o

 

i
t
i
s
n
a
r
T

 
f

o

 
r
o
r
r

 

E
d
e
r
a
u
q
S

2

4

6

Assumed Number of Agents

(b)

No Noise
Moderate Noise

0
−25

−20

−15

−5
SSLLH Parameter Setting

−10

(c)

No Noise
Moderate Noise

t

n
e

i
t

o
u
Q
 
y
t
i
c

i
l

p
m
S

i

0.65

0.6

0.55

0.5

0.45

0.4
−25

−20

−15

−5
SSLLH Parameter Setting

−10

8

0

0

Input parameters that resulted in good algorithm perfor-
mance also resulted in solutions that generated high Qsimp
quotient values (ﬁgure 3). When the error in the inferred tran-
sition matrix was plotted against the value obtained for the
simplicity quotient Qsimp for a number of simulations, there
was evidence of a deﬁnite correspondence (ﬁgure 4). The ef-
fect appeared robust to moderate levels of observational noise
and different sizes of graphs. This result gives support for our
adoption of Occam’s Razor as a mechanism for selecting in-
put parameters.

(d)

Figure 3: The effect of varying assumed input parameters on
performance and the simplicity quotient. Results are aver-
aged over 20 graphs using 4 simulated agents on 12 node,
48 edge graphs with 4000 observations. Simulations labeled
‘Moderate Noise’ had 5 per cent of both white noise and sys-
tematic noise added to the observations. For charts a) and b)
SSLLH was set to -5.0 while for charts c) and d) the assumed
number of agents was set to 4.

IJCAI-07

2150

x
i
r
t

a
M
n
o

 

i
t
i
s
n
a
r
T
n

 

i
 
r
o
r
r

 

E
d
e
r
a
u
q
S

2

1.5

1

0.5

0
0

0.2

No Noise
Moderate Noise

0.4

0.6

Simplicty Quotient

0.8

1

Figure 4: The mean error in the inferred transition matrix el-
ements plotted against Qsimp for data obtained from the sim-
ulator with 4 true agents from 4 random graphs of 12 nodes,
48 edges and 4000 observations. Input parameters to the al-
gorithm were varied: assumed number of agents from 2 to
7; and SSLLH from -2 to -7. Trials labeled ‘Moderate Noise’
contained 5 per cent of both white noise and systematic noise.

The accuracy of the solution we obtain depends heavily on
the assumed number of agents in the environment. The lowest
error was consistently observed when the assumed number of
agents was set to the correct value, and generally, the closer
to the correct value this parameter was set, the better the re-
sults. Over-estimating the assumed number of agents had less
impact on accuracy than under-estimation.

A correctly tuned SSLLH parameter was also important to
the accuracy of the ﬁnal solution. As the input value for this
parameter was increased, there appeared to be a “phase tran-
sition” in the accuracy of the results. Past a certain threshold,
the error suddenly increased dramatically. Interestingly, the
best results for both the inferred mean delay times (not pre-
sented here) and transition likelihoods seems to be obtained
just before this sudden degradation in performance.

While, the shaping of the Qsimp metric is ongoing work,
the current parameter values are adequate to demonstrate the
correlation between the correctness and simplicity of the in-
ferred transition matrix. In our experimental work, described
in the next section, we took advantage of this correlation to
select appropriate input parameters since the ‘correct’ values
were unknown.

6 Experimental Results

In order to test our technique under real-world conditions,
we setup an experiment using a real sensor network of nine
nodes and analyzed the results using our approach. The sen-
sor nodes were built up of photocell-based sensors running on
low-powered commercial devices and vision-based sensors
running on single board computers. Both types of sensors
were programmed to act as simple motion detectors sending
event messages to a central server, which logged the origin
and time of the activity.

The experiment was conducted in the hallways of one wing
of an ofﬁce building (ﬁgure 5) and the data were collected

during a six and a half hour period from 10:00am to 4:30 pm
In total, approximately 4700 time-stamped
on a weekday.
events were collected.

To determine appropriate input parameters for our infer-
ence algorithm we conducted an exhaustive search over the
range of N = 2, .., 6 and SSLLH = −7, .., −3. We then
chose the output values that maximized our Qsimp metric.
(We used the same shaping parameters for the Qsimp metric
that were veriﬁed through simulations.) The maximizing ar-
guments were: N = 5 and SSLLH = −5. Therefore, we
selected the solution generated by these parameter values as
our inferred network.

Except for a few small differences, the network parameters
inferred by our topology inference algorithm closely corre-
sponded to the ground truth topology. Figure 6 compares the
analytically determined and inferred topological maps. Dis-
regarding reﬂexive links, the difference between the inferred
and ‘ground truth’ results amounted to a Hamming error of 2.
The two signiﬁcant errors are: an extra edge found between
sensors A and B; and a missing one-way edge from sensor D
to I. Additionally, the connections to the inferred source/sink
node occur primarily for boundary nodes (ﬁgure 6(c) ) and are
therefore consistent with an analytical assessment of the traf-
ﬁc patterns. Since trafﬁc commonly enters and exits the mon-
itored region via one of the boundary nodes, the inference
algorithm should commonly employ the source/sink node in
order bring the agent back into the system.

7 Conclusion
In this paper we presented a method for inferring the topol-
ogy of a sensor network given non-discriminating observa-
tions of activity in the monitored region. Our technique
recovers the network connectivity information opportunisti-
cally through the exploitation of existing motion. Our work
improves considerably on earlier related efforts for topology
inference which require prior knowledge regarding motion
in the environment.
It is worth noting that our ﬁnal tech-
nique recovers a much more complete description of network
connectivity than just a topological map of the environment.
Additionally, we learn information regarding inter-node de-
lay distributions, inter-node transition likelihoods, and other
statistics regarding motion patterns in the system.

References
[Choset and Nagatani, 2001] Howie Choset and K. Na-
gatani. Topological simultaneous localization and map-
ping (SLAM): toward exact localization without explicit
localization. IEEE Transactions on Robotics and Automa-
tion, 17(2):125 – 137, April 2001.

[Dantu and Sukhatme, 2006] Karthik Dantu and Gaurav S.
Sukhatme. Rethinking data-fusion based services in sen-
sor networks. In The Third IEEE Workshop on Embedded
Networked Sensors, 2006.

[Djugash et al., 2006] Joseph Djugash, George Kantor, San-
jiv Singh, and Wei Zhang. Range-only slam for robots
operating cooperatively with sensor networks. In Proc. of
the International Conference on Robotics and Automation,
May 2006.

IJCAI-07

2151

B

C

D

H

I

A

G

F

E

Figure 5: The layout of the nine senor (heterogeneous) network used for the experiment. Labeled triangles represent vision-
based sensor positions (A-F) and labeled rectangles represent low-powered photo-based sensors (G-I). The circle represents the
location of the central server.

B

C

D

H

(a)

A

G

F

E

I

B

C

D

H

(b)

A

G

F

E

I

SS

A

B

C

D

H

F

E

I

G

(c)

Figure 6: Topological maps of the environment that were: a) analytically determined by a human based on the actual network
layout; b) inferred by the algorithm; c) inferred by the algorithm including the source/sink node.

[Ihler et al., 2005] A. T. Ihler, J. W. Fisher III, R. L. Moses,
and A. S. Willsky. Nonparametric belief propagation for
self-calibration in sensor networks. IEEE Journal of Se-
lected Areas in Communication, 2005.

[Ranganathan and Dellaert, 2005] Ananth Ranganathan and
Frank Dellaert. Data driven MCMC for appearance-based
topological mapping. In Proceedings of Robotics: Science
and Systems, Cambridge, USA, June 2005.

[Makris et al., 2004] D. Makris, T.J. Ellis, and J. Black.
Bridging the gaps between cameras. In IEEE Conference
on Computer Vision and Pattern Recognition CVPR 2004,
Washington DC, June 2004.

[Marinakis and Dudek, 2006] D. Marinakis and G. Dudek.
A practical algorithm for network topology inference. In
IEEE Intl. Conf. on Robotics and Automation, Orlando,
Florida, May 2006.

[Marinakis et al., 2005] D. Marinakis, G. Dudek,

and
D. Fleet. Learning sensor network topology through monte
carlo expectation maximization.
In IEEE Intl. Conf. on
Robotics and Automation, Barcelona, Spain, April 2005.

[Paskin et al., 2005] Mark A. Paskin, Carlos E. Guestrin, and
Jim McFadden. A robust architecture for inference in
sensor networks.
In In Proceedings of the Fourth Inter-
national Symposium on Information Processing in Sensor
Networks 2005 (IPSN-05), 2005.

[Pasula et al., 1999] H. Pasula, S. Russell, M. Ostland, and
Y. Ritov. Tracking many objects with many sensors. In
IJCAI-99, Stockholm, 1999.

[Rekleitis et al., 2005] I. Rekleitis, D. Meger, and G. Dudek.
Simultaneous planning localization, and mapping in a
camera sensor network. Robotics and Autonomous Sys-
tems (RAS) Journal, special issue on Planning and Uncer-
tainty in Robotics, 2005.

[Remolina and Kuipers, 2004] Emilio Remolina and Ben-
jamin Kuipers. Towards a general theory of topological
maps. Artif. Intell., 152(1):47–104, 2004.

[Shatkay and Kaelbling, 1997] Hagit

Leslie Pack Kaelbling.
with weak local odometric information.
pages 920–929, San Mateo, CA, 1997.

Shatkay

and
Learning topological maps
In IJCAI97,

[Songhwai Oh and Sastry, 2006] Michael Manzo Songh-
wai Oh, Phoebus Chen and Shankar Sastry. Instrumenting
wireless sensor networks for real-time surveillance.
In
Proc. of the International Conference on Robotics and
Automation, May 2006.

[Wang et al., 2003] H. Wang, J. Elson, L. Girod, D. Estrin,
and K. Yao. Target classiﬁcation and localization in a
habitat monitoring application.
In In Proc. of the IEEE
ICASSP, 2003.

IJCAI-07

2152

