S e s s i on  22  General  Problem  S o l v i ng 

THE  ARCHITECTURE  OF  COHERENT  INFORMATION  SYSTEM: 

A  GENERAL  PROBLEM  SOLVING  SYSTEM* 

C.  V,  S r i n i v a s an 

Department  of  Computer  Science 

Rutgers  U n i v e r s i t y-

New  B r u n s w i c k,  New  J e r s ey  08903 

A b s t r a ct 

T h is  paper  d i s c u s s es 

t he  a r c h i t e c t u re  of  a  meta-

f or  d i f f e r e nt  domains  of  d i s c o u r s e. 

i n t e l l i g e nt 

t he  k i n ds  of  knowledge  accepted  by 

t he  way  the  knowledge 

system,  which  can  be  used  to  generate 
i n f o r m a t i on  systems 
It  p o i n ts  out 
s y s t e m,  and 
t r i v i al  problem  s o l v i n g. 
it  p o s s i b le 
system  makes 
f u n c t i on 
c o n t e xt  of  a 
l a r ge  and  expanding  d a ta  base. 
meta-system  p r o v i d es  a  b a s is 
t he  concept  of  machine  u n d e r s t a n d i ng 
models 
t he  way 

t he  machine  can  b u i ld 

t he  models. 

it  can  use 

is  used 

t h at 

f or 

in 

it 

The  o r g a n i z a t i on  of  t he 
f or 
t he 
The 

to 

in 

the  d e f i n i t i on  of 

in  a  domain,  and 

t he 
to  do  non-

terms  of 

t he 

1. 

I n t r o d u c t i on 

is 

Our  o b j e c t i ve 

to  c r e a te  a  meta-system  which 
i n f o r m a t i on  s y s­

i n t e l l i g e nt 

The'  meta 

f a c i l i t i es 

to  generate 

to  accept  d e f i n i t i o ns  of  d e s c r i p­

in  d i f f e r e nt  domains  of  d i s c o u r s e. 

f a c t s,  o b j e c t s,  processes,  and  problem 

can  be  used 
tems 
system  is  c a l l ed  t he  META  DESCRIPTION  SYSTEM  CMOS). 
It  has 
t i on  schemas  and  d e s c r i p t i o ns 
--  about 
s o l v i ng  -- 
A  domain  might  be  a  disease 
s y s t e m,  a  p i e ce  of  m a t h e m a t i c s,  or  computing  systems 
t h e m s e l v e s. 
of  knowledge 
as  an 
For  a  domain  M, 
w i th 
is  c a l l ed 
M. 

The  d e s c r i p t i on  schemas  and  d e s c r i p t i o ns 
in  a  domain  s p e c i a l i ze  t he  MDS 

i n f o r m a t i on  system  a s s o c i a t ed 

t he 
t he  COHERENT 

INFORMATION  SYSTEM  of 

i n f o r m a t i on  system 

in  a  domain. 

t he  domain. 

i n t e l l i g e nt 

t h e m s e l v e s,  of" "KNOWLEDGE 

to  a ct 

f or 

it 

In  our  r e s e a r ch  we  have 

two  p r i n c i p al  c o n c e r n s: 
to  a 

in  a  domain 

to  e x h i b it 

( i)  How  may  one  d e s c r i be  knowledge 
computer;  what  k i n ds  of  knowledge  should  a  system 
have 
al 
knowledge? 
g i v en  knowledge  a u t o m a t i c a l ly 
the  domain  and  answer  q u e s t i o n s? 

( i i)  How  may  t he  computer  be  made 

to  accept  and  use  such 

f a c i l i t i es  are  needed 

to  s o l ve  problems 

i n t e l l i g e nt  b e h a v i o u r;  what  o p e r a t i o n­

to  use 

in 

The  MDS  accepts  and  uses 

t h r ee  k i n ds  of  know­

to 

t he 

form 

in  some 

language. 

f u n c t i on  s y m b o l s, 

t r a n s l a te  such  d e s c r i p t i o ns 

D e s c r i p t i o ns  may,  of 
The 
to  s t r u c t u r es 
The  r e l a t i o n al  system 

l e d g e:  a)  S t r u c t u r al  knowledge  p e r t a i n i ng 
and  syntax  of  d e s c r i p t i o n s. 
c o u r s e,  be  s t r i n gs  of  words 
MDS  w i ll 
w i t h in  a  r e l a t i o n al  system. 
i t s e lf  may  c o n s i st  of  c o n s t a n t s,  v a r i a b l e s,  p r e d i c a te 
symbols, 
q u a n t i f i e r s. 
s t r u c t u re  of 
b)  Sense  knowledge: 
t he  sense 
c o n s t r a i n ts  on  admissable  s t r u c t u r es  beyond 
s p e c i f i ed 
knowledge: 
to 
new  ones,  a c c o r d i ng 

L o g i c al  a s s e r t i o ns  p e r t a i n i ng 
i n t e r p r e t e d,  and 
those 
And,  c)  T r a n s f o r m a t i o n al 
to 

l o g i c al  o p e r a t o rs  and 
The  s t r u c t u r al  knowledge  s p e c i f i es 

t r a n s f o rm  g i v en  d e s c r i p t i o ns  of  s p e c i f ic  o b j e c ts 

t he  r e l a t i o n al  system  used 

the  s y n t a x. 
T h is  p e r t a i ns 

t he 
in  a  domain. 

t he  knowledge  necessary 

in  which  s t r u c t u r es  are 

to  s p e c i f i ed  c r i t e r i a. 

in 

to 

to 

? 
T h is  work  was  s u p p o r t ed  by  a  r e s e a r ch  g r a nt 
N I H,  g r a nt  number  RR-643, 

from 

618 

in 

in 

to 

t he 

t h r ee 

t h e se 

(CHECKER, 

l e v e ls  of  knowledge 

Corresponding 
is  a  h i e r a r c hy  of  p r o b l em  s o l v e r s, 

f or  which 
in 

in  a  g i v en  c o n t e x t. 

t he 
in  a  domain 

t he  s t r u c t u r al  and  sense 

t h at  e s t a b l i s h e s,  m a i n t a i ns  and  updates 

t he  s p e c i f ic  models 
is  e i t h er  d i r e c t ly  s t o r ed 

(CHECKER, 
(TP)  and  DESIGNER, 
The 

CHECKER  can  answer  q u e s t i o ns  p e r t a i n i ng 
i n f o r m a­
t he  d a ta  b a s e,  or 
l o g i c al 
The  THEOREM  PROVER 

t h e re 
INSTANTIATOR),  THEOREM  PROVER 
o r d er  of  i n c r e a s i ng  c o m p l e x i t y. 
INSTAN-
TIATOR)  system  a c ts  as  a  s o p h i s t i c a t ed  data  management 
system 
data  base  of  models  of  s p e c i f ic  o b j e c ts 
a  manner  c o n s i s t e nt  w i th 
knowledge. 
to  any  of 
t i on 
is  d i r e c t ly  d e r i v a b le  by  e v a l u a t i ng  a  g i v en 
a s s e r t i on 
adds  power  to 
cases 
by  g i v i ng 
sense  knowledge;  where 
CHECKER  of 
and  u p d a t i ng  of  models; 
t r u th  v a l u es  of  a s s e r t i o ns  based  on 
sense  knowledge. 
t he  system  by  e n a b l i ng 
a c t i o ns  u s i ng  g i v en  a c t i on  p r i m i t i v es 
Rules} 
p r o b l e m. 
f i c a t i on  of  system 
a  c o n s i d e r a b le 

it  can  a l so  determine  g e n e r al 
the  s t r u c t u re  and 
to 

T h is  h i e r a r c hy  imposes  a  v e ry  u s e f ul  c l a s s i­

it  a d v i ce  based  on  deduced  consequences  of 

f e a s i b le 
i m p o s s i b le  s i t u a t i o ns 

t he  search  e f f o rt  of  CHECKER 

in  a  manner  c o n s i s t e nt  with 

f a c i l i t i e s,  and  g i v es 

The  DESIGNER  adds 

to  p l an  courses  of 

( T r a n s f o r m a t i on 

it  h e l ps  reduce 

the  g e n e r a t i on 

in  t h r ee  ways: 

f u r t h er  power 

t he  CHECKER 

f l e x i b i l i t y. 

it  can  warn 

t he  system 

the  system 

f a c ts  of  a 

In  c e r t a in 

t he 

t he 

in 

language  of  a  domain 
the  model  d e f i n i t i o ns 

i t s e lf 
t he 
looked  at  as  a 

is 
in 

The  d e s c r i p t i ve 
terms  of 

in 
Language  a n a l y s is 

s p e c i f i ed 
domain. 
is 
model  b u i l d i ng  p r o c e s s.  Most 
d e f i n i t i o ns 
Problem  S o l v i ng  S t a t es 
The  PSS  may  p r o v i de 
problem  s o l v i ng  e x p e r i e n ce  of  the  system. 
mary  may  be  used 
s o l v e r. 

i n t e l l i g e n t ly  g u i de 

in  a  domain  may 

f a c i l i t i es 

t h us 
i m p o r t a n t l y, 

r e l e v e nt 

(PSS), 

to 

to 

to  summarize 

i n c l u de  d e f i n i t i o ns  of 

t he  model 

t he  domain. 

t he 

T h is  sum­
the  problem 

T h is  work  on  MDS  and  Cl-systems  may  be  t h o u g ht  of 

The 

[ 7 ], 

i n t r o d u c ed 

t r e nd  s t a r t­
[ 5 , 6 1, 

f u n c t i on 

[ 3 ],  POPS 

[ 4 1,  STRIPS 

l i ke  system. 

f u r t h er  e x t e n s i on  of  t he 

I ts  problem  s o l v i ng  a c t i v i ty  uses 

i n v o c a t i on  schemes  based  on 
Ct-Systems  have  b o th 

[ 8 ],  and 
i n t r o d u c ed  by  PLANNER. 

f l e x i b i l i ty  of  PLANNER-like  systems,  and  model 

t he  way  d e s c r i p t i ve  d a ta 
in  a  g i v en  domain. 

e s s e n t i a l ly  as  a 
ed  by  R E F - A R F [ l , 2 ],  QA4 
and  PLANNER 
"means-end"  a n a l y s i s,  a  concept  o r i g i n a l ly 
in  GPS 
g o a l s, 
t he 
based  r e a s o n i ng  a b i l i t i es  of  a  GPS 
e n t i re  system  depends  on 
s t r u c t u r es  are  o r g a n i z ed 
t he  a v a i l a b i l i ty  of  d a ta  s t r u c t u re  and  model  d e f i n i­
f a c i l i t i e s,  and  a  s e p a r a te  d a ta  management  sys­
t i on 
tem  makes 
t he  data 
s t r u c t u re  and  d a ta  base  d e t a i ls 
s o l v i ng  programs. 
of  t he  meta  system, 
f or  d i f f e r e nt  domains. 
t he  c l a s s es  of  p o s s i b le  models  of  o b j e c ts 
c o u ld  he  d e s c r i b ed  to  a  computer  t h e n, 
t he  computer  s h o u ld  be  a b le 
c r i p t i o ns 
i ng 
c l a s s es  of  models  can  be  d e f i n ed  and 
d e f i n i t i o ns  c o u ld  be  used 
problem  s o l v i ng 

to  c r e a te  Cl-Systems 
t h a t, 

In  Cl-Systems  we  show  how 

f or  problem  s o l v i ng  and 

(a) 
(b)  how  t he 

to  make  use  of  the  des­

language  a n a l y s is  and 

T h is  makes 
t he  MDS, 

from  t he  problem 

to  c o m p l e t e ly 

in  p r i n c i p l e, 

t he  domain. 

t he  domain. 

it  p o s s i b le 

it  p o s s i b le 

reasonable 

It  seems 

i s o l a te 

in  a  domain 

to  conceive 

language  u n d e r s t a n d­

However, 

f or 

in 

in 

if 

The  p r i n c i p al  contributions  of  the  proposed 

architecture  are: 

i)  A  f a c i l i ty  to  use  large  data  bases; 
i i)  A  s t r a t i f i c a t i on  of  knowledge  in  a  domain  and 

the  f a c i l i ty  to  use  a  highly  f l e x i b le  descriptive 
mechanism  to  describe  objects  and  problems  in  a  domain; 
the  p o s s i b i l i ty  of  describing  knowledge  in  a  domain 
in  a  systematic  way  to  a  computer; 

i i i) 

The  d e f i n i t i on  of  the  descriptive 

language 
i t s e lf  in  terms  of  the  models  the  system  can  build 
in  a  domain;  and 

iv)  The  p o s s i b i l i ty  of  specializing  the  MDS  to 

operate  e f f i c i e n t ly  as  a  problem  solving  system  in 
a  domain  of  discourse. 

It 

The  MDS  is  now  being  implemented  in  LISP  1.6. 

Some  parts  of  it  (see  Section  3)  are  now  ready.  This 
paper  i s,  therefore,  a  report  on  work  currently  in 
progress. 
introduces  the  principal  architectural 
concepts  of  MDS  and  Cl-Systems  in  the  context  of  an 
example,  the  Missionaries  and  Cannibals*  (M&C)  prob­
lem 
[ 9 ].  The  structure  of  CHECKER  and  DESIGNER  is 
explained.  The  operation  of  the  THEOREM  PROVEN  is 
discussed  in 
processor  w i ll  be  discussed. 

In  a  subsequent  paper  the  language 

[10]- 

TABLE  I:  TEMPLATES  FOR  THE  M&C  PROBLEM 

1.  PLACE:  (occupants  PEOPLE  occupants  o f ),  CC1 

(position  of  VEHIL  p o s i t i o n ),  CC2 

2.  PEOPLE:  (elements  PERSON  elements  of) 
3.  VEHIL: 
(elements  VEHICLE  elements  of) 
4.  PERSON:  (type  PTYP  type  of) 

(occupant  of  PLACELI  occupant),  CC3 

5.  PTYP:  MISSIONARY,  CANNIBAL 
6.  PLACEL1:  (elements  (PLACE,  VEHICLE)  elements  of) 
7.  PLACEL:  (elements  PLACE  elements  of) 
8.  VEHICLE: 

(pilots  PEOPLE  p i l o ts  of) 
(position  PLACE  position  of) 
(cango  to  PLACEL  destination  of) 
(capacity 
(occupants  PEOPLE  occupants  o f ),  CC4 

INTEGER  capacity  of) 

[CC1] 

[CC2] 

(*!  occupants  ((PEOPLE  X)(*!  occupants  X) 
(((NUMBEROF  MISSIONARY  X)2 
(NUMBEROF  CANNIBAL  X))v 
((NIJMBEROF  MISSIONARY  X)  is  01))) 

(*!  position  of  ((VEHICLE  X)(M  position  of  X) 

[CC?>]  (*!  occupants  o f . # . is  1) 
[CC41 

(*!  occupants. ".-■. capacity  of  * !) 

(X  cango  * ] ) )) 

2.  An  Overview  of  the  System  Architecture 

be  specific 

instances  of  objects  w i t h in  the  data  base. 

2 . 1.  Templates  and  Their  Instantiations 

2 . 1 . 1. 

The  Templates 

The  concept  of  TEMPLATES, 

the  devices  used  to 

specify  s t r u c t u r al  knowledge  is  central 
to  the  entire 
system  architecture.  Templates  classify  objects  in  a 
domain  into  objects  of  d i f f e r e nt  kinds  and  types. 
Each  template  specifies  a  certain  description  struc­
ture.  Thus, 
in  the M&C problem  (see  Table  1)  PLACE, 
PEOPLE,  VEHICLE,  etc.  are  d i f f e r e nt  kinds  of  objects. 
The  template  f or  PLACE, 
for  example  introduces  two 
r e l a t i on  symbols:  occupants  and  position  of.  The 
pair  of  r e l a t i on  symbols 
(occupants,  occupants  of) 
for  example,  are  inverses  of  each  other  in  the  sense 
that  in  instances  of  PLACE  and  PEOPLE  the  relations 
(PLACE  occupants  PEOPLE)  and  (PEOPLE  occupants  of 
PLACE)  w i ll  always  appear  together  in  the  data  base 
of  models.  PEOPLE  is  just  a  l i st  of  PERSONS.  An 
instance  of  type  c l a s s i f i c a t i on  occurs  in  the  PERSON 
template.  A  PERSON  can  be  a  MISSIONARY  or  CANNIBAL. 
In  MDS  type  c l a s s i f i c a t i on  always  r e f l e c ts  d i s t i n c­
tions  in  the  way  objects  are  used.  The  templates 
thus  specify  the  structure  of  the  relational  system 
for  a  domain: 
the  r e l a t i on  symbols  to  be  used  in  the 
description  of  various  kinds  of  objects 
and  the  kinds  of  objects  that  a  relation  symbol  may 
r e l a t e. 

in  the  domain, 

Given  such  templates,  one  may  use  the  INSTANTIA-

TOR  to  create  descriptions,  which  are  instances  of 
the  templates.  Such  instances  might  be  specified  to 
the  system  in  some  external  language,  which  is  trans­
lated  to  the 
internal  representation  in  the  relational 
system.  Or,  the  system  i t s e lf  might  generate  an 
instance  of  a  template  when  called  upon  to  do  so, 
either  case, 
to  complete  the  i n s t a n t i a t i on  of  2  tem­
p l a t e,  a ll  the  r e l a t i on  symbols  defined  for  the  tem­
plate  should  be  assigned  values.  These  values  w i ll 

In 

# 
There  are  three  missionaries  and  three  cannibals  on 
one  bank  of  a  r i v e r.  They  want  to  go  to  the  other 
bank.  There  is  only  one  boat  available. 
only  two  people  at  a  time.  The  cannibals  at  a  shore 
should  not  outnumber  the  missionaries  at  the  same 
shore.  Find  a  way  of  transporting  them. 

It  can  carry 

619 

legal 
The  necessary  additional  constraints  are 

Thus  for  the  MftC  problem  one  may  create  instances 
of  PLACli's  called  RBANKl  and  RBANK2,  a  VEHICLE  called 
BOAT,  and  as  many  MISSIONARIES  and  CANNIBALS  as  nec­
essary.  Each  PERSON  w i ll  be  the  occupant  of  some 
PLACE  and  the  VEHICLE  i t s e lf  w i ll  be  at  one  of  the 
PLACES.  We  have  not,  however,  introduced  any  of  the 
conditions  of  the  problem.  Not  a ll 
instantiations  of 
the  templates  of  the M&C problem  would  represent 
situations. 
introduced  by  the  sense  knowledge.  Every  relation 
symbol  in  a  template  may  have  a  Consistency  Condition 
(CC)  associated  with  i t.  CC1 
is  associated 
with  the  symbol  "occupants". 
CANNIBALS  at  a  PLACE  cannot  outnumber  the  missionaries. 
The  symbol  " * '"  in  CCI  refers  to  the  current  instance 
of  PLACE  at  which  the  CC  might  be  evaluated. 
called  the  anchor; 
PEOPLE)".  A ll  CC's  have  the  form:  " ( *!  r  P(X)}"  where 
*! 
is  the  anchor,  r  is  a  relation  symbol  occurring  in 
the  template  associated  with  * !,  and  P(X) 
logical  predicate.  The  predicate  P(X) 
anchored  at  the  (template,  relation  symbol)  pair. 
Thus, 
occupants). 

It  is 
(PEOPLE  X)  stands  for  " (VX)(X  is 

in  Table  I 
It  says  that  the 

is  anchored  at  (PLACE, 

the  predicate  in 

is  said  to  be 

is  some 

[CO] 

if  the  system 

In 

[CCI]  notice  that  " ( *!  occupants  X)"  is  i t s e lf 

f i r st  construct 

a  term  in  i ts  predicate.  This  has  the  following  sig­
nificance:  For  a  PLACE  l i k e,  say  RBANKl, 
is  t o ld  to  set  (RBANKl  occupants  y) 
would 
the  combined 
occupants  of  RBANKl  and  y,  and  then  v e r i fy  the  predi­
cate.  CC's  of  t h is  kind  are  called  declarative  CC's, 
as  opposed  to  the  other  kind,  called  imperative  CC's, 
l i k e,  say  (for  a  hypothetical  template  PERSQN1) 
[CS1] 

for  soma  y, 
it 
l i st  of  existing 

(*I  sibling  ((PERSON)  X)(NOT  (  X  is  * ! )) 
(X  child  o f . f a t h er  of  * ! ) )) 

[CS1]  may  be  used  to  f i nd  the  siblings  of  a  PERS0N1 
terms  of  the  child  of  and  father  of  r e l a t i on  symbols. 
The  CHECKER  is  used  to  evaluate  CC's.  We  shall  dis­
cuss  the  evaluator  in  Section  2.2, 

in 

The  significant  points  to  be  noted  about  CC's  are 

the  following: 

( i) 

the  knowledge  represented  by  the  CC's  is 
of  a  different  kind  from  the  structural  knowledge, 
specified  by  the  templates. 

620 

621 

The  CHECKER  makes  sure  that  data  entered  i n to  the 
data  base  is  consistent,  and  also  keeps  track  of 
what  additional  data  is  needed  to  complete  the  des(cid:173)
c r i p t i o ns  of  objects  with  respect  to  the  templates. 
The  templates 
for  a  domain  describe  the  structure 
of  the  data  base  for  the  domain.  The  CHECKER  uses 
t h is  structure  to  guide  the  INSTANTIATOR  to  create 
and  r e t r i e ve  items 

in  the  data  base  selectively. 

The  l i m i t a t i o ns  of  the  CHECKER  arises 

in  the  auto(cid:173)

in  the  updating  pro(cid:173)

matic  guidance  it  can  provide 
cess.  The  CHECKER  has  f a c i l i t i es  to  interpret 
individual  CC's  and  to  recognize  the  r e l a t i on  symbols 
whose  value  in  the  data  base  might  be  affected  as  a 
result  of  a  change  made  at  one  place  in  the  data 
base.  CHECKER  keeps  track  of  the  r e l a t i on  symbol, 
by  cataloging  the  r e l a t i on  symbols  in  terras  of  t h e ir 
appearances  in  the  various  CC's. 
In  general,  a 
change  in  the  value  of  one  r e l a t i on  symbol  might 
propogate  through  the  data  base  to  a  series  of  other 
r e l a t i on  symbol  values.  As  long  as  any  given  i n(cid:173)
stance  of  the  value  of  a  r e l a t i on  symbol  does  not 
repeat 
i t s e lf  in  t h is  series,  CHECKER  w i ll  have  no 
problems. 
It  can  execute  the  series  of  necessary 
changes  without  ever  having  to  go  back  to  a  value 
that 

it  had  previously  changed  within  the  sequence, 

There  are  about  twenty  primitives  that  enable 

in 

The  execution  of  func-

(Environmental  Control  Primitives) 

one  to  do  programming  in  a  backtracking  environment. 
The  p r i m i t i v es  are  c l a s s i f i ed  as  shown  in  Figure  1A. 
The  ECP's 
Figure  1A  are  used  to  establish  a  control  environment 
(cenviron)  within  a  scope. 
tions  w i t h in  the  scope  are  affected  by  i t.  See 
Table  I II  f or  a  description  of  the  ECP's.  The  SCP's 
are  the  sequential  control  p r i m i t i v es  l i ke  GO,  COND, 
etc.  There  are  seven  active  p r i m i t i v e s,  GOAL, 
ASSERT,  DELETE,  CANDO,  IFDON,  TRY  and  BIND.  The 
execution  sequences  for  the  GOAL  and  other  active 
commands  are  shown  in  Figures  1B  and  1C.  GOAL  i n(cid:173)
vokes  appropriate  d e f i n i t i o ns  from  data  base,  and 
does  "means-end"  analysis  when  necessary.  ASSERT 
and  DELETE  issue  I  and  D  commands  to  the  INSTANTIATOR, 
when  successful.  A ll  p r i m i t i v e s,  other  than  the  con(cid:173)
t r ol  p r i m i t i v e s,  may  have  CANDO,  IFDON  and  TRY  func(cid:173)
tions  associated  with  them.  A  p r i m i t i ve  can  be 
executed  only  if  i ts  associated  CANDO's  are  s a t i s f i e d. 
If  a  p r i m i t i ve  f a i ls  then  one  may  t ry  i ts  associated 
TRY  functions. 
IFDON's  should  be  executed.  Only  if 
i ts  associated 
the  IFDON's  are  also  successfully  completed  may  the 
p r i m i t i ve  return  success  to 
the  operation  with  an  example. 

If  a  p r i m i t i ve  is  successful  then 

Let  us  follow 

i ts  parent. 

the  CHECKER, 

f a c i l i t i es  to  keep  track  of  alternate  choices 

CHECKER  simply  performs  search  in  the  data  base, 
It  has  only  sim(cid:173)
in 
in  possible  valuations  of 

and  logical  combinations  of  search. 
ple 
search  paths,  and  choices 
r e l a t i on  symbols.  Also,  CHECKER  can  handle  only 
constants  as  possible  valuations  for  r e l a t i on  symbols. 
When  the  number  of  alternatives  is  large  or  when 
loops  occur  in  an  updating  chain, 
if 
l e ft  to  run  w i ll  keep  assigning  new  values  to  the 
r e l a t i on  symbols 
involved  u n t il  a  consistent  set  of 
valuations  is  obtained,  or  u n t il  a ll  known  p o s s i b i l(cid:173)
i t i es  are  exhausted. 
The  only  choices  it  can  generate 
are  those  that  are  already  available  in  the  data  base, 
or  those  that  may  be  obtained  by  evaluating  s p e c i f ic 
consistency  conditions 
local  contexts. 
It  does  not  have  the  c a p a b i l i ty  to  deduce  l o g i c al 
consequences  and  make  use  of  them  to  find  contradic(cid:173)
tions  where  possible.  To  do  t h is  general  theorem 
proving  capability  is  necessary. 
difference  between  the  CHECKER  and  a  THEOREM  PROVER 
is  the  following:  Whereas  the  CHECKER  can  assign 
(TP) 
as  values  to  r e l a t i on  symbols  only  specific  constants 
in  the  data  base,  the  TP  can  assign  as  values, 
variables  with  specified  logical  properties. 
TP  can  carry  with  it  the  logical  properties  assigned 
to  variables  and  use  them  in  making  new  assignments 
as  it  goes  along.  Resolution  based  theorem  proving 
systems  have  t h is  c a p a b i l i ty  b u i lt  i n to  the  u n i f i c a(cid:173)
t i on  algorithm  [see  Nilsson,  1971]. 

The  essential 

in  specific 

The 

In  MDS  the  CHECKER  w i ll  invoke  the  TP  whenever 
it  does  not 
find  enough  information  in  the  data  base 
to  evaluate  a  CC  at  a  p a r t i c u l ar  anchor,  or  whenever 
the  v a l i d i ty  of  an  assertion  is  to  be  proven  univer(cid:173)
s a l l y;  not  merely  with  respect  to  the  facts  known 
about  the  specific  objects  in  the  data  base. 
The 
CHECKER  w i ll  c a ll  the  TP  also  when  it  recognizes  a 
loop  in  an  updating  chain. 

The  deduction  process  and  the  control  structure 
of  the  TP  in  MDS  is  d i f f e r e nt  from  that  of  a  resolu(cid:173)
t i on  based  system, 

[ 1 0 ] ). 

(see 

2 . 3 . 1. 

The  Primitives 

622 

623 

In  both  these  cases  the  problem  solver 

of  action. 
needs  to  be  guided  i n t e l l i g e n t ly  in  making  i ts  choices. 
The  DESIGNER  has  some  b u i l t - in  f a c i l i t i es  for  i n t e l­
l i g e nt  selection  of  choices  from  a  set  of  alternatives. 
The  Problem  Solving  State  (PSS)  provides  t h is  guidance. 
This  is  discussed  in  the  next  section. 

2.3.3.  The  Problem  Solving  State 

The  PSS  i t s e lf  is  defined  by  templates.  The  PSS 

template  is  shown  in  Table  V I,  This  table  is  self-
explanatory.  Every  time  the  DESIGNER  invokes  a  func­
t i on  or  executes  a  <fn-call>  it  w i ll  create  an  i n­
stance  of  PSS  corresponding  to  the  f u n c t i o n.  The  net­
work  of  a ll  such  PSS  instances  is  the  problem  solving 
protocol.  The  CC's  associated  with  the  PSS  template 
provide  the  necessary  guidance  to  DESIGNER.  Of 
p a r t i c u l ar  interest  are  the  CC's  associated  with  the 
bindings  and  alternates 
(see  Tables  VI)  r e l a t i o n s. 
Let  us  c a ll  these  [CCB]  and  [CCF],  respectively. 
These  CC's  w i ll  specify  the  choices  of  current 
bindings  and  current  function.  Two  important  notions 
that  make  t h is  possible  are  the  notions  of  s i m i l a r i ty 
of  two  PSS  instances,  and  cc  summary  of  a  PSS  instance. 

624 

cc  summary: 

[CCS]:  A  CCS  is  a  record  of  evalua­
tions  of  CC's(branching  conditions,  CANDO  conditions 
and  bidding  conditions,  made  during  the  tenure  of 
a  PSS  instance. 
For  each  sequence  of  conditions 
evaluated,  the  CC-summary  w i ll  contain:  The  TRUE 
RESIDUES  of  the  conditions  evaluated 
if  the  condi­
t i on  evaluated  to  TRUE,  the  FALSE  RESIDUE,  NOT  TRUE 
PART  and  TRUE  PART  if  the  condition  evaluated  to 
FALSE, 
It  w i ll  also  have  the  outcome  (fn-state)  of  the  PSS 
instance  in  which  the  condition  was  evaluated, 
and  specific  variable  bindings 
kinds  and  types  of  objects  used.  A ll  variable  bind­
ings  in  the  CC-summary  of  a  PSS  w i ll  be  specified 
in  terms  of  the  variables  that  appear  in  the  bind­
ings  of  the  PSS.  The  concept  w i ll  become  clear  in 
the  example  considered  below.  The  Consistency  Condi­
t i on  [CCB]  uses  CC-summaries. 

the  RESIDUE  if  the  condition  evaluated  to  NEI. 

if  any  in  terms  of  the 

The  general  rule  i s:  Pick  f or  bindings  the  same 
kind  and  type  of  objects  that  previously  succeeded  in 
"similar  PSS  instances;  do  not  pick  the  kind  and  type 
of  objects  that  previously  f a i l e d.  Use  cc-summaries 
to  check  whether  a  chosen  binding  is  l i k e ly  to 
succeed. 
r u l e s, 

If  no  bindings  could  be  picked  by  the  above 

then  pick  a r b i t r a r i l y. 

625 

626 

Thus,  the  DESIGNER  provides  the  high  level 
control  structure  necessary  to  pass  on  to  the  CHECKER 
the  right  CC's  to  be  evaluated,  and  to  the  INSTANT1A-
TOR,  the  r i g ht  model  changes  to  be  done.  The  DE­
SIGNER  programs  themselves  are  independent  of  the 
descriptive  data  structures  used.  Again  the  templates 
and  INSTANTIATOR  provide  a  desirable  i s o l a t i o n.  The 
PSS  i t s e lf  may  be  changed  for  different  domains  of 
discourse,  or  d i f f e r e nt  problem  types. 
the  templates  and  the  rules  of  transformation, 
to­
gether  with  the  PSS  specialize  the  MDS  to  a  given 
problem,  or  a  given  domain  of  discourse.  The  problem 
solving  control  structures  are  driven  by  the  domain 
dependent  data.  The  CHECKER,  TP,  DESIGNER,  anri  IN­
STANTIATOR  are  a lt  part  of  the  MDS. 

In  t h is  sense, 

Most 

importantly  there  is  a  significant  s t r a t­
i f i c a t i on  of  knowledge  in  a  domain,  as  seen  by  the 
system.  Domain  dependent  knowledge  is  made  available 
to  the  system  as  templates,  as  CC's  or  as  TR's, 
The  PSS  templates  play  a  p a r t i c u l a r ly  important  role. 
Depending  upon  how  and  where  a  given  piece  of  domain 
dependent  knowledge  is  specified  the  system  uses  it 
d i f f e r e n t l y. 

The  f a c i l i ty  to  a r b i t r a r i ly  specify  des­

The  r e l a t i ve  i s o l a t i on  of  the  problem  solving 
and  model  management  programs  from  the  descriptive 
data  structures  themselves,  make  the  concept  of  MDS 
feasible. 
c r i p t i ve  data  structures  as  well  as  non-deterministic 
programs  makes  the  system  highly  f l e x i b le  and  power­
f u l.  The  CHECKER  and  INSTANTIATOR  provide  the  basic 
foundation.  These  two  systems  are  small  systems 
(about  2K  PDP-10  words  for  INSTANTIATOR  and  3X  for 
CHECKER),  and  the  programs  here  can  be  made  very 
e f f i c i e n t.  These  features  give  promise  that  the 
proposed  system  architecture  could  operate 
in  the 
context  of  large  data  bases.  By  defining  the  tem­
plates  carefully  the  MDS  system  can  be  specialized 
to  operate  e f f i c i e n t ly  in  a  given  domain.  The 
structure  of  MDS  is  described  in  the  next  section. 

3.  The  Meta  Description  System 

The  block  diagram  of  MDS  is  shown  in  Figure  3. 

In  t h is  figure  DL{D),  T(D),  and  K(D)  are,  respectively, 
the  d e f i n i t i o ns  of  Descriptive  Language,  Templates 
and  Knowledge  (CC's  and  TR's)  in  a  domain  D,  The 
LINGUIST,  TEMPEST,  and  QUEST  are,  respectively,  the 
subsystems  that  accept  these  definitions  and  create 
representations  for  them.  The  TEMPEST  is  now  a 
working  system  (about  Sk  of  PDP-10  words  of  compiled 
LISP  1.6  programs).  The  CHECKER  and  INSTANTIATOR  are 

627 

presently  under  construction. 

The  data  in  D L p ),  T(D),  and  K(D)  specialize  the 
MDS  for  the  domain.  The  rest  of  the  block  diagram  is 
self  explanatory. 

4.  Concluding  Remarks 

We  have  introduced  the  basic  concepts  of  C1-

Systems  and  the  MI'S.  The  Cl-Systems  provide  a  basis 
for  the  d e f i n i t i on  of  the  concept  of  machine  under­
standing  in  terms  of  models  that  a  machine  is  capable 
of  building  in  a  domain,  and  the  way  the  models  are 
used.  The  understanding  exhibited  at  the  problem 
solving,  level  of  CHECKER  is  r e l a t i v e ly  simple  under­
standing.  A  deeper  level  of  understanding  is  exhibited 
in  the  kinds  of  problems  that 
solve  (see 
of  understanding  is  very  sophisticated. 
is  able  to  plan  and  build  procedures  to  solve  problems. 

the  Theorem  Prover  can 
[ i n ] ).  At  the  level  of  DESIGNER  the  level 

The  system 

In  t h is  paper  we  have  discussed  only  a  part  of  the 
problem  solving  aspects  of  the  system; 
the  workings  of 
the  CHECKER  and  DESIGNER.  The  operation  of  the  langu­
age  processor  w i ll  be  discussed  in  a  subsequent  paper. 

We  are  proposing  the  use  of  DL(D),  T(D),  and 
K(D) 
to  transfer  domain  dependent  descriptive  knowledge 
to  a  computer.  We  have  b r i e f ly  indicated  how  such  des­
c r i p t i ve  knowledge  could  be  used  to  solve  problems  in 
a  domain  automatically. 

The  specification  of  DL(D1,  T(D)  and  K(D) 

in  a 

domain  w i l l,  of  course,  require  a  very  good  under­
standing  of  the  concepts  and  problems  in  a  domain. 
There  are  several  domains  where,  at  present,  such 
understanding  is  available.  The  MDS  provides  a  way 
of  transfering  t h is  understanding  to  a  computer.  The 
study  of  a  CIS  for  the  MDS  i t s e lf  might 
on  the  problem  of  making  a  computer  build  i ts  own 
tenjplates  to  suitably  model  and  reorganize  a  known 
corpus  of  knowledge  in  a  domain. 

throw  l i g ht 

There  is  much  work  to  be  done  to  make  the  MDS  a 

viable  system. 
It  is  necessary  to  develop  a  working 
system  f i r s t.  We  are  presently  involved  in  t h is  task. 

References: 

1.)  Fikes,  Richard  E a r l,  "REF-ARF:  A  System  f or 

Solving  Problems  Stated  as  Procedures," 
J.  A r t. 

I n t e l.  1(1)  1970. 

2.)  Fikes,  Richard  E a r l,  "A  Heuristic  Program  for 

Solving  Problems  Stated  as  Nondeterministic 
Procedures,"  Doctoral  Thesis,  Carnegie-Mellon 
University,  1968. 

3.)  Derksen,  J .,  Rulifson,  J.F.  and  fValdinger,  R.J., 

"The  QA4  Language  Applied  to  Robot  Planning," 
AFIPS  Conference  Proceedings,  Vol.  4 1,  Part  II 
FJCC  1972,  pp.  1181-1187. 

4.)  Gibbons,  Gregory  Dean,  "Beyond  REF-ARF:  Toward 
an  I n t e l l i g e nt  Processor  for  a  Nondeterministic 
Programming  Language,"  Doctoral  Thesis,  Carnegie-
Mellon  University,  1973. 

5.)  Fikes,  Richard  E a r l,  Nilsson,  Nils  J .,  "STRIPS: 

A  New  Approach  to  the  Application  of  Theorem 
Proving  to  Problem  Solving,"  J.  A r t. 
3(1)  pp.  27-68,  1972. 

I n t e l. 

6.)  Fikes,  R.E. 

,  Hart,  Nilsson,  N.J.  :  "Learning 

and  executing  generalized  Robot  Plans",  J.  Art. 
I n t e l.  3(1972),  251-288. 

7.)  Hewitt,  C,  "Description  and  Theoretical 

Analysis  (using  schemata}  of  PLANNER:  A  Language 
for  Proving  Theorems  and  Manipulating  Models  in 
a  Robot,"  Ph.D.  Thesis,  Dept.  of  Mathematics, 
M.I.T.,  Cambridge,  Mass.  1972. 

8.)  Newell,  A.,  Shaw,  J . D .,  and  Simon,  H.A.,  "Report 

on  a  General  Problem-Solving  Program  f or  a 
Computer,"  Information  Processing:  Proc. 
Conf. 
UNESCO,  Paris. 
Automation,  July  1959) 

Information  Processing,  p.  256-264, 

(Reprinted  in  Computers  and 

I n t e r n l. 

9.)  Amarel,  S .,  "On  Representations  of  Problems  of 

Reasoning  About  Actions,"  Machine  Intelligence  3 
D.  Michie,  e d .,  Edinburgh  University  Press, 
pp.  131-170.  1968. 

10.)  Srinivasan,  C.V.,  "On  the  Organization  and  use 
Information  System" 

of  Knowledge  in  a  Coherent 
RUCBM-TR19.  Dept.  of  Computer  Science, 
Rutgers  University,  New  Brunswick,  N,J, 

08903, 

626 

