490 

Session No.  11 Theoretical Foundations 

DERIVED SEMANTICS FOR SOME  PROGRAMMINCT 

LANGUAGE CONSTRUCTS 

Peter  Henderson 

Computing  Laboratory,  University  of 
Newcastle  upon  Tyne. 
England. 

Some  familiar  programming  language  constructs 

By  compounding  the  sequence  of 

are  described  and  an  implementation  for  a 
hypothetical  computing  device  is  given. 
The 
semantics  of  the  object  language  are  described 
as  mappings  of  the  internal  states  of  this 
device. 
mappings  corresponding  to  the  translation  of  a 
source  phrase,  the  semantics  of  the  source 
phrase  can  be  derived  as  a  complex  mapping. 
The  recursive  nature  of  the  syntax  of  the 
source  1anguage  requires  an  inductive  approach 
to  this  derivation. 
If  the  derived  semantics 
are  acceptable  then  the  implementation  can  be 
regarded  as  correct  in  an  informal  sense. 
1.  Introduction 

McCarthy  and  Painter  (8)  prove  the 

correctness  of  a  compiler  for  simple  arithmetic 
expressions  according  to  a  definition  of 
correctness  f i r st  defined  by  McCarthy  (7).  By 
means  of  an  abstract  analytic  syntax  for  the 
source  language  they  give  a  functional 
description  of  i ts  semantics. 
Sinn larly  the 
semantics  of  an  obj ect  ]anguage  are  spec i fled 
and  then  the  rules  governing  a  translation  from 
the  source  language  to  the  object  1anguage  are 
defined. 
translator  which  is  in  question. 
The  proof 
takes  the  form  of  showing  that  the  translated 
source  phrase  leaves  the  value  pred i cted  by  the 
functional  description  of  the  source  language 
semantics,  in  the  accumulator  of  the  obj ect 
machine. 

It  is  the  correctness  of  tlu s 

There  are  strong  parall  els  between  the 

Indeed ,  semantic  drscription 

semantic  description  and  the  translation  of  a 
source  language. 
is  accomplished  by  translation  into  a  semantic 
object  language  which  is  usually  of  a  functional 
nature,  as  opposed  to  the  command  structure  of 
the  machine  language  of  an  object  machine. 
Conversely,  the  formal  description  of  a 
translator,  mapping  the  source  language  into 
such  a  procedural  1anguage  is  an  adequate 
description  of  the  source  language  semantics, 
given  a  description  of  the  object  J anguage 
semantics. 

This  point  is  made  by  Virth  (10). 
In  this  paper  we  shall  be  concerned  with  an 

approach  to  imp]ementati on  correc tness  very 
similar  to  McCarthy  and  Pa inter,  except  that  we 
make  no  a  priori  description  of  the  source 
1anguage  semantics  and  consequently  no 
definition  of  correctness.  Rather,  we  shal1 
define  a  procedural  object  language  and  a 
translator  mapping  the  source  language  into  i t. 
We  shall  derive  from  these  definitions  a 
functiona1  description  of  the  source  language 

The  language 

As  such  they  are 

languages  is  quite 

in  that  it  allows  for 

The  techniques  are  presented  there 

from  Henderson  (3)  where  a  programming 
language  is  presented,  analysed  and  a 
functional  description  of  i ts  semanti cs 
derived. 
as  a  language  design  tool ,  since  this  is  how 
they  were  developed. 
sewrely  critical  of  irrational  source  language 
and  implementation  features. 
ALEPH,  which  is  based  on  ideas  from  many 
current  high  level 
sophisticated, 
recursively  activated  functions  and  has  a 
block  structure  within  the  eonfines  of  which 
one  may  declare  storage  for  arrays.  Notably, 
however,  ALEPH  does  not  contain  an  explicit 
control  transfer  (goto) 
It  was 
possible  to  derive  a  semantic  description  of 
the  1anguage  up  to  but  not  including  the  use 
of  vectors. 
The  probJem  here  was  that  of 
"sha ri ng"  of  storage  whi eh  had  been  identi fied 
by  Land in  (6)  . 
In  thi s  pape r,  three  of  the 
more  interesting  results  wilJ  be  described  to 
illustrate  the 
doubt  that  the  constructs  chosen  are  the 
simpler  ones  derived  in  Henderson  (  3 ) . 
i s  hoped  to  publish  other  results,  those 
concerning  functions  in  particuJ ar,  elsewhere. 

techniques  used. 

There  is  no 

f a c i l i t y. 

semanti cs. 
Correctness  is  then  involved  with 
the  acceptance  of  this  functional  description 
as  truly  representing  the  meaning  informally 
attributed  to  the  source  language. 
is 
This 
no  less  formal,  except  possibly  in  order  of 
presentation,  than  the  technique  of  McCarthy 
and  Painter.  Where  those  authors  require 
acceptance  of  a  d e f i n i ti on  of  source  language 
semantics  a  p r i o r i,  this  author  requires  the 
same  a  postiori. 

The  mam  results  of  this  paper  are  taken 

It 

2.  Some  programming  1anguage  constructs 

It  is  not  necessary  to  describe  the  whole  of 

in  order  to 

a  programming  language  in  detail 
discuss  some  of  the  constructs  available  in  it. 
It  is,  however,  judicious  to  describe  a  l i t t le 
more  than  is  formally  necessary  in  order  to 
cuJ11vato  unde rstand i ng.  Consider  then  a 
programming  language  in  which  a  program  is 
constructed  from  phrases  ralled  expressions. 
Each  expression  is  defined  syntactically  as  a 
combinntion  of  symbols  and  phrases,  some  of 
which  may  be  expressions.  We  shall  not  be 
concerned  here  with  phrases  other  than 
express]ons. 
semantic  description  we  do  not  distinguish  the 
concept,  familiarly  known  as  a  statement,  in 
our  language.  Rather  we  allow  an  expression 
to  he  evaluated  solely  for  the  side-effect  it 
will  have. 
This  saves  us,  for  example, 
having  to  define  separately  the  concept  of 
conditional  statement  and  conditional  expression. 
In  the  case  of  constructs  more  frequently 
associated  w i th  a  side-vffect  than  a  value, 
such  as  assignment  and  iterating  statements, 

For  reasons  of  expediency  in 

Session No.  11 Theoretical Foundations 

491 

conventional  and  if  possible,  convenient  values 
will  be  designated  for  them.  An assignment 
statement may yield as its value,  the value 
assigned,  for  example.  This  sort  of  concept 
is  not  new,  it  appears  in Wirth  (10)  and  others. 
The three constructs we wish to consider can 

be defined as follows. 

1.  There  are  certain basic  expressions, 
which we shall not specify, here, which 
perform primitive  computations  of a 
desirable  nature.  For  example 

To  define  what  each  of  these  constructs 

means,  it  is  necessary  to  consider  what  we  mean 
by  value  and  side—effect.  We  assume  that  the 
computation  expressed  by  a  program  manipulates 
the  elements  of  some  domain,  which  elements  we 
shall  call  values. 
Each  expression,  therefore 
specifies  the  computation  (assuming  it  termin­
ates)  of  a  value  from  this  domain.  We 
assume  this  computation  takes  place  in  an 
environment  consisting  of  a  collection  of 
variables,  each  of  which  may  or  may  not  possess 
a  value.  When  an  expression  is  evaluated  it 
may  or  may  not  produce  a  value.  When  an 
expression  is  evaluated  it  may  alter  the  values 
associated  with  some  of  these  variables. 
This 
effect  is  known  as  the  side-effect  (of  the 
evaluation). 
In  particular  if  the  effect  is 
to  leave  the  variables  unchanged,  then  it  is 
said  to  be  a  null  side-effect. 
A  subset  of 
the  domain  is  distinguished  and  called  zero, 
where  we  assume  it  is  possible  to  test  a  value 
for  membership  of  this  subset. 

We  shall  see  that  this  predicate  is  used  to 

construct  conditional  computations. 

1.  The  value  and  side-effect  of  each  basic 
expression  is  assumed  to  be  defined. 
2.  The  value  and  side-effect  of  evaluating 

3.  The  value  and  side-effect  of  evaluating 

if  e 

then  e  else  e 

l 

in  the  environment  produced 

is  the  value  and  side-effect  of  evaluating 
one  of  e  or  e 
by  evaluating  e  ,  according  to  whether  the 
value  of  e 
l 
value  of  e 
1 
otherwise  e 
4.  The  side-effect  of  evaluating 

is  in  zero  or  not. 
is  in  zero  then  e 
3 

is  selected, 

is  selected. 

the 

If 

while  e  do  e 
p 

i 

is  thp  side-effect  of  evaluating  e  and  e 
alternately,  beginning  and  ending  with 
e  ,  until  tnr  value  of  e 
is  f i r st  in  zero. 

The  value  of 

, 

while  e  do  e 
T 

1 

is  the  value  produced  by  e  when  it  is  last 
evaluated  according  to  the  above  scheme,  or 
is 
0  (which  is  some  element  of  zero)  if  e 

r 
not  evaluated,  that  is  when  e  yields  an 
element  of  zero  when  f i r st  evaluated. 
We  shall  not  attempt  to  be  more  precise 

about  this  informal  semantic  description  here. 
The  nature  of  zero  is  confusing. 
To  clarify, 
if  the  domain  is  the  direct  union  of  integers 
and  booleans  then  zero  may  have  the  single 
element  false.  However,  we  do  not  wish  to 
confine  these  results  to  such  a  choice  of  domain. 
3.  An  implementation  for  a  hypothetical  machine 

Let  us  consider  a  computing  device  (not 

unlike  a  current  day  machine  in  which  core  and 
registers  are  used  in  a  special  way),  which 
includes  an  accumulator  T  and  a  stack  P. 
names  T  and  F  were  derived  from  the  "top" 
element  and  the  " f i r st  stacked"  element  in  a 
single  stack  structure. 
The  basic  operations 
which  this  device  can  perform  may  be  specified 
simply  in  terms  of  the  accumulator  T  and  the 
stack  F  as  follows. 

The 

T↑F  place  the  current  value  of  T  on  top 
of  the  stack  F,  leave  T  unchanged. 
replace  the  value  of  T  by  the  value 
at  the  top  of  the  stack. 
this  value  from  the  stack. 

Remove 

TF 

pop  F  Remove  the  top  value  from  the  stack. 
replace  the  current  value  of  T  by  0. 
T←O 

The  basic  tests  which  the  device  can  perform 
include: 
(T=O)? 

test  if  the  current  value  of  T  is  in 

zero. 
A  program  for  this  device  is  a  graph  with  a 
single  entry  and  a  single  exit. 

492 

Session No.  11 Theoretical Foundations 

The nodes of the graph are of three kinds. 
1.  Command:  single entry,  single exit, 

2.  Test: 

3.  Join: 

labelled with a basic 
operation. 
single  entry,  double exit, 
labelled with a basic test 
and with the exits marked 
YES and NO. 
double  entry,  single  exit, 
unlabel led. 

Such a program forms a flow diagram in a fairly 
obvious sense.  We  are now in a position  to 
give the translations  of our three principal 
expressions.  Square brackets are used 
throughout merely to indicate structure  in a 
(meta)  expression.  Source expressions will  be 
used autonomously. 

Given an expression e in the source 

language, we denote by u,e its translation to a 
program for our hypothetical  computing device. 
In displaying this program as a graph we 
encircle the  (unspecified)  subgraphs  for 
component expressions with a dotted line. 

The assumption, which we shall establish 

inductively  in  section  5,  in  that  the  translat­
ion of an expression is a program which: 

1.  Stacks the  current value  of T; 
2.  otherwise leaves F unaltered; 

and  3.  leaves the  value  of  the  translated 

expression  in T. 

The program may of course have an effect upon 
other,  as yet unspecified,  components of the 
device. 
4.  Notation  for the model 

It  is  necessary  to  construct  a  model  of  our 

hypothetical  computing device  in  order  to 
analyse the programs which we have constructed 
for  it.  The  notation  is  based  on Strachey 
(1964),  Landin  (1963)  and Curry and Feys (1958) 
and other papers already cited. 

If  f  is  a  function  and  x an  argument within 
the domain  of  f,  we denote  by fx  the  result  of 
applying  f  to  this  argument.  Application 
associates  to  the  left,  t h u s . .. 
denotes 
The function 
"dot" product f.g, where J" and g are functions 
over appropriate domains  is defined by 

The  function "dot" product has 
a lower binding power than application and hence 

is  interpreted as 

Note 

that  this product  is associative  and we  shall 
write 

for 

By means of  the notation of the  -calculus we 

may write  the definition  of  f.g as  f.g = 

pxpression the 

is  followed 

immediately by the bound variable and then the 
body which  extends as  far to  the right as  is 
consistent  with  the  bracketing.  The -express­
ion, 
denotes the function, whose value for 
argument B, denoted by 
is obtained by 
evaluating the expression obtained when B is 
substituted  for  all  free  occurrences  of  x  in A. 
Ve shall assume that B is evaluated before 
substitution and that any  clash  of variables 
(if the  result  of  B contains any  -expressions 
with  free  variables)  is  catered  for by  renaming 
of bound variables. 

A particular function which we shall have 

need  of  is  the  following 

Note  that Cuvw  selects  v  if u  is  in  zero  and 
w  if  it  is  not. 
In  general  a  function  f  can 
be defined by a scheme 

where 
previously  defined  functions. 
contains an occurrence of f then we denote by 

is a combination  of  -expressions and 
If,  however, 

Session  No.  11  Theoretical  Foundations 

493 

k 

establ ish a  lemma  stating  that e had a certain 
property  under the  assumption that  e  ,  e  ,  .. 
. . .  e  have  that  property. 
In  Henderson  (3) 

by  an argument  using  structural  induction,  it 
is  shown  that  for a  certain  choice  of  expression 
types,  that  such  a  lemma  is  suf  ficient  to 
establish  the  property  absolutely  for  e.  The 
induction  principle  used  is  similar  to  that 
required by McCarthy and Painter and explained 
fully by Burstal I  (1 ). 

The  property which  concerns us  in  this paper 

we  shall  call  property A. 
property  A: 

the  expression e is  said  to  possess 

property A,  written A [e] ,  If  the 
result  of  evaluating  e  in the 
object-environment  F  =  [t,f,v]  is  the 
object-environment  F'  = 
] 
where t' = gv and v'  = hv for some 
functions g and h, determined by the 
expressi on e. 

[t',(t,f),' 

Ve  see  that  in  particular the  original  value  of 
t  is  saved  and  the new values  of the  accumulator 
and environment depend  only on the old value of 
the  environment. 
environment).  The  function  g  is  called  the 
value function associated with e and h is the 
associated  side-effect  function. 

(No te we mean source 

We shall assume  that there exist functions 

cr and ill such that given o,  as in the definition 
of property A, we have 

Thus we can write 

[t,f,v]  UP  [Wev,  (t,f),  l|levl  since A[e] 

to  show the  object-environment mapping due  to 
an  expression with property A.  Note  that  e 
and  Ie are the functions which determine the 
semantics of e.  We are now in a  position to 
establish the lemmas which we should use in an 
argument  of  correctness  of  the  implementation 
of  the  three  expressions  introduced  in  section 2. 
lemma 1  If the expressions e  ,  e  ,  • • •  ,  e 
k 

possess property A then so does the expression 

l  2 

if  it  exists.  Y  is 

the  solution  of  f 
called the  paradoxical  combinator by Curry  and 
Feys  (2)  and thp fixed-point operator by Landin 
(5).  Effoe lively  it  allows  us  to  name  the 
function  f  independently  of  the  letter  used  to 
designate  it. 

Finally , let  us  introduce  some  notation 

for stacks, 
S  is thp  stack with the n elements 

denotes  the empty stack and 

we vritc 

■ 

We denote by S+ the top element S  and by S 
the  stack remaining when S  is removed. 

When we consider the  hypothetical  computing 

device,  there are various  elements which can 
alter as  the  result  of executing a command. 
The accumulator and  the  stack can al ter,  since 
ail  the  basic  commands  introduced  here  refer  to 
them  directly. 
The  rest  of  the  elements  that 
can alter we  shall  call  collectively  the  (source) 
environment.  The  envi ronment  is  effec(lvely  a 
data  structure  which  includes  information  about 
the  values  of  all  currently  declared  variables. 
If we denote the  (source)  environment by v we 
can consider the object—environment F to be a 
triple 

where  t  and  f denote  the  current  values  of  the 
accumulator and  the  stack  respectively.  The 
notion 
is what McCarthy  (7)  refers  to as a 
state  vector.  What we  have  done  is  simply  to 
impart  to  it  a  little  more  structure. 

The semantics of the  object langua ge  can now 
be defined as mappings on  the object-environment 
as follows. 

By  compounding the  effect  of these  basic 
object-environment mappings we can derive the 
mapping corresponding to a program for our 
hypothetical  computing device. 
5.  Derivation  of  semantics  for  the  three 

constructs 
The  recursive nature  of  the  syntax  given  for 

the expressions  in  section 2 necessitates an 
inductive  approach to derivation for an 
expression.  Given an expression e constructed 
from expressions e  ,  e  , . . ., e we shall 

494 

Session No.  11 Theoretical Foundations 

which  establishes  our hypothesis  for  k =  1. 

Now  in  the  program 

The  translation  βk  for k>1,  given  in 

section 3 can be written 

k 

proof  First  we  consider  the  derivation 
connected  with  the  following  diagram,  for  some 
e which has property A. 
The  diagram  corresponds  to  the  form  of  each  arm 
of  the  conditional  expression.  The  initial 
operation,  TlF  is  used  to  remove  the  redundant 
value  of  the  tested  expression.  This  context 
allows  us  to  assume  that  F  is  not  empty. 

we  postulate  that  there  exist  functions α , β 
with  the  property  that  the  object-environment 
mapping  of  this  program  (if  it  terminates)  is 

Session No.  11 Theoretical Foundations 

We postulate that there exist functions α and p 
constructively by induction on k, the number of 
times the condition in the loop proves false. 

Suppose k = 0, then the above program 

corresponds to 

Suppose now the hypothesis is true in case we 
should go round the loop k - 1 times, and that 
in this case we have α= α' and β =  β',  then if 
the condition should prove false k times, we 
have the derivation. 

495 

1 

by the inductive hypo thesis, since condition 
proves false after k - 1 more loops.  This 
establishes the hypothesis and rv and p have the 
form 

However,  in order to get a definitional  form 
for α and p we must consider the partial 
derivations chosen by the condition in the loop. 

for the NO branch 
Now for the whole diagram, we have 

In each of the above lemmas we have 
denvecl a value f unc tion and n side-effect 
function , for the expression concerned, in 
terms of the value and side-effect functions 
of the component expressions.  These 
functions are in a form which this author has 
found convenient for manipulative purposes. 
The formulation would be called 'applicative' 
by Curry and Feys (2) (in a lose sense). 
They are not, however, in a digestible  form for 
the defmition of  langunge  in an educational 
sense. 
In  Henderson (3), the result on the 
while expression is analysed and alternative 
forms given. 
In particular the  side-effect 
function is shown to be equivalent to that 
defined by Hoare (4). 

The requirement for formal  semantic 

description,  in the author's view,  is most 
essential in the area of program correctness. 
Depending upon whether the correctness proof 
is the duty of the programmer or the machine, 
the semantic metalanguage must be so oriented. 
The meta language used here is only nominally 
oriented towards mechanical handling but this 
is an area in which the author is currently 
experimenting. 

496 

Session No.  11 Theoretical Foundations 

expressions'. 
1967. 

AMS Symp. in Appl. Math 19, 

9.  Strachey,  C.  (1964)  'Towards a formal 

semantics'  in  'Formal  language  description 
languages  for  computer  programming'.  Ed. 
T.H.  Steel.  Publ. North Holland. 
1964  IFIP Conf.  Proc. Baden. 

10. Wirth, N.  (1966)  'Euler,  a generalisation 
of Algol  and  its  formal definition'  CACM, 
Vol.  9,  p.  13. 

Typographical  note: 
In  the  iterated fuinction 
"dot"  product lite  .  . ..  .  l|le  the  "dot"  should 

not be  confused with  the  ellipses.  A 
succession  of  three  dots  is  used  consistently 
as ellipses, a single dot must therefore be 
interpreted  as "dot" product. 

1 

To summarise, ve have defined a language 
informally and then an  implementation  for  it. 
The semantics of the object  language and  the 
definition  of  a  translator  into  the  object 
language  specify  the  semantics  of the  source 
language  in a procedural way.  By analysing 
the  translation  of  the  source  phrase  it  has 
been possible  to derive a functional 
description  of the  source  language  semantics. 
Correctness  of  the  implementation  involves 
acceptance  that  the  informal  interpretation 
of  the  derived  semantic  functions  corresponds 
to  the meaning  informally attributed  to  the 
phrases when they were defined. 

A  final  point worth noting  is  that  the 

results presented  here were developed  in the 
context  of  a  particular  implementation.  Yet 
they turned  out to be  remarkably independent 
of many  of  the  design  features  of  that 
implementation.  This  fact has  enabled  us  to 
investigate  just  three  of  the  constructs  here 
without  concern  for  the  others. 
heartening to  note  that  the demands  of  the 
proofs  rationalised the  language design to a 
point  where  it  was  easy  to  describe  to  both 
man and machine. 
Acknowledgements 

It  is 

This  research,  which was  carried out  in the 

Computing Laboratory  of  the University  of 
Newcastle upon Tyne from 1967 to 1970, WAS 
supported  initially by the Science Research 
Council and  subsequently by the University. 
The  author  is  extremely  grateful  to Mr.  M.J. 
Elphick of  the  Laboratory  for the  time  he 
devoted  to  reading and discussing this material 
1 

Burstall,  R.M.  (1969)  'Proving properties 
of programs  by  structural  induction'. 
Computer Journal. Vol 12, p.  41. 
Curry, H.F. and Feys, R.  (1958) 
'Combinatory Logic'.  Vol.  1. 
North Holland, Amsterdam. 
Henderson, P.  (1970)  'Design and Semantic-
Analysis of a programming language  and  its 
compiler'.  Ph.D.  Thesis,  University  of 
Newcastle upon Tyne. 
Hoare,  C.R.  (1969). 
for computer programming'.  CACM, 
Vol.  12  Nov.  1969,  p.  576. 
Landin,  P.J.  (1963)  'The mechanical 
evaluation  of  expressions'.  Computer 
Journal, Vol.  6,  p.  308.  1963. 

'An axiomatic  basis 

5 

6.  Landin,  P.J.  (1965)  'A correspondence 

between Algol and Church's λ-calcuius'. 
CACM  Vol.  8,  1965,  p.89 + p.158. 

7.  McCarthy,  J. 

science  of  computation'. 
(1962) p. 21. 

'Towards a mathematical 
IFIP Proc. 

8.  McCarthy,  J.  and Painter,  J.  (1967) 

'Correctness  of  a Compiler  for Arithmetic 

