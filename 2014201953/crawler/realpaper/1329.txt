ITERATED  LIMITING  RECURSION  AND  THE  PROGRAM 
MINIMIZATION  PROBLEM. 

m a c h i n e s. 

Session  18  Automatic  Programming 

L . K.  S c h u b e rt 

D e p a r t m e nt  of  Computing  S c i e n c e,  U n i v e r s i ty 
o f A l b e r t a,  Edmonton,  A l b e r t a,  Canada. 

ABSTRACT: 

The  g e n e r al  p r o b l em  of 

f i n d i ng 

m i n i m al  p r o g r a ms 

r e a l i z i ng  g i v en 

" p r o g r am 

d e s c r i p t i o n s" 

is  c o n s i d e r e d,  where  program 

d e s c r i p t i o ns  may  s p e c i fy  a r b i t r a ry  program 

p r o p e r t i e s. 

The  p r o b l em  of 

f i n d i ng  m i n i m al 

programs  c o n s i s t e nt  w i th 

f i n i te  or 

i n f i n i te 

i n p u t - o u t p ut 

l i s ts 

is  a  s p e c i al  case 

( f or 

i n f i n i te 

i n p u t - o u t p ut 

l i s t s, 

t h is 

is  a  v a r i a nt 

of  E.M.  G o l d 's 

f u n c t i on 

i d e n t i f i c a t i on 

p r o b l e m;  a n o t h er  c l o s e ly 

r e l a t ed  p r o b l em 

is 

t ne  g r a m m a t i c al 

i n f e r e n ce  p r o b l e m ). 

A l t h o u gh 

most  p r o g r am  m i n i m i z a t i on  p r o b l e ms  are  n ot 

r e c u r s i v e ly  s o l v a b l e, 

t h ey  are 

f o u nd 

to  be  no 

more  d i f f i c u lt 

t h an 

t he  p r o b l em  of  d e c i d i ng 

w h e t h er  any  g i v en  p r o g r am  r e a l i z es  any  g i v en 

d e s c r i p t i o n,  or 

t he  p r o b l em  of  e n u m e r a t i ng 

programs 

in  o r d er  of  n o n d e c r e a s i ng 

l e n g th 

( w h i c h e v er 

is 

h a r d e r ). 

T h is 

r e s u lt 

is 

f o r m u l a t ed 

in 

t e r ms  of  k - l i m i t i ng 

r e c u r s i ve 

p r e d i c a t es  and 

f u n c t i o n a l s,  d e f i n ed  by 

r e p e a t ed  a p p l i c a t i on  of  G o l d 's 

l i m it  o p e r a t o r. 

A  s i m p le  consequence 

is 

t h at 

t he  program 

m i n i m i z a t i on  p r o b l em 

is 

l i m i t i ng 

r e c u r s i v e ly 

s o l v a b le 

f or 

f i n i te 

i n p u t - o u t p ut 

l i s ts  and  2-

l i m i t i ng 

r e c u r s i v e ly  s o l v a b le 

f or 

i n f i n i te 

i n p u t - o u t p ut 

l i s t s,  w i th  weak  a s s u m p t i o ns 

about 

t he  measure  of  p r o g r am  s i z e. 

Gold 

r e g a r d ed 

l i m i t i ng 

f u n c t i on 

i d e n t i f i c a t i on 

(more  g e n e r a l l y, 

" b l a ck  box" 

i d e n t i f i c a t i o n) 

as  a  model  of 

i n d u c t i ve 

t h o u g h t. 

I n t u i t i v e l y, 

i t e r a t ed 

l i m i t i ng 

i d e n t i f i c a t i on  m i g ht  be 

r e g a r d ed  as  h i g h e r - o r d er 

i n d u c t i ve 

i n f e r e n ce 

p e r f o r m ed  c o l l e c t i v e ly  by  an  e v er  g r o w i ng 

community  of 

l o w e r - o r d er 

i n d u c t i ve 

i n f e r e n ce 

KEY  WORDS  AND  PHRASES: 

f u n c t i on 

i d e n t i f i c a t i o n, 

m i n i m al  p r o g r a m s, 

l i m i t i ng 

r e c u r s i o n, 

i n d u c t i ve 

i n f e r e n c e,  p r o g r am 

l e n g th  m e a s u r e s,  p r o g r am 

p r o p e r t i e s,  degree  of  u n s o l v a b i l i t y. 

1. 

INTRODUCTION 

A  q u e s t i on  c o n s i d e r ed  by  Gold 

[1]  was 

f or 

what  c l a s s es  of  computable 

f u n c t i o ns 

t h e re 

e x i st  machines  w h i ch  succeed 

in 

" i d e n t i f y i ng 

in 

t he 

l i m i t"  any  member  of 

t he  c l a s s. 

I d e n t i f y i ng  a  computable 

f u n c t i on 

in 

t he 

l i m it 

c o n s i s ts  of  g e n e r a t i ng  a  sequence  of 

" g u e s s e s" 

( i n t e g e r s) 

c o n v e r g e nt 

to  an 

i n d ex 

f or 

t he 

f u n c t i o n,  s u c c e s s i ve  guesses  b e i ng  based  on 

s u c c e s s i v e ly 

l a r g er  p o r t i o ns  of  an 

i n f o r m a t i on 

sequence  w h i ch 

l i s ts  a ll  e l e m e n ts  of 

t he 

f u n c t i o n. 

An  example  of  a  p r a c t i c al  p r o b l em 

to  w h i ch 

t h e se  c o n c e p ts  are 

r e l e v a nt 

is 

t he 

l e a r n i ng  p r o b l em 

in  p a t t e rn 

r e c o g n i t i o n. 

T y p i c a l ly  an  a d a p t i ve  p a t t e rn 

r e c o g n i t i on 

system 

is  caused 

to 

" l e a r n"  a  mapping 

f r om 

p a t t e r ns 

to 

r e s p o n s es  by  p r e s e n t i ng 

to 

it  a 

sequence  of 

l a b e l l ed  p a t t e r n s, 

i . e .,  p a t t e r ns 

w i th 

t h e ir  a p p r o p r i a te 

r e s p o n s e s. 

A ll  of 

t he 

m a c h i n e 's 

responses  w i ll  c o n f o rm  w i th 

t he 

d e s i r ed  mapping  once 

it  has 

i d e n t i f i ed 

t h at 

m a p p i n g, 

in 

t he  sense 

t h at 

it  has 

f o u nd  an 

a l g o r i t hm 

( e q u i v a l e n t l y,  an 

i n d e x) 

f or 

i t. 

Two  of  G o l d 's  main 

r e s u l ts  were 

t h at  any 

r . e. 

c l a ss  of 

t o t al 

r e c u r s i ve 

f u n c t i o ns 

is 

i d e n t i f i a b le 

in 

t he 

l i m i t,  and 

t h at 

t he  c l a ss 

of 

t o t al 

r e c u r s i ve 

f u n c t i o ns 

is  n ot 

i d e n t i­

f i a b le 

in 

t he 

l i m it 

(hence  a l so 

t he  c l a ss  of 

p a r t i al 

r e c u r s i ve 

f u n c t i o ns 

is  n ot 

i d e n t i­

f i a b le 

in 

t he 

l i m i t ). 

Here  a  m o d i f i ed  v e r s i on  of  G o l d 's  p r o b l em 

is  c o n s i d e r e d. 

The 

f i r st  m o d i f i c a t i on 

is 

t he 

r e p l a c e m e nt  of 

i n f o r m a t i on  sequences  by 

( f i n i te  or  i n f i n i t e) 

"program  d e s c r i p t i o n s" 

is  also  suggested  by 

the  work  of  Kolmogorov 

which  may  specify  a r b i t r a ry  program  p r o p e r t i e s. 

[ 6 ],  M a r t i n - L of 

[7]  and  o t h e r s,  showing 

t h at 

Descriptions  which 

l i st 

i n p u t - o u t p ut  p a i rs  are 

the  number  of  symbols 

in 

the  s h o r t e st  program 

then  regarded  as  a  s p e c i al  case.  The  second 

f or  generating  a  f i n i te  sequence  can  be 

taken 

m o d i f i c a t i on 

is 

t h at 

i t e r a t ed 

l i m it  procedures 

as  a  measure  of 

the 

i n f o r m a t i on  content  of 

the 

( I t - l i m i t i ng  r e c u r s i ve  f u n c t i o n a l s)  are 

sequence,  and  t h is  measure  provides  a  l o g i c al 

admitted 

f or  p r o g r a m - f i n d i n g,  since 

f i n d i ng 

basis 

f or 

i n f o r m a t i on 

theory  and  p r o b a b i l i ty 

s u i t a b le  programs 

in 

the  n o n - i t e r a t ed 

l i m it 

theory. 

is  impossible  f or  many  classes  of  program 

In 

the 

f o l l o w i ng 

the  u n s o l v a b i l i ty  of  most 

d e s c r i p t i o n s. 

For  t h is  purpose  k - l i m i t i ng 

n o n t r i v i al  program  m i n i m i z a t i on  problems 

is 

recursiveness 

is  defined  by  s t r a i g h t - f o r w a rd 

f i r st  noted. 

A f t er  establishment  of  some 

g e n e r a l i z a t i on  of  Gold's  concept  of 

l i m i t i ng 

basic  p r o p e r t i es  of  k - l i m i t i ng 

r e c u r s i ve 

recursiveness. 

The 

t h i rd  m o d i f i c a t i on  is 

the 

predicates  and 

f u n c t i o n a l s, 

it 

is  shown 

t h at 

added  requirement  t h at  programs 

found 

in 

the 

any  program  m i n i m i z a t i on  problem 

is  k - l i m i t i ng 

( i t e r a t e d) 

l i m it  be  minimal  according  to  some 

r e c u r s i v e ly  solvable 

if 

the  problem  of  determ-

prescribed  measure  of  program  s i z e. 

i n i ng  whether  any  given  program  s a t i s f i es  any 

Accordingly  problems  of 

t h is  m o d i f i ed  type  are 

given  d e s c r i p t i on 

is  k - l i m i t i ng 

r e c u r s i v e ly 

c a l l ed  program  m i n i m i z a t i on  problems. 

solvable  and  programs  are  k - l i m i t i ng  r . e. 

in 

There  are  various  reasons 

f or  an 

i n t e r e st  order  of  nondecreasing  s i z e. 

Simple  conse-

in  f i n d i ng  m i n i m a l - l e n g th  programs. 

In  work 

quences  are 

t h at 

the  problem  of 

f i n d i ng 

on  grammatical 

inference  c l o s e ly  r e l a t ed  to 

minimal  programs 

f or 

f i n i te 

f u n c t i o ns 

is 

Gold's 

i d e n t i f i c a t i on  problem,  Feldman 

[2] 

l i m i t i ng  r e c u r s i v e ly  s o l v a b l e,  and 

t h at 

the 

considers 

inference  schemes  which 

t ry  to 

f i nd 

problem  of 

f i n d i ng  minimal  programs 

f or 

"good"  grammars  c o n s i s t e nt  w i th  a v a i l a b le 

a r b i t r a ry  computable 

f u n c t i o ns 

(given  an 

i n f o r m a t i on  about  a  language.  One  measure 

e x p l i c it 

l i s t i n g) 

is  2 - l i m i t i ng 

r e c u r s i v e ly 

of  goodness 

is 

the  i n t r i n s ic  complexity,  or 

s o l v a b l e,  w i th  weak  assumptions  about 

the 

s i z e,  of  a  grammar. 

In 

terms  of 

the  f u n c t i on  measure  of  program  s i z e. 

Lower  bounds  on 

the 

i d e n t i f i c a t i on  problem, 

t h is  corresponds 

to 

d i f f i c u l ty  of 

these  problems  are  already  known 

f i n d i ng  programs  which  are  small  according 

from 

the  work  of  Pager 

[8]  and  Gold 

[ 1 ]. 

to  some  measure  of  program  s i z e. 

Indeed, 

the 

F i n a l l y, 

the  p o i nt 

is  emphasized 

in 

the 

use  of  small  programs 

f or 

i n d u c t i ve  inference 

concluding  remarks 

t h at 

l i m i t i ng 

r e c u r s i v e ly 

is  a  r e c u r r i ng 

theme 

in  the 

l i t e r a t u re 

(see 

solvable 

i n d u c t i on  problems, 

though  s t r i c t ly 

f or  example  Refs.  3 - 5 );  a l l u s i on  is  u s u a l ly 

"unsolvable" 

in  g e n e r a l,  are  nonetheless  w i t h-

made  to  the  s c i e n t i f ic  maxim  knows  as 

in 

the  reach  of  mechanical  procedures 

in 

the 

"Occam's  Razor",  according 

to  which  " it  is 

important  sense  described  by  Gold,  and  t h at 

vain 

to  do  w i th  more  what  can  be  done  w i th 

even  problems  unsolvable 

in 

the 

l i m it  may  be 

fewer" 

in  accounting  f or  known  phenomena. 

regarded  as  solvable  in  a  weakened  sense  by  an 

The  s p e c i al  importance  of  minimal  programs 

expanding  community  of  mechanisms  performing 

514 

l i m it  c o m p u t a t i o n s. 

assumed  to  be  e f f e c t i v e ly  enumerable 

in  order 

2.  PROGRAM  MINIMIZATION  PROBLEMS 

of 

n°ndecreasing  l e n g t h.  For  example,  the 

To  f ix  i d e a s,  any  programmable  machine  M 

number  of  elementary  symbols 

in  a  program 

may  be  thought  of  as  a  2-tape  Turing  machine, 

provides  such  a  l e n g th  measure, 

w i th  one  tape  regarded  as  i n p u t - o u t p ut  (I/O) 

In 

the 

f o l l o w i n g,  o b v i o u s ly  machine  and 

tape  and  the  o t h er  as  program  t a p e.  One  or 

length-measure  dependent  concepts  w i ll  some-

both  tapes  a l so  serve  as  working  t a p e.  A 

times 

be 

used 

w i t h o ut  e x p l i c it  r e f e r e n ce  to  a 

computation  begins  w i th  the  f i n i t e - s t a te 

p a r t i c u l ar  machine  or  l e n g th  measure. 

This 

c o n t r ol  of  the  machine  in  a  unique  s t a rt  s t a te 

should 

be  kept  in  mind  f or  a  c o r r e ct  i n t e r-

and  w i th  a  program  on  the  program  tape  and  an 

p r e t a t i on  of 

the  r e s u l t s. 

i n p ut  on  the  I/O  t a p e. 

If  and  when  the  machine 

a 

minimal 

Program  f or  a  f u n c t i on  O  is  one 

h a l t s, 

the 

I/O 

tape 

expression 

g i v es 

the 

o u t-  Whose 

length  does  not  exeed  the 

length  any 

p u t. 

It  is  assumed  t h at  t h e re  is  an  e f f e c t i ve 

otherr  Program  f or  4,. 

The  problem  of 

f i n d i ng  a 

1-1  coding 

from  tape  expressions 

(same  syntax 

minimal 

program  (or  a ll  minimal  programs) 

f or 

f or  b o th  tapes)  onto  the  i n t e g e rs  N. 

The 

a 

f u n c t i on  O  given  a  ( p o s s i b ly  i n f i n i t e) 

l i st 

program (or I/O tape expression) corresponding of the elements of ♦, is an example of a code number (index) X be written as ■i.i. ~ program m i n i m i z a t i on problem. More g e n e r a l l y, 
to code number (index) x w i ll be w r i t t en as x. Program problem generally 
TC  ,. 
-  ,,u_„ 
If  M  e v e n t u a l ly  h a l ts  w i th  o u t p ut  z  when 

a  program  m i n i m i z a t i on  problem  is 

the  problem 

r  ■» 

. .. 

.  . 

. , 

e 

c 

. 

. 

, 

, 

- 

.  - 

.  .. 

„.,„ 
s u p p l i ed  w i th  program  x  and  i n p ut  y,  one  may 
T.  ,„ 
J.M/,,\ 
If  M  does  not  h a l t,  <t>  (Y) 

w r i te  4>  (y)  =  z. 
m. 

x 
i 
is  u n d e f i n e d.  Thus  M  computes  a  p a r t i al 

,M,  . 
x 
-  ^. 

.  , 

i. • 

.  . 

-, 

., 

- 

. 

. 

, 

, 

,M 

. 

, 

- 

f u n c t i on  $x  w i th  program  x.  However, 
. 

,_  - 

be  convenient  to  t h i nk  of  x  not  merely  as  a 

. .  ■ , i 
it  w i ll 

M 

program  f or  tj> 
M 
. 

subset  of  $ 

,  b ut  as  a  program  f or  any 

In  o t h er  words,  x  is  a  program 

- 

. 

.  , 

, 

,,_  _  ,M,  . 
lyJ  = 

f or  a  f u n c t i on  $  p r o v i d ed  o n ly  t h at  cp 

,  , 
<My) 

M, 
f or  a ll  y  in  the  domain  of  <j>;  *x( y> 
need  n ot  be  undefined  f or  y  o u t s i de  t h at 

,. 

= 

. 

. 

of 

f i n d i ng  a  minimal  program  (or  a ll  minimal 

3 

programs)  meeting 

the  c o n d i t i o ns 

l i s t ed  in  any 

"program  d e s c r i p t i o n"  belonging  to  some  class 
v  •» 
of  such  d e s c r i p t i o n s.  Program  d e s c r i p t i o ns 

are  l o o s e ly  d e f i n ed  as 

f o l l o w s.  Suppose  t h at 

a 

( p o s s i b ly  i n f i n i t a r y) 

l o g i c al  system  is 

q i v en  along  w i th  an  i n t e r p r e t a t i on  based  on  a 

y 

f i x ed  M  such  t h at  every  w ff  in  tne  system 

expresses  some  program  p r o p e r ty 

( i . e .,  every 

w ff  is  a  unary  p r e d i c a te  over  programs). 

Then 

domain. 

, 
If  such  an  x  e x i s ts  f or  a  g i v en  q>,  <p 

the  w f is  comprising 

the  system  w i ll  be  c a l l ed 

. 

,  , 

,* 
w i ll  be  s a id  to  be  programmable  (on  M)  .  A 

, 

„

,

,

,

.

machine  on  which  a ll  p a r t i al  r e c u r s i ve 

f u n c t i o ns  are  programmable 

, 
is  u n i v e r s a l. 

A  program  l e n g th  measure  assigns  a  non-

n e g a t i ve  i n t e g r al 

. 
l e n g th  to  each  program  such 
- 

t h at  o n ly  a  f i n i te  number  of  programs  are  o£ 

any  p a r t i c u l ar  l e n g t h.  A  l e n g th  measure  need 

n ot  be  r e c u r s i v e, 

though  t h is  is  a  f r e q u e nt 

, 

assumption; 

f u r t h e r m o r e,  programs  are  o f t en 

program  d e s c r i p t i o n s.  T y p i c a l ly  a  program 
c—*- 

-* 

d e s c r i p t i on  might  s p e c i fy  r e l a t i o n s h i ps  between 

i n p u ts  and  o u t p u ts 

( e . g .,  p a r t i c u l ar 

i n p u t - o u t-

p ut  p a i r s ),  s t r u c t u r al  p r o p e r t i es 

( e . g ., 

the 

number  of  occurrences  of  a  p a r t i c u l ar  symbol 

in  the  program),  o p e r a t i o n al  p r o p e r t i es 

( e . g ., 

computational  c o m p l e x i t y ),  or  combinations  of 

such  p r o p e r t i e s. 

If  6  is  a  program  d e s c r i p t i o n, 

a  program  x  w i ll  be  s a id  to  r e a l i ze  6 
^ 

J. 

e x p r e s s ed 

p r o p e r f cy 

by 

^ 

if  x 

515 

expressed  as  a  t o t al 

f u n c t i on  t h is 

is 

Thus  a  mapping  whose  domain  contains  coded 

representations  of 

i n f i n i te  d e s c r i p t i o ns 

is  a 

f u n c t i o n a l. 

The  coded  v e r s i on  of  a  d e s c r i p t i on  o, 

whether 

it 

is 

f i n i te  or 

i n f i n i t e,  w i ll  be 

w r i t t en  as  6.  Since  no  confusion  can  r e s u l t, 

coded  r e p r e s e n t a t i o ns  of  d e s c r i p t i o ns  w i ll  also 

simply  be  c a l l ed  d e s c r i p t i o n s.  A  set  of 

d e s c r i p t i o ns  w i ll  be  c a l l ed 

i n f i n i t e ly 

diverse 

if  no  set  of  programs  r e a l i z i na 

the 

d e s c r i p t i o ns 

is 

f i n i t e. 

Theorem  1 

is  concerned  w i th 

I/O  d e s c r i p t i o ns 

o n l y,  w h i le  Theorems  3  and  4  w i ll  apply  to 

a r b i t r a ry  program  d e s c r i p t i o n s. 

Theorem  1. 

Let  M  be  a  u n i v e r s al 

programmable  machine  and 

l et  a  r e c u r s i ve 

length  measure  be  g i v e n. 

Then  the  program 

m i n i m i z a t i on  problem 

is  not  r e c u r s i v e ly 

solvable 

f or  any  e f f e c t i v e ly  enumerable, 

i n f i n i t e ly  diverse  set  of 

I/O  d e s c r i p t i o n s. 

Proof: 

Pager 

[8]  p r e v i o u s ly  noted  t h is 

f a ct 

f or 

the  case  when 

I/O  d e s c r i p t i o ns 

specify 

f i n i te 

f u n c t i o n s,  and  remarked 

t h at 

the  proof  involves 

the  Recursion  Theorem. 

I 

formulated  Theorem  1 

independently  and  proved 

i t, 

in  o u t l i n e,  as 

f o l l o w s.  The  negation  of 

the 

theorem  allows 

the  c o n s t r u c t i on  of  a 

program  which  enumerates  d e s c r i p t i o ns  and 

corresponding  minimal  programs  u n t il 

it 

f i n ds 

a  minimal  program 

longer 

than 

i t s e l f; 

it 

then 

simulates 

t h at  program,  and  c o n t r a d i c t i on 

r e s u l t s. 

The  p o s s i b i l i ty  of  a  program 

measuring 

i ts  own  length  and 

then  performing 

other  a r b i t r a ry  c a l c u l a t i o ns 

f o l l o ws 

from 

the 

existence  of  a  r e c u r s i ve  f u n c t i on  g  such  t h at 

516 

be  proved  from  the  S-m-n  Theorem  and  the 

Recursion  Theorem. 

To  demonstrate  the  u n s o l v a b i l i ty  of  a 

For  example,  suppose  the  minimal  programs  are 

required 

to  operate  w i t h in  a  c e r t a in  bound  on 

the  computational  complexity,  apart  from  an 

program  m i n i m i z a t i on  problem 

(for  a  u n i v e r s al 

a r b i t r a ry  a d d i t i ve  constant. 

Then 

it 

is  clear 

machine), 

it 

is 

t h e r e f o re  s u f f i c i e nt 

to  show 

t h at  the  proof  of  Theorem  1 

is  applicable 

t h at 

the  d e s c r i p t i o ns  concerned 

include  an 

w i t h o ut  change. 

e f f e c t i v e ly  enumerable, 

i n f i n i t e ly  diverse 

set  of 

I/O  d e s c r i p t i o n s. 

This 

i m p l i e s, 

f or 

example, 

t h at 

the  program  minimization 

problem 

f or 

the  s i n g l e t on 

f u n c t i o n s, 

f or 

the 

f i n i te  d e c i s i on 

f u n c t i o n s,  and  even  f or  the 

d e c i s i on 

f u n c t i o ns  of  c a r d i n a l i ty  2 

is 

These  u n s o l v a b i l i ty  r e s u l ts  do  not  mean 

t h at  a ll 

i n t e r e s t i ng  program  minimization 

problems  are  e n t i r e ly  beyond  the  reach  of 

mechanical  procedures,  as  Theorem  3  w i ll  show. 

The 

f o l l o w i ng  d e f i n i t i o ns  generalize 

the 

concept  of  l i m i t i ng  recursion 

introduced  bv 

unsolvable 

2 

,  whenever  the 

length  measure 

is 

Gold 

[ 1 ]. 

r e c u r s i v e. 

Pager 

[9]  has  shown 

t h at  the 

last-mentioned 

problem  is  unsolvable  even  when  the  length 

measure 

is  not  r e c u r s i v e. 

Further,  he 

established 

the  s u r p r i s i ng 

f a ct 

t h at 

the 

m i n i m i z a t i on  problem 

is  unsolvable 

f or  a 

c e r t a in 

f i n i t e ly  diverse  set  of  d e c i s i on 

f u n c t i o n s, 

regardless  of 

the 

length  measure 

employed 

[ 8 ]. 

In  view  of  Pager's  r e s u l ts 

it  may  be 

asked  whether 

the  requirement 

t h at 

the 

length 

measure  be  r e c u r s i ve 

is  superfluous 

in 

Theorem  1. 

The  answer  is  no 

(although  the 

requirement  can  be  weakened  somewhat).  To 

prove 

t h i s, 

it 

is  only  necessary 

to  specify 

some  sequence  of 

f i n i te  decision 

functions 

such  t h at  any  program  is  a  program  f or  at 

most  one  of  these  f u n c t i o n s,  plus  an 

a r b i t r a ry  procedure 

f or  o b t a i n i ng  a 

p a r t i c u l ar  program  f or  each 

f u n c t i on 

in  the 

sequence; 

then 

the 

length  measure  can  r e a d i ly 

be  defined 

to  guarantee  the  m i n i m a l i ty  of 

these  p a r t i c u l ar  programs. 

It 

is 

i n t e r e s t i ng 

to  note 

t h at  Theorem  1 

s t i ll  holds 

f or  c e r t a in  non-1/0  d e s c r i p t i o n s. 

understood) 

if 

there 

is  a  predicate  P  k - l i m i t i nq 

decidable  on  AxN  such  t h at  f or  Sea,  P(6,x) 

holds 

i ff  

A  set  of 

integers 

is  k - l i m i t i ng 

r . e. 

if 

it 

is  empty  or 

the  range  of  a 

f u n c t i on 

5 

k - l i m i t i ng  r e c u r s i ve  on  N. 
recursive  is  the  same  as  r e c u r s i v e,  and  1-
l i m i t i ng  recursive 
r e c u r s i v e. 

is  abbreviated  as 

O - l i m i t i ng 

l i m i t i ng 

Gold 

(also  Putnam  [10 J)  has  shown  t h at 

517 

so 

t h at  g 

is 

( k + 1 ) - l i m i t i ng  r e c u r s i v e. 

Roughly  speaking,  Theorem  3  s t a t es  t h at 

f i n d i ng  minimal  programs 

is  no  more  d i f f i c u lt 

than  enumerating  programs 

in  order  of  non-

decreasing 

length  or  deciding  whether  a  given 

program  r e a l i z es  a  given  d e s c r i p t i on 

Now 

if 

the  set  of 

indices  of 

the  minimal 

(whichever 

is  h a r d e r ),  where 

the  " d i f f i c u l t y" 

programs  r e a l i z i ng  6 

is  expressed  by 

i ts 

of  a  k - l i m i t i ng  r e c u r s i ve 

f u n c t i o n al 

is  k. 

canonical 

index 

Theorem  3.  Given: 

a  programmable  machine 

M,  a  length  measure  such  t h at  programs  are  k-

l i m i t i ng 

r . e. 

in  order  of  nondecreasing 

l e n g t h,  and  a  set  A  of  r e a l i z a b l e,  u n i f o r m ly 

k - l i m i t i ng  decidable  program  d e s c r i p t i o n s. 

is 

where  Cp 
w i th  P  defined  as 

in  Theorem  3, 

then 

the  c h a r a c t e r i s t ic 

f u n c t i on  of  P, 

Then  the  program  m i n i m i z a t i on  problem  f or 

a p p l i c a t i on  of  Lemma  2  shows 

i  . 

to  be  k-

A 

is  k - l i m i t i ng  r e c u r s i v e ly  s o l v a b l e. 

l i m i t i ng  r e c u r s i ve  on 

Proof: 

Since  programs  are  k - l i m i t i ng  r . e. 

Note 

t h at  because  of 

the  assumption 

in 

in  order  of  nondecreasing 

l e n g t h, 

there 

is  a 

Theorem  4 

t h at 

the 

length  measure 

is  k-

k - l i m i t i ng  r e c u r s i ve 

f u n c t i on 

f  which  maps  N 

l i m i t i ng  r e c u r s i v e.  Theorem  3  cannot  be 

regarded  as  a  consequence  of  Theorem  4. 

Note  also 

t h at  any 

( k - 1 ) - l i m i t i ng  r e c u r s i ve 

length  measure  s a t i s f i es 

the  c o n d i t i o ns  of 

Theorem  4 

(by  Theorem  2 ). 

Theorems  3  and  4  are  the  main  r e s u l ts  of 

t h is  paper. 

The  remaining 

theorems 

i l l u s t r a te 

t h e ir  a p p l i c a t i o n. 

Theorem  5. 

For  any  r e c u r s i ve 

length 

measure, 

the  problem  of 

f i n d i ng  a ll  minimal 

programs 

f or 

f i n i te  programmable 

f u n c t i o ns 

is 

l i m i t i ng  r e c u r s i ve 

(each 

f i n i te 

f u n c t i on 

is  assumed  to  be  s p e c i f i ed  by  a  program 

d e s c r i p t i on  which 

l i s ts 

the  argument-value 

p a i rs  of 

the 

f u n c t i on 

in  any  o r d e r ). 

Theorem  4.  Given: 

a  k - l i m i t i ng  r e c u r s i ve 

length  measure  such 

t h at  programs  are  k-

in  order  of  non-decreasing 

l i m i t i ng  r . e. 
l e n g th  and  a  set  A  of  r e a l i z a b l e,  u n i f o r m ly 
k - l i m i t i ng  decidable  program  d e s c r i p t i o n s. 

Then 

the  problem  of 

f i n d i ng  a ll  minimal 

programs  r e a l i z i ng  any  6eA 

is  k - l i m i t i ng 

r e c u r s i v e ly  s o l v a b l e. 

C l e a r ly  Q 

is  decidable  and 

r e p e t i t i o n ). 

f i n d i ng  a ll  minimal  programs 

f or  any 

f i n i te 

f u n c t i on 

is 

l i m i t i ng  r e c u r s i v e. 

Theorem  6.  Given  a  r e c u r s i ve  length 

Theorem  7.  For  any  M  and  any  l i m i t i ng 

recursive  length  measure, 

the  problem  of 

f i n d i ng  minimal  programs 

f or 

functions 

programmable  on  M  is  2 - l i m i t i ng  r e c u r s i ve 

(as 

in  Theorem  6, 

the  problem 

is 

i n t e r p r e t ed  in 

measure  and  a  machine  M  which  computes  t o t al 

terms  of  program  d e s c r i p t i o n s,  where  any 

f u n c t i o ns  o n l y, 

the  problem  of 

f i n d i ng 

d e s c r i p t i on 

l i s ts 

the  argument-value  p a i rs  of 

minimal  programs 

f or 

functions  programmable 

a  programmable 

f u n c t i on  in  any  o r d e r ). 

on  M  is 

l i m i t i ng  r e c u r s i ve  (each  programmable 

f u n c t i on  is  assumed  to  be  s p e c i f i ed  by  a 

program  d e s c r i p t i on  which 

l i s ts 

the  argument-

value  p a i rs  of 

the 

f u n c t i on 

in  any  o r d e r ). 

Gold  had  already  shown  t h at  the  problem 

of 

f i n d i ng  any  programs 

{not  necessarily 

minimal) 

f or  members  of  a  r . e,  class  of 

t o t al 

f u n c t i o ns 
[2] 

l i m i t i ng  r e c u r s i v e,  and  Feldman 
remarked  t h at  t h is  can  be  extended  in  an 

is 

e 

obvious  way 

to 

f i n d i ng  minimal  programs 

when  programs  are  r . e. 

in  order  of  non-

decreasing  l e n g t h.  Theorem  6  strengthens 

t h is  r e s u lt  s l i g h t l y,  as 

there  are  r e c u r s i ve 

length  measures 

f or  which  programs  are  not 

r . e. 

in  order  of  nondecreasing 

length 

( e . g ., 

d e f i ne 

so  t h at  the  sequence 

it 

t h at 

Note 
the  problem  is  not 

is  known 

t h at 
r e c u r s i v e. 

from 

the  work  of  Gold 

in  general 

l i m i t i ng 

to 

The 

theorem 

is  r e a d i ly  generalized 
descriptions  which  prescribe  divergent 
computations 
minimization  problem  remains  2 - l i m i t i ng 
r e c u r s i v e. 
4.  Remarks  on  Induction  and  I t e r a t ed  L i m i t i ng 

f or  some  i n p u t s. 

The 

Recursion 
Deduction 

is  concerned  w i th 

the  d e r i v a t i on 

enumerates  a  r . e .,  nonrecursive  set  without 

of  p a r t i c u l ar  conseauences 

from  oeneral 

521 

premises,  w h i le 

i n d u c t i on 

the  i ' th  t h i n k er  T. 

regards  as  h is  best 

proceeds 

in  the  opposite  d i r e c t i o n. 

The 

guess 

the  s h o r t e st  program 

( if  any)  he  has 

problem  of  f i n d i ng  an  a l g o r i t hm 

{minimal  or 

been  able 

to  f i nd  which, 

in 

the 

time 

otherwise) 

f or  a  f u n c t i o n,  a f t er 

i n s p e c t i on 

of  some  but  not  a ll  values  of 

the 

f u n c t i o n, 

is 

c l e a r ly  of 

the 

i n d u c t i ve 

t y p e: 

the  complete 

a v a i l a b l e,  has  given  c o r r e ct  outputs 
YO,Y1
i n p u ts 
a  c o r r e ct  output 

f or  any  other  argument 

a n (*  e i t h er  no  output  or 

 

f or 

a l g o r i t hm  proposed  on 

the  basis  of 

incomplete 

t e s t e d. 

It 

is  c l e ar 

t h at  each 

t h i n k er  w i ll 

i n f o r m a t i on  expresses  a  g e n e r a l i z a t i on  about 

e v e n t u a l ly  be  guessing  a  program  f or  a  subset 

the 

f u n c t i on  sampled.  N o n - t r i v i al 

i n d u c t i ve 

of  $; 

f u r t h e r m o r e,  a ll  but  a 

f i n i te  number  of 

problems  are 

i n h e r e n t ly  "unsolvable" 

in 

the 

the  t h i n k e rs  w i ll  be  guessing  programs  f or  <j> 

sense  t h at  no  t e r m i n a t i ng  procedure  e x i s ts 

e v e n t u a l l y. 

In 

t h is 

i t e r a t ed 

l i m i t i ng  sense 

f or  generating  " c o r r e c t"  g e n e r a l i z a t i o n s;  any 

the  expanding  community  s u c c e s s f u l ly 

u n v e r i f i ed  consequence  of  a  proposed 

i d e n t i f i es  *.  Of  course  there 

is  no  s t r a t e gy 

g e n e r a l i z a t i on  may  t u rn  out 

to  be 

in  e r r o r. 

e f f e c t i ve 

in 

the 

l i m it 

f or  deciding 

in  general 

This  motivated  Gold's  d e f i n i t i on  of 

l i m i t i ng 

which  t h i n k e rs  are  guessing  programs 

f or  $  at 

r e c u r s i ve  predicates  and 

f u n c t i o n a l s,  which 

any  t i m e. 

To  i n t e r p r et  t h i r d - o r d er 

l i m it 

are  more  powerful 

than 

t h e ir  n o n - l i m i t i ng 

processes,  one  might  envisage  a  growing 

c o u n t e r p a r t s.  He  noted  t h at  a  " t h i n k e r" 

number  of  expanding  communities  of 

the  above 

employing  a  procedure 

f or 

f u n c t i on 

(or  " b l a c k-

t y p e,  each  committed  to  a  d i s t i n ct  value  of  a 

box") 

i d e n t i f i c a t i on 

in 

the 

l i m it  and  using 

c e r t a in  parameter.  At  most 

f i n i t e ly  many  of 

the  c u r r e nt  guess  of  a 

f u n c t i o n 's 

i d e n t i ty  as 

the  unbounded  communities  would  in,, general 

a  basis 

f or  g o a l - d i r e c t ed  a c t i v i ty  would  be 

be  " u n s u c c e s s f u l ". 

S i m i l a r ly  s t i ll  h i g h e r-

a c t i ng  on  c o r r e ct 

i n f o r m a t i on  e v e n t u a l l y. 

order  processes  could  be 

i n t e r p r e t e d. 

In  t h is  sense, 

t h e r e f o r e,  some  unsolvable 

Acknow1edgement 

problems  are  w i t h in 

the  reach  of  mechanical 

procedures, 

The  most  general 

f u n c t i on 

i d e n t i f i c a t i on  problem,  however, 

is  2 - l i m i t i ng 

r e c u r s i v e.  Can  any  mechanical  system  be 

conceived  which 

in  some  sense  "solves"  a  2-

l i m i t i ng 

r e c u r s i ve  problem?  Not 

if  a t t e n t i on 

is  r e s t r i c t ed 

to  a  s i n g le  " t h i n k e r"  generating 

a  s i n g le  sequence  of  guesses;  however,  suppose 

t h at  instead  of  a  s i n g le  t h i n k e r,  each  of  an 

ever  growing  number  of  such 

t h i n k e rs  TD, T . , . .. 

w i th  u n i v e r s al  computational  power  observes 

the  non-terminating  sequence 

<Y0'Z0>,<Y1Z1>,......Which 
p a r t i al  r e c u r s i ve 

enumerates  some 
time 

f u n c t i on  O.  At  any 

I  am  indebted 

to  C.G.  Morgan 

f or  several 

s t i m u l a t i ng  and  h e l p f ul  discussions  and 

to 

J.R.  Sampson 

f or  h is  many  useful  comments  on 

the  manuscript. 

I . N.  Chen's  help  on  some 

aspects  of 

the  paper 

is  also  g r a t e f u l ly 

acknowledged.  The  research  was  conducted 

under  a  N a t i o n al  Research  Council  postdoctorate 

f e l l o w s h i p. 

Footnotes 
i 
A  code 

i n to 

t o t al 

f u n c t i o ns  would  also  be 

used 

f or  a  mixture  of 

f i n i te  and 

i n f i n i te 

d e s c r i p t i o n s;  one  d i g i t,  say  0,  would  be 

reserved  as 

t e r m i n a t or  and  a ll 

f u n c t i on  values 

corresponding  tp  p o i n ts  beyond  the  end  of  a 

Memo  AI-93 

(1969);  also  I n f.  and  Control 

f i n i te  d e s c r i p t i on  would  be  set  to  0. 
2 

2_0,  244-262  (1972)  . 

For 

the 

f i n i te  d e c i s i on 

f u n c t i o n s,  note 

t h at 

3.  R.  Solomonoff,  "A  Formal  Theory  of 

the 

f u n c t i o ns  computed  w i th  any 

f i n i te  set  of 

programs  can  be  diagonalized  to  y i e ld  a  f i n i te 

Inductive  I n f e r e n c e ," 
(1964), 
1-22,  224-254 

I n f.  and  Control  7, 

d e c i s i on  f u n c t i on  which  requires  a  program 

4.  G.  C h a i t i n,  "On  the  D i f f i c u l ty  of 

not  in  the  given  s e t. 

To  prove  i n f i n i te 

Computations," 

IEEE  Trans. 

I n f.  Theory 

d i v e r s i ty 

f or 

the  2-element  decision 

f u n c t i o n s, 

IT-16,  5-9 

(1970). 

it 

is  s u f f i c i e nt 

to  show 

t h at  no  set  of  n 

5.  D.G.  W i l l i s, 

"Computational  Complexity 

programs  can  include  a  program  f or  each  2-

element  d e c i s i on  f u n c t i on  whose  arguments  are 

and  P r o b a b i l i ty  Constructions,"  J.  Assoc. 
Comp.  Mach.  17,  241-259  (1970). 

in  a  f i x ed  set  of  2 

i n t e g e r s;  but 

f or 

t h is 

6.  A.N.  Kolmogorov,  "Three  Approaches 

to  the 

many  arguments  at  l e a st  2  of  the  programs 

q u a n t i t a t i ve  D e f i n i t i on  of 

I n f o r m a t i o n ," 

must  g i ve 

i d e n t i c al  r e s u l ts 

{ if  any),  so  t h at 

Inform.  Transmission  1,  3-11 

(1965);  also 

I n t.  J.  Comp.  Math  2,  157-168 

(1968). 

7.  P.  M a r t i n - L o f, 

"The  D e f i n i t i on  of  Random 

Sequences," 

I n f.  and  Control  9_,  602-619 

(1966). 

8.  D.  Pager, 

"On  the  Problem  of  Finding 

Minimal  Programs 

f or  Tables", 

I n f.  and 

Control  14,  550-554 

(1969)  . 

9.  D.  Pager,  "Further  Results  on  the  Problem 

of  Finding 

the  Shortest  Program  f or  a 

Decision  Table,"  presented  at  Symposium 

on  Computational  Complexity,  Oct.  25-26, 

1971;  abstracted  in  SIGACT  News,  No.  13 

(Dec.  1971)  . 

10.  H.  Putnam,  " T r i al  and  Error  Predicates 

and 

the  S o l u t i on  of  a  Problem  of 

Mostowski,"  J.  Symb.  Logic  30,  49-57 

(1965). 

two  unsymmetric  d e c i s i on 
3 
Functions  are  regarded  as  a  special  case  of 

functions  are  missed. 

f u n c t i o n a l s. 

The  equivalence 

f o l l o ws 

from  the  f a ct 

t h at 

F(6) 

is 

independent  of  n . , . . . , n ,,  so  t h at 

the 

l i m it  of  G  must  e x i s t. 

i t e r a t ed 
5 
This  d i f f e rs 

from  Gold's  d e f i n i t i o n,  which 

expresses 

l i m i t i ng  r e c u r s i ve  enumerability 

in 

terms  of 

l i m i t i ng  s e m i - d e c i d a b i l i t y. 

However, 

the  d e f i n i t i o ns  can  be  shown  to  be 

equivalent 

( f or  k = l ). 

A c t u a l l y,  Feldman  was  concerned  w i th  "occams 

enumerations"  of 

formal  grammars,  but  the 

problem  of 

f i n d i ng  minimal  grammars 

f or 

languages 

is  e s s e n t i a l ly 

the  same  as 

t h at  of 

f i n d i ng  minimal  programs 

f or  decision 

f u n c t i o n s. 

References 
1.  E.M.  Gold, 

" L i m i t i ng  Recursion,"  J. 

Symb.  Logic  30,  28-48 

(1965). 

2. 

J.  Feldman, 

"Some  D e c i d a b i l i ty  Results 

on  Grammatical  Inference  and  Complexity," 

Stanford  A r t i f i c i al 

I n t e l l i g e n ce  P r o j e ct 

