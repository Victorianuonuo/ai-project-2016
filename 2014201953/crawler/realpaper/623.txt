Assertion Application in Theorem Proving and Proof Planning 

Quoc Bao Vo1, Christoph Benzmiiller1 and Serge Autexier2 

XFR Informatik, Universitat des Saarlandes, 66041 Saarbriicken, Germany 

{bao|chris}@ags. u ni - sb. de 

2DFKI GmbH, 66123 Saarbriicken, Germany 

autexier@dfki.de 

Our work addresses assertion retrieval and application in theorem 
proving systems or proof planning systems for classical first-order 
logic.  We propose a distributed mediator M between a mathemat(cid:173)
ical knowledge base KB and a theorem proving system TP which 
is independent of the particular proof and knowledge representation 
formats of TP and KB and which applies generalized resolution in 
order to analyze the logical consequences of arbitrary assertions for 
a proof context at hand. We discuss the connection to proof planning 
and motivate an application in a project aiming at a tutorial dialogue 
system for mathematics. This paper is a short version of [9]. 

1  Proof planning at the assertion level 
Due to Huang  [6],  the notion of assertion comprises mathe(cid:173)
matical knowledge from a mathematical knowledge base KB 
such as axioms, definitions, and theorems. Huang argues that 
an assertion-based representation, i.e.  assertion level, is just 
the right level for machine generated proofs to be transformed 
into before being presented to (human) users.  In this paper we 
argue further that the assertion level can also serve as one of 
those  levels  of granularity  on  which  knowledge-based proof 
planning should be based [7]. 

We  are  convinced  that  by planning  directly  on  the  asser(cid:173)
tion level it will be possible to overcome at least some of the 
identified  limitations and problems of proof planning as dis(cid:173)
cussed in [3; 5] — in particular, those, that are caused by an 
unfortunate intertwining of proof planning and calculus level 
theorem proving. The perspective we therefore motivate is to 
consider the assertion level  as a well chosen borderline be(cid:173)
tween  proof planning  and  machine  oriented  methods.  De(cid:173)
termining  the  logical  consequences  of assertions  in  a proof 
context is the task of machine oriented methods (in our case 
generalized resolution).  The tasks on top of this  level — for 
instance, an domain dependent containment of the initial as(cid:173)
sertions to be considered, the heuristic selection of the most 
promising among the computed logical consequences, the in(cid:173)
troduction, constraining and handling of meta-variables, etc. 
— belong to the scope of domain specific proof planning. 

In  summary,  instead  of reconstructing  natural  deduction 
(ND) proofs to obtain assertion level proofs as suggested by 
Huang, we propose to directly plan for proofs at the assertion 
level.  This should improve the quality  of the  resulted proof 
plans and also facilitate better user interaction. 

The  development  of our  ideas  revolves  around  the  math(cid:173)
ematical assistant system  O M E GA  [8]  and the current initia(cid:173)

tive  in  this project to  rebuild the  system on top of the proof 
representation framework in  [1; 2].  We furthermore employ 
OMEGA'S  agent-based  search  mechanism  OANTS  [4]  for  a 
distributed  modeling  of our  framework  and  we  motivate  an 
application  of the  approach  in  a project aiming at a tutorial 
dialogue system for mathematics. 

2  Assertion Application via Generalized 

Resolution 

Depending on the proof context there may be several ways in 
which an assertion can be used. For instance, the assertion 

Traditional theorem provers or proof planners that operate 
on  calculus  level  can  only  achieve  such  conclusions  after a 
number of proof steps  to  eliminate  the  quantifiers  and  other 
connectives such as implication and conjunction. We propose 
an  algorithm  Assertion  Application  based  on  a  generalized 
form of resolution in order to achieve such conclusions in one 
step for arbitrary assertions and proof contexts at hand.  The 
algorithm, which is described in [9], is based on: 

1.  The representation  of formulas as  signed  formula trees 
(SFT); see also [ 1; 2].  This way we achieve access to 
the literals of the formulas without breaking them apart. 
2.  The  lifting  of the  resolution  idea  to  directly  operate  on 
complementary and unifiable literals in  SFTs instead of 
working on (unintuitive) normal forms. 

3.  The exhaustive application of (2) to the SFTs generated 

for the assertion and the formulas of the proof context. 

3  Modeling Assertion Agents 
In our implementation of mediator M we model assertion ap(cid:173)
plication  in  form  of distributed  search  processes  employing 
the O A N TS approach [4].  This agent based formalism is the 
driving force behind distributed proof search in OMEGA. 

The general application scenario we have in mind is a the(cid:173)
orem  prover TP  that  is  connected  to  an  independent  math(cid:173)
ematical  knowledge base  KB.  TP  is  focusing a proof task  r 
consisting of the formula TP has to prove, viz. the theorem H, 

POSTER  PAPERS 

1343 

and a set of assumptions it can use to prove H.  TP can deter(cid:173)
mine the relevant parts, i.e. the related theories 
from  KB 
and hand them over to our assertion module M. The task of M 
is to compute with respect to proof task r all possible logical 
taken  from  Th. 
consequences of the available assertions 

We propose to create for each assertion 
of a generic assertion agent 

one associated 
The generic 
instance 
is based on our algorithm AssertionAppli-
assertion agent 
cation.  Note that this algorithm  only depends on the  SFT of 
the focused assertion and a further set of SFTs for the proof 
context, and both are specified as parameters of AssertionAp-
plication.  Each  assertion  agent instance 
computes and 
for proof task  r to our 
suggest the logical consequences  of 
module M which passes them further to TP. 

Depending on the size of KB there could be too many ap(cid:173)
plicable  assertions  passed to  M and  also  too  many  ways  an 
assertion  can  be  applied.  One  possibility  is  to  restrict  the 
search space by imposing prerequisites for assertion retrieval. 
For instance, a proof planner may employ its domain specific 
meta knowledge to formulate and pass respective context sen(cid:173)
sitive syntactical  filter  criteria to the mediator for an efficient 
preselection by syntactic means. 

Proof planning,  however,  has  developed  more  sophisti(cid:173)
cated  ways  to  guide  and  constrain  possible  the  possible  in(cid:173)
stantiations and applications  of assertions.  The  investigation 
on how these techniques can optimally be employed on  top 
of our assertion application  module M are  further work. 

4  An application:  The  D I A L OG project 
Our approach to assertion application is motivated by an ap(cid:173)
plication  in  the  D I A L OG  project as part of the Collaborative 
Research  Center  on  Resource  adaptive  cognitive processes 
at  Saarland  University.  The  goal  of this  research  project  is 
(i)  to  empirically  investigate  flexible  dialogue  management 
strategies  in  complex  mathematical  tutoring  dialogues,  and 
(ii)  to  develop  an  experimental  prototype  system  gradually 
embodying the empirical  findings.  The experimental system 
will  engage  in  a  dialogue  in  natural  language  (and  perhaps 
other modes of communication) and help a student to under(cid:173)
stand and produce mathematical  proofs.  It is  important that 
such a system is supported by a human oriented mathematical 
proof development environment and the O M E GA system with 
its  advanced proof presentation  and proof planning  facilities 
is a suitable answer to this requirement. 

The overall scenario for DIALOG  is:  A student user is first 
taking  an  interactive  course  on  some  mathematical  domain 
(e.g., naive set theory) within a web-based learning environ(cid:173)
ment.  When  finishing  some sections the student is asked by 
the  system to test his learning progress by actively applying 
the studied lesson material by performing an interactive proof 
exercise.  Since  the  learning  environment  is  equipped  with 
user monitoring and modeling facilities a user model is main(cid:173)
tained  and  dynamically  updated  containing  information  on 
the axioms, definitions,  and theorems (hence the assertions) 
the student has studied so far.  Also a tutor model is available 
for each exercise containing information on the mathematical 
material that should be employed and tested by it. 

In this scenario we expect the mathematical assistant sys(cid:173)

tem to be capable of (i) stepwise-interactive and/or (ii) auto(cid:173)
mated proof construction at a human oriented level of granu(cid:173)
larity for the proof exercise at hand using exactly the mathe(cid:173)
matical information specified in the (a) tutor model or (b) user 
model.  The proofs constructed  for (a)  reflect  what we want 
to  teach  and  the proofs  for (b)  what the  system  expects  the 
user to be capable of.  For interactive tutorial dialog the sup(cid:173)
port for a stepwise proof construction with the mathematical 
assistant system is of course important, while fully automati(cid:173)
cally generated proofs are needed to be able to also give away 
complete solutions or to  initially generate  a discourse  struc(cid:173)
ture for the dialog on the chosen exercise.  We want to stress 
that the user model  may be updated also during an exercise, 
hence the  set of relevant assertions  may  dynamically change 
during an interactive session. 

It is easy to motivate the design of our assertion application 
module for this scenario.  Its capabilities for assertion applica(cid:173)
tion for a dynamically varying set of assertions are crucial for 
the project. It is also essential that reasoning is facilitated at a 
human oriented level of granularity, since we do not want the 
user to puzzle  around with  the  peculiarities of,  for instance, 
logical derivations in sequent or natural deduction calculus. 

5  Conclusion 
Mediating  mathematical  knowledge  between  (web-based) 
mathematical knowledge bases, mathematical reasoning sys(cid:173)
tems and human users is a mathematical knowledge manage(cid:173)
ment task of increasing  importance.  We  sketched  a flexible 
and  distributed  solution  for  the  subtasks  of suggesting  the 
logical  consequences  of assertions  at  an  intuitive  reasoning 
level. 

References 
ll]  S. Autexier.  A proof-planning framework with explicit abstrac(cid:173)

tions based on indexed formulas. ENTCS, 58(2), 2001. 

[2]  S. Autexier.  Hierarchical Contextual Reasoning.  PhD Thesis, 

Saarland University, forthcoming. 

[3]  C. Benzmiiller,  A. Meier, E. Melis,  M.  Pollet,  and V.  Sorgc. 
Proof planning: A fresh start? In Proc. of the IJCAR 200 J 
Workshop: Future Directions in Automated Reasoning, Siena, 
Italy, 2001. 

[4]  C.  Benzmiiller  and  V.  Sorgc.  OANTS  -  an  open  approach 
at combining interactive and automated theorem proving.  In 
M. Kerber and M. Kohlhase, editors, Symbolic Computation 
and Automated Reasoning, A.K.Pcters, 2000. 

[5]  A. Bundy.  A critique of proof planning.  In A. C. Kakas and 
F. Sadri, editors, Computational Logic. Logic Programming 
and Beyond, LNCS 2408, Springer, 2002. 

[6]  X.  Huang.  Reconstructing  proofs  at  the  assertion  level, 
newblock  In  A.  Bundy,  editor,  Proc.  CADE-12,  LNAI  814, 
Springer, 1994. 

[7]  E. Melis and J. Siekmann.  Knowledge-based proof planning. 

Articial Intelligence Journal, 115(1):65~105, 1999. 

[8]  J.  Siekmann  et  al.  Proof development  with  OMEGA. 

In 
A. Voronkov,  editor, Proc.  CADE-18, LNAI 2392,  Springer, 
2002. 

[9]  Q. B. Vo, C. Benzmiiller, and S. Autexier.  An approach to as(cid:173)
sertion application via generalized resolution.  Seki Report SR-
03-01,  Saarland  University,  February  2003.  http://www.ags. 
u n i - s b . d e / " o m e g a / p u b / p o e t s c r i p t / S R - 03 - 0 1. ps. gz 

1344 

POSTER  PAPERS 

