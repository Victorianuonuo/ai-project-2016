Recycling Computed Answers in Rewrite Systems for Abduction 

http://www.cs.ust. flin 

Department of Computer Science 

Fangzhen Lin* 

Hong Kong University of Science and Technolog 

Clear Water Bay, Kowloon, Hong Kong 

Jia-Huai You 
http://www.cs.ualberta. 
Department of Computer Science 

you 

University of Alberta 

Edmonton, Alberta, Canada 

Abstract 

In rule-based systems, goal-oriented computations 
correspond naturally to the possible ways that an 
observation may be explained.  In some applica(cid:173)
tions, we need to compute explanations for a series 
of observations with the same domain.  The ques(cid:173)
tion whether previously computed answers can be 
recycled arises.  A yes answer could result in sub(cid:173)
stantial savings of repeated computations. For sys(cid:173)
tems based on classic logic, the answer is yes. For 
nonmonotonic systems however, one tends to be(cid:173)
lieve that the answer should be no, since recycling 
is a form of adding information.  In this paper, we 
show that computed answers can always be recy(cid:173)
cled,  in a nontrivial way,  for the class of rewrite 
procedures proposed earlier in [Lin and You, 2001] 
for logic programs with negation. We present some 
experimental results on an encoding of a logistics 
domain. 

Introduction 

1 
Logic programming with answer sets [Gelfond and Lifschitz, 
1988] or partial stable models [Przymusinski, 1990] has been 
adopted  as  a  framework  for  abduction,  and  a  number of 
formalisms and top-down query answering procedures have 
been proposed [Dung,  1991; Eshghi and Kowalski,  1989; 
Kakas and Mancarella, 1990; Kakas et al, 2000; Lin and You, 
2001; Satoh and Iwayama, 1992]. 

The question we shall address in this paper is the following. 
With a sound and complete procedure for abduction, suppose 
we have computed explanations (conveniently represented as 
a disjunction) Es = E1 V... V En for observation q. Suppose 
also that in the course of computing explanations for another 
observation p, we run into q again.  Now, we may use the 
proofs Es for q without actually proving q again. The ques(cid:173)
tion is this: will the use of the proofs Es for q in the proof for 
p preserve the soundness and completeness of the procedure? 
In this paper, we answer this question positively, but in a 
nontrivial way, for the class of rewrite procedures proposed 

*This author's work was supported in part by HK RGC CERG 

HKUST6205/02E. 

in [Lin and You, 2001]. The main result is a theorem (Theo(cid:173)
rem 4.6) that says recycling preserves the soundness and com(cid:173)
pleteness. 

The class of rewrite procedures proposed in [Lin and You, 
2001] is based on the idea of abduction as confluent and 
terminating rewriting.  These systems are called canonical 
systems in the literature of rewrite systems [Dershowitz and 
Jouannaud, 1990]. The confluence and termination properties 
guarantee that rewriting terminates at a unique normal form 
independent of the order of rewriting.  Thus, each particular 
strategy of rewriting yields a rewrite procedure. 

The general  idea of recycling  is  not new.  Recycling  in 
systems  based  on  classic  logic  is  always  possible,  since 
inferences  in  these  systems  can  be  viewed  as  transform(cid:173)
ing  a  logic  theory  to  a  logically  equivalent  one. 
In  dy(cid:173)
namic  programming,  it  is  the  use  of the  answers  for pre(cid:173)
viously  computed  subgoals  that  reduces the computational 
complexity. 
In  some  game  playing  programs,  for  ex(cid:173)
ample  in  the  world  champion  checker  program  Shinook 
(www.cs.ualberta.ca/~chinook), the endgame database stores 
the computed results for endgame situations which can be ref(cid:173)
erenced in real-time efficiently. 

However,  the  problem  of  recycling  in  a  nonmonotonic 
proof system has rarely been investigated. We note that recy(cid:173)
cling is to use previous proofs. This differs from adding con(cid:173)
sequences. For example, it is known that the semantics based 
on answer sets or (maximal) partial stable models do not pos(cid:173)
sess the cautious nonmonotonicity property. That is, adding a 
consequence of a program could gain additional models thus 
losing some consequences. The following example is due to 
Dix 11991]: 

(1) 

P has only one answer set, 
When augmented with the rule 
ond  answer  set,  and losesas a consequence. 

Thus, c is a consequence. 
the program gains a sec(cid:173)

The next section defines logic program semantics.  Sec(cid:173)
tion 3 reviews the rewriting framework.  Then in Section 4 
we formulate rewrite systems with computed rules and prove 
that recycling preserves soundness and completeness.  Sec(cid:173)
tion 5 extends this result to rewrite systems with abduction, 
and Section 6 reports some experimental results. 

NONMONOTONIC REASONING 

879 

2  Logic Program Semantics 
A rule is of the form 

formula resulted from rewriting 
Two central mecha(cid:173)
nisms in formalizing goal rewrite systems are rewrite chains 
and contexts. 

rules 

and 
are atoms of the underlying propositional 
not c1 are called default negations. A literal is 
A (normal) program is a fi(cid:173)

where 
language 
an atom  or its negation 
nite set of rules.  The completion of a program P, denoted 
Comp(P), is a set of equivalences:  for each atom 
if 
does not appear as the head of any rule in  P, 

Cornp(P); otherwise, 
Comp(P)  (with 
default negations replaced by the corresponding negative lit(cid:173)
erals) if there are exactly 
P with  as the 
head. We write T for Bi if Bi is empty. 

The  rewriting  system  of [Lin  and  You,  2001]  is  sound 
and complete w.r.t. the partial stable model semantics [Przy-
musinski, 1990]. A simple way to define partial stable models 
without even introducing 3-valued logic is by the so called al(cid:173)
ternating fixpoints [You and Yuan, 1995]. Let P be a program 
and S a set of default negations. Define a function over sets S 
of default negations: 
The re(cid:173)
lation 
is the standard propositional derivation relation with 
each default negation not  being treated as a named atom 
not 

A partial stable model M is defined by a fixpoint of the 
while satisfying 

function that applies Fp twice, 

in the following way:  for any atom 

and 

is undefined 
otherwise.  An answer set E is defined by a fixpoint S such 
that 
3  Goal Rewrite Systems 
We introduce goal rewrite systems as formulated in [Lin and 
You, 2001]. 

A goal  rewrite  system  is  a rewrite  system  that consists 
of  three  types  of  rewrite  rules:  (1)  Program  rules  from 
Comp(P)  for  literal  rewriting;  (2)  Simplification  rules  to 
transform and simplify goals; and (3) Loop rules for handling 
loops. 

A program rule is a completed definition 

Cornp(P) used from left to right:  can be rewritten to 
These are called 

and 

literal rewriting. 

A goal, also called a goal formula, is a formula which may 
involve  V and 
A goal resulted from a literal rewriting 
from another goal is called a derived goal. Like a formula, a 
goal may be transformed to another goal without changing its 
semantics. This is carried out by simplification rules. 

We assume that in all goals negation appears only in front 
of a literal.  This can be achieved by simple transformations 
using the following rules: for any formulas  and 

, 

3.1  Simplification rules 
The simplification rules constitute a nondeterministic trans(cid:173)
formation system formulated with a mechanism of loop han(cid:173)
dling  in  mind,  which  requires  keeping  track  of literal  se(cid:173)
quences 
is in the goal 

where 

each 

nition 

w h e r e T h e n,

•  Rewrite Chain: Suppose a literal  is written by its defi(cid:173)
 each literal 
in the derived goal is generated in order to prove 
A 
is then called a rewrite chain, 

This ancestor-descendant relation is denoted 
sequence 
abbreviated as 

•  Context: A rewrite chain 

records a set of literals 
for proving 
g. We will write 
and call C a context. 
A context will also be used to maintain consistency:  if 
can be proved via a conjunction, all of the conjuncts 
need be proved with contexts that are non-conflicting 
with each other.  For simplicity, we assume that when(cid:173)
ever 
is  generated,  it  is  automatically replaced  by 
T(C), where C is the set of literals on the corresponding 
rewrite chain, and 

is automatically replaced by 

Note that for any literal in a derived goal, the rewrite chain 
leading to it from a literal in the given goal is uniquely deter(cid:173)
mined. As an example, suppose the completion of a program 
Then, we 
has the definitions: 
get  a  rewrite  sequence, 
For the 
three literals in the last goal, we have rewrite chains from 

and 

' 

Simplification Rules: Let $ and <t>; be goal formulas, C be 
a context, and / a literal. 

SR3 merges two contexts if they contain no complemen(cid:173)
tary literals, otherwise SR4 makes it a failure to prove.  Re(cid:173)
peated applications of SR5 and SR5' can transform any goal 
formula to a disjunctive normal form (DNF). 
3.2  Loop rules 
After a literal / is rewritten, it is possible that at some later 
stage either / or / appears again in a goal on the same rewrite 
chain. Two rewrite rules are formulated to handle loops. 

-  S is called a positive loop 

-  S is called a negative loop 

atoms  and  each 

and 
are both 
is also an atom; 
are both 
and 
negative literals and each literal on 
is 
also negative: 

literal  on 

-  Otherwise, S is called an even loop. 

880 

NONMONOTONIC REASONING 

In all the cases above, is  called  loop literal. 

Loop Rules: 
LR1. 

an odd loop. 

LR2. 

an even loop. 

be a rewrite chain. 

is a positive loop or 

is a negative loop or 

A rewrite sequence is a sequence of zero or more rewrite 

steps 
denoted 
is an initial goal, and for each 0 
from 

by 

such that 

is obtained 

•  literal rewriting at a non-loop literal in 
•  applying a simplification rule to a subformula of 
•  applying a loop rule to a loop literal in 

or 

, or 

Example 3.2 For the program given in the Introduction, 
is proved but 
is not. This is shown by the following rewrite sequences: 

Figure 1: Recycling may generate extra proofs 

result. However, one can see that the existence of the rewrite 
step 

implies the existence of a different way to prove 

contradicting  that  was rewritten to F in R°. 

Before giving the next example, we introduce a different 
way to understand rewrite sequences. Since any goal formula 
can always be transformed to a DNF using the distributive 
rules SR5 and SR5,' and the order of rewriting does not mat(cid:173)
ter, we can view rewriting as generating a sequence of DNFs. 
Thus, a rewrite sequence in DNF from an initial goal 

3.3  Previous results 
In [Lin and You, 2001], it is shown that (1) a goal rewrite sys(cid:173)
tem is a canonical system, i.e., it confluent and terminating; 
(2) any goal rewrite system is sound and complete w.r.t. the 
partial stable model semantics; and (3) the rewriting frame(cid:173)
work can be extended for abduction in a relatively straight(cid:173)
forward manner. 
4  Goal Rewrite Systems with Computed Rules 
We first use two examples to illustrate the main technical re(cid:173)
sults of this section. 
Example  4.1  Given  a  rewrite  system  suppose we have 
rewrite sequence 
The failure is due to 
positive loop on a. We may recycle the computed answer by 
replacing the rewrite rule for  by the new rule, 
We thus get a new system, say R1. Suppose in trying to prove 

we have 

For any 

the d-tree for 

can be conveniently represented by derivation trees, or 
trees,  one  for  each  representing one possible way of prov(cid:173)
ing 
has  as its root node, 
wherein a branch from 
to a leaf node corresponds to a 
rewrite chain from g that eventually ends with an F or some 
T(C). As such a disjunct is a conjunction, a successful proof 
requires each branch to succeed and the union of all resulting 
contexts to be consistent. 

The next example is carefully constructed to illustrate that 
recycling may not yield the same answers as if no recycling 
were carried out.  In particular, one can sometimes get addi(cid:173)
tional answers. 
Example 4.2 Consider the program: 

In Fig. I, each d-tree consists of a single branch. The left 
two d-trees are expanded from goal p corresponding to the 
following rewrite sequence: 

where the last step makes use of the computed answer for 
The question arises as whether this way of using previ(cid:173)
ously computed results guarantees the soundness and com(cid:173)
pleteness. Theorem 4.6 to be proved later in this paper an(cid:173)
swers this question positively. To see it for this example, as(cid:173)
sume we have the following, successful proof in R° 

The next two d-trees are for goal g, corresponding to the 
rewrite sequence: 

where the termination is due the even loop on Had such 

sequence existed, recycling would have produced a wrong 

Now, we recycle the proof for p in the proof for g and com(cid:173)
pare it with the one without recycling. Clearly, the successful 

NONMONOTONIC  REASONING 

881 

(the fourth from the left) will still succeed as it 

d-tree for 
doesn 't involve any p. The focus is then on the d-tree in the 
middle, in particular, the node p in it; this d-tree fails when 
no recycling was performed. 

Since  p  is  previously  proved  with  context  recy(cid:173)
cling of this proof amounts to terminating  with a context 
which is the union of this context with the rewrite chain lead(cid:173)
ing to p (see the d-tree on the right).  But this results in 
successful proof that fails without recycling. 

Though recycling appears to have generated a wrong re(cid:173)

sult, one can verify that both generated contexts, 
and 
belong to the same partial stable model. 
Thus, recycling in this example didn 7 lead to an incorrect 
answer but generated redundant one. Theorem 4.6 shows 
that this is not incidental. Indeed, if p is true in a partial sta(cid:173)
ble model, by derivation (look at the d-tree in the middle), so 
must be c, and 

4.1  Rewrite systems with computed rules 
Given a goal rewrite system R,, we may denote a rewrite se(cid:173)
quence from a literal g by 
Definition 4.3  (Computed rule) 
Let R be a goal rewrite system in which literal p is rewritten 
to its normal form. The computed rule for p is defined as: If 
F, the computed rule for p is the rewrite rule F; 
then the computed rule for p is 

E. 

ifp 
the rewrite rule p 

For the purpose of recycling, a computed rule 

E  is 
meant to replace the existing literal rewrite rule for p.  If a 
computed rule is of the form 
F representing a failed 
derivation, it can be used directly as the literal rewrite rule for 
Otherwise, we must combine the contexts in E with the 

rewrite chain leading to  and keep only consistent ones. 
Recycling Rule: 
Let 
eral. Let G — 
be the computed rule for 
subset of 
is consistent. Then, the recycling rule for gn is defined as: 
RC. 

be a rewrite chain where gTl is a non-loop lit(cid:173)
be the 
G 

Further, let 
containing any 

such that 

, and 

g1 

An  important property  of provability  by  rewriting  is  the 
so-called loop rotation,  which is needed in order to prove 
the completeness of recycling; namely, a proof (a successful 
branch in a d-tree) terminated by a loop rule can be captured 
in rotated forms. 

To describe this property, we need the following notation 

about rewrite chains:  Any direct dependency relation 
and we allow a segment (which may 
may be denoted by 
be empty) of a rewrite chain to be denoted by a Greek letter 
such  as  and 
to denote 
to  via 
a rewrite chain from 
to mean a rewrite 
chain that begins with 
followed by the segment denoted by 
A rewrite chain may also be used to denote the set of the 

Thus, we may write 

be a rewrite system without computed rules. Let 

literals on it. 
Lemma 4.5 (loop rotation) 
Let 
be a d-tree for literal g that succeeds with context C. Suppose 
a branch of 
for any literal 
the same context C. 
Proof  A loop, 
literals, can always be rotated as 

Then, 
there is a proof of I that succeeds with 

where g and  are 

ends with 

In the sequel, a rewrite system includes the recycling rule 
as well as zero or more computed rules.  We note that the 
termination and confluence properties remain to hold for the 
extended systems. 

We are interested in the soundness and completeness of a 
series of rewrite systems, each of which recycles computed 
answers generated on  the previous one.  For this purpose, 
given a program P we use 
to denote the original goal 
rewrite system where literal rewrite rules are defined by the 
Clark  completion of P.  For all 
is defined in 
be the set of computed rules 
terms of 
(generated) on 
is 
the rewrite system obtained from Rl
P by replacing the rewrite 
rules for the literals in 
In the rest of this 
sectin, we will always refer to a fixed program P.  Thus we 
may drop the subscript P and write 

for the set of literals 

as follows: Let 

by those in 

Then, 

and so on, so that if n is a negative loop (or an even loop, 
resp.)  so is its rotated loop.  Rotation over a d-tree can be 
performed as follows: remove the top node n, and for any link 
from  the  top  node,  attach the  l i n k to  any occurrence 
of  The assumption of the existence of loop 
ensures 
that in every round of rotation there is at least one occurrence 
of the top node. (See Fig 2 for an illustration where rotation 
proceeds from left to right.)  It can be seen that the type of 
a loop is always preserved and the set of literals on the tree 
remains unchanged. 

4.2  Soundness and completeness of recycling 
Theorem 4.6 For any 

is sound and complete. 

We sketch how this can be proved. We can prove the claim 
by induction on 
the system without computed rules, is 
sound and complete [Lin and You, 20011. Now assume for all 

882 

NONMONOTONIC  REASONING 

with 

are sound and complete, and show that 

is also sound and complete. 

differs from that 

We only need to consider the situations where rewriting 
in 
 the set of literals 
whose computed rules are generated on . We can first carry 
out rewriting without rewriting the literals that are in 
In 
this case, rewriting from 
terminate at 
the same expression, which is either 

or a DNF, say 

in both 

and 

be

o

f

Each 

can be represented by a d-tree. 

For the soundness, we assume 

Let;; 

T(DS).  For any  D 
we need to show that 
there is a partial stable model M such that D  M.  Consider 
that generates D and suppose g is its root node. 
the d-tree 
We can show inductively in a bottom-up fashion that all the 
literals on 

belong to the same partial stable model. 

For the completeness, we can show that for any context 

generated in 
Then, 

is complete simply because 

. the same context will be generated in 
is complete. 
in 

and consider a proof of 

that goes 
through p.  In particular, consider a d-tree of this proof that 
contains p. Since each branch of this d-tree can be expanded 
and eventually terminated independent of others, for simplic(cid:173)
ity, we consider how a branch g • p in the d-tree is extended. 
the computed rule for p is used while in Rl it is not. 
In 
We only need to consider two cases in Rl: either g is proved 
via p and a previously computed rule, or the branch is termi(cid:173)
nated due to a loop.  Here, let us consider the latter only  In 
• p in R\ we may form a 
expanding the rewrite chain 
loop, say g - p- 
exactly the same loop 
occurs in rewriting p as the top goal in R1, so it is part of the 
computed rule for /;. Otherwise it is a loop that crosses over 
p, in the general form 

If the loop is in 

• 

where 
is the loop literal. As a special case of loop rotation 
over a branch (cf. Lemma 4.1), the same way of terminating 
a rewrite chain presents itself in proving /; as the top goal in 
R\ which is 

If the loop on n is a negative loop (or an even loop, resp.), so 
is 

Thus the same context will be generated in 

As given in the corollary below, if we only recycle failed 

proofs then exactly the same contexts will be generated. 
Corollary 4.7  Let R1 be 
puted  rule  is  of  the  form  Let g be a literal and E be 
normal form. Then, for any \ 

rewrite system where each com(cid:173)

goal is rewritten to a disjunction of conjunctions of abducible 
literals and 

where each 

is either  or an abducible literal, and 

is consistent for each z, then this result can be re(cid:173)

cycled. 

6  Experiments 
We have implemented a depth-first search rewrite procedure 
with branch and bound. The procedure can be used to com(cid:173)
pute explanations using a nonground program, under the con(cid:173)
dition that in each rule a variable that appears in the body 
must also appear in the head. When this condition is not sat(cid:173)
isfied, one only needs to instantiate those variables that only 
appear in the body of a rule.  This is a significant departure 
from the approaches that are based on ground computation 
where a function-free program is first instantiated to a ground 
program with which the intended models are then computed. 
To  check  the  effectiveness  of the  idea of recycling,  we 
tested our system on the logistics problem in iLin and You, 
2001 ]. This is a domain in which there is a truck and a pack(cid:173)
age. A package can be in or outside a truck, and a truck can 
be moved from one location to another. The problem is that 
given state constraints such as that the truck and the pack(cid:173)
age can each be at only one location at any given time, and 
that if the package is in the truck, then when the truck moves 
to a new location, so does the package, how we can derive a 
complete specification of the effects of the action of moving a 
truck from one location to another. Suppose that we have the 
following propositions: ta 
- the truck (package) is 
at location x initially; in - the package is in the truck initially; 
ta 
after performing the action of moving it from 
the package is in the truck after performing the action of mov(cid:173)
ing the truck from 
Then in [Lin and You, 20011, the 
problem is solved by computing the abduction of successor 
state propositions 
in terms 
of initial state propositions 
(abducibles) us(cid:173)
ing the following logic program (see ILin and You, 20011 for 
more details): 

the truck (package) is at location 

to 

to 

5  Recycling in Abductive Rewrite Systems 
As shown in [Lin and You, 20011, the rewriting framework 
can be extended to abduction in a straightforward way:  the 
only difference in the extended framework is that we do not 
apply the Clark completion to abducibles.  That is, once an 
abducible appears in a goal, it will remain there unless it is 
eliminated by the simplification rule SR2 or SR2'. In a sim(cid:173)
ilar way, the goal rewrite systems with computed rules in the 
previous section can be extended to abduction as well. Once a 

Here the variables are to be instantiated over a domain of 
locations.  For instance, given query pa(3,2,3), our system 
would compute its abduction as pa(3) V in, meaning that for 
it to be true, either the package was initially at 3 or it was 
inside the truck. 
Which subgoals to compute first?  If we want to compute 

NONMONOTONIC  REASONING 

883 

the abduction of all propositions, without the framework of 
recycling introduced here, the only way is to compute them 
one by one independently. With the idea of recycling, we can 
try to recycle previously computed results.  The question is 
then which goals to compute first. This question arises even 
if we just want to compute the abduction of a single goal: 
instead of computing it using the original program, it may 
sometimes be better if we first compute the abduction of some 
other goals and recycle the result. 

A simple solution is to find out the dependency relations 
among the propositions: a proposition p depends on q if ei(cid:173)
ther q is in the body of a rule whose head is p or inductively, 
there is another proposition r such that p depends on r, and r 
depends on q. 

For  our  program  above,  it  is  easy  to  see  that  among 
the  propositions  that  we  want  to  compute  their abduction 
of,  those  of  the  form  in(X, Y)  and  those  of  the  form 
ta(X, y, Z)  are independent of each other,  but those of the 
form pa(X, Y, Z) are depended on propositions of the forms 
in\(X, Y) and ta (X, Y, Z). So we should compute first the ab(cid:173)
duction of in(X,Y) and ta(X, Y,Z). Now in(X, Y) is solved 
by rule (8), ta(X, Y, X) by rule (2), and as it turned out, when 
X / Z, ta(A', Y, Z) is always false, and its computation is# 
relatively easy. For instance, for the domain with 9 locations, 
query ta(7,1,6) took only 2.6 seconds. In comparison, query 
pa(7,1,7) took more than 7000 seconds without recycling. 

Table  1  contains run  time  data for some representative 
queries.1  For comparison purpose, each query is given two 
entries:  the one under "NR" refers to regular rewriting sys(cid:173)
tem without using recycling, and the one under "WR" refers 
to rewriting system using computed rules about pa(X, Y, Z). 
As one can see, especially for hard queries like pa(7,1, 7), re(cid:173)
cycling in this case significantly speeds up the computation. 

7  Concluding remarks 
We have considered the problem of how to reuse previously 
computed results for answering other queries in the abductive 
rewriting system of Lin and You [2001] for logic programs 
with negation, and showed that this can indeed be done. We 
have also described  a methodology of using the recycling 
system in practice by analysing the dependency relationship 
among propositions in a logic programs.  We applied this 
methodology to the problem of computing the effect of ac(cid:173)
tions in a logistics domain, the same one considered in [Lin 
and You, 2001], and our experimental results showed that re(cid:173)
cycling in this domain can indeed result in good performance 
gain.  For future work we want to implement a system that 
can automatically analyse a program and decide how best to 
recycle previous computations. 

'Our implementation was written in Sicstus Prolog, and the ex(cid:173)
periments were done on a PHI 1GHz notebook with 512 MB mem(cid:173)
ory.  For generating explanations for regular rewriting system, our 
implementation is a significant improvement over the one in [Lin 
and You, 2001]. For instance, for a domain with 7 locations query 
pa(3,2,3) took more than 20 minutes for the implementation re(cid:173)
ported in [Lin and You, 2001], but required less than 1 second under 
our implementation running on a comparable machine. 

884 

Query 

pa(l ,2,3) 
-pa(l,2,3) 
pa(3,2,3) 
-pa(3,2,3) 
pad,5,7) 
-pad,5,7) 
pa(7,5,l) 
-pa(7,5,l) 
pa(7,l,7) 
-pa(7,1,7) 

9 locations 
NR 
0.71 
75.89 
137.05 
2.97 
122.87 
727.6 
108.66 
74.43 
7619.72 

WR 
0.41 
2.28 
0.89 
1.98 
0.75 
7.07 
17.82 
2.26 
20.78 
2.01 

2.98 

10 locations 
NR 
1.50 
342.96 
630.69 
7.64 
278.07 
2534.09 
188.50 
340.51 
29140.69 

WR 
0.89 
5.65 
1.98 
5.03 
1.31 
19.08 
30.72 
5.64 
35.65 
5.05  | 

7.71 

Table 1:  Recycling in logistics domain.  Legends:  NR - no 
recycling; WR - recycling ta(A', Y, Z) goals. All times are in 
CPU seconds. 

References 
[Dershowitz and Jouannaud, 19901  N.  Dershowitz  and 
P. Jouannaud. Rewrite systems. In Handbook of Theoret(cid:173)
ical Comp. ScL, Vol B: Formal Methods and Semantics. 
North-Holland, 1990. 

[Dix, 1991]  J. Dix. Classifying semantics of logic programs. 

In Proc. First Workshop on LPNMR, pages 167-180,1991. 

[Dung,  1991]  P. Dung.  Negations as hypothesis:  An ab(cid:173)
ductive foundation for logic programming.  In Koichi Fu-
rukawa, editor, 8th 1CLP. MIT press, 1991. 

[Eshghi and Kowalski, 19891 K. Eshghi and R.A. Kowalski. 
Abduction compared with negation by failure. In Proc. 6th 
ICLP, pages 234-254. MIT Press, 1989. 

[Gelfond and Lifschitz,  1988]  M. Gelfond and V. Lifschitz. 
The stable model semantics for logic  programming.  In 
Proc. 5th Int 7 Conference on Logic Programming, pages 
1070-1080. MIT Press, 1988. 

[Kakas and Mancarella, 1990] A. Kakas and P. Mancarella. 
Generalized stable models: a semantics for abduction.  In 
Proc. 9th European Conference on Artificial Intelligence, 
pages 285-291,1990. 

[Kakas et al, 2000]  A. Kakas, A. Michael, and C. Mourlas. 
ACLP: abductive constraint logic programming. J. Logic 
Programming, 44(1-3): 129-178,2000. 

[Lin and You, 2001]  F. Lin and J. You.  Abduction in logic 
programming:  a new definition and an abductive proce(cid:173)
dure based on rewriting. In Proc. 1JCAF01, pages 655-
661,2001. The full paper appears in Artificial Intelligence 
140(1/2): 175-205(2002). 

[Przymusinski, 1990]  T.C. Przymusinski.  Extended stable 
semantics for normal and disjunctive logic programs.  In 
Proc. 7th ICLP, pages 459-477. MIT Press, 1990. 

iSatoh and Iwayama, 1992]  K.  Satoh and R. Iwayama.  A 
query  evaluation  method  for  abductive  logic  program(cid:173)
ming. In Proc. JICSLP'92, pages 671-685,1992. 

[You and Yuan, 1995]  J. You and L. Yuan.  On the equiv(cid:173)
alence  of semantics  for  normal  logic  programs.  JLP, 
22:212-221,1995. 

