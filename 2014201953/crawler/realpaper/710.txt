Constraint Satisfaction, Databases, and Logic 

Phokion G. Kolaitis* 

Computer Science Department 

University of California, Santa Cruz 

Santa Cruz, CA 95064, U.S.A 
kolaitis@cs.ucsc.edu 

Introduction 

1 
Constraint  satisfaction  problems  constitute  a  broad  class  of 
algorithmic  problems  that  are  ubiquitous  in  several  differ­
ent  areas  of  artificial  intelligence  and  computer  science. 
In  their  full  generality,  constraint  satisfaction  problems  are 
NP-complete  and,  thus,  presumed  to  be  algorithmically  in­
tractable.  To  cope  with  the  intractability  of  these  prob­
lems, researchers have devoted considerable research efforts 
to  both  the  design  of heuristic  algorithms  for constraint  sat­
isfaction  and  the  pursuit  of "islands  of tractability",  that  is, 
special  cases  of  constraint  satisfaction  problems  for  which 
polynomial-time algorithms exist. 

During the past decade, the pursuit of "islands of tractabil-
ity"  of constraint  satisfaction  has  been  intensified  and  has 
led  to  a  number of discoveries  that  have  also  unveiled  tight 
connections between constraint satisfaction, database theory, 
logic,  and  universal  algebra.  Our  goal  in  this  paper  is  to 
present an overview of the current state of affairs in the study 
of  the  computational  complexity  of  constraint  satisfaction 
with  emphasis  on  the  connections  of  this  area  of  research 
with  database  theory  and  logic.  The  paper  is  organized  as 
follows: Section 2 contains the precise definition of the C O N-
STRAINT  SATISFACTION  PROBLEM  and its reformulation as 
the HOMOMORPHISM PROBLEM; Section 3 contains some of 
the connections between constraint satisfaction problems and 
database theory;  the  remaining Sections 4,  5,  and 6 contain 
a  high-level  account  of  some  of the  main  results  about  the 
computational  complexity  of constraint  satisfaction  and  the 
pursuit of tractable cases of this problem. 

2  The Constraint Satisfaction Problem and 

the Homomorphism Problem 

Constraint  satisfaction  problems  were  originally  introduced 
by  Montanari  [Mon74l  to  model  problems  in  computer  vi­
sion.  Since that time, however, it has been realized that nu­
merous important problems in artificial intelligence and com­
puter science can be modeled as constraint satisfaction prob­
lems (see [Dec92a; PJ971). An instance of the C O N S T R A I NT 
SATISFACTION  PROBLEM  (CSP)  consists  of  a  set  of  vari­
ables,  a  set  of possible  values  for  the  variables,  and  a  set 
of constraints  on  tuples  of variables  that restrict  the  combi­
nations  of  values  that  the  variables  may  take;  the  question 

* Partially supported by NSF Grant No. IIS-9907419 

is  to  determine  whether there  is  an  assignment  of values  to 
the variables so that the constraints are satisfied.  More pre­
cisely,  a  CSP-instance  is  a  triple (V,, D,C),  where  V  of  a 
finite  set  of variables,  D  is  a  finite  domain  of values  for the 
variables, and C is a set constraints {t,  R),  where t is a tuple 
of variables  for some m  and  R  is  a rela­
tion  on  D  of arity  m.  A solution  is  a mapping  h  :  V  ->  D 
such  that,  for  every  constraint 
C,  we  have  that 

(t,R) 

is 

with  variables 

a  3CNF-formula 

Consider the  Boolean  satisfiability problem  3-SAT:  given 
and  clauses 
satisfiable?  Such  an  instance  of 3-SAT  can 
be  thought of as  the  CSP-instance  in  which  the  set  of vari­
},  the domain is D  —  {0,1}, and 
ables is V = ■ 
the  constraints  are  determined by  the clauses  of 
For  ex­
gives  rise  to  the 
ample,  a  clause  of the  form 
constraint 
In an analogous 
manner, 3 - C O L O R A B I L I TY can be modeled as a constraint 
Indeed,  an  instance  H  =  {V,E)  of 
satisfaction  problem. 
3 - C O L O R A B I L I TY can be thought of as the CSP-instance in 
which  the  set  of  variables  is  the  set  V  of the  nodes  of the 
graph H, the domain is the set 
of three  colors, 
and the constraints are the pairs ((u, u), Q), where 
E 
and 
is the inequal­
ity relation on  D. 
A  vocabulary 

finite  set  of  relational  symbols 
, Rm  each  of  which  has  a  fixed  arity.  A  rela(cid:173)
RI,... 
tional  structure  over  some  vocabulary  is  a  tuple  A  = 
such that A  is a non-empty set, called the 
universe  of A,  and  each  RA  is  a  relation  on  A  having  the 
same  arity  as  the  symbol  Rt.  Let  A  and  B  be  two  rela­
tional structures over the same vocabulary. A homomorphism 
h from  A  to  B  is  a  mapping  h  :  A  ->  B  from  the  uni­
verse  A  of  A  to  the  universe  B  of  B  such  that,  for  every 
relation  RA  of  A  and  every  tuple 
we 
have that 
 and Vardi [FV98] 
were the  first  to point out that the  CONSTRAINT  SATISFAC­
TION PROBLEM can be identified with the HOMOMORPHISM 
PROBLEM:  given two relational structures A and B, is there 
a homomorphism h  from  A  to 
The intuition behind this 
identification  is  that  the  structure  A  represents the  variables 
and the tuples of variables that occur in the constraints, while 
the  structure  B  represents  the  domain  of values  and  the  tu­
ples  of values  that  these  constrained  tuples  of variables  are 

, F e d er

,

.

.

.

is  a 

INVITED SPEAKERS 

1587 

allowed  to  take.  Moreover,  the  homomorphisms from  A  to 
B  are  precisely  the  assignments  of  values  to  variables  that 
satisfy  the  constraints.  For  instance,  3-COLORABILITY  is 
equivalent to the problem of deciding whether there  is a ho-
momorphism h from a given graph H to the complete graph 
with 3 
nodes.  More generally,  k - C O L O R A B I L I T Y,  2,  amounts 
to  the  existence  of  a  homomorphism  from  a  given  graph 
H  to  the  complete graph  Kk  with  A:  nodes  (also  known  as 
the  k-clique).  Numerous other important NP-complete prob­
lems can be viewed as special cases of the HOMOMORPHISM 
PROBLEM (and, hence, also of the C O N S T R A I NT SATISFAC­
T I ON  PROBLEM).  For example,  consider the C L I Q UE prob­
lem:  given  a  graph  H  and  an  integer  k,  does  H  contain  a 
clique  of size  A;?  A  moment's  reflection  shows  that  this  is 
equivalent to the question:  given a complete graph  Kk  and a 
graph H, is there a homomorphism from  Kk  to H? 

The  conceptual  insights  gained  from  the  identification  of 

the  C O N S T R A I NT  SATISFACTION  PROBLEM  with  the  H O­
MOMORPHISM  PROBLEM  have  facilitated  the  use  of tech­
niques  from  universal  algebra  in  the  study  of  constraint 
satisfaction  [Jea98;  FV98]).  Moreover,  they  have  clari­
fied the tight connections between constraint satisfaction and 
database theory. We discuss some of these connections in the 
next section. 

3  Constraint Satisfaction and Relational 

Databases 

such that 

The most frequently asked queries in relational database sys­
tems  involve  the  computation  of the join  of two  or  more  re­
lations in a database.  Instead of spelling out the formal def­
inition of the join  operation,  let us consider for concreteness 
a  database  relation  R(A, B, C)  with  A,  B,  C  as  attributes 
and  a  database  relation  S{B,C,D,E)  with  B,  C,  D,  E  as 
S  consists  of  all  quintuples 
attributes.  Then  the join  R 
R and 
5.  Sev­
eral different researchers, including [Bib88], have pointed out 
that computing the set of all  solutions of a CSP-instance can 
be viewed as a join evaluation problem. Indeed, if (V, D, C) is 
a CSP-instance, then, for every constraint 
in C, let 
database relation with attributes 
is  the  collection  of all  database  relations  obtained  this  way, 
then the join 
consists of all  solutions to the 
CSP-instance 

be the relation R itself viewed as a 

o

r

m

formula  of 

first-order 
e

Join  evaluation  is  a  special  case  of  conjunctive  query 
Specifically,  an  n-ary  conjunctive  query 
is  a  query  definable 
the 

evaluation. 
Q  over  a  relational  vocabulary 
by  a  positive  existential 
w
f
is a conjunction of atomic formu­
las.  For  example,  the  binary  conjunctive  query  "there  is  a 
path of length  3  from  x1  to X2"  is  definable by the formula 
Note  that 
joins  are  precisely  those  conjunctive queries  in  which  none 
of  the  variables  in 
is  quantified.  At  other  extreme,  a 
Boolean  conjunctive  query  is  a  conjunctive  query  in  which 
all variables  of  have been quantified out. 

re 

h

Every  finite  relational structure A gives rise to a canonical 
the positive existential  first-
Boolean conjunctive query 
order sentence defining 
asserts that there exist as many 
elements as the cardinality of the universe of A  and states all 
atomic  facts  satisfied by  tuples  from the  universe of A.  For 
example, if A  =  (A, E)  is the 3-cycle with A  =  {1,2,3}  and 
E  = ( 3 , 1 )
query  w 

},  then  the  canonical  conjunctive 

is definable by the sentence 

The  following  basic  result,  due  to  Chandra  and  Merlin 
[CM77], establishes a strong connection between homomor­
phisms and conjunctive queries. 
Theorem 3.1: [CM771 The following are equivalent for finite 
relational  structures  A  and  B. 

As an example, we saw earlier that a graph G  =  (V, E)  is 3-
colorable  if and only  if there  is  a homomorphism from  G  to 
K3.  Consequently, Theorem 3.1  implies that G is 3-colorable 
if and  only  if K3  satisfies  the  canonical  query  QG  of G. 

In  view  of the  identification  of the  CONSTRAINT  SATIS­
FACTION P R O B L EM with the H O M O M O R P H I SM PROBLEM, 
the  preceding  Theorem  3.1  implies  that  the  CONSTRAINT 
SATISFACTION PROBLEM can also be identified with two 
fundamental problems in database theory:  conjunctive query 
evaluation  and  conjunctive  query  implication  (or  contain(cid:173)
ment).  This fundamental connection between constraint sat­
isfaction and database theory was brought to front stage and 
further investigated in [KVOOal. 

4  Computational Complexity of Constraint 

is  NP-

PROBLEM 

SATISFACTION 

Satisfaction 
The  C O N S T R A I NT 
complete,  because  it  is  clearly  in  NP  and  also  contains 
NP-hard  problems  as  special  cases,  including  3-SAT,  3-
COLORABILITY,  and  CLIQUE.  As  explained  in  Garey  and 
Johnson's classic  monograph  [GJ79],  one of the  main  ways 
to  cope  with  NP-completeness  is  to  identify  polynomial-
time  solvable  cases  of  the  problem  at  hand  that  are  ob­
tained  by  imposing  restrictions  on  the  possible  inputs.  For 
instance,  H O RN  3-SAT,  the  restriction  of  3-SAT  to  Horn 
3CNF-formulas, 
is  solvable  in  polynomial-time  using  a 
unit-propagation  algorithm.  Similarly,  it  is  known  that  3-
COLOR ABILITY restricted to graphs of bounded treewidth is 
solvable in polynomial time (see IDF99]).  In the case of con­
straint satisfaction, the pursuit of tractable cases has evolved 
over the years from the discovery of isolated cases to the dis­
covery of large "islands  of tractability" of constraint satisfac­
tion.  In what follows, we will give an account of some of the 
progress made  in  this  area.  We  begin  by  introducing  some 
terminology and notation that will enable us to formalize the 
concept of an  "island of tractability" of constraint satisfaction 
using the fact that the C O N S T R A I NT SATISFACTION PROB­
L EM can be identified with the HOMOMORPHISM PROBLEM. 

1588 

INVITED SPEAKERS 

In general, an instance of the H O M O M O R P H I SM PROBLEM 
consists of two arbitrary relational structures A and B.  Thus, 
all restricted cases of this problem can be obtained by impos(cid:173)
ing restrictions on the input structures A and B. 
Definition 4.1:  Let A,  B be two classes of relational struc(cid:173)
tures.  We  write  CSP (.4,B) to denote  the restriction  of the 
HOMOMORPHISM PROBLEM to input structures from A and 
B.  In other words, 

CSP 

An  island of tractability  of constraint  satisfaction  is  a  pair 
(A, B) of classes of relational structures such that CSP(A, B) 
is in the complexity class P of all decision problems solvable 
in polynomial time. 

The  ultimate  goal  in  the  pursuit  of islands  of tractability 
of constraint  satisfaction  is  to  identify  or  somehow  charac(cid:173)
terize  all  classes  A  and  B  of relational  structures  such  that 
CSP(A, B)  is in P. The basic starting point in this investiga(cid:173)
tion  is to consider the cases  in which one of the two classes 
A,  B is  as  small  as  possible,  while  the other is as  large as 
possible. This amounts to considering the cases in which one 
of A,  B  is  the class  All  of all  relational  structures over some 
arbitrary, but fixed, relational vocabulary, while the other is a 
singleton  { B}  consisting of some fixed structure B  over that 
vocabulary.  Thus,  the  starting  points  of the  investigation  is 
to determine,  for every relational  structure B,  the computa(cid:173)
tional  complexity  of  the  decision  problems  CSP({B}, All) 
and  CSP(A//,{B}). 

Clearly, 

fixed  B, 

for  each 

the  decision  problem 
CSP({B},,4//)  can  be  solved in  polynomial time,  because, 
given  a structure A,  the existence of a homomorphism from 
A  to  B  can  be  checked  by  testing  all  functions  h  from  the 
universe  B  of B  to  the  universe  A  of A  (the  total  number of 
such functions is 
which is a polynomial number in the 
size of the structure A).  At  the other extreme,  however, the 
situation is quite different, since the computational complex(cid:173)
ity  of  CSP(.4//, { B })  may  very  well  depend  on  the  partic(cid:173)
ular structure  B.  Indeed,  CSP 
is NP-complete, 
because  it  is  the  3-COLORABILITY  problem;  in  contrast, 
CSP 
is in P, because it is the 2-COLORABILITY 
problem. 

For simplicity, in what follows, for every fixed structure B, 

we put 

CSP(B) 

=  CSP(A//,{B}) 

and call  this the non-uniform constraint satisfaction problem 
associated  with  B.  Thus,  the  first  major  goal  in  the  study 
of the computational  complexity of constraint satisfaction  is 
to identify those structures B for which CSP(B)  is in P. Al(cid:173)
though this  goal  has  yet  to  be  realized,  much  progress has 
been made towards it.  The next section contains a bird's-eye 
view of some of the main results obtained to date. 

5  The Computational Complexity of 

Non-Uniform  Constraint Satisfaction 

The  first  major result in  the  study of non-uniform constraint 
satisfaction  problems  was  obtained  by  Schaefer  [Sch78], 

who,  in  effect,  classified  the  computational  complexity  of 
all  Boolean  non-uniform  constraint  satisfaction  problems. 
A  Boolean  structure  is  simply  a  relational  structure  with  a 
2-element  universe,  that  is,  a  structure  of  the  form  B  = 
A  Boolean  non-uniform  constraint 
satisfaction problem  is  a problem of the  form  CSP(B)  with 
B  a  Boolean  structure.  These  problems  are  also  known  as 
G E N E R A L I Z ED SATISFIABILITY PROBLEMS, because they 
can be viewed as variants of Boolean satisfiability problems 
in  which  the  formulas  are  conjunctions of generalized  con(cid:173)
nectives  [GJ79].  In  particular,  they  contain  the well  known 
problems  k-SAT,  k 
2, 1-IN-3-SAT, POSITIVE 1-IN-3-
SAT,  N O T - A L L - E Q U AL  3-SAT,  and  M O N O T O NE  3-SAT  as 
special  cases.  For example,  3-SAT  is  CSP(B),  where  B  = 
and  Ri  is  the  set  of  truth  assign(cid:173)
ments  that  satisfy  a  3-clause  in  which  the  first  i-literals  are 
negated, 
Similarly,  MONOTONE  3-SAT  is  CSP(B),  where  B  ' = 

(thus, 

Ladner  [Lad75]  showed  that  if  P 

NP,  then  there  are 
decision  problems  in  NP  that  are  neither  NP-complete,  nor 
they belong to P. Consequently, it is conceivable that a given 
family  of NP-problems  contains  problems  of such  interme(cid:173)
diate  complexity.  Schaefer  [Sch78],  however,  showed  that 
the family of all Boolean non-uniform constraint satisfaction 
problems contains no problems of intermediate complexity. 

Theorem 5.1:  (Schaefer's Dichotomy Theorem [Sch78]) 

is Boolean structure, then 
either CSP(B)  is in P or CSP(B)  is NP-complete.  In a 
picture, 

•  Moreover,  there  is  a  polynomial-time  algorithm  to  de(cid:173)
cide,  given a Boolean structure B,  whether CSP(B)  is 
in P or it is NP-complete. 

Schaefer  [Sch78]  actually  showed  that  there  are  exactly 
six  types  of Boolean  structures  such  that  CSP(B)  is  in  P, 
and provided explicit descriptions of them.  Specifically,  he 
showed that CSP(B)  is in P precisly when at least one of the 
following six conditions is satisfied: 

•  Every relation 

of B  is O-valid, that is, 

contains the all-zeroes tuple 

•  Every relation 

contains the all-ones tuple 

of B is  \-valid,  that is, 

•  Every relation 

of B  is  bijunctive,  that 
is  the  set  of truth  assignments  satisfying  some 

is, . 
2CNF formula. 

INVITED SPEAKERS 

1589 

•  Every relation 

m,  of B  is  Horn,  that  is, 
i  is the set of truth assignments satisfying some Horn 

RB
formula. 

•  Every relation 

m,  of B  is  dual Horn,  that 
i  is  the  set  of truth  assignments  satisfying  some 

is,  RB
dual Horn formula. 

•  Every  relation 

of B  is  affine,  that  is, 
t  is the set of solutions to a system of linear equations 

RB
over the two-element field. 

Schaefef's Dichotomy Theorem yields a complete classifi­
cation  of the  complexity  of CSP(B)  for  Boolean  structures 
B.  At  the  same  time,  it  raises  the  challenge  of classifying 
the  computational complexity  of CSP(B)  for arbitrary  rela­
tional  structures  B.  To  this  effect,  Feder  and  Vardi  [FV98] 
formulated the following important conjecture. 
Conjecture 5.2:  (Feder-Vardi Dichotomy Conjecture) 
If B  = 
m)  is an arbitrary relational structure, 
then either CSP(B)  is in P or CSP(B)  is NP-complete.  In a 
picture, 

RB

The Feder-Vardi Dichotomy Conjecture inspired  intensive 
research  efforts  that  resulted  into  significant  advances  to­
wards resolving it.  In particular, quite recently Bulatov con­
firmed  two  important  cases  of  this  conjecture  that  are  de­
scribed next. 
Theorem 5.3: 
structure. 

be  a  relational 

•  (Bulatov 

[Bul02a]) 

/f  B  = 

{0,1,2}, 

then  either 

CSP(B)  is in P or CSP(B)  is NP-complete. 

•  (Bulatov  lBul()3l) If every non-empty subset of B  is one 
i of B, then either CSP(B) is in P or 

of the relations RB
CSP(B)  is HP-complete. 

Moreover,  in both cases there is a polynomial-time algorithm 
to decide whether CSP(B)  is in P or it is NP-complete. 

The second of the two cases above is known as conserva(cid:173)
tive constraint satisfaction.  In effect,  it  is  the case  in  which 
all possible unary constraints on the domain are present. 

In spite of the progress made,  the Feder-Vardi Dichotomy 
Conjecture  remains  unresolved  for  CSP(B)  with  
4. 
The research efforts  towards this  conjecture,  however,  have 
also  resulted  into  the  discovery  of  broad  sufficient  condi­
tions  for  tractability  of  non-uniform  constraint  satisfaction 
that have provided unifying explanations for numerous seem­
ingly disparate tractability results and have also led to the dis­
covery of new islands of tractability of CSP(B).  These broad 
sufficient conditions for tractability of CSP(B)  are based on 

concepts and techniques from two different areas:  universal 
algebra and logic.  The approach via universal algebra yields 
sufficient  conditions  for  tractabilty  of  CSP(B)  in  terms  of 
closure  properties  of the  relations  in  B  under  certain  func­
tions  on  B.  The  approach  via  logic  yields  sufficient condi­
tions  for tractability  in  terms  of expressibility  of CSP(B)  in 
Datalog.  In  the remainder of this  section, our primary focus 
is on the latter approach. 

Datalog  is  the  main  database query  language used in  de­
ductive database systems (see  rU1189j).  In a nutsfell, a Dat­
alog program is a negation-free and function-free logic pro­
gram.  More  precisely,  a  Datalog program  is  a  finite  set  of 
rules of the form 

where T,  S1,...  , Sr are relation symbols. In effect, the right-
hand side of each rule (called the body of the rule) is a con­
junctive query in which all variables not occurring in the left-
hand side (called the head of the rule) are existentially quan­
tified.  Datalog embodies recursion because relation symbols 
may occur both  in  the heads  and the bodies of rules.  Those 
that do are the recursive or or intensional database predicates 
(IDBs) of the program, while the remaining relation symbols 
are the extensional database predicates (EDBs).  One of the 
IDB predicates is singled out as the goal of the program. 

As  a  standard  example,  the  transitive  closure  of the  edge 
relation E of a graph H  =  (V,  E)  is defined by the following 
Datalog program. 

Every Datalog program can be evaluated "bottom-up" in a 
polynomial number of iterations on a given database.  For ex­
ample, the A:-th iteration of the above Datalog program yields 
the set of all pairs of nodes of H that are connected via a path 
of length at most K; moreover, at most n  iterations suffice to 
compute the transitive closure of E, where n is the number of 
nodes in V.  It follows that each fixed Datalog program can be 
evaluated in time polynomial in the size of a given relational 
structure.  Consequently, if a query Q is definable by a Data-
log program, then Q is in P. Thus, expressibility in Datalog is 
a sufficient condition for tractability. 

Another  important  feature  of Datalog  is  that  queries  de­
finable  by  Datalog  programs are preserved under homomor-
phisms.  This means that if a structure A  satisfies the goal of 
a Datalog program and there is a homomorphism from A  to 
B, then also B satisfies the goal of the program. 

Let  B  = 

be  a relational  structure.  It 
is  easy  to  see  that,  except  for  trivial  situations,  CSP(B) 
is  not  preserved  under homomorphisms,  which  implies  that 
CSP(B)  is  not expressible  in  Datalog.  Thus,  at  first  sight, 
it appears that there is no link between expressibility in Dat­
alog  and  tractability  of non-uniform  constraint  satisfaction. 
A moment's reflection, however, reveals that the complement 
CSP(B)  of  CSP(B)  is  preserved  under  homomorphisms, 
where 

CSP(B)  =  {A  :  no homomorphism  h  :  A  -►  B exists}. 

1590 

INVITED SPEAKERS 

Consequently,  it  is  conceivable  that,  for  some  structures  B, 
the  non-uniform constraint  satisfaction  problem  CSP(B)  is 
in P because its complement 
is expressible in Dat-
alog.  Feder and Vardi  IFV98]  pursued this link in depth and 
demonstrated  that  expressibility  of 
in Datalog is a 
unifying  explanation  for  numerous  tractability  results  about 
CSP(B). 
As  an 

consider  2-
COLORABILITY,  which  is  the  same  problem  as  CSP(K2). 
The following Datalog program with Q as its goal expresses 
N ON  2-COLORABILITY, since a graph is 2-colorable if and 
only if it contains no cycles of odd  length. 

important  concrete  example, 

As  two  additional  important  examples,  recall  that  if B  = 
is  a  Boolean  structure  such  that  ev­
ery  relation  RB
i  is  bijunctive, 
then CSP(B) is in P. It can be shown that in both these cases 
CSP(B)  is expressible in Datalog. 

I  is  Horn  or every  relation  RB

If 

:  Bk 

To gauge the broad spectrum of tractable cases covered by 
Datalog,  it  is  perhaps worth  comparing tractability  via Dat­
alog  to  tractability  via  closure  properties,  which,  as  men­
tioned  earlier,  is  an  approach  to  tractability  based  on  uni­
versal  algebra.  For  this,  we  need  to  first  introduce  some 
If  R  is  an  n-ary 
basic  concepts  from  universal  algebra. 
relation  on  a  set  B  and  / 
B  is  a  function, 
then  we  say  that  R  is  dosed  under  f  if  for  every  k--tuples 
we  have  that  the 
is  also  in 
is a relational structure, then 
for 

n,-tuple 
R. 
a  polymorphism  of  B  is  a  function 
some 
such  that  each  relation 
is  closed  under  /.  We  write  Pol(B)  for  the  set  of  all 
polymorphisms  of  B.  As  it  turns  out,  the  complexity  of 
CSP(B)  is  intimately  connected  to  the  kinds  of  functions 
that  Pol(B)  contains.  In particular, it has been  shown that if 
Pol(B)  contains functions that satisfy certain algebraic iden­
tities,  then  CSP(B)  is  in  P.  This  connection  has  been  in­
vestigated  in  depth  and  with  much  success  by  Jeavons  and 
his collaborators in a sequence of papers,  including [JCG97; 
JCC98],  and  by Bulatov  |Bul02b]  (but also Feder and Vardi 
[FV98]  had  results  along  these  lines).  The  following  are 
the  presently  known  most  general  sufficient  conditions  for 
tractability of CSP(B)  based on closure properties. 
Theorem 5.4:  Let  B  = 
structure. 

m) he  a  relational 

(B,  Ri

B,... 

, RB

•  If  Pol(B)  contains  a  near-unanimity  function, 

CSP(B) is in P. 

then 

•  //Pol(B) contains a set function, then CSP(B) is in P. 
•  If'Pol(B)  contains  a  Maltsev  function,  then  CSP(B)  is 

in?. 

A  k-ary  function  /  with 

is  a  near  unanimity func(cid:173)
tion  if 
, xk) 
such that at least  k  -  1  of the  xis  are equal  to y.  Note that 

, Xk)  =  y,  for  every  k-tuple 

f(x1,... 

(x1,... 

,  xk),  we  have  that 
{x1,... 

the  ternary  majority  function  on  {0,1}  is  a  near  unanimity 
is  a set function  if 
function.  A  k-ary  function  /  with 
for every  k-tuple  (x1,... 
f(x1.....,  xk) 
depends only on the set 
,  xk}.  Note that the Boolean 
binary functions A and V arc set functions.  Finally, a ternary 
function  f(x, y, z)  is  a Maltsev function  if,  for every x  and  y, 
it  satisfies  the  identities  f(y,  y,x)  —  f(x,y,y)  —  x.  Note 
that the  Boolean  function 
is  a Maltsev  function. 
It should be pointed out that the preceding Theorem 5.4 con­
tains as special cases the non-trivial tractable cases in Schae-
fer's  Dichotomy  Theorem  5.1. 
Indeed,  it  is  known  that  a 
Boolean relation  is bijunctive if and only if it  is closed under 
the ternary majority operation; moreover, a Boolean relation 
is Horn (dual Horn) if and only if it is closed under 
(respec­
tively, V);  finally, a Boolean relation is affine if and only if it 
is closed under 

Concerning the comparison  between  Datalog  and closure 
properties,  it  can  be  shown  that  if Pol(B)  contains  a  near-
unanimity function or a set function, then CSP(B) is express­
ible in Datalog. Thus, expressibility in Datalog subsumes two 
of the three sufficient conditions for tractability based on clo­
sure properties.  It also known, however, that there are struc­
tures  B  (in  fact,  even  Boolean  structures)  such  that  Pol(B) 
contains a Maltsev  function,  but  CSP(B)  is  not expressible 
in  Datalog.  At  the  same  time,  there  are  structures  B  such 
that  Pol(B)  does  not contain  any  near unanimity  functions, 
set functions, or Maltsev functions,  yet CSP(B)  is tractable 
because CSP(B)  is expressible in Datalog. 

In what follows in this section, we will take a closer look at 
the connections between Datalog and non-uniform constraint 
satisfaction.  In particular, we will address the following ques­
tion:  when  is  CSP(B)  expressible  in  Datalog?  As  we  will 
see,  expressibility  of CSP(B)  in  Datalog  can  be  character-
ized in terms of pebble games and also in terms of consistency 
properties. 

Combinatorial  games are  a  versatile tool  in  analyzing the 
expressive  power  of  logics.  The  most  well  known  among 
these games are the Ehrenfeucht-Fraisse-games for first-order 
logic  (see  [EFr94]).  A different family  of games,  known  as 
k-pebble games, has been used to study fixed-point logics and 
infinitary logics with finitely many variables (see [KV901.  We 
now describe a variant of k--pebble games that are suitable for 
analyzing the expressive power of Datalog  [KV95]. 
be a positive integer.  The exis(cid:173)
Definition 5.5:  Let 
tential k-pebble game (or, in short, the 
-pebble game) is 
played between  two players,  the Spoiler and the  Duplicator, 
on two relational structures A and B according to the follow­
ing rules: each player has k pebbles labeled 1 , . ..  , k; on the 
i-th  move  of a  round  of the game, 
the  Spoiler 
places  a pebble  on  an  element  a,  of .4,  and  the  Duplicator 
responds by placing the pebble with the same label on an el­
ement  bi  of B.  The Spoiler wins the  game  at the end of that 
round,  if the  correspondence 
is not a 
homomorphim  between  the  substructures  of  A  and  B  with 
universes  {a1,... 
,  ak}  and  [b1,...  ,bk},  respectively.  Oth­
erwise, the Spoiler removes one or more pebbles, and a new 
round  of the  game  begins.  The  Duplicator  wins  the 
pebble  game  if he  has  a  winning  strategy,  that  is  to  say,  a 

INVITED SPEAKERS 

1591 

systematic way that allows him to sustain playing "forever", 
so that the Spoiler can never win a round of the game. 

graph with in nodes.  For every 

To illustrate this game, let Km  be the complete undirected 
the Duplicator wins the 
-pebble  game on  Kk  and  Kk + 1,  but  the  Spoiler wins 
-pebble  game  on  Kk+1  and  Kk.  As  another 
If m  < 
-pebble  game  on  Lm 
-pebble game on 

the 
example, let Ls  be the s-element linear order, 
n,  then  the  Duplicator  wins  the 
and  Ln,  but  the  Spoiler wins the  
and 

Note  that  the  above description  of a  winning  strategy  for 
-pebble game is rather informal. 
the  Duplicator in  the 
The concept of a winning strategy can be made precise, how­
ever, in terms of families of partial homomorphisms with ap­
propriate  closure  and  extension  properties,  where  a partial 
homomorphism from A to B is a homomorphism from a sub­
structure of A  to  a  substructure of B. 

Definition 5.6:  Let k be a positive integer.  A winning strat(cid:173)
egy for the Duplicator in the existential k-pebble game on A 
and  B  is  a  nonempty  family  T  of  partial  homomorphisms 
from  A to B  such that: 

1.  For every 

k elements. 

the  domain  dom(/)  of /  has  at  most 

2.  F  is closed under subfunctions, which means that  if 

T  and. 

then 

3 .T  has  the  k-forth property,  which  means  that  for every 
on which 
that  extends  /  and  is 

with  |dom 

and every 

/  is  undefined,  there  is a 
defined on a. 

Intuitively,  the  second  condition  provides  the  Duplicator 
with a "good" move when the Spoiler removes a pebble from 
an  element A,  while  the third condition provides the  Dupli­
cator with a "good" move when the Spoiler places a pebble 
on an element of A. 

For every positive integer k, let k-Datalog be the collection 
of all  Datalog  programs  such  that  each  rule  has  at  most  A: 
distinct  variables.  The  next  result  describes  the  connection 
between 
-pebble games and  k-Datalog,  and also gives 
some of the algorithmic properties  of 

-pebble games. 

Theorem 5.7:  [KV95; KVOOa] Let k be a positive integer. 

•  Assume that Q  is a query definable by a k-Datalog pro(cid:173)
gram. If A and B are two relational structures such that 
A  satisfies  Q  and the  Duplicator wins the 
-pebble 
game on A and B,  then also B satisfies Q. 

•  There  is a polynomial-time algorithm  to decide  whether, 
given  two  finite  structures  A  and B,  the  Spoiler or the 
Duplicator  wins  the 

-pebble game on  A  and B. 

•  For  every  finite  relational  structure  B,  there  is  a  k-
Datalog  program  B  that  expresses  the  query:  given 
a finite o -structure  A,  does  the  Spoiler win  the 
pebble  game  on  A  andB? 

Theorem 5.8:  [KVOOa] Let k be a positive integer and B a  fi(cid:173)
nite  relational structure.  The following statements are  equiv(cid:173)
alent. 

•  CSP(B)  is expressible  in  k-Datalog 
•  CSP(B)  = 

{A  :  Duplicator wins  the 

-pebble  game  on  A  and B}. 

Note that if a homomorphism from A to B exists, then the 
Duplicator wins the 
-pebble game on A and B using the 
values of the homomorphism as his strategy.  Thus, Theorem 
5.8  asserts  that  CSP(B)  is  expressible  in  k-Datalog  if  and 
only if the following property holds:  whenever the Duplicator 
wins the 
-pebble  on  A  and  B,  a  homomorphism  from 
A  to  B  exists. 

A  striking  consequence  of Theorems  5.7  and  5.8  is  that 
all non-uniform constraint satisfaction problems CSP(B)  for 
which  CSP(B)  is  expressible  in  fc-Datalog  can  be  solved 
in  polynomial  time  using  the  same  algorithm,  namely,  the 
polynomial-time algorithm for determining the winner in  the 
(3, fc)-pebble game.  Moreover, since expressibility in Data-
log  subsumes  the  tractable  cases  in  which  Pol(B)  contains 
a  near  unanimity  function  or  a  set  function,  it  follows  that 
the algorithm for determining the winner in the (, fc)-pebble 
game can also be used to solve CSP(B)  in polynomial time 
in these two major tractable cases. 

Many  heuristic  algorithms  for  constraint  satisfaction  in­
volve "constraint propagation", which can  be  intuitively de­
scribed as the derivation of new constraints from the original 
ones. This process has been formalized using various consis(cid:173)
tency concepts  that  make  explicit additional  constraints  im­
plied  by  the  original  constraints.  The  strong  k-consistency 
property  is  the  most  important  one  among  them;  in  infor­
mal terms, this property holds when every partial solution on 
fewer than k variables can be extended to a solution on k vari­
ables lDec92bl. Closely related to this is the process of estab(cid:173)
lishing strong k-consistency, which is the question of whether 
additional  constraints  can  be  added  to  a  given  instance  of 
the CONSTRAINT SATISFACTION  PROBLEM  in such a way 
that  the  resulting  instance  is  strongly  k-consistent  and  has 
the same space of solutions as the original one (see [Dec92b; 
KVOOb]  for the formal definitions).  It turns out that the  fol­
lowing tight connection exists between strong fc-consistency 
properties and 
Theorem  5.9: 
CSP-instance(V,D,C). 

[KVOOb]  The following  are  equivalent for  a 

-pebble games. 

•  /t  is  possible  to  establish  strong  k-consistency  for 

(V,D,C). 

•  The  Duplicator  wins  the 

-pebble game  on  A  and 
B,  where  A, B form  the  instance  of the  HOMOMOR­
PHISM  PROBLEM  associated with  (V, D, C). 

Furthermore,  when  this  happens,  the  set 

of 

all  winning  configurations for  the  Duplicator  in  the 
pebble game gives rise to the largest (and,  hence,  least con(cid:173)
strained) CSP-instance  that establishes strong  k-consistency 
for 

The  preceding  Theorem  5.7  can  be  used  to  characterize 

when CSP(B)  is expressible in Datalog. 

The preceding theorem provides a different perspective on 
consistency  properties  and  reinforces  the  usefulness  of  the 

1592 

INVITED SPEAKERS 

-pebble  games  in  the  study  of constraint  satisfaction. 
In  particular,  Theorem  5.9  implies  that  computing  winning 
strategies for the Duplicator in the 
-pebble game is the 
most general form of constraint propagation. Moreover, as an 
immediate consequence of Theorems 5.8 and 5.9,  we obtain 
another  characterization  of when  CSP(B)  is  expressible  in 
k-Datalog. 
Corollary 5.10:  Let k be a positive integer and B be a fixed 
finite  relational structure.  Then  the following  are  equivalent. 

•  CSP(B)  is expressible  in  k-Datalog 
•  For  every  finite  relational  structure  A,  establishing 
strong k-consistency for A and B implies that there is a 
homomorphism from  A  to  B. 

The  results  presented  in  this  section  make  a  strong  case 
for  the  importance  of the  property  "CSP(B)  in  expressible 
in Datalog" as a broad sufficient condition for tractability of 
CSP(B),  since  this  property  subsumes  numerous  tractable 
cases  of non-uniform constraint satisfaction.  In  view of this, 
one  would  like  to have  an  efficient  algorith  to  test  whether, 
given  a relational  structure  B,  we  have  that  CSP(B)  is  ex­
pressible in Datalog.  Such an algorithm could be used as a 
building block in  heuristic algorithms for constraint satisfac­
tion,  where  one  first  tests  for  expressibility  in  Datalog  be­
fore resorting to some other exhaustive search procedure.  At 
present,  however,  no  such  efficient  algorithm  is  known.  In 
fact,  it  is  not even  known  whether expressibility of CSP(B) 
in  Datalog  is a decidable property.  More precisely,  the fol­
lowing problem, originally posed by Feder and Vardi [FV98], 
remains open. 
Open  Problem:  Let 
be  a  fixed  positive  integer.  Is 
there an algorithm to decide whether, given B,  we have that 
CSP(B)  is expressible in  k-Datalog? 

6  Uniform Constraint Satisfaction and 

Bounded  Treewidth 

In Section 5, we focused on the pursuit of islands of tractabil­
ity  of non-uniform constraint  satisfaction,  that  is,  islands  of 
the form 

CSP(B) 

-  CSP(All,{B}), 

where B  is a fixed relational structure.  In particular, we saw 
that substantial progress has been made towards obtaining a 
complete classification of all relational structures B for which 
CSP(B)  is solvable in polynomial time.  The state of affairs, 
however,  is  different  for  constraint  satisfaction  problems  of 
the  form  CSP(A,B),  where  neither A  nor B  is  a  singleton 
class.  We  call  such  problems  uniform  constraint  satisfac-
tion  problems,  because  an  instance  of  CSP{A,B)  is  a  pair 
of  structures 
(unlike CSP(B), where an 
instance is just a structure A). 

and 

At present,  we are  far away  from even coming close to a 
characterization of all  classes A and B such that CSP(A, B) 
is  solvable  in  polynomial  time.  Nonetheless,  significant 
progress has been made in the case in which B is the class All 
of all relational structures over an arbitrary, but fixed, vocabu­
lary.  In what follows, we present the main results concerning 

islands of tractability of uniform constraint satisfaction of the 
form  CSP{A,  All). 

As  is  well  known,  many  algorithmic  problems  that  are 
"hard" on arbitrary graphs become "easy" on trees. This mo­
tivated researchers to investigate whether the concept of a tree 
can be appropriately relaxed while maintaining good compu­
tational  behavior.  As  part  of  their  seminar  work  on  graph 
minors,  Robertson  and  Seymour  introduced  the  concept  of 
treewidth  and  showed  that  graphs  of bounded treewidth  are 
"tree-like"  structures  exhibiting  such  good  behavior.  The 
monograph by  Downey  and  Fellows  [DF991  contains com­
plete  definitions  and  characterizations  of  these  concepts. 
Here,  instead  of giving  the  standard  definition  of treewidth 
in  terms of tree  compositions,  we  present  an  equivalent one 
in  terms  of partial  k-trees. 
Definition 6.1:  Let k be a positive integer. 

•  A  graph  H  is  a  k-tree  if either  H  is  a  Kk+1  -clique  or 
in  G  forming 
there  are  a  k-tree  G,  nodes 
and  a  node  b  in  H  -  G  such  that  H  is 
a 
obtained from  G  by  connecting b to  each  of the nodes 
a1, . .. , ak (thus, forming a  

-clique). 

•  A graph is a partial k-tree if it is a subgraph (not neces­

sarily  induced) of a  k-tree. 

•  The  treewidth  of a graph  H,  denoted  by  tw(H),  is  the 

smallest k such that H is a partial  k-tree. 

•  We write 

to denote the class of all  graphs H  such 

that  tw(H)  <  k. 

Clearly, if T is a tree, then tw(T)  =  1.  Similarly,  if 

— 1, for every 

and  Cn  is  the  n-element  cycle,  then  tw(C)  =  2.  At  the 
other end  of the scale, 
Computing the treewidth of a graph is an intractable problem. 
Specifically, the following problem is NP-complete:  given a 
graph H and an  integer 
Nonetheless, 
Bodlaender [Bod93]  showed that for every  fixed  integer  k  > 
1, there is a linear-time algorithm such that, given a graph H, 
it determines whether or not 

The  notion of treewidth  can  be defined  for arbitrary finite 
using  the  Gaifi 
relational  structures  A  = 
man  graph  GA  of the  structure  A.  Specifically,  tw(A)  = 
tw(G(A)),  where  G ( A)  =  (A,E)  and 

, is 

occur in a tuple of 
In  what follows, 
will  denote  the  class  of all  relational 
structures of treewidth less than  k over a fixed relational vo­
cabulary. 

for some  i. 

Dechter and Pearl [DP891 and Freuder lFre90j showed that 
the  classes  of  structures  of  bounded  treewidth  give  rise  to 
large islands of tractrability of uniform constraint satisfaction. 
is a positive integer, 
Theorem 6.2: 
then 

CSP{T{k),All)isinP. 

[DP89; Fre90l  If 

The polynomial-time algorithm for CSP(T(k), All)  in  the 
above theorem is often described as a bucket elimination al(cid:173)
gorithm [Dec99].  It should be noted that it is not a constraint 
propagation algorithm. Instead, this algorithm uses the bound 
on the treewidth to test if a solution to the constraint satisfac­
tion  problem exists  by  solving  a join  evaluation  problem  in 
which all intermediate relations are of bounded arity. 

INVITED SPEAKERS 

1593 

Kolaitis  and  Vardi  LKVOOb],  and  Dalmau,  Kolaitis  and 
Vardi  [DKV02]  investigated  certain  logical  aspects  of  the 
treewidth  of  a  relational  structure  and  showed  that  this 
combinatorial  concept  is  closely  connected  to  the  canoni­
cal  conjunctive  query  of the  structure  being  definable  in  a 
fragment  of  first-order  logic  with  a  fixed  number  of  vari­
ables.  This  made  it possible  to  show  that the tractability  of 
CSP(T(k), All)  can  be  explained  in  terms  of expressibility 
in  k-Datalog.  Moreover,  it  led  to  the discovery of larger is­
lands of tractability of uniform constraint satisfaction. 
Definition 6.3:  Let 

be a positive integer. 

•  FOk  is  the collection of all  first-order  formulas with  at 

most k distinct variables. 

•  Lk  is  the  collection  of  all 

-formulas  built  using 
atomic formulas, conjunction, and existential first-order 
quantification only. 

As an example, it is easy to see that if  Cn  is the n-element 
then the canonical conjunctive query  QCn  is 
is  logically equivalent 

cycle, 
expressible  in  L3.  For instance, 
to 

As  mentioned  earlier,  for  every 
we  have  that 
tw(Cn)  =  2.  The  next  result  shows  that  this  relationship 
between treewidth and number of variables needed to express 
the canonical conjunctive query is not an accident. 
Theorem 6.4: 
integer. 
// 
is expressible  in  Lk. 

then  the  canonical conjunctive  query  QA 

[KVOOb;  DKV02]  Let  

be  a positive 

• 

•  If  B 

is  an  arbitrary,  but 

fixed,  structure, 

then 

is expressible  in  k-Datalog. 

•  CSP(T(k), All)  can be solved in polynomial time by de(cid:173)
termining whether,  given a  structure 
and an 
arbitrary structure  B,  the Spoiler or the Duplicator wins 
the  (3, k)-pebble on  A  and B. 

As  a consequence of the above Theorem 6.4,  we  see that 
CSP(T(A:),^4//)  can  be  solved  in  polynomial  time  using  a 
constraint propagation algorithm  that is  quite different from 
the bucket elimination algorithm in Theorem 6.2. 
Definition 6.5:  Let A and B be two relational structures. 

•  We  say  that  A  and  B  are  homomorphically equivalent, 

if there are homomorphisms h  : 

denoted 
B  and h'  : 

•  We say that B is the core of A, and write core(A)  =  B, 

if 

1.  B  is  a substructure of A. 
2.  There is no homomorphism h  :  B  ->  B'  from B to 

a proper substructure B;  of B. 

and core 

Clearly, core 

Moreover, 
if  if  H  is  a  2-colorable  graph,  then  core(H) 
= 
It 
should be note that cores play an important role in database 
query processing and optimization  (see  [CM77]).  The next 
result shows that they can also be used to characterize when 
the canonical conjunctive query is definable in Lk. 

Theorem 6.6: 
be  a  positive  integer  and  A  a 
relational structure. Then the following statements are equiv(cid:173)
alent. 

Let 

•  QA  is  definable  in  Lk. 
•  There is a structure 

If 

Definition 6.7: 
is the class of all relational structures over some fixed vocab­
ulary  that  are  homomorphically equivalent  to  a  structure  in 
T(k). 

is a positive integer, then 

Equivalently, 

is  the class  of all  relational  struc­

tures A such that core(A)  has treewidth less than k. 

. 

that  T(k) 

It  should  noted 

is  properly  contained 

in 
Indeed,  it  is  known  that  there  are  2-colorable 
graphs of arbitrarily  large  treewidth.  In  particular,  grids are 
known  to  have  these  properties  (see  IDF991).  Yet,  these 
graphs are members  of 
Theorem 6.& 

[DKV02]  Let 

since their core is K2. 
be a positive integer. 
fixed,  structure, 
in  k-Datalog. 

then 

•  If  B 

is  an  arbitrary,  but 

CSP(H(T(k)),{B}) 
•  CSP {n(T(k)), All) 

is  expressible 

is 

Moreover, 
P. 
in  polynomial 
CSPXri(T(k)),All)  can  be  solved 
time  by  determining  whether,  given  a  structure 
and an  arbitrary structure  B,  the  Spoiler 

in 

or  the  Duplicator wins the 

-pebble on  A  and B. 
The preceding Theorem 6.8 yields new islands of tractabil­
ity  for uniform constraint  satisfaction  that properly subsume 
the  islands of tractability constituted by the classes  of struc­
tures  of bounded treewidth.  However,  this  expansion  of the 
tractability landscape comes at a certain  price.  Specifically, 
as seen earlier, for every fixed k  >  2, there is a polynomial-
algorithm  for determining  membership  in  T(k)  [Bod93].  In 
contrast, it has been shown that, for every fixed k  >  2, deter­
mining membership in  H(T(k))  is an NP-complete problem 
[DKV021.  Thus,  these new islands of tractability are not as 
easily accessible as the earlier ones. 

Since  H{T{k))  contains  structures  of  arbitrarily 

large 
treewidth, the bucket elimination algorithm cannot be used to 
solve 
All)  in  polynomial  time.  Thus,  Theo­
rem 6.8 also shows that determining the winner of the (3, k)-
pebble is a polynomial time algorithm that applies to islands 
of  tractability  not  covered  by  the  bucket  elimination  algo­
rithm. 

It is  now natural  to ask whether there are classes  A  of re­
lational structures over some  fixed  vocabulary such that they 
and CSP(\4, All)  is solv­
are larger than the classes 
able in polynomial time.  A rather unexpected and remarkable 
new result by Grohe  [Gro03]  essentially shows that no  such 
classes exist, provided a certain complexity-theoretic hypoth­
esis is true. 
If A  is 
Theorem 6.9: 
a  recursively  enumerable  class  of relational  structures  over 
some  fixed  vocabulary  such  that  CSP(A,All)  is  in  P,  then 
there is a positive integer k such  that 

[Gro03] Assume that  FPT   W[l]. 

1594 

INVITED SPEAKERS 

a study  through Datalog  and  group theory.  SIAM J.  on 
Computing,  28:57-104,  1998.  Preliminary  version  in 
Proc.  25th  ACM  Symp.  on  Theory  of Computing,  May 
1993, pp. 612-622. 

[GJ79]  M.  R.  Garey  and  D.  S.  Johnson.  Computers  and  In-
tractability - A Guide to the Theory of NP-Completeness. 
W. H. Freeman and Co.,  1979. 

[Gro03]  M.  Grohe.  The complexity  of homomorphism  and  con(cid:173)
straint  satisfaction  problems  seen  from  the  other  side. 
Submitted for publication, 2003. 

[JCC98]  P.  Jeavons,  D.  Cohen,  and  M.C.  Cooper.  Constraints, 
consistency  and  closure.  Artificial  Intelligence,  101(1-
2):251-65, May  1998. 

[JCG97]  P. Jeavons, D. Cohen,  and M. Gyssens.  Closure proper(cid:173)
ties  of  constraints.  Journal  of the  ACM,  44(4):527-48, 
1997. 
P.  Jeavons.  On  the  algebraic  structure  of combinatorial 
problems.  Theoretical Computer Science, 200(1-2): 185-
204, 1998. 

[Jea98] 

[KV90]  Ph.  G.  Kolaitis  and  M.  Y.  Vardi.  0-1  laws for infinitary 
logics.  In  Proc.  5th IEEE Symp.  on  Logic  in  Computer 
Science, pages 156-167, 1990. 

[KV95]  Ph. G. Kolaitis and M. Y Vardi.  On the expressive power 
of Datalog:  tools and a case study.  Journal of Computer 
and System Sciences, 51 (1): 11 0-1 34, August 1995. 

[KVOOa]  Ph.G.  Kolaitis  and  M.Y  Vardi.  Conjunctive-query  con(cid:173)
tainment  and  constraint  satisfaction.  Journal  of Com(cid:173)
puter and System Sciences,  pages  302-332,  2000.  Ear(cid:173)
lier version  in:  Proc.  17th ACM  Symp.  on Principles of 
Database Systems (PODS  '98). 

[KVOOb]  Ph.G.  Kolaitis  and  M.Y  Vardi.  A  game-theoretic  ap(cid:173)
proach to constraint satisfaction. In Proc. of the 17th Na(cid:173)
tional  Conference  on  Artificial  Intelligence  (AAAI2000), 
pages  175-181,2000. 

[Lad75]  R.  E.  Ladner.  On  the  structure  of polynomial  time  re-
ducibility.  Journal  of the Association for  Computing  Ma(cid:173)
chinery, 22(1): 155-171,  1975. 

[Mon74]  U.  Montanari.  Networks  of  constraints: 

fundamental 
Infor(cid:173)

properties  and  application  to  picture  processing. 
mation Science, 7:95-132,  1974. 
J. Pearson and P. Jeavons. A survey of tractable constraint 
satisfaction problems.  Technical Report CSD-TR-97-15, 
Royal Holloway University of London,  1997. 
T.J.  Schaefer.  The complexity of satisfiability problems. 
In Proc. 10th ACM Symp. on Theory of Computing, pages 
216-226,  1978. 
J.  D.  Ullman.  Database and Knowledge-Base  Systems, 
Volumes I and II.  Computer Science Press,  1989. 

[PJ97] 

[Sch78] 

[U1189] 

The hypothesis  FPT   W[l]  is  a  statement  in parametrized 
complexity that is analogous to the hypothesis P 
NP, and 
it  is  widely  accepted  as  being  true  (see  [DF99]).  In  effect, 
Grohe's Theorem 6.9 is a converse to Theorem 6.8. Together, 
these two theorems yield a complete characterization of all is(cid:173)
lands of tractability of the form CSP(A, All).  Moreover, they 
reveal  that  all  tractable  cases  of the  form  CSP(A,  All)  can 
be  solved  by  the  same  polynomial-time  algorithm,  namely, 
the algorithm for determining the winner in the 
-pebble 
game.  In  other words,  all  tractable cases  of constraint sati-
faction of the form CSP(A, All) can be solved in polynomial 
time using constraint propagation. 

References 
[Bib88]  W. Bibel.  Constraint satisfaction from a deductive view(cid:173)

point.  Artificial  Intelligence,  35:401-413,  1988. 

[Bod93]  H.L.  Bodlaender.  A  linear-time  algorithm  for  finding 
In  Proc.  25th 
tree-decompositions  of  small  treewidth. 
ACM  Symp.  on  Theory  of Computing,  pages  226-234, 
1993. 

[Bul02a]  A.  Bulatov.  A  dichotomy  theorem  for  constraints  on  a 
In  Proc.  43rd  IEEE  Symposium  on 
three-element  set. 
Foundations of Computer Science, pages 649-658, 2002. 
[Bul02b]  A.  Bulatov.  Maltsev  constraints are tractable.  Technical 

[Bul03] 

Report PRG-RR-02-05, Oxford University, 2002. 
A. Bulatov.  Tractable conservative constraint satisfaction 
In  Proc.  18th  IEEE Symposium  on  Logic  in 
problems. 
Computer Science, 2003. 

[CM77]  A.K. Chandra and P.M. Merlin.  Optimal implementation 
In  Proc. 
of conjunctive  queries  in  relational  databases. 
9th ACM Symp.  on  Theory  of Computing,  pages  77-90, 
1977. 

[Dec92a]  R. Dechter.  Constraint networks.  In S.C. Shapiro, editor, 
Encyclopedia  of Artificial  Intelligence,  pages  276-185. 
Wiley, New York,  1992. 

[Dec92b]  R.  Dechter.  From  local  to  global  consistency.  Artificial 

Intelligence,  55(1):87-107,  May  1992. 

[Dec99]  R.  Dechter.  Bucket  elimination:  a  unifying  framework 
for  reasoning.  Artificial  Intelligence,  113(1—2):41—85, 
1999. 
R.G. Downey and M.R. Fellows.  Parametrized Complex(cid:173)
ity.  Springer-Verlag,  1999. 

[DF99] 

[DKV02]  V.  Dalmau,  Ph.G.  Kolaitis,  and M.Y.  Vardi.  Constraint 
satisfaction,  bounded  treewidth,  and  finite-variable  log(cid:173)
In  Proc.  of the  Eighth  Int.  Conference  on  Princi(cid:173)
ics. 
ples  and Practice  of Constraint  Programming  (CP 2002), 
Lecture  Notes  in  Computer  Science,  pages  311-326. 
Springer, 2002. 

[DP89]  R.  Dechter  and  J.  Pearl.  Tree  clustering  for constraint 
networks.  Artificial Intelligence,  pages  353-366,  1989. 
[EFT94]  H.-D. Ebbinghaus, J. Flum, and W. Thomas.  Mathemat(cid:173)

[Frc90] 

[FV98] 

ical Logic.  Springer-Verlag, 2nd edition,  1994. 
E.C.  Freuder.  Complexity of K-tree structured constraint 
In  Proc.  of 8th  National  Confer(cid:173)
satisfaction  problems. 
ence  on Artificial Intelligence,  pages  4-9,  1990. 
T  Feder  and  M.Y.  Vardi.  The  computational  structure 
of  monotone  monadic  SNP  and  constraint  satisfaction: 

INVITED SPEAKERS 

1595 

