Formalizing Communication Protocols for Multiagent Systems

∗

Munindar P. Singh

Department of Computer Science
North Carolina State University
Raleigh, NC 27695-8206, USA

singh@ncsu.edu

Abstract

Protocols structure interactions among communi-
cating agents. A commitment machine models a
protocol in terms of how the commitments of the
various parties evolve. Commitment machines thus
support ﬂexible behavior while providing a mean-
ingful basis for compliance with a protocol. Unfor-
tunately, current formulations of commitment ma-
chines are not sufﬁciently general or rigorous.
This paper develops generalized commitment ma-
chines (GCMs) whose elements are described
generically in terms of inferences, and whose com-
putations are inﬁnite (thus supporting nonterminat-
ing protocols). This paper shows how a GCM can
be understood as a nondeterministic B¨uchi automa-
ton (BA), whose acceptance condition accommo-
dates inﬁnite as well as ﬁnite executions.
Deterministic BA are readily emulated by conven-
tional software, e.g., a script running in a Web
browser. In general, nondeterministic BA may have
no equivalent deterministic BA. However, under
well-motivated technical conditions, a GCM yields
a deterministic B¨uchi automaton that, although not
necessarily equivalent in automata theory terms, is
sound (produces only computations allowed by the
GCM) and complete (produces the effect of any
computation allowed by the GCM).

1 Introduction
Protocols streamline communication and enable the develop-
ment of interoperable agents by independent vendors. The
participants in a protocol should be able to exploit opportu-
nities offered by the environment, negotiate and exploit spe-
cial relationships with others, and handle exceptions. Unfor-
tunately, conventional engineering techniques for specifying
and enacting protocols are tedious and result in interactions
that are unnecessarily rigid [Yolum and Singh, 2002].

Work on commitment machines (CMs) shows how repre-
senting and inferencing on commitments can produce ﬂexible
protocols while providing a basis for compliance [Chopra and

∗This research was partially supported by the National Science

Foundation under grant DST-0139037.

Singh, 2004; Winikoff et al., 2005; Yolum and Singh, 2002].
To simplify comparison with previous work, we use NetBill
as an example protocol.
In NetBill, a customer requests a
quote for some goods, followed by the merchant sending the
quote. If the customer accepts the quote, the merchant de-
livers the goods. The customer then pays. After receiving
the payment, the merchant sends a receipt to the customer.
Figure 1(l) (or “left”) is an FSM representation of NetBill.
Figures 1(c) (“center”) and (r) (“right”) are discussed below.

1

3

5

7

C: rfq

M: offer

C:accept

M: goods

C: pay

M: receipt

2

4

6

j

t
c
e
e
r
 
:

C

1

3

5

C: rfq

M: offer

C:accept

M: goods

C: pay

7 M: receipt

2

4

6

j

t
c
e
e
r
 
:

C

1

3

5

C: rfq

M: offer

C:accept

M: goods

C: pay

M: receipt

2

4

6

Figure 1: NetBill automata: original (l); terminating but un-
bounded (c); and nonterminating (r). States 1 are initial and 7
are ﬁnal. Section 2.4 explains state 6 of (r). C and S refer to
message senders customer and merchant, respectively

The above papers observe that the original NetBill is quite
rigid. It cannot handle natural situations such as (1) a mer-
chant proactively sending a quote, mimicking the idea of ad-
vertising a price; (2) a customer sending an “accept” message
before requesting a quote (as in cases of trust or urgency); (3)
a merchant sending the goods prior to the customer accepting
(as in a trial offer). These papers show how to model proto-
cols based on commitments, enabling each participant to per-
form a wider variety of actions yet ensure its own compliance
and check others’ compliance based on their actions.

Although promising, previous work on CMs is not sufﬁ-
ciently general, rigorous, or clear in its assumptions. Yolum
and Singh model actions in restrictively. Their approach
only indirectly models the discharge of a commitment. Their
strong point is a compilation of CMs to ﬁnite state machines.
Winikoff et al. use the event calculus to reconstruct some
of Yolum and Singh’s work. They improve the methodology
by which commitments are modeled, but don’t study com-
pilation as such. Chopra and Singh consider a richer, non-
monotonic theory of action based on causal logic. They don’t
discuss compilation except the general translation of causal
logic into a transition system.

IJCAI-07

1519

As a case in point, current and emerging ﬁnancial protocols
are not adequately formalized. For example, price discovery
protocols, which are crucial for wholesale foreign exchange
transactions, are conventionally described via scenarios and
text descriptions [TWIST, 2006]. However, such descriptions
are ambiguous and unwieldy. They treat each of several cases
separately, losing opportunities for generalization and com-
pactness. Our preliminary work with TWIST captures the
key commitments and succinctly represents multiple scenar-
ios using a few primitive patterns, that can be validated mod-
ularly. The value of commitments in modeling and analysis
is clear; this paper strengthens their operational aspects.

Previous work assumes that a CM necessarily includes all
states that are reachable through the actions modeled. How-
ever, the design of a protocol can involve considerations such
as which states to include, e.g., to respect integrity and secu-
rity constraints, and participants’ preferences. This is espe-
cially so when subtle organizational requirements or complex
roles are involved. Likewise, although nonmonotonic speciﬁ-
cations can be valuable, monotonic representations that enu-
merate the modeled conditions facilitate veriﬁcation of sim-
pliﬁed, high-performance automaton-based implementations
that nevertheless follow a speciﬁed protocol.

This paper introduces generalized commitment machines
(GCMs), which are a more general and rigorous version of
CMs. It introduces a simple approach for modeling actions,
so that we can clearly state the key requirements on them.
The action models can be expressed in a variety of existing
formalisms, including causal logic and event calculus. This
paper handles the complete set of commitment operations.

Additionally, the semantics of GCMs is based on inﬁnite
computations, thus providing a proper treatment of nontermi-
nating (and even terminating) protocols. To motivate nonter-
mination, notice that protocols can readily have cycles. Fig-
ure 1(c) introduces a reject transition, which induces a cycle.
Thus unbounded computations can be produced. However, if
our model is a traditional ﬁnite automaton, each computation
would terminate in a ﬁnal state of the automaton. By contrast,
if we automatically restart NetBill upon sending a receipt and
interpret it as not having a ﬁnal state but requiring that a good
state (say, state 6) occurs inﬁnitely often, then we would bring
about inﬁnite computations (Figure 1(r)). A good state is one
in which some desirable condition, relative to design goals,
is achieved. In traditional applications of automata, a good
state is typically one where a stimulus has been responded to.
For GCMs, a simple domain-independent basis may be that a
good state is one where there are no pending commitments.

More natural nonterminating protocols involve maintain-
ing a relationship (as in an organization) rather than com-
pleting a transaction. Participants of such protocols would
continually send messages and respond as often as required.
One can think of the underlying relationship as a standing
agreement, analogous to those in real-life organizations or
distributed systems. You don’t want a multiagent system to
terminate any more than you want your OS to terminate.

GCMs are speciﬁed modularly via sets of inference rules.
We cleanly separate rules involving (1) generic expectations
from action theories, (2) commitment operations, (3) how
commitment operations are “constituted” in the setting being

modeled, and (4) how a protocol should function, i.e., “reg-
ulative” rules in force. Here, (1) and (2) are ﬁxed; (3) and
(4) vary for each protocol. The above kinds of rules can be
captured in a variety of existing action formalisms. Impor-
tantly, GCMs are compiled in a novel manner into determin-
istic B¨uchi automata, a well-known model of inﬁnite com-
putations [Thomas, 1990]. Automata facilitate veriﬁcation;
deterministic representations can be directly executed by a
computer using a single thread, in constant space.

Brieﬂy, our contributions are as follows. We seek a compu-
tational model of protocols that is natural for humans: thus it
must reﬂect semantics. In general, producing an executable,
deterministic representation can cause an exponential blow
up and include unnatural states. Using semantics, we can map
GCMs to deterministic automata with natural states.

2 Technical Framework

We introduce our action representation, and review commit-
ments and B¨uchi automata. Below, x, y, z are agents; p, q,
etc. are formulas; and α is an atomic proposition or its nega-
tion: identify α with ¬¬α.

2.1 Generic Action Theory

The meaning of an action is speciﬁed in terms of the propo-
sition it brings about (reﬂecting “causes” in causal logic or
“initiates” in event calculus) under different conditions. Each
action is described via an action theory, Δ, i.e., a set of ax-
ioms that capture how the state of a protocol evolves when
an action occurs. For simplicity, the performer of the action
is kept implicit in the action label. Deﬁnition 1 describes ac-
tion axiom schemas, which correspond to potential transitions
(some of which might be allowed in a GCM).

Deﬁnition 1 p
ing action a in a state where p holds.

(cid:3)→q means that q is a consequence of perform-

a

a

If p holds and p

(cid:3)→ q, then performing a yields q. When q is
¬p, a overturns p; when q is false, that means a is impossible
if p holds. The relation a
(cid:3)→ is closed under the inference rules
below. An action theory Δ must respect these rules. Below
p (cid:4) q means that q is a logical consequence of p.

r (cid:4) u
p (cid:4) q
−−−−−−−−−−−−−−−−−−−−−−−−−

a

a

(cid:3)→ r
q
(cid:3)→ u
p
(cid:3)→ q
r
r
−−−−−−−−−−−−−−−−−
(cid:3)→ p ∧ q

(cid:3)→ p
r

a

a

a

(CONSEQUENCE)

(CONJUNCTION)

The following is not an inference rule but a requirement

that the a
a

a

(cid:3)→ relation preserve consistency.
(cid:3)→ q
p
−−−−−−−−−−−
¬(p
(cid:3)→ ¬q)
q (cid:6)(cid:4) ¬α
p
−−−−−−−−−−−−−−−−−−
(cid:3)→ q ∧ α

(cid:3)→ q
p ∧ α

a

a

(CONSISTENCY)

(INERTIA)

INERTIA speciﬁes that if α holds before a and isn’t over-
turned by a, then α continues to hold after a. INERTIA is not
required here but is a convenient property of action theories.

Example 1 Example of overturn and inertia: Consider a state
s where goods ∧ ¬pay holds. Now if payment is made, the
new state is s(cid:2) where goods ∧ pay holds.

IJCAI-07

1520

2.2 Commitments
A commitment is an explicitly manipulable directed obliga-
tion (in a context, ignored here for simplicity).

Deﬁnition 2 A commitment Cx,yp relates a debtor x, a cred-
itor y, and a condition p. Speciﬁcally, x commits to y to bring
about p.

Commitment Actions
The creation and manipulation of commitments can be de-
scribed using the following operations, modeled as actions.

(cid:3)→

Cx,yp: establish

• true create(x,Cx,yp)
• p ∧ Cx,yp discharge(x,Cx,yp)
(cid:3)→
• Cx,yp cancel(x,Cx,yp)
• Cx,yp release(y,Cx,y p)
• Cx,yp assign(y,z,Cx,y p)
• Cx,yp delegate(x,z,Cx,y p)

(cid:3)→

(cid:3)→

(cid:3)→

¬Cx,yp: resolve and remove

¬Cx,yp: remove (by debtor)

¬Cx,yp: remove (by creditor)

Cx,zp ∧ ¬Cx,yp: change creditor

(cid:3)→

Cz,yp ∧ ¬Cx,yp: change debtor

A debtor who cancels a commitment may be subject to penal-
ties whereas a creditor may release a commitment (typically
for organizational reasons) with no penalties.
Deﬁnition 3 A conditional commitment CCx,y(p, r) means
that if antecedent p becomes true, then the debtor x will be-
come committed to bringing about consequent r.

When a conditional commitment’s antecedent becomes
true, it is discharged and a commitment for its consequent
is created (typically, z = y):

• CCx,y(q, r) detach(z,CCx,y(q,r))

(cid:3)→

¬CCx,y(q, r) ∧ Cx,yr

When a conditional commitment’s consequent becomes true,
it is discharged and nothing else is needed (typically, z = x):

• Before the customer pays, the merchant sends the re-
ceipt, making receipt true. The conditional commitment
is terminated, but no other commitment is created: the
customer did not commit to paying (eliminate).

a

2.3 Mapping to Existing Logics
(cid:3)→ deﬁned above are generic
The inference schemas on
and can be represented in more than one existing formal-
ism. Hence, an interpreter for any of these formalisms can
be plugged in to derive appropriate inferences. The following
causal laws show how some commitment actions are captured
in causal logic [Chopra and Singh, 2004, § 4.1].

1. Discharge: p causes ¬Cx,yp if Cx,yp
2. Detach: maps to two expressions

p causes ¬CCx,y(p, r) if CCx,y(p, r)
p causes Cx,yr if CCx,y(p, r)

3. Eliminate: r causes ¬CCx,y(p, r) if CCx,y(p, r)

The following event calculus expressions capture the same
actions as the above [Winikoff et al., 2005, Fig. 7] (time is
explicit here, but not speciﬁcally used i this formalization):

1. Discharge:

Terminates(e, Cx,yp, t) ← HoldsAt(Cx,yp, t) ∧
Happens(e, t) ∧ Subsumes(p(cid:2), p) ∧ Initiates(e, p(cid:2), t)

2. Detach: maps to two expressions

Initiates(e, Cx,yp, t) ← HoldsAt(CCx,y(p, q), t) ∧
Happens(e, t) ∧ Subsumes(p(cid:2), p) ∧ Initiates(e, p(cid:2), t)
Terminates(e, CCx,y(p, q), t) ←
HoldsAt(CCx,y(p, q), t) ∧ Happens(e, t) ∧
Subsumes(p(cid:2), p) ∧ Initiates(e, p(cid:2), t)

3. Eliminate: Terminates(e, CCx,y(p, q), t) ←
HoldsAt(CCx,y(p, q), t) ∧ Happens(e, t) ∧
Subsumes(q(cid:2), q) ∧ Initiates(e, q(cid:2), t)

• CCx,y(q, r) eliminate(z,CCx,y(q,r))

(cid:3)→

¬CCx,y(q, r)

We could just as easily use ECASL, the Extended Cognitive
Agent Speciﬁcation Language [Khan and Lesp´erance, 2006].

Constituting Commitment Actions
The above rules provide the semantics of commitment ac-
tions. In each setting, the actions would be performed in some
domain-speciﬁc manner. In protocols, commitment actions
correspond to message types. In some cases, the messages
may combine the effects of multiple commitment actions. Or,
as in the case of partial returns and payments, multiple mes-
sages may be needed to implement one action. For example,
paying $3 would replace a commitment to pay $9 by a com-
mitment to pay $6. The domain action theory would capture
such requirements.

Example 2 Consider
CCm,c(pay, receipt) meaning that
commit to sending a receipt if the customer pays.

conditional

commitment
the merchant would

the

• The customer pays ﬁrst, making pay true. The con-
ditional commitment is terminated and a new commit-
ment, Cm,creceipt, is created in its stead (detach). When
the merchant actually sends the receipt, i.e., when the
proposition receipt becomes true, then the commitment
Cm,creceipt is discharged (discharge).

2.4 B ¨uchi Automata
Finite state machines (FSMs) have long been used to specify
protocols. The acceptance condition of FSMs requires termi-
nation in a ﬁnal state. But, as Section 1 argues, many inter-
esting protocols are nonterminating. To model such protocols
requires that we consider automata over inﬁnite words.

B¨uchi automata (BA) have ﬁnitely many states and the
same transition rules as FSMs. However, their acceptance
condition handles nonterminating computations by requiring
that a good state (see Section 1) be visited inﬁnitely often.
Deﬁnition 4 A B¨uchi automaton is a ﬁve-tuple, B =
(cid:8)S, A, s0, G, δ(cid:9), where S is a set of states, A is the alphabet,
s0 ∈ S is the start state, G ⊆ S is a set of good states, and
δ ⊆ S × A × S is the transition relation.

Below, ω is the ﬁrst inﬁnite ordinal. A computation τ =
(cid:8)s0, a0, s1, . . .(cid:9) is an ω-long alternating series of states and
intervening actions. For a computation τ , inf(τ ) is the set of
states that occur inﬁnitely often in τ . Throughout this paper,
B is a BA and τ is a computation.

IJCAI-07

1521

Deﬁnition 5 τ is realized by B if and only if (∀i ∈
ω, (cid:8)si, ai, si+1(cid:9) ∈ δ) and inf(τ ) ∩ G (cid:6)= ∅.

Figure 1(r) is an example BA with S = the set of vertices, A
= the set of edge labels, s0 = 1, G={6} shown in reverse
video, and δ = the set of edges. The computation that cycles
through states 1, 2, 3, 4, 5, 6, namely, (cid:8)1, C : rfq, 2, M : oﬀer,
3, C : accept, 4, M : goods, 5, C : pay, 6, M : receipt, . . .(cid:9) is
accepted by this BA, because it visits state 6 inﬁnitely often.
The computation that cycles through states 1, 2, 3 is not ac-
cepted because it does not visit state 6. Figure 2 shows BA
for the languages a(ba + b)ω and a(a + b)ω, respectively. No-
ω, but Figure 2(l) doesn’t. Thus,
tice that Figure 2(r) accepts a
viewed in automata theoretic terms, the two are obviously not
equivalent.

1

a
b

2

b

a

1

2

a, b

Figure 2: (l) nondeterministic BA; (r) deterministic BA

The move to inﬁnite computations complicates some as-
pects of the automata. Importantly, whereas all nondetermin-
istic FSMs have an equivalent deterministic FSM, some non-
deterministic BA have no equivalent deterministic BA. Fig-
ure 2(l) is a famous example of a BA that cannot be deter-
minized. A deterministic BA can be efﬁciently emulated by
a script:
if the BA is correct we know the script complies
with the given protocol. This paper shows how to produce (if
possible) a correct deterministic BA for a protocol.

3 Generalized Commitment Machines

A generalized commitment machine (GCM) is speciﬁed via
states whose content is captured via logical expressions, ac-
tions and an action theory to transition between the states, and
a set of good states. Terminating computations can be mod-
eled by transitioning at their end to an artiﬁcial good state
with a self-loop. Given a state, the new state reached by per-
forming an action is logically inferred. In effect, a GCM spec-
iﬁes meanings of the states, and lets inferencing do the rest.

Since we construct BA from the same set of states and ac-
tions as GCMs, we use the same symbols S, s0, G, and A
in both deﬁnitions. Below, p ≡ q means that p and q are
logically equivalent, that is, p (cid:4) q and q (cid:4) p.
Deﬁnition 6 A GCM is a tuple P = (cid:8)S, A, s0, Δ, G(cid:9), where
S is a ﬁnite set of states, A is a ﬁnite set of actions, , s0 ∈ S
is the start state, Δ is an action theory, and G⊆S is a set of
good states. Members of S are logically distinct: (∀si, sj ∈
S : (si ≡ sj) ⇒ (si = sj)); false (cid:6)∈ S; any state stronger than
a good state is also good: (∀si ∈ G, sj ∈ S : (sj (cid:4) si) ⇒
(sj ∈ G)).
Deﬁnition 7 τ is generated by a GCM P if and only if (∀i ∈
ω : si ∈ S, (∃ai ∈ A : si

(cid:3)→ si+1)), and inf(τ ) ∩ G (cid:6)= ∅.

ai

Throughout this paper, P (for “protocol”) is a GCM. Given
q, r ∈ S, a ∈ A, P transitions from q to r under action a if
(cid:3)→ r. In effect, a GCM functions as an inference-
and only if q
driven (nondeterministic) BA.

a

Example 3 Previous work formalizes NetBill and other ter-
minating protocols as commitment machines. A similar ap-
proach applies here. Brieﬂy, the modeling steps are:

• Model the atomic propositions, such as request or pay.
• Introduce the commitments needed. For example, ac-
cept abbreviates CCc,m(goods, pay), i.e., if customer c
receives the goods, he would pay merchant m.

• Identify the states in S. For example, state 3 in Fig-
ure 1 means that the merchant has made an offer thus
committing to delivering goods and sending a receipt
upon payment: formally, request ∧ promiseReceipt ∧
promiseGoods.

• Identify the actions in A: these are the messages ex-

changed, e.g., sendAccept and sendGoods.

• Assert action theory axioms, Δ:

cept: true sendAccept
promising receipt: truesendGoods

(1) sending an ac-
(cid:3)→ accept; (2) delivering the goods and
(cid:3)→ goods∧promiseReceipt.
• Identify the good states in G. For example, (1) the cus-
tomer has made a request but no commitments have
been made: request; (2) the merchant has delivered
the goods and the receipt and the customer has paid:
request ∧ goods ∧ pay ∧ receipt.

a

b

(cid:3)→ p ∧ q, (2) p ∧ q

(cid:3)→ p ∧ q, and (3) p ∧ q

Example 4 A GCM analogous to Figure 2(l). State 1 is p∨q;
state 2 (∈ G) is p ∧ q, and Δ includes the following axioms:
(1) p ∨ q
(cid:3)→ p ∨ q.
This example helps relate GCMs to the well-known BA of
Figure 2(l) (revisited in Section 4). A scenario where such
a GCM may occur is if p and q refer to some organizational
relationships. Action a strengthens the relationship from p or
q to p ∧ q. Action b conﬁrms the relationship or can weaken
it. (One can imagine that b was originally speciﬁed for two
organizational roles, now being played by the same party.)

b

4 Compiling GCMs into B ¨uchi Automata

Reasoning with declarative representations at runtime can be
expensive, may increase the code footprint of the agents.
Many applications such as ﬁnancial transactions [TWIST,
2006] call for ﬂexibility when designing a protocol but rigid
enactment to make performance guarantees. Also, the popu-
larity of AJAX indicates the potential for simpliﬁed interact-
ing agents. Compiling a GCM into a deterministic BA is thus
highly desirable. A GCM is in essence a nondeterministic
BA. In general, an equivalent deterministic BA may not exist.
But we can exploit the semantics of the protocol to produce
(if possible) a deterministic BA that for practical purposes is
equivalent.

4.1 Determinism and Soundness
The states, initial state, and good states of a GCM map
straight to those of a BA. More importantly, to ensure de-
terminism, we can choose no more than one transition for a
given state and action: this is what Algorithm 1 does.

To understand the min calculation in Algorithm 1, imagine
that the GCM states are partially ordered according to logical
consequence: si is placed below sj iff si (cid:4) sj. For S ⊆ S,

IJCAI-07

1522

min(S) is the unique minimum, if any, of S according to this
order. For example, assume that performing a in s1 could
yield s2 and s3, where s2 (cid:6)≡ s3. If s2 (cid:4) s3, Algorithm 1
would select s2; if s3 (cid:4) s2, it would select s3; if neither, Al-
gorithm 1 would select nothing, thus omitting the a transition
from s1. Theorem 1 shows that the result is deterministic.

Theorem 1 Algorithm 1 yields a deterministic BA B.
Proof. Assume B has two transitions for the same state
and action, i.e., (cid:8)si, a, sj(cid:9) and (cid:8)si, a, sk(cid:9). Algorithm 1
ensures sj (cid:4) sk and sk (cid:4) sj, i.e., sj ≡ sk. Deﬁnition 6
ensures sj = sk. Thus, B is deterministic.

δ = { };
foreach si ∈ S, a ∈ A do

Si = {sk ∈ S : si
if sj = min(Si) then δ := δ ∪ (cid:8)si, a, sj(cid:9)

(cid:3)→ sk};

a

1

2

3

4

Algorithm 1: Compiling GCM P into a BA B

Example 5 On Example 4, Algorithm 1 would yield the BA
of Figure 2(r) with states 1 and 2, state 2 in G, and transitions
(cid:8)1, a, 2(cid:9) (based on the axiom for a), (cid:8)2, a, 2(cid:9) (based on apply-
ing CONSEQUENCE on the axiom for a), (cid:8)2, b, 2(cid:9) ((cid:8)2, b, 1(cid:9) is
not included, based on line 4 of the algorithm). Thus, even
though Figure 2(l) and Figure 2(r) are not equivalent, based
on our knowledge of the meanings, they are practically equiv-
alent.

Example 5 is fortunate. The compilation doesn’t always
work. The following develops additional steps to make com-
pilation work, or to determine that it cannot work. Correct-
ness has two main aspects. Soundness means that the com-
piled BA won’t realize a computation that the GCM wouldn’t
have generated. Completeness means that if the GCM can
generate a computation, the compiled BA can realize it. Be-
cause the BA’s transitions are chosen from among those in the
GCM, soundness is guaranteed. This is Theorem 2.

Theorem 2 Let P be compiled into B. Then any
computation realized by B is generated by P .

4.2 Completeness via Coherence

In general, because the BA may not include all the transitions
of the GCM, it would not be complete. First, the BA may
have no transition for a state and action, because none is the
(unique) strongest, as required by Algorithm 1. To address
this, the basic idea is to restrict GCMs such that if there is a
transition for a state and action, then there is a strongest tran-
sition for the same state and action: by exploiting the action
rule CONJUNCTION. Deﬁnition 8 captures this as coherence.
However, Figure 3(l) shows a situation where a may occur in
(cid:3)→ q2 both
p and produce q1 and q2. That is, p
hold. In this situation, q1 ∧ q2 (cid:6)∈ S. That is, coherence is
violated.
Deﬁnition 8 For s ∈ S, a ∈ A, the projection of a on s,
(cid:3)→ s(cid:2). A GCM is
πa,s, is the set of states s(cid:2) in S such that s
coherent if (∀s ∈ S, a ∈ A : πa,s (cid:6)= ∅ ⇒ (∃n ∈ S : s
(cid:3)→ n
and (∀s(cid:2) ∈ πa,s : n (cid:4) s(cid:2)))). Here, n is the supremal state for
s and a, meaning it is the strongest resulting state.

(cid:3)→ q1 and p

a

a

a

a

q1

a
a

a
p

q2

q1/\q2

a

a

p

a

q1

b

q2

q1/\q2

b

r1
b

r

r2

Figure 3:
Dashed ellipses represent potential states that are not in S

(l) Lack of coherence; (r) failure of coverage.

Second, a GCM computation may involve a transition that
doesn’t exist in the BA. To address this, the basic idea is that
because of the action rule CONSEQUENCE, although a spe-
ciﬁc GCM computation may not be realized in the BA, a com-
putation taking the strongest state at each step would be real-
ized. Thus the BA would be complete for practical purposes.
Deﬁnition 9 and Lemma 3 capture this intuition.
Deﬁnition 9 A computation τ (cid:2) = (cid:8)s0, a0, s(cid:2)
1, . . .(cid:9) is the se-
mantic supremum of a computation τ = (cid:8)s0, a0, s1, . . .(cid:9) if and
only if τ (cid:2) begins at the same state, involves the same action
sequence as τ , and for each transition (cid:8)si, ai, si+1(cid:9) exercised
by τ , τ (cid:2) exercises a transition (cid:8)s(cid:2)
i+1 is the
strongest consequence of performing a in s(cid:2)
i.

i+1(cid:9) where s(cid:2)

i, ai, s(cid:2)

Lemma 3 Any computation that begins from s0 and is the
semantic supremum of some computation in the GCM can
be realized by the BA produced by Algorithm 1.
Proof. The proof is simply by transﬁnite induction on
computations: consider preﬁxes of length from 0 to ω.

Theorem 4 establishes our main completeness result ﬁ-

nessed for coherent GCMs and supremal computations.

Theorem 4 Given a coherent GCM compiled into a BA, for
any computation generated by the GCM that begins from s0,
there exists a semantic supremum computation realized by
the BA.
Proof. By construction of a coherent GCM and Lemma 3.

4.3 Producing Coherent GCMs
Let’s now consider the question of whether and how an ar-
bitrary GCM P can be mapped into an equivalent coherent
GCM P (cid:2). Producing a coherent GCM requires ensuring that
supremal states exist for each action allowed in each state.

1

2

3

4

5

6

7

8

9

U = minimal states from the above partial order of states;
foreach u ∈ U, a ∈ A do

a

(cid:3)→ v};

Va = {v ∈ U : u
if |Va| ≥ 2 then
Va;

(cid:2)

w =
U = U \ Va ∪ {w};

foreach u ∈ U, a ∈ A do

a

(cid:3)→ true and ¬(∃s ∈ S : u (cid:4) s and s

if u
then announce failure and exit;

a

(cid:3)→ true)

S(cid:2) = S ∪ U ;

Algorithm 2: Producing a coherent GCM with states S(cid:2)

Algorithm 2’s ﬁrst foreach block maintains a set of the
known minimal states in the GCM P (cid:2) being constructed, and

IJCAI-07

1523

examines each of them (including those newly added) to de-
termine what new states are needed to ensure coherence. For
Figure 3(l), this would add q1 ∧ q2 to U (and possibly to S(cid:2)).
Although this would yield a coherent GCM P (cid:2), P (cid:2) may
generate computations that are unrelated to the computations
in P . Consider Figure 3(r). Here q1 ∧ q2 is added to S(cid:2). As-
sume it turns out that our action theory supports q1 ∧ q2
(cid:3)→ s
but does not support that b can occur at q1 or at q2 (i.e., neither
(cid:3)→true hold). Thus introducing q1∧q2 would
q1
generate a computation (cid:8). . . , p, a, q1 ∧ q2, b, . . .(cid:9), which is not
generated by P . Algorithm 2’s second foreach block checks
if the newly added states allow transitions that weren’t al-
lowed by any of the original states they entail. If so, the new
GCM would generate computations not allowed by the orig-
inal GCM, and so the algorithm terminates in failure. This
establishes Theorem 5.

(cid:3)→true nor q1

b

b

b

Theorem 5 For an arbitrary GCM P , if Algorithm 2
succeeds, it produces a coherent GCM whose computations
are generated by or are suprema of computations generated
by P .

5 Discussion
GCMs capture the intuitions of CMs and provide additional
descriptions and expressiveness. They put the work on CMs
on a sound footing and show how to incorporate them in con-
ventional settings. GCMs can apply to a wider variety of
commitment protocols, not just those relating to terminating
transactions. In general, BA cannot be determinized, but tak-
ing advantage of the semantics we can compile a GCM in
many cases.

Other classes of automata on inﬁnite computations exist.
For example, BA can be determinized into M¨uller automata.
However, determinizing involves at least an exponential blow
up in the number of states. More importantly, doing so yields
states that are not intuitive. This paper exploits meaning to
ﬁnd semantically equivalent automata. In essence, it maps an
ω-language into a different ω-language, but one whose com-
putations convey the same meaning as the original.

Previous work on CMs has shown how CMs can enhance a
protocol by naturally allowing a wider range of computations
while ensuring compliance. In general, a GCM need not in-
clude all the states possible from a given set of states and the
action theory, which would lead to large BA.

It is important to note that protocols or GCMs are merely
engineering artifacts. Speciﬁcally, if Algorithm 2 ends in fail-
ure, one might consider altering the GCM so that an accept-
able coherent GCM is produced. From the standpoint of en-
gineering, the selection of states is an important decision: not
all states that are possible are created equal. When states are
selected, criteria such as the following ensure that the result-
ing GCM captures a meaningful protocol: (1) from each state
where a commitment holds, we can reach a state where the
commitment is discharged; (2) like above, but for other com-
mitment operations; (3) eventually the commitment or a com-
mitment resulting from an operation on it is discharged. We
lack the space to discuss methodology further. Sufﬁce it to
say that such requirements can be readily veriﬁed via reacha-
bility analysis on the BA representation of a protocol.

Previous work on protocols either takes an operational
stance or discusses semantics, but generally doesn’t relate the
two. Labrou and Finin [1997] describe a grammar for con-
structing conversations or protocols. They also give a belief
and intention based semantics, but the grammar and seman-
tics are unrelated. By contrast, GCMs provide a semantics
for messages that is directly operationalized.

McBurney and Parsons’ posit spaces protocol consists of
ﬁve locutions: propose, accept, delete, suggest revoke, and
ratify revoke [2003]. Propose and accept are similar to con-
ditional commitments. Delete corresponds to release or dis-
charge. Suggest revoke and ratify revoke enable canceling of
posits. Unlike GCMs, posit spaces do not support compila-
tion to an automata representation.

Endriss et al. [2003] study protocol conformance for an
interaction protocol that is deﬁned as a deterministic ﬁnite
automaton (DFA). The DFA is completely speciﬁed directly,
meaning that it would be rigid or unwieldy for humans to
study. Endriss et al. do not provide formalisms to enable
agents to reason about their interactions as we have done here.

Acknowledgments
Thanks to Martin Purvis for hosting me at the University of
Otago, Dunedin, New Zealand, where this paper was mostly
written. Thanks also to Amit Chopra, Stephen Craneﬁeld,
and the anonymous reviewers for helpful comments.

References
[Chopra and Singh, 2004] Amit Chopra and Munindar P.
Singh. Nonmonotonic commitment machines. AAMAS
ACL Workshop, LNAI 2922, pp. 183–200. Springer, 2004.
[Endriss et al., 2003] Ulrich Endriss, Nicolas Maudet,
Fariba Sadri, and Francesca Toni. Protocol conformance
for logic-based agents. IJCAI, pp. 679–684, 2003.

[Khan and Lesp´erance, 2006] Shakil M. Khan and Yves
Lesp´erance. On the semantics of conditional commitment.
AAMAS, pp. 1337–1344, 2006.

[Labrou and Finin, 1997] Yannis Labrou and Tim Finin. Se-
mantics and conversations for an agent communication
language. IJCAI, pp. 584–591, 1997.

[McBurney and Parsons, 2003] Peter McBurney and Simon
a performative model of e-

Parsons.
commerce. AAMAS, pp. 624–631, 2003.

Posit spaces:

[Thomas, 1990] Wolfgang Thomas. Automata on inﬁnite ob-
jects. Handbook of Theoretical Computer Science, vol-
ume B, pp. 133–192, North-Holland, 1990.

[TWIST, 2006] Transaction workﬂow innovation standards

team, February 2006. http://www.twiststandards.org.

[Winikoff et al., 2005] Michael Winikoff, Wei Liu, and
James Harland. Enhancing commitment machines. DALT
Workshop, LNAI 3476, pp. 198–220. Springer, 2005.

[Yolum and Singh, 2002] Pınar Yolum and Munindar P.
Singh. Commitment machines. ATAL Workshop, LNAI
2333, pp. 235–247. Springer, 2002.

IJCAI-07

1524

