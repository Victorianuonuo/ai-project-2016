PC-DPOP: A New Partial Centralization Algorithm for Distributed Optimization

Adrian Petcu and Boi Faltings

Roger Mailler

Ecole Polytechnique F´ed´erale de Lausanne
email: {adrian.petcu, boi.faltings}@epﬂ.ch

AI Center, SRI International
email: mailler@ai.sri.com

Abstract

introduce

PC-DPOP,

Fully decentralized algorithms
for distributed
constraint optimization often require excessive
amounts of communication when applied to
complex problems.
The OptAPO algorithm
of [Mailler and Lesser, 2004] uses a strategy of
partial centralization to mitigate this problem.
We
new partial
centralization technique, based on the DPOP
algorithm of [Petcu and Faltings, 2005].
PC-
DPOP provides better control over what parts
of the problem are centralized and allows this
centralization to be optimal with respect to the
chosen communication structure.
a
Unlike OptAPO, PC-DPOP
exact predictions about privacy loss,
priory,
communication, memory
computational
requirements on all nodes and links in the network.
Upper bounds on communication and memory
requirements can be speciﬁed.
We also report
strong efﬁciency gains over
OptAPO in experiments on three problem domains.

and

a

allows

for

1 Introduction
Constraint
satisfaction and optimization are powerful
paradigms that model a large range of tasks like scheduling,
planning, optimal process control, etc. Traditionally, such
problems were gathered into a single place, and a centralized
algorithm was applied in order to ﬁnd a solution. However,
problems are sometimes naturally distributed, so Distributed
Constraint Satisfaction (DisCSP) was formalized by Yokoo
et al. in [Yokoo et al., 1992]. Here, the problem is divided
between a set of agents, which have to communicate among
themselves to solve it. To address distributed optimization,
complete algorithms like ADOPT, OptAPO and DPOP have
been recently introduced.

ADOPT [Modi et al., 2003] is a backtracking based
It operates completely
bound propagation mechanism.
decentralized, and asynchronously.
Its downside is that it
may require a very large number of small messages, thus
producing important communication overheads.

OptAPO is a hybrid between decentralized and centralized
It operates as a cooperative mediation process,

methods.

where agents designated as mediators centralize parts
of the problem in dynamic and asynchronous mediation
sessions. Message complexity is signiﬁcantly smaller than
ADOPT’s. However, it is possible that several mediators
solve overlapping problems,
thus needlessly duplicating
effort. Furthermore, the asynchronous and dynamic nature
of the mediation sessions make it impossible to predict what
will be centralized where, how much of the problem will be
eventually centralized, or how big a computational burden the
mediators have to carry. It has been suggested in [Davin and
Modi, 2005] that often a handful of nodes centralize most of
the problem, and therefore carry out most of the computation.
DPOP [Petcu and Faltings, 2005] is a complete algorithm
based on dynamic programming which generates only a
linear number of messages. However, DPOP may produce
large messages and require large amounts of memory, up
to space exponential in the induced width of the problem.
Therefore, DPOP may be infeasible for problems with high
induced width.

We present PC-DPOP, a new hybrid algorithm that is
controlled by a parameter k which characterizes the size of
the largest message, and the amount of available memory.
The algorithm proceeds as normal DPOP, except in the dense
parts of the problem (width greater than k). These are
clustered and centralized in the root of the cluster, which
solves them with a centralized algorithm. Communication
requirements over any link in the network are limited thus to
exp(k). The linear number of messages is preserved.

The rest of this paper is structured as follows: Section 2
formally describes the optimization problem, and introduces
the DPOP and OptAPO algorithms. Section 3 introduces the
PC-DPOP hybrid algorithm, which is evaluated empirically
in Section 4. Section 5 relates PC-DPOP to existing work.
Section 6 brieﬂy discusses privacy, and Section 7 concludes.

2 Preliminaries
Deﬁnition 1 A discrete distributed constraint optimization
problem (DCOP) is a tuple < X , D, R > such that:

• X = {X1, ..., Xn} is a set of variables
• D = {d1, ..., dn} is a set of ﬁnite variable domains
• R = {r1, ..., rm} is a set of relations, where a relation
), ri :
→ R, which denotes how much utility is

ri is any function with the scope (Xi1
di1

× .. × dik

, · · · , Xik

IJCAI-07

167

assigned to each possible combination of values of the
involved variables. Negative amounts mean costs. 1

In a DCOP, each variable and constraint is owned by an
agent. A simplifying assumption [Yokoo et al., 1992] is
that each agent controls a virtual agent for each one of the
variables Xi that it owns. To simplify the notation, we use
Xi to denote either the variable itself, or its (virtual) agent.

This is a multiagent instance of the valued CSP framework
as deﬁned in [Schiex et al., 1995]. The goal is to ﬁnd a
complete instantiation X ∗ for the variables Xi that maximizes
the sum of utilities of all individual relations.

We assume here only unary and binary relations. However,
DPOP and PC-DPOP can easily extend to non-binary
constraints ([Petcu et al., 2006]).

2.1 Depth-First Search Trees (DFS)
PC-DPOP works on a DFS traversal of the problem graph.

Deﬁnition 2 (DFS tree) A DFS arrangement of a graph G is
a rooted tree with the same nodes and edges as G and the
property that adjacent nodes from the original graph fall in
the same branch of the tree (e.g. X0 and X11 in Figure 1).

Figure 1 shows an example DFS tree that we shall refer to
in the rest of this paper. We distinguish between tree edges,
shown as solid lines (e.g. X1 − X2), and back edges, shown
as dashed lines (e.g. X12 − X8, X4 − X0).
Deﬁnition 3 (DFS concepts) Given a node Xi, we deﬁne:

• parent Pi

/ children Ci:

these are the obvious

deﬁnitions (P4 = X2, C1 = {X2, X5}).

• pseudo-parents P Pi are Xi’s ancestors directly

connected to Xi through back-edges (P P5 = {X0}).

• pseudo-children P Ci are Xi’s descendants directly

connected to Xi through back-edges (P C1 = {X4}).

• Sepi is the separator of Xi: ancestors of Xi which are
directly connected with Xi or with descendants of Xi
(e.g. Sep9 = {X0, X8}, Sep2 = {X0, X1}). Removing
the nodes in Sepi completely disconnects the subtree
rooted at Xi from the rest of the problem.

2.2 Optimal Asynchronous Partial Overlay
Optimal Asynchronous Partial Overlay (OptAPO [Mailler
and Lesser, 2005]) is a sound and optimal algorithm for
solving DCOPs that uses dynamic, partial centralization
(DPC). Conceptually, DPC is a technique that discovers
difﬁcult portions of a shared problem through trial and error
and centralizes these sub-problems into a mediating agent
in order to take advantage of a fast, centralized solver.
Overall,
the protocol exhibits an early, very parallel hill
climbing behavior which progressively transitions into a more
deliberate, controlled search for an optimal solution. In the
limit, depending on the difﬁculty of the problem and the
tightness of the interdependences between the variables, one
or more agents may end up centralizing the entire problem in
order to guarantee that an optimal solution has been found.

1Hard constraints (that explicitly forbid/enforce certain value
combinations) can be simulated with soft constraints by assigning
−∞ to disallowed tuples, and 0 to allowed tuples. Maximizing
utility thus avoids assigning such value combinations to variables.

2.3 DPOP: dynamic programming optimization
DPOP is a distributed version of the bucket elimination
scheme from [Dechter, 2003], which works on a DFS. DPOP
has 3 phases.

Phase 1 - a DFS traversal of the graph is done using a
distributed DFS algorithm like in [Petcu et al., 2006]. The
outcome of this step is that all nodes consistently label each
other as parent/child or pseudoparent/pseudochild, and edges
are identiﬁed as tree/back edges. This can be achieved for any
graph with a linear number of messages.

Phase 2 - UTIL propagation is a bottom-up process,
which starts from the leaves and propagates upwards only
through tree edges. The agents send UTIL messages to
their parents. The subtree of a node Xi can inﬂuence
the rest of the problem only through Xi’s separator, Sepi.
Therefore, a message contains the optimal utility obtained in
the subtree for each instantiation of Sepi. Thus, messages
are exponential in the separator size (bounded by the induced
width).

Phase 3 - VALUE propagation top-down, initiated by the
root, when phase 2 has ﬁnished. Each node determines its
optimal value based on the messages from phase 2 and the
VALUE message it has received from its parent. Then, it
sends this value to its children through VALUE messages.

3 PC-DPOP(k) - partial centralization hybrid
To overcome the space problems of DPOP, we introduce the
control parameter k that bounds the message dimensionality.
This parameter should be chosen s.t. the available memory at
each node and the capacity of its link with its parent is greater
than dk, where d is the maximal domain size.

As with DPOP, PC-DPOP also has 3 phases: a DFS

construction phase, an UTIL phase, and a VALUE phase.

3.1 PC-DPOP - UTIL Phase
This is where the algorithm is different from DPOP. The
propagation proceeds as in DPOP where possible, and reverts
to partial centralization where the width exceeds k:

1. the UTIL propagation starts bottom-up exactly like in
DPOP, and proceeds as long as the dimensionality of the
outgoing UTIL messages is below the threshold k.

2. as soon as a node’s outgoing UTIL message has
more than k dimensions, centralization begins (see
Section 3.1). The node does not compute its UTIL
message, but sends to its parent a Relation message that
contains the set of relations (arity at most k) that the
node would have used as an input for computing the
UTIL message. It annotates this message with its ID.

3. Upon receiving such a Relation message, a node tests
to see if its separator is smaller than k. The separator
is determined as the intersection between the nodes on
the root path of the current node and the set of nodes
encountered as dimensions in the messages received
from its children.

• If this is the case,
reconstructs

the node becomes a cluster
root,
the subproblem from the
incoming Relation messages and then solves it

IJCAI-07

168

Figure 1: A problem graph (a) and a DFS tree (b). In low-width areas the normal UTIL propagation is performed. In high
width areas (shaded clusters C1, C2 and C3 in (b)) bounded UTIL propagation is used. All messages are of size at most dk.
Clusters are centralized and solved in the cluster roots (the bold nodes X2, X9, X14).

(see Section 3.1). Then it continues the UTIL
propagation as in DPOP.
Later on, during the VALUE phase, when the
node receives the VALUE message from its parent,
it retrieves the solution from its local cache and
informs nodes in the cluster of their optimal values
via VALUE messages.

• Otherwise, it cannot become cluster root and has to
pass on to its parent all the relevant relations (the
ones received from its children and its own), that it
would otherwise use to compute its UTIL message.
For details, see Section 3.1.

PC-DPOP - Centralization
This process occurs in high-width areas of the problem (e.g.
the shaded areas in Figure 1).
It is initiated by any node
that cannot compute and send its UTIL messages because
that would exceed the dimensionality limit imposed by k.
Any such node produces the union of the relations and UTIL
messages received from children, and its own relations with
its parent/pseudoparents. All these relations can be sent to
its parent in a Relation message, annotated by appending the
node’s ID to the path.

On one hand, this ensures the dimensionality limit k is
observed, as no relation with arity larger than k is produced
or sent over the network. On the other hand, it will allow
the cluster root to reconstruct the subproblem that has to
be centralized, and enable the use of structure sensitive
algorithms like DPOP, AOBB, etc.

Alternatively, to save bandwidth, avoid overload on cluster
root nodes, and also improve privacy, a node can selectively
join subsets of these relations/UTIL messages, s.t.
the
dimensionality of each of the resulting relations is less than k.

The resulting set of relations is then packaged as a Relation
message, annotated with the node’s ID, and sent to the parent
(see Section 3.1). This happens as follows:

1. node Xi receives all UTIL/Relation messages from its

children, if any

2. Xi

forms the union Ui of all

relations in the
UTIL/Relation messages and the relations it has with its
parent and pseudoparents

3. Xi matches pairs of relations in Ui s.t. by joining them
the resulting relation will have k dimensions or less (the
dimensionality of the resulting relation is the union of
the dimensions of the inputs). If the join was successful,
remove both inputs from Ui, and add the result instead.
Try until no more joins are possible between relations in
Ui. This process is linear in the size of Ui.

4. The resulting Ui set is sent to Xi’s parent in a Relation

message

This process proceeds bottom-up until a node Xr with a
separator smaller than k is reached. Xr declares itself a
cluster root and executes the procedures from Section 3.1.

The result of this phase is that minimal, difﬁcult (high-
width) areas of the problem are identiﬁed in a distributed
fashion.
In these areas the algorithm reverts to partial
centralization, by having nodes send to their parents not high
dimensional UTIL messages, but lower arity inputs that could
be used to generate those UTIL messages.

Subproblem reconstruction
Let us assume a cluster root node Xi has received a set of
relations RCi from its children. Each relation ri ∈ RCi has a
set of variables that it involves (scope(ri)), and the path that

IJCAI-07

169

it traveled through until it reached Xi. Xi creates an internal
copy of all the nodes found in the scopes of the relations
received. Then, Xi reconstructs the subtree by placing each
internal variable Xk in its position as follows:

• if Xk is an ancestor of Xi, then it is identiﬁed as such,

because Xi knows the path from root to itself.

• if Xk is a child of Xi, then it is identiﬁed as such.
• otherwise, it is a descendant of Xi.

In this case Xi
deduces its place in the subtree by analyzing backwards
the path recorded in the relations involving Xk. For
example, in Figure 1, X9 receives r0
12, all
annotated with the path X12 − X11 − X10 − X9. X10 is
already a child of X9, so it is then easy to see that X11
is X10’s child and X12 is X11’s child. Thus, the whole
branch X9 − X10 − X11 − X12 is reconstructed.

12 and r8

12, r11

It is interesting to note that this technique allows for
identifying different branches as well. Consider again X9
that also receives r9
13 , all annotated with the path
X13 − X11 − X10 − X9. Following the same reasoning as
before, X9 can infer that X13 is also a child of X11, like X12.
Therefore, X12 and X13 lie in different branches.

13 and r11

13, r10

This makes it possible for a cluster node to reconstruct
the subproblem while preserving structural information. This
is important because it enables the use of high-performance
optimization algorithms that also take advantage of problem
structure. Examples include AOBB [Marinescu and Dechter,
2005], a centralized DPOP [Petcu and Faltings, 2005], etc.

Solving centralized subproblems

The centralized solving occurs in the roots of the clusters
determined by the high-width areas.
In the example of
Figure 1, such a cluster is the shaded area containing
X9, X10, X11, X12, X13.

The root of the cluster (e.g. X9) maintains a cache table
that has as many locations as there are possible assignments
for its separator (in this case dk = d2 locations). As
a normal node in DPOP, the root also creates a table for
the outgoing UTIL message, with as many dimensions as
the size of the separator. Each location in the cache table
directly corresponds to a location in the UTIL message that
is associated with a certain instantiation of the separator. The
cache table stores the best assignments of the variables in the
centralized subproblem that correspond to each instantiation
of the separator.

Then the process proceeds as follows:
• for each instantiation of Sepi, the cluster root solves the
corresponding centralized subproblem. The resulting
utility and optimal solution are stored in the location
of the UTIL message (cache table location, respectively)
that correspond to this instantiation.

• when all Sepi instantiations have been tried, the UTIL
message for the parent contains the optimal utilities for
each instantiation of the separator (exactly as in DPOP),
and the cache table contains the corresponding solutions
of the centralized subproblem that yield these optimal
utilities.

• the cluster root sends its UTIL message to its parent, and

the process continues just like in normal DPOP.

There

are multiple possibilities

choosing an
optimization algorithm for
a
centralized version of DPOP [Petcu and Faltings, 2005],
AOBB [Marinescu and Dechter, 2005], etc.

solving subproblems:

for

Algorithm 1: PC-DPOP - partial centralization DPOP.

PC-DPOP(X , D, R, k): each agent Xi does:
UTIL propagation protocol

1 wait for U T IL/Relation messages from all children
2 if Sepi ≤ k (can send outgoing U T ILPi
3

if incoming are all UTIL (normal DPOP node) then
i as in DPOP and send it to Pi

compute U T ILPi

i ) then

4

5

6

else (this means Xi is the root of a cluster)
reconstruct subproblem from received relations
solve subproblem for each s ∈ (cid:5)Sepi(cid:6) and store
utility in U T ILPi
send U T ILPi

i and solution in local cache
to Pi

i

7
8 else (this means Xi is part of a cluster)
9 Join subsets of incoming UTIL/Relation and relations
with (p)parent with same dimension s.t. for each join,
dim(join) ≤ k
10 send joins to Pi

VALUE propagation(Xi gets Sepi ← Sep∗

i from Pi)

11 if Xi is cluster root then
12

ﬁnd in cache Sol∗ that corresponds to Sep∗
assign self according to Sol∗
send Sol∗ to nodes in my cluster via VALUE msgs

i

13

14

15 else continue VALUE phase as in DPOP

3.2 PC-DPOP - VALUE Phase

The labeling phase has determined the areas where bounded
inference must be applied due to excessive width. We will
describe in the following the processing to be done in these
areas; outside of these, the original VALUE propagation from
DPOP applies.

The VALUE message that the root Xi of a cluster receives
from its parent contains the optimal assignment of all the
variables in the separator Sepi of Xi (and its cluster). Then
Xi can simply retrieve from its cache table the optimal
assignment corresponding to this particular instantiation of
the separator. This assignment contains its own value, and
the values of all the nodes in the cluster. Xi can thus inform
all the nodes in the cluster what their optimal values are (via
VALUE messages). Subsequently, the VALUE propagation
proceeds as in DPOP.

3.3 PC-DPOP - Complexity

In low-width areas of the problem, PC-DPOP behaves exactly
as DPOP: it generates a linear number of messages that are
at most dk in size. In areas where the width exceeds k, the
clusters are formed.

IJCAI-07

170

Theorem 1 P C − DP OP (k)
requires communication
O(exp(k). Memory requirements vary from O(exp(k)) to
O(exp(w)) depending on the algorithm chosen for solving
centralized subproblems (w is the width of the graph).

PROOF. Section 3.1 shows that whenever the separator of a
node is larger than k, that node is included in a cluster. It also
shows that within a cluster, UTIL messages with more than
k dimensions are never computed or stored, but their input
components sent out instead. It can be shown recursively that
these components have always less than k dimensions, which
proves the ﬁrst part of the claim.

Assuming that w > k, memory requirements are at least
O(exp(k)). This can easily be seen in the roots of the
clusters: they have to store the UTIL messages and the cache
tables, both of which are O(exp(Sep = k)).

root,

Within a cluster

the least memory expensive
algorithm would be a search algorithm (e.g. AOBB(1)) that
uses linear memory. The exponential size of the cache table
and UTIL message dominates this, so memory overall is
O(exp(k)).

The most memory intensive option would be to use a
centralized version of DPOP, that is proved to be exponential
in the induced width of the subtree induced by the cluster.
Overall, this means memory is exponential in the maximal
width of any cluster, which is the overall induced width.

)
s
r
a
v
#
n

 

i
 

i

l

e
z
s
 
m
e
b
o
r
p
b
u
s
 
x
a
m

(
 
n
o

i
t

a
z

i
l

a
r
t
n
e
C

l

s
m
e
b
o
r
p
b
u
s
 

e
z

i
l

a
r
t

n
e
c
 

i

h
c
h
w
 
s
t
n
e
g
a
 
f
o
 
#

 12

 11

 10

 9

 8

 7

 6

 5

 4

 12

 11

 10

 9

 8

 7

 6

 5

 4

 3

 2

(a) maximal size of a centralized problem vs. total problem size

PC-DPOP(2)
PC-DPOP(3)
PC-DPOP(4)
PC-DPOP(5)=DPOP
OptAPO

 9

 9.5

 10
 11
Number of variables (agents)

 10.5

 11.5

 12

(b) how many agents centralize subproblems vs. total problem size

PC-DPOP(2)
PC-DPOP(3)
PC-DPOP(4)
PC-DPOP(5)=DPOP
OptAPO

 9

 9.5

 10
 11
Number of variables (agents)

 10.5

 11.5

 12

2

Figure 2: Graph coloring: Centralization.
(a) In OptAPO
there is always an agent which centralizes all the problem.
(b) In OptAPO all agents centralize some subproblem.

4 Experimental evaluation

We performed experiments on 3 different problem domains:
distributed sensor networks (DSN), graph coloring2 (GC),
and meeting scheduling (MS). Our versions of OptAPO and
PC-DPOP used different centralized solvers, so in the interest
of fairness, we did not compare their runtimes. Instead, we
compared the effectiveness of the centralization protocols
themselves, using 2 metrics: communication required (see
Figure 3), and amount of centralization (see Figure 2).
Figures 2 and 3 present the results on the GC problems.

The bound k has to be at least as large as the maximal
arity of the constraints in the problem; since these problems
contain only binary constraints, we ran PC-DPOP(k) with k
between 2 and the width of the problem. As expected, the
larger the bound k, the less centralization occurs. However,
message size and memory requirements increase.

DSN The DSN instances are very sparse, and the induced
width is 2, so P C − DP OP (k ≥ 2) always runs as DPOP:
no centralization, message size is d2 = 25.
In contrast,
in OptAPO almost all agents centralize some part of the
problem. Additionally, in the larger instances some agents
centralize up to half the problem.

Meeting scheduling we generated a set of relatively large
distributed meeting scheduling problems. The model is as
in [Maheswaran et al., 2004]. Brieﬂy, an optimal schedule
has to be found for a set of meetings between a set of agents.
The problems were large: 10 to 100 agents, and 5 to 60
meetings, yielding large problems with 16 to 196 variables.

2DSN and GC instances taken from [Maheswaran et al., 2004].

(b) how many agents centralize subproblems vs. total problem size

PC-DPOP(2)
PC-DPOP(3)
PC-DPOP(4)
PC-DPOP(5)=DPOP
OptAPO

 10000

 1000

 100

l

)
e
a
c
s
 
g
o
l
(
 
s
e
g
a
s
s
e
m

 
f
o
 
#

 10

 9

 9.5

 10
 11
Number of variables (agents)

 10.5

 11.5

 12

(b) how many agents centralize subproblems vs. total problem size

PC-DPOP(2)
PC-DPOP(3)
PC-DPOP(4)
PC-DPOP(5)=DPOP
OptAPO

 1e+06

 100000

 10000

 1000

l

)
e
a
c
s
 

g
o
l
(
 
s
e

t
y
b
n

 

i
 

e
z
s
 

i

e
g
a
s
s
e
m

 
l

a

t

o
T

 100

 9

 9.5

 10
 11
Number of variables (agents)

 10.5

 11.5

 12

Figure 3: Graph coloring: message exchange. (a) All PC-
DPOP variants use a linear # of messages.
; (b) Total
information exchange (bytes) is much lower for PC-DPOPs.

IJCAI-07

171

The larger problems were also denser, therefore even more
difﬁcult (induced width from 2 to 5).

OptAPO managed to terminate successfully only on the
smallest instances (16 variables), and timeout on all larger
instances. We believe this is due to OptAPO’s excessive
centralization, which overloads its centralized solver. Indeed,
OptAPO centralized almost all the problem in at least one
node, consistent with [Davin and Modi, 2005].

to

a minimum,

In contrast, PC-DPOP managed to keep the centralized
successfully
subproblems
terminating on even the most difﬁcult
PC-
DPOP(2) (smallest memory usage) centralized at most 10%
of the problem in a single node, and PC-DPOP(4) (maximal
k) centralized at most 5% in a single node. PC-DPOP(5) is
equivalent to DPOP on these problems (no centralization).

therefore

instances.

Overall, our results show that both OptAPO and PC-DPOP
centralize more in dense problems; however, PC-DPOP’s
structure-based strategy performs much better.

5 Related Work

Tree clustering methods (e.g. [Kask et al., 2005]) have been
proposed for a long time for time-space tradeoffs. PC-
DPOP uses the concept loosely and in many parts of the
problem transparently. Speciﬁcally, in areas where the width
is low, there is no clustering involved, the nodes following
the regular DPOP protocols. In high-width areas, PC-DPOP
creates clusters based on the context size of the outgoing
UTIL messages and bounds the sizes of the clusters to a
minimum using the speciﬁed separator size.

6 A Note on Privacy

[Maheswaran et al., 2006] show that in some settings and
according to some metrics (complete) centralization is not
worse (privacy-wise) than some distributed algorithms.

Even though the nodes in a cluster send relations to the
cluster root, these relations may very well be the result of
aggregations, and not the original relations. For example, in
Figure 1, X13 sends X9 (via X11 and X10) 3 relations: r11
13,
13. Notice that r11
13 that is sent to X9 like this is not
13 and r9
r10
the real r11
13, but the result of the aggregation resulting from
the partial join performed with the UTIL message that X13
has received from X14. Therefore, inferring true valuations
may be impossible even in this scenario.

7 Conclusions and future work

We have presented an optimal, hybrid algorithm that uses
a customizable message size and amount of memory.
PC-DPOP allows for a priory, exact predictions about
privacy loss, communication, memory and computational
requirements on all nodes and links in the network.

The algorithm explores loose parts of

the problem
without any centralization (like DPOP), and only small,
tightly connected clusters are centralized and solved by the
respective cluster roots. This means that the privacy concerns
associated with a centralized approach can be avoided in most
parts of the problem. We will investigate more thoroughly the
privacy loss of this approach in further work.

Experimental results show that PC-DPOP is particularly
efﬁcient for large optimization problems of low width.
The intuition that dense problems tend to require more
centralization is conﬁrmed by experiments.

References
[Davin and Modi, 2005] John Davin and Pragnesh Jay Modi.
Impact of problem centralization in distributed constraint
optimization algorithms.
In AAMAS ’05: Proceedings of the
fourth international joint conference on Autonomous agents and
multiagent systems, pages 1057–1063, New York, NY, USA,
2005. ACM Press.

[Dechter, 2003] Rina Dechter. Constraint Processing. Morgan

Kaufmann, 2003.

[Kask et al., 2005] Kalev Kask, Rina Dechter, and Javier Larrosa.
Unifying cluster-tree decompositions for automated reasoning in
graphical models. Artiﬁcial Intelligence, 2005.

[Maheswaran et al., 2004] Rajiv T. Maheswaran, Milind Tambe,
Emma Bowring, Jonathan P. Pearce, and Pradeep Varakantham.
Taking DCOP to the real world: Efﬁcient complete solutions for
distributed multi-event scheduling. In AAMAS-04, 2004.

[Maheswaran et al., 2006] R.T. Maheswaran,

Pearce,
E. Bowring, P. Varakantham, and M Tambe.
Privacy loss
in distributed constraint reasoning: A quantitative framework for
analysis and its applications. JAAMAS, 2006.

J.P.

[Mailler and Lesser, 2004] Roger Mailler

and Victor Lesser.
Solving distributed constraint optimization problems using
cooperative mediation. Proceedings of Third International Joint
Conference on Autonomous Agents and MultiAgent Systems
(AAMAS 2004), 2004.

[Mailler and Lesser, 2005] Roger Mailler

and Victor Lesser.
Asynchronous partial overlay: A new algorithm for solving
distributed constraint satisfaction problems. Journal of Artiﬁcial
Intelligence Research (JAIR), 2005. to appear.

[Marinescu and Dechter, 2005] Radu Marinescu and Rina Dechter.
In
AND/OR branch-and-bound for graphical models.
Proceedings of
the 19th International Joint Conference on
Artiﬁcial Intelligence, IJCAI-05, Edinburgh, Scotland, Aug 2005.
[Modi et al., 2003] P. J. Modi, W. M. Shen, and M. Tambe.
An asynchronous complete method for distributed constraint
optimization. In Proc. AAMAS, 2003.

[Petcu and Faltings, 2005] Adrian Petcu and Boi Faltings. DPOP:
In
A scalable method for multiagent constraint optimization.
Proceedings of
the 19th International Joint Conference on
Artiﬁcial Intelligence, IJCAI-05, Edinburgh, Scotland, Aug 2005.
[Petcu et al., 2006] Adrian Petcu, Boi Faltings, and David Parkes.
M-DPOP: Faithful Distributed Implementation of Efﬁcient
Social Choice Problems.
In Proceedings of the International
Joint Conference on Autonomous Agents and Multi Agent
Systems (AAMAS-06), Hakodate, Japan, May 2006.

[Schiex et al., 1995] Thomas Schiex, H´el`ene Fargier, and Gerard
Verfaillie. Valued constraint satisfaction problems: Hard and
easy problems.
the 15th International
Joint Conference on Artiﬁcial Intelligence, IJCAI-95, Montreal,
Canada, 1995.

In Proceedings of

and Kazuhiro Kuwabara.

[Yokoo et al., 1992] Makoto Yokoo, Edmund H. Durfee, Toru
Distributed constraint
Ishida,
satisfaction for formalizing distributed problem solving.
In
International Conference on Distributed Computing Systems,
pages 614–621, 1992.

IJCAI-07

172

