On a generalization of triangulated graphs for domains decomposition of CSPs 

Assef Chmeiss* 

CRIL-CNRS FRE 2499 

Universite d'Artois - IUT de Lens 

Ruedel'Universite-SP16 
62307 Lens Cedex, France 
chmeiss@cril.univ-artois.fr 

Philippe Jegou and Lamia Keddar 

LSIS-UMRCNRS6168 

Universite d'Aix-Marseille III 

Avenue Escadrille Normandie-Niemen 

13397 Marseille cedex 20, France 

{philippe.jegou, lamia.keddar}@univ.u-3mrs.fr 

Abstract 

In [Jegou, 1993], a decomposition method has been 
introduced  for improving  search  efficiency  in the 
area  of Constraint  Satisfaction  Problems.  This 
method is based on properties of micro-structure of 
CSPs related to properties of triangulated graphs. 
This decomposition allows to transform an instance 
of CSP  in  a  collection  of sub-problems  easier to 
solve, and then gives a natural and efficient way for 
a parallel implementation [Habbas et al, 2000]. 
In this paper, we present a generalization of this ap(cid:173)
proach, which is based on a generalization of trian(cid:173)
gulated graphs.  This generalization allows to de(cid:173)
fine the level of decomposition which can be fixed 
by a graph parameter. The larger this parameter is, 
the more level of decomposition that is the num(cid:173)
ber of sub-problems is.  As a consequence, we can 
then define the level of decomposition, with respect 
to the nature of the parallel configuration used (the 
number of processors). 
First experiments reported here show that this ex(cid:173)
tension increases significantly the advantage of the 
basic decomposition, already shown in [Habbas et 
al,  2000]. 

Introduction 

1 
Constraint-satisfaction problems (CSPs) involve the assign(cid:173)
ment of values to variables which are subject to a set of con(cid:173)
straints.  Examples of CSPs are map coloring,  conjunctive 
queries in a relational databases, line drawings understand(cid:173)
ing, pattern matching in production rules systems, combina(cid:173)
torial puzzles... CSP is known to be a NP-complete problem. 
So, during last twenty years, many works have been proposed 
to optimize the classical Backtrack procedure, as constraint 
propagation, intelligent backtracking or network decomposi(cid:173)
tions. 

In  [Jegou,  1993],  another  approach  has  been  proposed 
which is based on the decomposition of the "micro-structure" 
of the CSP. The micro-structure of a CSP is the graph defined 
*This work has been supported in part by the IUT de Lens, the 
CNRS and the Region Nord/Pas-de-Calais under the TACT Pro(cid:173)
gramme 

by the compatible relations between variable-value pairs: ver(cid:173)
tices are these pairs, and edges arc defined by pairs of com(cid:173)
patible vertices.  Given the micro-structure of a CSP and us(cid:173)
ing graph properties, the method realizes a pre-processing to 
simplify the problem with a decomposition of the domains of 
variables.  For a CSP V, the decomposition generates a col(cid:173)
lection of subproblems P1, P2, •. • Pk, which is equivalent to 
the initial problem V.  Each subproblem  Pi  has the size of 
its domains less or equal to the size of domains of P, so the 
time complexity of each  Pi  is necessarily  less than for the 
initial CSP. Moreover, given this collection of subproblems, 
we can separately solve them, or recursively apply again the 
decomposition. 

This decomposition allows to transform an instance of CSP 
in a collection of subproblems the domains size of which is 
less than domains size of the CSP. So, these sub-problems are 
theoretically easier to solve.  Moreover, this decomposition 
defines and then gives a natural and efficient way for a paral(cid:173)
lel implementation to solve CSP. In [Habbas et al, 2000], an 
experimental analysis of this approach is presented, realized 
on a parallel configuration.  These experiments show clearly 
the efficiency of the approach:  the decomposition generally 
offers better results than the results obtained to solving the 
problems without decomposition.  This advantage is related 
to the natural parallelization of the approach since each sub-
problem is solved independently. This fact is clear for consis(cid:173)
tent CSPs.  Moreover, if we consider inconsistent CSPs, the 
results are more insteresting: without parallelization, solving 
the problem after its decomposition is clearly better as solv(cid:173)
ing it without decomposition. 

In this paper, we present a generalization of this approach. 
This approach  is based on  a generalization of triangulated 
graphs.  This generalization allows to define the level of de(cid:173)
composition which can be fixed by a graph parameter.  The 
larger this parameter is, the more level of decomposition (that 
is the number of sub-problems) is. As a consequence, we can 
then define the  level  of decomposition,  with respect to the 
power of the parallel configuration used. 

To define this generalization, we exploit a generalization of 
triangulated graphs called CSGk graphs which has been in(cid:173)
troduced in [Chmeiss and Jegou, 1997]. This class of graphs 
possesses the same kind of properties as triangulated graphs 
do.  The most important here  is the fact that the CLIQUE 
problem has a polynomial time complexity on these graphs. 

CONSTRAINTS 

203 

First  experiments  reported  here  show  that  this  extension 
increases  significantly  the  advantage  of the  basic  decompo(cid:173)
sition,  already  shown  in  [Habbas  et  al,  2000]. 
Indeed,  we 
present  experiments  with  two  levels  of decomposition.  The 
basic  decomposition,  and  the  second  level  (CSG2  graphs). 
The  results  show  that  for  the  second  level  of decomposition 
we  obtain  better  results. 

The  section  2  recalls  the  decomposition  method  while  sec(cid:173)
tion  3  presents  the  generalization  of the  decomposition.  Ex(cid:173)
perimental  results and a discussion about these result are pre(cid:173)
sented  in the  section 4. 

2  Preliminaries 

2.1  Constraint Satisfaction Problems 

X 

{X,D,C,R). 

A  finite  CSP  (Constraint  Satisfaction  Problem)  is  defined  as 
four  tuple  P  = 
is  a  set  of  n  variables 
D  is  a  set  of  finite  domains  D1,D2,  .....  Dn, 
x1,X2,--.xn. 
and  C  is  a  set of rn  constraints.  Here  we  only  consider binary 
CSPs,  that  is  the  constraints  are  defined  on  pairs  of variables 
{xi,  Xj }  and  will  be  denoted  Ci,j.  To  each  constraint  
, we 
associate  a  subset  of the  cartesian  product 
(Di  x  Dj)  which 
is  denoted  Rij  and  specifies  which  values  of the  variables  are 
compatible  with  each  other.  R  is  the  set  of all  RlJ.  A  solution 
is  an  assignment  of values  to  variables  which  satisfies  all  the 
constraints.  For  a  CSP  P,  the  pair  ( X ' , C)  is  a  graph  called 
the  constraint  graph.  Given  a  CSP,  the  problem  is  either  to 
know  if there  exists  any  solution,  to  find  solution,  or  to  find 
all  solutions.  The  first  problem  is known be to NP-complete. 

CSPs  are  normally  solved  by  different  versions  of  back(cid:173)
track  search. 
In  this  case,  if d  is  the  size  of domains  (maxi(cid:173)
mum  number  of values  in  domains  A ),  the  theoretical  time 
complexity of search  is then bounded  by the  size  of the  search 
space,  that  is  dn.  Consequently,  many  works  tried  to  improve 
the  search  efficiency.  At  present  time,  it  seems  that the  most 
efficient  algorithm  is  the  procedure  M AC  which  has  been  in(cid:173)
troduced  in  [Sabin and  Freuder,  1994].  Other approaches  use 
decomposition  techniques  based  on  structural  properties  of 
the  CSP.  These  methods  exploit  the  fact  that  the  tractability 
of CSPs  is  intimately  connected  to  the  topological  structure 
of their  underlying  constraint  graph.  Moreover,  these  meth(cid:173)
ods  give  an  upper  bound  to  the  complexity  of the  problem. 
As  example  of such  decompositions,  we  have  tree-clustering 
scheme  [Dechter  and  Pearl,  1989].  The  time  complexity  of 
this method  is bounded by dk  where  k  is  induced by the  topo(cid:173)
logical  features  of the  constraint  graph.  Intuitively,  more  the 
constraint  graph  is  dense,  more  the  value  k  is  large.  For  ex(cid:173)
ample,  if  the  constraint  network  is  a  complete  graph,  then 
k  =  n.  So,  the  complexity  of these  decomposition  methods 
is  the  same  as  for  classical  backtracking,  that  is  dn.  So,  in 
[Jegou,  1993],  Jegou  proposed  an  alternative  way  to  decom(cid:173)
pose  CSPs  which  is  not  based  on  the  constraint  graph  but  on 
the  micro-structure  of a  CSP.  In  the  sequel,  we  called  this  de(cid:173)
composition  scheme  TR-Decomposition. 

2.2 

T R - D e c o m p o s i t i on 

Theorem  1 

fact 

that 

In  other  words,  transforming  a  CSP  as  its  micro-structure 
is  clearly  a  polynomial  reduction 
from  CSP  to  CLIQUE, 
which  is  the  problem  of  finding  a  clique  of  a  given  size 
belongs  to  a  graph.  As  a  consequence  of this  fact,  as  CSP, 
the  C L I Q UE  problem  is  NP-Complete.  Since  the  problem 
of  finding  a  n-cliquc  is  NP-hard,  TR-Decomposition  exploits 
the 
triangulated  graphs  constitute  a  polynomial 
class  of  instances  for  this  problem.  We  recall  briefly  basic 
properties  of these  graphs.  Given  a  graph  G  —  (V,  E)  and  an 
ordering 
of  V,  the  successors  of a  vertex  u2 
are  the  elements  of the  set 
w
r
is 

The  ordering 
of  V 
if, 
,  the  vertex  v1  is  simplicial  in  the  ordering 
is  triangulated  if  and  only  if  V 
admits  a  perfect  elimination  ordering.  Triangulated  graphs 
satisfies  desirable  properties. 
A  triangulated  graph  on  n 
vertices  has  at  most n. maximal  cliques  (a  clique  is  maximal 
iff  it  is  not  included  in  an  other  clique) 
[Fulkerson  and 
Gross,  1965].  Moreover,  the  problem  of  finding  all  maximal 
cliques  in  a  triangulated  graph  is  in  0(n  +  m) 
if  n  is  the 
number of vertices  and  m  the  number of egdes  [Gavril,  1972]. 

is  a  perfect  elimination  ordering 

ea 
vertex 
is  a  clique. 

A  graph  G  = 

simplicial  in 

h

e

vi 

for 

(V,E) 

Given  the  micro-structure  of any  CSP,  it  is  not  possible  to 
immediately  use  these properties because any micro-structure 
is  not  necessary  a  triangulated  graph.  So,  in  adding  edges 
in  E,  we  can  build  a  new  graph  T(G)  = 
(V,  Ef)  which  is 
triangulated.  This  addition  of  edges  is  called  triangulation, 
and  can  be  realized  in  a  linear  time  in  the  size  of the  graph. 
So,  after  the  triangulation,  all  maximal  cliques  of G  can  be 
found  in  linear  time.  Applied  to  a 
the  triangulation  of  its  micro-structure 
the  set  of  maximal  cliques  of 
produces  the  graph 
which  is 
i.  Every  Y,  is  a  set  of values, 
and  then  defines  a  subproblem  of  P.  More  formaly,  given  a 
binary  CSP  P  = 
= 
The  CSP  induced  by  Y  on 

its  micro-structure  

(X,D,C,  R), 

1Note  that in [Hamadi,  1996], TR-Decomposition has been gen(cid:173)
eralized to General CSPs, that is CSPs were constraints can be de(cid:173)
fined on more than two variables. 

204 

CONSTRAINTS 

V,  denoted  V{Y)  is  defined  by: 

Finally, 

to  ensure  the  validity  of  the  decomposition, 

presents the theorem below: 

Theorem  2  [Jegou,  1993]  Given  a  binary  CSP  P,  its 

r u c t u r e,  the  set  of the  maxi(cid:173)

m i c r o - s t
mal cliques of T 

Solutions 

To summarize the approach, we recall the algorithm: 

Build the micro-structure 
Triangulation 
MaximalCliquesi 
for all Yi do 

Algorithm:  TR-Decomposition 
Begin 
1 
2 
3 
4 
5 
6 
7 

if Yi is a covering of all  the domains in  D 
then  Solve 
else 
endfor 

has no solution 

End;  {  TR-Triangulation  } 

The steps  1, 2 and 3 can be realized in a linear time w.r.t. 
the  size  of the  problem  V.  The  procedure  Triangulation  re(cid:173)
turns  a  perfect  elimination  ordering  a  which  allows  to  the 
procedure  Maximal  Cliques  to  find  sets  Yi.  The  step  4,  that 
is  the  iteration  for,  can  be  replaced  by  a  parallel  execution 
on  independent subproblems  P(Yl).  In  this case,  if the CSP 
V  is  consistent,  the  cost  is  related  to the  cost of solving the 
easiest  subproblem,  while  it  is  the  cost  of the  hardest  sub-
problem  for  inconsistent CSPs.  A  such  implementation has 
been  realized  in  [Habbas  et  al,  2000].  In step 5,  a set  Yi  is 
not a covering of all the domains in D if there is a subdomain 
Dy.j 
induced by Yi which is the empty set.  This subproblem 
is then trivially inconsistent.  In step 6, to solve  V(Yi),  we can 
use any classical search method such that standard backtrack(cid:173)
ing,  Forward-Checking or MAC  [Sabin  and Freuder,  1994]. 
Finally, note that the quality of decomposition depends on the 
quality of the triangulation step. 

The last point is the most important.  Nevertheless, it's well 
known that the problem of finding an optimal (w.r.t.  the size 
of the  largest  induced  clique)  triangulation  is  NP-Hard  (see 
[Arnborg  et  al,  1987]).  Several  algorithms  have  been  pro(cid:173)
posed  for triangulation.  In all cases,  the aim  is to minimize 
either  the  number  of added  edges  or  the  size  of cliques  in 
G'.  Three  classes  of approaches  are  usable.  The  first  one 
consists in finding an optimal triangulation which produces a 
graph  the  maximum  size  clique  of which has  minimum size 
over all triangulations.  [Shoikhet and Geiger,  1997] propose 
a  such  algorithm  the  time  complexity  of which  is  exponen(cid:173)
tial.  The  second  is  to  find  a  minimal  triangulation,  that  is 
a  triangulation  computing  a  set  E\  such  as  if for any  other 
triangulation 
is not 

triangulated.  Note  that a  triangulation  can  be  minimal  and 
not  optimal.  See  [Berry,  1999]  who  presents  an  algorithm 
in  0(n(n  +  m)).  The  last  one  consist  in  using  a  triangu(cid:173)
lation  consuming  a  linear time  which  does  not gurantee the 
minimality.  Nevertheless, the purpose of this paper is not to 
propose a good triangulation, but to exploit a generalization 
of triangulated graphs to generalize this decomposition.  One 
of the  aims  of this  generalization  is  to  avoid  the problem  of 
finding  optimal triangulations. 

3  Generalizing TR-Decomposition 
3.1  A  first  basic  property 
To  generalize  TR-Decomposition,  we  can  extend  the(cid:173)
orem  2.  Consider  a 
, _ , . .,  and  its 
m i c r o - s t r u c t u r e C o n s i d er  a  graph 
Consider 

now  the  set 
Every Zi is a set of values, and then, as in section 2.2, defines 
a subproblem of P which is the CSP induced by Z  i, on V (it 
is  denoted  V(Zi)). 

of  maximal  cliques  of 

, 

Theorem  3  Given  a  binary  CSP  P,  its  micro-structure 
and  { Z1, . ..  Zj),  the  set  of  the  maximal  cliques  of 

then  Solutions 

Proof.  Given  a  binary  CSP  V,  its  micro-structure 

and  by  theorem  1,  we  know  that  each  solution  of V  is  a 
clique  of size  n.  If we  consider 
w h e r e e a ch 
maximal  clique 
V appears in the associated  subproblem 

is included in a 
Therefore, each solution of 

clique   of 

While TR-Decomposition is limited to triangulated graphs, 
theorem  3  allows  to  define  a  larger  class  of decomposition 
of domains.  Nevertheless,  because  the  number  of maximal 
cliques can be exponential in an arbitrary graph, and then, the 
number  of  induced  subproblems,  we  must  consider  graphs 
which possess a limited number of maximal cliques 
as  triangulated  graphs  do.  So,  we  exploit  here  a  class  of 
graphs which is a generalization of triangulated graphs. 

3.2  A  generalization  of triangulated  graphs 
In [Chmeiss and Jegou,  1997], a new class of graphs, called 
CSGk  graphs  has  been  introduced.  These  graphs  which 
generalize  triangulated  graphs,  possess  the  same  kind  of 
properties as triangulated graphs,  e.g.  hereditary property of 
subgraphs,  existence  of an  elimination  scheme,  polynomial 
time  recognizing  algorithm,  and  polynomial  class  of graph 
for  CLIQUE  problem. 
Informally,  a  CSG0  graph  is  a 
complete graph, a CSG1 graph is a triangulated graph, and a 
CSG2 graph is a graph allowing an elimination vertex scheme 
where  the  successors  of  every  vertex  induce  triangulated 
graphs.  More generally, CSGk graphs are defined inductively. 

Definition  [Chmeiss and Jegou,  1997] The class of CSG0 
Graphs  is  the  class  of complete  graphs.  Given  k  >  0,  the 
class of CSGk  graphs  is the class of graphs G  =  (V, E)  such 
that there exists an ordering 
of V  such  that 

CONSTRAINTS 

205 

for i  =  l,2,  ...n,  the graph  
The ordering a is then called a CSGk scheme. 

Graph. 

its time complexity is 

it's  easy  to  see  that  CSG1  Graphs  is  the  class  of trian(cid:173)
gulated  graphs.  As  for  triangulated  graphs,  there  exists  a 
polynomial  time  algorithm 
for  recognizing  CSGk 
graphs; 
In the context of decomposition of micro-structure, the num(cid:173)
ber of maximal cliques is an important criteria.  CSGk  graphs 
inherit  of a  generalization  of the  property  of Fulkerson  and 
Gross  [Fulkerson  and  Gross,  1965]  related  to  this  number 
since, a 
Graphs  with  n  vertices  have  less  than  nk 
maximal  cliques.  Moreover, a 
graph  with  n  vertices 
and  m edges  has  at most  n  +  m  maximal  cliques.  Finding 
these  cliques  is  easy,  since,  given  a  constant  value  k  the 
CLIQUE problem is polynomial on this class of graphs since 
the time complexity of finding the clique of maximum size in 
an undirected 

graph is bounded by 

TRk-Decomposition 

3.3 
CSGk graphs can be exploited as a way to generalizing of TR-
Decomposition, defining TRk-Decomposition as decomposi(cid:173)
tions corresponding to the class of associated graphs.  For K= 
1,  TRk-Decomposition  is exactly TR-Decomposition,  while 
for  k=  2, TRk-Decomposition, that is TR2-Decomposition, 
it's the decomposition induced by CSG2  graphs.  More gen(cid:173)
erally, TRk-Decomposition is summarized as: 

Algorithm:  TRk-Decomposition 
Begin 
1 
2 
3 
4 
5 
6 
7 

End; 

Note that: 
• T he  procedure  k-Triangulation  produces  a  graph 
which is a CSGk graph and returns an order(cid:173)
ing  a  which  allows  to  the  procedure  k-MaximalCliques 
to find all the maximal cliques 

•  As for TR-Decomposition the step 4, that is the iteration 
for, can be replaced by a parallel execution on indepen(cid:173)
dent subproblems 
In  this  case,  if the  CSP  V  is 
consistent,  the  cost  is  related to the cost of solving the 
easiest  subproblem,  while  it  is  the  cost  of the  hardest 
subproblem for inconsistent CSPs. 

•  For steps 5 and 6, remarks given for TR-Decomposition 

hold. 

•  Finally,  the  quality  of decomposition  depends  on  the 

quality of the k-triangulation step. 

Because of the time complexity of managing 

graphs, 
that is 
it seems reasonable to focus our 
attention on small values of k;. So, in the sequel we limit our 
study  to  CSG2  graphs.  Therefore,  the  number  of maximal 
cliques  will  be  bounded  now  by 
Nev(cid:173)
ertheless,  two problems must be adressed here.  Finding an 
efficient algorithm  for 2-triangulation, and an operational al(cid:173)
gorithm to find maximal cliques of a 

graph. 

For 2-triangulation, we can imagine an algorithm the time 
complexity  of which  is  theoreticaly  bounded  by  0(nm(n.  + 
m)).  This algorithm consider an ordering on  vertices which 
is obtained by the Maximum Cardinality Search of Tarjan and 
Yannakakis.  Given this ordering, we consider vertices vi and 
then, we run a triangulation on 
.  This first step is 
in  0(n(n  +  m))  but this  approach  does  not guarantee  to  get 
a 2-triangulation.  Indeed,  given two vertices vl  and  Vj,  with 
i  <  j,  the triangulation  of 
which is realized af(cid:173)
can add edges that restore 
ter the triangulation of 
the new subgraph 
not triangulated.  So, a second 
step  of verification  and  repairing  the  subgraphs 
in adding new edges must be realized.  This additionnal work 
induces  a  theoretical  complexity  of 0(nm(n  +  777,)).  Never(cid:173)
theless,  expermients show that this additionnal  work  will  be 
rarely reached in practical cases (see section 4). 

4  Experiments 
Our aim in this section is to show the usefulness of the gener(cid:173)
alized decomposition method comparing to the MAC (Main(cid:173)
taining  Arc  Consistency)  algorithm  and  the  decomposition 
method  by  triangulation  of the  micro-structure  and  to  give 
an idea about the efficiency of the proposed method.  For the 
generalized decomposition method we will consider the TR2-
Decomposition, i.e.  k  =  2. 

As  mentionned  in  section  3,  we  will  not  focus  on  the 
triangulation  and  2-triangulation  algorithms  because  it  is 
not the principal  objective of this paper.  In  experiments,  we 
will use the Tarjan and Yannakakis's triangulation algorithm 
[Tarjan et al,  1984].  This algorithm  requires a precomputed 
elimination  ordering  on  the  vertices.  Then,  it  adds  edges, 
with  respect  to  the  ordering,  which  maintain  the  chordality 
property  (i.e.  when  a  vertex  is  treated,  its  successors  must 
form a clique).  Also, for the 2-triangulation, we will use an 
algorithm based on the Tarjan and Yannakakis's triangulation 
one as described in section 3.3.  In practice, we have observed 
that  the  additionnal  step  is  rarely  realized  and  then  the 
observed time of the 2-triagnluation  is in  n(n  + m ).  So,  for 
CSPs  of great  size,  the  CPU  time  used  to  decompose  the 
problem  is generally not  significant with respect to the time 
ofsolving the CSP. 

We  have  expermiented  these  methods  on  random  CSPs 
generated at the phase transition.  These CSPs are generated 
according to the model B generator [Prosser,  1996].  Such a 
generator admits four parameters: 

•  the  number  N  of variables 
•  the common size of the  initial domains D 
•  the  proportion  p1  of constraints  in  the  network  (or  the 

number C  =  p1  *  N  •  (N  -  l ) /2  of constraints) 

206 

CONSTRAINTS 

Table 1: experimental results 

•  the proportion p2 of forbidden pairs of values in a con(cid:173)
straint  (or the  number  T  =  p2  *  D  *  D  of forbidden 
pairs) 

In the following, we will use C and T instead of p1 and 
p2. C is called the density of the constraint graph and T the 
tightness of the constraints.  We have analysed decomposi(cid:173)
tion using the procedure MAC as basic search algorithm (the 
used heuristic is dom/deg [Bessiere and Regin, 1996]). That 
is MAC has been used before decomposition on the initial 
problem and after decomposition on each induced subprob(cid:173)
lem. 

In order to have a credible idea on the performance of these 
methods, we consider several classes of problems.  We vary 
two parameters (the number of variables N and the domains 
size D). In order to deal with classes near the phase transition, 
we search the appropriate values of the tightness (T) and the 
density (C). 

For each value of N, we vary D from small domains size 
to larger ones.  So, we can observe the behavior of the de(cid:173)
composition when D grows. Also, we have remarked that the 
performance of the decomposition method was not the same 
for satisfiable and unsatisfiablc problems. So, we have chosen 
to present the results seperately. 

Results are reported in three tables.  Each table represents 
results  for  a  given  number  of variables  TV.  As  measures 
of comparison,  we  used the number of consistency checks 
(#checks) performed by each of the methods and the number 
of visited nodes (#nodes).  We mention that,  the execution 
time is proportional to the number of checks. 

In the tables, results are organized as following :  the first 
column contains the calsses of problems represented by the 
four parameters  <  N,D,T,  C  >.  For each class,  we give 
results of the differents methods for satisfiable (Sat) and un-
satisfiable  (Unsat)  problems  seperately.  So,  we  have two 
lines per class.  The second and the third columns give the 
number of subproblems  induced  by  the TR-Decomposition 
and the TR2-Decomposition respectively. The fourth column 
indicates  the  number  of satisfiable  and  unsatisfiable  prob(cid:173)
lems over the 50 randomly generated CSPs.  The next three 
columns give  the  number of consistency  checks  for MAC, 
TR-Decomposition and the TR2-Decomposition respectively. 
The last three columns present the number of visited nodes by 
the different methods. 

As the subproblems induced by the decomposition are in(cid:173)
dependent,  we can envisage a parallel implementation.  In 
other words,  we can  imagine one process by subproblem. 
So, for saisfiable problems we consider the faster subproblem 
(the firstly solved subproblem since we have the response the 
it is satisfiable) while we consider the hardest subproblem for 
unsatisfiable ones. 

Tables show, that decomposition improve the MAC algo(cid:173)
rithm on  all  classes.  The  improvement is  more  significant 
for larger domains.  Also,  the performance of MAC  is  im(cid:173)
proved  more  significately  for  denser  constraint  graphs. 
If 
we  look  at  table  1  where  N  =  20,  we  remark  that  the 
TR2-Decomposition  is  five  times  faster than  MAC  for the 
<  20,10,30,130  >.  For classes with D  =  20 the improve(cid:173)
ment  is  more  significant.  This remark  is  confirmed when 

CONSTRAINTS 

207 

the  constraint  graphe  is  denser.  For example,  for the  class 
<  20,20,130,150  >  and for satisfiable problems, the perfor(cid:173)
mance ratio between TR2-Decomposition and MAC is about 
1 tp,22. In other words, for each consistency check performed 
by TR2-Decomposition l'algorithm MAC performs 22 checks 
for satisfiable problems.  For unsatisfiable problems, the per(cid:173)
formance ratio is about 1 to 12. 

This overall  view on experiments  shows that  the general(cid:173)
ized decomposition method is promising and results are en(cid:173)
couraging.  Finally, we would like to mention the importance 
of the triangulation (2-triangulation) phase.  We think that the 
efficieny of the decomposition method is related to the quality 
of the  triangulation  (2-triangulation).  We  believe  that  other 
triangulation algorithms might offer a better decomposition. 

5  Conclusion 
In  this paper,  we have presented a generalization of the  de(cid:173)
composition of micro-structure, introduced in [Jegou,  1993]. 
This decomposition allows to transform an instance of CSP in 
a collection of sub-problems easier to solve, and then gives a 
natural and efficient way for a parallel implementation [Hab-
bas et al,  2000].  While the original  method is based on tri(cid:173)
angulated graphs, our generalization is based on a generaliza(cid:173)
tion of triangulated graphs called  CSGk  graphs.  For a given 
value  A:,  we  get  a  special  sub-class  of graphs.  E.g.  CSG° 
graphs  are  complete  graphs  and  CSG1  graphs  are  triangu(cid:173)
lated graphs. The value k allows to define a particular level of 
decomposition.  So, we have introduced  TRk-Decomposition 
as the generalized decomposition based on CSGk graphs. 

There are two motivations for this generalization of the de(cid:173)

composition: 

•  to extend the level of decomposition, 
•  to be able to fix this level to give an optimal exploitation 

for the parallel configuration used. 

Indeed, it has been experimentally observed in [Habbas et 
al.,  2000]  that  the  first  level  of decomposition,  that  is  TR1-
Decomposition,  outperforms  classical  algorithms,  and  that 
the  more  the  number of sub-problems  is,  the  more  the  effi(cid:173)
ciency of TR1-Decomposition  is. 

Our  experimental  results  confirm  these  facts.  We  have 
studied two levels of decomposition, for k = 1 and k = 2 and 
the  experiments  show  that  TR2-Decomposition  outperforms 
TR1-Decomposition.  Moreover, the number of sub-problems 
is greater for k — 2 than for k =  1. 

We have limited our experiments to k  =  2 because the time 
complexity  of managing 
graphs is related to the value 
k.  More precisely, 
is the time complexity 
to recognize these graphs.  So in future works, we will try to 
propose efficient algorithms to realize decomposition. 

References 
[Amborg etal.,  1987]  S.  Arnborg,  D.G.  Corneil  and 
A.  Proskurowski.  Complexity of finding embeddings in a 
k-tree.  SIAMJ. Disc.  Meth,  8:277-284,  1987. 

[Bessiere and Regin,  1996]  C.  Bessiere  and  J-C.  Regin. 
MAC and combined heuristics:  Two reasons to forsake FC 

(and  CBJ?)  on  hard problems.  In Proceedings  of CP'96, 
LNCS 1118, pages 61-75, Cambridge, MA, USA,  1996. 

[Berry,  1999]  A.  Berry.  A  Wide-range  Efficient  Algorithm 
In  Proceedings  of SODA'99 

for  Minimal  Triangulation. 
SIAM Conference, USA,  1999. 

[Chmeiss and Jegou,  1997]  A.  Chmeiss  and  P.  Jegou.  A 
Generalization  of  Chordal  Graphs  and  the  Maximum 
Clique  Problem. 
Information  Processing  Letters, 
62(2):61-66, 1997. 

[Dechter and Pearl,  1989]  R.  Dechter  and  J.  Pearl.  Tree 
Clustering  for  Constraint Networks.  Artificial Intelligence, 
38:353-366, 1989. 

[Fulkerson and Gross,  1965]  D.R.  Fulkerson  and  O.  Gross. 
Incidence  matrices  and  interval  graphs.  Pacific J.  Math., 
15:835-855, 1965. 

[Gavril,  1972]  F. Gavril.  Algorithms for minimum coloring, 
maximum clique, minimum covering by cliques, and max(cid:173)
imum  independent set of a chordal graph.  SIAM J.  Corn-
put,  1(2): 180-187,  1972. 

[Habbas et al, 2000]  Z.  Habbas,  D.  Singer and R.  Krajecki. 
Domain  Decomposition  for  Parallel  Resolution  of Con(cid:173)
straints Satisfaction Problems with OpenMP.  In Proceed-
ings of the Second European Workshop on OpenMP, Ed(cid:173)
inburgh, Scotland, UK, 2000. 

[Hamadi,  1996]  R.  Hamadi. 

A  domain  decomposition 
method  to  solve  n-ary  CSPs. 
In  Proceedings  of the  In(cid:173)
ternational  Workshop  on  Constraint-Based  Reasonning, 
FLAIRS-Constraints-96,  pages  84-88,  Key  West  Florida, 
USA,  1996. 

[Jegou, 1993] P. Jegou. Decomposition of domains based on 
the structure of finite constraints satisfaction problems.  In 
Proceedings of the National Conference on Artificial Intel(cid:173)
ligence - AAAl '93, pages 731-736, Washington DC, USA, 
July  1993. 

[Prosser,  1996]  P. Prosser.  An empirical study of phase tran(cid:173)
sition  in  binary  constraint satisfaction problems.  Artificial 
Intelligence,  81:81-109,  1996. 

[Sabin and Freuder,  1994]  D.  Sabin  and  E.  Freuder.  Con(cid:173)
tradicting  conventional  wisdom  in  constraint  satisfaction. 
In  Proceedings  of  ECAI'94,  pages  125-129,  Amsterdam, 
Holland, 1994. 

[Shoikhet and Geiger,  1997]  K.  Shoikhet and  D.  Geiger.  A 
practical  algorithm  for  finding  optimal  triangulation. 
In 
Proceedings  of  AAAI'97,  pages  185-190,  Providence, 
USA,  1997. 

[Tarjan et a/.,  1984]  R.  Tarjan  and  M.  Yannakakis.  Simple 
Linear-Time  Algorithms  to  test  Chordality of graphs,  test 
acyclicity of hypergraph and selectively reduce acycli  hy-
pergraph.  SIAM Journal  on  Computing,  13(3):566-579, 
1984. 

208 

CONSTRAINTS 

