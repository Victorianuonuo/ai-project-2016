A Multiobjective Frontier Search Algorithm

L. Mandow and J.L. P´erez de la Cruz

Dpto. Lenguajes y Ciencias de la Computaci´on
Universidad de M´alaga 29071 - M´alaga (Spain)

{lawrence, perez}@lcc.uma.es

Abstract

The paper analyzes the extension of frontier search
to the multiobjective framework. A frontier multi-
objective A* search algorithm is developed, some
formal properties are presented, and its perfor-
mance is compared to those of other multiobjective
search algorithms. The new algorithm is adequate
for both monotone and non-monotone heuristics.

1 Introduction
Systematic graph search procedures are usually classiﬁed into
best-ﬁrst search and depth-ﬁrst search strategies. The former
can take advantage of the so-called principle of optimality
to prune paths that could never lead to solutions better than
those already recorded. Dijkstra’s algorithm and A* [Hart
et al., 1968] are members of this class. Pruning may dras-
tically reduce the number of paths explored in the graph but
memory requirements are usually exponential with solution
depth. Depth-ﬁrst search presents the advantage of mem-
ory requirements linear with the depth of the solution. How-
ever in certain cases these algorithms may involve the con-
sideration of an exponentially larger set of paths when com-
pared to best-ﬁrst algorithms. Algorithms like IDA* [Korf,
1985], and RBFS [Korf, 1993] are members of this class.
Several attempts have been carried out to retain the beneﬁts
of path pruning while keeping reasonable memory require-
ments. Frontier search [Korf et al., 2005] has been recently
reported as a successful approach in this sense.

Multiobjective search is known to be much more compu-
tationally demanding than its scalar counterpart. Particularly,
memory requirements are one of the practical limiting factors
of multiobjective best-ﬁrst search in AI applications. Appli-
cations in route planning [Alechina and Logan, 2001] and do-
main independent planning [Refanidis and Vlahavas, 2003]
have reported queue size as a limiting factor and resorted to
various schemes to limit the number of generated alternatives.
Multiobjective best-ﬁrst search algorithms include two dif-
ferent extensions of A* to the multiobjective case, MOA*
[Stewart and White, 1991], and NAMOA* [Mandow and
P´erez de la Cruz, 2005]. Multiobjective depth-ﬁrst algo-
rithms include IDMOA* [Harikumar and Kumar, 1996], and
MOMA*0 [Dasgupta et al., 1999], the multiobjective exten-
sions of IDA* and RBFS respectively.

This paper analyzes the extension of frontier search to the
multiobjective framework. Scalar frontier search exploits
the monotone property of heuristics to discard unnecessary
nodes, achieving important memory savings. However, as ex-
plained in the paper, the same node deletion criteria cannot be
applied in a multiobjective context. This paper presents new
deletion criteria that can be applied in broader contexts while
preserving the properties of conventional algorithms.

The paper is organized as follows. Section 2 describes
scalar frontier search. Section 3 examines the fundamental
issues in multiobjective search and introduces a frontier mul-
tiobjective A* search algorithm. Formal properties and exper-
imental results are presented in sections 4 and 5 respectively.
Finally, some conclusions and future work are outlined.

2 Scalar frontier search

The shortest path problem can be stated as follows: Let G
be a locally ﬁnite labeled directed graph G = (N, A, c), of
|N | nodes, and |A| arcs (n, n(cid:2)) labeled with positive costs
c(n, n(cid:2)) ∈ R. Given a start node s ∈ N , and a set of goal
nodes Γ ⊆ N , ﬁnd the minimum cost path in G from s to a
node in Γ.

Scalar best-ﬁrst algorithms like A* build a search tree T
rooted at the start node with the best paths found to each gen-
erated node. Nodes already expanded are kept in a list of
CLOSED nodes, and those that are waiting for expansion
are kept in a list of OP EN nodes. Keeping the CLOSED
list makes memory requirements exponential with solution
depth. However, these nodes serve two important purposes.
Firstly, whenever a new path is found to a known node, its
cost is compared to that of the path in the search tree. The
best path is kept and the other is pruned. This can drastically
reduce the number of paths in G that need to be explicitly ex-
plored. The second important use of closed nodes is to return
the solution path. When a goal node is reached, the solution
path can be quickly recovered from the search tree.

A* uses a characteristic evaluation function f (n) = g(n)+
h(n) to rank open nodes and always selects for expansion
nodes with minimum f (n). Function g(n) denotes the cost of
the path stored in the search tree from s to n, while the heuris-
tic function h(n) estimates the cost of a solution from node n
to a goal node. When h(n) satisﬁes the so-called monotone

IJCAI-07

2340

property, i.e.

h(n) + c(n, n(cid:2)) ≤ h(n(cid:2)) ∀(n, n(cid:2)) ∈ A

(1)

then for all node n selected for expansion an optimal path to
n has already been found in T . The use of monotone heuris-
tics optimizes and simpliﬁes path pruning: new paths found
to closed nodes can be pruned straightaway, since no closed
node will ever be put back into OP EN .

In the following discussion on frontier search we shall

make the following assumptions:

1. We are only interested in the cost of the optimal solution,
or in which goal node is reached by an optimal solution,
but not in the optimal solution path itself.

2. The graph G to be searched is undirected, i.e. for each

arc (n, n(cid:2)) in G, there is also an arc (n(cid:2), n).

3. Heuristic functions are monotone.

Under these assumptions frontier search keeps the beneﬁts
of path pruning while drastically reducing memory require-
ments. The key idea is to store in memory only the OP EN
list, but not the CLOSED list of expanded nodes.

Frontier search keeps a vector of used operators with each
node n. Each vector element indicates whether the neighbor-
ing node n(cid:2) reached via that operator is still accessible or not
through node n. Initially, all vector elements are set to ’un-
used’. Each time a node is expanded, only successors reach-
able by unused operators are generated. Recall that whenever
a node n is selected for expansion, an optimal path to that
node has been found. This means no new interesting paths
to n will ever be generated and n will never again need to be
put back into OP EN . Therefore, for each generated neigh-
bouring node n(cid:2), the operator that reaches n form n(cid:2) can be
marked as used. This amounts to pruning all new paths that
might reach n from n(cid:2) even before they are actually gener-
ated. Since n will never again be reached by new paths, it can
be safely removed from memory.

Assumptions 1 and 2 presented for this basic frontier
search algorithm can be relaxed to make it a more general
search strategy [Korf et al., 2005]. However, assumption 3
cannot be relaxed without compromising the admissibility of
frontier search. With a monotone heuristic, and the same
tie-breaking rule, the basic frontier search algorithm can be
shown to mimic the sequence of node expansions performed
by standard best-ﬁrst search. Therefore, it is admissible under
the same assumptions.

3 Multiobjective frontier search
3.1 Multiobjective A* search
The multiobjective search problem can be stated as fol-
lows: Let G be a locally ﬁnite labeled directed graph G =
(N, A, (cid:2)c), of |N | nodes, and |A| arcs (n, n(cid:2)) labeled with pos-
itive vectors (cid:2)c(n, n(cid:2)) ∈ Rq. Given a start node s ∈ N , and
a set of goal nodes Γ ⊆ N , ﬁnd the set of all non-dominated
cost paths in G from s to nodes in Γ.

The main distinguishing feature of multiobjective prob-
lems is the fact that cost vectors (cid:2)c(n, n(cid:2)) induce only a partial
order preference relation ≺ called dominance,
fi ≤ f (cid:2)

(cid:2)f ≺ (cid:2)f (cid:2) ⇔ ∀i

∀ (cid:2)f , (cid:2)f (cid:2) ∈ Rq

i ∧ (cid:2)f (cid:9)= (cid:2)f (cid:2)

(2)

where fi denotes the i-th element of vector (cid:2)f .

Therefore, given two vectors (cid:2)f and (cid:2)f (cid:2), it is not always pos-
sible to rank one as better than the other. For example given
vectors (cid:2)x = (1, 1), (cid:2)y = (3, 2), and (cid:2)z = (1, 3), (cid:2)x dominates
both (cid:2)y and (cid:2)z, but no dominance relation exists between vec-
tors (cid:2)y and (cid:2)z.

Given a set of vectors X, we shall deﬁne nondom(X) the
set of non-dominated vectors in set X in the following way,

nondom(X) = {(cid:2)x ∈ X | (cid:2)(cid:2)y ∈ X (cid:2)y ≺ (cid:2)x}

(3)

We shall use NAMOA* [Mandow and P´erez de la Cruz,
2005] as reference in the development of a frontier multiob-
It is a reﬁnement of MOA* [Stew-
jective A* algorithm.
art and White, 1991] that offers better memory behaviour.
NAMOA* builds an acyclic search graph SG rooted at s to
store all nondominated paths found to each node. Whenever
a new path is found to a known node n, its cost is compared
to those already reaching n. Nondominated paths are kept,
and dominated ones are pruned. NAMOA* keeps two differ-
ent sets associated to each node. Gop(n) denotes the set of
cost vectors of paths reaching n that can be further explored,
while Gcl(n) denotes the set of those that have already been
expanded. The set of OP EN paths in SG that can be further
explored is made up of all tuples (n, (cid:2)g) where (cid:2)g ∈ Gop(n).

NAMOA* uses a heuristic function H(n) that estimates
the set of nondominated cost vectors of paths from n to each
goal node. Therefore, each path Psn from s to n with cost
(cid:2)g(Psn), has a set of heuristic evaluation vectors, F (Psn).
This function is the multiobjective analogue to f (n) in A*,
F (Psn) = nondom{ (cid:2)f | (cid:2)f = (cid:2)g(Psn) + (cid:2)h ∧ (cid:2)h ∈ H(n)}
NAMOA* always selects for expansion an open path P
with at least an heuristic evaluation vector f nondominated
in OP EN . Two sets, GOALN and COST S, keep track of
goal nodes and costs of nodominated solutions found so far.
Each time a new solution is found, dominated alternatives are
ﬁltered from OP EN and search proceeds until OP EN is
empty.

In multiobjective search many different nondominated
paths may reach a given node. Therefore, it is the number
of cost vectors stored in Gop(n) and Gcl(n) that dominates
memory requirements, while the number of nodes plays only
a minor role. Regrettably, the expansion of a nondominated
path to node n does not prevent other nondominated paths to
enter Gop(n) at later stages of the search, even when mono-
tone heuristics are used [Stewart and White, 1991](lemma
20). Note that even vector costs of expanded paths cannot
be discarded after expansion without further consideration.
They need to be kept in the Gcl(n) sets to prune new domi-
nated paths reaching already expanded nodes. This prevents a
trivial extension of scalar frontier search to the multiobjective
case. Determining whether all nondominated paths to a given
node have already been found becomes then the central issue.

3.2 Frontier search NAMOA*

The extension of frontier search to multiobjective search is
presented under the same assumptions presented in section 2
for its scalar counterpart. The key is to ﬁnd an adequate crite-
rion to allow nodes and cost vectors of expanded paths to be

IJCAI-07

2341

safely deleted from memory. As previously explained, this is
not completely straightforward, since monotonicity does not
provide the same properties as in scalar search. The algorithm
presented in table 1 is based in the following proposals.

Let us denote by G(n) = Gop(n) ∪ Gcl(n) the set
of all nondominated cost vectors known to n, and by
F RON T IER the set of known nodes that cannot be deleted
from memory yet. Each node in F RON T IER will store
a vector of ’used operators’, a deletion ﬂag, and an ’at least
once expanded’ ﬂag.

Candidates for deletion A node n is a candidate for dele-
tion when no more nondominated paths can be found to
n. We can be certain of this condition whenever ∀n(cid:2) ∈
F RON T IER ∧ ∀(cid:2)g (cid:2) ∈ Gop(n(cid:2)) ∃(cid:2)g ∈ G(n) (cid:2)g (cid:12) (cid:2)g (cid:2).

Marking used operators If node n is candidate for dele-
tion and at least one path leading to n was expanded, then
the operators of its successors leading to n can be marked as
’used’. This amounts to pruning any new paths leading to n
even before they are actually generated.

Node deletion If node n is candidate for deletion and

Gop(n) = ∅, then n can be actually deleted from memory.

These conditions are checked at each iteration at step 6.
Note that new nodes generated by the algorithm must be put
in the F RON T IER even if they are not reached by an in-
teresting alternative, i.e. the newly found path is dominated
by COST S (step 5(b)i). These nodes would be typically dis-
carded in MOA* or NAMOA* until a really interesting path
was found to them, but need to be kept in frontier search in
case some of their operators have to be marked as ’used’.

These conditions are rather severe. However, the most im-
portant condition in multiobjective frontier search involves
cost vector deletion, since it is the number of cost vectors
stored in memory that dominates memory consumption.

Cost vector deletion When a node n is marked for dele-
tion, then the set Gcl(n) can be immediately removed from
memory (step 6(a)i). Additionally, each time a new path to n
is selected for expansion, its cost vector can be removed from
Gop(n) and discarded (step 3b).

The rationale behind this condition is that costs in Gcl(n)
are kept to prune new dominated paths found to n. However,
once a node n is marked for deletion, neighbouring nodes
will mark their operators and no new path will ever reach n.
Notice that, by virtue of this condition, a node marked for
deletion can get rid of some its cost vectors well before the
node itself is actually deleted.

3.3 Example
Figure 1(a) shows a sample graph with multiobjective costs.
Let us assume s is the start node, Γ = {γ1, γ2}, and, with-
out loss of generality, that no heuristic function is used, i.e.
H(n) = {(cid:2)0} ∀n, and the heuristic evaluation vector of each
path P is F (P ) = {(cid:2)g(P )}. In this example we focus our
attention in the criteria for path and node deletion, and these
involve only real cost vectors (cid:2)g(P ). Heuristic evaluation vec-
tors are involved in the selection of open paths for expansion
and, in this sense, FS-NAMOA* does not perform differently
from NAMOA*.

Initially, s is the only node in OPEN and FRONTIER with
It is selected for expansion and paths

Gop(s) = {(0, 0)}.

1. INITIALIZATION.

Create

nodes
F RON T IER = {s}, and set Gop(s) = {(cid:2)0}.
Let OP EN be the list of all pairs (n, (cid:2)g) such that
n ∈ F RON T IER and (cid:2)g ∈ Gop(n). Create two empty
sets, GOALN , COST S.

a

set

of

2. TERMINATION. If OP EN is empty, then return the
set of goal nodes GOALN and nondominated costs
COST S.

3. PATH SELECTION.

(a) Select an alternative (n, (cid:2)gn) from OP EN with
heuristic evaluation (cid:2)f ∈ F (n, (cid:2)gn) non-dominated
in OP EN and not dominated by COST S.

(b) If n is marked for deletion, then remove (cid:2)gn from

Gop(n), else move (cid:2)gn from Gop(n) to Gcl(n).

4. SOLUTION RECORDING. If n ∈ Γ, then put n in
GOALN , (cid:2)gn in COST S, and eliminate from OP EN
all dominated alternatives.

5. PATH EXPANSION: If n (cid:9)∈ Γ, then

For all successors nodes m of n with cost (cid:2)gm = (cid:2)gn +
(cid:2)c(n, m) do:
(a) Calculate Fm the set of estimates for the new path

F (m, (cid:2)gm) not dominated by COST S.

(b) If m is a new node, then,

i. Put m in F RON T IER.
ii. If Fm (cid:9)= ∅ then place (cid:2)gm in Gop(m).
else, If (cid:2)gm is new and nondominated in G(m), then:
i. Prune from G(m) vectors dominated by (cid:2)gm.
ii. If Fm (cid:9)= ∅ then place (cid:2)gm in Gop(m).

6. UPDATE FRONTIER: For all node n in F RON T IER

do,

(a) If n was at least once expanded, and n is not
marked for deletion, and n is a candidate for dele-
tion, then
i. Mark n for deletion and delete Gcl(n).
ii. For all successor n(cid:2) of n in F RON T IER, mark

the operator n(cid:2) → n as ’used’.

(b) If n is marked for deletion and Gop(n) = ∅, then

remove n from F RON T IER.

7. Go back to step 2

Table 1: FS-NAMOA*, a frontier multiobjective search algo-
rithm.

IJCAI-07

2342

to n1 and n3 are generated, setting Gop(n1) = {(1, 2)} and
Gop(n3) = {(2, 1)}. Since (0, 0) dominates both open vec-
tors, s is candidate for deletion and Gcl(s) deleted. Since
Gop(s) = ∅, s is in fact deleted from memory, and the corre-
sponding operators in n1 and n3 marked as ’used’. Figure 1
(b) shows a trace of FS-NAMOA* on this example, including
nodes in FRONTIER, and a graph showing the state of known
paths at each iteration. Each path ((cid:2)g, n) is represented by its
cost in cost space (× ≡ deleted; ◦ ≡ open; • ≡ closed) and
labeled by its destination node n. This way the state of paths
and the values of the Gop and Gcl sets can be easily told.

Assuming ties between nondominated paths are broken ar-
bitrarily, at iteration 2 path (n1, (1, 2)) is selected for expan-
sion. New paths to n2 and n4 are generated. However, n1
is not a candidate for deletion, since a new nondominated
path might still reach n1 from n3 or some of its descen-
dants. Therefore, the closed path must remain in memory, i.e.
Gcl(n1) = {(1, 2)}. At iteration 3 the only nondominated
path to n3 is selected, n3 is candidate for deletion and, in
fact, deleted, marking the corresponding operators as ’used’
in n4 and n6. Notice that no new nondominated path can ever
reach n1 since the cost of the closed path to n1 now dom-
inates the cost of all other open paths. Node n1 becomes
candidate for deletion and is deleted. The two cost vectors
of paths leading to n4 dominate all other open paths. There-
fore, n4 is candidate for deletion. However it has never been
expanded and must remain in memory. At iteration 4 a path
to n4 is selected for expansion and deleted from memory. At
iteration 5 the other path to n4 is selected and deleted, and
the whole node can be deleted as well. At iteration 6 only
the paths to γ1 are nondominated. Path (γ1, (4, 5)) could be
selected. Since it is a solution path, it would be recorded in
COST S and GOALN . All open paths dominated by (4, 5)
would be ﬁltered, i.e. removed from OP EN . At iteration 7
(γ1, (5, 4)) would be the only remaining open path, selected,
and recorded as solution. The algorithm would then terminate
with the guarantee that node γ1 is reached by nondominated
solutions with costs in ((4, 5), (5, 4)).

4 Properties

This section proves that each run of FS-NAMOA* mimics the
workings of NAMOA*. Therefore, the algorithm terminates
with the same sets of nondominated costs and goal nodes.

Result 1 If costs are positive and n is marked for deletion,
then all nondominated paths to n have been generated.

Proof. The proof is trivial from the deﬁnition of ’candidate
for deletion’. Let’s assume n is marked at iteration k. If a new
node reaches n at future iterations, it must be some extension
of an alternative (n(cid:2), (cid:2)g (cid:2)) open at iteration k. Let (cid:2)g (cid:2)(cid:2) > (cid:2)0 be
the cost of such extension. However, if n is marked, then
∃(cid:2)g ∈ G(n) (cid:2)g (cid:12) (cid:2)g (cid:2) ⇒ (cid:2)g ≺ (cid:2)g (cid:2) + (cid:2)g (cid:2)(cid:2).(cid:2)

Result 1 replaces the monotonicity requirement of heuris-
tics in scalar frontier search with a monotonicity requirement
for the real cost function (cid:2)g(P ). The following results are
analogous to those presented in [Korf et al., 2005].

Result 2 FS-NAMOA* never regenerates a node that has
been deleted.

IJCAI-07

2343

(a) Sample problem for FS-NAMOA*.

It.

Frontier

Paths

2

3

4

5

6

(b) Frontier nodes and paths in cost space

(cid:2)g = (g1, g2). Symbol (cid:18) denotes ’used
operator’, dashed nodes are deleted.

Figure 1: Sample problem and solution.

Proof. Let us assume, for the purpose of contradiction, that
n is the ﬁrst such node to be regenerated after a new path is
found from some other node n(cid:2) to n. If n was deleted, then: a)
n was candidate for deletion, b) n was at least once expanded,
c) Gop(n) = ∅. If n(cid:2) was deleted before n, then n(cid:2) must have
been regenerated in order to be expanded again regenerating
n. However, this contradicts the assumption that n was the
ﬁrst node to be regenerated. Then, it must be that n(cid:2) was
never deleted. Since n was at least once expanded, n(cid:2) must
have been in F RON T IER (recall the graph is undirected)
when n was marked for deletion, and the operator from n(cid:2)
to n marked as ’used’. Therefore, no path leading to n(cid:2) and
selected for expansion will ever regenerate n, contradicting
the assumption that n is regenerated.(cid:2)

Result 3 With the same tie-breaking rule, FS-NAMOA* ex-
pands the same nodes in the same order as NAMOA*.

Proof. We shall prove by induction the stronger result that,
after each iteration, the set of open alternatives is the same for
both algorithms. The proposition is true at iteration 0, when
(s,(cid:2)0) is the only open alternative. Let us assume that both
algorithms selected the same paths up to iteration k, and that
both have exactly the same set of open alternatives. Since
both algorithms share the tie-breaking rule, they will select
the same open alternative (n, (cid:2)g) for expansion.

The following scenarios are possible for NAMOA* for
each succesor m reached by cost vector (cid:2)gm = (cid:2)c(n, m) + (cid:2)g,

1. m ∈ Γ. All open alternatives dominated by (cid:2)gm are elim-

inated.

2. m (cid:9)∈ Γ. The set Fm of estimates of new paths to m not
dominated by COST S is calculated. In case: a) m is a
new node. If Fm (cid:9)= ∅, then m is put in the search graph
and gm in Gop(m); b) m is known and (cid:2)gm ∈ G(m).
No changes are made to Gop(m) nor Gcl(m); c) m is
known and (cid:2)gm (cid:9)∈ G(m). Dominated vectors are elimi-
nated from G(m). If Fm (cid:9)= ∅, then gm is put in Gop(m).

FS-NAMOA* would behave the same in situations 1 and
2c.
In situation 2a the new node will be unconditionally
placed in F RON T IER, but the new open alternative would
be added under the same condition. Finally, situation 2b is
ignored by FS-NAMOA*, but results in no change in the set
of open alternatives. In summary, both algorithms will per-
form the same changes in the set of open alternatives. Since
both algorithms terminate when the set of open alternatives is
empty, they will perform the same sequence of path selections
and expansions.(cid:2)

Results 2 and 3 do not require the heuristic function to
be monotone. This means FS-NAMOA* mimics NAMOA*
even when non-monotone heuristics are used. Note that a
single-objective version of FS-NAMOA* amounts to a ver-
sion of frontier search A* that ﬁnds all optimal solutions with
general heuristics. Nodes selected for expansion would be
deleted only when they achieve the minimum value of g(n)
among open nodes. This ensures the optimal path to deleted
nodes has been found.

Table 2: Summary of test results.

Algorithm
FS-NAMOA*
Cost vectors
Time (s)
FS-NAMOA*40
Cost vectors
Time (s)
FS-NAMOA200
Cost vectors
Time (s)
FS-NAMO1600
Cost vectors
Time (s)
NAMOA*
Cost vectors
Time (s)
MOA*
Cost vectors
Time (s)

average

σ min

max

12201.41
582.65

12610.67
1085.22

12213.29
17.99

12610.91
31.61

12259.34
6.48

12625.39
10.17

12363.28
3.76

12670.43
5.12

15098.69
2.45

15514.82
3.14

17161.78
2.15

16830.14
2.82

38
0

46
0

46
0

46
0

47
0

56
0

66075
7669

66086
212

66212
76

66217
32

79622
20

84830
27

5 Experimental tests

A set of 500 experimental tests were carried out in different
square grids of nodes of size 101 × 101 with random costs in
[1, 10] and two objectives. Grid distance was used as heuris-
tic for all objectives. The tests reported in this section com-
pare the performance of FS-NAMOA* against other standard
multiobjective search algorithms and are intentionally of rel-
atively small size.

Figures 5 (a) and (b) show the performance of MOA*,
NAMOA*, and FS-NAMOA* in memory and time (the latter
including IDMOA*) against problem difﬁculty. The number
of iterations (i.e. paths considered) by NAMOA* was taken
as a measure of problem difﬁculty. Note that the x-axis in
ﬁgure 5 (b) is in logarithmic scale to allow comparison to ID-
MOA*. Statistics are summarized in table 2.

MOA* and NAMOA* require storage for 140% and 124%
of the cost vectors needed by FS-NAMOA* respectively.
MOA* was the fastest on average, though the speed of MOA*
and NAMOA* is barely distinguishable at this scale. The ex-
tra ’update frontier’ step in FS-NAMOA* places a heavy time
overhead. However, the time required by the algorithm is well
below the exponential time requirements of the linear space
algorithm IDMOA*. In fact, this algorithm could solve only
the simplest problems in less than 20 minutes. This overhead
can be signiﬁcantly reduced delaying frontier updates. If up-
dates were performed evey k iterations, the overhead could
be reduced by 1/k. If the maximum branching factor of the
problem is b, this will increment the memory requirements by
at most kb cost vectors, which is normally a tiny fraction of
the maximum memory usage. Figure 5(c) and table 2 show
the time requirements for k = 40, 200 and 1600 with only
a 1.3% increase in average memory requirements over plain
FS-NAMOA (labeled FS-NAMOA-40, 200 and 1600 respec-
tively). This suggests that only a few updates are responsible
for most of the memory savings, with additional updates be-
coming increasingly less cost-effective.

IJCAI-07

2344

x 104

NAMOA
MOA
FS−NAMOA
FS−NAMOA−40
FS−NAMOA−200
FS−NAMOA−1600

9

8

7

6

5

4

3

2

1

d
e
r
o
t
s
 
y
s
u
o
e
n
a

l

t
l

i

u
m
s
 
s
r
o

t
c
e
v
 
t
s
o
c
 
f

 

o
 
r
e
b
m
u
n
m
u
m
x
a
M

i

0

0

1

2
6
Problem difficulty (number of iterations in NAMOA*)

3

4

5

7

8
x 104

(a) Memory requirements (cost vectors).

MOA
NAMOA
FS−NAMOA
FS−NAMOA−40
IDMOA

102

103

104

105

problem difficulty (number of iterations in NAMOA*), log scale

(b) Time requirements.

NAMOA
FS−NAMOA
FS−NAMOA−40
FS−NAMOA−200
FS−NAMOA−1600

1200

1000

800

600

400

200

)
s
d
n
o
c
e
s
(
 

e
m

i
t

0
101

80

70

60

50

40

30

20

10

)
s
d
n
o
c
e
s
(
 

e
m
T

i

0

0

1

2
6
Problem difficulty (number of iterations in NAMOA*)

3

4

5

7

8
x 104

(c) Timings of FS-NAMOA with delayed updates.

6 Conclusions and future work
The paper considers the extension of frontier search to the
multiobjective framework. Regrettably, the use of monotone
heuristics does not allow a trivial extension of scalar frontier
search to the multiobjective case. The determination of safe
criteria for the deletion of expanded nodes and cost vectors
turns out to be the fundamental issue in this extension. A
set of such criteria have been proposed and proven to pre-
serve the admissibility of multiobjective search even when
non-monotone heuristics are used. Experimental results show
that memory savings are signiﬁcative enough to make them
an interesting alternative. The time overhead of the deletion
criteria can be greatly reduced with minimum loss in memory
savings. Therefore, multiobjective frontier search ﬁlls a gap
between existing best-ﬁrst and depth-ﬁrst strategies in their
memory-time tradeoff.

Future work includes more formal development of the al-
gorithm, and the necessary extensions to make it a more gen-
eral search strategy. A comparison of all existing multiob-
jective search strategies over a representative set of problem
domains is also an important future work.

References
[Alechina and Logan, 2001] Natasha Alechina and Brian
Logan. State space search with prioritised soft constraints.
Applied Intelligence, 14(3):263–278, 2001.

[Dasgupta et al., 1999] Pallab Dasgupta, P.P. Chakrabarti,
and S.C. DeSarkar. Multiobjective Heuristic Search.
Vieweg, Braunschweig/Wiesbaden, 1999.

[Harikumar and Kumar, 1996] S. Harikumar and Shashi Ku-
mar. Iterative deepening multiobjective A*. Information
Processing Letters, 58:11–15, 1996.

[Hart et al., 1968] P.E. Hart, N.J. Nilsson, and B. Raphael. A
formal basis for the heuristic determination of minimum
cost paths. IEEE Trans. Systems Science and Cybernetics
SSC-4, 2:100–107, 1968.

[Korf et al., 2005] Richard Korf, Weixiong Zhang, Ignacio
Thayer, and Heath Hohwald. Frontier search. Journal of
the ACM, 52(5):715–748, September 2005.

[Korf, 1985] Richard E. Korf.

Iterative-deepening A*: an
optimal admissible tree search. In Proc. of the IX Int. Joint
Conf. on Artiﬁcial Intelligence (IJCAI’85), pages 1034–
1036, 1985.

[Korf, 1993] Richard E. Korf. Linear-space best-ﬁrst search.

Artiﬁcial Intelligence, 62:41–78, 1993.

[Mandow and P´erez de la Cruz, 2005] L. Mandow and J.L.
P´erez de la Cruz. A new approach to multiobjective A*
search. In Proc. of the XIX Int. Joint Conf. on Artiﬁcial
Intelligence (IJCAI’05), pages 218–223, 2005.

[Refanidis and Vlahavas, 2003] Ioannis Refanidis and Ioan-
nis Vlahavas. Multiobjective heuristic state-space search.
Artiﬁcial Intelligence, 145:1–32, 2003.

[Stewart and White, 1991] Bradley

S.

Figure 2: Memory and time requirements.

Chelsea C. White. Multiobjective A*.
the ACM, 38(4):775–814, October 1991.

IJCAI-07

2345

Stewart

and
Journal of

