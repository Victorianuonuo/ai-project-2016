Multiset Ordering Constraints* 

Alan Frisch  and  Ian Miguel 

Dept of Computer Science 

Zeynep Kiziltan 

Brahim Hnich  and  Toby Walsh 

Dept of Information Science Cork Constraint Computation Centre 

University 

of 

York 

Uppsala University 

University College Cork 

{frisch, ianm}@cs.york.ac.uk 

Zeynep.Kiziltan@dis.uu,se 

{brahim,tw}@4c.ucc.ie 

England 

Sweden 

Ireland 

Abstract 

We  identify  a  new  and  important  global  (or  non-
binary)  constraint  which  ensures  that  the  values 
taken  by  two  vectors  of  variables,  when  viewed 
as  multisets,  are  ordered.  This  constraint  is  use(cid:173)
ful  for a number of different applications including 
breaking  symmetry  and  fuzzy  constraint  satisfac(cid:173)
tion.  We propose and  implement a linear time al(cid:173)
gorithm  for  enforcing  generalised  arc-consistency 
on such a multiset ordering constraint.  Experimen(cid:173)
tal results show considerable promise. 

Introduction 

1 
Global (or non-binary) constraints are one of the factors cen(cid:173)
tral to the  success  of constraint programming  [Regin,  1994; 
1996; Beldiceanu, 2000].  Global constraints specify patterns 
that occur in many problems,  and call  efficient and effective 
constraint propagation algorithms.  In this paper, we  identify 
a  new  and  important  global  constraint.  This  constraint  en(cid:173)
sures that the values taken by two vectors of variables, when 
viewed as  multisets,  are ordered.  Such a constraint is  use(cid:173)
ful  in a number of domains.  For example, in the progressive 
party  problem  (probO13  in  csplib.org),  we  wish  to  assign  a 
host for each guest and period. We can model this with a vec(cid:173)
tor of variables for each period.  Each variable is assigned the 
host for a particular guest.  This model has unnecessary sym(cid:173)
metry as the periods can be freely permuted.  We can break 
this  symmetry  by  considering  the  multiset  of values  associ(cid:173)
ated with each vector and ordering these multisets.The aim of 
this paper is to study such multiset ordering constraints and to 
develop efficient and effective techniques for enforcing them. 

2  Formal Background 
A  constraint  satisfaction  problem  (CSP)  consists  of a  set  of 
variables,  each  with  a  finite  domain  of values,  and a  set  of 
constraints  that  specify  allowed  values  for  subsets  of vari(cid:173)
ables.  A solution  is an assignment of values to the  variables 
satisfying the constraints.  To find such solutions, we explore 
partial assignments enforcing a local consistency like gener(cid:173)
alized arc-consistency (GAC). A constraint is GAC iff, when 

* Support received by EPSRC under GR/R30792 and by the Sci(cid:173)
ence Foundation Ireland. We thank Chris Beck and Chris Jefferson. 

Vectors  of variables  are  indexed  from  0.  The  minimum 
element  in  the  domain  of  x1  is 
,  and the maximum 
is  max(xl).  The  function  floor(x)  assigns  all  variables  in  f 
to  their  minimum  values,  whilst  ceil(x)  assigns  all  to  their 
maximums.  The  vector 
is  identical  to x  except v  now 
has  the  domain 
.  An  occurrence  vector  occ(x)  associ(cid:173)
ated with x is indexed in decreasing order from the maximum 
max(x)  to  the  minimum  rnin(x)  value  from  the  domains  in 
x.  The  ith  element of occ(x)  is  the number of occurrences  of 
max(x)  -  i  in  x.  When  comparing  two  occurrence  vectors, 
we assume they start and end with the occurrence of the same 
value,  adding leading/ trailing zeroes as necessary.  Finally, 

iff x is lexicographically less than or equal to y. 

3  Motivating applications 
3.1  Matrix symmetry 
Many constraints programs contain matrices of decision vari(cid:173)
ables  (so  called  "matrix  models"),  and  the  rows  and/or 

CONSTRAINTS 

221 

columns of these matrices are symmetric and can be permuted 
[Flener et  al,,  2002].  Such  symmetries  are  very  difficult to 
deal with as there are a super-exponential number of permu(cid:173)
tations of the rows or columns to consider.  There are several 
ways to break symmetry in a CSP, such as SBDS [Gent and 
Smith, 2000] or SBDD [Fahle et  al,  2001].  One of the most 
effective, and the one which we will concentrate on as a major 
application for a multiset ordering constraint, is adding extra 
symmetry-breaking constraints to an  initial  model.  Existing 
techniques for dealing with such symmetries typically elimi(cid:173)
nate only some of the symmetry.  Additional techniques,  like 
those proposed here, are therefore of considerable value. 

The progressive party problem mentioned earlier has a 2d 
matrix of decision variables with matrix symmetry.  The rows 
of the matrix are the guests, the columns are the periods. Each 
variable gives the host assigned to a given guest in a given pe(cid:173)
riod. As periods are indistinguishable, the columns of the ma(cid:173)
trix are symmetric.  One way to break such column symmetry 
is  to  lex  order the  columns  [Frisch  et  al.,  2002].  Similarly, 
as guests  can be indistinguishable,  (some of) the rows may 
be symmetric and can be lex ordered.  Alternatively, we can 
treat  each  row  and/or  column  as  a  multiset  and break  such 
symmetry by multiset ordering the rows and/or columns. 

Unlike lex ordering, multiset ordering the rows of a matrix 
may not eliminate all row symmetry.  For example,  consider 
the symmetric matrices: 

Both  satisfy  the  constraint  that  the  first  row  is  multiset  less 
than  the  second. 
It  is  therefore  a  little  surprising  to  dis(cid:173)
cover  that  multiset  ordering  (which  does  not  break  all  row 
symmetry)  is  not  dominated  by  lex  ordering  (which  does) 
but  is  incomparable.  For example, 
but 

When  we  have  both  row  and  column  symmetry,  we  can 
multiset order both rows and columns.  Like lex ordering both 
rows and columns, this may not eliminate all row and column 
symmetry.  Consider the symmetric matrices: 

Both  have  multiset  ordered  rows  and  columns.  Unsurpris(cid:173)
ingly,  multiset  ordering  rows  and  columns  is  incomparable 
to  lex ordering rows  and columns.  Consider the  symmetric 
matrices: 

The first has lex ordered rows and columns, but the columns 
are not multiset ordered.  The second has rows and columns 
that are multiset ordered but the columns are not lex ordered. 
An alternative way to deal with row and column symmetry 
is to multiset order in one dimension and apply the symme(cid:173)
try  breaking  method  of our  choice  in  the  other  dimension. 
This  is  one of the best features  of using multiset ordering to 
break  symmetry.  It  is  compatible  with any  other method  in 
the other dimension.  For instance, we can multiset order the 
rows and lex order the columns.  Preliminary results in [Kizil-
tan and Smith,  2002]  suggest that such a combined method 
is very promising.  This combined method does not eliminate 

all  symmetry  (but  it  is  unlikely  that  any  polynomial  set  of 
constraints does).  Consider the symmetric matrices: 

Both  have  rows  that  are  multiset  ordered,  and  rows  and 
columns that are lex ordered.  Multiset ordering the rows and 
lex ordering the columns is again incomparable to lex order(cid:173)
ing rows and columns.  Consider the symmetric matrices: 

The  first  matrix  has  rows  that  are  multiset  ordered  and 
columns that are  lex ordered.  However,  its rows are not lex 
ordered.  The  second  matrix  has rows and columns that are 
lex ordered but does not have rows that are multiset ordered. 
Whilst the two orderings are theoretically  incomparable, our 
experimental  results  (see  later)  show  that  multiset  ordering 
the rows and lex ordering the  columns  is often the most ef(cid:173)
fective symmetry breaking constraint currently known. 

Fuzzy  constraints 

3.2 
Another application for multiset ordering is to fuzzy CSPs.  A 
fuzzy constraint associates  a degree  of satisfaction to an  as(cid:173)
signment tuple for the variables it constrains.  To combine de(cid:173)
grees of satisfaction, we can use a combination operator like 
the minimum function.  Unfortunately, the minimum function 
may cause a drowning effect when one poorly  satisfied  con(cid:173)
straint 'drowns' many highly satisfied constraints.  One solu(cid:173)
tion is to collect a vector of degrees of satisfaction, sort these 
values  in  ascending  order  and  compare  them  lexicographi(cid:173)
cally.  This  leximin  combination  operator  identifies  the  as(cid:173)
signment that violates the fewest constraints  [Fargier,  1994]. 
This induces an ordering identical to the multiset ordering ex(cid:173)
cept that the  lower elements  of the  satisfaction  scale  are the 
more  significant.  It  is  simple  to  modify  a  multiset  ordering 
constraint to consider the values in a reverse order.  To solve 
such leximin fuzzy CSPs, we can then use branch and bound, 
adding an ordering constraint when we find a solution to en(cid:173)
sure that future solutions are greater in the leximin ordering. 

4  GAC algorithm for multiset ordering 
The  last  section  motivated  why  we  want  multiset  ordering 
constraints.  We need, however, to be able to propagate such 
constraints  efficiently.  We  therefore  developed  an  efficient 
GAC algorithm for such constraints. 

4.1  Background 
The  algorithm  exploits two  theoretical  results.  The  first  re(cid:173)
duces  the  problem  to  testing  support  for  upper bounds  of x 
and lower bounds of y on suitable ground vectors.  The sec(cid:173)
ond  reduces  these  tests  to  lex  ordering  suitable  occurrence 
vectors.  Identical results hold for the strict multiset ordering 
constraint but for reasons of space we omit them here. 
Lemma  1  Given  two  disjoint  and  non-repeating  vectors  of 
variables,  x  and y,  with  non-empty  domains,  GAC(x  <my) 

222 

CONSTRAINTS 

In  particular, 

Proof:  (=>) As the constraint is GAC, all  values have sup­
port. 
has  support.  The  best 
support comes  if all  the  other variables  in  x  take their mini-
mums, and all the variables in y take their maximums. Hence, 

Similarly, for y1. 

(«=) The first constraint ensures that  rnax(x1)  is supported. 
The  values  which  support  max(xi)  also  support  all  smaller 
values.  Hence,  all  the  values  in  the  domain  of  Xi  are  sup­
ported.  By an analogous argument, all the values in the do­
main of yi are supported. Hence the constraint is GAC. QED. 
The  next  lemma  reduces these tests  for support to  lex  or­

dering suitable occurrence vectors. 
Lemma  2  Given  two  multisets  of values,  M  and  N,  M  <m 

Proof:  See [Kiziltan and Walsh, 2002]. 

4.2  A  worked  example 
Based on these lemmas, we have designed an efficient algo­
rithm  for  enforcing  GAC  on  a  multiset  ordering  constraint. 
The algorithm  goes through  the xt  and  yj  checking for sup­
port in the appropriate occurrence vectors.  Incremental com­
putation  of the  lex  ordering  test  avoids  repetition  of work. 
Consider the multiset ordering constraint 

where: 

We construct occurrence vectors for  floor(x)  and ceil(y), in­
dexed from 5 to 0: 

Recall  that  i n d e x d e n o t es  the  number  of 
occurrences  of the 
2 as the value 4 occurs twice. 

For example, index 4 is 

We first check  if 

If so, we 
can  fail  immediately  because  no  value  for  any  variable  can 
have support. Here, 
.  In fact, 
we  record  (in  a pointer,  ά)  that  the  two  occurrence  vectors 
are  lex  ordered by  index 4  of occ(floor{x)),  which  is  strictly 
smaller than  index 4  of  occ(ceil(y)).  This means that we will 
fail to find support in the  yj  if any of the  xi  is assigned a new 
value greater than 4.  We now go through the  xi  checking for 
support for their maximum  values,  and then the  yi  checking 
for support for their minimum  values. 

Now  consider  x\. 

Changing  occ(floor{x)) 
decreases 

have  support  so  we  skip  it. 
its  values  have  support? 

Consider  X0.  AS  it  has  a  singleton  domain,  and 
its  only  value  must 
Do 
to 
the 
number of occurrences  o f m m ( i i)  =  4 by  1,  and  increases 
the  number  of  occurrences  of 
by  1.  As 
this upsets the lex ordering of the two oc­
currence vectors.  We therefore prune all values in the domain 
of x1 larger than  ά.  This leaves a single supported value, 4. 
to 
decreases 
the  number  of  occurrences  of  min  (x2)  =  3  by  1,  and 
increases  the  number  of  occurrences  of 
by  1.  As  with  x1  any  value  of  x2  larger  than 
upsets  the  lex  ordering.  We  therefore  prune  5  from  the 

Now  consider 

Changing 

x2. 

domain  of x2 •  Now consider  x3.  Changing 

to 
decreases 
the  number  of  occurrences  of 
by  1,  and 
increases  the  number of occurrences  of  max(x3)  =  4  by  1. 
The occurrence vectors beneath a would now be lex ordered 
the  wrong  way.  We therefore  also prune the value 
=  4, 
leaving  a single  supported value  2  in  the  domain  of  x3.  As 
x4  and  x5  have singleton domains, their values have support. 
for  support. 
However, rather than prune values above (and in some cases 
, there is now a dual pointer .  and we prune values 
equal to) 
in the domains  of 
The 
is the largest index such that the occurrence vectors 
pointer 
beneath it are lex ordered the wrong way.  Any value less than 

Similarly,  we  check  the  minimums  of the 

up to (and in some cases equal to) 

cannot hope  to  change  the  lex  ordering 

will  still  order the  vectors the  wrong  way.  Such  values can 
therefore be pruned. Once we have considered each of the yj, 
we have the following generalized arc-consistent vectors: 

and 

and two flags 

4.3  A l g o r i t hm  details 
The  algorithm  uses  two  pointers 
and S to avoid traversing the occurrence vectors each time we 
look for support.  The pointer 
is set to to the most significant 
index above which all occurrences are pair-wise equal and at 
ά they are strictly ordered.  If the vectors are equal then  ά  is 
set to  - 
is set to the most significant index 
below ά such that the occurrence vectors are lex ordered the 
wrong  way.  If no  such  index  exists,  we set 
to — 00. The 
is  set  to  true  if all  the  indices  between  ά  and  (3  are 
flag 
pair-wise equal and the flag 
is set to true  if the  sub-vectors 
are lex ordered the wrong way.  For example, given 
below 
the occurrence vectors in section 4.2, ά is set to 4, 
to 2, and 
the  flags  and  are set to true. 

The pointer 

We summarise the major steps the algorithm performs: 

A. 
B. 
C.  For  each  xi 

according to their definitions 
If  its  maximum  disturbs  the  lex  ordering 
on the occurrence vectors, tighten its upper-bound to ά 
when  the  occurrence  vectors  are  lex  ordered  below  ά, 
otherwise to 

D.  For each  yi  If its  minimum  disturbs the  lex ordering on 
the occurrence  vectors,  then tighten  its  lower-bound to 
when the occurrence vectors are lex ordered below a, 

otherwise to  +  1. 

When  we  prune  a  value,  we  do  not  need  to  check  re­
cursively  for previous  support.  Pruning  changes  neither  the 
lower bounds  of x  nor the  upper bounds  of y.  These  values 
continue to provide support. The exception is when a domain 
is a singleton, and pruning causes a domain wipe-out. 

We now give pseudo-code for an algorithm that maintains 
GAC on a multiset ordering constraint between vectors x and 
y which are of length n and m respectively.  As the algorithm 
reasons about occurrences vectors,  the original  vectors need 
not be identical in length (though they often are). 

The  algorithm  is  called  whenever  lower  bounds  of  x1  or 
upper  bounds  of yj  change.  Lines  Al  to  A3  build  the  oc­
currence  vectors  ox  and  dy.  Line  Bl  calls  the  procedure  to 

CONSTRAINTS 

223 

224 

CONSTRAINTS 

is equivalent to  GAC  on  the  original  multiset ordering con(cid:173)
straint.  However, such an arithmetic constraint is only feasi(cid:173)
ble for small n.  Further, most existing solvers will not enforce 
BC on such an arithmetic constraint, but will delay it until all 
but one of the variables are instantiated. 

5.2  Decomposition 
Multiset  ordering  is  equivalent to  the  lex  ordering the  asso(cid:173)
ciated  occurrence  vectors.  As  we  have  efficient  algorithms 
for constructing occurrence vectors (via the global cardinal(cid:173)
ity  constraint  [Regin,  1996])  and  for  lex  ordering  [Frisch et 
al.,  2002],  this might be an  alternative approach.  However, 
as the following theorem shows, such a decomposition hin(cid:173)
ders constraint propagation.  Also, the two global cardinality 
constraints in such a decomposition are more expensive to en(cid:173)
force than the algorithm presented here.  We write gcc(x, ox) 
for the global cardinality constraint that channels from a vec(cid:173)
tor of variables x to the associated occurrence vector ox. 

Another  approach  is  to  use  the  sorted  constraint  in  the 
Eclipse solver.  This ensures that the values taken by one vec(cid:173)
tor of variables are identical but in sorted order to the values 
taken by a second vector of variables.  To post a multiset or(cid:173)
dering constraint on two vectors, we can channel each into a 
sorted vector and lex order these. The above example demon(cid:173)
strates that such a decomposition again hinders propagation. 
The sorting constraint is also more expensive to enforce. 
6  Experimental results 
We designed  some experiments to test three  goals.  First,  is 
multiset  ordering  an  effective  method  for  dealing  with  row 
and/or column symmetry?  Second, how does multiset order(cid:173)
ing compare  to  lex ordering?  Which one breaks more  sym(cid:173)
metry?  Is a combined method, which multiset orders one di(cid:173)
mension and lex orders the other one of the matrix, superior? 
Third,  does  our  GAC  algorithm  do  more  inference  in prac(cid:173)
tice than the decomposition? Similarly, is the algorithm more 
efficient in practice than its decomposition? 

The symmetry  breaking constraints we used are strict lex 
on the rows 
mul(cid:173)
ordering on the columns 
,  (strict)  multiset ordering 
tiset  ordering  on  the  rows 
on the columns 
and combinations of these 
constraints.  Such  constraints  are  posted  between  adjacent 
rows/columns.  The  results  of the  experiments  are  shown  in 
tables where a "-" means no result is obtained in 1 hour (3600 
secs). The experiments are done using 1LOG Solver 5.2 on a 
1000MHz pentium III with 256 Mb RAM using Windows XP. 
6.1  Progressive Party Problem 
There are a set of host boats, each with a capacity, and a set of 
guest boats, each with a crew size.  We wish to assign a host 

Table  1:  5-13-29  progressive  party  problem  using  row-by-
row labelling. 

for each guest and period, such that a guest crew never visits 
the same host twice, no two guest crews meet more than once, 
and the spare capacity of each host boat, after accommodating 
its own crew, is not exceeded (probO13 in c s p l i b . o r g ). 

A  matrix  model  of this  problem  [Smith  et al.,  1995]  is  a 
2-d  matrix  of guests  x  periods  where  each  variable  is  as(cid:173)
signed  a  host  representing  that  a  host  is  accommodating  a 
particular  guest  in  a  given  time  period.  The  rows  are  the 
guests,  the  columns  are  the  periods.  This  model  has  col(cid:173)
umn  and  partial  row  symmetry:  any  two  periods,  and  any 
two guests with the same crew size are indistinguishable. We 
consider the  13-hosts  and  29  guests  problem  with  5  and  6 
time periods, referred as 5-13-29 and 6-13-29.  These prob(cid:173)
lems have ;P!14!2!4!5!7! row  and  column  symmetries  where 
p  is  the  number  of time  periods.  The  actual  data  can  be 
found in  csplib.org.  Due to the problem constraints, no pair 
of rows/columns can be equal, hence we can safely pose strict 
lex ordering.  However, any two distinct rows/columns might 
be equal when viewed as multisets. 

As  in  [Smith  et  al.,  1995],  the  guest boats  are ordered  in 
descending  order  of their  size.  We  order  the  host  boats  in 
descending  order  of spare  capacity  to  choose  a  value  in  a 
succeed-first  manner.  Results  obtained  by  row-by-row,  and 
column-by-column labelling strategies are given in Tables  1 
and 2.  With row-by-row labelling,  we cannot solve 6-13-29 
with or without symmetry breaking.  For the 5-13-29 problem, 
<ieXK  breaks a lot more row symmetry t h a n H o w e v e r, 
the  reverse  is  true  for  the  columns.  Here, 
' does not 
break  any  symmetry  but 
does.  Multiset ordering  one 
dimension  of a  matrix  therefore  does  not  necessarily  break 
less symmetry than  lex ordering the  same dimension.  Such 
phenomena occur through  interactions  with the search strat(cid:173)
egy:  a  search  strategy  might  already  lex  order,  so  multiset 
ordering constraints break additional symmetry.  The smallest 
search tree and also the least solving time is obtained by 
<lexR.  This supports our conjecture that lex ordering one di(cid:173)
mension combined with multiset ordering the other can break 
more symmetry than lex/multiset ordering both dimensions. 
With column-by-column labelling, we are able to solve the 
break 

6-13-29  problem.  Neither  of 
any symmetry.  The smallest search tree is obtained by 
This  supports  our  conjecture  that  multiset  ordering  one  di(cid:173)
mension can break more symmetry than lex ordering the same 
or both dimensions. If the search strategy already orders both 
dimensions lexicographically, imposing a constraint like mul(cid:173)
tiset ordering in one dimension breaks additional symmetry. 

CONSTRAINTS 

225 

Table  2:  6-13-29  progressive  party  problem  using  column-
by-column labelling. 

6.2  Sports  Scheduling  with  Odd  Teams 
This is a modified version of prob026 in csplib.org. We have 
n  teams  (n  is  odd),  playing  over  n  weeks.  Each  week  is 
divided  into  (n  —  l ) /2  periods,  and  each  period  is  divided 
into  2  slots,  home  and  away.  We  wish  to  find  a  schedule 
so  that  every  team  plays  at  most  once  a  week,  every  team 
plays twice in the same period over the tournament and every 
team plays every other team.  We slightly modify the model 
in [Van Hentenryck et al.,  1999], where teams is a 3-d matrix 
of periods  x  weeks  x  slots.  Each  element  of teams  is  the 
team playing in a given period, week and slot.  We treat this 
matrix as 2-d where the rows are the periods and columns are 
the weeks, and each entry is a list of variables giving the slots. 
As  the  periods  and  the  weeks  are  indistinguishable,  this 
problem has 
row and column symmetries.  We 
pose  strict ordering  constraints  on  the  rows  and  columns  of 
teams as the periods and weeks cannot be equal.  Due to the 
constraints  on  the  periods,  posing  multiset  ordering  on  the 
rows is not effective. 

Results  obtained  by  column-by-column  labelling  of  the 
teams  are given  in Table  3.  For one  column,  we  first  label 
the  first  slots;  for the  other,  we  first  label  the  second  slots. 
With  this strategy, 
does  not break any  symmetry,  so 
we omit it in the table.  Posing multiset ordering by our algo(cid:173)
rithm is much more effective and efficient than by gec and lex 
ordering constraints.  This holds for many other search strate(cid:173)
gies. In Table 3, we note that 
gives a smaller search tree 
than 
However,  for other search  strategies the reverse 
is true.  This supports the theoretical  result that lex ordering 
and multiset ordering are incomparable. 

7  Conclusions 
We have identified a new and important global (non-binary) 
constraint.  This  constraint ensures  that the  values  taken  by 
two  vectors  of variables,  when  viewed  as  multisets,  are  or(cid:173)
dered.  We have developed an efficient linear time algorithm 
for enforcing generalised arc-consistency on such a multiset 
ordering  constraint.  We  have  proposed  a  number  of appli(cid:173)
cations for this new constraint including breaking  symmetry 
in matrix models, and fuzzy constraint satisfaction.  We have 
shown that alternative methods for posting a multiset ordering 
constraint like an  arithmetic constraint or decomposition are 
inferior.  Finally, we have  implemented this generalized arc-
consistency algorithm in ILOG  Solver.  Experimental results 
on a number of problem domains show considerable promise. 

Table 3:  Sports scheduling problem. 

References 
[Beldiceanu, 2000]  N.  Beldiceanu.  Global  constraints  as 
graph  properties  on  a  structured  network  of elementary 
constraints of the same type. In Proc. of CP-2000, LNCS 
1894, pp 52-66, 2000. 

[Fahle et al., 2001]  T.  Fahle,  S.  Schamberger  and  M.  Sell-
In  Proc.  of CP-2001,  LNCS 

man.  Symmetry  Breaking. 
2239, pp 93-107, 2001. 

[Fargier,  1994]  H. Fargier. Problemes de satisfaction de con-
straintesflexibles:  application  a  Vordonnancement de pro(cid:173)
duction. PhD thesis, Uni. of Paul Sabatier, Toulouse, 1994. 
[Flener et al., 2002]  P. Flener, A. Frisch, B. Hnich, Z. Kizil-
tan, 1. Miguel, J. Pearson, and T. Walsh. Breaking row and 
column symmetry in matrix models. In Proc. of CP-2002, 
LNCS 2470, pp 462-476, 2002. 

[Frisch et  al,  2002]  A.  Frisch,  B.  Hnich,  Z.  Kiziltan, 
I.  Miguel,  and  T.  Walsh.  Global  constraints  for  lexico(cid:173)
graphic  orderings.  In Proc.  of CP-2002,  LNCS  2470, pp 
93-108,2002. 

[Gent and Smith, 2000]  1.  Gent  and  B.  Smith.  Symmetry 
Breaking  in  Constraint  Programming.  In  Proc.  of  EC  AI 
'2000,pp 599-603, 2000. 

[Kiziltan and Smith, 2002]  Z.  Kiziltan and B.  Smith.  Sym(cid:173)
metry breaking constraints for matrix models.  In Proc.  of 
2nd Int.  Workshop on Symmetry in Constraint Satisfaction 
Problems (SymCon-02), held alongside CP-2002, 2002. 

LKiziltan and Walsh, 2002]  Z.  Kiziltan and T.  Walsh.  Con(cid:173)
straint  Programming  with  Multisets.  In  Proc.  of 2nd Int. 
Workshop  on  Symmetry  in  Constraint  Satisfaction  Prob(cid:173)
lems (SymCon-02), held alongside CP-2002, 2002. 

[Regin,  1994]  J.C.  Regin.  A  filtering  algorithm  for  con(cid:173)
straints of difference  in CSPs.  In Proc.  AAAl'94, pp 362-
367. 1994. 

[Regin,  1996]  J.C.  Regin.  Generalized  arc  consistency  for 
In  Proc.  of AAAl'96,  pp 

global  cardinality  constraints. 
209-215. 1996. 

[Schiex et a/.,  1995]  T.  Schiex, H.  Fargier, and G. Verfaille. 
Valued  constraint  satisfaction  problems:  hard  and  easy 
problems.  In  Proc.  of  IJCAI'95,  pp  631-637.  1995. 

[Smith et al.,  1995]  B.M.  Smith, S.C. Brailsford, P.M. Hub(cid:173)
bard, and H.P.  Williams.  The progressive party problem. 
Research Report 95.8, Uni. of Leeds.  1995. 

[Van Hentenryck et al,  1999]  P. van Hentenryck, L. Michel, 
L.  Perron,  and  J.C.  Regin.  Constraint  programming  in 
OPL. In Proc. of PPDP '99, pp 98-116. Springer, 1999. 

226 

CONSTRAINTS 

