Reasoning under inconsistency: the forgotten connective

S·ebastien Konieczny

CRIL - Universit·e d’Artois

62307 Lens, France

konieczny@cril.univ-artois.fr

J·er(cid:136)ome Lang

Pierre Marquis

IRIT - Universit·e Paul Sabatier

CRIL - Universit·e d’Artois

31062 Toulouse, France

lang@irit.fr

62307 Lens, France

marquis@cril.univ-artois.fr

Abstract

In many frameworks for reasoning under inconsis-
tency, it is implicitly assumed that the formulae
from the belief base are connected using a weak
form of conjunction. When it is consistent, a belief
base B = f’1; : : : ; ’ng, where the ’i are proposi-
tional formulae, is logically equivalent to the base
f’1 ^ : : : ^ ’ng. However, when it is not con-
sistent, both bases typically lead to different con-
clusions. This illustrates the fact that the comma
used in base B has to be considered as an addi-
tional, genuine connective, and not as a simple con-
junction. In this work we de(cid:2)ne and investigate a
propositional framework with such a (cid:147)comma con-
nective(cid:148). We give it a semantics and show how it
generalizes several approaches for reasoning from
inconsistent beliefs.

1 Introduction
There are many different situations that can lead to reason
with sets of (mutually) inconsistent formulae (see e.g. [Bloch
and Hunter, 2001] for a classi(cid:2)cation).

When dealing with an inconsistent belief base, a rational
agent must refrain from using classical entailment to exploit
her belief base, since from an inconsistent belief base, every
formula is a logical consequence.

Many approaches have been proposed so far to address
the paraconsistency issue, i.e., the problem of designing in-
ference relations that do not necessarily trivialize when the
belief base is inconsistent, but preserve many expected con-
sequences nevertheless. Among them, many approaches to
avoid trivialization in presence of a contradiction consist in
weakening the inconsistent belief base by inhibiting some for-
mulae in it. To be more precise, the key idea of such ap-
proaches is to select some consistent subsets of the belief base
B, then to reason deductively from some of them.

Clearly enough, such approaches require a belief base to be
a set of formulae, not a single formula (inhibition consists in
removing formulae from the set). As a consequence, a ((cid:2)nite)
inconsistent set of formulae cannot be considered as equiva-
lent to the conjunction of its elements (and this contrasts with
what happens when consistent sets are considered). For in-
stance, the set of consequences of f’; :’;  g typically dif-
fers from the set of consequences of f’ ^ :’ ^  g.

Handling in a different way conjunctions of formulae
and sets of formulae when they are classically inconsistent
is an idea which underlies many paraconsistent logics for
decades. Such logics are called non-adjunctive logics, which
just means that the inference rule which consists in con-
sidering the conjunctive formula (cid:30) ^   as derivable from
the set f’;  g fails. For instance, Ja·skowski’s discursive
logic [Ja·skowski, 1969], one of the (cid:2)rst paraconsistent logic
pointed out so far, is non-adjunctive: in this logic, a propo-
sitional formula ’ is considered as a consequence of a set of
formulae f’1; : : : ; ’ng if and only if (cid:5)’ is a consequence of
f(cid:5)’1; : : : ; (cid:5)’ng in epistemic logic S5; this amounts to say
that ’ is a consequence of f’1; : : : ; ’ng in Ja·skowski’s logic
if and only if ’ is a classical consequence of one of the ’i’s.
This approach has been further re(cid:2)ned by Rescher and Manor
[Rescher and Manor, 1970], who suggest to conjoin up to
maximal consistency, and then by many AI researchers who
introduce conjoining policies that can take advantage of ad-
ditional information about the relative certainty of pieces of
belief.

Nevertheless, as far as we know and apart of the recent
work [Mengin, 2004] discussed in Section 8, considering
comma as a plain connective has never been overstepped up
to now, in particular the languages of previous paraconsistent
logics do not enable sets of formulae to be nested. De(cid:2)n-
ing and investigating a logical framework in which such a
(cid:147)comma connective(cid:148) is used is the main purpose of this pa-
per, which is organized as follows. After some formal pre-
liminaries, we present both the syntactical and the semantical
aspects of the (cid:147)comma logic(cid:148) in Section 3. Some properties
of the corresponding inference relation are given in Section
4. The generality of the proposed framework is discussed in
Section 5. Some translatability results and some complex-
ity results are given in Section 6. An alternative semantics
for the comma connective based on cardinality is brie(cid:3)y dis-
cussed in Section 7. Due to space limitations, most proofs are
only sketched. Section 8 concludes the paper.
2 Preliminaries
Let P S be a (cid:2)nite set of propositional variables: a, b, c, etc.
LP S is the propositional language built from P S, the con-
stants > (verum) and ? (falsum) and the standard connectives
f^; _; :; !g in the usual way. Formulae of LP S are noted
with small Greek letters ’,  , etc. An interpretation (world)
M is a total function from P S to f0; 1g, typically represented

as the set of all the variables of P S it satis(cid:2)es. MP S denotes
the set of interpretations built over P S. M is a model of a
formula ’, denoted M j= ’, if and only if it makes it true (in
the usual truth-functional way). M od(’) denotes the set of
models of ’. j= denotes classical entailment and (cid:17) denotes
equivalence between formulae from LP S.

Let (cid:26) denotes strict inclusion. Let B = f’1; : : : ; ’ng be
a (cid:2)nite set of formulae of LP S, and let B0 (cid:18) B, we note

V B0 = Vf’i j’i 2 B0g. B0 is a consistent subset of B
if and only if V B0 is consistent. B 0 is a maximal consis-

tent subset (or maxcons) of B if and only if B 0 is consis-
tent and there is no consistent B 00 such that B0 (cid:26) B00 (cid:18) B.
M axCons(B) denotes the set of the maximal consistent sub-
sets of B.

3 The (cid:147)comma logic(cid:148)
Let us start with the de(cid:2)nition of the language of our comma
logic.
De(cid:2)nition 1 The language LC
logic is de(cid:2)ned inductively as follows:

P S of the propositional comma

(cid:15) P S [ f>; ?g (cid:18) LC
(cid:15) If ’ 2 LC

P S;
P S and   2 LC
P S then (:’), (’ ^  ), (’ _  ),
(’ !  ) belong to LC
P S;

(cid:15) If n (cid:21) 0 and f’1; : : : ; ’ng (cid:18) LC

P S then h’1; : : : ; ’ni

belongs to LC

P S.

Parentheses can be omitted when no ambiguity is possible.

Clearly enough, LC

P S is a superset of LP S: nonclassical
formulae obtained by taking advantage of the comma connec-
tive can be formed. Here, we abuse words slightly: comma
is actually considered as a set constructor, hence formally
comma denotes a family of connectives, one per possible ar-
ity. Especially, comma is not always binary: one can apply
the comma connective to no formula at all (the empty set),
one formula (singletons), or more than two formulae. This
forces us to introduce additional separators (the chevrons h
and i (cid:150) which must not be confused with parentheses) but
enables to keep the notations not too heavy.

It proves also interesting to de(cid:2)ne the depth of a formula

P S, and the languages fLC[n]

of LC
De(cid:2)nition 2 The depth of a formula ’ from LC
inductively as follows:

P S ; n 2 INg as:

P S is de(cid:2)ned

(cid:15) If ’ 2 P S [ f>; ?g then depth(’) = 0 ;
(cid:15) depth(:’) = depth(’) ;
(cid:15) depth(’ ^  ) = depth(’ _  ) = depth(’ !  ) =

max(depth(’); depth( )) ;

(cid:15) depth(h’1; : : : ; ’ni) = maxi=1:::n depth(’i) + 1.1

For n 2 IN, LC[n]
depth is less or equal to n.

P S is the set of all formulae of LC

P S whose

One can easily check that LC
and
P S = LP S. Finally, for all n (cid:21) 1, we de(cid:2)ne the lan-
(set of simple formulae of depth n) as the

P S = Sn2IN LC[n]

LC[0]
guage LC[s;n]

P S

P S

1By convention depth(h i) = 1.

subset of LC[n]
P S containing all formulae h’1; : : : ; ’ki, where
’1; : : : ; ’k are formulae of LC[n(cid:0)1]
, i.e., the set of formulae
of depth n where comma is the main functor. Here are some
examples of formulae of LC

P S, where P S = fa; b; cg:

P S

(cid:15) ’1 = a ^ b ^ (:b _ c) ^ :c;
(cid:15) ’2 = ha ^ b; :b _ c; :ci;
(cid:15) ’3 = ha ^ (b _ hc; a _ b; :ci); h:b _ c; :ci ^ ha; >ii;
(cid:15) ’4 = h i.
We have depth(’1) = 0; depth(’2) = 1; depth(’3) = 3.

Note also that ’2 2 LC[s;1]

(as ’4) and that ’3 2 LC[s;3]
.
Let us now present the semantics of our new language:

P S

P S

De(cid:2)nition 3 The notion of satisfaction of a formula of LC
P S
by an interpretation M is given by the relation j=c on MP S(cid:2)
LC

P S de(cid:2)ned inductively as:
(cid:15) M j=c >;
(cid:15) M 6j=c ?;
(cid:15) If a 2 P S, M j=c a if and only if a 2 M;
(cid:15) M j=c :’ if and only if M 6j=c ’;
(cid:15) M j=c ’ ^   if and only if M j=c ’ and M j=c  ;
(cid:15) M j=c ’ _   if and only if M j=c ’ or M j=c  ;
(cid:15) M j=c ’ !   if and only if M j=c :’ or M j=c  ;
(cid:15) M j=c h’1; : : : ; ’ni if and only if there is no interpreta-
tion M 0 2 MP S such that fi j M 0j=c ’ig strictly con-
tains fi j M j=c ’ig.

We now extend several standard notions (and the corre-
sponding notations) from classical logic to comma logic.
Let M odC(’) = fM 2 MP S j M j=c ’g. A formula
P Sis said to be consistent (or satis(cid:2)able) if and only if
of LC
M odC(’) 6= ;, and valid if and only if M odC(’) = MP S.
P S,   is said to be a con-
If ’ and   are two formulae of LC
sequence of ’ (denoted ’j=c  ) if and only if M odC(’) (cid:18)
M odC( ). When ’ = >, we simply write j=c   instead of
P S are said to be equiv-
>j=c  . Two formulae ’ and   of LC
alent, noted ’(cid:17)c , if and only if ’j=c   and  j=c ’.

4 Some logical properties
It is easy to show that, in contrast to the other connectives
in the logic, the comma connective is not truth-functional: in
the general case, the truth value of h’1; : : : ; ’ni from LC
P S
in interpretation M cannot be determined from the truth val-
ues of each ’i (i 2 1 : : : n) in M only. For instance, let
P S = fa; bg, M = fag, ’1 = ha; bi, ’2 = ha ^ :b; bi: M
satis(cid:2)es the (cid:147)(cid:2)rst(cid:148) element of ’1 and ’2, but does not sat-
isfy the (cid:147)second(cid:148) one; while M is a model of ’2, it is not a
model of ’1. This lack of truth-functionality explains why the
comma connective is really genuine in the logic. (It cannot be
de(cid:2)ned by just combining connectives of classical logic).

Actually,

the discrepancy between classical

logic and

comma logic lies only in the comma connective, since:
Proposition 1 Comma logic is a conservative extension of
classical logic: for every pair of formulae ’,   in which the
comma connective does not occur, then ’j=c   if and only if
’ j=  .

Obviously, new valid formulae are obtained in comma
logic, like h’; :’i, because the language of propositional
logic has been enriched, but in any case classical theorems
are preserved.

Furthermore, the replacement metatheorem of classical

logic can be extended to comma logic:
Proposition 2 Let ’ be a valid formula from LC
P S and let x 2
P S. Let   be any formula from LC
P S. The formula obtained
by replacing in ’ every occurrence of x by an occurrence of
  is valid as well.

Let us now make precise some properties of the inference
relation j=c . First, a direct consequence of its de(cid:2)nition is
that j=c is a Tarskian consequence relation (since it is de-
(cid:2)ned as model containment); from this observation, a number
of immediate properties follows, especially the fact that j=c
is re(cid:3)exive and transitive. By the way, note that while in clas-
sical logic the basic entailment relation j= on LP S (cid:2) LP S can
be easily extended to a relation on 2LP S (cid:2) LP S by de(cid:2)ning
the models of a set of formulae as the interpretations satisfy-
ing every formula from the set, the similar construction would
not be meaningful here; indeed, in comma logic, sets of for-
mulae are interpreted in a nonstandard way. This renders the
usual characterization of Tarskian consequence relations in-
adequate in our setting since j=c does satisfy neither strong
re(cid:3)exivity nor monotonicity:

(cid:15) ha; :ai 6j=c a;
(cid:15) haij=c a but ha; :ai 6j=c a.
Here are some other valuable properties:

Proposition 3

1. If ’1j=c ’2 and h’1; ’2ij=c  , then ’1j=c  .
2. If h’1; ’2ij=c  , then ’1j=c (’2 !  ).
3. If ’1(cid:17)c’2 and ’1 is a subformula of  , then any for-
mula obtained by replacing in   occurrences of ’1 by
’2 is equivalent to  .

4. ’j=c  1 ^  2 if and only if ’j=c  1 and ’j=c  2.
5. If h’; ’1ij=c   and h’; ’2ij=c  ,

then h’; (’1 _

’2)ij=c  .

Item (1) is a form of the cut rule. Item (2) is a form of the
deduction metatheorem. Item (3) is the substitution metathe-
orem for the (cid:147)comma logic(cid:148). In particular, it shows that 8k
i then h’1; : : : ; ’k; : : : ; ’ni (cid:17)c
if 8i 2 1 : : : k ’i (cid:17)c ’0
k; : : : ; ’ni. Item (4) is a form of the (cid:147)and rule(cid:148).
h’0
Item (5) is a form of proof by cases (or (cid:147)or rule(cid:148)).

1; : : : ; ’0

Other standard metatheorems of classical logic fails in the
general case for full comma logic, i.e., when sets of for-
mulae are considered. For instance, modus ponens fails
(ha; (a ! :a)i 6j=c :a), and-elimination and or-introduction
as well (h?; ’i 6j=c ? and h?i 6j=c ? _ ’); reduction ad absur-
dum fails (’j=c ’ while h’; :’i 6j=c ?).

Let us now present additional properties which state how
the comma connective interacts with the other connectives
(and itself).
Proposition 4

6. For any permutation (cid:27) of f1; : : : ; ng, h’1; : : : ; ’ni is

equivalent to h’(cid:27)(1); : : : ; ’(cid:27)(n)i.

7. h’1; : : : ; ’1; ’2; : : : ; ’ni (cid:17)c h’1; : : : ; ’ni.
8. 8n (cid:21) 0 h’1; : : : ; ’ni 6j=c ?.
9. h’1; ’2; : : : ; ’ni (cid:17)c h’2; : : : ; ’ni if ’1 is inconsistent
or (9i 2 2 : : : n, ’i is consistent and 8i 2 2 : : : n, ’i j=
’1).

10. ’1 ^ : : : ^ ’nj=c h’1; : : : ; ’ni.
11. h’1; : : : ; ’ni^h 1; : : : ;  mij=c h’1 ^ 1; : : : ; ’1 ^ m;

: : : ; ’n ^  1; : : : ; ’n ^  mi.

12. h’1; : : : ; ’ni ^ h 1; : : : ;  mij=c h’1; : : : ; ’n;  1; : : : ;

 mi.

13. If ’i is consistent (for at least one i 2 1 : : : n), then

h’1; : : : ; ’nij=c ’1 _ : : : _ ’n.

14. If ’ is consistent,

then h’1 _ ’; : : : ; ’n _ ’i (cid:17)c (’1 ^ : : : ^ ’n) _ ’.

15. :(:’) (cid:17)c ’.

P S

Item (6) shows that the (cid:147)comma connective(cid:148) is symmetric
in every argument. Item (7) shows that the (cid:147)comma connec-
tive(cid:148) is idempotent.

Item (8) shows that for every n > 0, every formula from
LC[s;n]
is consistent (obviously, this cannot be extended to
the full language LC
P S). This is suf(cid:2)cient to ensure that j=c
achieves a form of paraconsistency when starting from a set
of formulae.

Item (9) gives a suf(cid:2)cient condition to simplify a set of for-
mulae (note that in contrast to classical logic, it is not possible
in general to remove a formula from a set as soon as it is en-
tailed by another formula; for instance, while a ^ bj=c a _ b,
we do not have ha ^ b; :a; a _ bi equivalent to ha ^ b; :ai).
Items (10), (11), (12) make precise the connection between
the comma connective and conjunction. None of the converse
relation holds in the general case (for (10), ’1 ^ : : : ^ ’n
should be consistent; the converse of (11) does not hold even
in the restricted case m = 1 and h’1; : : : ; ’ni ^  1 is con-
sistent: ha ^ :b; :a ^ :b; :a ^ :bi 6j=c ha; :a _ b; :ai ^ :b;
the converse of (12) fails since for instance ha; :ai 6j=c hai ^
h:ai). Note also that there is in general no deductive connec-
tions between a formula where nested commas occur and its
(cid:147)unfold(cid:148) counterpart. Especially, in general, we have:
hh’1; : : : ; ’ni; h 1; : : : ;  mii 6j=c h’1; : : : ; ’n;  1; : : : ;  mi

For example, hha; bi; h:a; cii 6j=c ha; :a; b; ci.
In general, we also have:

h’1; : : : ; ’n;  1; : : : ;  mi 6j=c hh’1; : : : ; ’ni; h 1; : : : ;  mii

For example, ha; :a; b; ci 6j=c hha; b; :ai; h:a; cii.
Item (13) and (14) make precise the connection between
the comma connective and disjunction. No other signi(cid:2)cant
properties involving disjunction hold; for instance ha; b; :bi_
:a 6j=c ha _ :a; b _ :a; :b _ :ai. Together with the previ-
ous properties concerning conjunction, it shows that we can
consider the comma connective as a (cid:147)weak(cid:148) conjunction con-
nective, since it is equivalent to it when the conjunction is
consistent, but gives a consistent result even when it is not.
Furthermore, when all the formulae are pairwise contradic-
tory but one of them is consistent, comma is equivalent to the
disjunction connective. Thus, if we specialize it to the case
two formulae ’ and   are considered, we get the easy corol-
lary:

Corollary 1 h’;  i (cid:17)c ( ’ ^   if consistent, else

’ _   if consistent, else
>

otherwise.

Item (15) (cid:2)nally states that negation is involutive for the
full logic (in particular, :(:h’1; : : : ; ’ni) (cid:17)c h’1; : : : ; ’ni).
No other link between negation and the comma connective
can be established in the general case (for instance, : does
not distribute over the (cid:147)comma connective(cid:148); for instance,
:h?i (cid:17)c ? while h:?i (cid:17)c >).

5 Generality of the framework
Let us now show how several approaches for dealing with
inconsistency can be encoded in this logic.

5.1 Skeptical inference
One of the most common method for reasoning from an in-
consistent set of formulae consists in selecting the maximal
(w.r.t. set inclusion) consistent subsets (also called maxcons)
of formulae (see [Rescher and Manor, 1970] for example).
Consequences w.r.t. skeptical inference (also called (cid:147)univer-
sal(cid:148) inference) are then de(cid:2)ned as classical consequences of
every maxcons:
De(cid:2)nition 4 (cid:1) ‘8 ’ iff 8M 2 M axCons((cid:1)), M j= ’.

Such an inference relation can be easily recovered in our

comma logic:
Proposition 5 f’1; : : : ; ’ng ‘8 ’ iff h’1; : : : ; ’nij=c ’.

5.2 Credulous inference
From a set of maxcons, one can also consider credulous infer-
ence (also called (cid:147)existential(cid:148) inference), that allows to infer
a formula if at least one maxcons classically entails it.
De(cid:2)nition 5 (cid:1) ‘9 ’ iff 9M 2 M axCons((cid:1)), M j= ’.

Again, such an inference relation can be easily recovered

in our comma logic:
Proposition 6
f’1; : : : ; ’ng ‘9 ’ iff h’1; : : : ; ’n; :’i ^ ’ 6j=c ?.

5.3 Supernormal defaults
Assumption-based theories and supernormal default logic
[Poole, 1988; Brewka, 1989] can be described in the follow-
ing way. Let hB; Bdi be a pair, where B and Bd are two (cid:2)nite
sets of formulae. B is the set of facts (or hard constraints),
that is supposed to be consistent. Bd is a set of defaults, i.e.,
a set of formulae that one wishes to add to facts if it does not
result in an inconsistency. Bd is often not consistent with B.
An extension is a subset of formulae of B[Bd that contains
all the formulae of B and a maximum (w.r.t. set inclusion) of
formulae of Bd. So, the set of all the extensions is de(cid:2)ned as:
Extens(hB; Bdi) = fE j E (cid:18) B[Bd and B (cid:18) E and E 6j=
? and 8E 0 s.t. E (cid:26) E 0 (cid:18) B [ Bd; E 0 j= ?g:

Inference from such a supernormal default theory hB; Bdi

is de(cid:2)ned as:
De(cid:2)nition 6 hB; Bdi ‘D ’ iff 8E 2 Extens(hB; Bdi),
E j= ’.

This can be also easily expressed within the comma logic
framework (note that since the set B of facts is consistent, it
can be considered conjunctively):
Proposition 7 hB; f’1; : : : ; ’ngi ‘D ’ if and only if h’1 ^

V B; : : : ; ’n ^V Bi ^V Bj=c ’.

Finally, note that since circumscription can be encoded
as skeptical inference from supernormal defaults (see e.g.,
[Etherington, 1987]), it can also be encoded in the comma
logic framework.
5.4 Belief revision
The basic revision operator proposed by Nebel [Nebel, 1991;
1998; Fagin et al., 1983] is de(cid:2)ned as follows:
De(cid:2)nition 7 Let B?’ = fM j M (cid:18) B and M 6j=
’ and 8M 0 s.t. M (cid:26) M 0 (cid:18) B; M 0 j= ’g. Basic revision

is then de(cid:2)ned as: B (cid:14)N ’ = ( _M 2B?:’^ M ) ^ ’:

In comma logic, this can be expressed as follows:

f’1; : : : ; ’ng (cid:14)N ’ j= (cid:22) if and only if

Proposition 8
h’1 ^ ’; : : : ; ’n ^ ’i ^ ’j=c (cid:22).
5.5 Belief merging
Suppose that one wants to merge several belief (or goal) bases
while allowing some of those bases to be inconsistent.
If
one wants to take into account inconsistent belief bases in the
merging process, one can (cid:2)rst perform an intra-source merg-
ing in order to extract useful information from those bases,
before making the proper inter-source merging.

Let E = fB1; : : : ; Bng be a set of (possibly inconsis-
for all i 2 1 : : : n, we have Bi =
ki g. Then, we can de(cid:2)ne the merging of those

1; : : : ; ’i

tent) belief bases s.t.
f’i
bases as :

4(E) = hh’1

1; : : : ; ’1

k1 i; : : : ; h’n

1 ; : : : ; ’n

knii

This operator is not de(cid:2)nable as a two aggregation steps
merging operator (as de(cid:2)ned in [Konieczny et al., 2002]).
Conversely, considering an alternative semantics for the
comma connective (see Section 7), we can capture some of
the two aggregation steps merging operators in comma logic.

6 Computational aspects
Let us investigate both translatability issues and complexity
issues for comma logic. First of all, one can prove that the
expressiveness of the comma logic is exactly the same as the
expressiveness of classical logic (every piece of information
which can be encoded in one of the logics can also be encoded
in the other one):
Proposition 9 For any formula ’ of LC
  of LC[0]
P S = LP S that is equivalent to ’.

P S, there is a formula

A simple induction on the depth of the formulae shows how
each formula ’ of LC
P S can be equivalently (for j=c ) rewritten
into a classical formula C(’). Let ’ be a formula of LC
P S
of depth k. A translation of it into a classical formula can
be obtained as follows. First, replace every subformula of ’

P S

by an equivalent formula from LC[0]

that is in LC[s;1]
P S (the
substitution theorem for the (cid:147)comma logic(cid:148) makes it sound);
one gets then a formula of depth n (cid:0) 1, so we can iterate the
process until a formula of depth 0 is obtained. For example,
let ’ = ha; b; h:b_c; :cii; we start by translating h:b_c; :ci
in :b ^ :c: after one iteration, we get the formula ha; b; :b ^
:ci, and a second iteration gives (a ^ b) _ (a ^ :b ^ :c),
that is equivalent to a ^ (b _ :c). The problem with such a
translation is that the size of C(’) is generally exponentially
larger than the size of ’. Can we do better? Actually, the
answer is negative:
Proposition 10 Under the usual assumptions of complexity
theory,2 there is no polysize function that maps any formula
from LC

P S (and even from LC[1]

P S ) to

(cid:15) an equivalent classical formula.
(cid:15) an equivalent formula from LC

P S in which the (cid:147)comma
connective(cid:148) is binary (i.e., whenever it is used, it may
connect at most two formulae).

The (cid:2)rst

item is a direct consequence of

the non-
compilability of circumscription [Cadoli et al., 1997]. The
second is a consequence of the (cid:2)rst one, given that every
P S in which the comma connective is at
formula ’ from LC
most binary can be turned into a classical formula whose size
in bounded by j’j (the proof is easy by structural induction
given Corollary 1).

Let us now turn to the inference issue. From De(cid:2)nition
3, it is easy to show that ’j=c   if and only if ’ ^ :  is
inconsistent. Hence it is suf(cid:2)cient to focus on the satis(cid:2)ability
issue. The satis(cid:2)ability problem in LC
P S is, of course, at least
as hard than for classical logic (so it is NP-hard). Can we say
more than that? Let us begin with LC[1]
P S .
Proposition 11 The satis(cid:2)ability problem in LC[1]
complete.

P S is (cid:6)p
2-

P S

Membership to (cid:6)p

2 comes from the fact that the corre-
sponding model checking problem is in coNP: for any simple
subformula   = h(cid:11)1; : : : ; (cid:11)ni of ’ from LC[s;1]
, deciding
whether M 6j=c   simply consists in guessing an interpreta-
tion M 0 and to check in polynomial time that the set of (cid:11)i
satis(cid:2)ed by M 0 is a proper superset of the set of (cid:11)i satis(cid:2)ed
by M. Actually, the truth values of all such   in M can be es-
tablished in nondeterministic polynomial time (guess in par-
allel several M 0, one for each simple subformula   of depth
1 which is not satis(cid:2)ed by M). Once this has been done, the
truth value of ’ in M can be computed in deterministic poly-
nomial time. Hardness comes from (cid:6)p
2-hardness of credulous
inference from maximal consistent subbases [Nebel, 1998;
Cayrol and Lagasquie-Schiex, 1995].

Now, what about the satisfaction problem when commas
are nested? An iterated use of the proof of the preceding re-
sult (membership part) easily leads to the following:
Proposition 12

(cid:15) The satis(cid:2)ability problem in LC[n]
(cid:15) The satis(cid:2)ability problem in LC

n+1.

P S is in (cid:6)p
P S is in PSPACE.

2Especially, the fact that the polynomial hierarchy does not col-

lapse.

We do not have hardness proofs but we conjecture them.3
Thus, we do not know how to perform comma elimination
(for the nested occurrences) in polynomial time (and we con-
jecture that it is not possible to do it); especially, intro-
ducing new symbols would not necessarily preserve equiva-
lence over the original language; for instance, ha; h:a; bii 6(cid:17)c
ha; newi ^ (new , h:a; bi).

Let us now give a few comments about those complexity
results. First, the fact that satis(cid:2)ability in LC[1]
P S is at the sec-
ond level of the polynomial hierarchy, and not higher are
good news. We know (from Section 5) that the universal
and existential inference problems can be reduced, in poly-
nomial time, to satisfaction or validity problems of formulae
of LC[1]
P S . Given complexity results from [Cayrol et al., 1998;
Nebel, 1998], it follows that the satis(cid:2)ability problem in
LC[1]
P S cannot be lower than the second level of the polyno-
mial hierarchy. The fact that it is not higher shows that the
gain of (cid:3)exibility we get does not result in a complexity shift.

7 Variation on the (cid:147)comma semantics(cid:148)
Among others, another semantics for the comma connective
is obtained by considering as models of h’1; : : : ; ’ni, the in-
terpretations that maximize the number of satis(cid:2)ed formulae
’i. Formally, this amounts to replacing in De(cid:2)nition 3, the
item M j=c h’1; : : : ; ’ni by the following one:

(cid:15) M j=C

c h’1; : : : ; ’ni if and only if there is no inter-
pretation M 0 2 MP S such that jfi j M 0j=c ’igj >
jfi j M j=c ’igj.

Properties reported in Section 4 are typically preserved by
this modi(cid:2)cation, but idempotence: h’1; ’1; ’2; : : : ; ’ni is
(generally) not equivalent to h’1; ’2; : : : ; ’ni. For example,
ha; a; :ai is not equivalent to ha; :ai under the cardinality
maximality semantics.

Contrariwise to the j=c case, we can show that:

Proposition 13 For every (cid:2)xed n, there is a polysize func-
tion that maps any formula of LC[n]
P S into a query-equivalent
formula of LP S when we appeal to the j=C

c semantics.

P S

in ’ by the cardinality formulae [= k ]

The proof is a constructive one and relies on a translation
function C similar to the one given in Section 6: we (cid:2)rst
replace each occurrence of the formulae   = h(cid:11)1; : : : ; (cid:11)ni
of LC[s;1]
:
h(cid:11)1; : : : ; (cid:11)ni, meaning that exactly k  formulae among the n
formulae (cid:11)1; : : : ; (cid:11)n must be satis(cid:2)ed (see e.g. [Benhamou
et al., 1994]); such cardinality formulae can be translated
in polynomial space as classical query-equivalent formulae.
Such a translatability result is helpful in the objective of com-
piling formulae from LC[n]
P S into classical formulae so as to
improve inference.
Proposition 14 The satis(cid:2)ability problem in LC
in (cid:1)p
2.

P S for j=C

c is

3That the comma nesting level goes seemingly pairwise with a
complexity increase is not surprising (a similar phenomenon hap-
[Eiter and Gottlob,
pens when conditionals are nested, see e.g.
1993]).

Membership to (cid:1)p

2 comes from the fact that one can as-
sociate to any simple subformula   = h(cid:11)1; : : : ; (cid:11)ni of ’ 2
P S the maximal number k  of (cid:11)i which can be jointly sat-
LC
is(cid:2)ed. Simple subformulae of ’ are processed by increas-
ing depth: for any   of depth 1, the (cid:11)i are classical formu-
lae, and using binary search, logarithmically many calls to
an NP oracle are suf(cid:2)cient to compute the corresponding k .
For any   of depth 2, again using binary search, logarithmi-
cally many calls to an NP oracle are suf(cid:2)cient to compute
the corresponding k : the key observation is that the model
checking issue for   can be done in polynomial time once the
k 0 for each simple subformula  0 of   have been computed
c  0 if and only if M satis(cid:2)es k 0 elements in  0), and
(M j=C
so on. Since ’ does not contain more than j’j simple sub-
formulae, linearly many calls to an NP oracle are suf(cid:2)cient
to compute all the k ; since model checking is in P once
they have been computed, a last call to an NP oracle is suf-
(cid:2)cient to determine whether ’ is satis(cid:2)able. We conjecture
that the problem is (cid:1)p
2-complete but have only a proof of (cid:2)p
2-
hardness at that time.

One has to note that the complexity gap (between the (cid:2)rst
and the second level of the polynomial hierarchy) highlighted
by [Cayrol et al., 1998] when one goes from the cardinality
criterion to the set-inclusion one, becomes here an amazing
gap (from at most (cid:1)p
2 to PSPACE) (cid:150) under the assumption
of completeness for PSPACE, of course.

8 Conclusion
In this paper, we have given a (cid:147)logic(cid:148) for paraconsistent rea-
soning where comma is considered as a genuine connective.
We have presented some properties of this logic, and we have
shown that it allows to express, in a uni(cid:2)ed language, several
problems of reasoning with inconsistent belief bases, non-
monotonic inference, belief revision and belief merging. We
have also provided some translatability results and some com-
plexity results. Finally, we have given an alternative seman-
tics for the comma connective.

A distinction between a (cid:2)nite set of formulas and the con-
junction of them is also made in many substructural logics,
i.e.
logics weaker than the classical one because of the ab-
sence of some structural rules [Restall, 1999]. The (cid:148)comma
connective(cid:148) in such logics is not necessarily commutative or
idempotent. Unlike in our comma logic, it is binary and can-
not be in the scope of every other connective under consider-
ation in the language.

Another closely related work is [Mengin, 2004], which de-
(cid:2)ned a more general framework than ours: it can be shown
indeed that any formula of our language can be translated in
a formula of his (which is a consequence of the equivalence
given in his Section 3.3 for formulas of depth one together
with our Proposition 2). Therefore, our logical properties
and complexity results carry on to the framework of [Men-
gin, 2004].

Acknowledgements
The authors would like to thank the anonymous reviewers for
their comments. This work has been supported by the Univer-
sit·e d’Artois, the IRCICA Consortium, the R·egion Nord/Pas-
de-Calais and the European Community FEDER program.

References
[Benhamou et al., 1994] B. Benhamou, L. Sa¤(cid:17)s,

and
P. Siegel. Two proof procedures for a cardinality based
language in propositional calculus.
In STACS’94, pages
71(cid:150)82. IRISA, 1994.

[Bloch and Hunter, 2001] I. Bloch and A. Hunter, editors.
Fusion: General Concepts and Characteristics, volume 16
(10) of International Journal of Intelligent Systems. 2001.
[Brewka, 1989] G. Brewka. Preferred subtheories: an ex-
In IJ-

tended logical framework for default reasoning.
CAI’89, pages 1043(cid:150)1048, 1989.

[Cadoli et al., 1997] M. Cadoli, F.M. Donini, M. Schaerf,
and R. Silvestri. On compact representations of propo-
sitional circumscription. Theoretical Computer Science,
182:183(cid:150)202, 1997.

[Cayrol and Lagasquie-Schiex, 1995] C. Cayrol and M.C.
Lagasquie-Schiex. Non-monotonic syntax-based entail-
ment: a classi(cid:2)cation of consequence relations.
In EC-
SQARU’95, pages 107(cid:150)114, 1995.

[Cayrol et al., 1998] C. Cayrol, M. Lagasquie-Schiex, and
Th. Schiex. Nonmonotonic reasoning: from complexity
to algorithms. Annals of Mathematics and Arti(cid:2)cial Intel-
ligence, 22(3-4):207(cid:150)236, 1998.

[Eiter and Gottlob, 1993] Th. Eiter and G. Gottlob. The com-
plexity of nested counterfactuals and iterated knowledge
base revisions. In IJCAI’93, pages 526(cid:150)531, 1993.

[Etherington, 1987] D.V. Etherington. Relating default logic
and circumscription. In IJCAI’87, pages 489(cid:150)494, 1987.
[Fagin et al., 1983] R. Fagin, J. D. Ullman, and M. Y. Vardi.
On the semantics of updates in databases. In PODS’83,
pages 352(cid:150)365, 1983.

[Ja·skowski, 1969] S. Ja·skowski. Propositional calculus for
contradictory deductive systems. Studia Logica, 24:143(cid:150)
167, 1969.

[Konieczny et al., 2002] S. Konieczny, J. Lang, and P. Mar-
quis. Distance-based merging: a general framework and
some complexity results. In KR’02, pages 97(cid:150)108, 2002.
[Mengin, 2004] J. Mengin. Logical connectives for non-
In

monotonicity: A choice function-based approach.
JELIA’2004, pages 452(cid:150)461, 2004.

[Nebel, 1991] B. Nebel. Belief revision and default reason-
ing: Syntax-based approaches. In KR’91, pages 417(cid:150)428,
1991.

[Nebel, 1998] B. Nebel. Handbook of Defeasible Reasoning
and Uncertainty Management Systems, chapter How hard
is it to revise a knowledge base? Kluwer Academics, 1998.
[Poole, 1988] D. Poole. A logical framework for default rea-

soning. Arti(cid:2)cial Intelligence, 36:27(cid:150)47, 1988.

[Rescher and Manor, 1970] N. Rescher and R. Manor. On in-
ference from inconsistent premises. Theory and Decision,
1:179(cid:150)219, 1970.

[Restall, 1999] Greg Restall. An Introduction to Substruc-

tural Logics. Routledge, 1999.

