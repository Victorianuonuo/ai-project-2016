A Faithful Integration of Description Logics with Logic Programming

∗

Boris Motik

Riccardo Rosati

Department of Computer Science

University of Manchester, UK

Dipartimento di Informatica e Sistemistica
Universit`a di Roma “La Sapienza”, Italy

Abstract

Integrating description logics (DL) and logic pro-
gramming (LP) would produce a very powerful and
useful formalism. However, DLs and LP are based
on quite different principles, so achieving a seam-
less integration is not trivial. In this paper, we intro-
duce hybrid MKNF knowledge bases that faithfully
integrate DLs with LP using the logic of Minimal
Knowledge and Negation as Failure (MKNF) [Lif-
schitz, 1991]. We also give reasoning algorithms
and tight data complexity bounds for several inter-
esting fragments of our logic.

1 Introduction
Integrating description logics (DLs) and logic programming
(LP) in a common framework would produce a very powerful
formalism; for example, LP rules could be used to model con-
straints and exceptions over DL knowledge bases. Adding a
rule layer on top of the DL-based Web Ontology Language
(OWL) is currently the central task in the development of
the Semantic Web language stack, and the Rule Interchange
Format (RIF) working group of the World Wide Web Con-
sortium (W3C) is currently working on standardizing such
a language. However, DLs and LP are based on fundamen-
tally different assumptions: DLs are fragments of ﬁrst-order
logic and employ open-world semantics, whereas LP pro-
vides negation-as-failure under closed-world semantics.

Several approaches to integrating DLs and LP were pro-
posed recently. [Rosati, 2006] proposes an approach that in-
terprets the predicates from the DL knowledge base under
open-world and the predicates occurring only in the LP rules
under closed-world semantics. [Eiter et al., 2004] propose a
loose coupling of DLs and LP by extending the LP rules with
special atoms interpreted as queries to a DL knowledge base.
In this paper, we introduce hybrid MKNF knowledge bases,
which integrate an arbitrary description logic DL1 with dis-
junctive logic programs and negation-as-failure. This inte-
gration is faithful in the sense that it provides exactly the

∗

This work was partially funded by the EPSRC project REOL

(EP/C537211/1) and the EU project TONES (FET FP6-7603).

1Our approach is actually applicable to any ﬁrst-order fragment;
however, our work is motivated primarily by knowledge representa-
tion, so we call this fragment a description logic.

same consequences as DL and LP, respectively, if the other
component is empty. Unlike the existing approaches, our ap-
proach allows the user to freely switch between open- and
closed-world views on arbitrary predicates from DL and LP.
By means of an example, we argue that our logic produces
intuitive and practically useful consequences.

We base our approach on the logic of Minimal Knowledge
and Negation as Failure (MKNF), developed by [Lifschitz,
1991] to unify several major approaches to nonmonotonic
reasoning. To obtain intuitive consequences for our hybrid
logic, we modify certain technical aspects of MKNF regard-
ing the universe of discourse and equality.

Function-free logic programs are usually decidable if the
rules are safe, and many decidable DLs exist. However, we
show that these restrictions on DL and LP are not sufﬁcient
to obtain a decidable hybrid formalism, due to an interaction
between DL and negation-as-failure. To obtain decidability,
we apply the well-known notion of DL-safety [Motik et al.,
2005], which makes the rules applicable only to individuals
known by name. We present several reasoning algorithms
for the cases of general, positive (i.e., without negation-as-
failure), nondisjunctive and positive, nondisjunctive and strat-
iﬁed, and nondisjunctive (but not necessarily stratiﬁed) DL-
safe rules. Finally, we present tight data complexity bounds
for each case and show that combining DLs with LP often
does not increase the data complexity of LP.

Our approach is related to several nonmonotonic exten-
[Donini et al., 2002] propose an MKNF-
sions of DLs.
based extension of the DL ALC, but without LP rules and
with unique name assumption (UNA). [Baader and Hollun-
der, 1995] propose an extension of DLs with DL-safe default
rules, which are subsumed by our approach due to our treat-
ment of equality and the well-known embedding of default
logic into MKNF [Lifschitz, 1991]. Finally, [Bonatti et al.,
2006] present an extension of DLs with circumscription that
allows for nonmonotonic reasoning on unnamed individuals,
but only for unary predicates if decidability is desired.

We leave the detailed proofs to [Motik and Rosati, 2006]

and present here only proof sketches.

2 Preliminaries
Description Logics. Our approach is applicable to any
ﬁrst-order fragment DL satisfying these conditions: (i) each
knowledge base O ∈ DL can be translated into a formula

IJCAI-07

477

π(O) of function-free ﬁrst-order logic with equality, (ii) it
supports ABoxes—assertions of the form P (a1, . . . , an) for
P a predicate and ai constants of DL, and (iii) satisﬁability
checking and instance checking (i.e., checking entailments of
the form O |= P (a1, . . . , an)) are decidable. We assume fa-
miliarity with the standard DL notation [Baader et al., 2003].

MKNF. The ﬁrst-order version of MKNF [Lifschitz, 1991]
can be understood as a variant of the ﬁrst-order modal logic
S5 with a preference relation on models that implements the
nonmonotonic semantics. The syntax of MKNF is obtained
by extending ﬁrst-order logic with modal operators K and
not. A formula P (t1, . . . , tn), where ti are terms, is a ﬁrst-
order atom. For ϕ an MKNF formula, K ϕ and not ϕ are
modal K- and not-atoms, respectively; ϕ is ground if it does
not contain variables; ϕ is positive if it does not contain not;
and ϕ[t/x] is the formula obtained from ϕ by replacing all
free occurrences of the variable x with the term t.

We assume that, apart from the constants used in MKNF
formulae, we have a countably inﬁnite supply of constants
not used in the formulae; with (cid:4) we denote the Herbrand
universe of such a signature. Also, we assume that the signa-
ture contains a special equality predicate ≈ that is interpreted
as a congruence relation on (cid:4). An MKNF structure is a triple
(I, M, N ), where I is a Herbrand ﬁrst-order interpretation
over (cid:4), and M and N are nonempty sets of Herbrand ﬁrst-
order interpretations over (cid:4). Satisﬁability of closed MKNF
formulae in an MKNF structure (I, M, N ) is deﬁned as fol-
lows, for A a ﬁrst-order atom:
(I, M, N ) |= A
(I, M, N ) |= ¬ϕ
(I, M, N ) |= ϕ1 ∧ ϕ2 iff (I, M, N ) |= ϕ1 and (I, M, N ) |= ϕ2
(I, M, N ) |= ∃x : ϕ iff (I, M, N ) |= ϕ[α/x] for some α ∈ (cid:6)
(I, M, N ) |= K ϕ
(I, M, N ) |= not ϕ

iff (J, M, N ) |= ϕ for all J ∈ M
iff (J, M, N ) (cid:2)|= ϕ for some J ∈ N

iff A is true in I
iff (I, M, N ) (cid:2)|= ϕ

The symbols true, false, ∨, ∀, and ⊂ (material implication)
are interpreted as usual. An MKNF interpretation M is a
nonempty set of ﬁrst-order interpretations over (cid:4). Let ϕ and
ψ be closed MKNF formulae. An MKNF interpretation M
is an S5 model of ϕ, written M |= ϕ, if (I, M, M ) |= ϕ for
each I ∈ M ; M is an MKNF model of ϕ if (i) M is an S5-
model of ϕ and (ii) (I (cid:2), M (cid:2), M ) (cid:9)|= ϕ for each M (cid:2) ⊃ M and
some I (cid:2) ∈ M (cid:2) (so-called preference semantics of MKNF);
ﬁnally, ϕ entails ψ, written ϕ |=MKNF ψ, if (I, M, M ) |= ψ
for each MKNF model M of ϕ and I ∈ M .

3 Hybrid MKNF Knowledge Bases
Deﬁnition 3.1. Let O be a DL knowledge base. A ﬁrst-order
function-free atom P (t1, . . . , tn) such that P is ≈ or it occurs
in O is called a DL-atom; all other atoms are called non-DL-
atoms. An MKNF rule r has the following form, where Hi,
B

i are ﬁrst-order function-free atoms:

+
i , and B−

(1)

K H1 ∨ . . . ∨ K Hn ←

K B+

1 , . . . , K B+

m, not B−

1 , . . . , not B−

k

The sets {K Hi}, {K B
i } are called the rule
head, the positive body, and the negative body, respectively.

+
i }, and {not B−

A rule r is nondisjunctive if n = 1; r is positive if k = 0; r
is a fact if m = k = 0; r is safe if all variables in r occur in
a positive body atom. A program P is a ﬁnite set of MKNF
rules. A hybrid MKNF knowledge base K is a pair (O, P).

We deﬁne the semantics of K by translating it into a ﬁrst-

order MKNF formula as follows:
Deﬁnition 3.2. Let K = (O, P) be a hybrid MKNF knowl-
edge base. We extend π to r, P, and K as follows, where x is
the vector of the free variables of r:

π(r) = ∀x : (K H1 ∨ . . . ∨ K Hn ⊂

V

π(P) =

K B+

1 ∧ . . . ∧ K B+
π(r)

r∈P

m ∧ not B−

1 ∧ . . . ∧ not B−
k )

π(K) = K π(O) ∧ π(P)

K is satisﬁable if and only if an MKNF model of π(K) ex-
ists, and K entails a closed MKNF formula ψ, written K |= ψ,
if and only if π(K) |=MKNF ψ.

MKNF as deﬁned by [Lifschitz, 1991] considers arbitrary
models, whereas we consider only Herbrand models (see Sec-
tion 2). We introduce this restriction to obtain an intuitive
logic that is compatible with both DLs and LP. Namely, un-
der the semantics by Lifschitz, K A(a) (cid:9)|=MKNF ∃x : K A(x),
since K A(a) does not ﬁx the interpretation of a in (cid:4). To
remedy that, we interpret all constants by themselves, which
is standard in data management applications [Donini et al.,
2002; Reiter, 1992]. In order to ensure that our model is large
enough, we assume a countably inﬁnite supply of constants.
Hence, we consider only inﬁnite models of O in which dif-
ferent constants are interpreted as different objects.

An equality-free ﬁrst-order formula is satisﬁable in an ar-
bitrary model iff it is satisﬁable in a Herbrand model with
an inﬁnite supply of constants not occurring in the formula
[Fitting, 1996, Theorem 5.9.4]. Hence, without equality we
cannot distinguish arbitrary from Herbrand models. For com-
patibility with DLs, we need ≈, which we clearly cannot in-
terpret as identity, so we interpret it as a congruence. Now
a ﬁrst-order formula with equality is satisﬁable in a model
with “true equality” iff it is satisﬁable in a model where ≈
is an ordinary predicate interpreted as a congruence [Fitting,
1996, Theorem 9.3.9]. Hence, our approach is fully compat-
ible with DLs: if P = ∅, then K |= ϕ iff O |= ϕ for any
ﬁrst-order formula ϕ. Similarly, our logic is fully compatible
with LP: for a ground atom α, if O = ∅, then K |= K α iff P
entails α under stable model semantics [Lifschitz, 1991].

We believe that our treatment of equality matches the com-
mon intuition behind negation-as-failure. In the version of
MKNF by [Lifschitz, 1991], ϕ = K A(a) ∧ ¬ not A(b) has
a model with a singleton universe in which a and b are the
same, so ϕ entails a ≈ b. We consider this quite unintuitive:
we did not say that a and b are the same, so we expect them
to be different. Because of these problems, the semantics of
LP is commonly based on Herbrand models. We follow this
practice, so in our approach ϕ is MKNF unsatisﬁable, and it
can be made satisﬁable by explicitly stating a ≈ b.

In [Motik and Rosati, 2006] we allow the rules to con-
tain both modal and nonmodal atoms, in order to general-
ize known extensions of DLs with rules such as SWRL or
DL+log [Rosati, 2006]. However, we also show that gen-
eral rules can be converted into rules with only modal atoms.

IJCAI-07

478

Furthermore, mixing modal and nonmodal atoms produces an
unintuitive semantics, so it is good practice to use either fully
nonmodal or fully modal rules.

DL-Safety. Making the rules safe usually sufﬁces to make
function-free LP decidable; however, we show next that this
does not hold for MKNF rules. Note that MKNF rules contain
modal atoms, so existing undecidability results for ﬁrst-order
combinations of DLs with rules are not directly applicable.
Theorem 3.3. For K a safe hybrid MKNF knowledge base
and A a ground atom, checking whether K |= A is undecid-
able if DL allows us to express an axiom (cid:14) (cid:15) C.

Namely, (cid:14) (cid:15) C makes C equivalent to the inﬁnite set (cid:4),
so all elements from (cid:4) can be accessed in the rules even if the
rules are safe. In other words, safety is now not a sufﬁcient
condition for domain independence. To ensure decidability,
we apply the well-known DL-safety restriction, which makes
the rules applicable only to individuals known by name in the
ABox; for an in-depth discussion, see [Motik et al., 2005].
Deﬁnition 3.4. An MKNF rule r is DL-safe if every variable
in r occurs in at least one non-DL-atom K B in the body of r.
A hybrid MKNF knowledge base K is DL-safe if all its rules
are DL-safe.

Note that DL-atoms are interpreted in the same way as non-
DL-atoms; DL-safety merely provides a syntactic restriction
ensuring decidability. For a hybrid MKNF knowledge base
K = (O, P), let PG be obtained from P by replacing in each
rule all variables with all constants from K in all possible
ways; the knowledge base KG = (O, PG) is called a ground
instantiation of K.
Lemma 3.5. For K a DL-safe hybrid MKNF knowledge base,
KG the ground instantiation of K, and ψ a ground MKNF
formula. Then, K |= ψ iff KG |= ψ.

4 Example
Consider determining the car insurance premium based on
various information about the driver. By convention, DL-
predicates start with an uppercase and non-DL-predicates
with a lowercase letter. Let K be the following hybrid MKNF
knowledge base (the predicate p means “person”):
(2)

NotMarried ≡ ¬Married
NotMarried (cid:15) HighRisk
∃Spouse.(cid:14) (cid:15) Married
K NotMarried (x) ← K p(x), not Married (x)
K Discount(x) ← K Spouse(x, y), K p(x), K p(y)

(3)

(4)

(5)

(6)

Let us now assert p(John). Under ﬁrst-order seman-
tics, some models contain Married (John) and others con-
tain NotMarried (John). However, (5) applies the closed-
world assumption to Married : by default, people are as-
sumed not to be married. Since Married (John) does not
hold in all models of O, the rule (5) “ﬁres” and it derives
NotMarried (John); with (3), this implies HighRisk (John).
The preference semantics of MKNF is strongly related
to the notion of the Gelfond-Lifschitz reduct used to de-
ﬁne stable models. Let M1 and M2 be MKNF interpre-
tations consisting of ﬁrst-order interpretations I such that

I |= Married (John) and I |= NotMarried (John), respec-
tively, and let M3 = M1 ∪ M2. Clearly, we have M1 ⊂ M3,
M1 |= K Married (John) and M3 (cid:9)|= K Married (John); in-
tuitively, M1 contains “more knowledge” than M3. The pref-
erence semantics of MKNF gives the following semantics
to not: an MKNF model M of an MKNF formula ϕ is
the minimal knowledge justiﬁed by the values of not-atoms.
In our example, assuming that not Married (John) is true
implies other consequences, such as K NotMarried (John);
now each such consequence is justiﬁed in the sense that it be-
longs to the minimal knowledge entailed by the knowledge
base K in which each not-atom is replaced with its value.

To understand how open- and closed-world reasoning in-
teract in our formalism, let us assert ∃Spouse.(cid:14)(Bill ) and
p(Bill ). Now Bill can be married to different people in dif-
ferent models; however, (4) ensures that Married (Bill ) holds
in all models. The precondition of (5) is thus not satisﬁed, so
we derive neither NotMarried (Bill ) nor HighRisk (Bill ). In
a way, reasoning in O is performed under open-world seman-
tics, but the modal operators allow us to put on “closed-world
glasses” and consider the consequences in all models.

Finally,

let us assert Spouse(Bob, Ann), p(Bob), and
p(Ann). By (6) we can now derive Discount(Bob); in con-
trast, we cannot derive Discount(Bill ). Namely, the rule (6)
differs from the ﬁrst-order implication (4) in that it requires
Spouse(x, y) to be known—that is, it must hold in all ﬁrst-
order models. The spouse of Bill is different in different
models, so O (cid:9)|= Spouse(Bill , y) for any value of y, and the
rule (6) would not “ﬁre” even if it were not DL-safe.

This example cannot be expressed in existing combinations
of DLs and LP: the rules of [Eiter et al., 2004] cannot de-
rive new DL facts, and, in the approach by [Rosati, 2006],
the DL predicates are interpreted under open-world seman-
tics and thus cannot occur under not.

5 Reasoning Algorithms
Given a nonground hybrid MKNF knowledge base K, all our
algorithms ﬁrst compute the ground knowledge base KG to
obtain an MKNF theory without modal operators under quan-
tiﬁers. For a program with variables, this step is exponen-
tial. However, even for nondisjunctive datalog the combined
complexity is higher than data complexity by an exponen-
tial factor [Dantsin et al., 2001], so this is to be expected of
our logic as well. Therefore, for an MKNF knowledge base
K = (O, P), we just consider the data complexity, which is
measured in the size of the facts in P and the size of the ABox
of O. We denote the data complexity of reasoning in DL with
C, and set E = NP if E ⊆ NP and E = C otherwise.

For simplicity, we write K, O, and P instead of π(K),
π(O), and π(P). The MKNF models of KG are clearly inﬁ-
nite, so we must devise a convenient ﬁnite representation for
them. We adopt an approach already used by [Rosati, 1999]:
we represent an MKNF model M using a ﬁrst-order formula
ϕ such that M = {I | I |= ϕ}. We formalize this as follows:
Deﬁnition 5.1. Let K = (O, P) be a hybrid MKNF knowl-
edge base. The set of K-atoms of K, written KA(K), is the
smallest set that contains (i) all K-atoms of PG, and (ii) a
modal atom K ξ for each modal atom not ξ occurring in PG.

IJCAI-07

479

(cid:2)
For a subset P of KA(K), the objective knowledge of P
K ξ∈P ξ. A partition (P, N ) of

is the formula obK,P = O ∪
KA(K) is consistent if obK,P (cid:9)|= ξ for each K ξ ∈ N .

Let ϕ be an MKNF formula and (P, N ) a partition of
KA(K). The formula ϕ[K, P, N ] is obtained from ϕ by re-
placing each K ξ with true if K ξ ∈ P and with false oth-
erwise; ϕ[not, P, N ] is obtained from ϕ by replacing each
not ξ with true if K ξ ∈ N and with false otherwise; ﬁnally,
ϕ[P, N ] = ϕ[K, P, N ][not, P, N ].

For a set of modal atoms S, SDL is the subset of DL-atoms

(cid:3)S = {ξ | K ξ ∈ S}, and

(cid:3)SDL = (cid:3)S(cid:2) for S(cid:2) = SDL.

of S,

An MKNF model is strongly related to a particular parti-

tion of KA(K):
Deﬁnition 5.2. An MKNF interpretation M induces the par-
tition (P, N ) of KA(K) if K ξ ∈ P implies M |= K ξ and
K ξ ∈ N implies M (cid:9)|= K ξ.

The following key lemma shows that each MKNF model

M of KG can be represented as a partition of KA(K):
Lemma 5.3. Let M be an MKNF model of KG and (P, N )
a partition of KA(K) induced by M . Then, M is equal to the
set of interpretations M (cid:2) = {I | I |= obK,P }.

Hence, to ﬁnd an MKNF model of KG, we need to ﬁnd a
partition (P, N ) of KA(K). We can do it in different ways for
different types of rules.

The General Case. As for disjunctive datalog, in the gen-
eral case we must guess a partition (P, N ) of KA(K). This is
captured by Algorithm 1.
Theorem 5.4. Let K be a DL-safe hybrid MKNF knowl-
edge base and ψ = (¬) K A for A a ground atom. Then,
not-entails-DL(K, ψ) returns true iff K (cid:9)|= ψ, and it runs with
data complexity E E

.

Proof sketch. (⇒) If not-entails-DL(K, ψ) returns true, a
partition (P, N ) of KA(K) satisfying all conditions of Al-
gorithm 1 exists. We show that M = {I | I |= obK,P } is
an MKNF model of KG. By Condition (3), (P, N ) is con-
sistent on all DL-atoms and, by Condition (4), it is con-
sistent on all non-DL-atoms (for a non-DL-predicate Q,

obK,P |= Q(a1, . . . , an) can hold only if Q(b1, . . . , bn) ∈ (cid:3)P
and obK,P |= ai ≈ bi for all i). By Condition (2), M (cid:9)= ∅.
By Condition (1), (I, M, M ) |= PG[P, N ] for each I ∈ M ;
furthermore, the values of all K-atoms in M are determined
by (P, N ), so (I, M, M ) |= PG. Clearly, (I, M, M ) |= O,
so (I, M, M ) |= KG. Assume now that M is not an MKNF
model—that is, an MKNF interpretation M (cid:2) exists such that
M (cid:2) ⊃ M and (I (cid:2), M (cid:2), M ) |= KG for each I (cid:2) ∈ M (cid:2). Then,
M (cid:2) induces the partition (P (cid:2)(cid:2), N (cid:2)(cid:2)) of KA(K). Because
M (cid:2) |= K ξ implies M |= K ξ, we have P (cid:2)(cid:2) ⊂ P , so we can
represent (P (cid:2)(cid:2), N (cid:2)(cid:2)) as (P (cid:2), N ∪ N (cid:2)) for (P (cid:2), N (cid:2)) a partition
of P with N (cid:2) (cid:9)= ∅. By Lemma 5.3, M (cid:2) = {I | I |= obK,P (cid:2) }.
Because M (cid:2) (cid:9)= ∅, obK,P (cid:2) is satisﬁable, so Condition (b) is in-
validated; (I (cid:2), M (cid:2), M ) |= γ[P (cid:2), N ∪ N (cid:2)] for each I (cid:2) ∈ M (cid:2),
which invalidates Condition (a); ﬁnally, (P (cid:2), N ∪ N (cid:2)) is
clearly consistent, which invalidates Conditions (c) and (d).
Hence, Condition (5) could not hold for (P (cid:2), N ∪ N (cid:2)), which

Algorithm 1 Entailment in General hybrid MKNF KBs
Algorithm: not-entails-DL(K, ψ)
Input:

K = (O, P): a DL-safe hybrid MKNF knowledge base
ψ : a ground formula (¬) K A

Output:

true if K (cid:2)|= ψ; false otherwise

let KG be the ground instantiation of K
if a partition (P, N ) of KA(KG) ∪ {K A} exists such that
1. PG[P, N ] evaluates to true, and
2. O ∪ bPDL is satisﬁable, and
3. O ∪ bPDL (cid:2)|= ξ for each K ξ ∈ NDL, and
4. for each Q(a1, . . . , an) ∈ bN and Q(b1, . . . , bn) ∈ bP , we

have O ∪ bPDL (cid:2)|= ai ≈ bi for some 1 ≤ i ≤ n

5. for γ = PG[not, P, N ] and each partition (P (cid:4), N (cid:4)) of P

such that N (cid:4) (cid:2)= ∅
(a) γ[P (cid:4), N ∪ N (cid:4)] evaluates to false, or
(b) O ∪ bP (cid:4)
(c) O ∪ bP (cid:4)
(d) for some Q(a1, . . . , an) ∈ bN (cid:4)

DL is unsatisﬁable, or
DL |= ξ for some K ξ ∈ N (cid:4)

we have O ∪ bP (cid:4)

DL, or

and Q(b1, . . . , bn) ∈ bP (cid:4)

,

DL |= ai ≈ bi for all 1 ≤ i ≤ n

6. one of the following conditions holds:

(i) ψ = K A and K A (cid:2)∈ P , or
(ii) ψ = ¬ K A and K A ∈ P

then return true; otherwise return false

is a contradiction; hence, M is an MKNF model of KG. Fi-
nally, Condition (6) ensures M (cid:9)|= ψ, so KG (cid:9)|= ψ. The (⇐)
direction is analogous.

KG can be computed in polynomial time if the size of the
nonground rules in P is bounded. A partition (P, N ) can be
guessed and Condition (1) can be checked in time polyno-
mial in the size of KG. Checking Conditions (2)–(4) and (6)
requires a polynomial number of calls to an oracle running in
C, so all these steps can be performed in E. Disproving Con-
dition (5) requires guessing a partition (P (cid:2), N (cid:2)) and a poly-
nomial number of calls to an oracle running in C, so it can
be performed in E. Hence, validating Condition (5) can be
performed in coE, and the algorithm runs in E E

.

Positive Programs. For K a positive hybrid MKNF knowl-
edge base, K |= K A iff M |= K A for each S5-model M of
K: for each such M , since K is positive, an MKNF model M (cid:2)
of K exists such that M (cid:2) ⊆ M . (This is analogous to the case
of positive disjunctive datalog.) In other words, for positive
queries, we do not need to ensure the preference semantics of
MKNF. Let not-entails-DL+(K, K A) be an algorithm that
is the same as Algorithm 1, only without Condition (5). By
adapting the proof of Theorem 5.4, we get the following:

Theorem 5.5. Let K = (O, P) be a positive DL-safe hy-
brid MKNF knowledge base and A a ground atom. Then,
not-entails-DL+(K, K A) returns true iff K (cid:9)|= K A, and it
runs with data complexity E.

IJCAI-07

480

If K is nondisjunctive
Positive Nondisjunctive Programs.
and positive, we can construct (P, N ) deterministically in a
bottom-up fashion. We can easily show that M1 |= K and
M2 |= K implies M1 ∪ M2 |= K for all MKNF interpreta-
tions M1 and M2, which immediately implies the following:

Theorem 5.6. Each positive DL-safe nondisjunctive hybrid
MKNF knowledge base K has at most one MKNF model.
Deﬁnition 5.7. For K a positive nondisjunctive DL-safe hy-
brid MKNF knowledge base, RK, DK, and TK are the oper-
ators deﬁned on the subsets of KA(K) as follows:

RK(S) = S ∪ {K H | KG contains a rule of the form (1)
such that K Bi ∈ S for each 1 ≤ i ≤ n}
DK(S) = {K ξ | K ξ ∈ KA(K) and O ∪ bSDL |= ξ} ∪
and O ∪ bSDL |= si ≈ bi for 1 ≤ i ≤ n}

{K Q(b1, . . . , bn) | K Q(a1, . . . , an) ∈ S \ SDL

TK(S) = RK(S) ∪ DK(S)

K

K . It is now easy to show the following:

The operator TK is monotonic on the lattice of subsets of
implies TK(S) ⊆ TK(S(cid:2))). Namely, RK
KA(K) (i.e., S ⊆ S(cid:2)
is monotonic similarly as this is the case for datalog, and DK
is monotonic because ﬁrst-order logic is monotonic. Hence,
by Knaster-Tarski’s theorem, TK has the least ﬁxpoint, which
we denote with T ω
Theorem 5.8. Let K be a positive nondisjunctive DL-safe
hybrid MKNF knowledge base and M = {I | I |= obK,T ω
}.
Then, (i) if M (cid:9)= ∅, then M is the single MKNF model of K;
(ii) if K has an MKNF model, this model is equal to M ; and
(iii) the data complexity of computing T ω
.
Proof sketch. (i) Clearly, M |= K O and, since T ω
K is a ﬁx-
point of TK, M |= PG. If M were not an MKNF model, an
MKNF interpretation M (cid:2) ⊃ M such that (I (cid:2), M (cid:2), M ) |= KG
for each I (cid:2) ∈ M (cid:2) would exist and it would induce a partition
(P (cid:2), N (cid:2)) of KA(K) such that P (cid:2) ⊂ P . Clearly, TK(P (cid:2)) = P (cid:2)
(otherwise, either M (cid:2) (cid:9)|= r for some r ∈ PG, or (P (cid:2), N (cid:2)) is
not consistent), but then T ω
K is not the minimal ﬁxpoint of TK.
The proof for (ii) is analogous. (iii) As for ordinary datalog,
RK(S) can be computed in polynomial time. The number
of atoms in KA(K) is linear in the size of PG, so computing
DK(S) requires a polynomial number of calls to an oracle
running in C. Finally, the number of iterations is bounded by
the size of KA(K), which implies the claim.

K is in PC

For entailment checking, K |= K A iff obK,T ω

|= A, and

K

K |= ¬ K A iff obK,T ω

(cid:9)|= A.

K

Stratiﬁed Programs. We ﬁrst deﬁne a notion of stratiﬁca-
tion appropriate to MKNF programs.
Deﬁnition 5.9. Let K = (O, P) be a nondisjunctive hybrid
+
MKNF knowledge base and λ : PG → N
a function assign-
ing to each r ∈ PG a positive integer λ(r). For an integer
k and (cid:9)(cid:10) ∈ {<, ≤, >, ≥}, let head(K)(cid:4)(cid:5)k
be the set of head
atoms of those rules r ∈ PG for which λ(r) (cid:9)(cid:10) k. Then, λ is
a stratiﬁcation of K if these conditions hold for each r ∈ PG:
• For each body atom K ξ of r, each P ⊆ head(K)≤λ(r)
, ei-

such that obK,P (cid:9)|= ξ, and each P (cid:2) ⊆ head(K)>λ(r)
ther obK,P ∪P (cid:2) (cid:9)|= ξ or obK,P ∪P (cid:2) is unsatisﬁable;

• For each body atom not ξ of r, each P ⊆ head(K)<λ(r)
, ei-

such that obK,P (cid:9)|= ξ, and each P (cid:2) ⊆ head(K)≥λ(r)
ther obK,P ∪P (cid:2) (cid:9)|= ξ or obK,P ∪P (cid:2) is unsatisﬁable.

K is stratiﬁed if a stratiﬁcation λ of K exists. A stratiﬁ-
cation λ partitions P into strata σi = {r | λ(r) = i}; the se-
quence of strata σ1, . . . , σn is often identiﬁed with λ and is
also called a stratiﬁcation.

Stratiﬁcation ensures that deriving an atom K ξ in a stra-
tum σi does not change the values of the K- and not-
atoms from strata < i and ≤ i, respectively. For exam-
ple, consider a knowledge base K where DL is propositional
logic, O = (r ≡ p ∨ q) ∧ (s ≡ ¬q), and P contains the rules
K r ← not p and K s ← K r. In ordinary datalog, P would
be stratiﬁed: by evaluating the ﬁrst rule we derive K r, af-
ter which we evaluate the second rule and derive K s. But
now the objective knowledge is r ∧ s ∧ O and it implies ¬q,
which invalidates the atom K p in the body of the ﬁrst rule.
Intuitively, Deﬁnition 5.9 ensures that such an interaction be-
tween O and the derived facts does not happen. Clearly,
checking stratiﬁcation is difﬁcult in general. However, if O
employs UNA and no rule in P contains a DL-atom in the
head, then stratiﬁcation of P can be checked as usual. This
case is interesting because it allows to deﬁne complex con-
straints over DL knowledge bases. We now show how to
compute models of a stratiﬁed program:
Deﬁnition 5.10. Let σ1, . . . , σk be a stratiﬁcation of a DL-
safe MKNF knowledge base K. The sequence of subsets
U0, . . . , Uk of KA(σ) is inductively deﬁned as U0 = ∅ and,
for 0 < i ≤ k, Ui = T ω
i is ob-
tained from σi by replacing each not ξ with true if Ui−1 (cid:9)|= ξ
and with false otherwise. Finally, let U ω

χi where χi = Ui−1 ∪ σ(cid:2)

i and σ(cid:2)

K = Uk.

The following theorem is analogous to the case of ordinary

stratiﬁed datalog:
Theorem 5.11. Let K be a stratiﬁed DL-safe MKNF knowl-
edge base K, and M = {I | I |= obK,U ω
}. Regardless of the
stratiﬁcation used to compute U ω
K, the following claims hold:
(i) if M (cid:9)= ∅, then M is an MKNF model of K; (ii) if K has
an MKNF model, then this model is equal to M ; and (iii) the
data complexity of computing U ω

K is in PC

.

K

Nondisjunctive Nonstratiﬁed Programs. We now take K
to be a nondisjunctive and nonstratiﬁed knowledge base.
Then, the knowledge base γ = PG[not, P, N ] from Algo-
rithm 1 is nondisjunctive and positive, so we can use The-
orem 5.8 to ensure the preference semantics of MKNF. We
deﬁne nondisjunctive-not-entails-DL(σ, ψ) to be the same as
Algorithm 1, but replace Condition (5) with T ω
Theorem 5.12. For a nondisjunctive nonstratiﬁed hybrid
MKNF knowledge base K and ψ = (¬) K A with A a ground
atom, the algorithm nondisjunctive-not-entails-DL(K, ψ) re-
turns true iff K (cid:9)|= ψ, and it runs with data complexity E P C
.

γ = P .

6 Data Complexity
We now determine the data complexity—the complexity
measured in the sizes of the ABox of O and the facts of P—
of checking entailment for a hybrid MKNF knowledge base

IJCAI-07

481

Table 1: Data Complexity of Entailment Checking

∨
no
no
no
yes
yes

not

no

strat.
yes
no
yes

1
2
3
4
5

DL = ∅

DL ∈ P DL ∈ coNP

P
P

P
P

coNP

coNP

coNP/Πp

2

Πp

2

coNP/Πp

2

Πp

2

coNP

Δp
2
Πp

2

coNP/Πp

2

Πp

2

K. To obtain a precise characterization, we must make as-
sumptions about the data complexity of checking entailment
of ground literals in DL.
In [Hustadt et al., 2005], it was
shown that checking entailment of ground atoms in many
very expressive DLs, such as SHIQ, is data complete for
coNP. Furthermore, there are expressive fragments, such as
Horn-SHIQ [Hustadt et al., 2005] or DL-lite [Calvanese et
al., 2006], for which data complexity of entailment is in P.
Therefore, we analyze the complexity of MKNF knowledge
bases for these two cases, and contrast them with the well-
known results for logic programs without a DL knowledge
base. Table 1 summarizes the results for complexity of check-
ing K |= ψ, for ψ = (¬) K A with A a ground atom. All
results are completeness results.

Existing results for the corresponding variants of datalog
[Dantsin et al., 2001] provide hardness results for all cases but
for rows 2 and 3 with DL ∈ coNP. For these cases, we give
hardness proofs in [Motik and Rosati, 2006]. In the ﬁrst case,
we present a reduction from DAGS(SAT) [Gottlob, 1995],
and in the second one from 2-QBF.

The membership results are given by the algorithms from
Section 5. Note that, for rows 1 and 2 and ψ = ¬ K A, since
K has at most one model, K |= ¬ K A iff either K is unsat-
isﬁable of K (cid:9)|= K A, so answering negative queries can be
reduced to answering positive ones. Furthermore, in row 4
the complexity differs depending on whether we ask a posi-
tive or a negative query: in the ﬁrst case, we can use Theorem
5.5, whereas in the second case we must use Theorem 5.4.

7 Conclusion

Based on the logic MKNF by [Lifschitz, 1991], we have de-
veloped the formalism of hybrid MKNF knowledge bases that
provides for a faithful integration of an arbitrary description
logic with logic programming. Our approach seamlessly in-
tegrates open- and closed-world reasoning, without requiring
an a priori commitment to either paradigm. It is fully com-
patible with the ﬁrst-order semantics of DLs and logic pro-
gramming under stable model semantics. We have developed
reasoning algorithms and identiﬁed tight complexity bounds
for interesting fragments of our formalism. In future, we shall
try to extend our approach to well-founded semantics, as this
might provide better complexity in some practical cases. Fur-
thermore, we shall implement our approach in the ontology
management system KAON2.2

2http://kaon2.semanticweb.org/

References
[Baader and Hollunder, 1995] F. Baader and B. Hollunder.
Embedding Defaults into Terminological Knowledge Rep-
resentation Formalisms. Journal of Automated Reasoning,
14(1):149–180, 1995.

[Baader et al., 2003] F. Baader, D. Calvanese, D. McGuin-
ness, D. Nardi, and P. F. Patel-Schneider, editors. The De-
scription Logic Handbook: Theory, Implementation and
Applications. Cambridge University Press, January 2003.
[Bonatti et al., 2006] P. Bonatti, C. Lutz, and F. Wolter. De-
scription Logics with Circumscription. In Proc. KR 2006,
pages 400–410, Lake District, UK, 2006.

[Calvanese et al., 2006] D. Calvanese, G. De Giacomo,
D. Lembo, M. Lenzerini, and R. Rosati. Data Complexity
of Query Answering in Description Logics. In Proc. KR
2006, pages 260–270, Lake District, UK, 2006.

[Dantsin et al., 2001] E. Dantsin, T. Eiter, G. Gottlob, and
A. Voronkov. Complexity and expressive power of logic
programming. ACM Computing Surveys, 33(3):374–425,
2001.

[Donini et al., 2002] F. M. Donini, D. Nardi, and R. Rosati.
Description Logics of Minimal Knowledge and Negation
as Failure. ACM Transactions on Computational Logic,
3(2):177–225, 2002.

[Eiter et al., 2004] T. Eiter, T. Lukasiewicz, R. Schindlauer,
and H. Tompits. Combining Answer Set Programming
with Description Logics for the Semantic Web. In Proc.
KR 2004, pages 141–151, Whistler, Canada, 2004.

[Fitting, 1996] M. Fitting. First-Order Logic and Automated
Theorem Proving, 2nd Edition. Texts in Computer Sci-
ence. Springer, 1996.

[Gottlob, 1995] G. Gottlob. NP Trees and Carnap’s Modal

Logic. Journal of the ACM, 42(2):421–457, 1995.

[Hustadt et al., 2005] U. Hustadt, B. Motik, and U. Sattler.
Data Complexity of Reasoning in Very Expressive De-
scription Logics.
In Proc. IJCAI 2005, pages 466–471,
Edinburgh, UK, 2005.

[Lifschitz, 1991] V. Lifschitz. Nonmonotonic Databases and
In Proc. IJCAI ’91, pages 381–386,

Epistemic Queries.
Sydney, Australia, 1991.

[Motik and Rosati, 2006] B. Motik and R. Rosati. Closing
Semantic Web Ontologies. Technical report, University of
Manchester, UK, 2006.

[Motik et al., 2005] B. Motik, U. Sattler, and R. Studer.
Query Answering for OWL-DL with rules. Journal of Web
Semantics, 3(1):41–60, 2005.

[Reiter, 1992] R. Reiter. What Should a Database Know?

Journal of Logic Programming, 14(1–2):127–153, 1992.

[Rosati, 1999] R. Rosati. Reasoning about Minimal Belief
and Negation as Failure. Journal of Artiﬁcial Intelligence
Research, 11:277–300, 1999.

[Rosati, 2006] R. Rosati. DL + log: A Tight Integration of
Description Logics and Disjunctive Datalog. In Proc. KR
2006, pages 68–78, Lake District, UK, 2006.

IJCAI-07

482

