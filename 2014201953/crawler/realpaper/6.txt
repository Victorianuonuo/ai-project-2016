Possibilistic Stable Models

Pascal Nicolas and Laurent Garcia and Igor St´ephan
{pascal.nicolas, laurent.garcia, igor.stephan}@univ-angers.fr

LERIA, University of Angers, France

Abstract

In this work, we deﬁne a new framework in order
to improve the knowledge representation power of
Answer Set Programming paradigm. Our proposal
is to use notions from possibility theory to extend
the stable model semantics by taking into account
a certainty level, expressed in terms of necessity
measure, on each rule of a normal logic program.
First of all, we introduce possibilistic deﬁnite logic
programs and show how to compute the conclu-
sions of such programs both in syntactic and se-
mantic ways. The syntactic handling is done by
help of a ﬁx-point operator, the semantic part relies
on a possibility distribution on all sets of atoms and
we show that the two approaches are equivalent. In
a second part, we deﬁne what is a possibilistic sta-
ble model for a normal logic program, with default
negation. Again, we deﬁne a possibility distribu-
tion allowing to determine the stable models.

1 Introduction
Answer set programming (ASP) is an appropriate formalism
to represent various problems issued from Artiﬁcial Intelli-
gence and arising when available information is incomplete
as in non-monotonic reasoning, planning, diagnosis. . . From
a global view, ASP is a general paradigm covering different
declarative semantics for different kinds of logic programs.
One is the stable model semantics [Gelfond and Lifschitz,
1988] for deﬁnite logic programs augmented with default
negation.
In ASP, information is encoded by logical rules
and solutions are obtained as sets of models. Each model is
a minimal set of atoms representing sure informations (some
facts) and deductions obtained by applying by default some
rules. So, conclusions rely on present and absent information,
they form a coherent set of hypotheses and represent a ratio-
nal view on the world described by the rules. Thus, in whole
generality there is not a unique set of conclusions but maybe
many ones and each conclusion is no longer absolutely sure
but only plausible and more or less certain.

Possibilistic logic [Dubois et al., 1995] is issued from
Zadeh’s possibility theory [Zadeh, 1978], which offers a
framework for representation of states of partial ignorance
owing to the use of a dual pair of possibility and necessity

measures. Possibility theory may be quantitative or qual-
itative [Dubois and Prade, 1998] according to the range of
these measures which may be the real interval [0, 1], or a ﬁ-
nite linearly ordered scale as well. Possibilistic logic provides
a sound and complete machinery for handling qualitative un-
certainty with respect to a semantics expressed by means of
possibility distributions which rank-order the possible inter-
pretations. Let us mention that in possibilistic logic we deal
with uncertainty by means of classical 2-valued interpreta-
tions that can be more or less certain.

The aim of our work is to introduce the concepts of pos-
sibilistic logic into ASP in order to deal with uncertainty.
This can be illustrated by the following example of a medical
treatment in which a patient is suffering from two diseases.
Each disease can be cured by one drug but the two drugs are
incompatible. The program P = {dr1 ← di1, not dr2.,
dr2 ← di2, not dr1., c1 ← dr1, di1., c2 ← dr2, di2., di1.,
di2.} means that the drug dr1 (resp. dr2) is given to a pa-
tient if he suffers from the disease di1 (resp. di2) except if he
takes the drug dr2 (resp. dr1); if a patient suffering from dis-
ease di1 (resp. di2) takes the drug dr1 (resp. dr2) then he is
cured c1 (resp. c2) of his disease; the patient suffers from the
diseases di1 and di2. From this program, two stable mod-
els {di1, di2, dr1, c1} and {di1, di2, dr2, c2} are obtained.
However, it seems interesting for a doctor to evaluate the cer-
tainty of the efﬁciency of the medical treatment. So, it seems
natural to combine the certainty degrees of rules allowing to
determine the level of certainty of the conclusions.

This section continues with a theoretical background on
possibilistic logic and ASP. Section 2 introduces possibilistic
deﬁnite logic programs and their possibilistic models. Sec-
tion 3 extends our approach to possibilistic stable models for
logic programs with default negation. Last, section 4 links
our work to some others in the same area and gives some per-
spectives.

Possibilistic logic. Possibilistic logic,
in the necessity-
valued case, handles pairs of the form (p, α) where p is a
classical logic formula and α is an element of a totally or-
dered set. The pair (p, α) expresses that the formula p is cer-
tain at least to the level α. A possibilistic base is denoted
Σ = {(pi, αi)}i∈I. Formulas with degree 0 are not explicitly
represented in the knowledge base since only beliefs which
are somewhat accepted are useful. The higher is the weight,

the more certain is the formula. This degree α is evaluated by
a necessity measure and it is not a probability. Thus, numeri-
cal values are not an absolute evaluation (like it is in probabil-
ity theory) but induce a certainty (or conﬁdence) scale. More-
over, let us note that these values are determined by the expert
providing the knowledge base or they are automatically given
if, as we can imagine, the rules and their conﬁdence degrees
result from a knowledge discovery process.

The basic element of possibility theory is the possibility
distribution π which is a mapping from Ω, the interpreta-
tion set, to the interval [0, 1]. π(ω) represents the degree
of compatibility of the interpretation ω with the available in-
formation (or beliefs) about the real world. By convention,
π(ω) = 0 means that ω is impossible, and π(ω) = 1 means
that nothing prevents ω from being the real world (ω is con-
sistent with all the available beliefs, it is a model of Σ). When
π(ω) > π(ω0), ω is a preferred candidate to ω0 for being the
real state of the world. From a possibility distribution π, we
can deﬁne two different ways of rank-ordering formulas of
the language. This is obtained using two mappings grading
respectively the possibility and the certainty of a formula p:
Π(p) = max{π(ω) | ω |= p} is the possibility (or consis-
tency) degree which evaluates the extent to which p is consis-
tent with the available beliefs expressed by π [Zadeh, 1978];
N(p) = 1− Π(¬p) = 1− max{π(ω) | ω 6|= p} is the neces-
sity (or certainty) degree which evaluates the extent to which
p is entailed by the available beliefs.
Moreover, given a base Σ, only the possibility distri-
butions respecting ∀(p, α) ∈ Σ, N(p) ≥ α are sig-
niﬁcant and called compatible.
A possibility distribu-
tion π is said to be the least speciﬁc one between all
compatible distributions if there is no possibility distri-
6= π, compatible with Σ such that
bution π0, with π0
∀ω, π0(ω) ≥ π(ω). The least speciﬁc possibility distribu-
tion πΣ always exists [Dubois et al., 1995] and is deﬁned by:

if ω is a model of Σ, then πΣ(ω) = 1
else πΣ(ω) = 1 − max{α | ω 6|= p, (p, α) ∈ Σ}.

. . . , an, not b1,

Stable Model Semantics. ASP is concerned by different
kinds of logic programs and different semantics. In our work
we deal with normal logic programs, interpreted by stable
model semantics [Gelfond and Lifschitz, 1988]. We consider
given a non empty set of atoms X that determines the lan-
guage of the programs1. A normal logic program is a set of
rules of the form: c ← a1,
. . . , not bm.
where n ≥ 0, m ≥ 0, {a1, . . . , an, b1, . . . , bm, c} ⊆ X .
A term like not b is called a default negation. The intu-
itive meaning of such a rule is: ”if you have all the ai’s
and no bj’s then you can conclude c”. For such a rule r we
use the following notations (extended to a rule set as usual):
the positive prerequisites of r, body+(r) = {a1,
. . . , an};
the negative prerequisites of r, body−(r) = {b1,
. . . , bm};
the conclusion of r, head(r) = c and the positive projec-
tion of r, r+ = head(r) ← body+(r).
If a program P
does not contain any default negation (ie: body−(P ) = ∅),
then P is a deﬁnite logic program and it has one minimal
1In the sequel, if X is not explicitly given, it is supposed to be

the set of all atoms occurring in the considered program.

Herbrand model Cn(P ). The reduct P X of a program P
wrt. an atom set X is the deﬁnite logic program deﬁned by :
P X = {r+ | r ∈ P, body−(r)∩ X = ∅} and it is the core of
the deﬁnition of a stable model.
Deﬁnition 1.1 [Gelfond and Lifschitz, 1988] Let P be a nor-
mal logic program and S an atom set. S is a stable model of
P if and only if S = Cn(P S).

Note that a program may have one or many stable models
or not at all. In this last case we say that the program is in-
consistent, otherwise it is consistent. When an atom belongs
at least to one stable model of P it is called a credulous con-
sequence of P and when it belongs to every stable model of
P , it is called a skeptical consequence of P .

Let A be an atom set, r be a rule and P be a program
(deﬁnite or normal). We say that r is applicable in A if
body+(r) ⊆ A and we denote App(P, A) the subset of P of
its applicable rules in A. A satisﬁes r (or r is satisﬁed by
A), denoted A |= r, if r is applicable in A ⇒ head(r) ∈ A.
A is closed under P if ∀r ∈ P, A |= r. P is grounded
if it can be ordered as the sequence hr1, . . . , rni such that
∀i, 1 ≤ i ≤ n, ri ∈ App(P, head({r1, . . . , ri−1})). Cn(P ),
the least (Herbrand) model of a deﬁnite logic program P , is
the smallest atom set closed under P and it can be computed
as the least ﬁx-point of the following consequence operator
TP : 2X → 2X such that: TP (A) = head(App(P, A)).

By this way, we can establish the next result that clariﬁes
the links between the least model A of a program P and the
rules producing it. We see that A is underpinned by a set of
applicable rules, App(P, A), that satisﬁes a stability condi-
tion and that is grounded. These two features will be used in
the sequel to deﬁne the core of our work: a possibility distri-
bution over atom sets induced by a deﬁnite logic program.
Lemma 1.1 Let P be a deﬁnite logic program and A be an
atom set,

(cid:26) A = head(App(P, A))

App(P, A) is grounded

A is the least
Herbrand model of P

⇐⇒

2 Possibilistic Deﬁnite Logic Programs
We consider given a ﬁnite set of atoms X and a ﬁnite, totally
ordered set of necessity values N ⊆]0, 1]. Then, a possibilis-
tic atom is a pair p = (x, α) ∈ X ×N . We denote by p∗ = x
the classical projection of p and by n(p) = α its necessity de-
gree. These notations can also be extended to a possibilistic
atom set (p.a.s.) A that is a set of possibilistic atoms where
every atom x occurs at most one time in A.
A possibilistic deﬁnite logic program (p.d.l.p.) is a set of
possibilistic rules of the form: r = (c ← a1,
. . . , an. , α)
. . . , an, c} ⊆ X , α ∈ N . The classical pro-
n ≥ 0,{a1,
jection of the possibilistic rule is r∗ = c ← a1,
. . . , an.
n(r) = α is a necessity degree representing the certainty level
of the information described by r. If R is a set of possibilistic
rules, then R∗ = {r∗ | r ∈ R} is the deﬁnite logic program
obtained from P by forgetting all the necessity values.

Let us recall that a possibilistic logic base is a compact rep-
resentation of the possibility distribution deﬁned on interpre-
tations representing the information. Indeed, the treatment of

the base in a syntactic way (in terms of formulas and neces-
sity degrees) leads to the same results as the treatment done
in a semantic way (in terms of interpretations and possibil-
ity distribution). In our framework, the same situation occurs
as it is shown in the next two subsections. Firstly, we de-
ﬁne a semantic handling of a program that is deﬁned in term
of a possibility distribution over all atom sets. Secondly, we
provide a syntactic deduction process that leads to the same
results as the ones given by the possibility distribution.
2.1 Model Theory for Possibilistic Deﬁnite Logic

Programs

From a possibilistic deﬁnite logic program P , we can deter-
mine, as it is done in possibilistic logic, some possibility dis-
tributions deﬁned on all the sets in 2X and that are compatible
with P . Let us note that there is a correspondence between
interpretations in propositional logic and atom sets in ASP.
Like in possibilistic logic, the possibility degree of an atom
set is determined by the necessity degrees of the rules of the
program that are not satisﬁed by this set. The satisﬁability of
a rule r is based on its applicability wrt. an atom set A, so
A 6|= r iff body+(r) ⊆ A and head(r) 6∈ A (see section 1).
But, we have to notice that the contradiction of a rule is not
enough to determine the possibility degree of a set since, in
ASP, it is important to take into account the groundedness and
stability notions (see lemma 1.1). Firstly, the set A = {a, b}
satisﬁes every rule in P = {a ← b., b ← a.}, but it is not
the least model of P because the groundedness is not satis-
ﬁed. Secondly, the set A0 = {a, b, d} satisﬁes every rule in
P 0 = {a., b ← a., d ← c.} but it is not the least model of P 0
because d can not be produced by any rule from P 0 applica-
ble in A0. In these two cases, the possibility of A and A0 must
be 0 since they can not be the least model at all, even if they
satisfy every rule in their respective associated programs.
Deﬁnition 2.1 Let P be a p.d.l.p. and π : 2X → [0, 1]
be a possibility distribution. π is compatible with P if

A 6⊆ head(App(P ∗, A)) ⇒ π(A) = 0
App(P ∗, A) is not grounded ⇒ π(A) = 0
A is the least model of P ∗ ⇒ π(A) = 1
{n(r) | A 6|= r∗}
otherwise π(A) ≤ 1 − max
r∈P



The necessity degree attached to each rule deﬁnes only a
lower bound (and not an exact value) of the certainty of the
rule. So, as recalled in section 1, many possibility distribu-
tions are compatible with these degrees. But, we are only in-
terested by the least informative one, that is the least speciﬁc
one, whose characterization is given below.
Proposition 2.1 Let P be a p.d.l.p. then πP : 2X → [0, 1]
deﬁned by
1. if A 6⊆ head(App(P ∗, A)) then πP (A) = 0
2. if App(P ∗, A) is not grounded then πP (A) = 0
3. otherwise

• if ∀r ∈ P, A |= r∗ then πP (A) = 1
• otherwise 0 ≤ πP (A) < 1 and
{n(r) | A 6|= r∗}

πP (A) = 1 − max
r∈P

is the least speciﬁc possibility distribution.

The deﬁnition of πP ensures that it is compatible with P .
The third item ranks the sets which may be solutions with
respect to the weights of the falsiﬁed rules.
Proposition 2.2 Let P be a p.d.l.p. and A ⊆ X be an atom
set, then
1. πP (A) = 1 ⇐⇒ A = Cn(P ∗)
2. A ⊃ Cn(P ∗) ⇒ πP (A) = 0
3. Cn(P ∗) 6= ∅ ⇒ πP (∅) = 1 − max
r∈P
Now, we can give the deﬁnition of inference that is, in the
framework of ASP, the evaluation of the necessity degree of
each atom of the universe.
Deﬁnition 2.2 Let P be a p.d.l.p. and πP the least speciﬁc
possibility distribution compatible with P , we deﬁne the two
dual possibility and necessity measures such that:
A∈2X{πP (A) | x 6∈ A}

ΠP (x) = max
NP (x) = 1 − max

A∈2X{πP (A) | x ∈ A}

{n(r) | ∅ 6|= r∗}

ΠP (x) gives the level of consistency of x with respect to
the p.d.l.p. P and NP (x) evaluates the level at which x is
inferred from the p.d.l.p. P . This is closely related to the
deﬁnitions of possibilistic logic. For instance, whenever an
atom x belongs to the least model of the classical program its
possibility is total.
Proposition 2.3 Let P be a p.d.l.p., Cn(P ∗) the least model
of P ∗ and x ∈ X then :
1. x ∈ Cn(P ∗) ⇒ ΠP (x) = 1 and
2. x 6∈ Cn(P ∗) ⇐⇒ NP (x) = 0
3. x ∈ Cn(P ∗) ⇒
NP (x) = min

x 6∈ Cn(P ∗) ⇒ ΠP (x) = 0

{n(r) | A 6|= r∗} | x 6∈ A}

A⊂Cn(P ∗)

{max
r∈P

4. Let P 0 be a p.d.l.p., P ⊆ P 0 ⇒ NP (x) ≤ NP 0(x).
Furthermore, the necessity measure allows us to introduce

the following deﬁnition of a possibilistic model of a p.d.l.p.
Deﬁnition 2.3 Let P be a possibilistic deﬁnite logic pro-
gram, then the set

ΠM(P ) = {(x, NP (x)) | x ∈ X , NP (x) > 0}

is its possibilistic model.
Proposition 2.4 Let P be a p.d.l.p. then : (ΠM(P ))∗ is the
least model of P ∗.
Example 2.1 Let us take the following program P =
{(a., 0.8), (b ← a., 0.6), (d ← a., 0.5), (d ← c., 0.9)}.
The least speciﬁc possibility distribution induced by P is null
for every atom set included in {a, b, c, d} except for πP (∅)
= 0.2, πP ({a}) = 0.4, πP ({a, b})=0.5, πP ({a, d})=0.4 and
πP ({a, b, d})=1 (the least model of P ∗). So, we can compute
the possibility of each atom: ΠP (a) = ΠP (b) = ΠP (d) = 1
and ΠP (c) = 0 and its certainty in term of necessity de-
gree: NP (a) = 0.8, NP (b) = 0.6, NP (c) = 0, NP (d) = 0.5.
Thus, ΠM(P ) = {(a, 0.8), (b, 0.6), (d, 0.5)} is the possi-
bilistic model of P .

Proposition 2.5 hA,vi is a complete lattice.
Deﬁnition 2.5 Let r = (c ← a1,
bilistic rule and A be a p.a.s.,

. . . , an., α) be a possi-

2.2 Fix-point Theory for Possibilistic Deﬁnite

Logic Programs

Deﬁnitions exposed in this subsection are closely related to
what can be found in [Dubois et al., 1991]. But here, we
adopt an ASP point of view and thus we use atom sets in-
stead of classical interpretations since the underlying possi-
bility distribution is deﬁned on atom sets.
Deﬁnition 2.4 Consider A = 2X×N the ﬁnite set of all p.a.s.
induced by X and N . ∀A, B ∈ A, we deﬁne:
A u B = {(x, min{α, β}), (x, α) ∈ A, (x, β) ∈ B}
A t B = {(x, α) | (x, α) ∈ A, x 6∈ B∗}
∪{(x, β) | x 6∈ A∗, (x, β) ∈ B}
∪{(x, max{α, β}) | (x, α) ∈ A, (x, β) ∈ B}
(a, α) ∈ A ∧ (a, β) ∈ B ⇒ α ≤ β

(cid:26) A∗ ⊆ B∗, and ∀a, α, β,

A v B ⇐⇒

• r is α-applicable in A if body(r∗) = ∅
• r is β-applicable in A if β = min{α, α1, . . . , αn},
• r is 0-applicable otherwise.

{(a1, α1), . . . , (an, αn)} ⊆ A, 2

And, for a given p.d.l.p. P and an atom x, App(P, A, x) =
{r ∈ P | head(r∗) = x, r is ν-applicable in A, ν > 0}

The applicability degree of a rule r captures the certainty of
the inference process realized when r is applied wrt. a p.a.s.
A. If the body of r is empty, then r is applicable with its own
certainty. If the body of r is not veriﬁed (not satisﬁed by A),
then r is not at all applicable. Otherwise, the applicability
level of r depends on the certainty level of the propositions
inducing its groundedness and on its own necessity degree.
Firstly, the necessity degree of a conjunction (the rule body)
is the minimal value of the necessity values of subformulae
(atoms) involved in it. Secondly, the certainty of a rule appli-
cation is the minimal value between the rule certainty and the
certainty of the rule body. This approach is similar to the res-
olution principle in possibilistic logic [Dubois et al., 1995].
Deﬁnition 2.6 Let P be a p.d.l.p. and A be a possibilistic
atom set. The immediate possibilistic consequence operator
ΠTP maps a p.a.s. to another one by this way: ΠTP (A) =

( (x, δ) | x ∈ head(P ∗), App(P, A, x) 6= ∅,

)

{ν | r is ν-applicable in A}

δ =

max

r∈App(P,A,x)

and

then the iterated operator ΠT k

P is deﬁned by
P = ΠTP (ΠT n

ΠT n+1

P = ∅

P ),∀n ≥ 0 .
ΠT 0
Here, we can remark that if one conclusion is obtained by
different rules, its certainty is equal to the greatest certainty
with which it is obtained in each case (operator max). Again,
it is in accordance with possibilistic resolution principle.
Proposition 2.6 Let P be a p.d.l.p., then ΠTP has a least
ﬁx-point tn≥0ΠT n
P (∅) that we called the set of possibilistic
consequences of P and we denote it by ΠCn(P ).

2For two p.a.s. A and B, A ⊆ B means the classical set inclu-

sion and has not to be confused with the order v of def. 2.4.

the

then ΠT 0

p.d.l.p.
exam-
of
P (∅) = {(a, 0.8)},
P (∅) =
P (∅) = {(a, 0.8), (b, 0.6), (d, 0.5)}, ΠT 3
P (∅),∀k > 3.
So,

Example 2.2 Let P be
P (∅) = ∅, ΠT 1
ple 2.1,
ΠT 2
{(a, 0.8), (b, 0.6), (d, 0.5)} = ΠT k
ΠCn(P ) = {(a, 0.8), (b, 0.6), (d, 0.5)}.
Theorem 2.1 Let P be a p.d.l.p., then ΠCn(P ) = ΠM(P ).
As illustrated and formalized above, our operator ΠTP can
be used to compute the possibilistic model of a p.d.l.p. This
result shows the equivalence between the syntactic and se-
mantic approaches in our framework, whereas in [Dubois et
al., 1991] only a syntactic treatment of a p.d.l.p. is proposed.

3 Possibilistic Normal Logic Programs
3.1 Possibilistic Normal Logic Programs and

Possibilistic Stable Models

. . . , an, not b1,

Here, we extend our proposal to non-monotonic reasoning
by allowing default negation in programs and we formalize
the notion of possibilistic stable model. It extends the sta-
ble model semantics by taking into account the necessity de-
gree in the rules of a given possibilistic normal logic program
(p.n.l.p.). Such a program is a ﬁnite set of rules of the form :
(c ← a1,
. . . , not bm. , α) n ≥ 0, m ≥ 0
for which we just have to precise that ∀i, bi ∈ X , all the rest
being the same as for a p.d.l.p. (see the begining of section 2).
As in the classical case without necessity value, we need to
deﬁne what is the reduction of a program before introducing
the possibilistic stable model semantics.
Deﬁnition 3.1 Let P be a p.n.l.p. and A be an atom set.
The possibilistic reduct of P wrt. A is the p.d.l.p. P A =
{((r∗)+, n(r)) | r ∈ P, body−(r) ∩ A = ∅}.
Deﬁnition 3.2 Let P be a p.n.l.p. and S a p.a.s. S is a pos-
sibilistic stable model of P if and only if S = ΠCn(P (S∗)).
By analogy with classical normal logic programs (without
necessity values attached to rules) we say that a p.n.l.p. P
is consistent if P has at least one possibilistic stable model.
Otherwise P is said to be inconsistent. Furthermore when a
possibilistic atom belongs at least to one possibilistic stable
model of P it is called a credulous possibilistic consequence
of P and when it belongs to every possibilistic stable model
of P , it is called a skeptical possibilistic consequence of P .
Example 3.1 We are now able to represent the example
the introductory section with some levels of cer-
of
tainty by P = {(dr1 ← di1, not dr2., 1), (dr2 ←
(c1 ← dr1, di1., 0.7), (c2 ←
di2, not dr1., 1),
dr2, di2., 0.3), (di1., 0.9), (di2., 0.7)}.
two ﬁrst
rules express that for each disease we have an appropriate
drug, these two drugs are incompatible, but their appro-
priateness is fully certain. The third (resp.
fourth) rule
expresses that drug dr1 (resp. dr2) has an efﬁciency quasi
certain (resp little certain) for the disease di1 (resp di2).
The two last rules (some observations) represent that the
diagnosis of the disease di1 (resp. di2) is quasi certain (resp.
almost certain). Then, the two possibilistic stable models
of P are {(di1, 0.9), (di2, 0.7), (dr1, 0.9), (c1, 0.7)} and
{(di1, 0.9), (di2, 0.7), (dr2, 0.7), (c2, 0.3)}. So, the doctor

The

can observe that he has an alternative. On one hand, he can
give the drug dr1 and the patient will be almost certainly
cured of the disease di1. On the other hand, he can give the
drug dr2 and the patient will be cured of the disease di2 with
a low certainty degree. However, if the doctor considers that
disease di2 is very serious, maybe he will choose the drug
dr2 even if the degree is lower. That is why it is interesting
to keep the two stable models in which every conclusion is
weighted with a certainty degree.
Proposition 3.1 Let P be a p.n.l.p.
1. Let A be a possibilistic stable model of P and α ∈
2. Let S be a stable model of P ∗, then {(x, NP S (x)) | x ∈
3. Let A be a possibilistic stable model of P , then A∗ is a

N , α > 0, then (x, α) ∈ A ⇐⇒ α = NP A∗ (x).
X , NP S (x) > 0} is a possibilistic stable model of P .
stable model of P ∗.

This result shows that there is a one-to-one mapping be-
tween the possibilistic stable models of a p.n.l.p P and the
stable models of its classical part P ∗. It shows that the deci-
sion problem of existence of a p.s.m. for a p.n.l.p. stays in the
same complexity class as the decision problem of existence of
a stable model for a normal logic program. So, it is an NP-
complete problem. Furthermore, it indicates an easy way to
implement a system able to compute a p.s.m. of a p.n.l.p P .
First, one can use a software (as Smodels [Niemel¨a and Si-
mons, 1997] or DLV [Eiter et al., 1998]) to compute the stable
models of P ∗. Second, for every found stable model A, our
operator ΠTP A can be used to compute (in polynomial time)
the corresponding p.s.m. ΠCn(P A) of P .
3.2 Possibility Distribution deﬁned upon a Normal

Logic Program

In the previous deﬁnition 3.2 we have proposed a syntactic
way to compute the possibilistic stable models of a p.n.l.p. by
using the ﬁx-point operator ΠCn deﬁned for a p.d.l.p. Now,
we examine the semantics that can be given to this framework
by deﬁning a possibility distribution induced by the necessity
values associated to each normal rules. This distribution ˜π
over all the atom sets (i.e. over 2X ) has to reﬂect the ability of
every atom set to be a stable model of P ∗ and that is achieved
by the next deﬁnitions.
Deﬁnition 3.3 Let P be a p.n.l.p. and A be an atom set, then
˜πP is the possibility distribution deﬁned by ˜πP : 2X → [0, 1]
and respecting: ∀A ∈ 2X , ˜πP (A) = πP A(A).

One can observe that deﬁnition of ˜πP can be paraphrased
by: ”the possibility for an atom set A to be a stable model of
P is its possibility to be the least model of the program P re-
ducted by A”. This deﬁnition is natural wrt. the deﬁnition 1.1
of a stable model and is justiﬁed by the next result.
Proposition 3.2 Let P be a p.n.l.p. and A ∈ 2X be an atom
set, then ˜πP (A) = 1 ⇐⇒ A is a stable model of P ∗.
Example 3.2 The possibility distribution induced by the
p.n.l.p. P = {(a., 1), (b., 1), (c ← a, not d., 0.4), (d ←
b, not c., 0.8), (e ← c., 0.6), (e ← d., 0.5)} is null for every
atom set included in {a, b, c, d, e} except for ˜πP ({a, b}) =

0.2, ˜πP ({a, b, c}) = 0.4, ˜πP ({a, b, d}) = 0.5 and
˜πP ({a, b, c, e}) = ˜πP ({a, b, d, e}) = 1 ({a, b, c, e} and
{a, b, d, e} are the two stable models of P ∗).
Deﬁnition 3.4 Let P be a p.n.l.p. and ˜πP its associated pos-
sibility distribution, we deﬁne the two dual possibility and
necessity measures such that:

A∈2X{˜πP (A) | x ∈ A}

˜ΠP (x) = max
˜NP (x) = 1 − max

A∈2X{˜πP (A) | x 6∈ A}.

Proposition 3.3 Let P be a consistent p.n.l.p. and x ∈ X ,
1. x is a credulous consequence of P ∗ ⇒ ˜ΠP (x) = 1
2. x is not a skeptical consequence of P ∗ ⇐⇒ ˜NP (x) = 0
Let us remark that if an atom x is not a credulous conse-
quence of P then it does not necessarily imply that ˜ΠP (x) =
0 as it is the case for an atom that is not a consequence of
a p.d.l.p. (see proposition 2.3 item 1). For instance, P =
{(a., 0.6), (b ← not a., 0.7)} has only one p.s.m. {(a, 0.6)}
so b is not a possibilistic credulous consequence of P . But,
the possibility distribution is ˜πP (∅) = 0.3, ˜πP ({a}) =
1, ˜πP ({b}) = 0.4 and ˜πP ({a, b}) = 0 so ˜ΠP (b) = 0.4. This
is because, with this program, b is not completely impossi-
ble. In fact, b is not a credulous consequence only because a
blocks the applicability of the rule concluding b. So, in other
words if we have a then we can not have b, but if a is absent
then we can have b. Since, the certainty of a is only 0.6, so
the possibility of b is naturally 0.4.
4 Discussion and Conclusion
In this work, we have proposed a way to deal with logic pro-
grams taking into account a level of certainty for each rule.
First, we have given two equivalent ways, a semantic and a
syntactic one, for dealing with possibilistic deﬁnite logic pro-
grams. Then, we have shown how to extend our framework
to possibilistic normal logic programs in order to obtain what
we called possibilistic stable models. In addition to this work,
we have described in [Nicolas et al., 2005] an application of
our proposal to deal with inconsistent normal logic programs.
There are alternative formalisms for extending non-
monotonic reasoning with qualitative or quantitative weights.
In [Nerode et al., 1997], annotated non-monotonic rule sys-
tems are introduced to affect on every piece of knowledge a
weight representing a probability, an uncertainty measure, a
time, a place,. . . For instance for a logic program, it leads to
rules like (c, 0.4) ← (a, 0.5), (not b, 0.7). This approach is
different to our since we put weights on rules and not on each
atom in the rules. Another divergence is the meaning of the
weights : in our work we deal with uncertainty while they
develop a formalism in which the semantic of weights is not
established a priori. In [Damasio and Pereira, 2001a; 2001b;
Dubois et al., 1991; Benferhat et al., 1993; Loyer and Strac-
cia, 2003; Alsinet and Godo, 2000] the reader can ﬁnd dif-
ferent propositions about multi-valued or probabilistic logic
programs, about possibilistic deﬁnite logic programs, about
levels of certainty ranking atoms, but not rules, involved in
a non-monotonic reasoning,. . . But, none of these works de-
scribes a formalism dealing with uncertainty in a logic pro-
gram with default negation by means of possibilistic theory,

both in a semantic and a syntactic ways. The closest work
of ours can be found in [Wagner, 1997]. But the approach
is to reconstruct possibilistic logic by deﬁning a multi-valued
interpretation and a corresponding satisfaction relation and
forgetting the notion of possibility distribution. Then, he is
not able to provide any result about the possibility of an atom
set to be a stable model. Moreover, the necessity (certainty)
of a conclusion is not correlated to the possibility of the atom
set. So, we think that this approach is far from the spirit of
possibilistic logic.

In possibilistic logic, the necessity degrees are commonly
interpreted as preferences between formulas, the more cer-
tain is a formula, the more preferred it is. Since there is a
lot of works dealing with preferences between rules in non-
monotonic reasoning [Delgrande et al., 2004], it is interesting
to analyze our work when we consider that the necessity de-
grees on rules determine a preference order. If we look only
on the area of ASP, most of these works use the preferences
expressed between the rules to make a choice between the
different stable models to keep only the ”preferred” ones. In
other words, the priorities between the rules do not evaluate a
certainty degree of the rules but are a tool to choice between
contradicting rules. This differs from our work because, when
several stable models exist, we compute the certainty of the
propositions with respect to each stable model. But we do not
try to eliminate some stable models since we consider they are
alternate solutions. Nevertheless, a future work analyzing in
depth the links between our proposal and the preference han-
dling in ASP is envisaged, in particular with respect to the
two general principles stated in [Brewka and Eiter, 1999].

Some direct, and without theoretical difﬁculties, continu-
ation of this work is to precise the handling of strong nega-
tion in possibilistic normal programs. Then, we also plan to
develop a system to compute possibilistic stable models by
interfacing it with existing systems able to compute classical
stable models. Furthermore, we will try to extend our ap-
proach to disjunctive logic programs and answer set seman-
tics [Gelfond and Lifschitz, 1991].

References
[Alsinet and Godo, 2000] T. Alsinet and L. Godo. A complete cal-
culus for possibilistic logic programming with fuzzy proposi-
tional variables. In C. Boutilier and M. Goldszmidt, editors, UAI
’00: Proceedings of the 16th Conference in Uncertainty in Ar-
tiﬁcial Intelligence, pages 1–10, Stanford University, Stanford,
California, USA, 2000. Morgan Kaufmann.

[Benferhat et al., 1993] S. Benferhat, D. Dubois, and H. Prade.
Possibilistic logic: From nonmonotonicity to logic programming.
In M. Clarke, R. Kruse, and S. Moral, editors, European Con-
ference on Symbolic and Quantitative Approaches to Reasoning
with Uncertainty, volume 747 of LNCS, pages 17–24. Springer,
1993.

[Brewka and Eiter, 1999] G. Brewka and T. Eiter. Preferred answer
sets for extended logic programs. Artiﬁcial Intelligence, 109(1-
2):297–356, 1999.

[Damasio and Pereira, 2001a] C. V. Damasio and L. M. Pereira.
Antitonic logic programs.
In T. Eiter, W. Faber, and
M. Truszczynski, editors, International Conference on Logic

Programming and NonMonotonic Reasoning, volume 2173 of
LNCS, pages 379–392. Springer, 2001.

[Damasio and Pereira, 2001b] C. V. Damasio and L. M. Pereira.
Monotonic and residuated logic programs.
In S. Benferhat
and P. Besnard, editors, European Conference on Symbolic and
Quantitative Approaches to Reasoning with Uncertainty, volume
2143 of LNCS, pages 748–759. Springer, 2001.

[Delgrande et al., 2004] J. Delgrande, T. Schaub, H. Tompits, and
K. Wang. A classiﬁcation and survey of preference handling
approaches in nonmonotonic reasoning. Computational Intelli-
gence, 20(2):308–334, 2004.

[Dubois and Prade, 1998] D. Dubois and H. Prade. Possibility the-
ory: qualitative and quantitative aspects.
In Ph. Smets, edi-
tor, Handbook of Defeasible Reasoning and Uncertainty Man-
agement Systems, volume 1, pages 169–226. Kluwer Academic
Press, 1998.

[Dubois et al., 1991] D. Dubois, J. Lang, and H. Prade. Towards
possibilistic logic programming. In K. Furukawa, editor, Interna-
tional Conference on Logic Programming, pages 581–595, Cam-
bridge, MA, 1991. MIT Press.

[Dubois et al., 1995] D. Dubois, J. Lang, and H. Prade. Possibilistic
logic. In D. Gabbay, C. Hogger, and J. Robinson, editors, Hand-
book of Logic in Artiﬁcial Intelligence and Logic Programming,
volume 3, pages 439–513. Oxford University Press, 1995.

[Eiter et al., 1998] T. Eiter, N. Leone, C. Mateis, G. Pfeifer, and
F. Scarcello. The kr system dlv:progress report, comparisons
and benchmarks. pages 406–417. Morgan Kaufmann Publishers,
1998.

[Gelfond and Lifschitz, 1988] M. Gelfond and V. Lifschitz. The
In Robert A.
stable model semantics for logic programming.
Kowalski and Kenneth Bowen, editors, International Conference
on Logic Programming, pages 1070–1080. The MIT Press, 1988.
[Gelfond and Lifschitz, 1991] M. Gelfond and V. Lifschitz. Clas-
sical negation in logic programs and disjunctive databases. New
Generation Computing, 9(3-4):363–385, 1991.

[Loyer and Straccia, 2003] Y. Loyer and U. Straccia. Default
knowledge in logic programs with uncertainty. In International
Conference on Logic Programming, volume 2916 of LNCS,
pages 466–480, Mumbai, India, 2003. Springer.

[Nerode et al., 1997] A. Nerode, J. B. Remmel, and V. S. Subrah-
manian. Annotated nonmonotonic rule systems. Theoretical
Computer Science, 171(1-2):111–146, 1997.

[Nicolas et al., 2005] P. Nicolas, L. Garcia, and I. St´ephan. A pos-
sibilistic inconsistency handling in answer set programming. In
European Conference on Symbolic and Quantitative Approaches
to Reasoning with Uncertainty, LNCS, Barcelona, Spain, 2005.
Springer.

[Niemel¨a and Simons, 1997] I. Niemel¨a and P. Simons. Smodels
- an implementation of the stable model and well-founded se-
mantics for normal logic programs. In International Conference
on Logic Programming and NonMonotonic Reasoning, volume
1265 of LNCS, pages 420–429. Springer, 1997.

[Wagner, 1997] G. Wagner. A logical reconstruction of fuzzy infer-
ence in databases and logic programs. In Proc. of Int. Fuzzy Set
Association World Congress (IFSA), Prague, Czech, 1997.

[Zadeh, 1978] L.A. Zadeh. Fuzzy sets as a basis for a theory of
In Fuzzy Sets and Systems, volume 1, pages 3–28.

possibility.
1978.

