474 

Session No.  11 Theoretioal Foundations 

The  definition  of  "kernel  equivalence"  is 
developed  formally  within  the  framework  of  the 
common  directed  graph  representation  of  programs 
presented  in  the  next  section,  (although  the  use 
of 
this  particular  representation  is  not  essen­
t i a l ).  Following  sections  develop  the  defini­
tion  of  kernel  equivalence  in  terms  of  a  dis­
tinction  between  kernel  and  control  statements 
and  between  kernel  and  control  variables.  Some 
examples  of  equivalence  proofs  are  given. 
In 
the  concluding  section  we  also  argue  the  rela­
tionship  of  kernel  equivalence  to  proofs  of  pro­
gram  "correctness". 

11.  Programs. 

As  the  basic  formal  model  of  a  program  we 

shall  adopt  a  representation  which  has  been 
widely  used  (see  e.g.  Luckham,  Park  and 
Paterson  (1),  Kaplan  (2)).  A  program  is  repre­
sented  by  a  finite  directed  graph  (flowchart) 
with  labeled  nodes.  Nodes  may  have  zero  (exit 
nodes),  one  (assignment  nodes)  or  two  (branch 
nodes)  exiting  arrows.  There  is  a  unique  entry 
node  with  no  entering  arrow  and  every  node  lies 
on  a  path  from  the  entry  node  to  an  exit  node. 
The  arrows  leaving  a  branch  node  are  labeled 
true  and  false.  Assignment  nodes  are  labeled 
with  assignment  statements,  branch  nodes  with 
branch  statements.  The  entry  node  is  labeled 
"ENTER"  and  each  exit  node  is  labeled  "EXIT". 

KERNEL EQUIVALENCE OF PROGRAMS AND PROVING 

KERNEL  EQUIVALENCE AND CORRECTNESS  BY TEST CASES* 

Terrence  W.  Pratt 
University  of  Texas 
Austin,  Texas,  U.S.A. 

Abstract 

The  statements  in  a  program  may  be  classi­
fied  as  "kernel  statements"  if  they  participate 
directly  in  the  computation  of  some  output  and 
as  "control  statements"  if  they  participate 
directly  in  deciding  the  control  path  at  branch 
points.  Two  programs  are  kernel  equivalent  if 
they  always  execute  identical  sequences  of 
kernel  statements  given  the  same  inputs.  Kernel 
equivalence  is  defined  formally  and  is  shown 
to  be  practically  decidable  in  many  cases  by  a 
procedure  of  trying  test  cases.  The  concept  of 
program  kernel  may  also  be  used  as  a  basis  for 
proving  correctness  of  programs. 

Descriptive  Terms 

Equivalence,  correctness,  program  analysis, 
of  control, 
graph  model 

flow 
theory  of  programming, 

flow  of  data, 

I. 

Introduction. 
The  most  general  definition  of  the  equiva­
lence  of  programs  is  the  purely  functional  --  a 
program  represents  a  mapping  from  input  data 
sets  to  output  data  sets  and  two  programs  are 
equivalent  if  they  represent  the  same  function 
on  the  same  domain  of  inputs.  The  other  extreme 
of  equivalence  is  the  purely  structural.  One 
assumes  a  particular  representation  of  programs, 
e.g.  as  Algol  programs,  Turing  machines,  abstract 
flowchart  graphs,  or  lambda-calculus  expressions. 
Two  programs  arc  then  equivalent  if  they  have 
identical  representations, 
tures.  Unfortunately, 
representation  of  programs,  structural  identity 
is  too  restricted  a  form  of  equivalence.  On  the 
other  hand,  determining  functional  equivalence 
is  usually  undecidable  in  general,  and  at  best 
requires  a  detailed  knowledge  of  the  properties 
of  the  primitive  operations  and  predicates 
involved. 

for  any  fairly  general 

i.e. 

identical  struc­

In  this  paper,  we  develop  an  intermediate 

definition  of  equivalence  based  on  program 
"kernels"  which  requires  only  f a i r ly  superficial 
knowledge  of  the  flow  of  control  and  data  between 
statements  in  a  program  yet  which  may  be  used  to 
prove  functional  equivalence  of  programs  whose 
structures  are  quite  different.  Proving  the 
kernel  equivalence  of  two  programs  may  often  be 
done  by  observing  the  results  of  executing  each 
program  on  a  f i n i te  number  of  test  cases. 

*This  work  supported  in  part  by  NSF  Grant  GJ-778 

Figure  1  is  an  example  of  a  program.  Execution 
of  a  program  proceeds  according  to  the  usual 
rules.  One  begins  at  the  entry  node  and  follows 
a  path  through  the  graph  executing  assignment 
statements  as  they  are  encountered  and  choosing 
the  appropriate  branch  at  branch  nodes  on  the 
basis  of  the  value  of  the  predicate. 

The  particular  representation  as  a  directed 
graph  is  not  important.  Alternatively,  we  could 
have  used,  e.g.,  an  Algol-like  program  represen­
tation.  The  key  items  of  information  needed 

Session No.  11 Theoretical Foundations 

475 

are: 
(1)  The possible  sequences  of statements which 
may be executed by the program and  (2)  the flow 
of data  information given by  inspecting  the 
variables  occurring  in  the  possible  sequence  of 
statements. 

Some auxiliary definitions are needed. 

of H for a 

n 

from R to each variable of the program.  We 
shall  refer  to  the range of  such a  function as 
a value set. 
(1.3)  The  initial value assignments of H are 
the  value  assignments which  represent  valid 
initial  assignments  of  values  to  the  variables 
of 11. 
(1.4)  The execution sequence 
given  initial  value  assignment  I  is  the  sequence 
S1S2...S  of statements  executed when H  is 
executed  with  its  variables  initialized  to  the 
values  specified by  the  initial value  assign­
ment. 
may be infinite. 
(1.5)  The result assignment Q. oi H for a given 
initial  value  assignment  1  is  the value assign­
ment  resulting  from execution of  the  program 
with  variables  initialized  to  the  values  in  I. 
Q  is  undefined  if H does  not  terminate  for  I. 
We assume that the functions and predicates are 
properly defined so as  to always give a value, 
so  that Q  is always defined  if H does  terminate 
for  L. 

If H does  not  terminate  for  1  then 

I I I.  Approaches  to  Program Equivalence. 

The foregoing definitions give us  two 

views of a program H as a function:  (1) As a 
function  from  initial  value  assignments  to 
result assignments,  H (I)=Q  (if 11 terminates 
on  I)  and  (2)  as a  function  from initial value 
assignments to execution sequences 11 (])-
Both views in fact may be used as a basis  for 
definitions  of program equivalence,  as  follows: 
(1)  Functional equivalence.  If H and H1  are 
programs  then H = H'  (H is  functionally equiva­
lent  to H') iff II and H' have  the  same  variable 
sets and  the same  initial value assignments, 
and  for  every  initial  value  assignment  I,  either 

both  Hf(I)  and  H'f(l)  are  undefined  (do not 
terminate) or if Hf(I) = Q and H' (I)=QI , then 
Q =Q'  (similar  to  the "strong equivalence" of 
Luckham,  Park,  and Paterson (1)). 
(2)  Structural equivalence.  If  H and H1  are 
programs then H = H'  (H is structurally equiva­
lent  to H')  iff H and H' have  the  same variable 
sets and  initial  value assignments,  and  for 
every  initial  value  assignment  1,  II  (1)  -  II'  (1), 
(i.e.  each program executes exactly the same 
sequence  of  statements  given  input  values  I),  and 
at  each branch node  the branch  statement  returns 
the  same value  in  each program  (similar  to  the 
"strict  equivalence"  of  Orgass  (3)).  Structural 
equivalence  does  not  in  fact  imply  that  the 
graphs  for H and H' are  isomorphic.  However,  it 
is  clearly a very narrow view of  equivalence, 
requiring that each program execute  the same 
sequence of statements and branches  for each 
input  assignment.  Functional  equivalence,  on 
the  other hand,  is  perhaps  the  broadest  defini­
tion  of  equivalence,  requiring  only  that  each 
program produce  the same output  (or be undefined) 
for  each  input assignment.  The  following  result 
follows  immediately: 

Theorem 1.  If H = H'  then H -  ll'. 

It  is  fairly  clear  that  any  general  scheme 
for  proving  functional  equivalence  immediately 
runs  into  basic  undecidability  results  (see 
Luckham,  Park,  and  Paterson  (1))  due  to  the  fact 
that programs may not  terminate  for  some  inputs. 
For  the  study  of  practical  programs  however,  it 
is  of  interest  to  press  past  this  roadblock  and 
ask:  Suppose wc assume termination, can we 
prove  equivalence?  This  seems not  unreasonable 
since for actual programs we can often use 
specialized  arguments  to  show  that  particular 
programs  terminate  for  the  initial  value  assign­
ments of interest.  Thus we now assume  that  the 
initial value assignments for each program 11 are 
restricted to those ior which 11 terminates. 

Is  functional  equivalence  decidablc  given 
If  the  set  R  of  possible  initial 

termination? 
values  for  variables  is  infinite,  then  it  is  not 
clear.  Suppose  that  R  is  finite?  Then  immedi­
ately  the  brute  force  algorithm will  suffice 
theoretically:  execute each program on each 
possible  initial  value  assignment;  the  programs 
are  equivalent  iff  they  have  the  same  result  in 
each  case.  But  is  such a brute  force approach 
ever  practical?  (Clearly  actual  programs  always 
have  only  a  finite  range  oi  values  possible  for 
each  variable.)  Unfortunately  very  seldom,  ior 
although  theoretically  the  set  oi  input  value 
sets may  be  finite,  it  is  ordinarily  so  large  as 
to preclude exhaustive testing. We are unlikely 
to  find  testing  equivalence  by  looking  at  the 
outputs  of  the programs  for given  inputs  a 
practical  possibility  even when  theoretically 
feasible.  We may fall back on the standard 
debugging  tool  -  try  a  small  set  of  test  cases  -

476 

Session No.  11 Theoretical  Foundations 

to  gain  some  partial  evidence  for  equivalence, 
but  no  proof. 

What  other  possibilities  besides  this  "black 
box"  approach  of  matching  inputs  and  outputs  is 
feasible?  Clearly,  some  analysis  of  program  in­
ternal  structure  is  indicated.  At  the  extreme, 
isomorphism  of  programs  is  a  clearly  decidable 
but  uninterestingly  narrow  definition  of  equiva­
lence.  On  the  other  end  of  the  scale,  we  might 
go  into  the  properties  of  the  functions  and  pre­
dicates  in  each  program,  requiring  a  set  of 
axioms  which  allow  proving  certain  functions  or 
sequences  of  statements  to  be  equivalent.  Figure 
1  is  such  a  case  in  point.  The  program  in  1(a) 
computes  SUM:=((((0+l)+2)+3)+4)+5  while  that  of 
1(b)  computes  SUM:=((((Of5)+4)+3)+2)+l.  We  can 
only  prove  they  are  equivalent  if  we  know  that 
"+"  is  commutative  and  associative. 

Two  Functionally  Equivalent  Programs. 

Proving  equivalence  in  cases  where  detailed  know­
ledge  is  needed  of  the  functions  and  predicates 
requires  a  substantial  theorem-proving  apparatus. 
Are  there  any  reasonable  definitions  of  pro­
gram  equivalence  which  are  fairly  broad  yet  re­
quire  only  the  sort  of  information  found  in  the 
abstract  programs  of  the  preceding  section,  name­
ly  information  about  flow  of  control  and  data, 
but  no  detailed  information  about  the  functions 
In  the  next  section, 
and  predicates  involved? 
we  propose  one  such  definition  and  then  argue 
that  not  only  is  it  decidable  theoretically  but 
in  many  cases  practically. 

IV.  Program  Kernels  and  Kernel  Equivalence 

The  proposed  approach  to  equivalence  may  be 

briefly  outlined: 
(1)  Assume  that  only  certain  variables  contain 
significant  "output  values"  on  termination.  Call 
these  the  kernel  output  variables. 
(2)  By  backtracing  control  paths  through  the 
program  from  exit  nodes, 
identify  and  tag  (as 
kernel  statements)  a ll  program  statements  which 
participate  in  the  computation  of  the  iinal 
values  oi  the  kernel  output  variables.  At  the 
same  time  identify  the  kernel  input  variables, 
those  variables  which  are  used  as  arguments  in 
some  kernel  statement  but  have  no  prior  assign­
ment  made  to  them. 
(3)  By  a  similar  backtracing  from  branch  nodes, 
identify  and  tag  (as  control  statements)  a ll 
branch  statements  and  a ll  statements  which  parti­
cipate  in  the  computation  of  the  arguments  to 
branch  statements.  At  the  same  time  identify 
control  input  variables, 
those  variables  which 
are  used  as  arguments  in  some  control  statement 
but  have  no  prior  assignment  made  to  them. 

It  should  be  clear  that  given  complete  in­
formation  about  flow  of  control  and  data  in  a 
program, 
the  sets  of  kernel  statements,  kernel 
input  variables,  kernel  output  variables,  control 
statements  and  control  input  variables  may  be 
readily  determined  (algorithms  are  given  below 
for  the  model  of  the  preceding  section.)  Note 
that  neither  the  sets  of  statements  nor  the  sets 
of  variables  need  be  disjoint. 

Two  programs  are  said  to  be  kernel  equivalent 

i ff  (a)  they  have  the  same  kernel  input,  kernel 
output  and  control  input  variables  sets  and  the 
same  set  of  kernel  statements,  and  (b)  for  each 
i n i t i al  value  assignment  1  to  kernel  and  control 
variables  they  execute  the  same  sequence  of  ker­
nel  statements  (the  kernel  execution  sequence 
for  1). 

We  shall  show  that  kernel  equivalence  implies 

the  kernel  execution 

functional  equivalence  relative  to  the  kernel 
output  variables.  Moreover, 
sequence  for  a  given  i n i t i al  value  assignment  is 
dependent  only  on  the  values  assigned  to  the  con­
trol  variables.  Thus  to  determine  kernel  equiva­
lence  of  two  programs  we  need  only  try  as  test 
cases  each  possible  assignment  of  i n i t i al  values 
to  the  control  variables  and  compare  the  kernel 

Session No.  11 Theoretical  Foundations 

477 

In 

execution sequences  in each case.  Finally we 
shall argue  that  this  technique has a certain 
practical  interest,  for  ordinarily  control  input 
variables  in actual programs have only a  small 
range of values,  and  there are  relatively  few 
control  input  variables  at  that. 
It  is  the  ker­
nel  input  variables which will  contain  the  real 
data which the program manipulates,  and thus 
which will have a  large  range of possible values. 
We may expect often to find only a small number 
of  possible  initial  assignments  to  control  input 
variables,  thus  indicating only a small number of 
test cases  to be  tried  to determine kernel  equi­
valence which  then  in  turn  implies  functional 
equivalence  for  the  variables  of  interest.  Kernel 
equivalence  also has  some  implications  for prov­
ing  correctness  of programs  (see  the conclusion). 
We will now show the rigorous development of 
these  concepts  in  the model of the preceding sec­
tion : 
Kernel Output Variables.  We may assume that the 
set  of  kernel  output  variables  (the  variables 
whose  linal  values  are  of  interest)  is  given. 
Alternatively, we may identify such a set by 
tracing iorward  from nodes containing assignment 
statements. 
It  the  assignment  statement  has  the 
form U:=F(V,,...,V  )  and  there  is a path  from the 

If  the 

node to an exit node which contains no statement 
in which U is an argument,  then U is a kernel out 
put variable  (since U is assigned a value which 
in  some  cases  is  never  later  used). 
Kerne1 Statements and Kernel Input Variables. 
First  tag as a kernel statement each statement  in 
the step above which computes a kernel output. 
Now begin  to  iterate:  Pick an argument variable 
V  in  some kernel statement U:=F(...,V,...).  Trace 
back along each path trom the node containing 
that kernel statement until an assignment node 
containing the assignment V :=  . ..  is reached. 'Jag 
that  statement  as  a  kernel  statement. 
entry node  is reached and no such assignment has 
been  found,  then V is a kernel input variable. 
Repeat  the  process  until  all  argument  variables 
in all  kernel  statements have been  tested. 
Control Statements and Control  Input Variables. 
First  tag as  control  statements  all branch  state­
ments  contained  in branch nodes.  Now  iterate 
exactly as  for kernel  statements:  Pick an argu­
ment variable  in a control  statement and  trace 
back along each path to a statement which assigns 
a value  to  that variable and  tag  that  statement 
If  the  entry  node  is 
as  a  control  statement. 
reached  then  the variable  is  a  control  input 
variable.  Clearly  all  these  procedures  terminate 
in a  finite number of  steps. 
Ke mel Execution Sequence.  Given an initial 
value  assignment  I  for  the  variables  of a program 
H,  the kernel execution sequence Ki of H for 1  is 
the ordinary execution  sequence &T with  all  but 
kernel statements deleted. 
Kernel Equivalence.  Two programs H and H' arc 
kernel equivalent,  H = H,  i ff 

I 

f 

(1)  H and ll1 have identical sets of kernel state­
ments,  kernel  input variables,  kernel  output 
variables and control  input variables,  and 
(2)  for every initial value assignment  1,  H and 
H1 have the same kernel execution sequence. 
Kernel Equivalence  Implies Functional Equivalence, 
The  following theorem follows easily: 
Theorem 2.  If H and H' are programs and H = H1, 
then H = H' considered as a function only from 
the  control  and kernel  input variables  to  the 
kernel  output variables. 
Proof Outline:  Since  the  control  statements  are 
the  only  statements which  participate  in  deter­
mining the execution sequence  followed  for a 
particular  initial  value  assignment,  the  initial 
values  for  the  control  input variables  uniquely 
determine a kernel execution sequence.  H = H' 
implies,  for a given  initial value  assignment  1, 
that K  = S,S„  . ..  S  =  K'  But these kernel 

k 

1 12 

n 

I 

statements S,  . ..  S  arc the only statements 

In 

n 

k 

which participate  in determining  the values  of 
the kernel outputs,  and the  initial values of 
the  kernel  input variables  completely determine 
the  results  of executing  the  statement  sequence 
S.  . ..  S  .  Thus for the same initial values of 
1 
kernel and control input variables,  H - H' 
implies that execution of H and H1 will produce 
the  same  result values  in the kernel output 
variables.  H = H' also implies that H terminates 
on a given  initial value  set  I  iff 11'  terminates 
on 1 also. // 
Now the  following result  justifies  the use of a 
set  of  test  cases  for deciding  kernel  equivalence, 
Theorem 3.  If H and H1 are programs with identi­
cal  sets  of kernel  statements and  control  input, 
kernel  input and kernel output variables,  then 
H - H*  iff II and H1 have identical kernel execu­
tion  sequences  for each  initial value  assignment 
to  the  control  input  variables. 
Proof Outline:  The  control  statements are  the 
only  statements which affect  the path  taken 
through the program graph during execution. A 
given  initial  value assignment  to  the  control 
input variables determines a unique execution 
sequence and thus a unique kernel execution 
sequence.  Therefore,  if  I  and  I.,  are  two 
distinct  initial  value  assignments  with  identi­
cal assignments  to  the  control variables  then 
K  =  K  regardless of  the values assigned  the 
lo 
other variables.// 
by the preceding theorem if we  restrict  the 
possible  initial  values  oi  the  control  input 
variables  to be  finite  sets,  then kernel  equiva­
lence  is decidable by simply  trying  each possible 
combination of  initial  value assignments and 
looking at  the kernel execution  sequences which 
result;  The  set of possible value assignments 
to kernel  input variables may be  Infinite or 

o 

1 

H 

ll 

' 

478 

Session No.  11 Theoretical Foundations 

very  large  without  increasing  the  number  of  test 
cases  to  be  tried. 
Example  1. 

Consider  the  three  programs  of  Figure  2. 

Each  has  a  single  kernel  output  variable,  OUTPUT, 
a  single  kernel  input  variable,  INPUT,  no  control 
input  variables,  and  kernel  statements: 

X  . 
:= 
OUTPUT  , 
:= 
SUM : 
■= 
SUM : 
: = 

Read(INPUT) 
Print(SUM) 
0 
SUM+X 

In  Figure  2,  nodes  containing  kernel  statements 
are  tagged  with  a  "K11  and  those  containing  con­
trol  statements  with  a  "C". 

Are  the  programs  kernel  equivalent?  By 

Theorem  3,  we  need  only  look  at  the  kernel  execu­
tion  sequence  for  each  possible  i n i t i al  assign­
ment  of  values  to  the  control  input  variables. 
there  is  only  one  execu­
Since  that  set  is  empty, 
tion  sequence,  and  thus  only  one  kernel  execution 
sequence  for  each  program.  Figure  3  shows  the 
execution  sequence  for  each  program,  with  non-
kernel  statements  in  parentheses.  Since  the  ker­
nel  execution  sequences  for  each  program  are 
identical, 
Thus  by  Theorem  2  they  are  also  functionally 
equivalent  with  respect  to  the  input  variable 
INPUT  and  the  output  variable  OUTPUT.  The  impor­
tant  point  of  this  proof  is  that  we  have  used 
only  the  simplest  arguments  to  prove  functional 
equivalence  of  three  structurally  quite  dissimi­
lar  programs. 

the  programs  are  kernel  equivalent. 

Session No.  11 Theoretical Foundations 

479 

0 
0) 
I + 1) 
Read(INPUT 
SUM + X 
4?) 
1 + 1) 
Read(INPUT) 
SUM + X 
4?) 
1 + 1) 
Read(INPUT) 
SUM+  X 
4?) 
I + 1) 
Read(INPUT) 
SUM + X 
4?) 
Print(SUM) 

:= 
:= 
:= 
:= 
:= 
> 
:= 
:= 
:= 

SUM 
(I 
(I 
X 
SUM 
(I 
(1 
X 
SUM 
(1 
:= 
(I 
X 
:= 
SUM 
:= 
4. 
(I 
:= 
(1 
X 
:= 
SUM 
:= 
4 
(I 
OUTPUT 
• 
3 (a) 

SUM 
X 
SUM 
X 
SUM 
X 
SUM 
X 
SUM 
OUTPUT 

= 0 

Read(INPUT) 
SUM + X 
Read(INPUT) 
SUM + X 
Read (INPUT) 
SUM + X 
Read(INPUT) 
SUM + X 
Print(SUM) 

3 (b) 

(K : 
:= 
SUM : 
:= 
X : 
,= 
SUM 
:= 
(K 
= 
(K : 
:= := 
X . 
SUM . 
:= 
= 
(K 
(K 
:= 
X 
:= 
SUM 
:= 
:= 
(K 
(K 
:= 
X 
:= 
SUM 
:= 
(K 
= 
OUTPUT 

4) 
0 
Read(INPUT) 
SUM + X 
1?) 
K - 1) 
Read(INPUT) 
SUM + X 
1?) 
K - 1) 
Read(INPUT) 
SUM + X 
1?) 
K - 1) 
Read(INPUT) 
SUM -I- X 
1?) 
Print(SUM) 

3 (c) 

Figure 3. 

Execution Sequences  for Programs 
of  Figure  2  with  Non-kernel  State 
ments  in Parentheses. 

Example 2. 

In  Figure 4  two  programs  are  given. 

It  is 
readily verified  that  each has  a  single kernel 
output variable,  OUTPUT,  a single kernel  input 

variable, 
able  MODE,  and  the  kernel  statements: 

the  single  control  input  vari 

INPUT, 

X : 
=: 
OUTPUT  : 
:= 
RES . 
:= 
RES 
:= 
RES 
:= 
RES . 
:= 

Read(INPUT) 
Print(RES) 
RKS+X 
RES*X 
0 
1 

If we assume  the range of values  for MODE to be 
the set  {'ADD','MULT'),  then we have two possible 
initial  assignments  of a value  to  the  control 
variable MODE.  Looking at  the kernel  execution 
sequences  of each  program  for each  assignment  to 
MODE,  it  is  readily  verified  that  they  are  identi(cid:173)
cal  in both cases.  Thus  the programs are  kernel 
equivalent  and  also  functionally  equivalent  with 
respect to the  input variables  INPUT and MODE and 
the output variable OUTPUT. 
Keme ls and Proving Correctness of Programs. 
Studies  of program equivalence  are  closely  relat(cid:173)
ed  to studies of program correctness.  How does 
the  concept  of kernel  equivalence  aid  in proving 
a program correct?  We may readily observe the 
similarity between  the  "test  case" approach  to 
proving kernel equivalence and  the  "case analy(cid:173)
sis" approach  to proving  correctness  discussed 
by London  in his  survey  of  techniques  for proving 
correctness  (4). 
If we  look at  the  kernel  execu(cid:173)
tion  sequence  for  each  case  of  initial  value 
assignments  to  the  control  input variables  in a 
program,  then we might reasonably argue that  the 
program  is  "correct"  if  it  has  the  "correct" 
kernel  execution sequence  in each  case.  Since 
each kernel execution sequence  is a simple  linear 
sequence  of  statements,  it  appears  likely  that 
one could more readily prove  the "correctness" 
of such a statement sequence  than the "correct(cid:173)
ness" of the original program taken as a whole, 
and  that  thus  this  technique  of  proving  correct(cid:173)
ness by "case analysis" would often be useful 
(and might quite conceivably be mechanized).  As 
a useful debugging  tool also,  one might envision 
a "kernel analysis system" which,  given a program 
and  a  list  of  its  control  input  variables with 
their  ranges,  would  simply  list  the  kernel  execu(cid:173)
tion  sequence  for  each  combination oi  input 
assignments  to  the  control  variables. 
of  the  kernel  execution  sequences  should often 
suffice  to  show  the  "correctness" of  the  program 
control  structure,  and  thus  the  correctness of 
the program as a whole  if one were convinced 
that  the kernel  execution  sequences were  correct. 

Inspection 

Conclusion 

Kernel  equivalence  is a  rather elementary 

yet  not uninteresting  form of program equivalence. 
Because  determination of kernel  equivalence  re(cid:173)
quires  only a  superficial  analysis  of  flow of 
control  and data  in a program,  it lias  some  poten(cid:173)
tial  practical  value  for  application  to  actual 
programs. 

The  analysis  of programs  in  terms  of  "kernel" 

versus "control" statements and variables which 
is used here in an elementary way seems a 

480 

Session No.  11 Theoretical Foundations 

powerful  tool  for  studying  programs. 

Clearly  there  arc  many  other  aspects  of 
programs  which  are  also  primarily  concerned 
with  control,  such  as  subprograms,  argument 
transmission,  iteration  statements,  and  block 
structure,  which  often  may  be  radically  different 
between  two  programs  which  make  the  same  "kernel" 
computation.  An  extension  of  kernel  equivalence 
to  encompass  these  other  structures  seems  feasi(cid:173)
ble  without  greatly  increasing  the  depth  of  pro(cid:173)
gram  analysis  needed. 

REFERENCES 

Luckham,  D.  C.,  Park,  M.  R.  and  Patcrson, 
M.  S.  "On  formalized  computer  programs," 
Jour.  Comp.  and  System  Sciences,  4,3,  June 
1970. 
Kaplan,  D.  M.  "Regular  expressions  and 
the  equivalence  of  programs,"  Jour.  Comp. 
and  System  Sciences,  3,4,  Nov.  1969. 
Orgass,  R.  J.  "Some  results  concerning 
proofs  of  statements  about  programs," 
Jour.  Comp.  and  System  Sciences  4,1,  Feb. 
1970. 
London,  R.  L.,  "Computer  programs  can  be 
proved  correct,"  in  Hanerji  and  Mesarovic 
(eds)  Theoretical  Approaches  to  Non-numeri 
cal  Prob.  Solving,  Springer-Vcrlag,  1970. 

