Bidding Languages and Winner Determination for

Mixed Multi-unit Combinatorial Auctions

Jes ´us Cerquides

Ulle Endriss

Andrea Giovannucci

University of Barcelona

University of Amsterdam

Juan A. Rodr´ıguez-Aguilar

Spain

The Netherlands

IIIA-CSIC, Spain

Abstract

We introduce a new type of combinatorial auction
that allows agents to bid for goods to buy, for goods
to sell, and for transformations of goods. One such
transformation can be seen as a step in a production
process, so solving the auction requires choosing
the sequence in which the accepted bids should be
implemented. We introduce a bidding language for
this type of auction and analyse the corresponding
winner determination problem.

1 Introduction
A combinatorial auction is an auction where bidders can buy
(or sell) entire bundles of goods in a single transaction. Al-
though computationally very complex, selling items in bun-
dles has the great advantage of eliminating the risk for a bid-
der of not being able to obtain complementary items at a rea-
sonable price in a follow-up auction (think of a combinatorial
auction for a pair of shoes, as opposed to two consecutive
single-item auctions for each of the individual shoes). The
study of the mathematical, game-theoretical and algorithmic
properties of combinatorial auctions has recently become a
popular research topic in AI. This is due not only to their rel-
evance to important application areas such as electronic com-
merce or supply chain management, but also to the range of
deep research questions raised by this auction model. This pa-
per introduces a generalisation of the standard model of com-
binatorial auctions and discusses the issues of bidding and
winner determination.

Winner determination is the problem, faced by the auction-
eer, of choosing which goods to award to which bidder so as
to maximise its revenue. Bidding is the process of transmit-
ting one’s valuation function over the set of goods on offer to
the auctioneer. In principle, it does not matter how the valua-
tion function is being encoded, as long as sender (bidder) and
receiver (auctioneer) agree on the semantics of what is be-
ing transmitted, i.e. as long as the auctioneer can understand
the message(s) sent by the bidder. In practice, however, the
choice of bidding language is of central importance. Early
work on combinatorial auctions has typically ignored the is-
sue of bidding languages. The standard assumption used to be
that if a particular bidder submits several atomic bids (a bun-
dle together with a proposed price), then the auctioneer may

accept any set of bids from that bidder for which the bundles
do not overlap, and charge the sum of the speciﬁed prices.
This is now sometimes called the OR-language. But other in-
terpretations of a set of atomic bids are possible. For instance,
we may take it to mean that the auctioneer may accept at most
one bid per bidder; this is now known as the XOR-language.
Nisan’s survey article [2006], the reference work in the
ﬁeld of bidding languages, covers languages for direct single-
unit combinatorial auctions. That is, the auctioneer is selling
(rather than buying) goods, and all goods are distinguishable.
Our ﬁrst aim in this paper is to generalise this to multi-unit
combinatorial auctions. As a second generalisation, we show
how to integrate direct and reverse auctions, i.e. the auction-
eer will be able to both sell and buy goods within a single
auction. As a third and ﬁnal generalisation, we are going to
show how to integrate the idea of transformability relation-
ships between goods into our auction model [Giovannucci
et al., 2005]. For instance, if the auctioneer is interested in
obtaining cars, but is also able to transform various compo-
nents into a working car (at a certain cost), then it may so-
licit bids offering both ready-made cars and individual com-
ponents. We further extend the idea of these transformability
relationships by allowing agents to also bid for transforma-
tion services, i.e. an agent may submit a bid offering to trans-
form a certain set of goods into another set of goods. We call
the resulting auction model mixed multi-unit combinatorial
auctions (MMUCA). These are not to be confused with dou-
ble auctions [Wurman et al., 1998]. In particular, the order
in which agents consume and produce goods is of central im-
portance in our model and affects the deﬁnition of the winner
determination problem.

The paper is organised as follows. In Section 2 we deﬁne
the notions of transformation and valuation over (multisets
of) transformations, and we deﬁne an expressive bidding lan-
guage to represent such valuations. Section 3 discusses the
winner determination problem for MMUCAs, including its
computational complexity. Finally, Section 4 concludes with
a discussion of related work and an outlook on future work.

2 Bidding Languages
In this section, we ﬁrst deﬁne the notions of transformation
and valuation over transformations, and then deﬁne a bidding
language that can be used to transmit an agent’s valuation
(which may or may not be their true valuation) to the auction-

IJCAI-07

1221

eer. We also formally deﬁne the semantics of the language
and introduce a number of additional language constructs that
allow for the concise encoding of typical features of valua-
tion functions. Finally, we discuss the expressive power of
the language.

That is, a valuation is normalised iff exchanging a multiset of
items for an identical multiset does not incur any costs (this
includes the special case of I = O = { }, i.e. the case of not
exchanging anything at all). The next deﬁnitions refer to our
subsumption relation (cid:3) (cf. Deﬁnition 1).

2.1 Transformations

Let G be the ﬁnite set of all the types of goods under con-
sideration. A transformation is a pair of multisets over G:
(I, O) ∈ NG × NG
. An agent offering the transformation
(I, O) declares that it can deliver O after having received I.
In our setting, bidders can offer any number of such transfor-
mations, including several copies of the same transformation.
That is, agents will be negotiating over multisets of transfor-
mations D ∈ N

For example, {({ }, {a}), ({b}, {c})} means that the agent
in question is able to deliver a (no input required) and that it
is able to deliver c if provided with b. Note that this is not the
same as {({b}, {a, c})}. In the former case, if another agent
is able to produce b if provided with a, we can get c from
nothing; in the latter case this would not work.

(NG×NG)

.

and O ⊇ O(cid:2)

, O(cid:2)) iff I ⊆ I(cid:2)

We deﬁne a subsumption relation (cid:3) over transformations
as follows: (I, O) (cid:3) (I(cid:2)
. In-
tuitively, this means that the second transformation is at least
as good as the ﬁrst (for the bidder), because you receive more
and have to give away less. The following deﬁnition extends
this subsumption relation to multisets of transformations. It
applies to multisets of the same cardinality, where for each
transformation in the ﬁrst set there exists a (distinct) transfor-
mation in the second set subsuming the former.
Deﬁnition 1 (Subsumption) Let D, D(cid:2) ∈ N
say that D is subsumed by D(cid:2)
(i) D and D(cid:2)
(ii) There exists a surjective mapping f : D → D(cid:2)

have the same cardinality: |D| = |D(cid:2)|.

(D (cid:3) D(cid:2)

such that,

(NG×NG)

. We

) iff:

for all transformations t ∈ D, we have t (cid:3) f (t).

For instance (using a simpliﬁed notation for the innermost
sets), we have {(a, bb), (cc, dd)} (cid:3) {(cc, d), (aaa, b)}.

2.2 Valuations

(N

G×N

In an MMUCA, agents negotiate over bundles of transforma-
G) → R is a (typi-
tions. Hence, a valuation v : N
cally partial) mapping from multisets of transformations to
the real numbers. Intuitively, v(D) = p means that the agent
equipped with valuation v is willing to make a payment of
p in return for being allocated all the transformations in D
(in case p is a negative number, this means that the agent
will accept the deal if it receives an amount of |p|). For in-
stance, v({({oven, dough}, {oven, cake})}) = −20 means
that I can produce a cake for 20 rupees if given an oven and
some dough, and that I will return the oven again afterwards
We write v(D) = ⊥ to express that v is undeﬁned over the
multiset D. Again intuitively, this means the agent would be
unable to accept the corresponding deal. Valuation functions
can often be assumed to be both normalised and monotonic:

Deﬁnition 2 (Normalised valuation) A valuation v is nor-
malised iff v(D) = 0 whenever I = O for all (I, O) ∈ D.

.

Deﬁnition 3 (Monotonic valuation) A valuation v is mono-
tonic iff v(D) ≤ v(D(cid:2)) whenever D (cid:3) D(cid:2)
That is, an agent with a monotonic valuation does not mind
taking on more goods and giving fewer away. Any given val-
uation function can be turned into a monotonic valuation:1
Deﬁnition 4 (Monotonic closure) The monotonic closure ˆv
of a valuation v is deﬁned as ˆv(D) = max{v(D(cid:2)) | D(cid:2) (cid:3) D}.
Observe that there could be inﬁnitely many bundles an agent
may want to assign a (deﬁned) value to. As we shall see in
Section 2.6, our bidding languages can only express valua-
tions that are ﬁnitely-peaked (or that are the monotonic clo-
sure of a ﬁnitely-peaked valuation):

Deﬁnition 5 (Finitely-peaked val.) A valuation v is ﬁnitely-
peaked iff v is only deﬁned over ﬁnite multisets of pairs of
ﬁnite multisets and {D ∈ N

(NG×NG) | v(D) (cid:9)= ⊥} is ﬁnite.

2.3 Atomic Bids
An atomic bid BID({(I1
, On)}, p) speciﬁes a
ﬁnite multiset of ﬁnite transformations and a price. To make
the semantics of such an atomic bid precise, we need to de-
cide whether or not we want to make a free disposal assump-
tion. We can distinguish two types of free disposal:

, O1), . . . , (I n

• Free disposal at the bidder’s side means that a bidder
would always be prepared to accept more goods and give
fewer goods away, without requiring a change in pay-
ment. This affects the deﬁnition of the valuation func-
tions used by bidders.

• Free disposal at the auctioneer’s side means that the auc-
tioneer can freely dispose of additional goods, i.e. accept
more and give away fewer of them. This affects the def-
inition of what constitutes a valid solution to the winner
determination problem (see Section 3).

Under the assumption of free disposal at the bidder’s side, the
bid Bid = BID(D, p) deﬁnes the following valuation:

(cid:2)

vBid(D(cid:2)) =

if D (cid:3) D(cid:2)
p
⊥ otherwise

To obtain the valuation function deﬁned by the same bid with-
out the free disposal assumption, simply replace (cid:3) in the
above deﬁnition by equality.

2.4 Combinations of Bids
A suitable bidding language should allow a bidder to encode
choices between alternative bids and the like. To this end,
several operators for combining bids have been introduced in
the literature [Nisan, 2006], which we are going to adapt to
our purposes here. Informally, an OR-combination of several

1Here and throughout this paper, we assume that any occurrences
of ⊥ are being removed from a set before computing its maximum
element, and that the maximum of the empty set is ⊥.

IJCAI-07

1222

bids signiﬁes that the bidder would be happy to accept any
number of the sub-bids speciﬁed, if paid the sum of the as-
sociated prices. An XOR-combination of bids expresses that
the bidder is prepared to accept at most one of them. We also
suggest the use of an IMPLIES-operator to express that ac-
cepting one bid forces the auctioneer to also take the second.
We shall take an AND-combination to mean that the bidder
will only accept the respective sub-bids together.

As it turns out, while all these operators are very useful
for specifying typical valuations in a concise manner, any
complex bid can alternatively be represented by an XOR-
combination of atomic bids. To simplify presentation, rather
than specifying the exact semantics of all of our operators
directly, we are simply going to show how any bid can be
translated into such a normal form. Firstly, any occurrences
of IMPLIES and OR can be eliminated by applying the fol-
lowing rewrite rules:

X IMPLIES Y ; (X AND Y ) XOR Y

X OR Y ; X XOR Y XOR (X AND Y )

Note that for single-unit auctions, OR cannot be translated
into XOR like this (if X and Y overlap, then they cannot be
accepted together; in an MMUCA this depends on the supply
of the auctioneer). Next we show how to distribute AND over
XOR, so as to push AND-operators to the inside of a formula:

(X XOR Y ) AND Z ; (X AND Z) XOR (Y AND Z)

Finally, we need to deﬁne how to turn an AND-combination
of atomic bids into a single atomic bid:

BID(D, p) AND BID(D(cid:2)

, p

(cid:2)) ; BID(D ∪ D(cid:2)

, p + p

(cid:2))

It is not difﬁcult to see that these rewrite rules together allow
us to translate any expression of the bidding language into
an equivalent XOR-combination of atomic bids. We also call
this the XOR-language. To formally deﬁne the semantics of
this language, it sufﬁces to deﬁne the semantics of the XOR-
operator. Suppose we are given n bids Bid i, with i ∈ {1..n}.
Let Bid = Bid 1 XOR · · · XOR Bid n. This bid deﬁnes the
following valuation:

vBid (D) = max{vBid i

(D) | i ∈ {1..n}}

That is, XOR simply selects the atomic bid corresponding to
the valuation giving maximum proﬁt for the auctioneer.

2.5 Representing Quantity Ranges
As we are going to see in the next section, the XOR-language
is expressive enough to describe any (ﬁnitely-peaked) valua-
tion. Nevertheless, it may not be possible to express a given
valuation in a succinct manner. From a practical point of
view, it is therefore useful to introduce additional constructs
that allow us to express typical features more succinctly. Here
we consider the case of quantity ranges: we want to be able
to express that a certain number of copies of the same trans-
formation are acceptable to a bidder.

Let n ∈ N. To express that up to n copies of the same Bid

are acceptable, we use the following notation:

(cid:6)
≤n = (Bid OR · · · OR Bid )

(cid:4)(cid:5)

(cid:3)

Bid

n times

This allows us to express bundling constraints in a concise
manner: the bid ({a, a, a, b}, −10)≤50
expresses that we can
sell up to 50 packages containing three items of type a and
one item of type b each, for 10 rupees a package (for simplic-
ity, we omit O here). We also use the following shorthand:

(cid:4)(cid:5)

(cid:6)

Bid

n = (Bid AND · · · AND Bid )

(cid:3)

n times

Now we can express quantity ranges. Let n1, n2 ∈ N with
0 < n1 < n2. The following expression says that we may
accept between n1 and n2 copies of the same Bid:

Bid

[n1,n2] = Bid

≤(n2−n1)

IMPLIES Bid

n1

These constructs also allow us to express important concepts
such as quantity discounts in a concise manner. For instance,
the bid [(a, 20)≤100
says
that we are prepared to buy up to 50 items of type a for 25
rupees each, and then up to 100 more for 20 rupees each.

IMPLIES (a, 25)50] XOR (a, 25)≤50

2.6 Expressive Power

Next we are going to settle the precise expressive power of
the XOR-language, and thereby of the full bidding language.
We have to distinguish two cases, as we have deﬁned the se-
mantics of the language both with and without free disposal.

Proposition 1 The XOR-language without free disposal can
represent all ﬁnitely-peaked valuations, and only those.

Proof. Let v be any ﬁnitely-peaked valuation. To express v in
the XOR-language, we ﬁrst compose one atomic bid for each
D = {(I1

, On)} with v(D) = p (cid:9)= ⊥:

, O1), . . . , (I n

BID({(I1

, O1), . . . , (I n

, On)}, p)

Joining all these bids together in one large XOR-combination
yields a bid that expresses v. Vice versa, it is clear that
the XOR-language cannot express any valuation that is not
ﬁnitely-peaked.
2

Proposition 2 The XOR-language with free disposal can
represent all valuations that are the monotonic closure of a
ﬁnitely-peaked valuation, and only those.

Proof. The construction of a bid representing any given val-
uation works in analogy to the proof of Proposition 1. Note
that for the semantics with free disposal we precisely obtain
the monotonic closure of the valuation we would get if we
were to drop the free disposal assumption.
2

These results correspond to the expressive power results for
the standard XOR-language for direct single-unit combina-
torial auctions. With free disposal (the standard assump-
tion), the XOR-language can express all monotonic valua-
tions [Nisan, 2006]; and without that assumption it can repre-
sent the complete range of valuations (note that any valuation
is ﬁnitely-peaked if we move from multisets to sets).

3 Winner Determination

In this section, we deﬁne the winner determination problem
(WDP) for MMUCAs. For lack of space we only give the

IJCAI-07

1223

deﬁnition for the case of free disposal (at the side of the auc-
tioneer), but this is easily adapted to the case without free
disposal. We ﬁrst give an informal outline of the deﬁnition,
then a formal deﬁnition, and ﬁnally a formulation using inte-
ger programming, providing a basis for implementation. We
also establish the computational complexity of the WDP and
brieﬂy comment on mechanism design issues.

Informal Deﬁnition

3.1
The input to the WDP consists of a complex bid expression
for each bidder, a multiset Uin of goods the auctioneer holds
to begin with, and a multiset Uout of goods the auctioneer
expects to end up with.

In standard combinatorial auctions, a solution to the WDP
is a set of atomic bids to accept.
In our setting, however,
the order in which the auctioneer “uses” the accepted trans-
formations matters. For instance, if the auctioneer holds a
to begin with, then checking whether accepting the two bids
Bid1 = ({a}, {b}, 10) and Bid2 = ({b}, {c}, 20) is feasi-
ble involves realising that we have to use Bid1 before Bid2.
Thus, a solution to the WDP will be a sequence of transfor-
mations. A valid solution has to meet two conditions:

(1) Bidder constraints: The multiset of transformations in
the sequence has to respect the bids submitted by the
bidders. This is a standard requirement. For instance,
if a bidder submits an XOR-combination of transforma-
tions, at most one of them may be accepted.

(2) Auctioneer constraints: The sequence of transforma-
tions has to be implementable: (a) check that Uin is a su-
perset of the input set of the ﬁrst transformation; (b) then
update the set of goods held by the auctioneer after each
transformation and check that it is a superset of the input
set of the next transformation; (c) ﬁnally check that the
set of items held by the auctioneer in the end is a superset
of Uout. This requirement is speciﬁc to MMUCAs.

An optimal solution is a valid solution that maximises the sum
of prices associated with the atomic bids selected.

3.2 Formal Deﬁnition
For the formal deﬁnition of the WDP, we restrict ourselves
to bids in the XOR-language, which is known to be fully ex-
pressive (over ﬁnitely-peaked valuations). For each bidder i,
let Bidij be the jth atomic bid occurring within the XOR-
bid submitted by i. Recall that each atomic bid consists of a
multiset of transformations and a price: Bidij = (Dij , pij),
where Dij ∈ N
and pij ∈ R. For each Bidij , let tijk
be a unique label for the kth transformation in Dij (for some
arbitrary but ﬁxed ordering of Dij ). Let (Iijk , Oijk) be the
actual transformation labelled by tijk. Finally, let T be the set
of all tijk; that is, |T | is the overall number of transformations
mentioned anywhere in the bids.

(NG×NG)

The auctioneer has to decide which transformations to ac-
cept and in which order to implement them. Thus, an alloca-
tion sequence Σ (which will not necessarily be a valid solu-
tion) is a total ordering of a subset of T . We write tijk ∈ Σ to
say that the kth transformation in the jth atomic bid of bidder
, Om) be the mth
i has been selected. Furthermore, let (Im
transformation in the sequence Σ. That is, we have two ways

of referring to a transformation: by its position in the collec-
tion of bids received (tijk) and by its position in the allocation
sequence (if selected at all).

Given Σ we can obtain the set of goods held by the auc-
tioneer after each transformation. For instance, say that the
auctioneer begins with Uin = {a, a, d, d}. If we apply the
ﬁrst transformation (I1
, O1) = ({a, a}, {c}) (from two units
of a produce one unit of c), the auctioneer ends up with
M1 = {c, d, d}. Formally, we can express this operation
as an equation over multisets:

M1(g) = Uin(g) + O1(g) − I1(g)

The application of the transformation is possible only because
two units of good a are available. This condition maps to:

Uin(g) ≥ I1(g)

Let Mm ∈ NG
be the goods held by the auctioneer after
applying the mth transformation. We can generalise the two
equations above as follows (let M0 = Uin):

Mm(g) = Mm−1(g) + Om(g) − Im(g)
Mm−1(g) ≥ Im(g)

(1)

(2)

We are now ready to deﬁne under what circumstances a se-
quence of transformations constitutes a valid solution:
Deﬁnition 6 (Valid solution) Given a multiset Uin of avail-
able goods and a multiset Uout of required goods, an alloca-
tion sequence Σ for a given set of XOR-bids over transforma-
tions tijk is said to be a valid solution iff:
(1) Σ either contains all or none of the transformations be-
longing to the same atomic bid. That is, the semantics of
the BID-operator is being respected:

tijk ∈ Σ ⇒ tijk(cid:2) ∈ Σ

(2) Σ does not contain two transformations belonging to dif-
ferent atomic bids by the same bidder. That is, the se-
mantics of the XOR-operator is being respected:

tijk, tij (cid:2) k(cid:2) ∈ Σ ⇒ j = j

(cid:2)

(3) Equations (1) and (2) hold for each transformation
, Om) in Σ and each good g ∈ G. This condi-
(Im
tion ensures that all transformations have enough input
goods available.

(4) The set of goods held by the auctioneer after imple-
menting the transformation sequence is a superset of the
goods the auctioneer is expected to end up with:

M|Σ|(g) ≥ Uout(g)

(cid:7)

The revenue for the auctioneer associated with a valid solu-
tion Σ is the sum of the prices associated with the selected
{pij | ∃k : tijk ∈ Σ}. We are now ready to
atomic bids:
deﬁne the WDP for XOR-bids:

Deﬁnition 7 (WDP) Given a set of XOR-bids and multisets
Uin and Uout of initial and ﬁnal goods, respectively, the win-
ner determination problem is the problem of ﬁnding a valid
solution Σ that maximises revenue for the auctioneer.

IJCAI-07

1224

Integer Programming Formulation

3.3
We now show how to map the WDP deﬁned above into inte-
ger programming (IP). Our aim is to ﬁnd a solution sequence
composed of transformations that leads from the initial goods
to the ﬁnal goods. Note that the length of the solution se-
quence can be at most equal to the overall number of of-
fered transformations. Therefore, the issue is to decide for
each transformation whether it is selected for the solution se-
quence, and if so, to choose its position in the solution se-
quence. Thus, we deﬁne a set of binary decision variables
ijk ∈ {0, 1}, where x
m
ijk takes on value 1 if the transfor-
x
mation tijk is selected at the mth position of the solution se-
quence, and 0 otherwise. Here and in what follows, m always
ranges from 1 to the overall number of transformations |T |;
i ranges over all bidders; j ranges for each bidder i from 1
to the number of atomic bids submitted by i; and k ranges
for each atomic bid j of bidder i from 1 to the number of
transformation in that atomic bid.

m

m

We also introduce several sets of auxiliary binary decision
takes on value 1 iff any transition at all is se-
variables: x
lected at the mth position of the solution sequence; xijk takes
on value 1 iff transition tijk is present anywhere in the se-
quence; and xij takes on value 1 iff any of the transformations
in the jth atomic bid of bidder i are selected.

In what follows, we deﬁne the set of constraints that the

solution sequence must fulﬁl:

(1) Since each atomic bid is a bundle of transformations, we
want to ensure that if a transformation in an atomic bid
is selected for the solution, so are the rest of the trans-
formations in that bid (cf. condition (1) of Deﬁnition 6):

xij = xijk (∀ijk)

(3)

(2) We enforce that the atomic bids submitted by each bid-
der are exclusive (XOR). This amounts to satisfying the
following constraints (cf. condition (2) of Deﬁnition 6):

xij ≤ 1 (∀i)

(4)

(3) We enforce that a transformation can be selected at most

for a single position in the solution sequence:

xijk =

m
ijk (∀ijk)
x

(5)

(cid:8)

j

(cid:8)

m

(cid:8)

(4) We also impose that at most one transformation is se-

lected at each position of the sequence:
m
ijk (∀m)
x

m =

x

(6)

ijk

(5) Furthermore, there should be no gaps in the sequence:

m ≥ x
x

m+1 (∀m)

(7)

(6) Next, we capture condition (3) of Deﬁnition 6. Firstly,
the multiset of goods held by the auctioneer after per-
forming m steps of the transformation sequence can be
computed recursively, by equation (1), as follows:

Mm(g) = Uin(g) +

(cid:2)
ijk · (Oijk(g) − Iijk(g))
x

m(cid:8)

(cid:8)

(cid:2)=1

ijk

(∀g ∈ G, ∀m)

(8)
That is, we treat each Mm(g) as an integer decision
variable. We can now formulate the constraint enforc-
ing that enough goods must be available at step m to
perform the next transformation (cf. equation (2)):

(cid:8)

Mm−1(g) ≥

m
ijk · Iijk(g)
x

(∀g ∈ G, ∀m)

(9)

ijk

(7) And ﬁnally, after having performed all the selected
transformations, the set of goods held by the auctioneer
must be a superset of the ﬁnal goods Uout (cf. condi-
tion (4) of Deﬁnition 6):

M|T |(g) ≥ Uout(g) (∀g ∈ G)

(10)

This works correctly, because M|T |(g) = Mm(g) for
m = 1 (cf. equations (6) and (8)).
the highest m with x

Now solving the WDP for MMUCAs with XOR-bids
amounts to solving the following integer program:

(cid:8)

max

xij · pij

subject to constraints (1)–(7)

ij

Finally, a valid solution according to Deﬁnition 7 is obtained
from the solution of the IP by making transition tijk the mth
element of the solution sequence Σ iff x

ijk = 1.

m

Observe that our proposed implementation can easily be
amended so as to directly encode the constraints imposed by
language constructs other than the XOR-operator. This would
remove the need for translating into the XOR-language ﬁrst
and thereby greatly improve efﬁciency.

3.4 Computational Complexity

The (decision problem underlying the) WDP for standard
combinatorial auctions is known to be NP-complete, with re-
spect to the number of goods [Rothkopf et al., 1998]. NP-
hardness can, for instance, be shown by reduction from the
well-known SET PACKING problem. As our mixed auction
model generalises standard combinatorial auctions, winner
determination remains NP-hard also here. NP-membership
(and thereby NP-completeness) of the problem of checking
whether there exists a solution exceeding a given revenue (for
ﬁnite bids) follows from the fact that a candidate solution pro-
vided by an oracle can always be veriﬁed in polynomial time.
That is, despite of the generalisations we have introduced, the
computational complexity of the WDP does not increase, at
least not with respect to the polynomial hierarchy.

3.5 Mechanism Design
An important issue in auction design concerns their game-
theoretical properties. We note here that the central result
in mechanism design, on the incentive-compatibility of the
Vickrey-Clarke-Groves (VCG) mechanism, carries over from
standard combinatorial auctions to MMUCAs. Recall that the
VCG mechanism allocates goods in the most efﬁcient man-
ner and then determines the price to be paid by each bidder
by subtracting from their offer the difference of the overall
value of the winning bids and the overall value that would

IJCAI-07

1225

have been attainable without that bidder taking part. That is,
this “discount” reﬂects the contribution to the overall produc-
tion of value of the bidder in question. The VCG mechanism
is strategy-proof: submitting their true valuation is a (weakly)
dominant strategy for each bidder. As an inspection of stan-
dard proofs of this result reveals [Mas-Colell et al., 1995],
this does not depend on the internal structure of the agree-
ments that agents make. Hence, it also applies to MMUCAs.

4 Conclusions and Related Work

Our model of mixed multi-unit combinatorial auctions sub-
sumes a range of combinatorial auction models discussed in
the literature (see e.g. [Sandholm et al., 2002]), in particular
single-unit and multi-unit versions of the standard direct and
reverse auctions (simply do not use either I or O). Trans-
formability relationships between goods (at the side of the
auctioneer) as proposed by Giovannucci et al. [2005] can be
modelled by allowing the auctioneer to submit bids represent-
ing those transformations to itself.

We should stress that there are important differences be-
tween our mixed auctions and models known as double
auction [Wurman et al., 1998] or combinatorial exchanges
[Sandholm et al., 2002]. The most important difference is
that these models do not have the concept of a sequence of
exchanges, which is required if the intention is to model some
sort of production process. In the formulation of the WDP for
combinatorial exchanges given by Sandholm et al. [2002], for
instance, accepting “circular” bids such as BID(a, b, 10) and
BID(b, ac, 10), to obtain c for 20 rupees, would be consid-
ered a solution. With our semantics in mind, however, this
solution is not valid: the ﬁrst agent needs to receive a be-
fore it can produce b, but the second agent needs to receive b
before it can produce a and c. Hence, no deal should be pos-
sible. In fact, the MMUCA can be used to simulate combina-
torial exchanges (and double auctions). For instance, the bid
BID(a, b, 10) can be rewritten as BID({(a, { }), ({ }, b)}, 10)
to express that I will only deliver b if I receive a, but that the
order does not matter. Of course, if no true transformations
(imposing an order) are used, then the simpler model of com-
binatorial exchanges is to be preferred.

Walsh and Wellman [2003] and Babaioff and Walsh [2005]
tackle a similar problem to ours, focussing on supply chain
formation. Although both contributions are very signiﬁcant,
they could be extended along three dimensions. Firstly, they
do not allow a provider to submit bids on combinations of
transformations. Secondly, they do not deﬁne a bidding lan-
guage (in fact, their agents submit a bid with a single transfor-
mation each). Finally, the transformation net that deﬁnes the
supply chain has to fulﬁl strict criteria: acyclicity, transfor-
mations can only produce one output good, etc. Both papers
mainly adopt a game-theoretic perspective, and thus do not
address either the WDP or bidding languages in depth.

The ﬁrst systematic study of bidding languages is due to
Nisan [2006] (an early version appeared in 2000). Nisan’s
paper provides an excellent introduction to the topic and has
clariﬁed a number of issues that have previously remained
somewhat fuzzy. For MMUCAs, we have seen that the XOR-
language is fully expressive (over ﬁnitely-peaked valuations).

Future work should also address the expressive power of dif-
ferent fragments of the bidding language and compare the
succinctness of different fragments for certain classes of val-
uations: which languages can express what valuations, and
which languages can do so using less space than others? For
the case of direct single-unit combinatorial auctions, several
such results are given by Nisan [2006], and some of these
results may be relatively easy to transfer to our model.

Another interesting question to consider in future work
would be what exactly the auctioneer should announce when
opening an MMUCA. In the case of direct auctions this is
the set of goods to be sold. If bidding for transformations is
possible, however, it may be difﬁcult to foresee what types of
goods will be relevant to a solution, as this depends on the
transformation capabilities of the bidders in the market. We
also envision as a possible development the application of our
model to supply chain formation. Finally, our work also poses
a computational challenge since the number of variables of
our IP grows quadratically with the number of transforma-
tions mentioned in the bids. Thus, we plan to investigate the
use of special-purpose or local algorithms.

This work has been partially supported by the Spanish Min-
istry of Education and Science (grants 2006-5-0I-099, TIN-
2006-15662-C02-01, and TIP-2003-08763-C02-01).

References
[Babaioff and Walsh, 2005] M. Babaioff and W.E. Walsh.
Incentive-compatible, budget-balanced, yet highly efﬁ-
cient auctions for supply chain formation. Decision Sup-
port Systems, 39:123–149, 2005.

[Giovannucci et al., 2005] A. Giovannucci, J.A. Rodr´ıguez-
Aguilar, and J. Cerquides. Multi-unit combinatorial re-
verse auctions with transformability relationships among
goods. In Proc. WINE-2005. Springer-Verlag, 2005.

[Mas-Colell et al., 1995] A. Mas-Colell, M.D. Whinston,
and J.R. Green. Microeconomic Theory. Oxford Univer-
sity Press, 1995.

[Nisan, 2006] N. Nisan. Bidding languages for combinato-
rial auctions. In P. Cramton et al., editors, Combinatorial
Auctions. MIT Press, 2006.

[Rothkopf et al., 1998] M.H. Rothkopf, A. Peke˘c, and R.M.
Harstad. Computationally manageable combinational auc-
tions. Management Science, 44(8):1131–1147, 1998.

[Sandholm et al., 2002] T.W. Sandholm, S. Suri, A. Gilpin,
and D. Levine. Winner determination in combinatorial
auction generalizations.
In Proc. AAMAS-2002. ACM
Press, 2002.

[Walsh and Wellman, 2003] W.E. Walsh and M.P. Wellman.
Decentralized supply chain formation: A market protocol
and competitive equilibrium analysis. Journal of Artiﬁcial
Intelligence Research, 19:513–567, 2003.

[Wurman et al., 1998] P.R. Wurman, W.E. Walsh, and M.P.
Wellman. Flexible double auctions for electionic com-
merce: Theory and implementation. Decision Support
Systems, 24:17–27, 1998.

IJCAI-07

1226

