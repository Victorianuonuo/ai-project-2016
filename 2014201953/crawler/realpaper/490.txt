Automatic  Abstraction  in  Component-Based  Diagnosis 

Driven  by  System  Observability 

Gianluca  Torta,  Pietro  Torasso 

Dipartimento di Informatica,  Universita di Torino  (Italy) 

e-mail: 

{torta,torasso}@di.unito.it 

Abstract 

The paper addresses the problem of automatic 
abstraction of component variables in the con-
text of Model Based Diagnosis, in order to pro-
duce models capable of deriving fewer and more 
general diagnoses when the current observabil­
ity of the system is reduced.  The  notion of in-
discriminability among faults of a set of compo­
nents is introduced and constitutes the basis for 
a  formal  definition  of  admissible  abstractions 
which preserve all the distinctions that are rel­
evant for diagnosis given the current observabil­
ity  of the  system.  The  automatic  synthesis of 
abstract  models  further  restricts  abstractions 
such  that the behavior of abstract components 
is expressed in terms of a simple and  intuitive 
combination  of the  behavior  of their  subcom­
ponents.  As  a validation  of our  proposal,  we 
present experimental results which show the re­
duction in the number of diagnoses returned by 
a diagnostic agent for a space robotic arm. 

Introduction 

1 
System  model  abstraction  has  been  successfully  ex­
ploited  in  many  approaches  to  model-based  diagnosis 
(MBD).  The  pioneer  work  of  [Mozetic,  1991]  and  re­
cent improvements proposed e.g.  by [Provan, 2001] and 
[Chittaro and Ranon, 2001] mostly use abstraction in or­
der to focus the diagnostic process and thus improve its 
efficiency.  However,  (flexible)  abstraction  has  another 
main benefit, namely to provide fewer and more concise 
abstract diagnoses when it is not possible to discriminate 
among detailed  diagnoses.  The  works by  [Console and 
Theseider Dupre, 1994] and [Friedrich, 1993] accomplish 
this goal by including abstraction axioms in the Domain 
Theory  and  using  preference  criteria based  on  the  ab­
straction level of diagnoses. 

Recently,  some authors have aimed at the same goal 
in  a different  way,  namely automatic abstraction of the 
system model ([Sachenbacher and Struss, 2001], [Torasso 
and  Torta,  2002])  l.  If the  available observables and/or 
1 Previously  an  algorithm  for  automatic  abstraction  of 

their granularity are too coarse to distinguish among two 
or more behavioral modes of a component, or the distinc­
tion is not important for the considered system, a system 
model is automatically generated where such behavioral 
modes are merged into an abstracted behavioral mode. 
By  using the  abstracted  model for  diagnosis there's no 
loss of (important)  information, while the number of re­
turned diagnoses is reduced, and such diagnoses, by be­
ing  "as abstract as possible",  are more understandable 
for a human. 

The  work  presented  in  this  paper  aims  at  extending 
previous  works by introducing automatic  abstraction of 
variables (i.e.  components) in the presence of a reduced 
availability of the  number  and/or granularity of observ­
ables.  Abstractions  based  on  system  observability  are 
particularly  relevant  in  the context  of on-board diagno­
sis. Indeed, it is likely that when a system is operated on­
board the only available measures are provided by sen­
sors (which can themselves fail) and taking further mea­
sures  manually  is  out  of question.  Moreover,  on-board 
diagnosis  is  usually  constrained  by  strict  time  and  re­
sources requirements:  using an abstracted system model 
should yield savings in both the time and  the space re­
quirements of the diagnostic process. 

Our proposal requires that  abstractions do not  cause 
any  loss  of  diagnostic  information  (e.g.  as  in  the  in­
complete  abstractions  discussed  in  [Autio  and  Reiter, 
1998])  or  loss  of efficiency  (e.g.  due  to  increased  fan-
in  as  pointed  out in  [Provan,  2001]);  moreover,  we re­
strict  the  mapping  from  abstract  components  to  their 
subcomponents  to  be  enough  simple  and  intuitive.  In 
order to exclude all the undesired abstractions we intro­
duce a precise definition of admissible abstraction, and 
further restrict the computation of abstractions through 
cutoff criteria which  forbid  admissible abstractions  that 
may lead to computational inefficiencies. 

As a running example to illustrate our definitions and 
algorithms,  we  will  use throughout  the paper  the frag­
ment  of  hydraulic  circuit  adapted  from  [Chittaro  and 
Ranon, 2001] depicted in  figure  1  (a); table  1  reports 
its  domain  theory  (valve  modes  so  and  sc  abbreviate 

components had been proposed in [Out et o/., 1994] for sim­
pler models describing only normal behavior of the system 

394 

DIAGNOSIS 

Figure  1:  A  fragment  of  an  hydraulic  circuit  at.  three 
levels  of  abstraction 

Table  1:  Model  of hydraulic  components 

stuck  open  and  stuck  closed respectively).  Two  possible 
abstractions  of such  system  are  shown  in  figures  1  (b) 
(where  pipe  PI  and  valve  VI  have  been  abstracted  into 
valve  AVI)  and  1  (c)  (where  abstract  valve  AVI  and 
pipe  P2  have  been  abstracted  into  valve  AV2).  As  for 
experimental  validation  of our  techniques,  however,  we 
will  present  results  collected  in  a larger  domain,  namely 
the  model  of  the  SPIDER  space  robotic  arm  used  in 
[Portinalc and  Torasso,  1999]. 

The  paper  is  structured  as  follows. 

In  section  2  we 
give a formal definition of what we consider an admissible 
abstract  component.  In  section  3  we  describe  how  the 
declarative notions  introduced  in  2  can  be implemented 
computationally.  In  section  4  we  present  experimental 
results  collected  in  the  SPIDER  robotic  arm  domain. 
Finally,  in  section  5  we  compare  our  work  to  related 
papers  and  make  some  concluding remarks. 

2  Abstractions  Defined 
We first  report  formal  definitions  of system  model,  diag(cid:173)
nostic  problem  and  diagnosis. 
D e f i n i t i on  2.1  A  System  Description  (SD)  is  a  3-tuple 

where: 

is  the 

(inputs),  COMPS 
(endogenous  variables),  OBS 
finite  domain  of  variable 

V  is  a  set  of  discrete  variables  partitioned  in  the  fol-
(components), 
lowing  sorts:  CXT 
STATES 
(observables); 
DOM(v) 
DT  (Domain  Theory)  is  an  acyclic  set  of Horn  clauses 
defined  over  V  representing  the  behavior  of  the  system 
(under  normal  and  abnormal  conditions);  we 
require 
that,  given  an 
the 
DT  derives  exactly  one  value  for  each  other  variable 
G  (Causal  Graph)  is  a  DAG  whose  nodes  are  in  V  rep-
resenting  the  causal  structure  of  the  system;  whenever  a 
formula 
appears  in 
through  Nk  are  parents  of M  in  the  graph 
DT,  nodes  N\ 

instantiation  of  COMPS  and  CXT, 

It  is  worth  noting  that  the  fact  that  G  is  restricted  to 
be a DAG  does not mean that the system model is a tree 
in  the sense e.g.  of [Darwiche,  1998];  since  we  allow the 
existence  of multiple  directed  paths  between  two  nodes 
the  associated jointree  may  well  be  cyclic.  The  DAG  re(cid:173)
striction just  forbids  feedback  loops  in  the  causal  graph, 
which is a common assumption  in  approaches which deal 
with  dynamic systems only if they  are amenable to state-
based  diagnosis  ([Struss,  1997]). 
E x a m p le  2.1  Note  that  the  System  Description  for the 
running  sample  system  given  in  table  1  is  expressed  in 
a  slightly  different  formalism  than  the  one  described  in 
our  definition,  due  to  the  use  of equations  and  disequa-
tions on  the right-hand side of formulas.  However, it  can 
be  easily  mapped  to  our  formalism  by  modeling  inx  and 
outx  as  discrete  STATES  variables  by  using  qualitative 
deviations  ([Struss  et  o/.,  1996]);  thus,  for  example,  for(cid:173)
mula: 

w h e r e m e a ns  that  variable  v  has  a  value 
with  sign 
and  its  deviation  from  the  nominal  value 
has sign 
In  the  rest  of the  examples  we  continue 
to use the notation of [Chittaro and  Ranon,  2001] simply 
because  it  is  more  compact. 
D e f i n i t i on  2.2  A  diagnostic  problem  is  a  3-tuple  DP  = 
(SD, O B S, C X T)  where  SD  is  the  System  Description, 
O BS  is  an  instantiation  of  OBS  and  C XT  15  an  in(cid:173)
stantiation  of  CXT 
D e f i n i t i on  2.3  Given 
L
L
a 

diagnostic 
instantiation 

of  COMPS 

problem 

an 

di-

is 

a 

a 

As  noted  in  the  introduction,  there  are  real  scenar(cid:173)
ios  where  not  all  the  observables  OBS  are  available 
and/or  their  granularity  is  reduced.  We  identify  the 
available  observables  with  a  set 
we 
also  assume  that  a  granularity  mapping  II  is  given  s.t. 
U(M(vol))  maps  an  instantiation  of  
to  a 
possibly  more  abstract  instantiation  M(aval). 

then 

there  is  no  loss  of  granularity  at  all;  in  this  particu(cid:173)
lar  case  we  denote  II  with  11^.  For  example,  in figure 
in  1  (b), 
{out}; 

(c),  OBSAV  = 

and  in 

1 

as  for  II  we  may  consider  a  situation  where 
a n d h a ve  been  mapped  to  a  coarser  value 

The  important  point  about  

and  II 
is  that  these  reductions  of  the  observability  of  the  sys(cid:173)
tem  can  cause  the  model  to  become  less  discriminant 
2This  definition  of  diagnosis  is  fully  abductive;  how(cid:173)
ever  results  presented  in  this  paper  apply  equally  well  to 
consistency-based diagnosis 

DIAGNOSIS 

395 

and  thus  different  faults  of  the  same  component  and/or 
of different  components  to  become  indiscriminable.  The 
following  definition  introduces  the  notion  of  indiscrim-
inability  among  instantiations  of  subsets  of  COM  PS. 

3: 

iff 

two 

for  any 

We  say 

following  holds 

that 
of  SCOMPS 

the  set  of  available  observables  and 

the 
( O T H E RS  U  SCOMPS1))  = 
( O T H E RS U SCOMPS2)) 

D e f i n i t i on  2.4  Let  SCO MPS  be  a  subset  of COMPS, 
II  a 
OBSAV 
granularity  mapping. 
instan(cid:173)
tiations  S C O M P S l , S C O M P S2 
are 
(OBS^v^n^indiscriminable 
instantiation 
C XT  of  CXT  and  any 
instantiation  O T H E RS  of 
COMPS\SCOMPS 
II  {tclosureobsAV 
U(tclosure0bsAV 
Note  that  t h e - i n d i s c r i m i n a b i l i ty  relation 
induces  a  partition  into 
-indiscriminability 
classes  of the  set  of possible  instantiations  of SCOMPS. 
Also  note  that,  when  
, indiscriminabil(cid:173)
ity  coincides  with  the  indistinguishability  among  behav(cid:173)
ioral  modes  introduced  in  [Torasso  and  Torta,  2002]. 
Example  2.2  In  the  abstraction  example  of  figure  1 
(b),  under  context  and  =  open  indiscriminable  in(cid:173)
stances  of  P\,V\  are  grouped 
the  following  sets: 

in 

set  C\  is  further  split  in  two  distinct  sets: 
{{ok,  ok)}  (which  derives  in, 
(which  derives  in2  =  in).  If in  a specific  diagnostic  prob(cid:173)
lem  we observe,  for  instance,  in2  —  0  given  and =  open, 
the  set  of diagnoses  is  given  by 

For  now, just  note  how  this  notion  of indiscriminabil(cid:173)
If,  in(cid:173)
ity  is  the  basis  for  any  potential  abstraction. 
deed,  two instantiations  S C O M P Sl  and S C O M P S2 of 
SCOMPS 
COM  PS  are  indiscriminable,  this  means 
that  whenever  S C O M P Sl   O T H E RS  is  a  diagnosis 
for  a  given  DP,  S C O M P S2   O T H E RS  is  another, 
indiscriminable,  diagnosis  for  DP. 

We now introduce a weak notion of abstraction  where, 
as it is common in structural abstractions, abstract com(cid:173)
ponents are recursively built  bottom-up starting with the 
primitive  components. 
D e f i n i t i on  2.5  Given  a  set  COMPS  = 
of  component  variables,  a  components  abstraction  map(cid:173)
ping  AM 
= 
of  discrete  variables  ("abstract  compo(cid:173)
{AC\,..., 
ne  or 
nents,)  and  associates  to  e
more 
s.t.  each 
component  in  COMPS  is  the  subcomponent  of  exactly 
one  abstract  component.  Moreover,  AM  associates, 
to 

of  COMPS  defines  a  set  COMPSA 

(subcomponentsof 

a

h

o

c

3Given  an  instantiation  COMPS  of COMPS  wc  denote 
with  telosurtoBSAV (COMPS)  the  set  of  instantiations  of 
variables  in 

derived from 

4There are |C3| = 5 indiscriminable diagnoses;  2 of them, 
namely  (ok, sc)  and  (br,ok),  can  be  regarded  as  preferred 
diagnoses since they involve only one fault 

"" 

a 

formula 

COMPS,  AC 

is  a  simple  abstract  compo(cid:173)

each  abstract  component  AC  a  definition  defAc>  which 
is  a  characterization  of  the  behavioral  modes  of  AC 
in  terms  of  the  behavioral  modes  of  its  subcomponents. 
More  precisely,  an  abstract  component  and  its  definition 
are  built  hierarchically  as  follows: 
-  if  C 
nent  if  its  definition  defAc  associates  to  each  abm 
DOM {AC) 
C{bmk)  s.t. 
ial  case,  AC  has  the  same  domain  as  C  and 
DOM{C) 
: 
-  if  AC, AC" 
joint 
then  AC 
nents  S C O M P S'   SCOMPS" 
to  each  abm 
DOM {AC) 
which 
initions 
defbm»,bm" 

dis(cid:173)
subcomponents  SCOMPS',SCOMPS" 
is  an  abstract  component  with  subcompo(cid:173)
associates 
definition  defabm 
logical  formula  built  by  connecting  def(cid:173)
definitions 

DOM {AC) 
through 

components  with 

if  defAC 
a 

defbm'ibm1 

in  the  triv(cid:173)

DOM {AC") 

abstract 

is  a 

sets 

with 

are 

of 

The  definition  defAc  of  AC  thus  specifies  a  relation 
between  instantiations  of the  subcomponents  of AC  and 
instantiations  (i.e.  behavioral modes)  of AC  itself.  How(cid:173)
ever  we  need  to  put  some  restrictions  on  these  relations 
in  order  to  match  our  intuitions  about  what  is  an  "ad(cid:173)
missible"  abstraction. 
D e f i n i t i on  2.6  Given  a  simple  abstract  component  the 
definitions  associated  to  its  behavioral  modes  are  said 
to  be  admissible. 
For  a  non-simple  abstract  compo(cid:173)
nent  AC  which  is  the  composition  of  abstract  compo(cid:173)
nents  AC,  AC",  an  admissible  definition 
DOM {AC) 

is  defined  as  follows: 

for  abm 

Admissible  definitions  capture  common  abstractions, 
such  as  the  case  where  the  abstract  component  is  OK  if 
all  its  subcomponents  are  OK  (conjunction)  and  faulty 
if  at  least  one  of  its  subcomponents  is  faulty  (canoni(cid:173)
cal  OR).  Moreover, since  we  address  the  case  of compo(cid:173)
nents with multiple behavioral modes,  we extend canon(cid:173)
ical  OR  with  exceptions  (generalized  OR);  clearly,  the 
maximum  number  of exceptions  allowed  in  a generalized 
OR  should  be  a  configurable  parameter  of  the  abstrac(cid:173)
tion  algorithm. 
It  is  worth  noting that  the proposed  operators,  although 
chosen according to the rationale just exposed,  are meant 
by  no  means  to  be  the  only  possible  choice  in  order  to 

5This case has the purpose of including behavioral modes 
abstraction  as described in  [Torasso and Torta,  2002]  in our 
framework: 
are abstracted in the single behav(cid:173)
ioral mode abm 

396 

DIAGNOSIS 

make  our  approach  to  abstraction  applicable;  if  more 
operators or a different  set  of operators would  fit  better 
particular systems or families of systems,  new  operators 
could simply be plugged-in and replace the ones we have 
defined. 
Example  2.3  In  the  abstraction  example  of  figure  1 
(b),  the  behavioral  modes  of  the  abstract  component 
AVI  can  be  expressed  as  admissible  definitions  over 
primitive  components  P I, V I: 

Armed  with  the  admissible  definitions for  behavioral 
modes we can now formally identify the abstraction map(cid:173)
pings we are interested in. 
Definition  2.7  Given  a  system  model  SD,  a  compo(cid:173)
nents  abstraction  mapping  AM  of  COMPS,  a  set 
, we say 
that AM is admissible w.r.t.  SD,  OBSAV, 
iff for each 
abstract  component AC  with  subcomponents SCOMPS: 
is 

1.  admissible behavioral modes; each 

and  a  granularity mapping 

admissible in the sense of  definition  2.6 

2.  mutual  exclusion:  for  any  two distinct 

defAC, 
COMPS: 

and  any 

instantiation  C O M PS  of 

3.completeness: 

for  any  instantiation  C O M PS  of 

4-  correctness:  given 

the  set  of  in-
stantiations  of  SCOMPS  which  satisfy  defk  is  a 

-indiscriminability  class  6 

Example  2.4  The abstraction example of figure  1  (b), 
is admissible  w.r.t. 
if  the  behavioral  modes  definitions  of example  2.3  are 
used.  Such definitions  are admissible,  moreover there is 
a  1  :  1  mapping  between  them  and  the  (OBSAV,ty-
indiscriminability classes shown in example  2.2;  in par(cid:173)
corresponds  to  C l l,  defabm2  to  C2, 
ticular 
defabrn3  to  CYl  and  defabm 
to  C3.  It  follows  that  the 
mutual  exclusion,  completeness  and  correctness  condi(cid:173)
tions are also satisfied 

to  each 

Note  that  given  an  admissible  components  abstrac(cid:173)
tion  mapping  AM, 
instantiation  C O M PS 
of  COMPS  corresponds  exactly  one 
instantiation 
C O M P SA  of  COMPSA 
consistent  with  COMPS 
given  the  definitions  of  elements  in  COMPSA-  We  say 
that  C O M P SA  is  the  abstraction of C O M PS  accord(cid:173)
ing  to  AM. 
3  Computing  Abstractions 
The  hierarchical  way  abstract  components  are  defined 
in  section  2  suggests  that,  after  an  initial  step  of  be(cid:173)
havioral  modes  abstraction,  the  computational  process 
6Note that this guarantees that the behavioral modes of 
the abstract  component  are all  distinguishable  in  the sense 
of [Torasso and Torta, 2002] 

can produce new abstract components incrementally, by 
merging  only  two  components  at  each  iteration.  After 
some finite number of iterations, arbitrarily complex ab(cid:173)
stract components can  be produced. 
As already mentioned in section  1, however, the admissi(cid:173)
bility of a component abstraction is not enough in order 
to produce useful and meaningful abstractions.  We thus 
introduce  some  cutoff criteria  on  abstractions  over  two 
components (i.e.  single iterations), to be enforced by the 
computational process. 
First, we don't want to have a different behavioral mode 
of  the  abstract  component  for  each  combination  of the 
behavioral modes of its subcomponents  (limited-domain 
criterion); a proliferation of behavioral modes in the ab(cid:173)
stract  component  has  negative  effects  on  both  the  effi(cid:173)
ciency of diagnosis and the understandability of abstract 
diagnoses.  We  chose  to  impose  the  not  too-restrictive 
limit 
Second, we must be able to control the fan-in of the ab(cid:173)
stract components; indeed,  if a structure-based diagnos(cid:173)
tic  algorithm is  used  ([Darwiche,  1998]),  introducing an 
abstract component that has a fan-in  (much)  larger than 
that of all  its subcomponents leads to computational in(cid:173)
efficiencies  as  pointed  out  in  [Provan,  2001].  The  limit 
imposed on the fan-in of the abstract component  (fan-in 
criterion)  can  vary  from  the  maximum  among  the  fan-
ins of its subcomponents to the sum of such fan-ins; the 
choice  should  be  driven  by  the  type  of diagnostic  algo(cid:173)
rithm  to  be  used  with  the  abstracted  model  as  well  as 
by specific characteristics of the model  under considera(cid:173)
tion.  In  the  experiments  reported  in  section  4  we  have 
obtained  significant  results  by  restricting  the  fan-in  of 
abstract components to be at most  the  maximum fan-in 
among  their  subcomponents. 
The following is an  high-level description of the compu(cid:173)
tational process: 

Return SD 
EndFunction 

The invocation of function BM Abstractf) builds simple 
abstract  components  by  abstracting  behavioral  modes 
that  result  indistinguishable  given  the  current  observ(cid:173)
ability expressed by 
,11; then a while loop is en(cid:173)
tered. 
Function  Oracle() selects  the next two candidates C,, C, 
for abstraction according to the strategies outlined in the 
next  paragraph.  Then  LocalDT,  i.e.  the  portion  of  DT 
relevant  for  computing  the  influence  of 
over  the 
,  is  isolated  by  calling 
values  of observables  in 
associated  to  LocalDT 
to  nodes  in 
;  all  the parents of the  nodes on  such  paths  are 

essentially  contains  the  paths  from 

.  The causal graph 

DIAGNOSIS 

397 

also added.  It is easy to see that, given the nodes in Gloc, 
the  remaining  nodes  in  the  original  G  do  not  play  any 
role  in  the  way  Ci,  Cj  influence  the  variables  in  OBSAV-
Function  MergeComps()  (see  paragraph  3.2)  then  tries 
to compute  the definition of the new abstract component 
given  LocalDT  and  in  case  it  succeeds,  SD  is  updated 
accordingly  by  function  ReviseDT  (). 
Intuitively,  the 
formulas  in  LocalDT  are  replaced  with  a  set  of formulas 
whose antecedents  mention  the  new  abstract  component 
AC.  Given  the  antecedent  of  a  formula  mentioning  AC 
the  consequent  is  computed  according  to  the  definition 
de  fAC-  For example, considering again  figure  1  (b),  we 
introduce  the  formula 

The  whole  process  terminates  when  function  Oracle  () 
has  no  new  suggestions  for  further  abstractions. 

T he  O r a c le 

3.1 
Function  Oracle()  must  choose,  at  each  iteration,  a pair 
of candidate  components  for  abstraction.  Since  a search 
over  the  entire  space  of potential  abstractions  would  be 
prohibitive,  the  function  is  based  on  a  greedy  heuristic 
that  tries  to  achieve  a  good  overall  abstraction  with­
out  doing  any  backtracking. 
It  is  worth  noting  that 
the  greedy  approach  reduces  the  worst-case  search  per­
formed  by  OracleQ  to  the  evaluation  of  all  the  possible 
pairs  of  components  before  returning  the  chosen  pair; 
this  can  happen  at  most  \COMPS\  times  since  every 
time  an  abstraction  takes  place  the  number  of  compo­
nents is reduced  by one and thus the search space size is 
clearly  polynomial  in 

\COMPS\. 

In  our  experience  it  turned  out  that  the  heuristic  HA 
based  on  the  following  two  principles  could  achieve  sig­
nificant  results.  First,  HA  follows  a  locality  principle  for 
choosing 
.  Manually  written  structural  abstrac­
tions,  indeed,  tend  to consist  in  hierarchies  such  that  at 
each  level  of the  hierarchy  the  new  abstractions  involve 
components  that  are  structurally  close  to  one  another. 
This  usually  has the advantage of building abstract com­
ponents  that  have  a  fan-in  comparable  to  that  of  their 
subcomponents  and  have  a  limited  and  meaningful  set 
of  behavioral  modes.  Two  good  examples  of  structural 
patterns  that  follow  this  principle  are  components  con­
nected  in  sequence  and  in  parallel  8. 
Second,  the  heuristic  prefers  pairs  of  components  that 
are  connected  to  the  same  observables  in  
;  this 
follows  from  the  fact  that  if at  least  one of the  two com­
ponents  is  observable  separately  from  the  other,  it  is 
more  unlikely  to  find  indiscriminable  instantiations  of 
the  two  components. 

7It is easy to see that, by interpreting abm1, abm 2, abm 3, 
abm4 as ok, leak, so, sc respectively, AVI behavior is exactly 
that of a valve 

8Note  that  the  structural  notions  of vicinity,  sequential­
ly  and  parallelism  can  be  naturally  transposed  in  terms  of 
relationships in the causal graph G 

While  evaluating  a  pair  of  candidates,  OracleQ  im­
mediately  enforces  the  fan-in  criterion  (this  check  can 
be  easily  performed  at  this  stage).  As  for  the  limited-
domain  cutoff  criterion  and  the  actual  feasibility  of  an 
admissible abstraction,  Oracle()  just  "trusts"  the heuris­
tic  HA,  and  defers  to  MergeCompsQ  the  actual  enforce­
ment.  There's  thus  no  warranty  that  the  components 
selected  by  OracleQ  will  end  up  being  merged  but  just 
a  good  chance  of it  to  happen. 

In  the  current  implementation,  OracleQ  terminates 
when  it  can't  find  any  pair  of  components  which  meet 
the limited fan-in criterion,  are connected in sequence or 
parallel  and  influence  the  same  set  of observables. 
Example  3.1  Given  the  system  in 

figure  1  (a)  and 
,  OracleQ  selects  P I,  VI  as  candi­
dates according to  heuristic  
e.g., are further 
away and there's also an observable point between them, 
namely  in2.  Since  the  inputs  to  the  potential  abstract 
component  AVI  would  be  in,cmd  and  the  inputs  to  VI 
are  outl,cmd  there  is  no  increase  in  the  fan-in  of  the 
abstract  component.  Thus  P I, VI  are  returned  □ 

A b s t r a c t i on  of  T wo  C o m p o n e n ts 

3.2 
Once  two  candidate  components 
have  been  se­
lected,  function  MergeCompsQ  tries  to  merge  them  into 
a  single  abstract  component.  The  following  is  a  sketch 
of the  function: 
Function  MergeComps(LocalDT, 
V  =  FindIndiscriminable(Local 

ForEach 

Return 

EndFunction 

First, 

into 

then 

the  set 

of  SN(M) 

indiscriminability  classes  by 

is  par-
function 
tioned 
FindlndiscriminableQ.  Such  function  considers  in 
turn 
each  observable  M  reachable  from  Ci,Cj  and  computes 
the  set  SN(M)  of source  nodes  (i.e.  nodes  without  par­
ents)  in  Gloc  connected  to  M  (excluding  CiCj);  instan­
tiations  of  the  source  nodes  represent  the  contexts  un­
influence  the  value  of  M.  For  each 
der  which 
FindlndiscriminableQ 
instantiation 
computes  the  transitive  closure  of  each  pair  of  behav­
ioral modes  in 
and  gradually re­
fines  the  partition  by  putting  into  separate  classes  pairs 
It  is  easy  to  see 
that  cause  different  values  for  M. 
that  after  FindlndismiminableQ  has 
looped  over  each 
and  each  instantiation  of  SN(M),  the  re­
sulting  partition  V  of  
consists 
exactly in  the indiscriminability classes of definition  2.4. 
Indiscriminability  classes  of V  form  the  basis  for  build­
ing  abstract  behavioral  modes  definitions:  associating 
exactly  one  abstract  behavioral  mode  to  each  of  them, 
guarantees  that  the  mutual  exclusion,  completeness  and 

398 

DIAGNOSIS 

function  MakeABMDefinitionQ. 

correctness  conditions  given  in  definition  2.7  are  auto­
matically  satisfied.  Since  the  number  of  classes  in  the 
partition  V  corresponds  to  the  number  of  abstract  be­
havioral  modes  to  be  eventually  generated,  the  limited-
domain  cutoff criterion  is  applied  to 
If the  check  is  passed  successfully,  the  generation  of the 
definitions  for  the  abstract  behavioral  modes  starts,  by 
considering  an  indiscriminability  class  p  at  a  time  and 
calling 
func­
tion  tries  to  build  an  admissible  behavioral  mode  defi­
nition  by  considering  the  admissible  forms  in  the  same 
order as given  in  definition  2.6;  if it  does  not  succeed,  it 
returns  NULL  and  the  abstraction  of  
Example  3.2  Given  that  OraclcQ  has  selected  P I,  VI 
the  admissible  ab­
as  candidates 
straction  described 
is  computed 
by  MergeCornpsQ 
function 
FindlndiscriminableQ  computes  a  partition  V  whose 
indiscriminability  classes  are  the  ones  mentioned  in  ex­
ample 

for  abstraction, 
in  example 

following  way: 

Such 

fails. 

2.4 

in 

the 

the  cutoff  check  is  passed; 

func­
tion  Make ABM Definition  ()  builds, 
for  each  indiscrim­
inability  class,  the  corresponding  admissible  definition 
shown  in  example  2.3 

then, 

C o r r e c t n e ss 

3.3 
We  now  state  two  correctness  results  concerning  algo­
rithm  AbstractQ.  Their  validity  follows  intuitively  by 
the  description  of  the  algorithm  given  in  the  previous 
paragraphs;  because  of lack  of space  we  omit  the  formal 
proofs.  The  first  property just  states  that  the  algorithm 
builds  abstractions  according to definitions  in  section  2. 
P r o p e r ty  3.1  Function  AbstractQ  builds  an  admissible 
components  abstraction  mapping 

The  second  property  makes  explicit  the  correspon­

the 

dence  between  detailed  and  abstract  diagnoses. 
P r o p e r ty  3.2  Let  SDA  be  the  system  description  ob(cid:173)
tained  from  SD,OBSAV,TI  by  applying  AbstractQ  and 
the  associated  admissible  abstraction  mapping. 
AM 
Given  a  diagnostic  problem  DP  = 
( S D , O B S , C X T) 
corresponding  abstract  diagnostic  problem 
and 
DPA  = 
{SDA,  O B S A V,  C X T ),  D  is  a  diagnosis  for  DP 
iff its  abstraction  DA  according  to  AM  is  a  diagnosis  for 
DPA 
4  Experimental  Results 
For  testing  the  approach  described  above  we  have  used 
the  model  of the  space  robotic  arm  SPIDER  ([Portinale 
and Torasso,  1999]), consisting in 35 components with an 
average 3.43 behavioral modes each,  45  observables  and 
1143  formulas.  All  the  tests  have  been  performed  using 
a  Java implementation  running  on  a  Sun  Sparc  Ultra  5 
equipped  with  SunOS  5.8. 
Please  note  that  the  SPIDER  system  model  expresses 
causal relationships among  the variables:  for example,  a 
failure  in  an electrical  component  can  influence  the  tem­
perature  measured  at  some  other  physically  neighboring 

Table  2:  Average number of preferred diag.  (eonf.  95%) 

components. 
We  have  applied  the  AbstractQ  algorithm  by  consider­
ing  as  available  observables  the  set  of 29  sensorized  ob­
servables  at  their  maximum  granularity.  The  resulting 
model,  computed  in  about  lsec,  was reduced  to  have  21 
components  with  an  average  2.76  behavioral  modes  and 
548  formulas.  Table  2  reports  the  average  number  of 
preferred  (i.e.  minimum fault cardinality)  diagnoses pro­
duced  by  the  diagnostic  agent  when  using  respectively 
the original model  (detailed),  the model  obtained  by per­
forming  only  behavioral  modes  abstraction  (abstractl) 
and  the  model  created  by  AbstractQ  (abstract2).  The 
three  columns  report  results  for  three  testsets  of  250 
cases  each.  The  difference  between  the  testsets  lies  in 
the number of faults  (1,  2 and 3 respectively)  injected in 
each test  case. 
The  average  times  employed  to  solve  a  test  case  using 
the  detailed  model  were,  with  a  95%  confidence,  72 ± 4 
msec 
msec  (testset2)  and  333  ±  54 
msec  (ttstsetS)]  by  using  the  abstract2  model  the  aver­
msec  (testsetl),  41  ±3  msec 
age times dropped  to 
(testset2)  and  45  ±  8  msec  (tcstset.3). 

(testsetl), 

in 

the 

5  Related  W o rk  and  Conclusions 
As  noted 
introduction  only  a  few  methods 
have  been  proposed  for  automatic  model  abstraction  in 
the  context  of  MBD.  In  particular,  [Sachenbacher  and 
Struss,  2001]  and  [Torasso  and  Torta,  2002]  aim  at  the 
abstraction  of the  values  of variables  in  the  model  while 
the  present  work  aims  also  at  automatically  abstracting 
In  [Out  et  a/.,  1994J  the  authors 
component  variables. 
introduce  the  notion  of  ID-hierarchies  of  abstract  com­
ponents  which,  as  our  admissible  abstraction  mappings, 
preserve a strict  correspondence between  an  abstract di­
agnosis and  the  set  of detailed  diagnoses  consistent  with 
it.  However,  their  work  deals  with  models  which  repre­
sent  only  normal  behavior  of  the  system,  which  results 
in  a  significant  simplification  of  the  synthesis  of  behav­
ioral  modes  definitions  for  the  abstract  components.  In 
particular,  the  partition  of the  instantiations  of the  sub­
components  is  always  reduced  to  two  indiscriminability 
classes:  a  singleton  OK-class  (containing  the  unique  in­
stance  where  all  subcomponents  are  OK)  and  an  AB-
class  (containing  all  the  remaining  instances,  where  at 
least  one  subcomponent  is  AB).  Since  there's  no  fault 
model,  the  only  instance  which  predicts  values  for  the 
observables  is  the  one  in  the  OK-class;  instances  in  the 
AB-class  do  not  predict  anything  about  observable  val­
ues,  stnd  thus  can  be  safely  put  in  the  same  indiscrim­
inability  class  without  computing  any  transitive  closure. 
Among  the  methods  based  on  manual  abstraction, 

DIAGNOSIS 

399 

[Friedrich,  1993]  proposes  a  notion  of diagnosis  (theory 
diagnoses)  which  exploits  ab-clauses  explicitly  added  to 
the  domain  theory  in  order  to  compute  abstract  diag­
noses.  Similarly,  in  [Console and Theseider Dupre,  1994] 
the  model  is  augmented  with  abstraction  axioms  which 
model  is-a relationships;  in  such  model  also  observables 
can  be  expressed  at  different  levels  of  abstraction. 
In 
both  works  the  level  of abstraction  of diagnoses  is  flexi­
ble (i.e.  a diagnosis can mix elements at different levels of 
abstraction)  and  is driven  by  the specific diagnostic cause 
at  hand  (i.e.  values  of  the  observables  and  contexts). 
Our  abstraction  algorithm  automatically  synthesizes  a 
single  abstract  level  given  the  knowledge  of which  vari­
ables  are  observable  at  which  granularity;  we  assume 
that  the  changes  in  the  availability  of  observables  are 
rare,  so  that  the  produced  models  are  reused  for  many 
diagnostic  cases.  Moreover,  the  kinds  of  relationships 
that  we  allow  among  abstract  component  behavior  and 
its  subcomponents  behavior  are  less  restrictive than  ab-
clauses  and  is-a relationships. 

The  definition  of  admissible  components  abstractions 
given in this  paper aims at  building abstract models that 
can  completely  replace  the  detailed  models  without  any 
loss  of  discriminability.  This  is  different  from  the  goal 
of  [Mozetic,  1991]  and  its  improvements,  where  the  ab­
stract  model  is  viewed  as  a focusing  mechanism,  and  is 
used  in  conjunction  with  the  detailed  model  in  order  to 
improve  efficiency.  Our  notion  of  indiscriminability  en­
forces  abstractions  where  a diagnosis  Da  at  the  abstract 
level  corresponds exactly  to  the  set  of detailed  diagnoses 
whose  abstraction  is  Da  (property  3.2).  As  shown  by 
[Autio  and  Reiter,  1998]  this  is  not  the  case  for  some 
common  abstractions: 
in  the  example  of  the  abstract 
NOR  gate  consisting  of  an  OR  and  a  NOT  gates,  the 
ab-dause  AB(NOR)  =  AB(OR)  V  AD(NOT)  does  not 
correspond  to  an  indiscriminability  class,  since  the  case 
where  both  OR  and  NOT  are  faulty  has  a  different  be­
havior  than  the  cases  where  only  one  fault  is  present. 
Our  algorithm  does  not  synthesize  such  ab-clause,  thus 
avoiding  the  consequent  loss  of diagnostic  information. 
Most  of  the  computational  effort  of  our  approach  is 
devoted  to  the  computation  of  the  indiscriminability 
classes; once they have been identified,  the generation of 
behavioral modes definitions  from each of them  is  cheap 
and straightforward.  An alternative approach that could 
be  worth  exploring  is  constructive  inductive  learning, 
where techniques have been developed for the  automatic 
synthesis  of  complex  attributes  (see  e.g. 
[Pagallo  and 
Haussler,  1990]). 
Another  interesting  point  to  explore  would  be  to  study 
more  sophisticated  versions  of  the  Oracle  ()  function, 
able to recognize a wider variety of patterns in the causal 
graph and possibly to look ahead one or more steps in or­
der  to  select  the  candidate  pair  of components;  in  order 
to  keep  the  complexity  of the  search  manageable we be­
lieve  that  such  extended  versions  of  OracleQ  should  be 
supported  by  additional  domain-specific  knowledge  (for 
instance,  whether  certain  kinds  of components  are likely 
to  be  connected  in  ways  that  form  admissible  abstract 

components). 

In  conclusion,  performing  components  abstraction  led 
to  dramatic  reductions  in  the  number  of  returned  di­
agnoses  in  the  experimental  domain,  outperforming  the 
application  of  behavioral  modes  abstraction  alone  (see 
section  4).  The reduction in the model size also resulted 
in  significant  time  savings  for  the  diagnostic  process. 

References 
[Autio  and  Reiter,  1998]  K.  Autio and  R.  Reiter.  Struc­
In  Proc. 

tural  abstraction  in  model-based  diagnosis. 
ECAI98,  pages  269-273,  1998. 

[Chittaro  and  Ranon,  2001]  L.  Chittaro  and  R.  Ranon. 
In 

Hierarchical  diagnosis  guided  by  observations. 
Proc.  IJCAI01,  pages  573-578,  2001. 

[Console  and  Theseider  Dupre,  1994]  L.  Console  and 
D.  Theseider  Dupre.  Abductive  reasoning  with  ab­
straction  axioms.  LNCS,  810:98-112,  1994. 

[Darwiche,  1998]  A.  Darwiche.  Model-based  diagnosis 
using  structured  system  descriptions.  Journal  of  Ar(cid:173)
tificial  Intelligence  Research,  8:165-222,  1998. 

[Friedrich,  1993]  G. Friedrich.  Theory diagnoses:  A con­
In  Proc.  IJ-

cise  characterization  of  faulty  systems. 
CAI93,  pages  1466-1471,  1993. 

[Mozetic,  1991]  I.  Mozetic.  Hierarchical  model-based 
Int.  Journal  of  Man-Machine  Studies, 

diagnosis. 
35(3):329  362, 1991. 

[Out  et  a/.,  1994]  D.J.  Out,  R.  van  Rikxoort,  and 
R.  Bakker.  On  the  construction  of  hierarchic  mod­
els.  Annals  of  Mathematics  and  AI,  11:283-296,1994. 
[Pagallo and  Haussler,  1990]  G.  Pagallo  and  D.  Haus­
sler.  Boolean  feature  discovery  in  empirical  learning. 
Machine  Learning,  5:71-99,  1990. 

[Portinale and  Torasso,  1999]  L. 

and 
Diagnosis  as  a  variable  assignment 
P.  Torasso. 
fault 
problem: 
diagnosis.  In  Proc.  IJCAI99,  pages  1087  1093,  1999. 
[Provan,  2001]  G.  Provan.  Hierarchical  model-based  di­

Portinale 

a  case  study 

in  a  space  robot 

agnosis.  In  Proc.  DX01,  pages  329-362,  2001. 

[Sachenbacher  and  Struss,  2001]  M.  Sachenbacher  and 
P.  Struss.  Aqua:  A  framework  for  automated  qual­
itative  abstraction.  In  Proc.  QR01,  2001. 

[Struss  et  a/.,  1996]  P.  Struss, A. Malik, and M.  Sachen­
bacher.  Qualitative modeling  is  the  key  to  automated 
diagnosis.  In  Proc.  IFAC96,  1996. 

[Struss,  1997]  P.  Struss.  Fundamentals  of  model-based 
diagnosis  of dynamic  systems.  In  Proc.  IJCAI97,1997. 
[Torasso and  Torta,  2002]  P.  Torasso  and  G.  Torta. 
an  approach 
In  Proc. 

Merging 
based  on  automatic  domains  abstraction. 
DX02,  pages  43-50,  2002. 

indiscriminable  diagnoses: 

400 

DIAGNOSIS 

