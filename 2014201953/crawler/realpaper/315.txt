Abduction with Hypotheses Conﬁrmation∗

Marco Alberti1, Marco Gavanelli1, Evelina Lamma1, Paola Mello2, and Paolo Torroni 2

1 ENDIF - University of Ferrara - Via Saragat, 1 - 44100 Ferrara, Italy.

{malberti|m gavanelli|elamma}@ing.unife.it

2 DEIS - University of Bologna - Viale Risorgimento, 2 - 40136 Bologna, Italy.

{pmello|ptorroni}@deis.unibo.it

Introduction

1
Abductive Logic Programming (ALP) is an extension of
Logic Programming to formalise hypothetical reasoning. It
typically distinguishes between facts, deﬁned within a static
theory and known to be true or false, and potentially true, ab-
ducible atoms (hypotheses).

However, in most applications, this distinction is not ade-
quate to capture the dynamics of knowledge, as reasoning is
confronted with an environment in evolution. It may turn out
that some hypotheses gain or lose strength, as events happen
in the world. For example, in the medical domain, where a
kind of hypothetical reasoning is the diagnostic inference, we
can model symptoms as observations and diseases as (not di-
rectly measurable) hypotheses: test results and new possibly
upcoming symptoms, instead, are none of these, and should
be interpreted as hypotheses conﬁrmable by events.

An abductive derivation veriﬁes a goal by using deduction
as in logic programming, but also by possibly assuming that
some abducibles are true. In order to have this process con-
verge to a meaningful explanation, an abductive theory nor-
mally comes together with a set of integrity constraints IC,
and it is required that hypotheses be consistent with IC.

In our extended framework, we distinguish between two
classes of abducible literals: hypotheses, as classically un-
derstood, and expectations about events. Expectations can be
“positive” (to be conﬁrmed by certain events occurring), or
“negative” (to be conﬁrmed by certain events not occurring).
We propose a new language to deﬁne abductive logic pro-
grams with expectations, inspired to the IFF proof procedure
[Fung and Kowalski, 1997], and whose semantics extends
those of classical ALP. The language permits to express ab-
ducible hypotheses and expectations with variables and con-
straints. Within this new framework we can model and reason
about a number of concrete application scenaria. Our frame-
work permits, e.g., to reason about deadlines, and to express
and correctly handle expectations with universal quantiﬁca-
tion: this typically happens with negative expectations (“The
patient is expected not to show symptom Q at all times”).

∗This work is partially funded by the Information Society Tech-
nologies programme of the European Commission under the IST-
2001-32530 SOCS Project, and by the MIUR COFIN 2003 projects
Sviluppo e veriﬁca di sistemi multiagente basati sulla logica, and
La Gestione e la negoziazione automatica dei diritti sulle opere
dell’ingegno digitali: aspetti giuridici e informatici.

The operational semantics is an abductive proof-procedure
which builds on the IFF and is proven sound for a relevant
class of programs. It has been implemented using Constraint
Handling Rules and integrated in a Java-based system for hy-
pothetical reasoning [Alberti et al., 2005].

2 Dynamic ALP
An ALP [Kakas et al., 1992] is a tuple hKB, IC, Ai where
KB is a logic program, A is a set of predicates called ab-
ducibles not deﬁned in KB, and IC is a set of formulae
called Integrity Constraints. An abductive explanation for a
goal G is a set ∆ ⊆ A s.t. KB ∪∆ |= G and KB ∪∆ |= IC.
New dynamically upcoming events are encoded into atoms
H(Descr [, Time]) where Descr is a ground term represent-
ing the event and Time is an integer representing the time at
which the event happened. Such events are recorded into a set
(called history, or HAP) containing H atoms. A Dynamic
Abductive Logic Program (DALP) is a sequence of ALPs,
each grounded on a given history. We will write DALPHAP
to indicate the abductive logic program obtained by ground-
ing the DALP with the history HAP. The history dynami-
cally grows during the computation, as new events happen.1
An instance DALP HAP of this framework can be queried
with a goal G, that may contain both predicates deﬁned in
KB and abducibles. The abductive computation produces
a set ∆ of hypotheses, partitioned in two sets: general hy-
potheses (∆A) and expectations (EXP), containing positive
expectations (in the form of E(Descr [, Time]) atoms), and
negative expectations (EN((Descr [, Time])) atoms).

Typically, expectations will contain variables, over which
CLP constraints can be imposed. Variable quantiﬁcation is
existential in E expectations, and universal in EN expecta-
tions (unless the same variable is used outside of such expec-
tation). Explicit negation can also be applied to expectations.2
Constraints on universally quantiﬁed variables will be con-
sidered as quantiﬁer restrictions. For instance, EN(p(X)),
X > 0 has the semantics ∀X>0 EN(p(X)).

The declarative semantics for DALP HAP is based on its
ground version, and considers CLP-like constraints as deﬁned

1The source of events is not modelled, but can be imagined as a

queue.

2For each abducible predicate A ∈ {E, EN}, the abducible
predicate ¬A is implicitly deﬁned, to represent the negation of A,
together with the integrity constraint (∀X)¬A(X), A(X) → false.

predicates. First, an abductive explanation should entail the
goal and satisfy the integrity constraints:

Comp(KB ∪ ∆A ∪ EXP ∪ HAP)
Comp(KB ∪ ∆A ∪ EXP ∪ HAP)

|= G
|= IC

(1)
(2)

where, as in the IFF proof procedure, the symbol |= stands
for three valued entailment and Comp stands for completion.
Among the sets of expectations of an instance DALP HAP,
we select the ones that are consistent with respect to expec-
tations (i.e., the same event should not be both expected to
happen and not to happen), and that are conﬁrmed:
Deﬁnition 1 A set EXP is E-consistent iff for each (ground)
term p:
(3)
Given a history HAP, a set of expectations EXP is con-

{E(p), EN(p)} 6⊆ EXP.

ﬁrmed if and only if for each (ground) term p:
Comp(HAP ∪ EXP) ∪ {E(p) → H(p)}
∪{EN(p) → ¬H(p)}

6|= false

(4)

We write DALPHAP≈∆A∪EXPG if equations (1-4) hold.

The operational semantics is an extension of the IFF. Each
state is deﬁned by a tuple deﬁning conﬁrmed, disconﬁrmed,
and pending expectations, along with the resolvent, the set of
abduced literals that are not expectations, the constraint store,
a set of partially solved integrity constraints, and HAP.

A derivation D is a sequence of nodes Tj, where the initial
node T0 contains the goal G as the initial resolvent, and the
other nodes Tj, j > 0, are obtained by applying one among a
set of transitions, until quiescence.
Deﬁnition 2 Starting with an instance DALPHAPi
there
exists a successful derivation for a goal G iff the proof tree
with root node T0 has at least one consistent leaf node Tn
(i.e., there exists for Tn a ground variable assignment such
that all the constraints are satisﬁed). In that case, we write:

DALPHAPi ∼HAPf

∆A∪EXPG

The transitions are those of the IFF, enlarged with those of
CLP, and with speciﬁc transitions accommodating the con-
cepts of hypotheses conﬁrmation and evolving history.

The CLP(FD) solver has been extended for dealing with
universally quantiﬁed variables and quantiﬁer restrictions.
For instance, given two expectations ∀X<10EN(p(X)) and
∃Y >5E(p(Y )), the solver is able to infer ∃Y ≥10E(p(Y )). To
the best of our knowledge, this is the only proof-procedure
able to abduce atoms containing universally quantiﬁed vari-
ables; moreover, it also handles constraints `a la CLP on uni-
versally quantiﬁed variables.

We proved soundness for allowed DALPs:3

Theorem 1 Given DALPHAPi and a ground goal G, if
DALPHAPi ∼HAP

∆ G then ALPHAP≈∆G.

3 Case study
We conclude with an example from the medical domain to
show two main contributions of our work: the dynamic de-
tection of new facts, and the conﬁrmation of hypotheses by
events. Suppose a symptom s can be caused by one of three
types of diseases. Let disease d1 be an acceptable explanation
for s if the patient is not also affected by d3, and in such a case

3The proof is based on a correspondence drawn between SCIFF

and IFF transitions, and exploits the soundness results of the IFF.

the patient’s temperature cannot go below 37oC. s may alter-
natively be caused by disease d2, and in this case red spots
are expected to appear on the patient’s skin within 4 days. Fi-
nally, d3 may be the cause of s, provided that an exam r gives
a positive result:

symptom(s, T1) ← disease(d1, T1) ∧ not disease(d3, T1)

∧EN(tem(T ), T1) ∧ T < 37.

symptom(s, T1) ← disease(d2, T1)∧

E(red spots, T2) ∧ T1 < T2 ≤ T1 + 4.

symptom(s, T1) ← disease(d3, T1) ∧ E(exam(r, +), T1).
The initial goal can be the observation symptom(s, 1). We
model disease as a classical abducible, whereas expectations
are used to corroborate the explanations.

Notice the twofold use of expectations: both in the sec-
ond and third clause, the expectation deﬁnes a further event
that can support the diagnosis. But while E(red spots, T2)
simply deﬁnes the expected course of illness (in order for the
diagnosis to be corroborated), E(exam(r, +), T1) can also be
intended as a suggestion to the physician for a further exam
to be done, or as a request of further information.

The combinations of abducible literals can be reﬁned by
means of ICs. For example, if the result of some exam r is
positive, then we can assume that the patient is not affected
by disease d1: H(exam(r, +), T1) → not disease(d1, T1).
The dynamic occurrence of events can drive the generation
and selection of abductive explanations. If the query is, e.g.,
symptom(s, 1), there can be three alternative explanations:

{disease(d1, 1), ∀T >37EN(tem(T ), 1)},
{disease(d2, 1), ∃1<T2≤5E(red spots, T2)}, and
{disease(d3, 1), E(exam(r, +), 1)}.

If event H(tem(36), 1) happens, the ﬁrst set contains a dis-
conﬁrmed expectation: ∀T >37 EN(tem(T ), 1), so it can be
ruled out. If, within the deadline T2 ≤ 5, the event red spots
does not happen, the second set is excluded as well, and only
the third remains acceptable.

Finally, integrity constraints could suggest possible cures,

or warn about consequences of not taking certain drugs:

disease(d3, T1) → E(aspirin, T1)

∨E(tem(T ), T2) ∧ T > 40 ∧ T2 < T1 + 2.

4 Conclusions
We presented SCIFF, an abductive proof-procedure able, be-
side proposing explanations, to infer expectations about the
happening of events. Expectations are abducibles, but more
expressive: they can contain universally quantiﬁed variables,
possibly with CLP constraints. They can represent requests
for information, or the expected evolution of a system. SCIFF
is able to process dynamically incoming events to conﬁrm the
expectations, providing corroboration to abduced hypotheses.
References
[Alberti et al., 2005] M. Alberti, F. Chesani, M. Gavanelli,
E. Lamma, P. Mello, and P. Torroni. Compliance veriﬁcation of
agent interaction: a logic-based software tool. Applied Artiﬁcial
Intelligence, 2005. To appear.

[Fung and Kowalski, 1997] T. H. Fung and R. A. Kowalski. The
IFF proof procedure for abductive logic programming. Journal
of Logic Programming, 33(2):151–165, November 1997.

[Kakas et al., 1992] A.C. Kakas, R.A. Kowalski, and F. Toni. Ab-
ductive logic programming. J. Log. Comput, 2(6):719–770, 1992.

