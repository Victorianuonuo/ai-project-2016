EQL-Lite: Effective First-Order Query Processing in Description Logics

∗

Diego Calvanese1, Giuseppe De Giacomo2, Domenico Lembo2, Maurizio Lenzerini2, Riccardo Rosati2

1 Faculty of Computer Science

Free University of Bolzano/Bozen

Piazza Domenicani 3
I-39100 Bolzano, Italy

2 Dipartimento di Informatica e Sistemistica

Universit`a di Roma “La Sapienza”

Via Salaria 113

I-00198 Roma, Italy

calvanese@inf.unibz.it

lastname@dis.uniroma1.it

Abstract

Querying Description Logic knowledge bases has
received great attention in the last years. In such
a problem, the need of coping with incomplete in-
formation is the distinguishing feature with respect
to querying databases. Due to this feature, we
have to deal with two conﬂicting needs: on the
one hand, we would like to query the knowledge
base with sophisticated mechanisms provided by
full ﬁrst-order logic (FOL); on the other hand, the
presence of incomplete information makes query
answering a much more difﬁcult task than in data-
bases.
In this paper we advocate the use of a
nonmonotonic epistemic FOL query language as
a means for expressing sophisticated queries over
Description Logic knowledge bases. We show that
through a controlled use of the epistemic operator,
resulting in the language called EQL-Lite, we are
able to formulate full FOL queries over Descrip-
tion Logic knowledge bases, while keeping compu-
tational complexity of query answering under con-
trol. In particular, we show that EQL-Lite queries
over DL-Lite knowledge bases are FOL reducible
(i.e., compilable into SQL) and hence can be an-
swered in LOGSPACE through standard database
technologies.

1 Introduction

Querying Description Logic (DL) knowledge bases has re-
ceived great attention in the last years.
Indeed, the deﬁni-
tion of suitable query languages, and the design of query an-
swering algorithms is arguably one of the crucial issues in
applying DLs to ontology management and to the Semantic
Web [9].

Answering queries in DLs must take into account the open-
world semantics of such logics, and is therefore much more

∗This research has been partially supported by FET project
TONES (Thinking ONtologiES), funded by the EU under contract
number FP6-7603, by project HYPER, funded by IBM through
a Shared University Research (SUR) Award grant, and by MIUR
FIRB 2005 project “Tecnologie Orientate alla Conoscenza per Ag-
gregazioni di Imprese in Internet” (TOCAI.IT).

difﬁcult than in databases. For example, while ﬁrst-order
logic (FOL) is the basis of any query language (e.g., rela-
tional algebra and SQL) for relational databases [1], it is well-
known that answering FOL queries posed to DL knowledge
bases is undecidable1. More precisely, to the best of our
knowledge, the most expressive class of queries that go be-
yond instance checking, and for which decidability of query
answering has been proved in DLs, is the class of union
of conjunctive queries (UCQ) [7; 16]. This restriction on
the query language may constitute a serious limitation to
the adoption of DLs technology in information management
tasks, such as those required in Semantic Web applications.

The open-world semantics of DLs, while being essential
for representing incomplete information, may complicate the
task of interpreting the answers by the users, or may call for
the need of reasoning about the incompleteness of the knowl-
edge base. For example, knowing that there are no parents
with only female children, one might become interested in
asking for all parents whose known children are all female.
Note that querying mechanisms such as the one mentioned in
the example go beyond FOL.

To summarize, due to the need of coping with incomplete
information in DL knowledge bases, two conﬂicting require-
ments arise in querying: on the one hand, we would like to
query the knowledge base with powerful mechanisms that are
able to reason about incompleteness, and on the other hand
we aim at query languages that are both close in expressive
power to FOL, and decidable (and, possibly, tractable).

This paper presents the following contributions. We deﬁne
a query language for DL knowledge bases, called EQL (see
Section 2), based on a variant of the well-known ﬁrst-order
modal logic of knowledge/belief [14; 17; 15]. The language
incorporates a minimal knowledge operator K, which is used
to formalize the epistemic state of the knowledge base. Infor-
mally, the formula Kφ is read as “φ is known to hold (by the
knowledge base)”. Using this operator, we are able to pose
queries that reason about the incompleteness of information
represented by the knowledge base. For instance, a user can
express queries that are able to incorporate closed-world rea-
soning on demand.

We show (see Section 3) that through a controlled use
of the operator K, resulting in the language called EQL-

1Indeed, query answering can be reduced to validity in FOL.

IJCAI-07

274

Lite(Q), we are able to formulate queries that are interest-
ing both from the expressive power point of view, and from
the computational complexity perspective. Queries in EQL-
Lite(Q) have atoms that are expressed using a speciﬁc query
language Q, called embedded query language, and enjoy the
property that they can be evaluated essentially with the same
data complexity (i.e., measured wrt the size of the ABox only)
as queries expressed in Q.

We investigate the properties of EQL-Lite(Q) for several
interesting cases, characterizing the data complexity of query
answering (see Section 4).
In particular, we consider the
following cases: SHIQ with simple concept and role ex-
pressions as embedded queries, DLR with embedded unions
of conjunctive queries, PTIME-complete DLs such as Horn-
SHIQ or EL, with simple concept and role expressions as
embedded queries, basic DLs such as ALC with epistemic
concepts as embedded queries, and highly tractable DLs, such
as those of the DL-Lite family, with embedded unions of con-
junctive queries. For the latter case, we show that answering
EQL-Lite(UCQ) is in LOGSPACE, and, notably, can be re-
duced to evaluating FOL queries over the ABox, when con-
sidered as a database. It follows that query processing in this
setting can be done through standard database technologies.

Finally, we brieﬂy discuss (see Section 5) the use of EQL-
Lite(Q) for introducing the notion of integrity constraints in
DL KBs.

2 Epistemic query language

In this paper we consider queries over a Description Logic
(DL) knowledge base [4]. We don’t focus on any particu-
lar DL. We simply assume that, through the DL, we are able
to express our knowledge in terms of atomic concepts, i.e.,
unary predicates, and atomic roles/relations, i.e., binary/n-
ary predicates. General concepts and roles/relations are built
through the constructs allowed in the DL, and we assume
that such constructs are expressible in FOL. As usual, a DL
knowledge base (KB) is formed by a set of assertions, typi-
cally divided into a TBox, expressing intensional knowledge,
and an ABox, expressing extensional knowledge. We assume
again that such assertions can be expressed as FOL sentences
(i.e., closed FOL formulas). In other words, DL KBs can be
seen as FOL theories (of speciﬁc forms). Observe that most
DLs fulﬁll such assumptions: the only notable exceptions are
those that include some form of second-order constructs such
as transitive closure or ﬁxpoints [4].

As usual, when talking about query answering, w.l.o.g.,
we interpret DL KBs on interpretations sharing the same
inﬁnite countable domain Δ, and we assume that our lan-
guage includes an inﬁnitely countable set of disjoint con-
stants corresponding to elements of Δ, also known as stan-
dard names [15]. This allows us to blur the distinction be-
tween such constants (which are syntactic objects) and the el-
ements of Δ that they denote (which are semantical objects).
As a query language, we make use of a variant of the well-
known ﬁrst-order modal logic of knowledge/belief [14; 17;
15; 12], here called EQL. The language EQL is a ﬁrst-order
modal language with equality and with a single modal op-
erator K, constructed from concepts (i.e., unary predicates)

and roles/relations (i.e., binary/n-ary predicates) and the con-
stants introduced above (i.e., the standard names correspond-
ing to Δ). In EQL, the modal operator is used to formalize
the epistemic state of the DL KB, according to the minimal
knowledge semantics (see later). Informally, the formula Kφ
should be read as “φ is known to hold (by the KB)”.

In the following, we use c to denote a constant, (cid:3)c to denote
a tuple of constants, x to denote a variable, (cid:3)x to denote a tuple
of variables, and φ, ψ to denote arbitrary formulas, and ψx
c to
denote a formula where each x is replaced by c.

A world is a FOL interpretation over Δ. An epistemic in-
terpretation is a pair E, w, where E is a (possibly inﬁnite)
set of worlds, and w is a world in E. We inductively deﬁne
when a sentence (i.e., a closed formula) φ is true in an inter-
pretation E, w (or, is true in w and E), written E, w |= φ, as
follows:

E, w |= c1 = c2
E, w |= P ((cid:3)c)
E, w |= φ1 ∧ φ2
E, w |= ¬φ
E, w |= ∃x.ψ
E, w |= Kψ

c1 = c2

iff
iff w |= P ((cid:3)c)
iff E, w |= φ1 and E, w |= φ2
iff E, w (cid:4)|= φ
iff E, w |= ψx
iff E, w(cid:2) |= ψ for every w(cid:2) ∈ E

c for some constant c

Formulas without occurrences of K are said to be objec-
tive, since they talk about what is true. Observe that to check
whether E, w |= φ, where φ is an objective formula, we have
to look at w but not at E: we only need the FOL interpre-
tation w. All assertions in the DL KB are indeed objective
sentences. Instead, formulas where each occurrence of pred-
icates and of the equality is in the scope of the K operator
are said to be subjective, since they talk about what is known
to be true. Observe that, for a subjective sentence φ, in or-
der to establish whether E, w |= φ we do not have to look
at w but only at E. We use such formulas to query what
the KB knows. In other words, through subjective sentences
we do not query information about the world represented by
the KB; instead, we query the epistemic state of the KB it-
self. Obviously there are formulas that are neither objective
nor subjective. For example ∃x.P (x) is an objective sen-
tence, K(∃x.P (x)∧¬KP (x)) is a subjective sentence, while
∃x.P (x) ∧ ¬KP (x) is neither objective nor subjective.

In our setting, among the various epistemic interpretations,
we are interested in speciﬁc ones that represent the mini-
mal epistemic state of the DL KB, i.e., the state in which
let Σ be a DL
the KB has minimal knowledge. Namely:
KB (TBox and ABox), and let Mod (Σ) be the set of all
FOL-interpretations that are models of Σ. Then a Σ-EQL-
interpretation is an epistemic interpretation E, w for which
E = Mod (Σ). A sentence φ is EQL-logically implied by Σ,
written Σ |=
φ, if for every Σ-EQL-interpretation E, w we
have E, w |= φ. Observe that for objective formulas such a
deﬁnition becomes the standard one, namely w |= φ for all
w ∈ Mod (Σ), denoted by Σ |= φ.

EQL

It is worth mentioning some of the most characterizing

properties of EQL.

Proposition 1 For every DL KB Σ and every EQL-sentence

IJCAI-07

275

φ we have:

Σ |=
Σ |=
Σ |=

EQL

EQL

EQL

Kφ ⊃ φ
Kφ ⊃ KKφ
¬Kφ ⊃ K¬Kφ

These are the standard S5 axioms of modal logic. The ﬁrst
one expresses that “what is known is true” (knowledge is ac-
curate), and the latter two express that the KB has “complete
knowledge on what is known and not known”.
Proposition 2 For every DL KB Σ and every EQL-sentence
φ we have that:

Σ |=

Kφ or Σ |=

EQL

¬Kφ

EQL

The above proposition tells us that for any sentence φ the KB
logically implies either that the sentence is known or that the
sentence is not known, i.e., we have complete information on
what the KB knows. Notably, this is a consequence of the
minimal knowledge semantics that we are adopting.
Proposition 3 For every DL KB Σ and every objective EQL-
sentence φ we have:

Σ |= φ iff Σ |=
Σ (cid:4)|= φ iff Σ |=

EQL

EQL

Kφ
¬Kφ

The above proposition relates knowledge to FOL logi-
cal implication, and is again a consequence of the minimal
knowledge semantics. It allows us to give a very concrete in-
terpretation to knowledge for objective sentences: φ is known
iff it is logically implied, otherwise it is not known.

We are now ready to deﬁne EQL-queries: An EQL-query

is simply an EQL-formula, possibly an open one.

Let q be an EQL-query with free variables (cid:3)x, where the
arity of (cid:3)x is n ≥ 0, and is called the arity of q. We sometimes
use the notation q[(cid:3)x] to make the free variables (cid:3)x explicit.
Also we use the notation q[(cid:3)c] to denote q(cid:2)x
(cid:2)c (i.e., the formula
obtained from q by substituting each free occurrence of the
variable xi in (cid:3)x with the constant ci in (cid:3)c, where obviously (cid:3)x
and (cid:3)c must have the same arity). Since we are dealing with all
the models of the KB, as usual, query answering should return
those tuples of constants that make the query true in every
model of the KB: the so-called certain answers. Formally, the
certain answers to a query q[(cid:3)x] over a KB Σ are the set
q[(cid:3)c]}

ans(q, Σ) = {(cid:3)c ∈ Δ × · · · × Δ | Σ |=

EQL

Example 4 Consider the DL KB Σ constituted by the fol-
lowing TBox T and ABox A:
T = { Male (cid:9) ¬Female }
A = { Female(mary), Female(ann), Female(jane),

Male(bob), Male(john), Male(paul),
PARENT(bob, mary), PARENT(bob, ann),
PARENT(john, paul), PARENT(mary, jane) }

Suppose we want to know the set of males that do not have fe-
male children. This corresponds to the following FOL query
q1:

q1[x] = Male(x) ∧ ¬∃y.PARENT(x, y) ∧ Female(y)

It is easy to verify that the set of certain answers to q1 over Σ
is empty. In particular, neither john nor paul are certain an-
swers to the above query, since (due to the open-world seman-
tics of DLs) there are models of Σ in which the interpretation

of PARENT contains pairs of elements of the form (john, x)
or (paul, x) and the interpretation of Female contains the ele-
ment x.

Suppose now that we want to know who are the known
males that are not known to be parents of a female. This can
be expressed by the following EQL-query q2:
q2[x] = KMale(x) ∧ ¬K(∃y.PARENT(x, y) ∧ Female(y))
It is immediate to verify that the certain answers to q2 over
Σ are john and paul, since they are the only known males
that are not in the answer to the query ∃y.PARENT(x, y) ∧
Female(y).

Suppose now that we want to know who are the single chil-
dren according to what is known, i.e., the known children who
have no known sibling. This can be expressed by the follow-
ing EQL-query q3:

q3[x] = ∃y.(KPARENT(y, x)) ∧

∀z.(KPARENT(y, z)) → z = x

It is immediate to verify that the certain answers to q3 over Σ
are paul and jane.

Notice that, in an EQL-query, we can apply a form of
for example, in query q2 above,
closed world reasoning:
the evaluation of ¬K(∃y.PARENT(x, y)∧ Female(y)) corre-
sponds to the evaluation of ¬∃y.PARENT(x, y) ∧ Female(y)
under the closed world assumption.

3 EQL-Lite(Q)
We introduce now the query language EQL-Lite(Q). Such
a language is a particularly well-behaved fragment of EQL,
and is parameterized with respect to an embedded query
language Q, which again is a subset of EQL.
Informally,
EQL-Lite(Q) is the FOL query language with equality whose
atoms are epistemic formulas of the form K where  is a
query of Q. Formally, an EQL-Lite(Q) query is a possibly
open EQL-formula built according to the following syntax:

ψ ::= K | x1 = x2 | ψ1 ∧ ψ2 | ¬ψ | ∃x.ψ,

where  is a query in the embedded query language Q. We
call epistemic atoms the formulas K occurring in an EQL-
Lite(Q) query.

Observe that in EQL-Lite(Q) we do not allow the K op-
erator to occur outside of the epistemic atoms K. Indeed,
allowing for occurrences of the K outside such atoms does
not actually increase the expressive power of EQL-Lite(Q),
as the following proposition shows.
Proposition 5 Let EQL-Lite(Q)+ be the extension of EQL-
Lite(Q) obtained by adding to the abstract syntax for EQL-
Lite(Q) formulas the rule ψ ::= Kψ. Then, for each query
q ∈ EQL-Lite(Q)+, there exists a query q(cid:2) ∈ EQL-Lite(Q)
such that E, w |= ∀(cid:3)x.q[(cid:3)x] ≡ q(cid:2)[(cid:3)x], for every epistemic inter-
pretation E, w.
In fact, an EQL-Lite(Q)+ query q can be reduced to an equiv-
alent EQL-Lite(Q) query q(cid:2) in linear time by simply push-
ing inward the K operator, stopping in front of the epistemic
atoms, and simplifying KKψ to Kψ and K¬Kψ to ¬Kψ
whenever possible.

IJCAI-07

276

FOL

EQL-Lite(Q) queries enjoy a very interesting computa-
tional property: one can decouple the reasoning needed for
answering the epistemic atoms from the reasoning needed for
answering the whole query. Formally, let Σ be a DL KB,
and q[(cid:3)x] be an EQL-Lite(Q) query over Σ, whose epistemic
[(cid:3)x] the FOL
atoms are K1, . . . , Km. We denote by q
query obtained from q by replacing each epistemic atom Ki
by a new predicate RKi whose arity is the number of free
variables in i. Also we denote by Iq,Σ the FOL interpre-
tation for the predicates RKi deﬁned as follows: (i) the in-
terpretation domain is ΔIq,Σ = Δ; (ii) the extension of the
predicates RKi is RIq,Σ
= ans(i, Σ). Finally, we denote
Ki
[(cid:3)c]}
by eval (q
the result of evaluating q
Theorem 6 Let Σ be a DL KB, q an EQL-Lite(Q) query over
FOL and Iq,Σ the FOL query and the FOL interpreta-
Σ, and q
tion deﬁned above. Then ans(q, Σ) = eval (q

[(cid:3)x], Iq,Σ) = {(cid:3)c ∈ Δ×· · ·×Δ | Iq,Σ |= q

FOL over Iq,Σ.

, Iq,Σ).

FOL

FOL

FOL

The theorem above tells us that, in order to compute the cer-
tain answers of an EQL-Lite(Q) query q, we can compute the
certain answers of queries i of the embedded query language
Q occurring in the epistemic atoms of q, and then evaluate the
query q as a FOL query, where we consider such certain an-
swers as the extensions of the epistemic atoms.

The theorem above suggests a procedure to compute cer-
tain answers in EQL-Lite(Q). However, for such a procedure
to be effective, we need to address two issues: (i) the exten-
sion of the predicates RKi in the FOL interpretation Iq,Σ
needs to be ﬁnite, otherwise Iq,Σ would be inﬁnite and the
FOL impossible in practice; (ii) since Δ itself is
evaluation of q
FOL must not directly deal with Δ.
inﬁnite, the evaluation of q
We start by looking at the second issue ﬁrst. Such an is-
sue has a long tradition in relational databases where indeed
one allows only for FOL queries that are “domain indepen-
In our context, a FOL query q is domain inde-
dent” [1].
pendent if for each pair of FOL interpretations I1 and I2,
respectively over domains ΔI1 ⊆ Δ and ΔI2 ⊆ Δ, for
which RI1
Ki for all atomic relations RKi , we have
Ki
that eval (q, I1) = eval (q, I2). We say that an EQL-Lite(Q)
query q is domain independent if its corresponding query q
is so. Domain independent FOL queries correspond to rela-
tional algebra queries (i.e., SQL queries) and several syntactic
sufﬁcient conditions have been devised in order to guarantee
domain independence, see e.g., [1]. Such syntactic conditions
can be directly translated into syntactic conditions on EQL-
Lite(Q) queries.

= RI2

As for the other issue, let Σ be a DL KB and  a query
of the embedded query language Q. We say that  is Σ-
range-restricted if ans(, Σ) is a ﬁnite set of tuples. By ex-
tension, an EQL-Lite(Q) query is Σ-range-restricted if each
of its epistemic atoms involves a Σ-range-restricted query. In
fact, the following proposition holds.
Proposition 7 Let Σ be a DL KB and  a Σ-range-restricted
query in the embedded query language Q. Then ans(, Σ) ⊆
adom(Σ) × · · · × adom(Σ). where adom(Σ) is the set of all
constants explicitly appearing in Σ.
Indeed, if a constant not appearing in Σ occurs in ans(, Σ),
then one can substitute such a constant with any other con-

FOL

stant not appearing in Σ, still getting a tuple in ans(, Σ).
Thus, ans(, Σ) would be inﬁnite.

Obviously it is of interest ﬁnding simple syntactic condi-
tions that guarantee range-restrictedness. Here we give just a
trivial one, which is however quite practical in several cases.
Assume that we can introduce a new concept Adom in the
DL KB Σ and assert for each constant c occurring in Σ the
ABox assertion Adom(c). Moreover, let’s require that all
queries in Q must be of the form Adom((cid:3)x) ∧ [(cid:3)x], where (cid:3)x =
(x1, . . . , xn) and Adom((cid:3)x) = Adom(x1) ∧ · · · ∧ Adom(xn).
Then trivially all queries in Q are Σ-range-restricted.

Now, if we consider EQL-Lite(Q) queries that are both do-
main independent and Σ-range-restricted, then we can effec-
tively use the theorem above to compute the certain answers.
Moreover we can give a computational complexity character-
ization of query answering for EQL-Lite(Q) queries.

Let Q be an embedded query language, DL a DL, and
CQ,DL the data complexity (i.e., the complexity measured in
the size of the ABox only) of query answering for Σ-range-
restricted queries of Q over KBs Σ expressed in DL.2 We
know that evaluating a domain independent FOL query over
a given FOL interpretation is LOGSPACE in data complex-
ity [1], and, by our assumptions, computing whether a tuple
of constants is in the relation corresponding to the extension
of an epistemic atom, can be done in CQ,DL in data com-
plexity. Hence, we immediately derive the following result on
the data complexity of answering domain independent and Σ-
range-restricted EQL-Lite(Q) queries, where we denote with
C C2
the class of languages recognized by a C1-Turing Ma-
chine that uses an oracle in C2.
Theorem 8 Let Σ be a KB expressed in the DL DL,
and q a domain independent and Σ-range-restricted EQL-
Lite(Q) query over Σ. Then, answering q over Σ is in
CQ,DL with respect to data complexity, where
LOGSPACE
CQ,DL is the data complexity of answering Σ-range-
restricted queries of Q over KBs Σ expressed in DL.

1

q2

and q3

in Example 4 are
Example 9 Queries
EQL-Lite(Q) queries, where Q is the language of con-
junctive queries (in fact, for q3, Q is the language of atomic
queries).
It is easy to verify that both such queries are
domain independent, and that both are Σ-range-restricted
for the KB Σ given in Example 4.
In fact q2 and q3 are
Σ-range-restricted for KBs Σ expressed (in practice) in any
standard DL (indeed, the set ans(PARENT(x, y), Σ) may
never be inﬁnite).

4 Case studies

We discuss now several notable applications of the above re-
sults on EQL-Lite(Q) for speciﬁc combinations of the DL
used to express the KB and of the embedded query language
Q. Below, we implicitly refer to domain independent EQL-
Lite(Q) queries only.

2As usual, when we speak about complexity of query answering,
we actually mean the complexity of the associated recognition prob-
lem: i.e., checking whether a tuple of constants is in the answer to a
query [1].

IJCAI-07

277

SHIQ KBs and queries with embedded concept and
role expressions. We consider the case in which KBs are
speciﬁed in the expressive DL SHIQ [11] (or equivalently,
DLR [7]), and the embedded query language Q is that of Σ-
range restricted SHIQ concept and role expressions. Note
that this case is very signiﬁcant in practice since it captures
in particular the form of queries supported by the Racer and
Pellet systems [10; 18].
Indeed, such queries are conjunc-
tive queries over SHIQ concept and role expressions, in
which, however, the existential quantiﬁcation ranges over the
named individuals in the ABox only. Now it turns out that
such queries correspond to conjunctions of Σ-range-restricted
SHIQ concept and role expressions preﬁxed by the K oper-
ator. Since instance checking in SHIQ is coNP-complete
with respect to data complexity [13], by Theorem 8 we get
that in this case answering such queries, as well as every
EQL-Lite(Q) query, is in LOGSPACE
with respect to data
complexity.

N P

DLR KBs and queries with embedded unions of conjunc-
tive queries. We consider the case in which KBs are again
speciﬁed in an expressive DL like DLR or ALCQI, and the
embedded query language is that of Σ-range-restricted unions
of conjunctive queries (UCQs),
i.e., we consider queries
expressed in EQL-Lite(UCQ). Notice that the language of
UCQs is currently the most expressive subset of FOL for
which query answering over KBs in an expressive DL, such
as DLR, is known to be decidable [7], and in fact coNP-
complete with respect to data complexity [16]3. From this
characterization, and by applying again Theorem 8, we get
that answering Σ-range-restricted EQL-Lite(UCQ) queries
over DLR KBs is again in LOGSPACE
with respect to
data complexity.

N P

PTIME-complete DLs for KBs and queries. Next we
consider the case in which KBs are speciﬁed in a PTIME-
complete DL, such as Horn-SHIQ [13] or EL [3], and the
embedded query language Q is that of Σ-range-restricted
Horn-SHIQ (resp., EL) concepts and role expressions. In
this case, from Theorem 8, we get that answering Σ-range-
restricted EQL-Lite(Q) queries is in PTIME (and, in fact
PTIME-complete) with respect to data complexity.

In all the cases
Epistemic embedded query languages.
above the embedded query language consists of objective for-
mulas. However, this does not need to be the case in general.
Let us, for example, consider KBs consisting of ABoxes ex-
pressed in the basic DL ALC and embedded queries consist-
ing of concepts and roles expressed in ALCK [8], i.e., ALC
extended with the K operator. Then, since instance checking
in ALCK concept and roles in ALC ABoxes can be done in
PSPACE [8], by Theorem 8 we get that, in this case, answer-
ing EQL-Lite(Q) queries is in PSPACE as well.

3We have considered here DLR and ALCQI rather than
SHIQ, since the data complexity for answering UCQs containing
transitive roles is still open.

DL-Lite KBs and queries with embedded unions of con-
junctive queries. Finally, we study the case in which KBs
are speciﬁed using DLs of the DL-Lite family [5; 6] and
the embedded query language Q for EQL-Lite(Q) queries is
again that of UCQs.

The DL-Lite family [5; 6] is a family of DLs speciﬁcally
tailored to deal with large amounts of data (i.e., ABoxes).
While the expressive power of the DLs in the DL-Lite fam-
ily is carefully controlled to admit tractable query answering,
such DLs are expressive enough to capture the main notions
(though not all, obviously) of both ontologies, and of con-
ceptual modeling formalisms used in databases and software
engineering (i.e., ER and UML class diagrams). Below, for
simplicity, we denote by DL-Lite any DL that is a member of
the DL-Lite family.

Answering UCQs in DL-Lite is in LOGSPACE with respect
to data complexity4. Moreover, as a result of the tightly con-
trolled expressive capabilities, we get the following.
Proposition 10 Let Σ be a DL-Lite KB, and let  be a UCQ
over Σ. Then,  is Σ-range-restricted.

As a consequence of Theorem 8 and of membership in
LOGSPACE of the problem of answering UCQs over DL-
Lite KBs, we get that moving from UCQs to EQL-Lite(UCQ)
does not change the data complexity of the query answering
problem.

independent EQL-
Theorem 11 Answering
Lite(UCQ) queries in DL-Lite is in LOGSPACE with
respect to data complexity.

domain

In fact we can reﬁne such a result by resorting to the no-
tion of FOL-reducibility [6].
Intuitively, FOL-reducibility
means that query answering can be reduced to evaluating
FOL queries over a ﬁnite FOL interpretation corresponding
to the ABox (which we assume contains assertions involv-
ing only atomic concepts and roles/relations) of a DL KB.
All members of the DL-Lite family enjoy FOL-reducibility
of UCQs [6]. We now show that FOL-reducibility holds also
for domain independent EQL-Lite(UCQ) queries. Given an
ABox A involving membership assertions on atomic con-
cepts and roles only, we deﬁne the interpretation IA as fol-
lows:

– aIA = a for each constant a,
– AIA = {a | A(a) ∈ A} for each atomic concept A, and
– P IA = {(a1, a2) | P (a1, a2) ∈ A} for each atomic role

P .

Then, answering queries in a query language L (contained
in EQL) over a KB expressed in a DL DL is FOL-reducible
if for every query q ∈ L and every TBox T expressed in
DL, there exists a FOL query rdc(q) such that for every
ABox A, we have that ans(q, (T , A)) = eval (rdc(q), IA).
Observe that FOL-reducibility is a very meaningful property
from a practical point of view. Indeed, in all such cases in
which query answering can be reduced to evaluation of a do-
main independent FOL query, then such a query can be ex-
pressed in relational algebra, i.e., in SQL. Therefore, query

4It is easy to see that all results for CQs in [5; 6] can be immedi-

ately extended to UCQs.

IJCAI-07

278

answering can take full advantage of optimization strategies
provided by current DBMSs (which can be put in charge of
managing ABoxes in secondary storage). As shown in [5;
6], this property holds for answering of UCQs over DL-Lite
KBs. Now, it turns out that the possibility of processing
queries by relying on DBMSs technology still holds for EQL-
Lite(UCQ) queries over DL-Lite KBs.

Theorem 12 Answering EQL-Lite(UCQ) queries in DL-Lite
is FOL-reducible. Moreover, if the EQL-Lite(UCQ) query q
is domain independent, then rdc(q) is so as well.
As a consequence, to answer EQL-Lite(UCQ) queries in DL-
Lite, we can rely on traditional relational DBMSs.

5 Constraints
In this section we discuss an application of EQL-Lite(Q) to
modeling integrity constraints in DL KBs. Indeed, we argue
that, in the spirit of [17], a Boolean (i.e., of arity 0) EQL-
Lite(Q) query can be seen as an integrity constraint.

In particular, a DL KB Σ = (T , A) (where T is a TBox
and A is an ABox) satisﬁes an integrity constraint γ ex-
pressed as a Boolean EQL-Lite(Q) query if ans(γ, Σ) = true,
γ. Also, Σ satisﬁes a set C of integrity constraints
i.e., Σ |=
if for all γ ∈ C, ans(γ, Σ) = true.

EQL

With this notion in place, we can revise the notion of DL
KB: a DL KB with constraints is a triple (T , A, C), where
T is a TBox, A is an ABox, and C is a set of integrity con-
straints expressed in EQL-Lite(Q). The semantics of such a
DL KB Σ = (T , A, C) is deﬁned simply by specifying the set
of models of Σ as follows:

(cid:2)

Mod (Σ) =

Mod ((T , A)),
∅,

if (T , A) satisﬁes C
otherwise

We say that a DL KB with constraints Σ is satisﬁable if
Mod (Σ) is non-empty. Notably, the results presented in the
previous sections provide several cases where checking satis-
ﬁability of DL KBs with constraints can be effectively done,
and the data complexity of such a check is fully characterized.
Also, the notions of Σ-interpretation, logical implication,
and certain answers of EQL queries, easily extend to DL KBs
with constraints, as well as all complexity results for query
answering in the new setting.

6 Conclusions
Motivated by various needs related to querying DL KBs, we
have proposed the query language EQL, based on a variant of
the well-known ﬁrst-order modal logic of knowledge/belief.
Then, we have studied a subset of this language, called EQL-
Lite(Q), arguing that it allows for formulating queries that are
interesting both from the expressive power point of view, and
from the computational complexity perspective. Finally, we
have investigated the properties of EQL-Lite(Q) for various
interesting cases.

We are currently working on EQL-Lite(Q) for DL-Lite
KBs, for the case where Q is the query language whose
queries are either UCQs or comparison atoms involving val-
ues taken from a set of given domains, and we are currently
implementing such an extended language within an existing
DL reasoning system [2].

References
[1] S. Abiteboul, R. Hull, and V. Vianu. Foundations of

Databases. Addison Wesley Publ. Co., 1995.

[2] A. Acciarri, D. Calvanese, G. De Giacomo, D. Lembo,
M. Lenzerini, M. Palmieri, and R. Rosati. QUONTO:
QUerying ONTOlogies. In Proc. of AAAI 2005, pages
1670–1671, 2005.

[3] F. Baader, S. Brandt, and C. Lutz. Pushing the EL en-
velope. In Proc. of IJCAI 2005, pages 364–369, 2005.

[4] F. Baader, D. Calvanese, D. McGuinness, D. Nardi, and
P. F. Patel-Schneider, editors. The Description Logic
Handbook: Theory, Implementation and Applications.
Cambridge University Press, 2003.

[5] D. Calvanese, G. De Giacomo, D. Lembo, M. Lenzerini,
and R. Rosati. DL-Lite: Tractable description logics
for ontologies. In Proc. of AAAI 2005, pages 602–607,
2005.

[6] D. Calvanese, G. De Giacomo, D. Lembo, M. Lenzerini,
and R. Rosati. Data complexity of query answering in
description logics. In Proc. of KR 2006, pages 260–270,
2006.

[7] D. Calvanese, G. De Giacomo, and M. Lenzerini. On
the decidability of query containment under constraints.
In Proc. of PODS’98, pages 149–158, 1998.

[8] F. M. Donini, M. Lenzerini, D. Nardi, W. Nutt, and
A. Schaerf. An epistemic operator for description log-
ics. Artiﬁcial Intelligence, 100(1–2):225–274, 1998.

[9] R. Fikes, P. Hayes, and I. Horrocks. OWL-QL: A lan-
guage for deductive query answering on the semantic
web. J. of Web Semantics, 2(1), 2005.

[10] V. Haarslev, R. M¨oller, and M. Wessel. A high perfor-
mance semantic web query answering engine. In Proc.
of DL 2005, 2005.

[11] I. Horrocks and U. Sattler. A description logic with tran-
sitive and inverse roles and role hierarchies. J. of Log.
and Comp., 9(3):385–410, 1999.

[12] G. E. Hughes and M. J. Cresswell. A Companion to

Modal Logic. Methuen, London, 1984.

[13] U. Hustadt, B. Motik, and U. Sattler. Data complexity
In

of reasoning in very expressive description logics.
Proc. of IJCAI 2005, pages 466–471, 2005.

[14] H. J. Levesque. Foundations of a functional approach
to knowledge representation. Artiﬁcial Intelligence,
23:155–212, 1984.

[15] H. J. Levesque and G. Lakemeyer. The Logic of Knowl-

edge Bases. The MIT Press, 2001.

[16] M. M. Ortiz, D. Calvanese, and T. Eiter. Data com-
plexity of answering unions of conjunctive queries in
SHIQ. In Proc. of DL 2006, 2006.

[17] R. Reiter. What should a database know? J. of Logic

Programming, 14:127–153, 1990.

[18] E. Sirin and B. Parsia. Pellet system description.

In

Proc. of DL 2006, 2006.

IJCAI-07

279

