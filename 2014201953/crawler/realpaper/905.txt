A Primitive Based Generative Model

to Infer Timing Information in Unpartitioned Handwriting Data

Ben H Williams, Marc Toussaint and Amos J Storkey

Edinburgh University
School of Informatics
ben.williams@ed.ac.uk

Abstract

Biological movement control and planning is based
upon motor primitives. In our approach, we pre-
sume that each motor primitive takes responsibil-
ity for controlling a small sub-block of motion,
containing coherent muscle activation outputs. A
central timing controller cues these subroutines of
movement, creating complete movement strategies
that are built up by overlaying primitives, thus cre-
ating synergies of muscle activation. This partition-
ing allows the movement to be deﬁned by a sparse
code representing the timing of primitive activa-
tions. This paper shows that it is possible to use
a factorial hidden Markov model to infer primitives
in handwriting data. The variation in the handwrit-
ing data can to a large extent be explained by timing
variation in the triggering of the primitives. Once
an appropriate set of primitives has been inferred,
the characters can be represented as a set of tim-
ings of primitive activations, along with variances,
giving a very compact representation of the charac-
ter. The model is naturally partitioned into a low
level primitive output stage, and a top-down primi-
tive timing stage. This partitioning gives us an in-
sight into behaviours such as scribbling, and what
is learnt in order to write a new character.

Introduction

1
Biological systems are strongly superior to current robotic
movement control systems, despite having very noisy sen-
sors, and unpredictable muscles. Therefore, the amount and
nature of pre-planning in biological movement is extremely
interesting. Strong evidence exists to suggest that biological
motor control systems are modularised, with motor primitives
ﬁrst being conclusively found in frogs [Bizzi et al., 1995;
d’Avella and Bizzi, 2005; d’Avella et al., 2003], where stim-
ulation of a single spinal motor afferent triggered a complete
sweeping movement of the frog’s leg. For a review of mod-
ularisation of motor control in the spine, see [Bizzi et al.,
2002].

Evidence suggests that once a particular subsection of
it cannot be unexpectedly

movement has commenced,

switched off. Rather, to quickly modify a movement trajec-
tory, the movement primitives are superimposed [Kargo and
Giszter, 2000].

A primitive in the handwriting domain will be a short time
extended block of pen motion, brought about by a corre-
sponding block of muscle activations. These blocks are su-
perimposed upon each other to create coherent movement -
in this case, a character.

To reliably model natural handwriting, we introduce a fully
generative model, allowing proper modelling of handwriting
variation and adaptation irrespective of the character drawn.
If the handwriting output is made up of primitive type sub-
blocks then the generative model must represent these primi-
tives, to allow it to efﬁciently model the internal handwriting
encoding.

In section 2, we introduce our generative handwriting
model based on primitives in terms of a factorial hidden
Markov model. Section 3 covers the generalisation over the
timing of primitives to create a timing model. In section 4
we present some typical samples, and the results of using this
model, and ﬁnally the discussion is in section 5.

2 Model
A generative handwriting model must be capable of reproduc-
ing the class of characters upon which it has been trained. As-
suming that all motor commands are made up of motor primi-
tives, handwriting must therefore contain projections of these
primitives. Assuming also that motor primitives are ﬁxed, or
adaptable over long time scales, any short term adaptability
and learning must come from the timing and selection of dif-
ferent primitives.

Assuming the individual primitives are independent of
each other, and are linearly superimposed, a controller to se-
lect primitive onset timing is necessary, similar in nature to a
Piano Model, where key pressing controls the onset of time
extended clips of sound that the listener hears as a superim-
posed waveform.
2.1 A Deterministic Piano Model
To formalise this model in a generative way, the output of the
system Y at time t is deﬁned as

Y (t) =

αmnWm(t − τmn) ,

(1)

(cid:2)

m,n

IJCAI-07

1119

factor is in state i and zero otherwise. This allows us to write
t (cid:4), which is also the
expectations of the hidden states as (cid:3)Sm
probability distribution over the individual states Sm
t . Each
latent factor is a Markov chain deﬁned by the state transition
probabilities and the initial state distribution as

t = i| Sm

i

,

P (Sm

P (Sm

1 = i) = πm

t−1 = j) = P m
i,j ,

(4)
where πm is a K-dimensional parameter vector giving the
initial hidden state distribution, and P m is a K×K parameter
matrix denoting the state transition probabilities. As can be
seen in Figure 1, each factor is independent. This means that
the joint probability distribution can be factorised as
P ({Yt, St}) = P (S1)P (Y1|S1)

P (St|St−1)P (Yt|St)

T(cid:3)

t=2

M(cid:3)

=

πmP (Y1|S1)

T(cid:3)

M(cid:3)

(5)
P mP (Yt|St) .

m=1

t=2

m=1

(6)
Given the fully parameterised modelling framework, learn-
ing of the parameters can be done using an Expectation-
Maximisation (EM) method. The structured variational ap-
proximation was chosen for the E-step inference. For more
details on the various arguments for and against this choice,
refer to [Ghahramani and Jordan, 1997], which provides de-
tails about the fHMM model, and the learning procedure.

The EM method is an iterative algorithm, in which the E-
step infers the expectations of the hidden states given a set of
parameters, then the M-step updates the parameters to their
maximum-likelihood values, given the inferred hidden state
distributions. In our case, the E-step ﬁts the primitives to the
data, inferring the primitive onset timings for each sample.
The M-step infers the shapes of the primitives. Some con-
straints were imposed upon the parameters, so that the primi-
tives progressed monotonically along their states, and that the
rest state for all primitives, gave a zero output contribution.

The fHMM can reconstruct the data by using a set of maxi-
mally statistically independent primitives, and the appropriate
hidden state values. Due to the constraints imposed upon the
hidden state transitions, these state values can be reduced to
a set of primitive activation timings, or spikes. Without this
spike timing information, the primitive model can still be run
separately, as can be seen in Figure 4, which can be thought
of as primitive babbling. To reconstruct a character, the prim-
itives need to be coordinated, and activated at the appropriate
times. This is achieved by introducing a separate part of the
model, the centralised timing controller.

3 Timing Model
The centralised timing controller must be capable of repro-
ducing spiking characteristics that in some areas of the char-
acter are variable, and others less so, both in time of spike,
and existence of spike. In other words, some primitives are
necessary, occurring in every character sample in roughly, but
not exactly the same place. Others occur occasionally in a re-
production, but not in every case. Crucially, on a short time

Figure 1: Graphical representation of a Factorial Hidden Markov
Model, showing the independence of the separate Markov chains.
Although the observable output is dependent upon the state of the
entire system, the internal states evolve with no interdependencies.
Sm

t denotes the hidden state vector at time t, in factor m.

where Wm(t) are the primitives, and τmn represents the time
of the nth activation of primitive m, and αmn deﬁnes the ac-
tivation strengths of the primitives. In this deﬁnition, m enu-
merates the primitives, whilst n enumerates the occurrence of
the primitive within the sample window, at time τmn.

Similar models have been used for modelling real piano
operation such as [Cemgil et al., 2005], where the transfer
from piano roll to sound uses note onset, and damping on-
set as key timing information for the reproduction of sound.
Also [Karklin and Lewicki, 2005] present a generative model
of speech waveforms, where their ‘Sparse Shiftable Kernel
Representation’ is similar in nature to the Piano Model pre-
sented here.

The data samples of handwritten characters are not seg-
mented or keyed to a common start point, apart from the pen
touching the paper. As this is not a reliable keying time for
primitive activation, a ﬂexible model must be used to infer the
primitives, which will not only infer the shape of the primi-
tives, but their timing onsets. We take the idea of the Piano
Model as a basis, but model it probabilistically using a facto-
rial hidden Markov model (fHMM).
2.2 Factorial Hidden Markov Model
A graphical model of the fHMM can be seen in Figure 1. At
each time step, the observable output Yt, a vector of dimen-
sion D, is dependent on M hidden variables S(1)
t . The
output is a multivariate Gaussian, such that

, .., Sm

t

Yt ∼ N (μt, C) ,

(2)
where C is a D × D parameter matrix of output covariance,
and

M(cid:2)

μt =

W mSm
t

m=1

(3)
is the D-dimensional output mean at time t. W m is a D × K
parameter matrix giving the output means for each factor m,
such that the output mean μt is a linear combination of its
columns weighted with the hidden state activations.

Each of the M hidden variables can be in K different
states. In equation (3) this is encoded in the K-dimensional
t,i = 1 if the m-th
state vector Sm

t using a 1-in-K code, i.e., Sm

IJCAI-07

1120

scale, there is heavy dependency between spikes, whereas on
the long term, they are simply dependent upon the character
being drawn.

We have chosen a stochastic Integrate and Fire (IF) model
for the generation of spikes, as this model has a local tempo-
ral dependency characteristic, and also allows variance in the
total number of spikes in a sample.

Integrate and Fire The Integrate and Fire (IF) model orig-
inates from simpliﬁed models of biological neurons. It treats
the neuron as a leaky capacitor, upon which a charge is built
up by the inputs, over time. Once the voltage across the ca-
pacitor reaches a noisy threshold level, the neuron ﬁres, pro-
ducing a spike at its output, and discharging the capacitor.
This means that, due to the leak term, over a long time scale,
the inputs at different times are independent, however, on a
short time scale, they are not, as it is the short-term running
sum of the inputs that causes the neuron to ﬁre. This is desir-
able for the primitive model, because the timing of a neces-
sary primitive can be variable in the character samples, how-
ever, the IF neuron will still ﬁre as long as it receives enough
inputs during its temporal memory window.

P (λm
P (λm

t |λm
t |λm

t ) is given by:
t − Lm
t ,

t−1 = 0) = P (λm
t−1 = 1) = I m

The most straight forward model using IF neurons is to
attribute one IF neuron to one primitive. The inputs to the
neurons will then determine the timing of the primitives and
thus the character that is written. For a particular primitive,
m, the probability of a spike at time t, P (λm
t−1) + I m

(7)
(8)
(9)
where I m
t are the input excitations, and Lm is a leak term pro-
portional to the accumulated probability. Therefore, given a
common set of primitives, a character is deﬁned by its tempo-
ral excitation matrix, I m
t , which parameterises the IF model.
This matrix is learnt from the spiking statistics of the charac-
ter training set, as seen below.

t − Lm
t ,
t = νP (λm
t−1),
Lm

t,1 = 1) which are the rows of P (Sm

During the E-step for the fHMM, the hidden state dis-
t ) is inferred. As the transition matrix is
tribution P (Sm
constrained so that the primitives progress monotonically
t ) can be sum-
through their states, the information in P (Sm
marised as the onset probabilities of the different primitives,
t ) for state 1, the ﬁrst
P (Sm
state in each primitive. For a set of primitives that ﬁt the data
well, these probabilities are close to zero or one, and form
a very sparse matrix containing spikes representing primitive
activation appropriate to reconstruct a single character sample
from the data set. It is effectively an average over the samples
of these spiking matrices that is needed to parameterise the IF
t,1 = 1) be
model, as I m
the posterior onset probability at time t of the mth primitive
for the n data sample.

t . For ease of notation, let τ m

t,n = P (Sm

To allow for differences in the start point time, and aver-
age speed of each character sample, two parameters are as-
sociated with each data sample, a temporal offset δtn and a
linear temporal stretching factor δln. These parameters are
optimised so that the τ m
t,n matrices for the nth sample best

ﬁt the average I m
t matrix that is constructed by taking linear
interpolations.
(cid:4)

t =
I m

,

kn = (t + δtn)δln.

(10)

More precisely, we optimize the temporal offset and strecht-
ing by iteratively ﬁnding δtn and δln via gradient ascent that
maximize the objective function

kn,n

n τ m
N

(cid:2)

τ m
kn,nI m
t

.

(11)

n,m,t

This ﬁnds an I m

t matrix that best reﬂects an average prim-
itive onset probability matrix, where t has a separate linear
shifting and stretching factor associated with it for each char-
acter sample, n. This is used to parameterise the IF model,
which generates the spike timing information needed to run
the fHMM generatively.
3.1
Implementation
Handwriting data were gathered using an INTUOS 3
WACOM digitisation tablet http://www.wacom.com/
productinfo/9x12.cfm. This provided 5 dimensional
data at 200Hz. The dimensions of the data were x-position,
y-position, pen tip pressure, pen tilt angle, and pen orienta-
tion (0-360◦). The normalised ﬁrst differential of the data
was used, so that the data mean was close to zero, providing
the requirements for the zero state assumption in the model
constraints (see section 2.2). Only 3 dimensions of the data
were used, x-position, y-position, and pressure, as the sig-
nal to noise ratio of the other two was too low to provide
usful data. The data collected were separated into samples,
or characters, for processing purposes, and then the parame-
ters were ﬁtted to the data using our algorithm. We generated
datasets of the characters ‘g’, ‘m’, ‘a’, ‘b’, ‘c’ and ‘d’. The ‘g’
character set was the largest character set, and can be found
at http://homepages.inf.ed.ac.uk/s0349619/
data/mixoutG.mat. The character sets ‘g’ and ‘m’ were
chosen to explore the differences in primitives inferred from
two contrasting characters, see Figure 4. The characters ‘a’,
‘b’, ‘c’ and ‘d’ were chosen to explore the sharing of prim-
itives between different characters, and the ability to create
distinct reconstructions, as seen in Figure 7.

Size
1292
125
296

Data set
‘g’
‘m’
‘abcd’
4 Results
A typical subset of primitives learnt via the fHMM from data
of g-characters are shown in Figure 2 demonstrating the vari-
ation in shape and length on the paper of the primitives when
reconstructed on their own. In this example, 20 primitives of
length 40 were used to model a data set of 1292 characters, of
average length 103.8. The average error of the reconstruction
in velocity space for the data was [0.0617 0.0601 0.0295].
Using these primitives, the fHMM model can reconstruct the
original character as shown in Figure 3 using the posterior
timings (cid:3)St(cid:4) that are inferred from the data in the E-step of

IJCAI-07

1121

Primitive Timing Data

Pen Space Reconstruction

Primitive Timing Data

Pen Space Reconstruction

.

o
n

 

e
v
i
t
i

m

i
r

P

2

4

6

8

10

12

14

16

18

20

←2

←20

←19←2←1←3←18
←6
←13

←9←7
←4

←20

←17

←14

←10

←6

←11

0

−0.1

−0.2

−0.3

−0.4

−0.5

−0.6

.

o
n

 

e
v
i
t
i

m

i
r

P

1

2

3

4

5

6

7

8

9

←6

←5

←2

←4

←2←9←6

←9

←7
←9

←4

←2←9←8

←3

0.3

0.2

0.1

0

−0.1

−0.2

−0.3

←1←4←7

−0.4

20

40

60

80

100

−0.3

−0.2

−0.1

0

Time /sample no.

20

40

60

80

100

120

Time /sample no.

−0.1

0

0.1

0.2

(a)

(b)

Figure 3: Two examples of character reconstructions, using timing information derived from the E-step inference. In both (a) and (b), the
timing information is shown on the left, and the reproduction of the sample on the right, with the onset of each primitive marked with an
arrow. In (a), 20 primitives of length 40 time steps were used to model the ‘g’ dataset, of over 1000 characters. In (b), 9 primitives of length
30 were used to model the ‘m’ dataset, of over 100 characters.

0.5

0

−0.5

−1

−1.5

−2

−2.5

−3

0.4

0.2

0

−0.2

−0.4

−0.6

−0.8

−3.5

−2.5

−2

−1.5

−1

(a)

−0.5

0

0.5

−1
−0.3

−0.2

−0.1

0

0.1

0.3

0.4

0.5

0.6

0.7

0.2

(b)

Figure 4: Two samples generated using primitives without speciﬁc timing information (neither the posterior timing nor a learnt timing
model). (a) was generated using primitives inferred from the ‘g’ dataset, (b) was generated using primitives from the ‘m’ dataset. Starting
point of both reconstructions is (0, 0).

IJCAI-07

1122

0.02

0

−0.02

x 10−3

0

−5

−10

−15

0.02

0.01

0

−0.01

0

0.02

0.04

0.06

−0.01

0

0.01

−0.04

−0.02

0

0

−0.01

−0.02

−0.03

−0.04

0

−0.01

−0.02

−0.03

−0.04

−0.04

−0.02

0

0.04

0.02

0

0.06

0.04

0.02

0

−0.02

−0.04

−0.06

−0.08

0

0.02

0.04

−0.08−0.06−0.04−0.02 0

0.04

0.02

0

0

0

0.02 0.04 0.06 0.08

−0.02

0

0.02

−0.06 −0.04 −0.02

0

Figure 2: A sample of 9 primitives used for the reconstruction in
Figure 3(a). The axis values refer to some normalised distance on
paper, as the primitives are shown as a reconstruction in pen-space,
rather than the raw data, which is in 3-dimensional velocity space.
As the data was normalised ignoring the physical size of the pixels,
it would be meaningless to provide units for the axes. Thickness
corresponds to pen pressure. Refer to section 3.1 for an explanation.

the primitive extraction stage. The timing information, seen
on the left of the Figures is a representation of the poste-
rior probabilities of onset of the primitives whilst reconstruct-
ing the data set. These probabilities are inferred during the
E-step, and reveal the expected hidden state values of the
fHMM. Furthermore, given a sufﬁcient set of common prim-
itives to model the data reliably, these probabilities can be
represented as spike timings, which provide a very compact
encoding of the character. This timing information can also
be modelled using a timing model, as investigated in Section
3. Here, no timing model was used or learnt. Without such a
timing model and without the hidden state posterior extracted
from the data, one can still run the primitive model gener-
atively, ignoring any precise timing information, and sam-
pling the model states from the priors, without calculating
the posterior distributions. The result is a random superposi-
tion of primitives producing a scribbling form of output such
as shown in Figure 4. Here it can be seen that the primitives,
even without precise timing information controlling their ac-
tivation, still generate samples that capture an aspect of the
training set from which they were extracted. Allowing the
temporal shifting and stretching as described in Section 3,
produces a distribution over spiking patterns, I m
t as can be
seen in Figure 5 for the ‘g’-dataset. Sampling from this dis-
tribution using our integrate and ﬁre approach as described
above, produces samples that reliably model the variation of
the data set, as can be seen in Figure 6. Clearly, these are
all examples of a character ‘g’, however, the pen trajectory is
vastly different in each example, reﬂecting the variance in the
original data set. Inferring primitives from a range of char-
acters is also possible. Figure 7 shows 4 different characters
all drawn using the same primitives. Despite the variation in
the characters of a particular alphabet, the actual hand move-
ments when controlling the pen are very similar, so it should
come as no surprise that it is possible to use the same primi-

5

10

15

20

25

20

40

60

80

100

120

140

160

180

200

Figure 5: A graphical representation of the distribution of spikes as
given by I m
t

for a ‘g’ character set.

0.1

0

−0.1

−0.2

−0.3

−0.4

−0.5

−0.6

−0.7

−0.8

50

100

150

200

−0.9

−0.6

−0.4

−0.2

0

0.2

0.4

0.2

0

−0.2

−0.4

−0.6

−0.8

5

10

15

20

25

5

10

15

20

25

0.2

0.1

0

−0.1

−0.2

−0.3

−0.4

−0.5

−0.6

−0.7

50

100

150

200

−0.8

−0.6

−0.4

−0.2

0

0.2

0.4

0.4

0.2

0

−0.2

−0.4

−0.6

−0.8

5

10

15

20

25

5

10

15

20

25

50

100

150

200

−1
−1

−0.5

0

0.5

50

100

150

200

−1
−0.6

−0.4

−0.2

0

0.2

0.4

Figure 6: Four samples generated from the full generative model
as given by the learnt primitives (the fHMM) and the timing model
parameterized by the spike distribution I m
t

(shown in Figure 5).

IJCAI-07

1123

Primitive Timing Data

Pen Space Reconstruction

Primitive Timing Data

Pen Space Reconstruction

.

o
n

 

e
v
i
t
i

m

i
r

P

.

o
n

 

e
v
i
t
i

m

i
r

P

5

10

15

20

25

5

10

15

20

25

0.2

0.1

0

−0.1

−0.2

←18

−0.3

←13←2

−0.4

−0.5

←22←23

←17

←16←17←27←19←9
←1←12

←5

←8←10

←12

←23

←27

←19
←10
←21
←3
←27←18
←6←2←23 ←1←8

←10←14

←20

20

40

60

80

100

120

−0.4

−0.3

−0.2

−0.1

0

Time /sample no.

Primitive Timing Data

Pen Space Reconstruction

0.3

0.2

0.1

0

−0.1

−0.2

−0.3

−0.4

−0.5

−0.6

←17

←9←19←13←5←8←14←22

←8←5←1

←12

←23

←9
←18←27←16
←3

←8

←2←20

←7

←19←1

←5←16←23←17←12←27
←14

←9

←19

←1 ←27←14←9

←17

←23

←3

←16

←12

←15

←13

←8←20←23←5←14

0.1

0

−0.1

−0.2

−0.3

−0.4

−0.5

−0.6

20

40

60

80

100

−0.2

−0.1

0

0.1

Time /sample no.

Primitive Timing Data

Pen Space Reconstruction

0.6

0.4

0.2

0

←18←3←19

−0.2

−0.4

←23←27←17←1←9←14←24

←12

←22

←16←23
←17
←13←22
←2

←5←8←12←23
←27
←10
←18

←15

←8←6
←1←24

←20

←16

←19

.
o
n
 
e
v
i
t
i

m

i
r

P

.

o
n

 

e
v
i
t
i

m

i
r

P

5

10

15

20

25

5

10

15

20

25

20

40

60

80

−0.4

−0.3

−0.2

−0.1

0

Time /sample no.

20

60

40
80
Time /sample no.

100

−0.4

−0.2

0

0.2

Figure 7: Four characters that have been reproduced using the same
set of primitives, learnt from a mixed character set.

tives to reconstruct different characters. The variation in the
characters must therefore be accounted for by the different
timings of the primitives.

5 Discussion
Using the fHMM framework to infer motor primitive repre-
sentations in handwriting data gives us primitives that can be
active at any point, that are statistically independent, and are
not limited to any particular section of character, or any sub-
set of characters.

The spike timing distribution that can be seen in Figure 5
may also be expressed in terms of a mixture of Gaussians,
where the mean of a Gaussian conveys the average timing of
a particular spike that is necessary to reproduce a character.
This would be a more compact encoding for a character, al-
though it would restrict the spike timing model to have the
same number of spikes for a particular primitive in all sam-
ples. The stochastic Integrate and Fire model allows variance
in the number of spikes, and includes the short term time
dependency that is necessary to produce meaningful spike
timings, however, the parameterisation matrix is much larger
than would be the case for a mixture of Gaussians.

Without the timing model, the primitives can still produce
output, by running the fHMM model generatively, and sam-
pling the hidden states at each time step, from the prior distri-
bution conditioned on the previous time step. This produces
an output sample that is similar to scribbling or doodling. Per-
haps when we are absent-mindedly doodling, it is a discon-
nection of the timing control part of our motor system from
the muscle output, or primitive section that produces these
scribbles. Intuitively, we are putting a pen in our hand, and
telling ourselves to write, but not dictating what exactly.

In this model, given a common set of primitives used to
control the complete set of possible movements, it is clearly
the timing model that is dictating what class of movement is
required. The spikes are the internal encoding of the move-
ment class. Using the spike timing representation of when the
primitives are triggered, allows a very compact representation
for a character. As a common set of primitives is capable of

reconstructing several different characters, the spike encod-
ing can therefore be divisive in differentiating one character
from another, and may therefore be useful for efﬁcient char-
acter recognition. The compact code would also be useful for
data storage and transmission, in much the same way as the
Ascii code allows efﬁcient transmission of printed characters,
a spike encoding could efﬁciently transmit handwritten ones.
This distributed model provides a framework both for
learning new character sets, and experimentation with primi-
tive shapes. It is possible that primitive shape is a personal at-
tribute, which may account for different handwriting styles. If
this is so, then an efﬁcient mapping from one style to another
may be possible. This hypothesis requires further research,
by examining the primitives inferred from different people’s
handwriting samples. Another hypothesis may be that dif-
ferent people have a different number or average length of
primitive, maybe this could account for more ‘messy’ styles
of handwriting.

Given a common set of primitives, the spike timings en-
code the movement, but this does not address learning new
movements. When we learn to write for instance, we must
either learn new primitives, or adapt old ones, or perhaps
some movements are simply not learnable or rather cannot
be encoded by a sparse spike representation. The adaptation
of primitives, and their association with learning new motor
skills would be a very interesting area to explore, with the
help of this model.

References
[Bizzi et al., 1995] E. Bizzi, S.F. Giszter, E. Loeb, F.A. Mussa-
Ivaldi, and P. Saltiel. Modular organization of motor behavior
in the frog’s spinal cord. Trends in Neurosciences, 18(10):442–
446, 1995.

[Bizzi et al., 2002] E. Bizzi, A. d’Avella, P. Saltiel, and M. Trensch.
Modular organization of spinal motor systems. The Neuroscien-
tist, 8(5):437–442, 2002.

[Cemgil et al., 2005] A. Cemgil, B. Kappen, and D. Barber. A gen-
erative model for music transcription. In IEEE Transactions on
Speech and Audio Processing, volume 13, 2005.

[d’Avella and Bizzi, 2005] A. d’Avella and E. Bizzi. Shared and
speciﬁc muscle synergies in natural motor behaviors. PNAS,
102(8):3076–3081, 2005.

[d’Avella et al., 2003] A. d’Avella, P. Saltiel, and E. Bizzi. Combi-
nations of muscle synergies in the construction of a natural motor
behavior. Nature Neuroscience, 6(3):300–308, 2003.

[Ghahramani and Jordan, 1997] Z. Ghahramani and M.I. Jordan.
Factorial hidden Markov models. Machine Learning, 29:245–
275, 1997.

[Kargo and Giszter, 2000] W.J. Kargo and S.F. Giszter. Rapid cor-
rections of aimed movements by combination of force-ﬁeld prim-
itives. J. Neurosci., 20:409–426, 2000.

[Karklin and Lewicki, 2005] Y. Karklin and M. S. Lewicki. A hi-
erarchical bayesian model for learning non-linear statistical reg-
ularities in non-stationary natural signals. Neural Computation,
17(2):397–423, 2005.

IJCAI-07

1124

