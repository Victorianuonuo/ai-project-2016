Integrity and Change in Modular Ontologies 

Heiner Stuckenschmidt  and  Michel Klein 

Vrije Universiteit Amsterdam 

de Boelelaan 1081a, 1081HV Amsterdam 

{heiner, michel.klein}@cs.vu.nl 

Abstract 

The benefits of modular representations arc well 
known from many areas of computer science.  In 
this paper, we concentrate on the benefits of mod(cid:173)
ular ontologies with respect to local containment 
of terminological reasoning. We define an archi(cid:173)
tecture for modular ontologies that supports local 
reasoning by compiling implied subsumption rela(cid:173)
tions. We further address the problem of guaran(cid:173)
teeing the integrity of a modular ontology in the 
presence of local changes. We propose a strategy 
for analyzing changes and guiding the process of 
updating compiled information. 

Introduction 

1 
Currently,  research in the area of the semantic web is in 
a state where ontologies are ready to be applied in real 
applications  such  as  semantic  web  portals,  information 
retrieval or information integration.  In order to lower the 
effort of building ontology-based applications, there is a clear 
need for a representational and computational infrastructure 
in terms of general purpose tools for building, storing and 
accessing ontologies.  A number of such tools have been 
developed, i.e. ontology editors, reasoning systems and more 
recently storage and query systems.1  Most of these tools, 
however, treat ontologies as monolithic entities and provide 
little support for specifying, storing and accessing ontologies 
in a modular manner. 

for connecting these natural modules is a prerequisite for 
easy maintenance [Heflin and Hendler, 2000]. 

Large Ontologies:  Modularization  also  helps  to  manage 
very large ontologies we find for example in medicine 
or biology. Here modularity helps to maintain and reuse 
parts of the ontology as smaller modules are easier to 
handle than the complete ontology [Rector, 2003]. 

Efficient Reasoning:  A specific problem that occurs in the 
case of distributed and large models is the problem of 
efficient reasoning.  The introduction of modules with 
local semantics and clear interfaces will help to develop 
efficient reasoning methods [Mcllraith and Amir, 2001]. 

1.2  Requirements 
There are a couple of requirements a modular ontology archi(cid:173)
tecture has to fulfill in order to improve ontology maintenance 
and reasoning in the way suggested above. The requirements 
will be the main guidelines for the design of our solution pro(cid:173)
posed in this work. 
Loose Coupling: In general, we cannot assume that two on(cid:173)
tology modules have anything in common. This refers 
to the conceptualization as well as the specific logical 
language used for the interpretation of objects, concepts 
or relations. 

Self-Containment: In order to facilitate the reuse of individ(cid:173)

ual modules we have to make sure that modules are self-
contained. In especially, the result of certain reasoning 
tasks such as subsumption or query answering within a 
single module should be possible without having to ac(cid:173)
cess other modules. 

1.1  Why Modularization ? 
There are many reasons for thinking about ontology modular(cid:173)
ization. Our work is mainly driven by three arguments. These 
also bias the solution we propose, as it is aimed at improving 
the current situation with respect to the following aspects. 
Distributed Systems: In highly distributed systems such as 
the semantic web, modularity naturally exists in terms of 
physical location. Providing interfaces and mechanisms 
'An extensive overview is provided in the Onto Web deliv(cid:173)

erable, available at http: //www.ontoweb.org/download/ 
deliverables/D13_vl-0.zip. 

Integrity:  Having  self-contained  ontology  modules  may 
lead to inconsistencies that arise from changes in other 
ontology modules. We have to provide mechanisms for 
checking whether relevant knowledge in other systems 
has changed and for updating our modules accordingly. 

1.3  Our Approach 
In the following, we describe our approach to ontology modu(cid:173)
larization on an abstract level. We emphasize the main design 
decisions and motivate them on the basis of the requirements 
defined above. The technical details of the approach will be 
given in the following sections. 

900 

ONTOLOGIES AND FOUNDATIONS 

View-Based Mappings:  We  adopt  the  approach  of view-
based information integration.  In particular,  ontology 
modules are connected by conjunctive queries. This way 
of connecting modules is more expressive than simple 
one-to-one mappings between concept names but less 
expressive than the logical  language used to describe 
concepts. We decide to sacrifice a higher expressiveness 
for the sake of conceptual simplicity and desirable se(cid:173)
mantic properties such as independence of the ontology 
langauge used. 

Compilation of Implied Knowledge:  In order to make  lo(cid:173)
cal reasoning independent from other modules, we use 
a knowledge compilation approach. The idea is to com(cid:173)
pute the result of each mapping query off-line and add 
the result as an axiom to the ontology module using the 
result. During reasoning, these axioms replace the query 
thus enabling local reasoning. 

Change Detection and Automatic Update:  Once  a  query 
has been compiled, the correctness of reasoning can only 
be guaranteed as long as the concept hierarchy of the 
queried ontology module does not change.  In order to 
decide whether the compiled axiom is still valid, we pro(cid:173)
pose a change detection mechanism that is based on a 
taxonomy of ontological changes and their impact of the 
concept hierarchy. 

The rest of the work is organized as follows. In section 2 
we provide a definition of ontology modules based on a min(cid:173)
imal notion of ontologies that fixes important properties we 
will use later on while leaving as much freedom for specific 
implementations as possible.  Section 3  introduces our ap(cid:173)
proach to self-containment in terms of compiled knowledge. 
The remainder of the paper is devoted to the problem of de(cid:173)
tecting changes and preserving integrity amongst modules in 
a system. 
2  Modular Ontologies 
Before we start investigating the problem of change and in(cid:173)
tegrity, we define the notion of modular ontology we will use 
as a basis for our technical results. 
2.1  Modules and Queries 
A number of languages for encoding ontologies on the Web 
have been proposed (see [Gomez-Perez and Corcho, 2002] 
for an overview). In order to get a general notion of ontolog(cid:173)
ical knowledge, we define the general structure of an onto(cid:173)
logical module and its instantiation independent of a concrete 
language. 
Definition 1 (Ontology Module) A module is a triple M â€” 

where C is set of concept definitions, 11 is a set of 

relation  definitions  and  is a set of object definitions. Fur(cid:173)
ther,  we  define  the  signature  of  a  module  to be a 
triple 
where CM is the set of all names of 
concepts defined in C, TIM the set of all relation names in R 
and Rthe set of all object names occurring in 

variables in a query may only be instantiated objects in that 
ontology. 

The  fact that all  conjuncts relate to elements of the on(cid:173)
tology allows us to determine the answer to ontology-based 
queries in terms of instantiations of the query that are logical 
consequences of the knowledge base. 

Internal and External Definitions 

2.2 
The notion of module and query given above is a quite stan(cid:173)
dard ones.  What makes up a modular ontology now, is the 
possibility to use ontology-based queries in order to define 
concepts in one module in terms of a query over another mod(cid:173)
ule. For this purpose, we divide the set of concepts in a mod(cid:173)
ule into internally defined concepts C1 and externally defined 
concepts CE resulting into the following definition of C: 

(1) 
Internally defined concepts are specified by using concept 
expressions in the spirit of description logics  [Baader et ai, 
2003]. We do not require a particular logic to be used. 
Definition 3 (Internal Concept Definition)  An 
internal 
concept definition is an axiom of one of the following forms 
and D is  concept 
expression of the form 
where the terms are 
either concept names or concept expressions and  is an 
n-ary concept building operator 

where 

Besides this standard way of defining concepts, we con(cid:173)
sider  externally  defined  concepts  that  are  assumed  to  be 
equivalent to the result of a query posed to another module 
in the modular ontology.  This way of connecting modules 
is very much in spirit of view-based information integration 
which is standard technique in the area of database systems 
[Halevy, 2001].  The choice of conjunctive queries for con(cid:173)
necting different modules is motivated by the trade-off be(cid:173)
tween expressiveness of the mapping and conceptual as well 
as computational simplicity.  Our approach is more expres(cid:173)
sive than simple one-to-one mappings; having more complex 
mappings would contradict the principle of loose coupling of 
different modules. 
Definition 4 (External Concept Definition)  An 
concept definition is an axiom of the form:  C  =  M  : 
Where M is a module and is an ontology-based query over 
the signature of M. 

external 

A modular ontology is now simply defined as a set of mod(cid:173)
ules that arc connected by external  concept definitions.  In 
particular we require that all external definitions are contained 
in the modular system. 

Queries over ontological knowledge are defined as con(cid:173)
junctive queries, where the conjuncts are predicates that cor(cid:173)
respond to concepts and relations of an ontology.  Further, 

2Note that this may include data-type expressions as the type 

itself is can be considered to be a concept, the actual value a member 
of that concept and the comparison operator a special relation. 

ONTOLOGIES AND FOUNDATIONS 

901 

Definition 5 (Modular Ontology)  A  modular  ontology 

is a set of modules such that for each 

externally 
ofM. 

defined 

concept 

is also member 

We will use this notion of a modular ontology in the follow(cid:173)
ing to investigate the problem of integrity of logical reasoning 
across modules. 

2.3  Semantics and Logical Consequence 
We define a model-based semantics for modular ontologies 
using the notion of a distributed interpretation proposed by 
[Borgida and Scrafini, 2002] in the context of distributed de(cid:173)
scription logics: 
Definition 6 (Distributed Interpretation) A distributed in(cid:173)
terpretation 
consists  of  interpretations  for the individual module M1 
over  domains  such that: 

of  modular ontology 

The  assumption  of disjoint  interpretation  domains  again 
reflects  the  principle  of loose  coupling  underlying  our ap(cid:173)
proach. Based on the notion of a distributed interpretation we 
can define a model of a modular ontology as an interpretation 
that satisfies the constraints imposed by internal and exter(cid:173)
nal concept definitions.  In contrast to [Borgida and Scrafini, 
2002], we do not introduce special operators for defining the 
relations between different domains, we rather interpret exter(cid:173)
nal concept definitions as constraints on the relation between 
the domains: 
Definition 7 (Logical Consequence) A distributed interpre(cid:173)
is a model for  modular  ontology  ,  if for every 
tation 
module  Mt  we  have 
for every concept definition C in 
M1  where  is defined as follows. 

denotes the interpretation of the set of answers to 

Here 
query  An axiom A logically follows from a set of axioms 
S  if 
this  fact  by  S  A. 

implies  A for every model  We denote 

S 

The  actual  definitions  of concepts  impose  further  con(cid:173)
straints on the interpretation of a modular ontology.  For the 
case of internally defined concepts, these constraints are pro(cid:173)
vided by the definition of concept building operators of de(cid:173)
scription logics.  For the case of externally defined concepts, 
the situation is more complicated and will be discussed in 
more details in the next section. 

3  Compilation and Local Reasoning 
Using the notion of logical consequence defined above, we 
now turn our attention to the issue of reasoning in modular 
ontologies.  For the sake of simplicity, we only consider the 
interaction between two modules in order to clarify the basic 
principles. Further, we assume that only one of the two mod(cid:173)
ules contains externally defined concepts in terms of queries 
to the other module. 

Implied Subsumption 

3.1 
As mentioned in the  introduction,  we are interested in the 
possibility  of performing  local  reasoning.  For the  case  of 
ontological reasoning, we focus on the task of deriving im(cid:173)
plied subsumption relations between concepts within a single 
module.  For the case of internally defined concepts this can 
be done using well established reasoning methods [Donini et 
al., 1996]. Externally defined concepts, however, cause prob(cid:173)
lems: being defined in terms of a query to the other module, 
a local reasoning procedure will often fail to recognize an 
implied subsumption relation between these concepts.  Con(cid:173)
sequently, subsumption between externally defined concepts 
requires reasoning in the external module as the following 
theorem shows. 
Theorem 1 (Implied Subsumption)  Let E1 and E2 be two 
concepts in module Mt that are externally defined in module 

by queries 

The result presented above implies the necessity to decide 
subsumption between conjunctive queries in order to identify 
implied  subsumption  relations  between  externally  defined 
concepts.  In order to decide subsumption between queries, 
we translate them into internally defined concepts in the mod(cid:173)
ule they refer to. A corresponding sound and complete trans(cid:173)
lation is described in [Horrocks and Tessaris, 2000].  Using 
the resulting concept definition, to which we refer as query 
concepts, we can decide subsumption between externally de(cid:173)
fined concepts by local reasoning in the external ontology. 

3*2  Compilation and Integrity 
We can avoid the need to perform reasoning in external mod(cid:173)
ules each time we perform reasoning in a local module us(cid:173)
ing the idea of knowledge compilation [Cadoli and Donini, 
1997].  The  idea of compilation  is to perform the external 
reasoning once and add the derived subsumption relations as 
axioms to the local module.  These new axioms can then be 
used for reasoning instead of the external definitions of con(cid:173)
cepts.  This set of additional axioms can be computed using 
Algorithm 1. 

If we want to use the compiled axioms instead of external 
definitions, we have to make sure that this will not invalidate 
the correctness of reasoning results.  We call this situation, 
where the compiled results are correct as integrity.  We for(cid:173)
mally define integrity as follows: 

902 

ONTOLOGIES AND  FOUNDATIONS 

The same observations can be made for a relation before 
and after a change, denoted as R and R! respectively.  The 
next question is how these different types of changes influ(cid:173)
ences the interpretation of query concepts. We take advantage 
of the fact that there is a very tight relation between changes 
in concepts of the external ontology and implied changes to 
the query concepts using these concepts: 

the 

Proof 2 (Sketch)  The  idea  of the proof is  the following: 
form  Con-
Queries  contain  conjuncts  of 
juncts of the first form are interpreted as 
It 
directly follows that changing the interpretation of the con(cid:173)
cept C referred to in a conjunct of this type leads to the same 
change on the interpretation of the conjunct and because con(cid:173)
junction is interpreted as set intersection the whole query. 
Conjuncts of the second type are interpreted as 

The variable  can be further constraint by 
a conjunct of the first type. Again changes in the interpre(cid:173)
tation of the concept that further restricts y have the same 
effect on possible interpretations of  and therefore also on 
the interpretation of conjuncts of the second type. Using the 
same argument, we see that making R more general/specific 
(allowing more/less tuples in the relation) makes conjuncts 
of the second form more general/specific. Using these ba(cid:173)
sic conclusions, we can proof the lemma by induction over 
the lengths of the path in the dependency graph of the query 
where nodes represent conjuncts and arcs co-occurrence of 
variables. 

We can exploit this relation between the interpretation of 
concepts and queries in order to identify the effect of changes 
in  the  external  ontology  on  the  subsumption  relations  be(cid:173)
tween  different  query  concepts.  First  of all  the  above  re(cid:173)
sult directly generalizes to multiple changes with the same 
effect, i.e. a query  becomes more general(specific) or stays 
the  same  if none  of the  elements  in 
become 
more specific(gencral). Further, the subsumption relation be(cid:173)
tween two query concepts does not change if the more gen-
eral(specific) query becomes even more general(specific) or 
stay the same. Combining these two observations, we derive 
the following characterization of harmless change. 

Definition 8 (Integrity) We consider integrity of two ontol(cid:173)
ogy  modules 
Mc is the result of replacing the set of external concept defi(cid:173)
nitions in M by compile 

f w h e re 

to be present 

i

At the time of applying the compilation this is guaranteed 
by theorem 1, however, integrity cannot be guaranteed over 
the complete life-cycle of the modular ontology. The problem 
is, that changes to the external ontology module can invalidate 
the compiled subsumption relationships. In this case, we have 
to perform an update of the compiled knowledge. 
4  Change Robustness 
In principle,  testing integrity might be very costly as it re(cid:173)
quires reasoning  within the  external  ontology.  In order to 
avoid this, we propose a heuristic change detection procedure 
that analyzes changes with respect to their impact on com(cid:173)
piled subsumption relations. Work on determining the impact 
of changes on a whole ontology  is reported in  [Heflin and 
llcndler, 2000]. As our goal is to determine whether changes 
in the external ontology invalidates compiled knowledge, we 
have to analyze the actual impact of changes on individual 
concept definitions.  We want to classify these changes as 
either harmless or harmful with respect to compiled knowl(cid:173)
edge. 

4.1  Determining Harmless Changes 
As  compiled  knowledge  reflects  subsumption  relations 
between  query  concepts,  a  harmless  change  is  a  set  of 
modifications  to  an  ontology  that  does  not  change  these 
subsumption relations. Finding harmless changes is therefore 
a  matter  of deciding  whether  the  modifications  affect  the 
subsumption relation between query concepts.  We first look 
at the effect of a set of modifications on individual concepts: 

Assuming that C represents the concept under considera(cid:173)
tion before and 
the concept after the change there are four 
ways in which the old version C may relate to the new version 

1. the meaning of concept is not changed: 

(e.g. 
because the change was in another part of the ontology, 
or because it was only syntactical); 

2.  the meaning of a concept is changed in such a way that 

concept becomes more general: 

3.  the meaning of a concept is changed in such a way that 

concept becomes more specific: 

4.  the meaning of a concept is changed in such a way that 

there is no subsumption relationship between C and 

ONTOLOGIES AND FOUNDATIONS 

903 

The  theorem provides  us  with  a  correct but incomplete 
method for deciding whether a change is harmless. This basic 
method can be refined by analyzing the overlap of 
and 
in combination with the relations they restrict.  This 
more accurate method is not topic of this paper, but it relies 
on the same idea as the theorem given above. 

4.2  Characterizing Changes 
Now we are able to determine the consequence of changes 
in the concept hierarchy on the integrity of the mapping, we 
still need to know what the effect of specific modifications on 
the interpretation of a concepts is (i.e.  whether it becomes 
more general or more specific).  As our goal is to determine 
the integrity of mappings without having to do classification, 
we describe what theoretically could happen to a concept as 
result of a modification in the ontology.  To to so, we have 
listed all possible change operations to an ontology according 
to the OWL-lite3 knowledge model in the same style as done 
in iBanerjce et al,  1987].  The list of operations is extend(cid:173)
able to other knowledge models; we have chosen the OWL-
lite model because of its simplicity and its expected impor(cid:173)
tant role on the Semantic Web.  Apart from atomic change 
operations to an ontology â€” like add range restriction or 
delete subclass relation â€” the list also contains some com(cid:173)
plex change operations, which consist of multiple atomic op(cid:173)
erations and/or incorporate some additional knowledge. The 
complex changes are often more useful to specify effects than 
the basic changes.  For example, for operations like concept 
moved  up,  or domain  enlarged,  we can  specify the effect 
more accurately than for the atomic operations subclass rela(cid:173)
tion changed and domain modified4. Atomic changes can be 
detected without using the knowledge in the ontology itself, 
only using the knowledge of the knowledge model, i.e.  the 
language.  These changes are detected at a structural level. 
To identify complex changes, we also need to use the con(cid:173)
tent of the ontology itself. We are currently working on rules 
and heuristics to distill complex changes from sets of atomic 
changes [Klein and Noy, 2003].  Table 1 contains some ex(cid:173)
amples of operations and their effect on the classification of 
concepts. The table only shows a few examples, although our 
full ontology of change operations contains around 120 oper(cid:173)
ations. This number is still growing as new complex changes 
arc defined. A snapshot of the change ontology can be found 
online.5  The specification of effects is not complete, in the 
sense that it describes "worst case" scenario's, and that for 
some operations the effect is "unknown" (i.e. unpredictable). 
In contrast to [Franconi et al., 2000] who provides complete 
semantics of changes we prefer to use heuristics in order to 
avoid expensive reasoning about the impact of changes. 

3See  http://www.w3  . org/TR/owl- features/. 
4For  a  complete 

list,  see  http://wonderweb.man.ac. 

uk/deliverables/D20.shtml. 

5 h t

t p :

/

/ o n t o v i e w . o r g / c h a n g e s / 1 / 3/ 

[  Operation 

Attach a relation to concept C 
Complex. Change the superclass of concept 
C to a concept lower in the hierarchy 
Complex.  Restnct the range of a relation R 
(efleet on all C that have a restriction on R) 
Remove a superclass relation of a concept C 
Change  the  concept  definition  of  C  from 
primitive to defined 
Add a concept definition A 

1  Complex  Add a (not further specified) sub(cid:173)

class A of C 
Define a relation R as functional 

|  Effect 

C:  Specialized 
C:  Specialized 

R: Specialized, 
C:  Specialized 
C. Generalized 
C: Generalized 

C:  Unknown 
C: No effect 

/?: Specialized 

Table 1:  Some modification to an ontology and their effects 
on the classification of concepts in the hierarchy. 

4.3  Update Management 
With the elements that we described in this section, we now 
have a complete procedure to determine whether compiled 
knowledge in other modules is still valid when the external 
ontology is changed. The complete procedure is as follows: 

1. create a list of concepts and relations that are part of the 

"subsuming" query of any compiled axiom; 

2.  create another list of concepts and relations that are part 

of the "subsumed" query of any compiled axiom; 

3.  achieve the modifications that are performed in the ex(cid:173)

ternal ontology; 

4.  use the modifications to determine the effect on the in(cid:173)

terpretation of the concept and relations. 

5.  check whether there arc concepts or relations in the first, 
"subsuming", list that became more specific, or concepts 
or relations in the second, "subsumed", list that became 
more general, or concepts or relations in any of the lists 
with an unknown effect; if not, the integrity of the map(cid:173)
ping is preserved. 

Algorithm 2 Update 
Require:  Ontology Module M 
Require:  Ontology Module 

for all compiled axioms 

if effect on C is 'generalized' or 'unknown' then 

_ 
do 

do 

for all  X 

end if 
end for 
for all  X 

if effect on X is 'specialized' or 'unknown' then 

do 

end if 
end for 

end for 

We describe the procedure in a more structured way in Al(cid:173)
gorithm  2.  The algorithm triggers a (re-)compilation  step 
only if it is require in order to resume integrity.  Otherwise 

904 

ONTOLOGIES AND  FOUNDATIONS 

no action is taken, because the previously compiled knowl(cid:173)
edge is still valid. All the steps can be automated. A tool that 
1 Lutein et at., 
2002].  This tool will compare two versions of an ontology 
and derive the list of change operations that is necessary to 
transform the one into the other. It will also be able to detect 
some of the complex operations. The tool will also annotate 
the definitions in an ontology with the effect that the change 
has on its place in the hierarchy. 
5  Conclusions 
There is a growing need for applying the principle of mod(cid:173)
ularity to representations of ontological knowledge in order 
to facilitate the creation, maintenance and re-use of knowl(cid:173)
edge.  This paper contributes to the development of a theory 
of modular ontologies, focussing on the issue of reasoning in 
modular ontologies that change over time. The contributions 
of this paper is three-fold: 

1. We propose an architecture for modular ontologies and 
analyze the role of mappings in logical reasoning across 
modules. 

2.  We  describe  a  knowledge  compilation  approach  that 
makes local reasoning within modules possible and de(cid:173)
fine the notion of integrity. 

3.  We develop an update strategy that preserves integrity by 
identifying changes in ontology modules and deciding 
whether the compiled knowledge has to be updated or 
not. 

We think that the approach described meets the practical 
needs of creating and using ontologies without missing a for(cid:173)
mal underpinning. It uses well-established representations of 
ontological knowledge and a rather simple and intuitive rep(cid:173)
resentation of mappings. Further, all of the supporting meth(cid:173)
ods described can be automated in order to assist ontology 
engineers and developers of ontology-based systems. We de(cid:173)
liberately chose to make some simplifications in order to be 
able to develop concise methods. First of all, these simplifica(cid:173)
tions concern the restriction to a system of only two modules 
and the use of a rather weak heuristic for determining the ef(cid:173)
fect of changes on compiled knowledge.  In future work, we 
will investigate the impact of these simplifications and try to 
develop a more complete theory of the interaction  in com(cid:173)
plex systems of modules and of the impact of changes on de(cid:173)
rived knowledge. Further one can as well imagine an external 
definition  of relations  using  conjunctive  queries  with  more 
than one free variable and reducing implied subsumption to 
the general problem of query containment under constraints 
[Calvanese et al., 1998]. 
References 
[Baadert et al,,2003] F. Baader, D. Calvanese, D. McGui-
ness, D. Nardi, and P. Patel-Schneider, editors.  The De(cid:173)
scription Logic Handbook - Theory, Implementation and 
Applications. Cambridge University Press, 2003. 

[Banerjee et al, 1987]  Jay Banerjee, Won Kim, Hyoung-Joo 
Kim, and Henry F. Korth.  Semantics and Implementa(cid:173)
tion of Schema Evolution  in Object-Oriented Databases. 

S1GMOD Record (Proc. Conf. on Management of Data), 
16(3):311-322, May 1987. 

[Borgida and Serafini, 2002]  A.  Borgida  and  L.  Serafini. 
Distributed  description  logics:  Directed  domain  corre(cid:173)
spondences in federated information sources. In Proceed(cid:173)
ings of the Intenational Conference on Cooperative Infor(cid:173)
mation Systems, 2002. 

[Cadoli and Donini, 1997]  M. Cadoli and F.M.  Donini.  A 
survey on knowledge compilation.  Al Communications, 
10(3-4):137~150, 1997. 

[Calvanese etai, 1998]  Diego Calvanese, Giuseppe De Gi-
acomo,  and Maurizio Lenzerini.  On the decidability of 
query containment under constraints. In Proc. of the 17th 
ACM SIGACT S1GMOD S1GART Sym. on Principles of 
Database Systems (PODS '98), pages 149-158, 1998. 

[Donini et al, 1996]  F.M.  Donini,  M.  Lenzerini,  D. Nardi, 
and A. Schaerf.  Reasoning in description logics.  In Ger(cid:173)
hard Brewka, editor, Principles of Knowledge Representa(cid:173)
tion, pages 193-238. CSL1 Publications, 1996. 

[Franconi et al, 2000]  Enrico Franconi,  Fabio Grandi,  and 
Federica  Mandreoli.  A  semantic  approach  for  schema 
evolution and versioning in object-oriented databases.  In 
Computational Logic 2000, number 1861 in Lecture Notes 
in Computer Science, pages 1048 - 1062, 2000. 

[Gomez-Perez and Corcho, 2002]  A.  Gomez-Perez  and 
O.  Corcho.  Ontology  langauges  for the  semantic  web. 
IEEE Intelligent Systems, January/February:54-60, 2002. 
[Halevy, 2001]  A.Y. Halevy. Answering queries using views: 

A survey. The VLDB Journal, 10(4):270-294, 2001. 

[Hefiin and Hendler, 2000]  Jeff Hcflin  and  James  Hcndlcr. 
Dynamic ontologies on the web.  In Proceedings of the 
Seventeenth National Conference on Artificial Intelligence 
(AAAI-2000), pages 443-449. AAA1/MIT Press, Menlo 
Park, CA, 2000. 

[llorrocks and Tessaris, 2000] 1. Horrocks and S. Tessaris. A 
conjunctive query  language for description logic aboxes. 
In AAAI/IAAI, pages 399-404, 2000. 

[Klein and Noy, 2003]  Michel  Klein  and  Natalya  F.  Noy. 
A  component-based  framework  for  ontology  evolution. 
Technical  Report  IR-504,  Department of Computer Sci(cid:173)
ence, Vrije Universiteit Amsterdam, March 2003. 

[Klein et al., 2002]  Michel Klein, Atanas Kiryakov, Damyan 
Ognyanov, and Dieter Fensel.  Ontology versioning and 
change detection on the web.  In 13th International Con(cid:173)
ference on Knowledge Engineering and Knowledge Man(cid:173)
agement (EKAW02), Siguenza, Spain, October 1-4, 2002. 
[Mcllraith and Amir, 2001]  S. Mcllraith and E. Amir. Theo(cid:173)
rem proving with structured theories.  In B. Nebel, editor, 
Proceedings ofIJCAI'01, pages 624-634, San Mateo, Au(cid:173)
gust 2001. Morgan Kaufmann. 

[Rector, 2003] A. Rector. Modularisation of domain ontolo(cid:173)
gies  implemented  in  description  logics  and  related  for(cid:173)
malisms including OWL. In Proceedings of the 16th In(cid:173)
ternational FLAIRS Conference. AAA1, 2003. 

ONTOLOGIES AND  FOUNDATIONS 

905 

