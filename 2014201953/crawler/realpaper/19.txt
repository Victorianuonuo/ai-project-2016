Sequential-Simultaneous Information Elicitation in Multi-Agent Systems

Gal Bahar and Moshe Tennenholtz

Faculty of Industrial Engineering and Management

Technion–Israel Institute of Technology

Haifa 32000, Israel

Abstract

We introduce a general setting for information elic-
itation in multi-agent systems, where agents may be
approached both sequentially and simultaneously
in order to compute a function that depends on their
private secrets. We consider oblivious mechanisms
for sequential-simultaneous information elicitation.
In such mechanisms the ordering of agents to be
approached is ﬁxed in advance. Surprisingly, we
show that these mechanisms, which are easy to rep-
resent and implement are sufﬁcient for very general
settings, such as for the classical uniform model,
where agents’ secret bits are uniformly distributed,
and for the computation of the majority function
and other classical threshold functions. Moreover,
we provide efﬁcient algorithms for the veriﬁcation
of the existence of the desired elicitation mecha-
nisms, and for synthesizing such mechanisms.

1 Introduction
Information elicitation in multi-agent systems deals with the
aggregation of information from agents in order to compute a
desired function [Conen and Sandholm, 2001; Sunderam and
Parkes, 2003; Parkes, 1999; Boutilier et al., 2003; Smorodin-
sky and Tennenholtz, 2004; Shoham and Tennenholtz, 2002;
McGrew et al., 2003; Halpern and Teague, 2004].
In the
general setting we consider in this paper there are n agents
(players) who hold some private information (secrets). The
agents would like to compute, jointly, a function which in-
put is the vector of n secrets.1 In addition, there exist a dis-
tinguished reliable agent (aka the center), who may be used
for extracting information from the agents. The center’s aim
is to devise a mechanism that will yield to the desired com-
putation. In this paper we consider a strategic setting. We
assume that the agents are selﬁsh and are driven by utility
maximization considerations. On one hand, they would like
to receive the value of the multi-party computation, but on the
other hand they may not want to contribute to this computa-
tion, but rather free-ride on other agents’ efforts. Hence, our

1This setting is fundamental not only to AI, but to computer sci-

ence in general; see the discussion in [Linial, 1994].

setting ﬁts into the context of mechanism design (see [Mas-
Colell et al., 1995], Vol. 23), a subject of great interest to the
synergy between AI and game theory (see [Monderer et al.,
2000]).

The particular (although general) setting we study is the
following. Each agent has a secret which is accessible only
to him. However, access to that secret is costly and agents
may choose to access it or not. Thus accessing one’s own
private information becomes a strategic question. This ap-
proach generates a natural tension between the socially (and
even privately) optimal action, which is to compute the joint
function correctly, and agents’ incentive to free ride. In order
to overcome this tension one may need to design a mecha-
nism to prevent (some or all) agents from free-riding, elicit
agents’ secrets and execute the desired computation.

As in previous work in this regard (e.g.

[Smorodinsky
and Tennenholtz, 2004]) the class of functions we consider is
that of anonymous functions. An anonymous function is one
where the function’s value does not depend on the identity of
the agents but on the secrets only. In other words, a permu-
tation of the agents’ secrets will not change the value of the
function. This class of functions is quite elementary and often
used in models. Among the anonymous functions are major-
ity, consensus, average, variance, order statistic, percentile
and more.

Previous work has shown the power of sequential informa-
tion elicitation. By approaching the agents sequentially, we
can in some cases incent agents to access their secrets, where
they would not do so if approached simultaneously. The ba-
sic intuition behind this approach is that some agents may be
willing to access their secrets since this is not too costly for
them, while others will not agree to access their secrets un-
less they are pivotal (given that their costs for accessing their
secrets is high). Sequential mechanisms take advantage of
this structure, by carefully selecting the identity of the agent
to be approached at each point, given the available informa-
tion.
In this paper we consider a more general approach:
agents can be approached both simultaneously and sequen-
tially. That is, we consider sequential mechanisms where at
each point a set of agents is approached. The decision on the
set of agents to be approached is based on the available in-
formation. As it can be shown (and is illustrated in Section
2) this kind of mechanisms, which we refer to as sequential-
simultaneous mechanisms, allows more effective information

elicitation than either sequential or simultaneous information
elicitation. The major aim of this paper is to identify condi-
tions for the existence of successful sequential-simultaneous
elicitation mechanisms, and devising algorithms which out-
put the desired mechanism when exist.

As the reader would notice, our objective is quite ambi-
In particular, a sequential-simultaneous mechanism
tious.
may be a complex decision tree, which maps any possible
history observed to the set of agents to be approached given
that history. This gives rise to the idea of considering a partic-
ular kind of such mechanisms, which we refer to as Oblivious
Mechanisms. In an oblivious mechanism the ordering of the
agents is ﬁxed in advance and does not depend on previous
history. Naturally, if successful elicitation can be established
by such a mechanism, then it is also easy to represent and im-
plement. This leads to two types of fundamental questions:

1. Can one provide an efﬁcient algorithm for check-
ing whether, given an information elicitation setting,
a desired oblivious sequential-simultaneous elicitation
mechanism exist? If one exists, can we provide an ef-
ﬁcient procedure which will output the desired mecha-
nism?

2. Are there natural and general settings where the restric-
tion to oblivious mechanisms does not prevent us from
the desired elicitation?

The surprising message of this paper is that we can pro-
vide highly positive and encouraging answers to both ques-
tions! We ﬁrst prove that if there is an appropriate oblivious
mechanism then there is also one which uses a semi-natural
ordering, i.e.
the mechanism will never approach an agent
with cost c before it approaches an agent with cost c0 < c
(although it may approach them simultaneously). Then we
show an efﬁcient algorithm for verifying whether a desired
(oblivious) semi-natural ordering mechanism exists; if such
mechanism exists, then the desired ordering is obtained as
our algorithm’s output. Then, we show that the restriction to
(oblivious) semi-natural ordering mechanism does not restrict
the power of elicitation in some of the most popular contexts.
In particular, we show that this holds for the uniform setting
(where each agent’s secret bit is taken to be 0 or 1 with prob-
ability 0.5 each), as well as for the classical majority function
and for more general threshold functions. Together, this pro-
vides a most powerful and general approach to information
elicitation in multi-agent systems, backed up with efﬁcient
and effective algorithms.

In Section 2 we introduce the general model, and general
sequential-simultaneous mechanisms. We also brieﬂy illus-
trate the power that these mechanisms buy us when compar-
ing to previous studies where purely sequential or purely si-
multaneous mechanisms have been considered. In Section 3
we introduce oblivious mechanisms. We then show an efﬁ-
cient algorithm for verifying the existence of an appropriate
oblivious elicitation mechanism, and show that a semi-natural
ordering mechanism can be computed as the desired result, if
such oblivious mechanism exists. We also remark (by means
of example) that there are cases where the restriction to obliv-
ious mechanisms may prevent us from obtaining the desired
computation; this leads to the study of settings where the ex-

istence of a desired elicitation process implies that it can be
done by a corresponding oblivious mechanism, which we can
efﬁciently compute. The uniform model is discussed in Sec-
tion 4, and the majority function, as well as extensions to
other threshold functions are discussed in Section 5. In all
cases efﬁcient algorithms are provided.

The proofs of many of our results are non-trivial, and are
based on a series of propositions that are omitted from this
version of the paper due to lack of space.

2 The General Model
Let N=f1,....,ng, n (cid:21) 2, be a ﬁnite set of agents. Each agent
j has a private secret sj 2 f0; 1g that he may compute (i.e.
access in order to learn its value). Let 0:5 (cid:20) q < 1 be the
prior probability of sj = 12 and assume these events are in-
dependent. Agents may compute their own secrets. How-
ever, computation is costly and agent j pays cj (cid:21) 0 for
computing sj. Without loss of generality we shall assume
c1 (cid:20) c2 (cid:20) : : : (cid:20) cn (in words, agents are ordered by their
costs). We will also refer to the agents’ costs, ordered from
the lowest one to the highest one, as c(0); c(1); : : : ; c(n(cid:0)1).

Agents are interested in computing some joint binary pa-
rameter (e.g., the majority vote or whether they have a con-
sensus) that depends on the vector of private inputs. Let
G : f0; 1gn ! f0; 1g denote the desired computation. Each
agent j has a utility of vj from learning the value of G. We
assume vj (cid:21) cj, otherwise the agent face no dilemma.

.

It is also possible to use the convention that vj = 1. This
is done without loss of generality, as the more general case
where vj > cj > 0, is equivalent to the case where the value
of agent j is 1 but the cost is cj
vj

A central designer, termed the center, elicits the agents’ se-
crets, computes G and reports the computed value of G back
to each agent. In this setup each agent faces a dilemma of
whether to compute his private secret sj, at a cost of cj, or
perhaps to submit a guess to the central designer. The de-
sired property of a mechanism is the correct computation of
G, which is done through the elicitation of secrets from sufﬁ-
ciently many agents.

One should note that the cost of each agent’s computation,
cj, is lower than the gain from computing G, and therefore
the socially optimal outcome is to compute. However, free
riding of agents may undermine the ability to reach the social
optimum.

2.1 Sequential-Simultaneous mechanisms
We now model mechanisms that approach players sequen-
tially, with the possibility to approach simultaneously more
than one player each time. We will assume that the commu-
nication between the center and the agents is fully revealed
to all agents. This can be associated with having broadcast
communication.

A sequential-simultaneous mechanism determines the set
of agents to be approached at each stage, as a function
of the information provided so far. Formally, let Hi =

2This is done wlog and for purposes of exposition. The case

where q < 0:5 is treated similarly.

f(a1; b1); (a2; b2); : : : ; (ai; bi)jai (cid:20) n; 81 (cid:20) k < i : ak <
ak+1; 81 (cid:20) k < i : bk (cid:20) bk+1; 81 (cid:20) k < i : ak+1 (cid:0) ak (cid:21)
bk+1 (cid:0) bkg where v = (j; l) stands for the event where j
agents have been approached and l 1’s (and j (cid:0) l 0’s) have
been reported. Hi is the set of histories of length i, for
1 (cid:20) i (cid:20) n. Let H0 = (cid:3), where (cid:3) is the empty (null)
history. Let H = Sn
i=0 Hi be the set of all possible his-
tories . A sequential-simultaneous mechanism is a triplet
(u,g,f) where u : H ! f1; 2; : : : ; ng determines how many
agents to approach simultaneously, g : H ! 2N deter-
mines the agents to be approached, and f : H ! f0; 1; (cid:3)g
is a function that expresses a decision about whether to halt
and output either 0 or 1, or continue the elicitation process
(denoted by *). Note that each agent has 6 actions: Don’t
compute and report 0, Don’t compute and report 1, Com-
pute and report 0, Compute and report 1, Compute and re-
port the true computed value, and Compute and report a
false value. Let us denote by (cid:0) the set of actions. A strat-
egy for player j, xj : H ! (cid:0), assigns an action to each
possible history. Let h(k)(x1; : : : ; xk(cid:0)1; xk+1; : : : ; xn; S) be
the history that agent k sees when approached, given that
(x1; : : : ; xk(cid:0)1; xk+1; : : : ; xn) is the vector of strategies of the
other agents and S is the vector of secrets. Let xk(h(k)) be the
strategy of agent k according to the history h(k) he sees when
approached. Let x1
k(h(k)) = 1 if and only if the action of
agent k according to the history h(k) is to compute the secret,
k(h(k)) = 1 if and only if
otherwise x1
k(h(k)) = 0. We get that the
agent k reports ”1”, otherwise x0
utility for agent k according to the strategies and the secrets
is: uk(x1; : : : ; xn) = [P rob(G(x0
n(h(n))) =
3. An equilibrium for
G(S)] (cid:0) [P rob(x1
k(h(k))) = 1] (cid:1) ck
the mechanism A, is a vector of n strategies, (x1; : : : ; xn),
such that each agent’s strategy is the best response against
the other agents’ strategies. That is, for each agent k and
k of agent k: ui(x1; : : : ; xk; : : : ; xn) (cid:21)
for each strategy x0
k; : : : ; xn). We seek mechanisms which can
ui(x1; : : : ; x0
compute the true value of G in equilibrium.
it
is required that a mechanism computes G with certainty.
Therefore we seek mechanisms that induce sufﬁciently many
agents to access and reveal their secrets, in order for G to be
computed. Note that in many cases G may be computed with
partial information. For example, in the case of a consensus
function it is sufﬁcient to elicit information sequentially until
we get two different replies, which are truthful.

k(h(k)) = 0, and let x0

1(h(1)); : : : ; x0

In fact,

Given a particular q and c1; : : : ; cn, a mechanism A is ap-
propriate for G, if there exists an equilibrium where G can
surely be computed for all vector of agents’ secrets. Such
an equilibrium is referred to as a computing equilibrium. An
algorithm is appropriate if it induces an appropriate mecha-
nism.

Let G be an anonymous function. Consider the directed
graph G0 = (V 0; E0) where the set of nodes is V 0 = f(i; k) :
i; k 2 Z+; 0 (cid:20) k (cid:20) i (cid:20) n (cid:0) 1g, and the set of edges is, E 0 =
f((i; k); (i + 1; k)) : 0 (cid:20) i (cid:20) n (cid:0) 2; k (cid:20) ig Sf((i; k); (i +
1; k + 1)) : 0 (cid:20) i (cid:20) n (cid:0) 2; k (cid:20) ig.

3The probability distribution is induced by the distribution over

S, and q.

Intuitively, this graph describes the possible states of infor-
mation, when approaching agents while computing the value
of an anonymous function, and the possible state transitions.
Every state describes how many agents have been approached
and how many 1’s have been heard so far. Let (cid:22)G = ( (cid:22)V ; (cid:22)E)
be the graph induced by reducing G0 to include only nodes
where the value of the function G can not be determined yet.
When referring to a node v, we will abuse notation and refer
also to v as an event. Namely, the event v = (j; l) stands for
the case that j agents have been approached and l 1’s (and
j (cid:0) l 0’s) have been reported.

For every node v in (cid:22)G we deﬁne the following. Let
piv(v; G) = P rob(Zijv), where Zi is the event that agent
i is pivotal for the function G. Notice that since G is an
anonymous function P rob(Zijv) is the same for each agent
i and therefore piv(v; G) is uniquely deﬁned. When G is
clear from the context then denote it piv(v). Note that if
v =2 (cid:22)V , i.e.
it is already possible to compute the value of
G, then piv(v) = 0. Let Cmax(v) (cid:17) M axfc j 1 (cid:0) c (cid:21)
piv(v) (cid:1) q + (1 (cid:0) piv(v)) (cid:1) 1g. The left side of the above
inequality is the utility for an agent with cost c from ap-
proaching his secret assuming all other agents approach their
secrets. The right side is the utility for the agent when he
doesn’t approach the secret (assuming all other agents ap-
proach their secrets) and guess ”1”, which is the best choice
for him in this case (since q (cid:21) 0:5). This inequality implies
that: c (cid:20) 1 (cid:0) (1 (cid:0) piv(v)) (cid:0) q (cid:1) piv(v). This implies that c (cid:20)
(1 (cid:0) q) (cid:1) piv(v). Hence we get: Cmax(v) = (1 (cid:0) q) (cid:1) piv(v).
Notice that Cmax(v) is the maximal cost for which it is still
rational to access the secret given the information v (assum-
ing the others access their secrets).

The following example illustrates why is it useful to use
sequential-simultaneous mechanisms. Consider the follow-
ing setup. Let G be the majority function, n = 3, q = 0:7,
and c(0) = 0:12; c(1) = 0:12; c(2) = 0:29. We can show:
given the above setup there exists a sequential-simultaneous
mechanism which is appropriate. On the other hand, given
the above setup there does not exist a sequential mechanism
which is appropriate. It is also the case that approaching all
agents simultaneously is not appropriate.

3 Oblivious mechanisms
An oblivious mechanism is a mechanism that partition the
agents to groups and each time approach the agents from
one group simultaneously without dependency on the his-
tory. Both the groups and the ordering between the groups
are determined in advance. That is, the agents are partitioned
into groups: A1; A2; :::At: such that: St
i=1 Ai = f1; 2; ::; ng
,
8 1 (cid:20) i 6= j (cid:20) t : Ai T Aj = ; where the group
A1 of agents is approached ﬁrst, and afterwards the group
A2 of agents is approached, and so on until the group At of
agents is approached. However, if after a group of agents is
approached and reveal their secrets, the event is such that it is
already possible to determine the value of the function, then
the mechanism stops.

Given a function G, agents’ costs c(0) (cid:20) c(1) (cid:20) : : : (cid:20)
c(n(cid:0)1), and q, a semi-natural ordering mechanism is an obliv-
ious mechanism, where the agents are also sorted accord-

ing to their cost for accessing their secrets. That is, A1 =
fc(0); c(1); : : : ; c(jA1j(cid:0)1)g;
,A2 = fc(jA1j); c(jA1j+1); : : : ; c(jA1j+jA2j(cid:0)1)g; : : : ;
: : : ;
At(cid:0)1 = fc(jA1j+(cid:1)(cid:1)(cid:1)+jAt(cid:0)2j); c(jA1j+(cid:1)(cid:1)(cid:1)+jAt(cid:0)2j+1); : : : ;
c(jA1j+(cid:1)(cid:1)(cid:1)+jAt(cid:0)2j+jAt(cid:0)1j(cid:0)1)g;
At = fc(jA1j+(cid:1)(cid:1)(cid:1)+jAt(cid:0)1j); c(jA1j+(cid:1)(cid:1)(cid:1)+jAt(cid:0)1j+1); : : : ; c(n(cid:0)1)g

This section deals with the following: First we prove that
whenever there exists an oblivious mechanism which is ap-
propriate, there exists a semi-natural ordering mechanism
which is appropriate. We then address the problem of exis-
tence: We provide an efﬁcient algorithm, that given an anony-
mous function G, the ci’s, and q, will decide if there ex-
ist an oblivious mechanism which is appropriate. Moreover,
we provide an efﬁcient algorithm that induces an appropriate
oblivious mechanism whenever such a mechanism exist.

Given a function G, agents’ costs c(0) (cid:20) c(1) (cid:20) : : : (cid:20)

c(n(cid:0)1), and q, consider the following algorithm.

The Oblivious Mechanism Algorithm: (OMA)
(A) Build the graph G0 = (V 0; E0) of the function G

(B) Compute for every node v 2 V 0 : piv(v) and Cmax(v).
(C) Induce the graph (cid:22)G = ( (cid:22)V ; (cid:22)E) by reducing G0 to include
only nodes where the value of the function G can not be
determined yet.

(D) 8 0 (cid:20) k (cid:20) n (cid:0) 1 : let Lk = M infCmax(k; j)j(k; j) 2
(cid:22)V g i.e. Lk is the minimum Cmax among all the nodes
with the same depth k in (cid:22)G.

(E) Let i1 = 0:

i2 = M infjji1 < j (cid:20) n (cid:0) 1; Lj > Li1 g:
i3 = M infjji2 < j (cid:20) n (cid:0) 1; Lj > Li2 g:
:::
ir = M infjjir(cid:0)1 < j (cid:20) n (cid:0) 1; Lj > Lir(cid:0)1 g:
:::
ik = M infjjik(cid:0)1 < j (cid:20) n (cid:0) 1; Lj > Lik(cid:0)1g where ik
satisﬁes 8j : ik < j (cid:20) n (cid:0) 1 : Lj (cid:20) Lik

(F) Let g1 = i2 (cid:0) i1; g2 = i3 (cid:0) i2; : : : ; gr(cid:0)1 = ir (cid:0)

ir(cid:0)1; : : : ; gk(cid:0)1 = ik (cid:0) ik(cid:0)1; gk = n (cid:0) ik.

(G) Sort the agents according to their costs of getting to their

secrets and get: c(0) (cid:20) c(1) (cid:20) ::: (cid:20) c(n(cid:0)1)

(H) Check if the following set of conditions, marked as

Cond1, is satisﬁed: c(0); c(1); :::; c(g1(cid:0)1) (cid:20) Li1
c(g1); c(g1+1); :::; c(g1+g2(cid:0)1) (cid:20) Li2
c(g1+g2); c(g1+g2+1); :::; c(g1+g2+g3(cid:0)1) (cid:20) Li3
(cid:1) (cid:1) (cid:1)
c(g1+g2+:::+gk(cid:0)2); : : : ; c(g1+g2+(cid:1)(cid:1)(cid:1)+gk(cid:0)1(cid:0)1) (cid:20) Lik(cid:0)1
c(g1+g2+(cid:1)(cid:1)(cid:1)+gk(cid:0)2+gk(cid:0)1); : : : ; c(g1+g2+(cid:1)(cid:1)(cid:1)+gk(cid:0)1+gk (cid:0)1) (cid:20)
Lik

Consider the set of conditions Cond1 in step (H) of the
OMA above. We can now prove the following general results:
Theorem 3.1: Consider an anonymous function G, agents’
costs c(0) (cid:20) c(1) (cid:20) : : : (cid:20) c(n(cid:0)1), and q.
If there exists
an oblivious mechanism which is appropriate then Cond1 is
satisﬁed.

Theorem 3.2: Consider an anonymous function G, agents’
costs c(0) (cid:20) c(1) (cid:20) : : : (cid:20) c(n(cid:0)1), and q, if Cond1 is satisﬁed

then there exists a semi-natural ordering mechanism which is
appropriate.

Note that given an anonymous function function G, agents’
costs c(0) (cid:20) c(1) (cid:20) : : : (cid:20) c(n(cid:0)1), and q, if there exists a semi-
natural ordering mechanism which is appropriate then there
exists an oblivious mechanism which is appropriate. There-
fore, combining the above theorems and observations we get:
Theorem 3.3: Consider an anonymous function G, agents
costs c(0) (cid:20) c(1) (cid:20) : : : (cid:20) c(n(cid:0)1), and q. The three following
claims are equivalent: (1) There exists an oblivious mecha-
nism which is appropriate. (2) Cond1 is satisﬁed. (3) There
exists a semi-natural ordering mechanism which is appropri-
ate.

Now we can provide a complete efﬁcient procedure that
given a function G, agents’ costs c(0) (cid:20) c(1) (cid:20) : : : (cid:20) c(n(cid:0)1),
and q, will check if there exists an oblivious mechanism
which is appropriate. Moreover, if there exist an oblivious
mechanism which is appropriate, this procedure will induce
an appropriate semi-natural ordering mechanism. In order to
do so we repeat steps (A) - (G) of the OMA. Then, as in
step (H) of of OMA we check whether Cond1 is satisﬁed;
if Cond1 is not satisﬁed then the procedure will return ”there
isn’t any oblivious algorithm which is appropriate” and ﬁnish;
otherwise, if Cond1 is satisﬁed then the mechanism will ap-
proach the agents sequentially, in the following order, where
at each phase we approach simultaneously a set of agents as
described below (the agents are referred to by their costs):

(cid:15) c(0); c(1); :::; c(g1(cid:0)1):
(cid:15) c(g1); c(g1+1); : : : ; c(g1+g2(cid:0)1).
(cid:15) c(g1+g2); c(g1+g2+1); : : : ; c(g1+g2+g3(cid:0)1).
(cid:15) (cid:1) (cid:1) (cid:1)
(cid:15) c(g1+(cid:1)(cid:1)(cid:1)+gk(cid:0)2); c(g1+(cid:1)(cid:1)(cid:1)+gk(cid:0)2+1); : : : ;

c(g1+(cid:1)(cid:1)(cid:1)+gk(cid:0)2+gk(cid:0)1(cid:0)1)

(cid:15) c(g1+(cid:1)(cid:1)(cid:1)+gk(cid:0)1); c(g1+(cid:1)(cid:1)(cid:1)+gk(cid:0)1+1); : : : ;

c(g1+(cid:1)(cid:1)(cid:1)+gk(cid:0)1) = c(n(cid:0)1).

To sum up, given a function G, agents’ costs c(0) (cid:20) c(1) (cid:20)
: : : (cid:20) c(n(cid:0)1), and q, the OMA algorithm veriﬁes the exis-
tence of an appropriate oblivious mechanism. Such a mecha-
nism, if exists, is induced by the above procedure.

Oblivious mechanisms are natural and can be easily imple-
mented. It can be shown (by means of an example; details
omitted due to lack of space) that the existence of an appro-
priate mechanism does not necessary imply the existence of
an oblivious mechanism which is appropriate. However, sur-
prisingly, in the next sections we show that there are some
important and central setups where oblivious mechanisms are
sufﬁcient for efﬁcient and effective information elicitation.
Given the convenient and tractable structure of these mech-
anisms, this provides powerful tools for information elicita-
tion. Namely, this turned out to be the case for the classical
uniform model discussed in Section 4, and for the majority
function, and moreover in the context of threshold functions,
as discussed in Section 5.

4 The Uniform Model
Consider the case where q = 0:5 and G is any anonymous
function. The assumption that the distribution is uniform is

most standard in many basic studies in this context. Consider
the following algorithm:

The Uniform Semi-Natural Ordering Algorithm

(USNO):
(A) Build the graph G0 = (V 0; E0) of the function G.
(B) Compute 8 v 2 V 0 : piv(v) and Cmax(v).
(C) Induce the graph (cid:22)G = ( (cid:22)V ; (cid:22)E) by reducing G0 to include
only nodes where the value of the function G can not be
determined.

(D) Denote as (cid:7) the following path in (cid:22)G: (0; 0) = v0

j = (j; l) ! v0
0 ! v0

0 !
v0
2 ! : : : ! v0
1 ! v0
j+1 ! : : : !
n(cid:0)1 where (0; 0) = v0
v0
j =
j = (j; l) has only one son in (cid:22)G,
(j; l) satisﬁes that v0
i+1). Let
and 8 0 (cid:20) i (cid:20) j (cid:0) 1 : piv(v0
n(cid:0)1 be the sufﬁx from v0
v0
j = (j; l) ! v0
to the only leaf in (cid:22)G reachable from v0
j. The existence of
such a path is induced by a series of propositions omitted
from the paper due to lack of space.

j+1 ! : : : ! v0

2 ! : : : ! v0

i) (cid:21) piv(v0

1 ! v0

j

(E) Along (cid:7), 8 0 (cid:20) i (cid:20) n (cid:0) 1 : We will mark (cid:9)i (cid:17)

Cmax(v0
i)

(F) Check which is the ﬁrst node on (cid:7) that satisﬁes (cid:9)t > (cid:9)0
4. That is, t = M infkj 1 (cid:20) k (cid:20) n (cid:0) 1; (cid:9)k > (cid:9)0g.
(the fact that t > j is implied by the above mentioned
propositions).

(G) Sort the agents according to their costs of getting to their

secrets and get: c(0) (cid:20) c(1) (cid:20) ::: (cid:20) c(n(cid:0)1)

(H) Check if the following is satisﬁed: c(0) (cid:20) (cid:9)0, c(1) (cid:20)
(cid:9)0; : : :, c(t(cid:0)1) (cid:20) (cid:9)0, c(t) (cid:20) (cid:9)t, c(t+1) (cid:20) (cid:9)t+1, : : :,
c(n(cid:0)1) (cid:20) (cid:9)n(cid:0)1. If the above is not satisﬁed then ﬁnish
and return ”there is no appropriate mechanism for the
problem”, else continue to phase (I).

(I) First approach simultaneously the t agents with the low-
est costs, i.e. c(0); c(1); : : : ; c(t(cid:0)1). Afterwards approach
each time one agent with the lowest cost among those
left, i.e. ﬁrst approach c(t),then approach c(t+1); etc,
when c(n(cid:0)1) is approached last.

We can now prove:
Theorem 4.1: Consider an anonymous function G, agents’
costs c(0) (cid:20) c(1) (cid:20) : : : (cid:20) c(n(cid:0)1), and q = 0:5, and let
i) for every 0 (cid:20) i (cid:20) n (cid:0) 1 along the path (cid:7).
(cid:9)i (cid:17) Cmax(v0
Let t = minfkj 1 (cid:20) k (cid:20) n (cid:0) 1; (cid:9)k > (cid:9)0g. Then there
exists an appropriate algorithm, if and only if: c(0) (cid:20) (cid:9)0,
c(1) (cid:20) (cid:9)0,. . . , c(t(cid:0)1) (cid:20) (cid:9)0, c(t) (cid:20) (cid:9)t,
c(t+1) (cid:20) (cid:9)t+1,. . . ,c(n(cid:0)1) (cid:20) (cid:9)n(cid:0)1.

Theorem 4.2: Consider an anonymous function G, agents’
costs c(0) (cid:20) c(1) (cid:20) : : : (cid:20) c(n(cid:0)1), and q = 0:5, if there exists
an appropriate mechanism then the USNO algorithm induces
an appropriate oblivious mechanism.

Corollary 4.1: Consider an anonymous function G,
agents’ costs c(0) (cid:20) c(1) (cid:20) : : : (cid:20) c(n(cid:0)1), and q = 0:5.
The USNO handles the problem of existence, i.e the USNO

4It is guaranteed that there exists such a node if G is not the par-
ity or the : parity function. These functions are treated separately,
leading to similar results.

will efﬁciently compute whether there exists any appropriate
mechanism. If such a mechanism exists, the USNO will out-
put an appropriate semi-natural ordering mechanism.

5 Computing the majority function
The majority function is central to voting theory, and as a re-
sult to the related multi-agent systems and distributed com-
puting literature. Consider the case where n is odd, and
q > 0:5 and the function we would like to compute is the
majority function, 5 i.e. if d n(cid:0)1
2 e + 1 or more of the agents’
secrets are 1’s then the value of the function will be 1, else
the value will be 0.

We will now present an efﬁcient algorithm that induces an
appropriate mechanism if such a mechanism exists. The out-
put mechanism will be an oblivious, semi-natural ordering
mechanism. Denote by (cid:0) the following path in the graph as-
sociated with the majority function:
0 = (0; 0) ! (1; 1) ! (2; 2) ! : : : ! ( n(cid:0)1
v(cid:3)
( n(cid:0)1
2 +1; n(cid:0)1
v(cid:3)
n(cid:0)1
The Semi-Natural Ordering Algorithm (SNO):
(A) Compute: 8 0 (cid:20) i (cid:20) n (cid:0) 1: piv(v(cid:3)

2 ; n(cid:0)1
2 ) ! : : : ! (n(cid:0)1; n(cid:0)1

i ),
along (cid:0). 8 0 (cid:20) i (cid:20) n (cid:0) 1 : We will mark (cid:9)i (cid:17)
Cmax(v(cid:3)
i )

i ) and Cmax(v(cid:3)

2 ) !
2 ) =

2 ) ! ( n(cid:0)1

2 +2; n(cid:0)1

(B) Check which is the ﬁrst node on (cid:0) that satisﬁes (cid:9)j >
(cid:9)0. That is, j = minfkj 1 (cid:20) k (cid:20) n (cid:0) 1; (cid:9)k > (cid:9)0g.6.
(C) Sort the agents according to their costs of getting to their

secrets and get: c(0) (cid:20) c(1) (cid:20) ::: (cid:20) c(n(cid:0)1)

(D) Check if the following is satisﬁed: c(0) (cid:20) (cid:9)0, c(1) (cid:20)
(cid:9)0,. . . , c(j(cid:0)1) (cid:20) (cid:9)0, c(j) (cid:20) (cid:9)j, c(j+1) (cid:20) (cid:9)j+1; : : : ;,
c(n(cid:0)1) (cid:20) (cid:9)n(cid:0)1. If the above is not satisﬁed then ﬁnish
and output ”there is no appropriate mechanism for the
problem”, else continue to phase (E).

(E) First approach simultaneously the j agents with the low-
est costs, i.e. c(0); c(1); : : : ; c(j(cid:0)1). Afterwards approach
each time one agent with the lowest cost among those
left, i.e. ﬁrst approach c(j),then approach c(j+1); etc,
when c(n(cid:0)1) is approached last.

We can now show:
Theorem 5.1: Consider the majority function G, agents’
costs c(0) (cid:20) c(1) (cid:20) : : : (cid:20) c(n(cid:0)1), and q, and let (cid:9)i (cid:17)
i ) for every 0 (cid:20) i (cid:20) n (cid:0) 1 along the path (cid:0). Let
Cmax(v(cid:3)
j = minfkj 1 (cid:20) k (cid:20) n (cid:0) 1; (cid:9)k > (cid:9)0g. Then there
exists an appropriate algorithm, if and only if: c(0) (cid:20) (cid:9)0,
c(1) (cid:20) (cid:9)0; : : : ; c(j(cid:0)1) (cid:20) (cid:9)0, c(j) (cid:20) (cid:9)j, c(j+1) (cid:20) (cid:9)j+1; : : :,
c(n(cid:0)1) (cid:20) (cid:9)n(cid:0)1.

Theorem 5.2: Consider the majority function G, agents’
costs c(0) (cid:20) c(1) (cid:20) : : : (cid:20) c(n(cid:0)1), and q, if there exists an
appropriate mechanism then the SNO algorithm induces an
appropriate oblivious mechanism.

5Our results in this section can be extended in a straightforward
manner to the case where q (cid:20) 0:5 but not hold to the case where n
is even; the case where n is even will be discussed later, when we
extend the discussion to general threshold functions.

6As before, the fact that such a j exists is implied by a series of

propositions characterizing the properties of (cid:0)

Corollary 5.1: Consider the majority function G, agents’
costs c(0) (cid:20) c(1) (cid:20) : : : (cid:20) c(n(cid:0)1), and q, the SNO handles the
problem of existence, i.e the SNO will efﬁciently compute
whether there exists any appropriate mechanism. If such a
mechanism exists, the SNO will output an appropriate semi-
natural ordering mechanism.

The computation of majority when q < 0:5: Consider
the case where n is odd, and the function that we would like
to compute is the majority function where q < 0:5. In this
case we can use similar techniques to the ones we used for the
computing of majority where q > 0:5. The main difference
is that instead of the path (cid:0) we will consider the path (cid:0)0:
0 = (0; 0) ! (1; 0) ! (2; 0) ! : : : ! ( n(cid:0)1
v
2 +
2 + 2; 2) ! : : : ! (n (cid:0) 1; n(cid:0)1
1; 1) ! ( n(cid:0)1
n(cid:0)1. Note
that the case where q = 0:5 is covered by the uniform model
section.

2 ; 0) ! ( n(cid:0)1
2 ) = v

0

0

5.1 Threshold functions
Given an anonymous function G. Let G(T ) be the value of
the function G when there are T ”1”’s and n (cid:0) T ”0”’s. G is
considered as a threshold function if there exists 1 (cid:20) r (cid:20) n
such that: G(0) = G(1) = ::: = G(r (cid:0) 1) 6= G(r) =
G(r + 1) = ::: = G(n), i.e. whenever there are less than r
1’s among the agents then the function gets a particular value,
and where there are r or more 1’s the value of the function
will be the other value. The majority function for example is
a threshold function with r = d n+1

2 e where G(0) = 0.
We can now prove the following general theorems:
Theorem 5.3: Consider an anonymous threshold function
G with threshold r where d n+1
2 e (cid:20) r (cid:20) n, q (cid:20) 0:5 and
agents’ costs c(0) (cid:20) c(1) (cid:20) : : : (cid:20) c(n(cid:0)1). There exist an ap-
propriate mechanism if and only if there exist a semi-natural
ordering mechanism which is appropriate.

Theorem 5.4: Consider an anonymous threshold function
G with threshold r where d n+1
n(cid:0)1 and
agents’ costs c(0) (cid:20) c(1) (cid:20) : : : (cid:20) c(n(cid:0)1). There exist an ap-
propriate mechanism if and only if there exist a semi-natural
ordering mechanism which is appropriate.

2 e (cid:20) r (cid:20) n, q (cid:21) r(cid:0)1

Similarly to theorems 5.3 and 5.4, we can also show:
Theorem 5.5: Consider an anonymous threshold function
G with threshold r where 1 (cid:20) r (cid:20) b n+1
n(cid:0)1 or
q (cid:21) 0:5 and agents’ costs c(0) (cid:20) c(1) (cid:20) : : : (cid:20) c(n(cid:0)1). Then
there exist an appropriate mechanism if and only if there exist
a semi-natural ordering mechanism which is appropriate.

2 c, and q (cid:20) n(cid:0)r

2 e. However when n is odd, we get r = n+1

Further discussion about majority: The majority func-
tion is a particular case of a threshold function, where r =
d n+1
2 . Theo-
rem 5.3 implies that if q (cid:20) 0:5 then there exist an appropriate
mechanism if and only if there exist a semi-natural ordering
mechanism which is appropriate. Theorem 5.4 implies that
if q (cid:21) r(cid:0)1
n(cid:0)1 = 0:5 then there exist an ap-
propriate mechanism if and only if there exist a semi-natural
ordering mechanism which is appropriate. Hence when n is
odd the above holds for every q (as we have already shown
before).

2 (cid:0)1
n(cid:0)1 =

n(cid:0)1 =

n(cid:0)1

n+1

Consider the case where G is the majority function and n
is even. This implies that r = n+2
2 . Theorem 5.3 implies
that if q (cid:20) 0:5 then there exist an appropriate mechanism

2

n
2

n+2

2 (cid:0)1
n(cid:0)1 =

n(cid:0)1 = 0:5 (cid:1) n

if and only if there exist a semi-natural ordering mechanism
which is appropriate. Theorem 5.4 implies that if q (cid:21) r(cid:0)1
n(cid:0)1 =
n(cid:0)1 then there exist an appropriate
mechanism if and only if there exist a semi-natural ordering
mechanism which is appropriate. However, when n is large
this implies that for almost every q there exist an appropriate
mechanism if and only if there exist a semi-natural ordering
mechanism which is appropriate.

References
[Boutilier et al., 2003] C. Boutilier, R. Das, J.O. Kephart,
G. Tesauro, and W.E. Walsh. Cooperative negotiation in
autonomic systems using incremental utility elicitation. In
Proceedings of UAI-03, pages 89–97, 2003.

[Conen and Sandholm, 2001] W. Conen and T. Sandholm.
Minimal preference elicitation in combinatorial auctions.
In IJCAI Workshop on Economic Agents, Models, and
Mechanisms, Seattle, WA, August 6th., 2001.

[Halpern and Teague, 2004] J. Halpern and V. Teague. Ra-
tional secret sharing and multiparty computation. In Proc.
of STOC 2004, 2004.

[Linial, 1994] N. Linial. Game-Theoretic Aspects of Com-
puter Science. In R.J. Aumann and S. Hart, editors, Hand-
book of Game Theory with Economic Applications, Vol. II,
Chapter 38, pages 1340–1395. North-Holland, 1994.

[Mas-Colell et al., 1995] A. Mas-Colell, M.D. Whinston,
and J.R. Green. Microeconomic Theory. Oxford Univer-
sity Press, 1995.

[McGrew et al., 2003]

R. McGrew, R. Porter, and Y. Shoham. Towards a gen-
eral theory of non-cooperative computation.
In Proc. of
the 9th conference of theoretical aspects of rationality and
knowlede (TARK 2003), pages 59–71, 2003.

[Monderer et al., 2000] D. Monderer, M. Tennenholtz, and
H. Varian. Game theory and artiﬁcial intelligence. Special
issue of Games and Economic behavior, 2000.

[Parkes, 1999] D. C. Parkes. Optimal auction design for
agents with hard valuation problems. In Proc. IJCAI-99
Workshop on Agent Mediated Electronic Commerce, pages
206–219, 1999.

[Shoham and Tennenholtz, 2002] Y. Shoham and M. Ten-
nenholtz. Non-cooeartive computation: Boolean functions
with correctness and exclusivity. Technical Report, Stan-
ford & Technion; To appear in Theoretical Computer Sci-
ence, 2002.

[Smorodinsky and Tennenholtz, 2004] Rann

Smorodinsky and Moshe Tennenholtz. Sequential infor-
mation elicitation in multi-agent systems. In Proceedings
of the 20th Annual Conference on Uncertainty in Artiﬁcial
Intelligence (UAI-04), pages 528–535, 2004.

[Sunderam and Parkes, 2003] Aditya V Sunderam and
David C. Parkes. Preference elicitation in proxied mul-
tiattribute auctions.
In Fourth ACM Conf. on Electronic
Commerce (EC’03), pages 214–215, 2003.

