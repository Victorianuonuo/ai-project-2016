A Model for Generating Random Quantiﬁed Boolean Formulas

Hubie Chen

Departament de Tecnologia
Universitat Pompeu Fabra

Barcelona, Spain

hubie.chen@upf.edu

Yannet Interian

Center for Applied Mathematics

Cornell University

Ithaca, New York, USA

interian@cam.cornell.edu

Abstract

The quantiﬁed boolean formula (QBF) problem is a
powerful generalization of the boolean satisﬁability
(SAT) problem where variables can be both univer-
sally and existentially quantiﬁed. Inspired by the
fruitfulness of the established model for generating
random SAT instances, we deﬁne and study a gen-
eral model for generating random QBF instances.
We exhibit experimental results showing that our
model bears certain desirable similarities to the ran-
dom SAT model, as well as a number of theoretical
results concerning our model.

1 Introduction
A phenomenal success story of artiﬁcial intelligence research
over the past decade has been progress on the boolean satisﬁ-
ability (SAT) problem. The technology of solvers for SAT has
been transformed by techniques such as conﬂict-driven learn-
ing, highly efﬁcient propagation mechanisms, and random-
ization. Today, state-of-the-art solvers can cope with problem
instances having sizes that are orders of magnitude beyond
what one would have optimistically predicted a decade ago.
Inspired and encouraged by the tremendous advances in
boolean satisﬁability, many researchers have recently turned
to studying a powerful generalization of boolean satisﬁa-
bility where both universal and existential quantiﬁcation of
variables is permitted; this generalization is often called the
quantiﬁed boolean formula (QBF) problem. Whereas the
SAT problem provides a framework wherein one can model
search problems within the complexity class NP, the QBF
problem permits the modelling of problems having higher
complexity–from the complexity class PSPACE–including
problems from the areas of veriﬁcation, planning, knowledge
representation, game playing, logic, and combinatorics. Re-
call that SAT is known to be NP-complete, and QBF is known
to be PSPACE-complete.

A signiﬁcant tool for SAT research has been the model for
generating random SAT instances studied by [Mitchell et al.,
1992], in which it is possible to reliably generate instances
that are robustly difﬁcult. This model has become a canon-
ical benchmark for solver evaluation, has been used heav-
ily in conducting and thinking about SAT-related research,
and is widely regarded as a suitable basis for investigating

“average” or “typical” case complexity.
In addition, theo-
retical issues concerning this model have stimulated fruitful
and highly non-trivial interaction among the areas of arti-
ﬁcial intelligence, theoretical computer science, probability
theory, and statistical physics. One particular question that
has garnered signiﬁcant attention is the “satisﬁability thresh-
old conjecture” which roughly states that, as the density of
constraints is increased, formulas abruptly change from being
satisﬁable to being unsatisﬁable at a critical threshold point.
The utility and widespread embrace of the random SAT
model suggests that research on QBF could similarly beneﬁt
from random QBF models. This paper deﬁnes and studies a
general model for generating random instances of the QBF
problem. We exhibit experimental results showing that our
model bears certain desirable similarities to the random SAT
model; in particular, we show that our model exhibits thresh-
old and easy-hard-easy phenomena as in the SAT model.
However, we also experimentally demonstrate that the much
larger parameter space of our model offers a richer frame-
work for exploring and controlling complexity than the SAT
model. In addition, we present a number of theoretical results
concerning our model, namely, we give techniques for estab-
lishing lower and upper bounds on the purported threshold
in our model. This places our work in contrast to previous
work on random QBF models (discussed below), which con-
tained very little rigorous theoretical analysis. Our theoretical
results demonstrate nice connections to both previously stud-
ied problems as well as less studied but natural problems; we
believe that these results evidence that our model is mathe-
matically tangible and holds promise for being analyzed on
the level of sophistication that work on the SAT model has
reached.

Formulation of QBF.
In this paper, we use the formulation
of QBF where consecutive variables having the same quanti-
ﬁer are combined into a set. The following are the thus the
general forms of QBF formulas having one, two, and three
quantiﬁer blocks, respectively:

9X1(cid:30)

8Y19X1(cid:30)

9X28Y19X1(cid:30)

By a quantiﬁer block, we mean an expression QV where Q
is a quantiﬁer (9 or 8) and V is a set of boolean variables. In

general, an instance of QBF contains a sequence of quantiﬁer
blocks which alternate between universal and existential type,
followed by a set of clauses, denoted here by (cid:30).1 The seman-
tics of these formulas are deﬁned as is standard in logic; for
instance, a formula 8Y19X1(cid:30) is true if for every assignment
to the variables Y1, there exists an assignment to the variables
X1 such that (cid:30) is true. An intuitive way to view a QBF for-
mula is as a game between two players: a “universal player”,
who attempts to falsify (cid:30), and an “existential player”, who
attempts to satisfy (cid:30). Players set their variables in the or-
der given by the quantiﬁer preﬁx. For instance, a formula
9X28Y19X1(cid:30) can be viewed as a three-round game in which
the existential player ﬁrst sets the variables X1, the universal
player then sets the variables Y1, and the existential player
ﬁnishes by setting the variables X1. In general, the formula
is true if the existential player can always win the game by
satisfying (cid:30).

the notation

(jl; kl; : : : ; j1; k1)-F((ml; nl; : : : ; m1; n1); C)

or

(kl; jl(cid:0)1; : : : ; j1; k1)-F((nl; ml(cid:0)1; : : : ; m1; n1); C)

depending on whether or not the number of quantiﬁer blocks
is even or odd, respectively.

Notice that in a random QBF from this model, if any quan-
tiﬁer block is picked and the clauses are restricted to literals
over the quantiﬁer block, the result is a random formula over
the variables of the quantiﬁer block in the sense of the random
SAT model. It can in fact be veriﬁed that the model has a cer-
tain “recursive” property: generating a random QBF and then
randomly instantiating the variables of the outermost quanti-
ﬁer block results in another random QBF from the model.

Description of model. Let us review the random SAT
model, which our model generalizes. This model takes three
parameters: the clause length k, the number of variables n,
and the number of clauses C. A random formula with these
parameters, denoted here by k-F(n; C), is generated one
clause at a time; each clause is generated by selecting, uni-
formly at random, k distinct variables, and then negating each
with probability one half.

Now we describe our random QBF model. In the random
SAT model, every clause has the same length. In our model,
this also holds, but in addition, the number of literals in a
clause from each quantiﬁer block is a constant. The ﬁrst pa-
rameter to our model is thus a tuple specifying, for each quan-
tiﬁer block, the number of literals from that block that are in
a clause. For instance, the tuple (2; 3) speciﬁes that the gen-
erated formulas are of the form 8Y19X1(cid:30), where each clause
in (cid:30) has 5 literals, 2 from Y1 and 3 from X1. We will call
such formulas (2; 3)-QBF formulas. As another example, the
tuple (4; 2; 3) speciﬁes that the generated formulas are of the
form 9X28Y19X1(cid:30), where each clause in (cid:30) has 9 literals, 4
from X2, 2 from Y1, and 3 from X1. Analogously, we call
such formulas (4; 2; 3)-QBF formulas.

The second parameter to our model is a tuple of the same
length as the ﬁrst one, specifying the number of variables in
each quantiﬁer block. The third parameter to our model is
simply the number of clauses C. As an example, suppose
that the ﬁrst tuple is (2; 3), the second tuple is (44; 37), and
the number of clauses is 290. The generated formulas are
of the form 8Y19X1(cid:30), where Y1 has 44 variables, X1 has
37 variables, each clause in (cid:30) has 2 literals from Y1 and 3
literals from X1, and there is a total of 290 clauses in (cid:30). Each
clause is generated by selecting uniformly at random, for each
quantiﬁer block, the designated number of distinct variables,
and then negating each variable with probability one half. We
denote such a random formula by (2; 3)-F((44; 37); 290). In
general, to denote random formulas from our model, we use

1Note that we use the standard assumption that the innermost
quantiﬁer block is existential, for if it is universal, the block can
be efﬁciently eliminated. We also assume, as usual, that different
quantiﬁer blocks have disjoint variable sets.

Previous work. Random QBF models have been previ-
ously studied by [Cadoli et al., 1999] and [Gent and Walsh,
1999]. [Cadoli et al., 1999] have experimentally studied the
QBF generalization of the SAT model where clauses of ﬁxed
length k are generated by randomly choosing k distinct vari-
ables from the entire set of variables, and then negating each
with probability one half.
In this generalization, denoted
FCL, the generation of clauses does not differentiate among
variables from different quantiﬁer blocks. It was pointed out
in [Gent and Walsh, 1999] that this model is “ﬂawed” in
that it generates trivially false formulas when the number of
clauses is on the order of the square root of n, the number of
variables. These trivially false formulas arise from pairs of
clauses where one clause contains a single existential literal,
the other contains a single existential literal that is the com-
plement of the ﬁrst, and no universal variable is repeated in
the pair.

In attempts to remedy this issue, [Gent and Walsh, 1999]
proposed two models, model A and model B, and [Cadoli
et al., 1999] proposed another model, FCL2. Model A and
FCL2 are essentially modiﬁcations of the original FCL model
that disallow the types of clauses that lead to the trivial fal-
sity; for instance, in Model A, each clause is generated in-
dependently as before, but clauses containing one existen-
tial literal are simply discarded and replaced. As pointed out
in [Gent and Walsh, 1999], instances generated by Model A
lack uniformity; in our view, the deﬁnitions of Model A and
FCL2 have an ad hoc ﬂavor that we believe make them less
amenable to mathematical analysis.

The study of model B in [Gent and Walsh, 1999] is con-
cerned mostly with QBF formulas with two quantiﬁer blocks;
results of two experiments are reported. The parameteriza-
tions of Model B studied can be obtained within our model,
and indeed our model can be viewed as a generalization of
these parameterizations. However, no systematic deﬁnition
of the parameter space of Model B is given. We believe that
one of the contributions of this paper is the precise articula-
tion of a general random QBF model that may be instantiated
in various ways, and from which it is possible to methodi-
cally embark on experimental and theoretical explorations of
the parameter space.

2 Experimental results
Our ﬁrst set of experimental results concerns (2; 3)-QBF for-
mulas, all of which have the same number of variables, 80.
We varied both the number of clauses, as well as the ratio of
universal to existential variables, denoted by (cid:26) (rho). Figure 1
shows the computational cost of deciding these formulas.

 6e+08

 5e+08

 4e+08

 3e+08

 2e+08

 1e+08

s
e
h
c
n
a
r
b

 
f

o

 
r
e
b
m
u
n

 0

 6

rho 1.2
rho 1.0
rho 0.8
rho 0.6

 7

 6.5
ratio=clauses/(existential variables)

 7.5

 8.5

 9.5

 10

 8

 9

 10.5

 11

Figure 1: Computational cost of random (2; 3)-QBF formulas
with 80 variables.

Each curve corresponds to a different value of (cid:26). For
instance, using the introduced notation,
the curve with
(cid:26) = 0:6 corresponds to the hardness of formulas of the form
(2; 3)-F((30; 50); C) for varying numbers of clauses C. The
hardness is plotted as a function of the ratio of clauses to ex-
istential variables; in the case of (cid:26) = 0:6 and 80 variables,
this ratio is equal to C=50. Note that all of the experiments
were performed using the solver QuBE-BJ [Giunchiglia et
al., 2001], and each point of our plots represents the median
value.

Figure 2 concerns exactly the same formulas studied by
Figure 1, but shows the probability of truth instead of the
computational cost.

t

a
s
 
y
t
i
l
i

b
a
b
o
r
p

 1

 0.8

 0.6

 0.4

 0.2

 0

 6

rho 1.2
rho 1.0
rho 0.8
rho 0.6

 6.5

 7

 7.5

 8

 8.5

ratio=clauses/(existential variables)

 9

 9.5

 10

 10.5

 11

Figure 2: Probability of truth of random (2; 3)-QBF formulas
with 80 variables.

Examining each value of (cid:26) individually, we see that as the
number of clauses is increased, the formulas change from be-
ing almost certainly true to almost certainly false. Moreover,

this transition seems to take place relatively abruptly, sug-
gesting that our model exhibits a threshold phenomenon as
is conjectured in the random SAT model. Also, recall that
in the random SAT model, computational difﬁculty exhibits
an easy-hard-easy pattern, where the computational difﬁculty
of formulas peaks around the point where half of the forulas
are satisﬁable. For each value of (cid:26) in these two ﬁgures, and
in all of the other experiments we performed, our model also
exhibits this phenomena.

Now, let us consider the curves of Figure 1 together. The
picture suggested is an extremely intriguing one: starting
from the left, the peaks of each of the four curves appear to
increase as (cid:26) decreases, attain a maximum, and then decrease
as (cid:26) further decreases. That is, the peaks of the easy-hard-
easy patterns appear to themselves exhibit an easy-hard-easy
pattern! One lesson begged by this ﬁgure is that if one wishes
to generate the computationally hardest quantiﬁed formulas
for a given number of variables, it is of crucial importance
to select the appropriate relative numbers of variables in each
quantiﬁer block. It is also clear from this ﬁgure that, even
after we have committed ourselves to studying (2; 3)-QBF
formulas and ﬁxed the number of variables, there are still two
parameters, (cid:26) and the clause density, that can be used to con-
trol complexity. We envision that the large parameter space of
our model will be useful in the evaluation of QBF solvers. For
instance, by tuning the clause density appropriately, one can
generate an ensemble of (2; 3)-QBF formulas with 80 vari-
ables which all have the same hardness (for one solver), but
different (cid:26) values; observing the behavior of another solver
on such an ensemble could give insights into the relative be-
haviors of the solvers.

 3.5e+07

 3e+07

 2.5e+07

 2e+07

 1.5e+07

 1e+07

 5e+06

s
e
h
c
n
a
r
b

 
f

o

 
r
e
b
m
u
n

1

3 alt
prob

0.5

t

a
s
 
y
t
i
l
i

b
a
b
o
r
p

 0
0
 40
 70
ratio=clauses/(existential variables)

 45

 50

 55

 60

 65

Figure 3: Formulas of type (2; 2; 3)-F((15; 15; 15); C). The
x-axis is the ratio of clauses to 15, the number of existential
variables in the innermost block X1.

Figure 3 shows results on (2; 2; 3)-QBF formulas in which
each quantiﬁer block has 15 variables, for a total of 45 vari-
ables. When there is an odd number of quantiﬁer blocks, a
solver can conclude truth of a formula as soon as it ﬁnds an
assignment to the outermost quantiﬁer block such that the rest
of the formula is true. Accordingly, for an odd number of
quantiﬁer blocks, the hardness drops down more slowly on
the right of the peak (the “false” region) than on the left (the

“true” region). This slowness in dropping down on the right is
quite pronounced in Figure 3. Note that a dual phenomenon
takes place for an even number of quantiﬁer blocks; see for
example Figure 1.

(3,3) (35,35)
prob

1

3 Theoretical results
In this section, we present a number of theoretical re-
sults which concern techniques for proving lower and upper
bounds on the purported threshold in our model. In the ran-
dom SAT model, theoretical work generally studies asymp-
totic properties of the model, in particular, properties that
hold as the number of variables approaches inﬁnity. In this
section, we will similarly be concerned with asymptotic prop-
erties of our model, and we assume that in parameterizations

0.5

t
a
s
 
y
t
i
l
i

b
a
b
o
r
p

and

(jl; kl; : : : ; j1; k1)-F((ml; nl; : : : ; m1; n1); C)

(kl; jl(cid:0)1; : : : ; j1; k1)-F((nl; ml(cid:0)1; : : : ; m1; n1); C)

 1.2e+09

 1e+09

 8e+08

 6e+08

 4e+08

 2e+08

s
e
h
c
n
a
r
b

 
f

o

 
r
e
b
m
u
n

 0

 11

 12

 13

 14

 15

 16

 17

 18

ratio=clauses/(existential variables)

0
 19

Figure 4: Formulas of type (3; 3)-F((35; 35); C).

Figure 4 shows results on (3; 3)-QBF formulas with (cid:26) = 1,
that is, with the same number of existential and universal vari-
ables, 35 each, for a total of 70 variables. Interestingly, al-
though the number of variables is less than in Figure 1, the
hardest formulas (of Figure 4) are considerably harder than
those of Figure 1, emphasizing the importance of the ﬁrst pa-
rameter of our model, the tuple giving, for each quantiﬁer
block, the number of literals per clause.

Figure 5 shows results for (1; 4)-QBF formulas with 80
variables. We again see that differences in (cid:26) can dramatically
affect complexity.2

)
s
(
 
e
m

i
t

 70000

 60000

 50000

 40000

 30000

 20000

 10000

 0

 11

rho 0.6 (1,4)
rho 1.0 (1,4)

 12

ratio=clauses/(existential variables)

 13

 14

 15

 16

 17

Figure 5:
(1; 4)-F((40; 40); C).

Formulas of

type (1; 4)-F((30; 50); C) and

of our model, the ki and ji are constant, but the ni, mi, and
C are all functions of an underlying argument n. We will
discuss properties that hold almost surely by which we mean
with probability tending to one as n approaches inﬁnity.

Our ﬁrst result concerns a way of obtaining threshold upper
bounds, that is, “almost surely false” results. To illustrate the
idea, let us focus on (j; k)-QBF formulas with two quantiﬁer
blocks, which are of the form 8Y19X1(cid:30). Consider the game
view (mentioned in the introduction) of such a formula: the
universal player wishes to set Y1 so that the resulting formula
cannot be satisﬁed by the existential player. A reasonable tac-
tic for the universal player is to attempt to set the variables Y1
so that the number of clauses in the resulting formula is max-
imized. Suppose that the universal player chooses a setting
to Y1 in such a way that she does not “look at” the existential
literals of the formula–that is, the choice of assignment to Y1
depends only on the universal literals in the formula. With
this form of choice, in a sense that can be made precise, the
resulting formula (over X1) can be veriﬁed to be a random
SAT formula. If the universal player can guarantee that the
resulting random SAT formula has sufﬁciently many clauses,
then almost sure falsity follows by making use of SAT thresh-
old upper bounds.

Let us be a bit more precise. We show how to ob-
tain almost sure falsity results for formulas of the form
(j; k)-F((m; n); D). Assume that k-F(n; C) formulas are
almost surely false, that is, C=n is an upper bound for the
k-SAT threshold.
If we restrict such a formula to the uni-
versal literals (the Y1 literals), we obtain a j-F(m; D) for-
mula. Assume further that D (cid:21) C is sufﬁciently high
so that (almost surely) a j-F(m; D) has an assignment
leaving C clauses unsatisﬁed.
(In notation, we assume
that minSAT(j-F(m; D)) (cid:20) D (cid:0) C almost surely, where
minSAT(F ) denotes the minimum, over all assignments, of
the number of clauses satisﬁed in the formula F .) Together,
these two assumptions, in light of the above discussion, im-
ply that (j; k)-F((m; n); D) formulas are almost surely false.
The following proposition is a formal statement of this claim,
but in a more general form.
Proposition 3.1. Suppose that instances of

2Note that in Figure 5, we use execution time instead of number
of branches as a measure of hardness. This is because in some cases,
the number of branches was so high that it was not correctly reported
by the solver (in particular, overﬂow occurred).

(kl; jl(cid:0)1; : : : ; j1; k1)-F((nl; ml(cid:0)1; : : : ; m1; n1); C)

are almost surely false, and that D is sufﬁciently high so that
almost surely, it holds that
minSAT(jp; kp; : : : ; kl+1; jl)-F((mp; np; : : : ; nl+1; ml); D)

is less than or equal to D (cid:0) C. Then, instances of

(jp; kp; : : : ; j1; k1)-F((mp; np; : : : ; m1; n1); D)

are almost surely false.

Note that one can formulate a dual of Proposition 3.1 that
allows one to infer “almost surely true” results from previ-
ous “almost surely true” results, and that concerns maxSAT
instead of minSAT.

We next observe that, given a parameterization (of the
model), if the parameterization is almost surely true after the
elimination of a “preﬁx”, then the original parameterization is
almost surely true. This permits, for instance, the derivation
of “almost surely true” results for formulas beginning with a
universal quantiﬁer from such results for formulas beginning
with an existential quantiﬁer.
Proposition 3.2. Let

(jl; kl; : : : ; j1; k1)-F((ml; nl; : : : ; m1; n1); C)

be a parameterization of the model. If for some i < l it holds
that instances of

(ji; ki; : : : ; j1; k1)-F((mi; ni; : : : ; m1; n1); C)

or

(ki+1; ji; : : : ; j1; k1)-F((ni+1; mi; : : : ; m1; n1); C)

are almost surely true, then instances of

(jl; kl; : : : ; j1; k1)-F((ml; nl; : : : ; m1; n1); C)

are almost surely true.

Proposition 3.2 follows from the general fact that a quan-
tiﬁed formula (cid:8) is true if eliminating one or more quantiﬁer
blocks from the outside of (cid:8), along with their associated lit-
erals, gives a true formula.
Example 3.3. We demonstrate how to make use of
the
two propositions given so far by explicitly computing
some threshold bounds for our model. We will consider
(2; 3)-F(((cid:26)n; n); cn) formulas, that is, formulas of the type
considered in Figures 1 and 2.

We begin by looking at the case where (cid:26) = 1, that is,
(2; 3)-F((n; n); cn) formulas. We can use Proposition 3.1
specialized to two quantiﬁer blocks (that is, with p = l = 1)
to obtain an upper bound of c = 14:5 for such formulas, as
discussed prior to the statement of that proposition. How is
this done? The ﬁrst requisite ingredient is a value cu such
that 3-F(n; cun) formulas are almost surely false, that is, a
SAT threshold upper bound. By [Dubois et al., 2000], we can
take cu = 4:506. The second ingredient needed is an up-
per bound for minSAT(2-F(n; cn)). By Theorem 3.5, which
is presented below, we have that minSAT(2-F(n; cn)) (cid:20)
(0:657)cn for c = 14:5. Using the proposition with C = cun
and D = 14:5n, we see that (0:657)cn (cid:20) (14:5n) (cid:0) (cun)
and hence we have minSAT(2-F(n; cn)) (cid:20) D (cid:0) C as re-
quired. Therefore, instances of (2; 3)-F((n; n); cn) are al-
most surely false for c = 14:5 (and hence for all c (cid:21) 14:5).

Now let cl be a lower bound on the 3-SAT threshold, so
that instances of 3-F(n; cln) are almost surely true. We can
take cl = 3:52 by [Kaporis et al., 2003]. By Proposition 3.2,

instances of (2; 3)-F((n; n); cln) are almost surely true. The
idea is that (2; 3)-F((n; n); cln) formulas are almost surely
true because after “eliminating” the ﬁrst quantiﬁer block in
such formulas, one obtains 3-F(n; cln) formulas, which are
almost surely true by our choice of cl. To summarize the re-
sults observed so far, we have that (2; 3)-F((n; n); cn) in-
stances are almost surely true when c (cid:20) cl = 3:52, and al-
most surely false when c (cid:21) 14:5.

Now, let us consider (2; 3)-F(((cid:26)n; n); cn) formulas. Re-
garding lower bounds, as before, we have by Proposition
3.2 that instances of (2; 3)-F(((cid:26)n; n); cln) are almost surely
true. Turning to upper bounds, we observe that, by a standard
probabilistic argument, every 2-SAT formula has an assign-
ment satisfying (at most) 3=4 of the clauses. Thus, we have
minSAT(2-F((cid:26)n; 4cun)) (cid:20) 3cun for any value of (cid:26). Using
Proposition 3.1 as before with C = cun and D = 4cun,
we obtain that instances of (2; 3)-F(((cid:26)n; n); cn) are almost
surely false for c (cid:21) 4cu, that is, 4cu is a threshold upper
bound on formulas (2; 3)-F(((cid:26)n; n); cn), for any value of (cid:26).
Summarizing, we have obtained that for any value of (cid:26),
formulas (2; 3)-F(((cid:26)n; n); cn) are almost surely false when
c (cid:20) cl, and almost surely true when c (cid:21) 4cu. That is,
such formulas change from being almost surely true to al-
most surely false between cl and 4cu.
If we set cl and cu
to 4:26, which is an approximate value of the 3-SAT thresh-
old, we expect the threshold for such formulas to lie between
c = 4:26 and c = 4 (cid:1) 4:26 = 17:04, where c denotes the ratio
of clauses to existential variables; this expectation is consis-
tent with Figure 2.

In the usual random SAT model, whenever the clause
length is ﬁxed, it is known that at a sufﬁciently low constant
clause-to-variable ratio, formulas are almost surely satisﬁ-
able, and that at a sufﬁciently high constant clause-to-variable
ratio, formulas are almost surely unsatisﬁable. These results,
of course, validate the hypothesis that there is a threshold phe-
nomenon in this model. We can show analogous results in our
model.
Proposition 3.4. Fix (jl; kl; : : : ; j1; k1) to be a tuple with
k1 (cid:21) 2, and for i 2 f1; : : : ; lg, let ni(n) be a linear func-
tion of n, that is, ni(n) = (cid:27)in for a constant (cid:27)i > 0. There
exist positive constants al and au such that instances of
(jl; kl; : : : ; j1; k1)-F((ml; nl; : : : ; m1; n1); cn)

are almost surely true when c (cid:20) al, and instances of

(jl; kl; : : : ; j1; k1)-F((ml; nl; : : : ; m1; n1); cn)

are almost surely false when c (cid:21) au. (This proposition is
meant to address formulas with both even and odd numbers
of quantiﬁer blocks, that is, we permit jl = 0.)

The “almost surely true” part follows from Proposition 3.2
along with known lower bounds on the SAT threshold, while
the “almost surely false” part follows from the fact that shift-
ing existential quantiﬁers inward preserves truth of quantiﬁed
formulas, the idea of Proposition 3.1, and a standard ﬁrst mo-
ment argument.

We now study threshold upper bounds for our model in
greater detail. Proposition 3.1 establishes a connection be-
tween minSAT and upper bounds in our model. Although

minSAT has not, as far as we know, been studied explicitly
in previous work, we certainly believe that it is a natural con-
cept of independent interest. We have the following result
concerning it.
Theorem 3.5. For every k (cid:21) 2, there exists a function
gk such that for all c > 0, it holds almost surely that
minSAT(k-F(n; cn)) (cid:20) gk(c)cn + o(n).

We plot obtainable g2 and g3 in Figure 6, comparing them
against the values 3=4 and 7=8 obtainable by a standard prob-
abilistic argument.

We prove this theorem by analyzing a simple algorithm
similar to one used in the paper [Coppersmith et al., 2003]
to study maxSAT. The algorithm is analyzed using the dif-
ferential equation approach of [Wormald, 1995] that has been
used in many random SAT threshold lower bound arguments.

i

 

T
A
S
n
m
d
n
u
o
b
 
r
e
p
p
u

 0.9

 0.85

 0.8

 0.75

 0.7

 0.65

 0.6

 0.55

 0.5

 0.45

 0

 2

 4

2-SAT
expected 2-SAT
3-SAT
expected 3-SAT

 6

 8

 16
ratio=clauses/(variables)

 10

 12

 14

 18

 20

 22

Figure 6: Upper bounds for minSAT(k-F(n; cn)) from The-
orem 3.5.

Now we look further at threshold lower bounds in our
model, focusing on formulas with quantiﬁer preﬁx 89. One
can observe that if all “small” subformulas of a random SAT
formula are satisﬁable, at clause-to-variable ratio c, then for-
mulas at clause-to-variable ratio c are true.
Proposition 3.6. Fix a tuple (j; k) and constants c; (cid:26) > 0.
There exists a positive constant x < 1 (depending on j, c,
and (cid:26)) such that if all subformulas of size xcn in an instance
of k-F(n; cn) are satisﬁable almost surely, then instances of
(j; k)-F(((cid:26)n; n); cn) are true almost surely.

Proposition 3.6 follows from the fact that a sufﬁciently

small y > 0 can be picked so that the probability of

minSAT(j-F((cid:26)n; cn)) (cid:20) ycn

converges to zero. This can be proved by using a union bound
and Chernoff bounds on a ﬁrst moment. The desired x can
then be obtained as (1 (cid:0) y).

This “small subformula” property has not been previously
studied to our knowledge, but as with minSAT, we believe
that it is a natural concept of possible independent interest.
We can show that this property holds for random SAT formu-
las, for subformulas having size equal to a constant fraction
of the number of clauses.

Theorem 3.7. For all constants k (cid:21) 2 and c > 0, there exists
a constant x > 0 depending on k and c such that all size xcn
subformulas of k-F(n; cn) are satisﬁable almost surely.

The proof of Theorem 3.7 makes use of [Chvatal and Sze-

meredi, 1988, Lemma 1].

Proposition 3.6 and Theorem 3.7 can be used together to
obtain threshold lower bounds for 89 formulas. In particular,
notice that in Proposition 3.6, relative to ﬁxed c and (cid:26), in-
creasing j allows one to decrease x. Moreover, the lower the
x required in Theorem 3.7, the higher the c may be. Thus, ﬁx-
ing k and (cid:26), increasing j allows us to obtain higher and higher
lower bounds on the threshold of (j; k)-F(((cid:26)n; n); cn).

Acknowledgements. The authors wish to thank V´ıctor Dal-
mau and Bart Selman for helpful comments, and Massimo
Narizzano for his help with QuBE.

References
[Cadoli et al., 1999] Marco Cadoli, Marco Schaerf, Andrea
Giovanardi, and Massimo Giovanardi. An algorithm to
evaluate quantiﬁed boolean formulae and its experimental
evaluation. Technical report, Dipartimento di Informatica
e Sistemistica, Universita di Roma ”La Sapienza”, 1999.

[Chvatal and Szemeredi, 1988] V. Chvatal and E. Szemeredi.
Many hard examples for resolution. Journal of the Associ-
ation for Computing Machinery, 35:759–768, 1988.

[Coppersmith et al., 2003] D. Coppersmith, D. Gamarnik,
M. Hajiaghayi, and G. Sorkin. Random max 2-sat and
max cut, 2003.

[Dubois et al., 2000] Olivier Dubois, Yacine Boufkhad, and
Jacques Mandler. Typical random 3-sat formulae and the
satisﬁability threshold.
In SODA, pages 126–127, 2000.
Full version in Electronic Colloquium on Computational
Complexity (ECCC 2003).

[Gent and Walsh, 1999] Ian P. Gent and Toby Walsh. Be-
yond NP: the QSAT phase transition. Proceedings of AAAI
1999, 1999.

[Giunchiglia et al., 2001] Enrico Giunchiglia, Massimo Nar-
izzano, and Armando Tacchella. QUBE: A system for de-
ciding quantiﬁed boolean formulas satisﬁability. Proceed-
ings of the International Joint Conference on Automated
Reasoning, 2001.

[Kaporis et al., 2003] Alexis C. Kaporis, Lefteris M.
Kirousis, and Efthimios Lalas. Selecting complementary
pairs of literals. Electronic Notes in Discrete Mathematics,
16, 2003.

[Mitchell et al., 1992] D. Mitchell, B. Selman,

and
Hard and easy distributions of sat
In Proc. 10-th National Conf. on Artiﬁcial

H. Levesque.
problems.
Intelligence, pages 459–465, 1992.

[Wormald, 1995] N. C. Wormald. Differential equations for
random processes and random graphs. Annals of Applied
Probability, 5(4):1217–1235, 1995.

