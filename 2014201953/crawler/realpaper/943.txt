Sequential Bundle-Bid Single-Sale Auction Algorithms for Decentralized Control

Sven Koenig

Craig Tovey

Xiaoming Zheng

Ilgaz Sungur

USC

Georgia Institute of Technology

USC

USC

Computer Science
skoenig@usc.edu

Industrial and Systems Engineering

ctovey@isye.gatech.edu

Computer Science
xiaominz@usc.edu

Industrial and Systems Engineering

sungur@usc.edu

Abstract

We study auction-like algorithms for the distributed al-
location of tasks to cooperating agents. To reduce the
team cost of sequential single-item auction algorithms,
we generalize them to assign more than one additional
task during each round, which increases their similarity
to combinatorial auction algorithms. We show that, for
a given number of additional tasks to be assigned dur-
ing each round, every agent needs to submit only a con-
stant number of bids per round and the runtime of win-
ner determination is linear in the number of agents. The
communication and winner determination costs do not
depend on the number of tasks and thus scale to a large
number of tasks for small bundle sizes. We then demon-
strate empirically that the team cost of sequential bundle-
bid single-sale (= single-item) auction algorithms can be
substantially smaller than that without bundles for multi-
agent routing problems with capacity constraints.

the team cost of SSI auctions tends to be larger than that of
combinatorial auctions since the agents cannot take as many
synergies among tasks into account in their bids. To reduce
the team cost of SSI auctions, we extend them to assign k > 1
additional tasks among the agents during each round. These
sequential bundle-bid single-sale (= single-item) auction al-
gorithms (short: SSI auctions with bundles) still consist of
several rounds, until all tasks have been assigned to agents.
During each round, all agents can now bid on bundles of at
most k tasks and the auctioneer then assigns k additional tasks
to agents, making SSI auctions with bundles similar to com-
binatorial auctions. We expect the team cost of SSI auctions
with bundles to be smaller than the one of standard SSI auc-
tions since the agents can take more synergies among tasks
into account in their bids. In this paper, we develop a gen-
eral theory for such SSI auctions with bundles, proving that
they can be implemented for small bundle sizes k without
greatly increasing the communication and winner determina-
tion costs of standard SSI auctions.

1 Introduction

We study the distributed allocation of tasks to cooperating
agents, where each task has to be assigned to exactly one
agent so that the team cost is small (= team performance is
high). Auction algorithms promise to solve these combina-
torial task-assignment problems with small communication
and computation costs since the agents compress information
into a small number of bids, which they compute in parallel
and then exchange [Dias et al., 2005]. Ideal combinatorial
auctions consist of a single round, after which all tasks have
been assigned to agents. All agents bid on all bundles (= sets)
of tasks and the auctioneer then assigns all tasks to agents,
which allows the agents to take synergies among tasks into
account in their bids and results in a minimal team cost but
incurs prohibitively large communication and winner deter-
mination costs. The communication and winner determina-
tion costs remain large even if the agents bid on selected bun-
dles only [Berhault et al., 2003]. Researchers have therefore
recently advocated sequential single-item auctions (SSI auc-
tions) instead [Lagoudakis et al., 2005]. SSI auctions consist
of several rounds, until all tasks have been assigned to agents
[Boutilier et al., 1999; Fatima, 2006]. During each round, all
agents bid on all unallocated tasks and the auctioneer then as-
signs one additional task to some agent, which incurs small
communication and winner determination costs. However,

a

IJCAI-07

1359

. . . Tam

a

a

(T (cid:2)) + cagent

) of pairwise disjoint bundles Tai

2 Task-Allocation Problem
We now formalize the task-allocation problems. A task-
allocation problem consists of a set of agents A =
{a1 . . . am} and a set of tasks T = {t1 . . . tn}. Any tuple
⊆ T , for all
(Ta1
i = 1 . . . m, (= no task is assigned to more than one agent)
is a partial solution of the task-allocation problem, with the
(T (cid:2))
meaning that agent ai performs the tasks Tai . Let cagent
be the cost needed by agent a ∈ A to perform the tasks
T (cid:2) ⊆ T , called agent cost. There can be synergies among
(T (cid:2)(cid:2)) does not necessarily
tasks, that is, cagent
(T (cid:2) ∪ T (cid:2)(cid:2)) even if T (cid:2) ∩ T (cid:2)(cid:2) = ∅. The cost of the
equal cagent
partial solution, called team cost, depends on the team objec-
tive. In this paper, we consider two different team objectives.
(Ta) for
The team cost of the partial solution is
(Ta) for the
the team objective MiniSum and maxa∈A cagent
team objective MiniMax. We use cteam as a special opera-
tor (shorthand) for either the sum and max operator, depend-
(Ta) to make
ing on the team objective, and write cteam
a∈A
our notation independent of the team objective. Any partial
) with ∪a∈ATa = T (= each task is as-
solution (Ta1
signed to exactly one agent) is a complete solution of the task-
allocation problem. We want to ﬁnd a complete solution of
the task-allocation problem with a small team cost.

a∈A

cagent
a

. . . Tam

a

(cid:2)

a

cagent
a

ba

ba

We now consider any round of the SSI auction with bun-
dles. Assume that agent a ∈ A has already been assigned
the tasks Ta ⊆ T in previous rounds for all a ∈ A. Thus,
U = T \ ∪a∈ATa is the set of unassigned tasks. We leave out
the “unassigned” in the following for readability since only
unassigned tasks are bid on and subsequently assigned. A bid
b is a triple of an agent, a bundle and a bid cost (= numerical
value of the bid). If b is a bid, then we use ba to denote the
agent, bt to denote the bundle it bids on and bc to denote the
bid cost. We now explain exactly which bids the agents sub-
mit (including how much they bid) and which of these bids
win.

(Tba

(Tba

Bidding Phase: The set of submitted bids B satisﬁes:
1) for all b ∈ B, it holds that ba ∈ A, bt ⊆ U , and
0 < |bt| ≤ k; and 2) for all a ∈ A and T (cid:2) ⊆ U with
0 < |T (cid:2)| ≤ k, there exists exactly one bid b ∈ B with
ba = a and bt = T (cid:2)
(= each agent bids on all non-empty
bundles of at most k tasks). For the MiniSum team objective,
bc = cagent
). In other words, the agent
bids the increase in its agent cost for all tasks assigned to it
if it is additionally assigned the tasks that it bids on, which
is similar to previous work on marginal-cost bidding in Con-
tractNet [Sandholm, 1996]. For the MiniMax team objective,
∪ bt). In other words, the agent bids its agent
bc = cagent
cost for all tasks assigned to it if it is additionally assigned the
tasks that it bids on.

∪bt)−cagent

with b (cid:8)= b(cid:2)

a and bt∩b(cid:2)

Winner Determination Phase: Each collection B(cid:2) ⊆ B
of bids is potentially winning iff 1) ba (cid:8)= b(cid:2)
= ∅ for
all b, b(cid:2) ∈ B(cid:2)
; and 2) | ∪b∈B (cid:2) bt| = min(k, |U |) (=
a potentially winning collection of bids must have been made
by different agents, since several bids by the same agent do
not express synergies, and cover exactly k tasks or all tasks
in case the number of tasks is smaller than k). The term |U |
covers the case where the number of tasks is smaller than
the bundle size k. We denote the set of all potentially win-
ning collections of bids as P (B). The auctioneer evaluates
a potentially winning collection B(cid:2) ⊆ P (B) of bids accord-
b∈B (cid:2) bc, called evaluation cost, for both the
ing to the value cteam
MiniSum and MiniMax team objectives. Thus, the winning
collection Bw ∈ P (B) of bids satisﬁes, for all B(cid:2) ∈ P (B),
b∈B (cid:2) bc (= the winning collection of bids has the
cteam
b∈Bw
smallest evaluation cost among all potentially winning col-
lections of bids). Any such collection of bids can be chosen.
The auctioneer then assigns the additional tasks bt to agent ba
for all b ∈ Bw. At this point in time, agent a ∈ A has been
assigned the tasks Ta(Bw) = Ta ∪ bt if there exists b ∈ Bw
with ba = a, and Ta(Bw) = Ta otherwise.

bc ≤ cteam

(Tba

ba

t

Figure 1: Multi-Agent Routing Problem

3 Multi-Agent Routing

We study multi-agent routing problems as examples of task-
allocation problems, as shown in Figure 1. Multi-agent rout-
ing problems are task-allocation problems where the tasks are
to visit given targets with exactly one agent each. The terrain,
the locations of all agents and the locations of all targets are
known.1 The agent cost of an agent to visit a set of given tar-
gets corresponds to the smallest travel distance needed to visit
the targets from its current location. There can be synergies
among tasks, for example, the smallest travel distance needed
to visit two close-by targets is typically smaller than the sum
of the travel distances needed to visit each target individu-
ally. Multi-agent routing is a standard task for robot teams
that needs to be solved, for example, as part of de-mining,
search-and-rescue and taking rock probes on the moon. In
multi-agent routing without capacity constraints, every agent
can perform an arbitrary number of tasks. Multi-agent rout-
ing problems without capacity constraints are standard test
domains for agent coordination with auctions [Dias et al.,
2005]. In multi-agent routing with capacity constraints, ev-
ery agent can perform at most a given number of tasks (= its
capacity), for example, can take only a given number of rock
probes before its drill bit becomes useless due to wear and
tear. Multi-agent routing problems with capacity constraints
are novel applications for agent coordination with auctions.

4 SSI Auctions with Bundles

We now develop a blend of combinatorial and sequential
single-item auctions (SSI auctions), which we call sequen-
tial bundle-bid single-sale (= single-item) auction algorithms
(short: SSI auctions with bundles) to solve the task-allocation
problems: Initially, all tasks are unassigned. SSI auctions
with bundles consist of several rounds, until all tasks have
been assigned to agents, which then execute the tasks as-
signed to them. During each round, all agents bid on all non-
empty bundles of at most k unassigned tasks (bidding phase)
and the auctioneer then assigns exactly k additional tasks to
agents (or all tasks in case the number of tasks is smaller than
k), either to the same agent or different agents (winner deter-
mination phase). We call k the bundle size.

1One can solve multi-agent routing problems in unknown terrain
by making assumptions about the unknown terrain, such as the as-
sumption that it is traversable, making it in effect “known” and thus
solvable with auctions. One then runs another auction to re-allocate
all unvisited targets to agents whenever this assumption turned out
to be wrong and needed to get revised.

We now explain why we expect these bidding and winner
determination rules to result in a small team cost. (However,
their team cost can be worse than that of standard SSI auc-
tions.)

Theorem 4.1 For all B(cid:2)
cteam
a∈A
MiniSum and MiniMax team objectives.

∈
(Ta(Bw)) ≤ cteam
cagent
a∈A
a

cagent
a

P (B),

it holds

that
(Ta(B(cid:2))) for both the

Proof: Let X and Y be any two potentially winning collec-
bc (a) implies
Consider

tions of bids. We show that cteam
b∈X
cteam
cagent
a∈A
a

(Ta(X)) ≤ cteam
a∈A

bc ≤ cteam
b∈Y

(Ta(Y )) (b).

cagent
a

IJCAI-07

1360

cagent
a

a

a

a

a

(Ta ∪ Xa) − cagent

(Ta), maxa∈A:ba∈X cagent

(Ta(X)) = maxa∈A cagent

(Ta) to both
the MiniSum team objective. Adding cteam
a∈A
sides of Inequality (a) yields Inequality (b) since by deﬁnition
bc = cagent
(Ta) where Xa is the (possibly
empty) bundle of tasks bid on by agent a in the collection X
of bids. Now consider the MiniMax team objective. By def-
(Ta(X)) =
inition, cteam
a∈A
max{maxa∈A:ba(cid:3)∈X cagent
∪
(Ta ∪
Xa)} = max{maxa∈A cagent
Xa)},
evalu-
second
argument
collection X of
from In-
ation
=
equality
max{maxa∈A cagent
Ya)},
to the ﬁrst one above
where the ﬁrst argument
the collection
and the second one is the evaluation cost of
Y of bids from Inequality (a).
Thus,
Inequality (a) implies
(Ta(Y )) and thus Inequality
cteam
a∈A
(b).

cagent
a
(Ta), maxa∈A:ba∈Y cagent

is
bids
(Ta(Y ))
∪
(Ta

(Ta), maxa∈A:ba∈X cagent

where
of

is identical

cagent
a

(Ta(X)) ≤ cteam
a∈A

cagent
a

Similarly,

(Ta

a
the

a

the
the

cost

(a).

cteam
a∈A

a

cagent
a

a

a

In other words, each round of SSI auctions with bundles as-
signs min(k, |U |) additional tasks to agents so that the team
cost after the assignment is as small as possible. Thus, SSI
auctions with bundles perform hill-climbing and the resulting
team cost can thus be expected to be small. Unfortunately, the
communication and winner determination costs of SSI auc-
tions with bundles (as described so far) are large since the
number of bids is a kth-order polynomial in |U |, the num-
ber of tasks. This is a problem because the communication
and winner determination costs are bottlenecks for SSI auc-
tions with bundles, especially since the auctioneer is often
centralized. Thus, SSI auctions do not scale to large numbers
of tasks even for small bundle sizes. We now show how to
modify SSI auctions with bundles so that they continue to as-
sign the same additional tasks to the same agents during each
round (modulo tie breaking) but so that, for a given bundle
size, every agent needs to submit only a constant number of
bids per round and the runtime of winner determination is
linear in the number of agents and independent of the number
of tasks. This is the main contribution of our paper and per-
haps surprising since SSI auctions with bundles are similar to
ideal combinatorial auctions, for which winner determination
is known to be NP-hard and thus needs to be approximated
[Hoos and Boutilier, 2000]. The result is due to the fact that
agents bid only on bundles of at most k tasks for SSI auctions
with bundles but on all bundles for ideal combinatorial auc-
tions. The idea behind our modiﬁcation is that the agents do
not need to submit bids on all bundles of at most k tasks since
some bundles have no chance of winning.

5 Bidding Phase

We now explain exactly which bundles the agents need to bid
on. To determine which bids to submit in a round of an SSI
auction with bundle size k, an agent constructs k bid trees,
one for each 1 ≤ k(cid:2) ≤ k. Each node of the k(cid:2)
th bid tree is
labeled with a bundle of k(cid:2)
tasks. Each edge is labeled with
a task. The k(cid:2)
th bid tree is recursively constructed, starting
with its root. Consider any node in the bid tree.
It is la-
beled with the bundle that has the smallest bid cost among all
bundles of k(cid:2)
tasks that do not contain any of the tasks that
label the edges from the root to the node in question. Each

node at depth min(k − k(cid:2), |U | − k(cid:2)) is a leaf. The bid tree
is empty if this depth is negative. (The term |U | − k(cid:2)
covers
the case where the number of tasks is smaller than the bundle
size k.) Otherwise, each edge from the node in question to
its k(cid:2)
children is labeled with one of the tasks contained in
the bundle. This completes the construction of the bid trees.
The agent then submits bids on all bundles that label nodes
in its bid trees, calculating the bid costs as before. (The same
bundle can label several nodes but, of course, results in only
one bid.) Thus, the number of bids per agent is constant for
SSI auctions with a given bundle size.

Theorem 5.1 The winner determination phase assigns the
same min(k, |U |) additional tasks (modulo tie breaking) to
agents no matter whether the agents bid on all non-empty
bundles with at most k tasks or submit bids on the bundles
from their bid trees only.

so that the bundle of bid b(cid:4)

Proof Sketch: Assume that the agents bid on all non-empty bun-
dles with at most k tasks and that the winning collection of bids is
W . We show that we can achieve the same team cost if the agents
bid on the bundles from their bid trees only. Obviously, the team
cost cannot be smaller if the agents bid on the bundles from their bid
trees only, a subset of all non-empty bundles with at most k tasks.
We thus need to show that it cannot be larger either. To this end,
consider an arbitrary winning bid b ∈ W whose bundle bt is not
in any bid tree of agent ba. We now show that we can replace this
bid b with a bid b(cid:4)
is in a bid tree, the
collection of bids remains potentially winning, and the bid cost of
bid b(cid:4)
is no larger than the bid cost of bid b, which implies that the
substitution cannot increase the team cost since the cteam operator
is monotonically increasing in its arguments. Similar substitutions
can then be made for all bids in W , if necessary, until all bids are on
bundles from the bid trees of the agents, which proves the theorem.
To prove the property, consider the tasks F = ∪
t that
are part of the winning bids except for bid b. The following prop-
is in a bid tree, b(cid:4)
erties will hold: b(cid:4)
= ba (= both bids are from
the same agent), |b(cid:4)
| = |bt| (= both bids are on the same number of
tasks), b(cid:4)
∩ F = ∅ (= no task is assigned to more than one agent)
and b(cid:4)
≤ bc (= the bid cost of the new bid is no larger than the bid
cost of the previous bid). We achieve these properties by choosing
the bid b(cid:4)
with the smallest bid cost among all bids from the |bt|th
bid tree of agent ba whose bundles do not contain tasks in F , as fol-
lows: We start at the root of the |bt|th bid tree of agent ba as current
node. If the bundle of the current node does not contain any tasks
in F , then we pick the bid on this bundle. Otherwise, choose a task
contained in both this bundle and F (ties can be broken arbitrarily)
and follow the edge labeled with this task from the current node to
one of its children, and repeat the procedure. We are guaranteed to
reach a node whose bundle does not contain any tasks in F because
F contains min(k − |bt|, |U | − |bt|) tasks and the |bt|th tree has
depth min(k − |bt|, |U | − |bt|). The bundle of this node is the bun-
dle with the smallest bid cost that does not contain any tasks in F
and has the stated properties, per construction of the bid trees.

b(cid:2)(cid:2)∈W \{b}b(cid:4)(cid:4)

a

c

t

t

As example, consider the multi-agent routing problem
without capacity constraints shown in Figure 2 for the Mini-
Max team objective. The agents and targets are located on the
real line. (Epsilon is a small positive tie-breaking constant.)

IJCAI-07

1361

ε

ε

Figure 2: Multi-Agent Routing Problem without Capacities

{t1}
1 + 
3

{t2}
1 − 2
1 + 

{t3}
1 − 
1

{t1,t2}
3 − 3
3

{t1,t3}
3 − 
3

{t2,t3}
1 − 
1 + 

{t1,t2,t3}
3 − 
3

a1
a2

Table 1: Bid Costs

Table 1 shows the bid costs of both agents on all bundles. Fig-
ure 3 shows the bid trees of agent a1 during the ﬁrst round of
an SSI auction with bundle size three. For example, the bun-
dle of two targets with the lowest bid for agent a1 and thus the
root of its bid tree two is {t2, t3}. The bundle with the lowest
bid for agent a1 among all bundles with two targets different
from target t2 and thus a child of the root of its bid tree two
is {t1, t3}. Similarly, the bundle with the lowest bid for agent
a1 among all bundles with two targets different from target
t3 and thus the second child of the root of its bid tree two is
{t1, t2}. Overall, the agent bids on all non-empty bundles of
at most three targets. Figure 4 shows the bid trees of agent a1
during the ﬁrst round of an SSI auction with bundle size two.
Consequently, the agent bids on the bundles {t2, t3}, {t2},
{t3}, which are only half of all non-empty bundles of at most
two targets. For example, the agent does not bid on all single
tasks but only on the ones with the lowest and second-lowest
bid cost. Table 2 demonstrates the substantial reduction in the
number of bids of one agent for different bundle sizes in case
there are 20 tasks.

6 Winner Determination Phase
From now on, we use B to refer to the bids of the agents
on the bundles from their bid trees. Although the number of
bids is small, it is not clear whether the auctioneer can deter-
mine the winning bids with a small runtime. In the follow-
ing, we construct a winner-determination rule that is linear in
the number of bids and thus linear in the number of agents
and independent of the number of tasks for SSI auctions with
a ﬁxed bundle size.
It is curious that the construction and
justiﬁcation of the winner-determination rule are rather more
complicated than those of the bundle construction.

Theorem 6.1 The auctioneer can determine the winning bids
with a runtime that is linear in the number of bids.

Proof Sketch: The auctioneer needs to assign min(k, |U |) ad-
ditional tasks to agents.
It ﬁrst ﬁnds all different non-decreasing
sequences of at most |A| positive integers that sum to min(k, |U |).
For example, there are three such sequences for min(k, |U |) = 3
and |A| ≥ 3, namely the sequences (1,1,1), (1,2) and (3), but only
two such sequences (the latter two) for |A| = 2. Each sequence
represents a possible set of winning bid sizes. The number of such
sequences must be O(1) because k = O(1). A portfolio for such
a sequence (s(1) . . . s(l)) is a collection of bids (b(1) . . . b(l)) with
b(i) ∈ B and |b(i)t| = s(i) for all 1 ≤ i ≤ l. The portfolio is con-
sistent iff b(i)a (cid:8)= b(j)a and b(i)t ∩b(j)t = ∅ for all 1 ≤ i < j ≤ l,
that is, no agent gets more than one bid, and the bids form a partition

Figure 3: Bid Trees for SSI Auctions with Bundle Size Three

Figure 4: Bid Trees for SSI Auctions with Bundle Size Two

Number of Targets

|U|
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20

Bundle Size

Previous Number

k

20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1

of Bids

1048575
1048574
1048554
1048364
1047224
1042379
1026875
988115
910595
784625
616665
431909
263949
137979
60459
21699
6195
1350
210
20

New Number

of Bids

1048575
1047074
1030781
944747
809850
561204
343120
184060
85684
34510
12130
3764
1048
315
105
39
16
7
3
1

(100.00%)
(99.86%)
(98.30%)
(90.12%)
(77.33%)
(53.84%)
(33.41%)
(18.63%)
(9.41%)
(4.40%)
(1.97%)
(0.87%)
(0.40%)
(0.23%)
(0.17%)
(0.18%)
(0.26%)
(0.52%)
(1.43%)
(5.00%)

Table 2: Reduction in the Number of Bids

of the items. Note that a consistent portfolio is a potentially winning
collection of bids. To ﬁnd the winning collection of bids, the auc-
tioneer constructs a search tree for each sequence. Each node of the
search tree for a given sequence (s(1) . . . s(l)) is labeled with a port-
folio for the sequence. Each edge is labeled with a constraint, which
can be of two kinds: 1) “t ∈ b(j)t” for a given t ∈ U and a given
1 ≤ j ≤ l and 2) “b(j)a = ba and b(j)t = bt” for a given b ∈ B
with |bt| = s(j) and a given 1 ≤ j ≤ l. The search tree for a given
sequence (s(1) . . . s(l)) is recursively constructed, starting with its
root. Consider any node in the search tree. It is labeled with a port-
folio (b(1) . . . b(l)) with the smallest evaluation cost among all port-
folios that satisfy the constraints that label the edges from the root
to the node in question, as follows: If the constraint is “t ∈ b(j)t”
then the portfolio needs to satisfy t ∈ b(i)t for i = j and, for all
1 ≤ i ≤ l with i (cid:8)= j, t (cid:8)∈ b(i)t. If the constraint is “b(j)a = ba
and b(j)t = bt,” then the portfolio needs to satisfy b(i)a = ba and
b(i)t = bt for i = j and, for all 1 ≤ i ≤ l with i (cid:8)= j, b(i)a (cid:8)= ba

IJCAI-07

1362

and b(i)t ∩ bt = ∅. The node is deleted from the search tree if no
portfolio satisﬁes the constraints. Each node with a consistent port-
folio is a leaf. Otherwise, the auctioneer chooses any 1 ≤ i ≤ l
with b(i)a = b(j)a or b(i)t ∩ b(j)t (cid:8)= ∅ for some 1 ≤ j ≤ l with
i (cid:8)= j to generate the constraints that label the edges from the node
in question to its children: 1) “t ∈ b(j)t,” one constraint for each
1 ≤ j ≤ l with j (cid:8)= i and each t ∈ b(i)t; and 2) “b(j)a = ba and
b(j)t = bt,” one constraint for each 1 ≤ j ≤ l and each b ∈ B with
b(i)a = ba and |bt| = s(j). The justiﬁcation for these constraints
is that at least one of them must be satisﬁed: Either some bid by
agent b(i)a is part of the portfolio or there is a bid part of the portfo-
lio whose bundle includes some task t ∈ b(i)t. If this were not the
case, then one could substitute bid b(i) for the bid at the ith position,
resulting in a potentially winning bid without increasing the evalu-
ation cost. This completes the construction of the search trees. The
winning collection of bids then is any portfolio (b(1) . . . b(l)) with
the smallest evaluation cost among all consistent portfolios that label
nodes in the search trees, per construction of the search trees. There
are O(1) sequences and thus O(1) search trees. The depth of the
search tree for a given sequence (s(1) . . . s(l)) is at most k + l and
thus O(1) since each constraint imposes an additional restriction on
a portfolio and no portfolio can satisfy more than k + l constraints.
The number of children of every node in each search tree is O(1).
Thus, each search tree has O(1)O(1) = O(1) nodes. The portfo-
lio of each node can be determined in time O(|B|) by ﬁnding the
bid with the smallest bid cost that satisﬁes the constraints indepen-
dently for each position in the portfolio. Consequently, the runtime
of winner determination is O(1) × O(1) × O(|B|) = O(|B|).

Consider again the multi-agent routing problem without
capacity constraints shown in Figure 2. Figure 5 shows the
corresponding search trees for the ﬁrst round of an SSI auc-
tion with bundle size three. The underlined bids were used to
generate the constraints. Consistent portfolios are annotated
with their evaluation cost.

7 Reﬁnement
The auctioneer can be cautious and assign only one additional
task of the min(k, |U |) tasks per round, namely one with the
smallest agent cost. In this case, the bidding phase changes
as follows: Every agent also needs to bid on all tasks that are
part of larger bundles that it bids on since it bids its agent
cost on single tasks. This increases its number of bids by a
constant that is usually small. As example, consider again
the multi-agent routing problem without capacity constraints
shown in Figure 2. Figures 3 and 4 show that agent a1 already
bids on all tasks that are part of larger bundles that it bids on
during the ﬁrst round of SSI auctions with bundle sizes two
and three and thus does not need to submit any additional
bids during the ﬁrst round. The winner determination phase
changes as follows: The auctioneer ﬁrst determines the win-
ning collection of bids W , as before. Then, it determines the
(t(cid:2)) for
bid b ∈ W and task t ∈ bt with cagent
all b(cid:2) ∈ W and t(cid:2) ∈ b(cid:2)
t (= the task with the smallest agent
cost or, equivalently, bid cost among all winning tasks). It
does this by comparing the bids of agent b(cid:2)
for all
b(cid:2) ∈ W and t(cid:2) ∈ b(cid:2)
t and choosing the one with the smallest
bid cost (ties can be broken arbitrarily). It then assigns only
this additional task t to the bidding agent ba.

a on task t(cid:2)

ba

(t) ≤ cagent

b(cid:2)
a

As example, consider again the multi-agent routing prob-
lem without capacity constraints shown in Figure 2 for the
MiniMax team objective.2 For this particular example, SSI
auctions with larger bundle sizes indeed result in a smaller
team cost, since they are less myopic, although this is not
guaranteed in general. 1) For SSI auctions with bundle size
one (where the auctioneer automatically assigns only one ad-
ditional target), targets are assigned to agents in the following
order. Round 1: agent a1 is assigned target t2; Round 2: agent
a1 is assigned target t3; and Round 3: agent a1 is assigned
target t1. We write this as: a1 ← t2; a1 ← t3; a1 ← t1.
The largest travel distance of any agent (= makespan) is
3 − . 2) For SSI auctions with bundle size two where the
auctioneer is cautious (that is, assigns only one additional
target) targets are assigned to agents in the following or-
der, where parentheses enclose targets that are not assigned:
a1 ← t2(t3); (a1 ← t1), a2 ← t3; a1 ← t1. The makespan
is 3 − 3, which is slightly smaller than the makespan of
SSI auctions with bundle size one. The makespan of SSI
auctions with bundle size two where the auctioneer assigns
two additional targets (if possible) is 3 − , which is slightly
larger than the makespan of SSI auctions with bundle size
two where the auctioneer assigns only one additional target
and the reason why the auctioneer assigns only one additional
target in our experiments. 3) For SSI auctions with bundle
size three where the auctioneer assigns only one additional
target, targets are assigned to agents in the following order:
(a1 ← t1), a2 ← (t2)t3; a1 ← t1, (a2 ← t2); a2 ← t2. The
makespan is 1 + , which is the minimal team cost since the
bundle size equals the number of targets and smaller than the
makespan of SSI auctions with bundle size two.

8 Experiments

We now evaluate the beneﬁt of SSI auctions with bundles for
multi-agent routing problems on known eight-neighbor pla-
nar grids of size 51 × 51 with square cells that are either
blocked or unblocked. The grids resembled ofﬁce environ-
ments, as shown in Figure 1. We averaged all results over
25 instances of the same ofﬁce environment with randomly
closed doors. We solved multi-agent routing problems with
capacity constraints using SSI auctions with bundles where
the agents stopped bidding once the number of tasks assigned
to them reached their capacity. We set the capacities of all
agents to the ratio of the number of targets and agents. An
agent needs to determine the bid costs of many bids to deter-
mine which bids to submit. To determine each bid cost for
multi-agent routing problems, it needs to solve a version of a
TSP problem (where it does not need to return to its initial lo-
cation) when calculating the smallest travel distance needed
to visit the targets from its current location, an NP-hard prob-
lem. These calculations therefore need to be approximated
to run fast. For this purpose, we used a combination of the
two-opt and cheapest-insertion heuristics in our experiments.
Table 3 tabulates the team cost for SSI auctions with bun-
dle sizes one, two and three as well as approximations of

2Similar results holds for the MiniSum team objective. Only the
results for SSI auctions with bundle size two where the auctioneer
assigns only one additional target is slightly different.

IJCAI-07

1363

∈

∈

Figure 5: Search Trees

Capacities

Agents

Targets

Minimal

MiniSum Team Objective
Bundle Size 2

Bundle Size 1

Bundle Size 3

Minimal

MiniMax Team Objective
Bundle Size 2

Bundle Size 1

2
2
2
2
2
3
3
3
3
3
4
4
4
4
4

2
4
6
8
10
2
4
6
8
10
2
4
6
8
10

4
8
12
16
20
6
12
18
24
30
8
16
24
32
40

120.8
176.6
212.9
251.7
285.7
166.2
229.1
(265.9)
(297.7)
(340.4)
187.4
(264.4)
(296.9)
(357.7)
(413.3)

125.7
197.1
243.6
287.5
344.8
176.1
265.2
323.0
371.3
421.2
201.6
303.5
376.4
437.2
488.4

121.7 [122.5]
189.4 [189.7]
235.8 [237.8]
283.2 [290.0]
331.4 [331.7]
172.5 [174.6]
258.6 [261.8]
310.1 [314.4]
362.7 [360.4]
411.9 [415.3]
207.6 [204.9]
302.9 [305.9]
362.8 [364.4]
425.9 [431.7]
504.9 [512.0]

120.8 [121.6]
187.5 [189.3]
228.2 [230.1]
274.9 [281.5]
328.5 [329.2]
169.3 [172.0]
250.2 [255.0]
297.8 [310.8]
356.7 [359.9]
402.9 [407.3]
203.0 [202.0]
297.1 [306.5]
359.3 [356.1]
415.6 [421.3]
479.2 [499.9]

76.3
60.3
54.2
(51.2)
(52.6)
96.2
(72.2)
(65.9)
(69.4)
(82.9)
106.0
(89.2)
(100.0)
(114.9)
(147.3)

83.9
93.1
88.7
87.5
97.1
113.2
107.7
110.8
107.5
113.5
132.6
132.9
124.5
125.7
129.5

81.1 [81.6]
87.6 [89.6]
79.6 [80.9]
86.3 [85.4]
90.3 [94.7]
106.3 [110.7]
105.4 [106.9]
104.3 [109.6]
108.2 [105.8]
113.3 [110.9]
127.5 [128.5]
125.5 [123.5]
125.9 [122.0]
122.6 [123.4]
124.2 [126.3]

Bundle Size 3

77.3 [81.4]
78.2 [94.7]
74.6 [75.3]
77.2 [85.8]
83.9 [94.3]
99.0 [99.1]
102.9 [105.1]
101.7 [109.4]
99.7 [102.1]
97.7 [105.1]
118.7 [131.9]
116.5 [126.7]
119.6 [118.3]
113.2 [130.8]
116.1 [126.2]

Table 3: Comparison of Bundle Sizes: Experimental Results

the minimal team cost calculated with a mixed integer pro-
gram (MIP) for both the MiniSum and MiniMax team objec-
tives. (Team costs for a non-cautious auctioneer are reported
in square brackets and tend to be larger than the team costs
for a cautious auctioneer, who assigns only one additional
target.) The MIPs were arc-based Vehicle Routing Prob-
lem formulations with routing constraints and Miller-Tucker-
Zemlin (MTZ) sub-tour elimination constraints, which are
further augmented by introducing additional ﬁrst and sec-
ond order lifted versions of MTZ constraints and arrival-time
constraints. They were solved with CPLEX 9.0, a commer-
cial MIP solver, at default settings on a Dell Precision 670
computer with a 3.2 GHz Intel Xeon Processor and 2 GB
RAM running Red Hat Linux 9.0. For MIPs that could not
be solved within one hour of runtime, a binary search was
carried out with CPLEX as subroutine, which sometimes al-
lowed us to determine additional minimal team costs within
one additional hour of runtime. A “minimal team cost” is en-
closed in parentheses in the table if the average contains at
least one non-minimal team cost and it is thus only an up-
per bound on the minimal team cost. The runtime to cal-
culate this gold standard quickly increased with the problem
size. For example, we were not able to determine the mini-

mal team cost for any of the 25 multi-agent routing problems
with 10 agents and 40 targets for the MiniMax team objective
within the runtime limit. On the other hand, all SSI auctions
terminated within two seconds and their runtime increased
only very slowly with the problem size. For the MiniSum
team objective, SSI auctions with bundle size three reduced
the team cost by 4-5 percent on average compared to stan-
dard SSI auctions (with bundle size one). For the MiniMax
team objective, SSI auctions with bundle size three reduced
the team cost by 10-11 percent on average compared to stan-
dard SSI auctions. Nonparametric statistical comparisons be-
tween SSI auctions with different bundle sizes support the
hypothesis that larger bundle sizes reduce the average team
cost across cases with different numbers of agents and tar-
gets with conﬁdence 0.9963 (1 versus 2, MiniMax); 0.9995
(1 versus 2, MiniSum; 1 versus 3, MiniSum); and 0.99997 (1
versus 3, MiniMax; 2 versus 3, both team objectives). These
results justify our generalization of standard SSI auctions to
SSI auctions with bundles.

We also tested SSI auctions with bundles against a dif-
ferent heuristic, as suggested by the reviewers. The experi-
mental setup was identical to that of the ﬁrst experiment, ex-
cept that the conference schedule limited us to 12 instead of

IJCAI-07

1364

Capacities

Agents

Targets

CPLEX Heuristics

Bundle Size 2

Bundle Size 3

CPLEX Heuristics

Bundle Size 2

Bundle Size 3

MiniSum Team Objective

MiniMax Team Objective

2
2
2
2
2
3
3
3
3
3
4
4
4
4
4

2
4
6
8
10
2
4
6
8
10
2
4
6
8
10

4
8
12
16
20
6
12
18
24
30
8
16
24
32
40

120.2
185.5
205.0
245.3
295.1
184.1
238.6
(260.7)
(293.7)
(368.8)
185.4
(273.9)
(304.8)
(352.5)
(423.4)

122.0
202.5
221.0
283.0
342.7
192.9
296.6
300.1
354.1
436.9
202.9
313.6
373.7
415.9
492.4

120.2
196.5
231.5
271.9
337.3
189.9
262.6
295.7
345.0
431.5
197.8
304.7
377.6
411.9
469.0

74.7
66.0
52.3
(50.8)
(60.6)
103.5
(76.3)
(65.0)
(73.7)
(89.4)
106.5
(91.7)
(95.5)
(123.7)
(186.8)

76.7
94.8
79.9
84.4
94.7
115.1
109.2
104.6
106.9
128.7
123.9
119.2
130.9
114.3
123.9

74.7
80.1
75.9
78.4
89.6
108.5
112.9
105.6
96.1
109.1
119.7
121.8
127.3
111.0
120.8

Table 4: Comparison of Heuristics: Experimental Results

25 instances of the ofﬁce environment. We set the CPLEX
parameters to strongly emphasize searching and improving
feasible solutions, and further tuned the parameters to im-
prove the performance of the CPLEX local search, RINS, and
other heuristics. The time limit was 5 minutes for cases with
fewer than 16 targets and 10 minutes otherwise. The results
are given in Table 4, which follows the same format as Ta-
ble 3. The CPLEX heuristics result in signiﬁcantly smaller
team costs than SSI auctions with bundles, except for cases
with larger numbers of agents and targets in conjunction with
the MiniMax team objective, where SSI auctions with bun-
dles are superior. On the other hand, the CPLEX heuristics
ran much more slowly than SSI auctions with bundles. The
CPLEX heuristics exhausted the allotted time for more than
one third of the instances, while the SSI auctions with bundles
never ran for more than 0.1 seconds in case of bundle size two
and 1.9 seconds in case of bundle size three. It is future work
to compare SSI auctions with bundles against specialized ve-
hicle routing problem heuristics.

9 Conclusions

In this paper, we studied sequential single-item auctions for
the distributed allocation of tasks to cooperating agents. Roll-
outs [Zheng et al., 2006] reduce the team cost of sequential
single-item auctions but increase their runtime substantially.
We therefore studied an alternative. We generalized sequen-
tial single-item auctions to assign more than one additional
task per round and developed a general theory of such sequen-
tial bundle-bid single-sale (= single-item) auctions (short: se-
quential single-item auctions with bundles). Our research
generalizes earlier (somewhat ad-hoc) work that is equivalent
to SSI auctions with bundle sizes one and two [Lagoudakis
et al., 2005; Zheng et al., 2006]. We showed, for sequential
single-item auctions with a given bundle size, that every agent
needs to submit only a constant number of bids per round and
the runtime of winner determination is linear in the number of
agents. The communication and winner determination costs
do not depend on the number of tasks and thus scale to a large
number of tasks for small bundle sizes.

Acknowledgments

This research was partly supported by NSF awards under contracts
ITR/AP0113881, IIS-0098807 and IIS-0350584 as well as a seed
funding from NASA’s Jet Propulsion Laboratory. The views and
conclusions contained in this document are those of the authors and
should not be interpreted as representing the ofﬁcial policies, ei-
ther expressed or implied, of the sponsoring organizations, agencies,
companies or the U.S. government.

References
[Berhault et al., 2003] M. Berhault, H. Huang, P. Keskinocak,
S. Koenig, W. Elmaghraby, P. Grifﬁn, and A. Kleywegt. Robot
exploration with combinatorial auctions.
In Proceedings of
the International Conference on Intelligent Robots and Systems,
2003.

[Boutilier et al., 1999] C. Boutilier, M. Goldszmidt, and B. Sabata.
Sequential auctions for the allocation of resources with comple-
mentarities. In Proceedings of the International Joint Conference
on Artiﬁcial Intelligence, pages 527–523, 1999.

[Dias et al., 2005] M. Dias, R. Zlot, N. Kalra, and A. Stentz.
Market-based multirobot coordination: A survey and analy-
sis. Technical Report CMU-RI-TR-05-13, Robotics Institute,
Carnegie Mellon University, Pittsburgh (Pennsylvania), 2005.

[Fatima, 2006] S. Fatima. Sequential versus simultaneous auctions:
A case study. In Proceedings of the International Conference on
Electronic Commerce, 2006.

[Hoos and Boutilier, 2000] H. Hoos and C. Boutilier. Solving com-
binatorial auctions using stochastic local search. In Proceedings
of the National Conference on Artiﬁcial Intelligence, pages 22–
29, 2000.

[Lagoudakis et al., 2005] M. Lagoudakis, V. Markakis, D. Kempe,
P. Keskinocak, S. Koenig, A. Kleywegt, C. Tovey, A. Meyerson,
and S. Jain. Auction-based multi-robot routing. In Proceedings of
the International Conference on Robotics: Science and Systems,
2005.

[Sandholm, 1996] T. Sandholm. Negotiation among Self-Interested
Computationally Limited Agents. PhD thesis, Department of
Computer Science, University of Massachusetts, Amherst (Mas-
sachusetts), 1996.

[Zheng et al., 2006] X. Zheng, S. Koenig, and C. Tovey. Improving
sequential single-item auctions. In Proceedings of the Interna-
tional Conference on Intelligent Robots and Systems, 2006.

IJCAI-07

1365

