The computational complexity of dominance and consistency in CP-nets

Judy Goldsmith
Dept. of Comp. Sci.
University of Kentucky

Lexington, KY
40506-0046, USA
goldsmit@cs.uky.edu

J´erˆome Lang

IRIT

Universit·e Paul Sabatier
31062 Toulouse Cedex

France

lang@irit.fr

Abstract

We investigate the computational complexity of
testing dominance and consistency in CP-nets. Up
until now, the complexity of dominance has been
determined only for restricted classes in which the
dependency graph of the CP-net is acyclic. How-
ever, there are preferences of interest that de(cid:2)ne
cyclic dependency graphs; these are modeled with
general CP-nets. We show here that both domi-
nance and consistency testing for general CP-nets
are PSPACE-complete. The reductions used in the
proofs are from STRIPS planning, and thus estab-
lish strong connections between both areas.

1 Introduction
The problems of eliciting, representing and reasoning with
preferences over a multivariable (or, multiattribute) domain
arise in many (cid:2)elds such as planning, design, and group de-
cision making. An explicit representation of a preference or-
dering of elements (we refer to them as outcomes) of such
multivariable domains is exponentially large in the number
of attributes. Therefore, AI researchers have developed lan-
guages for representing preference orderings succinctly. The
formalism of CP-nets [Boutilier et al., 1999] is among the
most popular ones. A CP-net provides a succinct represen-
tation of preference ordering on outcomes in terms of local
preference statements of the form p : xi > xj, where xi; xj
are values of a variable X and p is a logical condition. Infor-
mally, a preference statement p : xi > xj means that given
p, xi is (strictly) preferred to xj ceteris paribus, that is, all
other things being equal. The meaning of a CP-net is given
by a certain ordering relation (dominance) on the set of out-
comes, derived from such reading of preference statements.
If one outcome dominates another, we say that the dominant
one is preferred.

Reasoning about the preference ordering (dominance rela-
tion) expressed by a CP-net is far from easy. The key prob-
lems include dominance testing and consistency testing.
In
the (cid:2)rst problem, given a CP-net and two outcomes (cid:11) and (cid:12),
we want to decide whether (cid:12) dominates (cid:11). The second prob-
lem asks whether there is a dominance cycle in the dominance
ordering de(cid:2)ned by an input CP-net, that is, whether there is
an outcome that dominates (is preferred to) itself.

Miroslaw Truszczy´nski

Dept. of Comp. Sci.
University of Kentucky

Nic Wilson

Cork Constraint

Computation Centre

Ireland

n.wilson@4c.ucc.ie

University College Cork

Lexington, KY
40506-0046, USA
mirek@cs.uky.edu
We study the computational complexity of these two prob-
lems. The results obtained so far concerned only restricted
classes of CP-nets, all requiring that the graph of variable de-
pendencies implied by preference statements in the CP-net be
acyclic. Under certain assumptions, the dominance-testing
problem is in NP and, under some additional assumptions,
even in P [Domshlak and Brafman, 2002; Boutilier et al.,
2004a]. Its complexity in the general case has remained until
now an open problem. We show that it is in fact PSPACE-
complete, even for the propositional case, by exhibiting in
Section 4 a PSPACE-hardness proof for dominance testing.
We then turn to consistency testing. While acyclic CP-
nets are guaranteed to be consistent, this is not the case
with general CP-nets (see [Domshlak and Brafman, 2002;
Brafman and Dimopoulos, 2004] for detailed examples and
discussions). In Section 5, we show that consistency testing
is as hard as dominance testing.

To prove the hardness part of the results, we (cid:2)rst establish
the PSPACE-hardness of some problems related to proposi-
tional STRIPS planning. We then show that these problems
can be reduced to CP-net dominance and consistency testing
by exploiting connections between actions in STRIPS plan-
ning and preference statements in CP-nets.

We assume some familiarity with the complexity class
PSPACE (we refer to [Papadimitriou, 1994] for details). In
particular, we rely later on the equivalences NPSPACE =
PSPACE = coPSPACE.

The complexity results in this paper address cyclic CP-
nets. Most earlier work has concentrated on the acyclic
model. However, we argue that acyclic CP-nets are not suf-
(cid:2)ciently expressive to capture human preferences on even
some simple domains. Consider, for instance, a diner who
has to choose either red or white wine, and either (cid:2)sh or meat.
Given red wine, they prefer meat, and conversely, given meat
they prefer red wine. On the other hand, given white wine,
they prefer (cid:2)sh, and conversely, given (cid:2)sh they prefer white
wine. This gives a consistent cyclic CP-net, and there is no
acyclic CP-net giving rise to the same preferences on out-
comes. So, such cyclicity of preference variables does not
necessarily lead to a cyclic order on outcomes.

2 Generalized propositional CP-nets
Let V = fx1; : : : ; xng be a (cid:2)nite set of variables. For each
variable x 2 V , we assume a (cid:2)nite domain Dx of values. An

outcome is an n-tuple (d1; : : : ; dn) of Dx1 (cid:2) (cid:1) (cid:1) (cid:1) (cid:2) Dxn.

In this paper, we focus on propositional variables: vari-
ables with binary domains. Let V be a (cid:2)nite set of propo-
sitional variables. For every x 2 V , we set Dx = fx; :xg
(thus, we overload the notation and write x both for the vari-
able and for one of its values). We refer to x and :x as liter-
als. Given a literal l we write :l to denote the dual literal to l.
The focus on binary variables makes the presentation clearer
and has no impact on our complexity results.

A conditional preference rule (or, for short, a [preference]
rule) over V is an expression p : l > :l, where l is a literal
of some atom x 2 V and p is a propositional formula over V
that does not involve variable x.
Deﬁnition 1 (Generalized CP-net) A generalized CP-net C
(for short, a GCP-net) over V is a set of conditional prefer-
ence rules. For x 2 V we deﬁne p+
C(x), usually
written just: p+(x) and p(cid:0)(x), as follows: p+
C(x) is equal to
the disjunction of all p such that there exists a rule p : x > :x
in C; p(cid:0)
C(x) is the disjunction of all p such that there exists
a rule p : :x > x in C. We deﬁne the associated directed
graph GC (the dependency graph) over V to consist of all
pairs (y; x) of variables such that y appears in either p+(x)
or p(cid:0)(x).

C(x) and p(cid:0)

In our complexity results we will also need the following
representation of GCP-nets: a GCP-net C is said to be in con-
junctive form if C only contains rules p : l > :l such that p
is a (possibly empty) conjunction of literals. In this case all
formulas p(cid:0)(x), p+(x) are in disjunctive normal form, that
is, a disjunction of conjunctions of literals (including > (cid:150) the
empty conjunction of literals).

GCP-nets determine a transitive relation on outcomes, in-
terpreted in terms of preference. A preference rule p : l > :l
represents the statement (cid:147)given that p holds, l is preferred to
:l ceteris paribus(cid:148). Its intended meaning is as follows. If
outcome (cid:12) satis(cid:2)es p and l, then (cid:12) is preferred to the out-
come (cid:11) which differs from (cid:12) only in that it assigns :l for
variable x. In this situation we say that there is an improv-
ing ﬂip from (cid:11) to (cid:12) sanctioned by the rule p : l > :l. If
(cid:11)0; : : : ; (cid:11)m is a sequence of outcomes with m (cid:21) 1 and each
next outcome in the sequence is obtained from the previous
one by an improving (cid:3)ip, then we say that (cid:11)0; : : : ; (cid:11)m is an
improving sequence (from (cid:11)0 to (cid:11)m) for the GCP-net, and
that (cid:11)m dominates (cid:11)0, written (cid:11)0 (cid:30) (cid:11)m.

Finally, A GCP-net is consistent if there is no outcome (cid:11)

which is strictly preferred to itself, i.e., such that (cid:11) (cid:30) (cid:11).

The main objective of the paper is to establish the com-
plexity of the following two problems concerning the notion
of dominance associated with GCP-nets (sometimes under re-
strictions on the class of input GCP-nets).
Deﬁnition 2
GCP-DOMINANCE: given a GCP-net C and two outcomes (cid:11)
and (cid:12), decide whether (cid:11) (cid:30) (cid:12) in C.
GCP-CONSISTENCY: given a GCP-net C, decide whether C
is consistent.

There are two properties of GCP-nets that are essential in
linking them to the original notion of CP-nets [Boutilier et
al., 1999; 2004a].

C(x) ^ p+

Deﬁnition 3
A GCP-net C over V is locally consistent if for every x 2
C(x) is unsatisﬁable. It is locally
V , the formula p(cid:0)
complete if for every x 2 V , the formula p(cid:0)
C(x) is a
tautology.
Deﬁnition 4 (Propositional CP-net) A CP-net over the set
V of (propositional) variables is a locally consistent and lo-
cally complete GCP-net over V .

C(x) _ p+

Problems CP-DOMINANCE and CP-CONSISTENCY are de-

(cid:2)ned analogously to De(cid:2)nition 2.

This de(cid:2)nition of a CP-net differs from the one given in
[Boutilier et al., 2004a], which uses explicit conditional pref-
erence tables. Our representation is often more compact, but
it is easy to verify that it is equivalent in that it gives rise to
the same de(cid:2)nition of dominance.

When de(cid:2)ning a decision problem, it is critical to specify
the way to represent its input instances, as the representation
may affect the complexity of the problem. Unless stated oth-
erwise, we assume that GCP-nets (and so, also CP-nets) are
represented as a set of preference rules, as described in De(cid:2)-
nition 1. Therefore, the size of a GCP-net is given by the total
size of the formulas p(cid:0)(x), p+(x), x 2 V .

3 Propositional STRIPS planning
In this section we derive some technical results on proposi-
tional STRIPS planning which form the basis of our complex-
ity results in Sections 4 and 5. We establish the complexity of
plan existence problems for propositional STRIPS planning,
under restrictions on input instances that make the problem
useful in the studies of dominance and consistency in GCP-
nets.

Let V be a (cid:2)nite set of variables. A state over V is a com-
plete and consistent set of literals over V (which we often
view as the conjunction of its members). A state is therefore
equivalent to an outcome, de(cid:2)ned in a CP-nets context.
Deﬁnition 5 (Propositional STRIPS planning) A proposi-
tional STRIPS instance is a tuple hV; (cid:11)0; (cid:13); ACT i, where

1. V is a ﬁnite set of propositional variables;
2. (cid:11)0 is a state (over V ), called the initial state;
3. (cid:13) is a state called the goal;
4. ACT is a ﬁnite set of actions, where each action a 2
ACT is described by a consistent conjunction of literals
pre(a) (a precondition) and a consistent conjunction of
literals post(a) (a postcondition, or effect).

An action a is executable in a state (cid:11) if (cid:11) j= pre(a). The ef-
fect of a in state (cid:11) is the state (cid:11)0 containing the same literals
as (cid:11) for all variables not mentioned in post(a), and the liter-
als of post(a) otherwise. We assume that an action can be ap-
plied to any state, but that it has no effect if its preconditions
do not hold (this assumption has no effect on complexity).
The PROPOSITIONAL STRIPS PLAN EXISTENCE problem, or
STRIPS PLAN for short, is to decide whether for a given
propositional STRIPS instance hV; (cid:11)0; (cid:13); ACT i there is a
successful plan, that is, sequence of actions leading from the
initial state (cid:11)0 to a state satisfying the goal (cid:13).
A plan is irreducible if its every action changes the state.

We assume, without loss of generality, that for any action a,
no literal in post(a) also appears in pre(a); otherwise we can
omit the literal from post(a) without changing the effect of
the action; (if post(a) then becomes an empty conjunction,
the action a can be omitted from ACT as it has no effect).

We have the following result, proved in [Bylander, 1994] :

Proposition 1 ([Bylander, 1994])
STRIPS PLAN is PSPACE-complete.

Typically, propositional STRIPS instances do not require
that goals be complete. We restrict consideration to com-
plete goals. This restriction has no effect on the complex-
ity: the plan existence problem remains PSPACE-complete
under the goal-completeness restriction [Lang, 2004].
3.1 Acyclic STRIPS
Deﬁnition 6 (Acyclic sets of actions) A set of actions ACT
is acyclic if there is no state (cid:11) such that hV; (cid:11); (cid:11); ACT i has
a non-empty irreducible plan (informally, if there are no non-
trivial directed cycles in the space of states induced by ACT ).
We will now consider the following two problems:

1. ACYCLIC STRIPS PLAN: given a propositional STRIPS
instance hV; (cid:11)0; (cid:13); ACT i such that ACT is acyclic
and (cid:11)0
6= (cid:13), decide whether there is a plan for
hV; (cid:11)0; (cid:13); ACT i.

2. ACTION-SET ACYCLICITY: given a set ACT of actions,

decide whether ACT is acyclic.

We will show that both problems are PSPACE-complete.
Proposition 2
ACYCLIC STRIPS PLAN is PSPACE-complete.
Proof: Membership in PSPACE is evident as the problem is a
restriction of STRIPS PLAN. To prove PSPACE-hardness, we
exhibit a polynomial-time reduction from STRIPS PLAN. Let
PE = hV; (cid:11)0; (cid:13); ACT i be an instance of STRIPS PLAN. The
idea behind the reduction is to introduce a counter, so that
each time an action is executed, the counter is incremented.
The counter may count up to 2n, where n = jV j, making
use of n additional variables. The counter is initialized to 0.
Once it reaches 2n (cid:0) 1 it can no longer be incremented and
no action can be executed. Hence, the set of actions in the
resulting instance of STRIPS PLAN is acyclic.

To describe the reduction, we write V as fx1; : : : ; xng. We

de(cid:2)ne PE0 = hV 0; (cid:11)0

0; (cid:13)0; ACT 0i as follows:

(cid:15) V 0 = fx1; : : : ; xn; z1; : : : ; zng, where zi are new vari-

ables we will use to implement the counter;
0 = (cid:11)0 ^ :z1 ^ (cid:1) (cid:1) (cid:1) ^ :zn;

(cid:15) (cid:11)0
(cid:15) (cid:13)0 = (cid:13) ^ z1 ^ (cid:1) (cid:1) (cid:1) ^ zn;
(cid:15) for each action a 2 ACT , we include in ACT 0 n actions

ai, 1 (cid:20) i (cid:20) n, such that
pre(ai) = pre(a) ^ :zi ^ zi+1 ^ (cid:1) (cid:1) (cid:1) ^ zn
post(ai) = post(a) ^ zi ^ :zi+1 ^ (cid:1) (cid:1) (cid:1) ^ :zn

(cid:15) Furthermore, we include in ACT 0 n actions bi, 1 (cid:20) i (cid:20)

n, such that
pre(bi) = :zi ^ zi+1 ^ (cid:1) (cid:1) (cid:1) ^ zn
post(bi) = zi ^ :zi+1 ^ (cid:1) (cid:1) (cid:1) ^ :zn

We will denote states over V 0 by pairs ((cid:11); k), where (cid:11) is
a state over V and k is an integer, 0 (cid:20) k (cid:20) 2n (cid:0) 1. We
view k as a compact representation of a state over variables
z1; : : : ; zn: assuming that the binary representation of k is
d1 : : : dn (with dn being the least signi(cid:2)cant digit), k repre-
sents the state which contains zi if di = 1 and :zi, otherwise.
PE0 is acyclic, since executing any action in ACT 0 incre-
ments the counter k and no action can be executed once the
counter has reached the value 2n (cid:0) 1.

We claim that there is a plan for PE if and only if there is
a plan for PE0. First, assume that there is a plan in PE. Let
(cid:25) be a shortest plan in PE and let m be its length. We have
m (cid:20) 2n (cid:0)1, since no state along (cid:25) repeats (otherwise, shorter
plans than (cid:25) for PE would exist).
Let (cid:11)0; (cid:11)1; : : : ; (cid:11)m =
(cid:13) be the sequence of states obtained by executing (cid:25). Let a
be the action used in the transition from (cid:11)k to (cid:11)k+1. Since
k < 2n (cid:0) 1, there is exactly one i, 1 (cid:20) i (cid:20) n, such that
the action ai applies at the state ((cid:11); k) over V 0. Replacing a
with ai in (cid:25) yields a plan that when started at ((cid:11)0; 0) leads
to ((cid:11)m; m) = ((cid:13); m). Appending that plan with appropriate
actions bi to increment the counter to 2n (cid:0) 1 yields a plan for
PE0. Conversely, if (cid:28) is a plan for PE0, the plan obtained from
(cid:28) by removing all actions of the form bj and replacing each
action ai with a is a plan for PE.

Thus, the claim and the assertion follow.

(cid:4)

Proposition 3
ACTION-SET ACYCLICITY is PSPACE-complete.
Proof: The argument for the membership in PSPACE is
standard.
To prove PSPACE-hardness, we proceed as
follows. Let PE = hV; (cid:11)0; (cid:13); ACT i be a STRIPS instance
such that ACT is acyclic and (cid:11)0 6= (cid:13). Let a be a new action
de(cid:2)ned by pre(a) = (cid:13) and post (a) = (cid:11)0. It is easy to see
that ACT [ fag is not acyclic if and only if there exists a
plan for PE. Thus, the PSPACE-hardness of the complement
of the ACTION-SET ACYCLICITY problem follows from
Proposition 2. Since PSPACE = coPSPACE, this suf(cid:2)ces
to prove the hardness part of the assertion.

(cid:4)

3.2 Mapping STRIPS plans to single-effect

STRIPS plans

Versions of the STRIPS PLAN and ACYCLIC STRIPS PLAN
problems that are important for us allow only single-effect ac-
tions (actions with exactly one literal in their postconditions)
in input propositional STRIPS instances. We refer to these re-
strictions as SE STRIPS PLAN and ACYCLIC SE STRIPS PLAN.
To prove PSPACE-hardness of both problems, we de-
scribe a mapping from STRIPS instances to single-effect
STRIPS instances.

Consider an instance PE = hV; (cid:11)0; (cid:13); ACT i of the STRIPS
PLAN problem (where ACT is not necessarily acyclic). For
each action a 2 ACT we introduce a new variable xa. We
set X = Va2ACT :xa. That is, X is the conjunction of
negative literals of all the additional variables. In addition,
for each a 2 ACT we set Xa = xa ^ Vb2ACT (cid:0)fag :xb. We
now de(cid:2)ne an instance PE0 = hV 0; (cid:11)0
0; (cid:13)0; S(ACT )i of the
SE STRIPS PLAN problem as follows:

(cid:15) Set of variables: V 0 = V [ fxa : a 2 ACT g;
(cid:15) Initial state: (cid:11)0
(cid:15) Goal state: (cid:13)0 = (cid:13) ^ X;
(cid:15) Set of actions: S(ACT ) = fai

0 = (cid:11)0 ^ X;

: a 2 ACT ; i =

1; : : : ; 2jpost(a)j + 1g.
Let a 2 ACT and post(a) = l1 ^ (cid:1) (cid:1) (cid:1) ^ lq. For
i = 1; : : : ; q, we de(cid:2)ne:
pre(ai) = pre(a) ^ X ^ :li; post(ai) = xa;
pre(aq+i) = Xa; post(aq+i) = li.
We also de(cid:2)ne:
pre(a2q+1) = Xa ^ l1 ^ (cid:1) (cid:1) (cid:1) ^ lq; post(a2q+1) = :xa.
Let (cid:25) be a sequence of actions in ACT. We de(cid:2)ne S((cid:25)) to
be the sequence of actions in S(ACT ) obtained by replacing
each action a in (cid:25) by a1; : : : ; a2q+1 (where q = jpost(a)j).
Now consider a sequence (cid:28) of actions from S(ACT ). Re-
move from (cid:28) any action ai such that i 6= 2jpost(a)j + 1, and
replace actions of the form a2jpost(a)j+1 by a. We denote the
resulting sequence of actions from ACT by S 0((cid:28) ). The fol-
lowing properties are easy to check (details are omitted):
Lemma 1 With the above deﬁnitions,
(i) if (cid:25) is a plan for PE then S((cid:25)) is a plan for PE0;
(ii) if (cid:28) is an irreducible plan for PE0 then S0((cid:28) ) is a plan

for PE;

(iii) ACT is acyclic if and only if S(ACT ) is acyclic.
Proposition 4
SE STRIPS PLAN and ACYCLIC SE STRIPS PLAN are
PSPACE-complete.
Proof: SE STRIPS PLAN and ACYCLIC SE STRIPS PLAN
problems are restrictions of STRIPS PLAN,
from which
membership in PSPACE follows. PSPACE-hardness of
ACYCLIC SE STRIPS PLAN (and so, also of the other prob-
lem) is shown by reduction from ACYCLIC STRIPS PLAN.
Consider an instance PE = hV; (cid:11)0; (cid:13); ACT i of ACYCLIC
STRIPS PLAN. De(cid:2)ne PE0 = hV 0; (cid:11)0
0; (cid:13)0; S(ACT )i, which
by Lemma 1(iii) is an instance of the ACYCLIC SE STRIPS
PLAN problem. By Lemma 1(i) and (ii) there exists a plan
for PE if and only if there exists a plan for PE0.

(cid:4)

4 Dominance
The goal of this section is to prove that the GCP-DOMINANCE
problem is PSPACE-complete, and that the complexity does
not go down even when we restrict the class of inputs to CP-
nets. We use the results on propositional STRIPS planning
from Section 3 to prove that the general GCP-DOMINANCE
problem is PSPACE-complete. We then show that the com-
plexity does not change if we impose the requirements of lo-
cal consistency and local completeness on input GCP-nets.
The similarities between dominance testing in CP-nets and
propositional STRIPS planning were (cid:2)rst noted in [Boutilier
et al., 1999], where a reduction (presented in more detail
in [Boutilier et al., 2004a]) was given from the dominance
problem to the plan existence problem for a class of propo-
sitional STRIPS planning speci(cid:2)cations consisting of unary
actions (actions with single effects). We prove our results for

the GCP-DOMINANCE and GCP-CONSISTENCY problems by
constructing a reduction in the other direction.

This reduction is much more complex than the one used in
[Boutilier et al., 1999], due to the fact that CP-nets impose
more restrictions than STRIPS planning. Firstly, STRIPS
planning allows multiple effects, but GCP-nets only allow
(cid:3)ips x > :x or :x > x that change the value of one vari-
able; this is why we constructed the reduction from STRIPS
planning to single-effect STRIPS planning in the last section.
Secondly, CP-nets impose two more restrictions, local con-
sistency and local completeness, which do not have natural
counterparts in the context of STRIPS planning.

For all dominance and consistency problems considered in
the paper, the membership in PSPACE can be demonstrated
by considering nondeterministic algorithms consisting of re-
peatedly guessing appropriate improving (cid:3)ips. Such algo-
rithms work in polynomial space and show the membership
of problems they solve in NPSPACE and consequently in
PSPACE, since NPSPACE = PSPACE. Therefore, due to
space restrictions, from now on we only provide arguments
for the PSPACE-hardness of problems we consider.

4.1 Dominance for generalized CP-nets
We will prove that
the GCP-DOMINANCE problem is
PSPACE-complete by a reduction from the problem SE
STRIPS PLAN, which we now know to be PSPACE-complete.
Mapping single-effect STRIPS problems to GCP-nets
dominance problems
Let hV; (cid:11)0; (cid:13); ACT i be an instance of the SE STRIPS PLAN
problem. For every action a 2 ACT we denote by la the
unique literal in the postcondition of a, that is, post(a) = la.
We denote by pre0(a) the conjunction of all literals in pre(a)
different from :la (we recall that by a convention we adopted
earlier, pre0(a) does not contain la either). We then de(cid:2)ne ca
to be the conditional preference rule pre0(a) : la > :la and
de(cid:2)ne M (ACT ) to be the GCP-net C = fca: a 2 ACT g.

A sequence of states in a plan corresponds to an improving

sequence from (cid:11)0 to (cid:13), which leads to the following result.
Lemma 2 With the above notation,
(i) there

for
hV; (cid:11)0; (cid:13); ACT i if and only if (cid:13) dominates (cid:11)0 in
C;

irreducible

plan

is

a

non-empty

(ii) ACT is acyclic if and only if M (ACT ) is consistent.
Theorem 1 The GCP-DOMINANCE problem is PSPACE-
complete. Moreover, this remains so under the restrictions
that the GCP-net is consistent and is in conjunctive form.

is

PSPACE-hardness

shown by reduction
Proof:
from ACYCLIC SE STRIPS PLAN (Proposition 4).
Let
hV; (cid:11)0; (cid:13); ACT i be an instance of the ACYCLIC SE STRIPS
PLAN problem. By Lemma 2(ii), M (ACT ) is a consistent
GCP-net in conjunctive form. Since (cid:11)0 6= (cid:13), there is a
plan for hV; (cid:11)0; (cid:13); ACT i if and only if there is a non-empty
irreducible plan for hV; (cid:11)0; (cid:13); ACT i, which, by Lemma 2(i),
is if and only if (cid:13) dominates (cid:11)0 in C.

(cid:4)

4.2 Dominance in CP-nets
In this section we show that GCP-DOMINANCE remains
PSPACE-complete under the restriction to locally-consistent
and locally-complete GCP-nets, i.e., CP-nets. We refer to this
restriction of GCP-DOMINANCE as CP-DOMINANCE.

We will show PSPACE-hardness for CP-DOMINANCE by
a reduction from GCP-DOMINANCE for consistent GCP-nets.
Mapping locally-consistent GCP-nets to CP-nets
Let C be a locally-consistent GCP-net.
Let V =
fx1; : : : ; xng be the set of variables of C. We de(cid:2)ne V 0 =
V [ fy1; : : : ; yng, where fy1; : : : ; yng \ V = ;. We de(cid:2)ne a
GCP-net C 0 over V 0, which we will show is a CP-net. To this
end, for every z 2 V 0 we will de(cid:2)ne conditional preference
rules q+(z) : z > :z and q(cid:0)(z) : :z > z to be included in
C 0 by specifying formulas q+(z) and q(cid:0)(z).

First, for each variable xi 2 V , we set

q+(xi) = yi and q(cid:0)(xi) = :yi:

Thus, xi depends only on yi. We also note that the for-
mulas q+(xi) and q(cid:0)(xi) satisfy local-consistency and local-
completeness requirements.

Next, for each variable yi, 1 (cid:20) i (cid:20) n, we de(cid:2)ne

ei = (x1 $ y1) ^ (cid:1) (cid:1) (cid:1) ^ (xi(cid:0)1 $ yi(cid:0)1)

^(xi+1 $ yi+1) ^ (cid:1) (cid:1) (cid:1) ^ (xn $ yn);

i = ei ^ p+(xi) and f (cid:0)
f +

i = ei ^ p(cid:0)(xi):

Finally, we de(cid:2)ne

q+(yi) = f +

i _ (:f (cid:0)

i ^ xi)

and

q(cid:0)(yi) = f (cid:0)

i _ (:f +

i ^ :xi)

Thus, yi depends on every variable in V 0 but itself.

We note that by the local consistency of C, formulas f +
i ^
i , 1 (cid:20) i (cid:20) n, are unsatis(cid:2)able. Consequently, formulas
f (cid:0)
q+(yi) ^ q(cid:0)(yi), 1 (cid:20) i (cid:20) n, are unsatis(cid:2)able. Thus, C 0 is
locally consistent. Finally, q+(yi) _ q(cid:0)(yi) is equivalent to
i _ xi, so is a tautology. Thus, C 0 is locally
i _ :xi _ f (cid:0)
f +
complete and hence a CP-net over V 0.
Let (cid:11) and (cid:12) be outcomes over fx1; : : : ; xng and
fy1; : : : ; yng, respectively. By (cid:11)(cid:12) we denote the outcome
over V 0 obtained by concatenating n-tuples (cid:11) and (cid:12). Con-
versely, every outcome for C 0 can be written in this way.

Let (cid:11) be an outcome over V . We de(cid:2)ne (cid:22)(cid:11) to be the out-
come over fy1; : : : ; yng obtained by replacing in (cid:11) every
component of the form xi with yi and every component :xi
with :yi. Then for every i, 1 (cid:20) i (cid:20) n, (cid:11) (cid:22)(cid:11) j= ei.

Let s be a sequence (cid:11)0; : : : ; (cid:11)m of outcomes over
V . De(cid:2)ne L(s) to be the sequence of V 0-outcomes:
(cid:11)0(cid:11)0; (cid:11)0(cid:11)1; (cid:11)1(cid:11)1; (cid:11)1(cid:11)2; : : : ; (cid:11)m(cid:11)m. Further, let t be a se-
quence (cid:15)0; (cid:15)1; : : : ; (cid:15)m of V 0-outcomes with (cid:15)0 = (cid:11) (cid:22)(cid:11) and
(cid:15)m = (cid:12) (cid:22)(cid:12). De(cid:2)ne L0(t) to be the sequence obtained from t
by projecting each element in t to V and iteratively removing
elements in the sequence which are the same as their prede-
cessor (until any two consecutive outcomes are different).
Lemma 3 With the above deﬁnitions,

(i) if s is an improving sequence for C from (cid:11) to (cid:12) then

L(s) is an improving sequence for C 0 from (cid:11) (cid:22)(cid:11) to (cid:12) (cid:22)(cid:12);

(ii) if t is an improving sequence from (cid:11) (cid:22)(cid:11) to (cid:12) (cid:22)(cid:12) then L0(t)

is an improving sequence from (cid:11) to (cid:12);

i=1(xi $ yi). The de(cid:2)nitions

(iii) C is consistent if and only if C 0 is consistent
Sketch of proof: Let e = Vn
have been arranged to ensure the following for CP-net C 0 :
(a) Suppose e holds in an outcome, so the outcome can
be written as (cid:11) (cid:22)(cid:11) for some (cid:11); then no improving (cid:3)ip
changes any variable xi; furthermore, there is an im-
proving (cid:3)ip changing variable yi if and only if there is
an improving (cid:3)ip for the GCP-net C from outcome (cid:11)
changing variable xi. After applying this (cid:3)ip changing
variable yi, there is exactly one improving (cid:3)ip possible,
changing xi, after which e holds again (this follows us-
ing (b), as yi cannot be immediately (cid:3)ipped back again,
because C 0 is locally consistent).

(b) If e does not hold in an outcome then the only improving
(cid:3)ips possible change the value of some variable (xi or
yi) to make xi $ yi hold for some i.

(a) implies (i) and (ii). Also, (i) implies half of (iii), that
if C is inconsistent then C 0 is inconsistent. Conversely,
suppose that C 0 is inconsistent, so there exists an improving
sequence t for C 0 from some outcome to itself. By (b), any
improving (cid:3)ip applied to an outcome in which e does not
hold increases (by one) the number of i such that xi $ yi
holds. This implies that e must hold in some outcome in
t, because t is cyclic. Write this outcome as (cid:11) (cid:22)(cid:11). We can
cyclically permute t to form an improving sequence from (cid:11) (cid:22)(cid:11)
to itself. Part (ii) then implies that there exists an improving
(cid:3)ipping sequence for C from (cid:11) to itself, showing that C is
inconsistent.

(cid:4)

Theorem 2 CP-DOMINANCE is PSPACE-complete. This
holds even if we restrict the CP-nets to being consistent.
Proof: We use a reduction from PSPACE-hardness of the
GCP-DOMINANCE problem when the GCP-nets are restricted
to being consistent (Theorem 1). Let C be a consistent
(and hence locally consistent) GCP-net over V , and let (cid:11)
and (cid:12) be outcomes over V . Consider the CP-net C 0 over
variables V 0 constructed above. Lemma 3(i) and (ii) imply
that (cid:12) dominates (cid:11) in C if and only if (cid:12) (cid:22)(cid:12) dominates (cid:11) (cid:22)(cid:11) in
C 0. Moreover, C 0 is consistent by Lemma 3(iii). Thus, the
hardness part of the assertion follows.

(cid:4)

5 Consistency of GCP-nets
In this section we show that the GCP-CONSISTENCY problem
is PSPACE-complete, using results from Sections 3 and 4.
Theorem 3
GCP-CONSISTENCY is PSPACE-complete. This holds even
under the restriction to GCP-nets in conjunctive form.
PSPACE-hardness is shown by reduction from
Proof:
ACTION-SET ACYCLICITY. We apply function S from
Section 3.2 followed by M from Section 4.1. This maps

instances of ACTION-SET ACYCLICITY to instances of
GCP-CONSISTENCY in conjunctive form. By Lemma 1(iii)
and Lemma 2 (ii), an instance of ACTION-SET ACYCLICITY
is acyclic if and only if the corresponding instance of
GCP-CONSISTENCY is consistent, proving the result.

(cid:4)

We now show that consistency testing remains PSPACE-

complete for CP-nets.
Theorem 4 CP-CONSISTENCY is PSPACE-complete.
Proof: Let C be a GCP-net in conjunctive form. We de(cid:2)ne
a CP-net C 0 as follows.
If C is locally inconsistent (the
property can be decided in polynomial time), we set C 0 to
be any (cid:2)xed (independent of C) inconsistent but locally
consistent CP-net.
(Such CP-nets exist.) Otherwise, C
is locally-consistent and for C 0 we take the CP-net we
constructed in Section 4.2.
The mapping from locally
consistent GCP-nets to CP-nets, described in Section 4.2,
preserves consistency (Lemma 3 (iii)). Since local incon-
sistency implies inconsistency, we have that the GCP-net
C is consistent if and only if the CP-net C 0 is consistent.
Thus, PSPACE-hardness of the CP-CONSISTENCY problem
follows from Theorem 3.

(cid:4)

Notice the huge complexity gap with the problem of de-
ciding whether there exists a nondominated outcome, which
is (cid:147)only(cid:148) NP-complete [Domshlak et al., 2003].

6 Concluding remarks
We have shown that dominance and consistency testing in
CP-nets is PSPACE-complete. The repeated use of reduc-
tions from planning problems con(cid:2)rms the importance of the
structural similarity between STRIPS planning and reasoning
with CP-nets. This suggests that the well-developed (cid:2)eld of
planning algorithms for STRIPS representations, especially
for unary operators [Brafman and Domshlak, 2003], could be
useful for implementing algorithms for dominance and con-
sistency in CP-nets.

Our theorems extend to CP-nets with non-binary domains,
and to extensions and variations of CP-nets, such as TCP-
nets [Brafman and Domshlak, 2002] that allows for explicit
priority of some variables over others, and the more general
preference language described in [Wilson, 2004b; 2004a].

The complexity result for dominance is also relevant
for constrained optimisation, where a complete algorithm
[Boutilier et al., 2004b] involves many dominance checks.
Our results reinforce the need for work on (cid:2)nding special
classes of problems where dominance and consistency can
be tested ef(cid:2)ciently [Domshlak and Brafman, 2002; Boutilier
et al., 2004a], and for incomplete methods for checking con-
sistency and constrained optimisation [Wilson, 2004a].

Several open problems remain. We do not know whether
dominance and consistency testing remain PSPACE-
complete when the number of parents in the dependency
graph is bounded by a constant. We also do not know whether
these two problems remain PSPACE-complete for CP-nets
in conjunctive form (the reduction used to prove Theorems
2 and 4 yields CP-nets that are not in conjunctive form). Fi-

nally, we do not know the complexity of deciding whether the
preference relation induced by a CP-net is complete.
Acknowledgements
We are grateful for a reviewer’s simple example of a cyclic
CP-net. This material is supported in part by the NSF un-
der Grants No.
IIS-0325063 and IIS-0097278, by Science
Foundation Ireland under Grant No. 00/PI.1/C075, and by
the CNRS program RTP 11: (cid:147)raisonner et d·ecider(cid:148).

References
[Boutilier et al., 1999] C. Boutilier, R. I. Brafman, H. H.
Hoos, and D. Poole. Reasoning with conditional ceteris
paribus preference statements. In Proceedings of UAI99,
pages 71(cid:150)80, 1999.

[Boutilier et al., 2004a] C. Boutilier, R. Brafman, C. Domsh-
lak, H. Hoos, and D. Poole. CP-nets: a tool for represent-
ing and reasoning with conditional ceteris paribus state-
ments. JAIR, 21:135(cid:150)191, 2004.

[Boutilier et al., 2004b] C. Boutilier, R.

I. Brafman,
C. Domshlak, H. Hoos, and D. Poole. Preference-based
constrained optimization with CP-nets. Computational
Intelligence, 20(2):137(cid:150)157, 2004.

[Brafman and Dimopoulos, 2004] R. Brafman and Y. Di-
mopoulos. Extended semantics and optimization algo-
rithms for CP-networks.
Computational Intelligence,
20(2):218(cid:150)245, 2004.

[Brafman and Domshlak, 2002] R. Brafman and C. Domsh-
lak. Introducing variable importance trade-offs into CP-
nets. In Proceedings of UAI-02, pages 69(cid:150)76, 2002.

[Brafman and Domshlak, 2003] R. Brafman and C. Domsh-
lak. Structure and complexity of planning with unary op-
erators. JAIR, 18:315(cid:150)439, 2003.

[Bylander, 1994] T. Bylander. The computational complex-
ity of propositional STRIPS planning. Artiﬁcial Intelli-
gence Journal, 69(1-2):165(cid:150)204, 1994.

[Domshlak and Brafman, 2002] C. Domshlak and R. I. Braf-
man. CP-nets(cid:151)reasoning and consistency testing. In Pro-
ceedings of KR2002, pages 121(cid:150)132, 2002.

[Domshlak et al., 2003] C. Domshlak, F. Rossi, K. B. Ven-
able, and T. Walsh. Reasoning about soft constraints and
conditional preferences: complexity results and approx-
imation techniques.
In Proceedings of IJCAI-03, pages
215(cid:150)220, 2003.

[Lang, 2004] J. Lang. Logical preference representation and
combinatorial vote. Annals of Mathematics and Artiﬁcial
Intelligence, 42(1):37(cid:150)71, 2004.

[Papadimitriou, 1994] Ch. Papadimitriou. Computational

complexity. Addison(cid:150)Wesley, 1994.

[Wilson, 2004a] N. Wilson. Consistency and constrained op-
timisation for conditional preferences. In Proceedings of
ECAI-04, pages 888(cid:150)892, 2004.

[Wilson, 2004b] N. Wilson.

stronger conditional preference statements.
ings of AAAI-04, pages 735(cid:150)741, 2004.

Extending CP-nets with
In Proceed-

