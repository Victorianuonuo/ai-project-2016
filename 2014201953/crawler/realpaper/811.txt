Diagnosers and Diagnosability of Succinct Transition Systems

Jussi Rintanen

National ICT Australia Ltd and Australian National University

Canberra, Australia

Abstract

Reasoning about the knowledge of an agent is an
important problem in many areas of AI. For exam-
ple in diagnosis a basic question about a system is
whether it is possible to diagnose it, that is, whether
it is always possible to know whether a faulty be-
havior has occurred. In this paper we investigate
the complexity of this diagnosability problem and
the size of automata that perform diagnosis.
There are algorithms for testing diagnosability in
polynomial time in the number of states in the sys-
tem. For succinct system representations, which
may be exponentially smaller than the state space
of the system, the diagnosability problem is con-
sequently in EXPTIME. We show that this upper
bound is not tight and that the decision problem is
in fact PSPACE-complete.
On-line diagnosis can be carried out by diagnosers
which are automata that recognize faulty behavior.
We show that diagnosers in the worst case have
a size that is exponential in the number of states,
both for explicit and succinct system representa-
tions. This is a consequence of the diagnoser hav-
ing to maintain beliefs about the state of the system.

1 Introduction
Faults in dynamic systems can be diagnosed by an exter-
nal diagnoser that observes the system behavior and infers
the occurrence of failure events [Sampath et al., 1995]. A
main problem in on-line diagnosis is the construction of diag-
nosers which are deterministic ﬁnite automata that keep track
of the possible state of the system on the basis of the obser-
vations and detect the occurrence of faults. Existing algo-
rithms for constructing diagnosers have exponential running
times and construct diagnosers of exponential size.
In this
work we investigate the inherent complexity of diagnosers
and the complexity of constructing them, giving tight upper
and lower bounds for the sizes of smallest diagnosers and the
time it takes to construct diagnosers. Our results show that
the asymptotic worst-case time and memory consumption of
existing algorithms cannot be improved.

The work is based on the framework proposed by Sampath
et al. [1995]. Since many systems exhibit regularities best

captured by representing them in terms of state variables, we
also consider a more compact representation with state vari-
ables. Our results show that the exponentially more compact
representation leads in the worst case to a corresponding in-
crease of complexity.

The structure of the paper is as follows. In Section 2 we de-
ﬁne transition systems and succinct transition systems. Sec-
tion 3 deﬁnes the framework of diagnosers and diagnosability
of Sampath et al. [1995]. In Section 4 we present the main re-
sults which establish the complexity of diagnosability testing.
In Section 5 we derive tight upper and lower bounds for the
worst-case size of smallest diagnosers. Section 6 discusses
related work and concludes the paper.

2 Preliminaries
We deﬁne transition systems following Sampath et al. [1995].

Deﬁnition 2.1 (Transition systems) A transition system is a
tuple T = (cid:2)X, Σo, Σu, Σf , δ, s0(cid:3) where

• X is a set of states,
• Σo is a set of observable events,
• Σu is a set of unobservable events,
• Σf is a set of failure events,
• δ ⊆ X × (Σo ∪ Σu ∪ Σf ) × X is a transition relation,
• s0 ∈ X is an initial state.

Initially, s0 is the state of the system. A sequence of events
e0, . . . , en−1 takes place and the system goes through some
states s0, s1, . . . , sn such that (si, ei, si+1) ∈ δ for all i ∈
{0, . . . , n − 1}.

For T = (cid:2)X, Σo, Σu, Σf , δ, s0(cid:3), e0, . . . , en−1 is a se-
quence of events in T if there are states s1, . . . , sn such that
(si, ei, si+1) ∈ δ for all i ∈ {0, . . . , n − 1}.

The state sequence nor the unobservable or the failure
events can be observed. Detection of failures is based on the
sequence of observable events only.

A basic assumption made by Sampath et al. [1995] is that
there are no inﬁnite event sequences exclusively consisting of
unobservable events.

Assumption 2.2 There is no cycle in the transition graph
consisting of unobservable events only.

IJCAI-07

538

2.1 Succinct System Representation
The state spaces of many systems are highly regular, and the
transition relations of events can be represented more com-
pactly in terms of changes to the values of state variables.
This also makes it possible to practically represent large sys-
tems. Given a set A of state variables, a state is deﬁned as a
valuation of A. We will restrict to two-valued (Boolean) state
variables but in general there may be several different val-
ues. The transition relation associated with an event can be
expressed as a propositional formula on A and A(cid:2)
. The set A(cid:2)
consists of propositional variables a(cid:2)
for every a ∈ A. When
an event takes place, the variables in A represent the old val-
ues of the state variables and the variables in A(cid:2)
represent the
corresponding new values. For example, given state variables
A = {a, b}, an event that makes a true and does not change
the value of b can be expressed as the formula a(cid:2) ∧ (b ↔ b(cid:2)).
An arbitrary binary relation on the valuations of A can be ex-
pressed as a propositional formula, which suggests a succinct
representation of transition systems in terms of state variables
and formulae.

Deﬁnition 2.3 (Succinct transition systems)
transition system is a tuple (cid:2)A, Σo, Σu, Σf , δ, s0(cid:3) where

A succinct

• A is a ﬁnite set of state variables,
• Σo is a set of observable events,
• Σu is a set of unobservable events,
• Σf is a set of failure events,
• δ : Σo∪Σu∪Σf → L assigns each event a propositional
which represents a binary relation

formula over A ∪ A(cid:2)
on the set of states, and

• s0 is an initial state (a valuation of A).

There are other types of succinct representations, for exam-
ple based on Petri nets [Holloway et al., 1997]. However, the
Petri net representation can be translated into the logic repre-
sentation quite easily (assuming ﬁnite state Petri nets with an
n-safety property), but not vice versa, so the logic represen-
tation is more general.

Any succinct transition system can be mapped to a transi-

tion system as follows.

Deﬁnition 2.4 Let T = (cid:2)A, Σo, Σu, Σf , δ, s0(cid:3) be a succinct
transition system. Then deﬁne the transition system R(T ) =
(cid:2)X, Σo, Σu, Σf , δ(cid:2), s0(cid:3) where

1. X is the set of all valuations of A, and
2. δ(cid:2) = {(s, e, s(cid:2)) ∈ X ×(Σo∪Σu∪Σf )×X|s∪{(v(cid:2), w) ∈

A(cid:2) × {0, 1}|(v, w) ∈ s(cid:2)} |= δ(e)}.

3 Diagnosability
Sampath et al.
which we adapt to our notation.

[1995] give a deﬁnition of diagnosability

Let σ ∈ (Σo ∪ Σu ∪ Σf )∗ be a sequence of events. We
deﬁne its projection π(σ) to the observable events recursively
as follows.

π() = 

π(eσ) = π(σ) if e (cid:11)∈ Σo
π(eσ) = eπ(σ) if e ∈ Σo

Diagnosability is deﬁned as the possibility to detect every
occurrence of a failure event: the continuation of every event
sequence that includes a failure event will at some future time
point be observationally distinguishable from every event se-
quence that does not include a failure event.

Deﬁnition 3.1 (Diagnosability) A transition system T =
(cid:2)X, Σo, Σu, Σf , δ, s0(cid:3) is diagnosable iff there is an integer
d ≥ 0 such that for any sequence σ of events in T that ends in
a failure event, for all sequences σ1 = σσ(cid:2)
and σ2 in T such
that |π(σ(cid:2))| ≥ d and π(σ1) = π(σ2), σ2 includes a failure
event.

The constant d is called the delay. Not all failures can be
detected immediately after they have taken place, and the de-
lay expresses how many further events have to be observed
before being certain that a failure has taken place.

Whether a system is diagnosable or not is important when
trying to construct a diagnoser for it. A diagnoser is a de-
terministic ﬁnite automaton that recognizes sequences of ob-
servable events that correspond to sequences of events that
include at least one failure event. If a system is diagnosable
then a diagnoser exists.

Deﬁnition 3.2 A diagnoser is (cid:2)Q, Σo, γ, z0, Y (cid:3) where

• Q is a set of states (unrelated to the transition system),
• Σo is a set of observable events,
• γ : Q × Σo → Q is a partial function,
• z0 ∈ Q is the initial state of the diagnoser, and
• Y ⊆ Q is the set of accepting states.

A sequence e0, . . . , en−1 of observable events takes a di-
agnoser through a sequence z0, . . . , zn of states such that
γ(zi, ei) = zi+1. An execution z0, . . . , zn is accepting if
zn ∈ Y . To accept means to detect a failure event.

Deﬁnition 3.3 (cid:2)Q, Σo, γ, z0, Y (cid:3) is diagnoser
(cid:2)X, Σo, Σu, Σf , δ, s0(cid:3) (with delay d) if

for T =

1. for every sequence e0, . . . , en, en+1, . . . , em of events
in T such that {e0, . . . , en−1} ⊆ Σo ∪ Σu and en ∈
Σf and |π(en+1, . . . , em)| ≤ d, there is a preﬁx of
π(e0, . . . , en, en+1, . . . , em) which the diagnoser ac-
cepts, and if

2. for a sequence e0, . . . , em of events in T the diagnoser
accepts π(e0, . . . , em) then for some n ∈ {0, . . . , m −
1}, en ∈ Σf , {e0, . . . , en−1} ⊆ Σo ∪ Σu and
|π(en+1, . . . , em)| ≤ d.

We can deﬁne diagnosers for succinct transition systems

analogously through the reduction to transition systems.

In some cases there is no ﬁnite upper bound on how long
it may take before a failure is detected. For a system to be
diagnosable the delay must be bounded.

the transition
Example 3.4 (Unbounded delay) Consider
system in Figure 1. In the starting state two events are possi-
ble, of which the leftmost one is a failure event. After this an

IJCAI-07

539

B

A

C

A

F

Figure 1: Delay may be arbitrarily long

F

b

c

d

a

a

a

a

a

e

a

e

d

c

b

Figure 2: Delay may be quadratic in the number of states

unbounded number of unobservable events A may take place
before the failure is diagnosed upon the occurrence of the ob-
servable event B.
(cid:2)

A bounded delay may be quadratic in the number of states.

Example 3.5 (Quadratic delay) There are transition sys-
tems with a quadratic delay as depicted in Figure 2 [Grastien,
2006]. Of two sequences σ and σ(cid:2)
such that π(σ) = π(σ(cid:2)) =
aaaaabaaaacaaadaaea the ﬁrst begins with a failure event
but the second does not. The sequence σ(cid:2)
can continue with
a but σ cannot. This can be generalized to any number n of
states. The delay is (n − 2) + (n − 3) + · · · + 3 + 2 =
(n−1)(n−2)
− 1 which is O(n2) in the number of states. (cid:2)

2

This is also an upper bound on bounded delays.

Theorem 3.6 For a transition system with n states, if the sys-
tem is diagnosable, then the delay is ≤ |X|2−|X|
where |X|
is the number of states.

2

Assume

s0e0s1e1 · · · · · · sm−1em1

smem and
Proof:
ˆs0e0ˆs1e1 · · · · · · ˆsm−1em1
ˆsmˆem are two equally long se-
quences of observable events interleaved with states that
are distinguished at the last step (and not before) and of
which the ﬁrst contains an unobservable failure event and the
second does not. All unobservable events and states other
than s0 and those immediately preceding an observable event
are not included in the above sequences.

For the sake of argument assume that there are pairs of
states si, ˆsi and sj, ˆsj such that j > i, si = sj and ˆsi = ˆsj.
Now the sequence ei, . . . , ej−1 of events between these pairs
of states could be repeated arbitrarily many times to have a
pair of much longer sequences of events that are distinguish-
able only after the last event. This would violate our assump-
tion that the delay is bounded.

Hence there are no i and j such that si = sj and ˆsi = ˆsj,
which entails that every pair si, ˆsi occurs only once in the
sequence. This entails that the length m of the sequences,
and therefore the delay, is at most |X|2 − |X|.

This bound can be tightened to

by noticing that
there cannot be i and j such that si = ˆsj and ˆsi = sj, or
in other words, the order of the states in the pairs does not
(cid:3)
matter.

2

|X|2−|X|

4 Complexity of Testing Diagnosability

Jiang et al. [2001] have shown that diagnosability testing is
in P. In this section we will show that this complexity upper
bound is not tight. Our results also show that the EXPTIME
upper bound for the diagnosability problem of succinct tran-
sition systems implied by the result of Jiang et al. is not tight.
A system is not diagnosable if there are two inﬁnite event
sequences which have exactly the same observable events and
of which one contains a failure event and the other not. If
this condition is not fulﬁlled, then every continuation of an
event sequence with a failure is distinguishable from all event
sequences without a failure.

Jiang et al. [2001] showed how this test can be made ﬁni-
tary for ﬁnite state systems, and how it can be done in poly-
nomial time. The basic construction is a product transition
system, sometimes called the twin plant, in which states are
pairs (s, ˆs) of states of the original system, and events repre-
sent unobservable events in one or both of the components of
these state pairs, or observable events shared by both compo-
nents. Failure events take place only in the ﬁrst component
of each state pair. If in this system there is an event sequence
from (s0, s0) to some (s, ˆs) which includes a failure event in
the ﬁrst component, and a non-empty event sequence back to
(s, ˆs) then a pair of inﬁnite event sequences witnessing non-
diagnosability exists.

Candidate states (s, ˆs) are found by Tarjan’s strongly con-
nected components (SCC) algorithm [Tarjan, 1972]: every
node contained in a nontrivial SCC is in a cycle contained in
the SCC. After ﬁnding the SCCs the diagnosability test re-
duces to ﬁnding a path through a failure event from (s0, s0)
to some (s, ˆs) in a non-trivial SCC. If such a path exists the
system is not diagnosable.

Constructing the twin plant can be done in quadratic time
in the number of states. Finding the SCCs is linear time in the
number of states in the twin plant, and ﬁnding a path to a non-
trivial SCC through a failure event can be done in polynomial
time. Hence the diagnosability problem is in the complexity
class P. However, this complexity upper bound is not tight.

We deﬁne the language NONDIAG which consists of all
non-diagnosable transition systems in some suitable repre-
sentation.

Our ﬁrst result shows that determining non-diagnosability
can be done by using only logarithmic space by a nondeter-
ministic Turing machine, and hence the decision problem as-
sociated with NONDIAG is in NLOGSPACE. This complex-
ity class is included in P but it is not known whether the in-
clusion is proper [Johnson, 1990].

IJCAI-07

540

Theorem 4.1 NONDIAG is in NLOGSPACE.

Proof: The proof is similar to the NLOGSPACE membership
proof of testing the existence of a path between two nodes in
a graph. We give a nondeterministic algorithm that takes log-
arithmic space. The alorithm’s only data structure that does
not have a constant size is the binary counter for counting up
to n2
where n is the number of states. A cycle is detected
as in the P-time proof of Jiang et al. [2001]. The algorithm
starts from the pair (s0, s0) of initial states and nondetermin-
istically chooses an event and a successor state for each mem-
ber of the pair. The event for the second state may not be a
failure, and an observable event must always be shared by
both components of a state pair. The counter counts the steps.
After a number of steps, including at least one failure event,
the algorithm reaches a starting state (s, ˆs) for a cycle. After
this a sequence of events leading back to (s, ˆs) is nondeter-
ministically chosen. The Turing machine accepts if a cycle
is completed before the counter reaches n2
. The Turing ma-
chine rejects if the counter reaches n2
before completing the
(cid:3)
cycle and encountering a failure event.

We also have a simple proof of NLOGSPACE-hardness.

Theorem 4.2 NONDIAG is NLOGSPACE-hard.

Proof: We sketch a deterministic logarithmic space reduction
from the NLOGSPACE-complete problem of testing whether
a node in a directed graph is reachable from another node
[Johnson, 1990].

Let G = (cid:2)V, E(cid:3) be a directed graph for which the existence
of a path from s ∈ V to t ∈ V is tested. The reduction with
only logarithmic space proceeds by reading the input graph G
and outputting a corresponding transition system where states
are the nodes of G and edges of G correspond to an observ-
able event. The initial state of the transition system is s. The
transition system additionally has a failure event F and an un-
observable event NF which may take place in the state t. Both
events lead to the same (arbitrary) state in V . Now the tran-
sition system is not diagnosable if and only if t is reachable
from s. Construction of the transition system takes logarith-
(cid:3)
mic space (actually only constant space.)

Similarly to NONDIAG we deﬁne

language
SUCCINCT-NONDIAG which consists of succinct transition
systems that are not diagnosable.

the

Theorem 4.3 SUCCINCT-NONDIAG is in PSPACE.

Sketch: We could prove NPSPACE member-
Proof:
ship similarly to Theorem 4.1 and then use the equality
PSPACE=NPSPACE. Alternatively, we could give a deter-
ministic algorithm for ﬁnding a path in a graph with polyno-
mial recursion depth and space consumption following By-
lander [1994].
(cid:3)

The PSPACE upper bound can be shown to be tight.

Theorem 4.4 SUCCINCT-NONDIAG is PSPACE-hard.

Proof: We reduce the halting problem of deterministic Tur-
ing machines with a polynomial space bound to the succinct
diagnosability problem, showing the latter PSPACE-hard.

Part of the reduction is like in the reductions to some other
succinct graph reachability problems [Bylander, 1994]. We
can represent the Turing machine conﬁgurations, including
the contents of a polynomially long tape, in terms of a poly-
nomial number of state variables, and we can represent the
transitions of the Turing machine in terms of a formula δ(e)
which represents an unobservable event.

We construct a transition system that is diagnosable if and
only if the Turing machine accepts. First a failure event F
or an unobservable non-failure event NF takes place. In the
non-failure case this is followed by an inﬁnite sequence of
events 1. In the failure case a simulation of the Turing ma-
chine follows. If the Turing machine accepts then an event 2
takes place. This makes it possible to distinguish between the
failure and non-failure cases. So the system is diagnosable if
and only if the Turing machine accepts.

Given a Turing machine, we deﬁne the succinct transition

system T = (cid:2)A, Σo, Σu, Σf , δ, s0(cid:3) where

• A consists of all the state variables needed for encod-
ing executions of the Turing machine with a bound on
the number of used tape cells (see for example Bylan-
der [1994]) and the state variable f that indicates that a
failure has taken place and I that indicates that the exe-
cution has not started yet.

• Σo = {1, 2}, Σu = {NF}, Σf = {F}, and
•

(cid:2)

δ(NF) = I ∧ ¬f (cid:2) ∧ ¬I (cid:2) ∧

δ(F) = I ∧ f (cid:2) ∧ ¬I (cid:2) ∧

(a ↔ a(cid:2))

a∈A\{f,I}

(cid:2)

(a ↔ a(cid:2))

a∈A\{f,I}

δ(1) = ¬I ∧ ¬I (cid:2) ∧ ((f ∧ f (cid:2) ∧ ¬a ∧ TM) ∨ (¬f ∧ ¬f (cid:2)))
where TM is a formula for simulating the change in the
Turing machine conﬁguration in one execution step and
a is a state variable that represents the accepting inter-
nal state of the Turing machine. If the Turing machine
rejects it continues with event 1 indeﬁnitely.
When the Turing machine accepts at least one event 2
takes place.

δ(2) = f ∧ a

• s0 is a valuation that encodes the initial conﬁguration of

the Turing machine and sets s0(I) = 1.

(cid:3)

Hence the succinct diagnosability problem is PSPACE-
complete,
like some other path-ﬁnding problems in suc-
cinctly represented graphs, the succinct s-t-reachability prob-
lem [Lozano and Balc´azar, 1990] and the plan existence prob-
lem of AI planning [Bylander, 1994]. This further suggests
similar approaches to solving the diagnosability problem, for
example reduction to the propositional satisﬁability problem
SAT [Rintanen and Grastien, 2007].

IJCAI-07

541

5 Size of Diagnosers

In this section we show that, assuming a sufﬁciently restricted
deﬁnition of diagnosers, sometimes diagnosers are necessar-
ily quite large.

The size of diagnosers strongly depends on how complex
computation they are allowed to perform. The more complex
the computation may be the smaller the diagnoser. There are
diagnosers that are Turing machines with only a constant size
and that only need memory for storing the system description
and the set of all states, but executing such a diagnoser may
be too expensive for real-time on-line diagnosis.

In this section we focus on diagnosers that are ﬁnite au-
tomata which can process each observation in constant time.

5.1 Upper Bounds on Size

We use the notion of belief states to derive an upper bound on
the size of smallest diagnosers. The basic construct is similar
to that used by Sampath et al. [1995] and the size of smallest
diagnosers follows from the construct by Sampath et al.

Let T = (cid:2)X, Σo, Σu, Σf , δ, s0(cid:3) be a transition system. Let
G0(T ) = (cid:2)V, E(cid:3) be a graph in which the set of nodes V =
2X×2Σf
is the set of all sets B ⊆ X × 2Σf of pairs (s, f ) ∈
X × 2Σf , and there is a labelled edge (B, e, B(cid:2)) ∈ E from
B ∈ V to B(cid:2) ∈ V if and only if either

• e ∈ Σf and B(cid:2) = {(s(cid:2), f ∪ {e})|(s, f ) ∈ B, (s, e, s(cid:2)) ∈

δ}, or

• e ∈ Σo ∪ Σu and B(cid:2) = {(s(cid:2), f )|(s, f ) ∈ B, (s, e, s(cid:2)) ∈

δ},

A belief state B with (s, f ) ∈ B means that it is possible
that s is the current state and its history includes exactly the
failure events in f . Note that it is possible that (s, f ) ∈ B
and (s, f (cid:2)) ∈ B for some f (cid:11)= f (cid:2)

.

The initial node of the graph is BI = {(s0, ∅)}.
The number of belief states B ⊆ X × 2Σf is 2|X|2|Σf |

.

This is O(2n) where n is the number of states.

This graph compactly encodes the states that could be
reached by a given event sequence and the failure events in
that sequence: starting in the initial node follow the edges
corresponding to the events, and if (s, f ) ∈ B for the node B
that is reached, then it is possible to reach s with that event
sequence which includes the failure events in f .

A diagnoser cannot observe unobservable events, so we
construct a second graph G(T ) that represents the diagnoser’s
view of the possible current states and their failure histories
in terms of observable events. This construction takes poly-
nomial time in the size of G0(T ). Any path e1, . . . , en, e in
G0(T ) such that e is observable and e1, . . . , en are unobserv-
able is represented in G(T ) by one edge with the label e.

Given G0(T ) = (cid:2)V, E(cid:3) deﬁne G(T ) = (cid:2)V, E(cid:2)(cid:3) as follows.

There is an edge (B, e, B(cid:2)) ∈ E(cid:2)

if and only if

(cid:3)m
• e ∈ Σo and
• B(cid:2) =
i=1 Bi where B1, . . . , Bm are all the nodes
in G0(T ) such that for all i ∈ {1, . . . , m} there is a
path e1, . . . , en, e from B to Bi such that n ≥ 0 and
{e1, . . . , en} ⊆ Σu ∪ Σf .

By Assumption 2.2 n is bounded by some constant ≤ |X|.

The graph G(T ) has the same nodes as G0(T ) and the num-

ber of edges is at most as high.

Lemma 5.1 Let σ be a sequence of events in a system T ,
starting in its initial state s0, in which exactly the failure
events in f occur before the last observable event and s is
the last state that is not immediately preceded by an unob-
servable event (it is preceded by an observable event or it is
the ﬁrst state s0.) Then the sequence π(σ) in G(T ) leads from
{(s0, ∅)} to B such that (s, f ) ∈ B.

Lemma 5.2 Let T be a system with the initial state s0. Let σ
be a sequence of observable events. If σ leads in G(T ) from
{(s0, ∅)} to B such that there is some (s, f ) ∈ B, then there
is a sequence σ(cid:2)
of events in T such that σ = π(σ(cid:2)) and σ(cid:2)
leads from s0 to s in T and σ(cid:2)
includes exactly the failure
events f .

Finally, we show that G(T ) is a diagnoser. The accepting
states B of this diagnoser are those that include a known past
failure:

(cid:4)
(s,f )∈B f (cid:11)= ∅.

Theorem 5.3 Let T = (cid:2)X, Σo, Σu, Σf , δ, s0(cid:3) be a system
that is diagnosable with delay d.

1. Let σ = e1, . . . , en be a sequence of events in T starting
in s0 and assume en ∈ Σf . Then for every sequence
of events e(cid:2)
1, . . . , e(cid:2)
m)| = d and
e1, . . . , en, e(cid:2)
m is a sequence of events in T , there
(cid:4)
1, . . . , e(cid:2)
is m(cid:2) ≤ m such that π(e1, . . . , en, e(cid:2)
m(cid:2)) leads in
G(T ) from {(s0, ∅)} to B such that en ∈
(s,f )∈B f .

m such that |π(e(cid:2)

1, . . . , e(cid:2)

1, . . . , e(cid:2)

2. If for a sequence of events e1, . . . , em in T the path
π(e1, . . . , em) in G(T ) leads from {(s0, ∅)} to B and
there is e ∈

(cid:4)
(s,f )∈B f , then e ∈ {e1, . . . , em}.

(cid:4)

(s,f )∈Bn+m

Proof: For (1) take any σ(cid:2) = e(cid:2)
d and σσ(cid:2)
the belief states on the path π(σσ(cid:2)) in G(T ).

m such that |π(σ(cid:2))| =
is an event sequence in T . Let B0, . . . , Bn+m be

1, . . . , e(cid:2)

Assume en (cid:11)∈

f . By Lemma 5.2 there
is a sequence σ2 of events such that π(σ2) = σσ(cid:2)
and
en does not occur in σσ(cid:2)
. This contradicts the fact that
the system is diagnosable with delay d: for all sequences
and σ2 of events in T such that |π(σ(cid:2))| ≥ d and
σ1 = σσ(cid:2)
(cid:4)
π(σ1) = π(σ2), σ2 includes the event e. Hence it must be
that en ∈
f for
some m(cid:2) ≤ n + m.

f . Now en ∈

(s,f )∈Bn+m(cid:2)

(s,f )∈Bn+m

(cid:4)

For (2) assume that e1, . . . , em is a sequence of events in T
such that the path π(e1, . . . , em) in G(T ) leads from {(s0, ∅)}
to B such that there is e ∈

(s,f )∈B f .

(cid:4)

Let σ = π(e1, . . . , em). Let m(cid:2)

such that
em(cid:2) is an observable event, and let s be the state immediately
following em(cid:2) . Let σ = π(e1, . . . , em(cid:2)) = π(e1, . . . , em). By
Lemma 5.1 (s, f ) ∈ B where f = Σf ∩ {e1, . . . , em}. Since
e ∈
(cid:3)

(cid:4)
(s,f )∈B f , e ∈ {e1, . . . , em(cid:2)} ⊆ {e1, . . . , em}.

be the least m(cid:2)

Let G(T ) = (cid:2)V, E(cid:2)(cid:3). We deﬁne the diagnoser CD(T ) =

(cid:2)V, Σo, δ, {(s0, ∅)}, A(cid:3) where

IJCAI-07

542

A

bA

B

bB

C

bC

D

bD

F

F

F

F

F

F

C

CbC

bC C

CbC

bC C

CbC

bC

D

F

F

bD

C

CbC

bC C

CbC

bC

C

bC

C

CbC

bC

B

BbB

bB

B

bB

B

BbB

bB B

BbB

bB

A

bA

A

AbA

bA A

AbA

bA A

AbA

bA

Figure 3: A system requiring a diagnoser of size Ω(2n)

• δ = {((B, e), B(cid:2))|(B, e, B(cid:2)) ∈ E(cid:2)} and
• A = {B ∈ V |

(cid:4)
(s,f )∈B f (cid:11)= ∅}.

Hence the graph G(T ) = (cid:2)V, E(cid:2)(cid:3) corresponds to a diag-
noser for T . The diagnoser starts from the node {(s0, ∅)}.
After observing an event e ∈ Σo it follows the corre-
sponding edge in the graph. Notice that unlike in the un-
derlying system, each event in the graph (cid:2)V, E(cid:2)(cid:3) leads to
a unique successor node. When reaching a node B =
{(s1, f1), . . . , (sn, fn)} with f =
(cid:11)= ∅, the diag-
noser has detected the failure events f .

(cid:4)n
i=1 fi

The number of nodes in (cid:2)V, E(cid:2)(cid:3) is O(2n) in the number n
of states in T . Some diagnosers may have more nodes than
(cid:2)V, E(cid:2)(cid:3) but those diagnosers are not the smallest ones. Hence
the size of the smallest diagnoser is O(2n).

Since a transition system may be exponentially bigger than
its succinct representation, the O(2n) bound on the diagnoser
size for enumerative representations yields a O(22n ) bound
on the size of diagnosers of succinct transition systems.

5.2 Lower Bounds on Size

We derive an exponential lower bound on the worst-case size
of smallest diagnosers by constructing a system for which
the smallest diagnoser has an exponential number of states.
The high number of states in the smallest diagnoser is an in-
dication of the need for the diagnoser to remember the past
events. The number of possible past histories may grow ex-
ponentially in the size of the system and the length of the
histories. The past histories may have to be encoded in the
diagnoser and this leads to an exponential size.

Theorem 5.4 There are diagnosable systems for which the
smallest diagnoser has size Θ(2n) where n is the number of
states.

Proof: Consider the system in Figure 3.

Let Σ =

{A, B, C, D}. The events of the transition system are a and
ˆa for a ∈ Σ. In the initial state an unobservable event takes
place. Then a sequence of |Σ| events takes place, either a or
ˆa for every a ∈ Σ, followed by either an unobservable fail-
taken place iff for some a ∈ Σ both a and (cid:5)a have taken place.
ure or an unobservable non-failure event. A failure event has
The number of different sequences of observable events be-
fore the failure events is 2|Σ|
. No information on these se-
quences can be ignored before the last event has taken place.
Hence the smallest diagnoser has 2|Σ|
states for representing
the ﬁrst |Σ| events.

Clearly, similar systems can be constructed for arbitrary
sets Σ, and the number of states of these systems grows
quadratically in the cardinality of Σ and the number of states
(cid:3)
in the diagnosers grows exponentially.

We adapt the construction in Theorem 5.4 to succinct tran-
sition systems by replacing the events A, B, C, D by se-
quences of events corresponding to binary numbers, and uti-
lizing the regularity of the system to represent it more com-
pactly so that the number of states is exponential in the size of
the system description. This means that the number of nodes
in the diagnoser is doubly exponential Ω(22n ) in the size of
the system description.

Theorem 5.5 There are succinct systems for which the small-
est diagnoser has size Θ(22n ).

(cid:5)A, B,

(cid:5)C D,

(cid:5)B, C,

(cid:5)D indicating the different “values”

Proof: Let n be a size parameter that characterizes the num-
ber 2n
of things to remember just like A, B, C, D in the proof
of Theorem 5.4. Instead of producing a sequence of events
A,
of A, B, C and D, the succinct system produces a sequence
v0, . . . , v2n−1 of 2n
events 0 or 1 followed by an unobserv-
able failure or non-failure event, and then an event 0 or 1 for
indicating a value v and a sequence of n events 0 or 1 that
encodes an index i ∈ {0, . . . , 2n − 1} to the ﬁrst sequence. If
the value vi does not match v then a failure has taken place.
The construction with n = 2 is illustrated in Figure 4.

Because of space restrictions we cannot present the system
here. The number of states of the system is exponential in
n, and the size of the succinct representation of the system is
linear in n. The size of the smallest diagnoser is exponential
in the number of states and doubly exponential in n.
(cid:3)

6 Related Work and Conclusions

We have shown that the diagnosability problem of succinct
transition systems is PSPACE-complete. We also tightened
an earlier known polynomial time upper bound of diagnos-
ability testing of explicitly represented transition systems by
showing that non-diagnosability is NLOGSPACE-complete.
The work by Sampath et al. [1995] underlies much of the
work in the diagnoser framework, and also our belief state
enumeration algorithm in Section 5.1 is based on it.

Other related works include Tripakis [2002] who shows
that diagnosability of transition systems represented as timed
automata is PSPACE-complete. This result can be contrasted

IJCAI-07

543

0

0

0

0

0

0

0

0

1

1

0

0

1

0

1

0

1

0

0

1

1

1

1

0

F

F

F

F

F

F

F

01

1 0

01

1 0

01

1

0

1

1

1

F

1

01

1 0

01

1

0

1

0

01

01

1

0

1

0

01

1 0

01

0

1

0

01

1 0

01

1 0

01

1

1

1

Figure 4: A system requiring a diagnoser of size Ω(22n )

to the polynomial time result of Jiang et al. [2001] and our
more tight NLOGSPACE-membership result in Theorem 4.1.
More complex diagnosis problems for timed automata are in-
vestigated by Bouyer et al. [2005].

Wen et al.

[2005] propose a polynomial time algorithm
for testing diagnosability of transition systems represented as
Petri nets. The algorithm tests for a sufﬁcient but not nec-
essary condition for diagnosability, and is therefore incom-
plete. A variant of our Theorem 4.4 shows that, assuming
PSPACE(cid:11)=P, the test cannot be made complete by strengthen-
ing it without losing the polynomial time property: the Turing
machine simulation in the proof of Theorem 4.4 can be per-
formed with Petri nets as well.

Acknowledgements

Many thanks to Sylvie Thi´ebaux for directing me to this re-
search topic and to Alban Grastien for comments and tight-
ening the upper bound in Theorem 3.6 by a factor of 2.

This research was supported by National ICT Australia
(NICTA) in the framework of the SuperCom project. NICTA
is funded through the Australian Government’s Backing Aus-
tralia’s Ability initiative, in part through the Australian Na-
tional Research Council.

References

[Bouyer et al., 2005] Patricia Bouyer, Fabrice Chevalier, and
Deepak D’Souza. Fault diagnosis using timed automata.
In Vladimiro Sassone, editor, Foundations of Software
Science and Computational Structures: 8th International
Conference, FOSSACS 2005, Held as Part of the Joint Eu-
ropean Conferences on Theory and Practice of Software,
ETAPS 2005, Edinburgh, UK, April 4-8, 2005. Proceed-
ings, number 3441 in Lecture Notes in Computer Science,
pages 219–233. Springer-Verlag, 2005.

[Bylander, 1994] Tom Bylander. The computational com-
plexity of propositional STRIPS planning. Artiﬁcial In-
telligence, 69(1-2):165–204, 1994.

[Grastien, 2006] Alban Grastien. personal communication,

2006.

[Holloway et al., 1997] L. E. Holloway, B. H. Krogh, and
A. Giua. A survey of Petri net methods for controlled
discrete-event systems. Discrete Event Dynamic Systems:
Theory and Applications, 7:151–190, 1997.

[Jiang et al., 2001] Shengbing Jiang, Zhongdong Huang, Vi-
gyan Chandra, and Ratnesh Kumar. A polynomial algo-
rithm for diagnosability of discrete-event systems. IEEE
Transactions on Automatic Control, 46:1318–1321, 2001.

[Johnson, 1990] D. S. Johnson. A catalog of complexity
classes. In J. Van Leeuwen, editor, Handbook of Theoret-
ical Computer Science, volume A. Algorithms and Com-
plexity, pages 67–161. Elsevier Science Publishers, 1990.

[Lozano and Balc´azar, 1990] Antonio Lozano and Jos´e L.
Balc´azar. The complexity of graph problems for succinctly
represented graphs.
In Manfred Nagl, editor, Graph-
Theoretic Concepts in Computer Science, 15th Interna-
tional Workshop, WG’89, number 411 in Lecture Notes
in Computer Science, pages 277–286. Springer-Verlag,
1990.

[Rintanen and Grastien, 2007] Jussi Rintanen and Alban
Grastien. Diagnosability testing with satisﬁability algo-
rithms. In Manuela Veloso, editor, Proceedings of the 20th
International Joint Conference on Artiﬁcial Intelligence.
AAAI Press, 2007.

[Sampath et al., 1995] Meera Sampath, Raja Sengupta,
St´ephane Lafortune, Kasim Sinnamohideen, and De-
mosthenis Teneketzis. Diagnosability of discrete-event
systems.
IEEE Transactions on Automatic Control,
40(9):1555–1575, 1995.

[Tarjan, 1972] R. E. Tarjan. Depth ﬁrst search and linear
graph algorithms. SIAM Journal on Computing, 1(2):146–
160, 1972.

[Tripakis, 2002] Stavros Tripakis. Fault diagnosis for timed
automata. In W. Damm and E.-R. Olderog, editors, Formal
Techniques in Real-Time and Fault-Tolerant Systems: 7th
International Symposium, FTRTFT 2002, Co-sponsored
by IFIP WG 2.2, Oldenburg, Germany, September 9-
12, 2002. Proceedings, number 2469 in Lecture Notes
in Computer Science, pages 205–221. Springer-Verlag,
2002.

[Wen et al., 2005] YuanLin Wen, ChunHsi Li, and MuDer
Jeng. A polynomial algorithm for checking diagnosability
of Petri nets.
In IEEE International Conference on Sys-
tems, Man and Cybernetics, volume 3, pages 2542–2547,
2005.

IJCAI-07

544

