Techniques for Efﬁcient Interactive Conﬁguration of Distribution Networks

Tarik Hadži´c and Andrzej W ˛asowski and Henrik R. Andersen

Computational Logic and Algorithms Group, IT University of Copenhagen,

Rued Langgaards Vej 7, DK-2300 Copenhagen S, Denmark

{tarik,wasowski,hra}@itu.dk

Abstract

Recovering from power outages is an essential task
in distribution of electricity. Our industrial partner
postulates that the recovery should be interactive
rather than automatic: supporting the operator by
preventing choices that destabilize the network.
Interactive conﬁgurators, successfully used in spec-
ifying products and services, support users in se-
lecting logically constrained parameters in a sound,
complete and backtrack-free manner.
Interactive
restoration algorithms based on reduced ordered bi-
nary decision diagrams (BDDs) had been devel-
oped also for power distribution networks, however
they did not scale to the large instances, as BDDs
representing these could not be compiled.
We discuss the theoretical hardness of the interac-
tive conﬁguration and then provide techniques used
to compile two classes of networks. We handle
the largest industrial instances available. Our tech-
niques rely on symbolic reachability computation,
early variable quantiﬁcation, domain speciﬁc order-
ing heuristics and conjunctive decomposition.

1 Introduction

Interactive conﬁguration is an application of constraint satis-
faction (CSP) that assists a user in her search for a valid vari-
able assignment (a conﬁguration) in a combinatorial problem.
Its major application areas include sales of services (airplane
tickets, insurance policies) and goods (personal computers,
cars).

The assistance takes the form of proposing choices that are
globally consistent, i.e. always lead to a legal solution to the
problem. In CSP terms interactive conﬁgurator enforces gen-
eralized arc consistency (GAC) wrt. implicit conjunction of
all constraints, i.e. it computes a valid domain for each unas-
signed variable, consisting of all valuations that are guaran-
teed to be globally completable. As a consequence, as long
as a user assigns values from valid domains the interaction
is complete (all valid conﬁgurations are reachable through
user interaction) and backtrack-free (a user is never forced
to change an earlier choice). Additionally the computation
must run in real-time, to facilitate use in interactive setting.

For general CSP models over ﬁnite domains, enforcing
GAC is NP-hard. Therefore, in order to provide real-time
guarantees, current approaches use off-line compilation of
the CSP model into a tractable data structure representing
the space of all valid conﬁgurations [Møller et al., 2001;
Amilhastre et al., 2002]. It has been observed that the com-
piled representations based on reduced ordered binary deci-
sion diagrams (BDD) [Bryant, 1986], although having expo-
nential worst-case size, can usually be kept small for the in-
dustrial instances of product conﬁguration [Subbarayan et al.,
2004].

Here we advance a state of the art for a recent application
of interactive conﬁguration in the domain of power supply
restoration [T. Hadzic and H. R. Andersen, 2005]. The PSR
domain has received a lot of attention, after several blackouts
had caused serious ﬁnancial loss and had raised security con-
siderations throughout North America and Europe. These in
turn have inspired a host of research on automatic recovery
from power outages based on search and planning techniques
[Thiébaux and Cordier, 2001; Bertoli et al., 2002] ﬁrst for the
high voltage transport networks, and later for the more com-
plex and dense distribution networks.

Our industrial partner NESA A/S, a power distribution op-
erator in the Copenhagen area, insisted that the power restora-
tion process should be interactive rather than automatic: leav-
ing the control to the operator interactively reconﬁguring the
network, while still guiding her in this process. This makes
the standard solutions based on network-ﬂow algorithms in-
adequate since instead of ﬁnding just one (possibly optimal
wrt. some cost) conﬁguration we need to reason about all
possible valid network conﬁgurations. In addition we were
strongly required to take into account the entire combinatorial
hardness of the problem, guaranteeing not only uninterrupted
ﬂow of electricity in circuits (connectivity constraints), but
also meeting constraints on the maximum load carried by a
line (load constraints).

Due to numerous cyclic dependencies, the industrial in-
stances provided by NESA, proved to be much harder than
any of the product conﬁguration instances we had encoun-
tered so far. They were also much larger than PSR instances
seen elsewhere, making our existing conﬁgurators unable to
work with them. Basic BDD based techniques (see for ex-
ample the monolithic approach in [T. Hadzic and H. R. An-
dersen, 2005]) required representing the network with a sin-

IJCAI-07

100

gle BDD. We investigated a number of techniques to in-
crease the size of the network that can be compiled.
In
this paper we present the most successful of these. We de-
scribe improvements in the PSR models achieved by reduc-
ing the number of network elements represented in a BDD,
and use of PSR speciﬁc variable orderings. We also intro-
duce an alternative way to compile BDDs representing con-
nectivity constraints only—an important subclass of the prob-
lem, widely used in other PSR research. Finally, we de-
scribe our decomposition approach that allows us to scale
to the largest instance in our collection (3 power sources,
119 consumer sinks, 146 line segments, see Figure 2). We
believe that this is the largest network that can be handled
in a backtrack-free and complete manner, under given time
requirements so far. Our instances are publicly available at
http://www.itu.dk/~tarik/psr.

Related work BDDs have been successfully applied in
product conﬁguration [Subbarayan et al., 2004]. However,
the network topology of PSR is much harder for BDDs to rep-
resent (standard compilation techniques experience size ex-
plosion of BDDs even for smaller instances). Interaction over
decomposed set of BDDs has been explored before. In [Meer
et al., 2006] the authors provide strong guarantees for inter-
action over acyclic network of BDDs that can be dynamically
extended by unlimited number of new BDDs. In contrast, we
do not provide support for dynamic structures of unbounded
size, but we handle cyclic dependencies.

The PSR problem has been investigated in the context of
automated planing. However, the instances presented were
relatively small [Thiébaux and Cordier, 2001] and disre-
garded the combinatorial hardness of the problem caused by
the load constraints. Recently it has been shown that the PSR
planning problem is easy when these constraints are ignored
[Helmert, 2006]. We show that the interactive conﬁguration
of PSR, as postulated by NESA, is NP-hard under load con-
straints and polynomial when these constraints are ignored.

Our work is likely to be of interest for other applications
exploiting BDD representations of networks such as auto-
matic reconﬁguration [T. Hadzic and H. R. Andersen, 2005],
automated planning [Jensen et al., 2004] and reliability anal-
ysis [Dutuit et al., 1997]. The techniques should perform well
also for other kinds of networks (eg. distributing water, natu-
ral gas, sewage, or for telecommunication networks).

We proceed as follows. Section 2 describes the problem
deﬁning load networks and connectivity networks, their com-
plexity properties and the basics of our models. Section 3 dis-
cusses techniques supporting compilation of load networks
up to the medium size instances. Section 4 describes tech-
niques for compiling connectivity networks up to the largest
instances available, while Section 5 brings a decomposition
approach that allows interactive conﬁguration of the largest
available instances of load networks. Experimental evalua-
tion is discussed throughout sections 3–5. We summarize and
conclude in Section 6.

2 PSR Conﬁguration Problems
We view a power network as a directed graph G(V,E), where
vertices represent power sources P (supplying electrical cur-

e1

e2

v

e3

e4

Figure 1: Lines e1, e2, e3, e4 incident with sink v. For sim-
plicity arrows denote the direction of ﬂow, not the edge direc-
tions. Only one of the lines can lead the power into v (connec-
tivity rules), e2 here. If v is on then according to Kirchhoff’s
law: le2

= |v| + le1

+ le3

+ le4

rent) and sinks S (consuming it): P ⊆ V, S = V \P . In reality
sinks are transformer stations that transmit electricity to ﬁ-
nal consumers. Each edge e = (v1, v2) ∈ V ×V , represents a
power line capable of transporting current between v1 and v2,
in any direction. The state of e is forward if e is transmitting
a non-zero current from v1 to v2, and backward when trans-
mitting from v2 to v1. Otherwise the state is off. We denote
the current load on e as le ≥ 0. When e is off then le = 0.

A sink v consumes up to |v| units of power. A sink can be
on iff it is connected to a line in the forward or backward state
that provides at least |v| units of current. Otherwise a sink is
off. A sink can be off even when connected to a powered line.
In such case current ﬂows through it without any loss.

The following connectivity constraints must always hold:
• No short circuits: undirected cycles with sources but

without active sinks (resistance) are forbidden.

• No self feeding cycles: undirected cycles that have no

active sinks and no sources are forbidden.

• No sink is powered from more than one power line.
Most of the distribution network instances that we have
seen in the PSR research enforce only the above connectiv-
ity rules, effectively ignoring the relation between the con-
sumption of sinks and the capacity of lines. This means that a
sink can be switched on based only on whether it can be con-
nected to a powered line. We call these special subclass of
the networks the Connectivity Distribution Networks. They
are important to study in themselves, as being the basis for
most of the PSR research they can serve as a reference in
comparisons. However, our industrial partner also requires
the following load distribution constraints to hold:

• Kirchhoff’s laws for load distribution must be preserved

as illustrated in Figure 1.

• For each line e its current load le must not exceed a con-

stant maximum capacity |e|: le ≤ |e|.

In case of a line failure, an operator should be supported to
interactively conﬁgure the affected part of the network. The
advantage of interactive instead of automatic recovery lies in
the fact that since a lot of information about the network can-
not be encoded in CSP models, an operator is likely to make
more qualiﬁed decisions about how to reconﬁgure than an
automatic system. [T. Hadzic and H. R. Andersen, 2005] de-
scribe this interactive reconﬁguration process in detail.

The operator interactively decides which power lines to
use, and which to keep off. The broken lines are forced

IJCAI-07

101

to be off, and some important sinks (hospitals, etc) should
be always on.
In each interaction step, after ﬁxing a line
or a sink, the operator gets valid domains for remaining
network elements. We distinguish the problem of comput-
ing CONNECTIVITY-VALID-DOMAINS from LOAD-VALID-
DOMAINS, depending on which of the two kinds of distribu-
tion networks we are working with.

Problem (CONNECTIVITY-VALID-DOMAINS). For a set of
lines Eoff ⊆ E required to be off and the set of sinks Son ⊆ S
required to be on decide for each line e ∈ E\Eoff whether it is
possible to power all sinks in Son only using lines in E\(Eoff∪
{e}), and for each sink v ∈ S \Son whether the set Son ∪{v}
can be powered only using lines in E\Eoff, while connectivity
constraints are satisﬁed.

Theorem 1. CONNECTIVITY-VALID-DOMAINS is easy.
Proof sketch. The following algorithm checks in O(mn)
time if a given selection of Eoff and Son can be satisﬁed (m is
the number of lines and n is the number of sinks):

for each power source p in P

CONNECTIVITY-SAT(G, Eoff, Son)
1 G(cid:2) ← G(V, E \Eoff), S (cid:2)
← ∅
2
3
4
5

Add to S (cid:2)
return (Son ⊆ S (cid:2)

on all visited nodes
on)

on

do DFS traversal of nodes in G(cid:2) reachable from p

It sufﬁces to call CONNECTIVITY-SAT |E \ Eoff| + |S \ Son|
times to verify if any of the remaining lines can be forced off,
or if any of the remaining sinks can be forced on.

Similar models of connectivity networks are used as bench-
marks for planing under uncertainty [Thiébaux and Cordier,
2001]. A complexity analysis of [Helmert, 2006] indicates
that these networks are easy also for planning algorithms.

Problem (LOAD-VALID-DOMAINS). Given a set of lines
Eoff ⊆ E required to be off and the set of sinks Son ⊆ S re-
quired to be on decide for each line e ∈ E \ Eoff whether
it is possible to power all sinks in Son only using lines in
E \ (Eoff ∪ {e}), and for each sink v ∈ S \ Son whether the
set Son∪{v} can be powered only using lines in E\Eoff, while
both the connectivity and load constraints are satisﬁed.

Let us now formulate an auxiliary problem:

(cid:2)

Problem (SET-SUM-PARTITION). Given a ﬁnite set S of
positive integers and two integer constants c1 and c2 such
s∈S s ≤ c1 + c2 decide whether there exist subsets S1
that
and S2 such that S = S1(cid:9)S2 and for i = 1, 2.
s ≤ Ci.
The above problem is NP-hard [T. Hadzic and H. R. Ander-
sen, 2006], which can be shown by a straightforward reduc-
tion from SUBSET-SUM [Garey and Johnson, 1979, p.223].

s∈Si

(cid:2)

Theorem 2. LOAD-VALID-DOMAINS involves solving NP-
hard problems.

Proof sketch. We show that decision problems contained in
LOAD-VALID-DOMAINS are NP-hard, by reduction from
SET-SUM-PARTITION. For an instance S, c1, c2 create a net-
work as follows: for each k ∈ S create a sink vk with con-
sumption |vk| = k. Add one source p connected to new

dummy sinks s1, s2, s3 such that |s1| = |s2| = |s3| = 1.
Let |e(p, s1)| = c1, |e(p, s2)| = c2 and |e(p, s3)| = 1. For
each sink vk add lines e(s1, vk) and e(s2, vk) with capacity
max(c1, c2). Notice that due to connectivity constraints, in
any legal conﬁguration each vi sink can be powered from a
line coming from either s1 or s2, but never from both. Con-
sider solving LOAD-VALID-DOMAINS on the created graph
with Eoff = ∅ and Von = {vk | k ∈ S}. This requires deciding
whether s3 can be on, while the other constraints are satis-
ﬁed. If it cannot, then there is no suitable partition of S. If it
can then the answer to the original problem is yes (to obtain
a witness put into S1 all k ∈ S such that vk is powered via s1
and into S2 all k powered via s2).

Since the cost of computing valid domains for spaces rep-
resented in BDDs is given by a polynomial parameterized
by the BDD size [T. Hadzic et al., 2006], Thm. 2 implies
that there exist instances of load networks with exponentially
large BDD representations, regardless of the variable order-
ing. Additionally the two complexity results above may be
perceived as indications (not proofs!) how hard it is to rep-
resent the respective problems using BDDs. Indeed we will
soon experience that it is relatively easier to construct repre-
sentations for connectivity networks than for load networks.
We have built models of NESA’s instances using a cus-
tomized version of a BDD-based conﬁguration library CLab
[Jensen, online]. NESA require to model their network as
a load distribution network. The part of the network un-
der consideration contains lines of maximum current capac-
ity of 260 A, and transformer stations of size 400 KVA -
which corresponds to current consumption of about 22 A for
each transformer. This means that a power line with max-
imum current intensity can feed at most 13 sinks. This al-
lows us to discretize the domain of current load from [0, 260]
to {0, 1, . . . 13}, assuming that each transformer station con-
sumes one unit of current. It sufﬁces to enforce Kirchoff’s
distribution laws over these discrete domains to achieve a
close and sound approximation of network models with con-
tinuous current values: for every conﬁguration satisfying our
discrete model there is a range of continuous valuations sat-
isfying the real-valued model.

For each vertex v ∈ V we have a variable vpow ∈
{on, off} indicating whether it consumes (produces) current
or whether it is idle. For each line e ∈ E we introduce a
variable indicating the direction of the current ﬂow edir ∈
{off, backward, forward}, and a variable modelling the load
le ∈ {0, 1, . . . 13}. Kirchoff’s laws are modelled using ﬁ-
nite arithmetic constraints implicitly expanded by CLab into
boolean formulæ.

3 Compilation Techniques for Load Networks

The theoretical intuition that BDDs representing load net-
works are hard to construct, has been conﬁrmed in practice
for our instances. Structural properties of these instances are
reported in Table 1 (the instances have been created by Hen-
ney, Bak, Jensen and Sonne [T. Bak and S. Henney, 2004;
Lars Sonne and Rene Jensen, 2005] in collaboration with
NESA). The ﬁrst column in the table shows names of the
instances. The subsequent three columns list the numbers

IJCAI-07

102

R4

p3

p2

p1

R1

R3

R2

Figure 2: Complex: the largest instance.

of lines, sinks and power sources respectively. The size of
resulting BDD is indicated in the ﬁfth column. Even the
medium sized instances lead to enormous BDDs, and the
largest ones cannot be compiled.

The largest instance, Complex, has been set by NESA as a
goal for the ﬁrst stage of our collaboration. We were focused
on scaling our techniques to be able to handle it. Figure 2
shows the topology of this instance. We believe that Complex
is the largest real-world instance publicly available.

We have begun with an observation that for an operator
conﬁguring the network, the information about loads is not
necessary, as long as the load constraints are guaranteed to
be met. It sufﬁces to just represent the on/off state of sinks
and lines. The BDD can be decreased by projecting only on
relevant non-load variables. Any satisfying conﬁguration of
these variables in the projected BDD can be extended to a
conﬁguration including loads in the original BDD.

To beneﬁt from the projection already during compilation
we use early variable quantiﬁcation [Meinel and Theobald,
1998, p. 195]. CLab compiles models by compiling the con-
straints separately and then conjoining the results. Early vari-
able quantiﬁcation allows to quantify out variables at interme-
diate steps of the long conjunction. As soon as a load variable
is not appearing in constraints remaining to be conjoined, it
can be existentially quantiﬁed. The technique keeps the in-
termediary BDDs smaller, making it easier to reach the ﬁnal
result (it is known that the ﬁnal BDD is often much smaller
than the biggest intermediate BDDs in a long conjunction).

Table 1: Benchmark properties.

instance

name

# of
lines

# of
sinks

# of

sources

Std-diagram
1-6+22-32
Complex-P2
Complex-P3

1-32
Large

Complex

13
21
24
28
38
66
146

7
17
18
19
32
56
119

2
2
1
1
2
2
3

simple
size(kb)

215
455
3 282
61 240
448 360

-
-

quantiﬁed
size (kb)

7.3
31.6
252
418
4 154

-
-

Despite employing several quantiﬁcation scheduling
heuristics, we were unable to compile Large and Complex
(see the last column in Table 1). Nevertheless we have ob-
served much smaller intermediary BDDs, hinting that this
technique may be helpful in combination with other improve-
ments. More importantly we have observed a drastic decrease
of the ﬁnal BDD sizes (due to projection). Such a big de-
crease is not surprising in fact, given that more than half of
all Boolean variables in the model were only encoding loads.
It is well known that the size of BDD representations of
logical rules strongly depends on the variable ordering. The
orderings for BDDs in Table 1 were created using a general
purpose Fan-In heuristic [Meinel and Theobald, 1998, p.146–
147] that operates directly on logical rules. Since our model
follows the network topology we decided to apply heuristics
operating directly on the graph structure instead. We recog-
nized a direct relationship between the topological distance
of network elements (sinks, lines) and the logical interdepen-
dencies between the variables encoding them. Because of that
we place each vertex variable vpow in proximity to variables
edir, le for all the lines incident to v that were not already
placed with another vertex. Then, in order to place vertex
groups with respect to each other, we search for an optimal
linear layout of the input graph G(V, E) [Diaz et al., 2002]
using the Minimum Linear Arrangement (MINLA) measure
as the objective cost. Other measures might be well suited,
too.

After constructing and applying this ordering we observed
a signiﬁcant improvement in the size of the generated BDDs.
We ﬁnally managed to compile Large to: 8 483kb (1 811kb
after quantifying out loads). Nevertheless, the combination of
these two techniques still does not sufﬁce to reach our mile-
stone: interactive conﬁguration of Complex.

4 Techniques for Connectivity Networks

We should now present a compilation technique for Con-
nectivity Distribution Networks. We have shown in Sec-
tion 2 that there exists a truly polynomial algorithm for
CONNECTIVITY-VALID-DOMAINS not using BDDs. Still,
the BDDs for connectivity networks are interesting in them-
selves. Besides being useful for comparison with other PSR
research, they can be used for cost bounded interactive con-
ﬁguration [Hadzic and Andersen, 2006], where an operator
can interactively prune valid domains based on some notion
of cost. For example, an operator could limit the maximum
number of not-powered sinks, or if there is a cost assigned
to changing the status of each network line, then the operator
could limit the total cost of introduced changes.

After experiencing very large intermediate BDDs when
conjoining connectivity constraints in regular fashion we
have developed an alternative way to compile connectivity
networks. We remodelled the problem as a transition sys-
tem, such that its reachable state space equals the set of all
legal conﬁgurations. The construction is rather simple: in the
initial state all sinks are off, and every transition step only
powers lines and sinks in ways that do not violate connectiv-
ity constraints (lines cannot close cycles, powered sinks/lines
should be connected to powered lines). We compute the state

IJCAI-07

103

space by using the regular algorithm, which applies the tran-
sition relation transitively to the initial state until a ﬁxpoint is
reached [Meinel and Theobald, 1998, p.185].

We have created the instances of connectivity networks
from the instances of Section 3 by imposing connectivity con-
straints instead of load constraints and maintaining the topol-
ogy. We have experienced much smaller intermediate BDDs
than when using the regular compilation scheme of CLab.
Also we were able to compile BDDs for all the instances,
including Large (52.5 KB or approx. 2 191 nodes) and Com-
plex (1961 KB and 83 572 nodes).

5 Decomposition for Load Networks

We have tried a range of other techniques to scale up to
our biggest instance and only the conjunctive decomposition
was successful. It is strongly related to [Meer et al., 2006].
We divide the graph G(V, E) into overlapping components
G1(V1, E1), . . . , Gn(Vn, En), Vi ⊆ V , Ei ⊆ E such that ev-
ery vertex belongs to exactly one component and each edge
belongs to at least one and at most two components. Cross
component edges belong to two components: ∀e(v1, v2). v1 ∈
Vi ∧ v2 ∈ Vj ∧ i (cid:12)= j ⇒ e ∈ Ei
Ej. Remaining edges belong
to single components. The sink consumption, and load capac-
ities of lines are naturally inherited from the global problem.
We refer to the shared lines between regions as interfaces:
Iij = Ei

(cid:3)

(cid:3)

Ej .

We compile a BDD φi for each component Gi separately.
Since our modelling closely follows the network topology,
only minor modiﬁcations are needed to generate the logical
rules representing the subnetworks (in particular the load lev-
els and directions on interface lines should not be quantiﬁed).
Computing valid domains for conjunctive partitions is NP-
hard in general, even if represented by BDDs. However,
valid-domains can be calculated in the time polynomial in
the sum of the sizes of components, if all the component
BDDs φi are globally consistent [Dechter, 2003, p. 67], i.e.
if for each component i = 1 . . . n and for every satisﬁable
assignment σi to φi there exist a satisﬁable assignment σ
to φ = φ1 ∧ · · · ∧ φn which is an extension of σi (for
acyclic decompositions this reduces to arc consistency). The
computation of valid domains over the globally consistent
space φ reduces to standard BDD-based computation over
each subnetwork separately: LOAD-VALID-DOMAINS(φ) =
(cid:4)n
i=1 LOAD-VALID-DOMAINS(φi), giving an algorithm of

cost polynomial in the size of the component BDDs.

So once a conjunctive decomposition is constructed the
main problem lies in maintaining global consistency of the
network throughout the conﬁguration process. One success-
ful way to do [Meer et al., 2006]. The authors observe that
the growth of BDDs at runtime can be exponential in the size
of the interface sets Iij , making it essential to ﬁnd a partition-
ing with small interfaces. Observe that the use of conjunctive
decomposition sacriﬁces the polynomial response time guar-
antees of the previous sections. The sizes of the BDDs created
during interaction may be exponential, but only exponential
in a small number (the interface size). The experiments show
that the worst-case time complexity does not appear in prac-
tice.

R1

R2

R3

R4

I12 / I21

I23 / I32

I34 / I43

Figure 3: Decomposing Complex to regions R1, R2, R3, R4

After a user assigns x ← v, the solution space φi to which
x belongs is restricted by assigning φi ← φi ∧ x = v. This
may make some of the neighboring components allow in-
consistent assignments. Therefore a synchronization step is
needed, where a global consistency is restored. The new so-
lution space of φi is projected on all of its neighboring inter-
faces Iij ((φi ∧ x = v)↓Iij) and sent towards the respective
neighbors φj. Then the neighbors propagate the information
recursively until a ﬁxpoint is reached. The main algorithm,
stripped of technicalities, is presented below (assume that the
node i has already been restricted by x = v):
RESTORE-CONSISTENCY(i, φ1, . . . , φn)
1 S ← {i}
2 while S is not empty
3
4
5
6
7

m ← φm
φm ← (φn↓Inm) ∧ φm
if φ(cid:2)

do remove some element n from S

for each interface Inm incident with component n

do φ(cid:2)

m (cid:12)= φm then add m to S

We have partitioned Complex into four geographical com-
ponents R1–R4 as shown in Figures 2–3. Each region shares
with its neighbors line variables le, edir from the interface
sets Iij . The interface sizes are 12, 18 and 30 bits in this ex-
ample. The BDDs for each of the components are built sep-
arately, using the techniques described in previous sections.
The variable ordering is optimized for each of the modules
separately, using the MINLA heuristic. This means that on
top of the projections, we also need to perform renamings
when restoring the consistency. In return we beneﬁt from be-
ing able to optimize each ordering separately. The sizes of
the component BDDs are 403 138 nodes (9 769kb) for R1,
169 585 (4 497kb) for R2, 136 636 (3 578kb) for R3, and
126 976 nodes (3 240kb) for R4. These BDDs could be made
smaller in an industrial quality implementation by introduc-
ing more components. Still, the numbers were satisfactory
for our „proof of concept” implementation.

The computation of valid domains for Complex lasts less
than 0.5s (using a state of the art implementation from CLab).
The restoration of global consistency takes less than 3s. using
our crude implementation. Because the structure is so sim-
ple, the restoration never requires more than four conjunc-
tions, but our simplistic implementation often does twice as
many. The experiments have been carried on a 3.2Ghz PC.
The times decrease dramatically if the network is nearly con-
ﬁgured, which is the case in most of the realistic situations.

6 Conclusions and Future Work
We have discussed a range of techniques for interactive con-
ﬁguration of power distribution networks. We have shown
that the interactive conﬁguration over Connectivity Distribu-
tion Networks is easy, while our more realistic model of Load
Distribution Networks makes interaction NP-hard.

IJCAI-07

104

We have shown and experimentally evaluated a range of
techniques useful in compilation, interactive conﬁguration,
and reconﬁguration of solution spaces representing power
supply networks. We have described a successful attempt to
model the problem in propositional logics and ﬁnite domain
arithmetics with judicious use of hiding variables and early
quantiﬁcation scheduling. We have proposed a bottom-up
way of constructing the solution space as a result of reach-
able state space computation with a custom transition rela-
tion. Finally, by application of conjunctive decomposition,
we were able to efﬁciently interact with the largest instance
obtained from our industrial partner: a highly cyclic network
of 3 power sources, 119 nodes and 146 line segments.

In future we will try to scale our approach to even bigger
instances, and evaluate it on topologies that cannot be eas-
ily decomposed into acyclic component graphs (we already
support cyclic decompositions, but we have not evaluated the
efﬁciency on such cases, yet). We intend to improve the im-
plementation of our conﬁgurator over decomposed networks,
and develop automatic heuristics for decomposition.

We would like to quantify theoretically the dependency be-
tween the cyclicity of instances and their BDD representation
sizes, and to investigate representations other than BDDs.

References

[Amilhastre et al., 2002] J. Amilhastre, H. Fargier, and
P. Marquis. Consistency restoration and explanations in
dynamic CSPs-application to conﬁguration. Artiﬁcial In-
telligence, 135(1-2):199–234, 2002.

[Lars Sonne and Rene Jensen, 2005] Lars Sonne and Rene
Jensen. Power Supply Restoration. Master’s thesis, De-
partment of Innovation, IT University of Copenhagen,
2005.

[T. Bak and S. Henney, 2004] T. Bak and S. Henney. Power
Supply Restoration—a Constraint-based Model for Re-
conﬁguration of 10KV Electrical Distribution Networks.
Student term report. IT University of Copenhagen, 2004.

[T. Hadzic and H. R. Andersen, 2005] T. Hadzic and H. R.
Andersen.
Interactive Reconﬁguration in Power Supply
Restoration. In 11th International Conference on Princi-
ples and Practice of Constraint Programming CP’05, Sit-
ges, Spain, 2005.

[T. Hadzic and H. R. Andersen, 2006] T. Hadzic and H. R.
Andersen. Combining BDDs with Cost-Bounding Con-
straints for Interactive Conﬁguration.
In Doctoral Pro-
gramme Proceedings of CP’06, 2006.

[T. Hadzic et al., 2006] T. Hadzic, R. Jensen, and H. Reif
Andersen.
Notes on Calculating Valid Domains.
Manuscript online http://www.itu.dk/~tarik/
cvd/cvd.pdf, 2006.

[Bertoli et al., 2002] P. Bertoli, A. Cimatti, J. Slanley, and
S. Thiébaux. Solving power supply restoration problems
with planning via symbolic model checking. In 15th Euro-
pean Conference on Artiﬁcial Intelligence ECAI’02, Lyon,
France, pages 576–580. IOS Press, 2002.

[Bryant, 1986] R. E. Bryant. Graph-based algorithms for
IEEE Transactions on

boolean function manipulation.
Computers, 8:677–691, 1986.

[Dechter, 2003] Rina Dechter. Constraint Processing. Mor-

gan Kaufmann, May 2003.

[Diaz et al., 2002] Josep Diaz, Jordi Petit, and Maria Serna.
A survey of graph layout problems. In ACM Computing
Surveys, volume 34, September 2002.

[Dutuit et al., 1997] Y. Dutuit, A. Rauzy, and J.-P. Signoret.
Monte-carlo simulation to propagate uncertainties in fault
trees encoded by means of binary decision diagrams. In
1st International Conference on Mathematical Methods in
Reliability, MMR’97, pages 305–312, 1997.

[Garey and Johnson, 1979] M. R. Garey and D. S. Johnson.
Computers and Intractability: A Guide to the Theory of
NP-Completeness. Freeman, 1979.

[Hadzic and Andersen, 2006] T. Hadzic and H. Reif Ander-
sen. A BDD-based polytime algorithm for cost-bounded
interactive conﬁguration. In Proceedings of The Twenty-
First National Conference on Artiﬁcial Intelligence (AAAI-
06), 2006.

[Helmert, 2006] M. Helmert. New complexity results for
classical planning benchmarks. In International Confer-
ence on Automated Planning and Scheduling ICAPS’06,
The English Lake District, Cumbria, UK, June 2006, pages
52–61, 2006.

[Jensen et al., 2004] R. M. Jensen, M. M. Veloso, and R. E.
Bryant. Fault tolerant planning: Toward probabilistic un-
certainty models in symbolic non-deterministic planning.
In Proceedings of the 14th International Conference on
Automated Planning and Scheduling ICAPS-04, 2004.

[Jensen, online] R. M. Jensen. CLab: A C++ library for fast
backtrack-free interactive product conﬁguration. http:
//itu.dk/people/rmj/clab, online.

[Meer et al., 2006] E. van der Meer, A. W ˛asowski, and
H. R. Andersen. Efﬁcient interactive conﬁguration of un-
bounded modular systems. In ACM Symposiom on Applied
Computing (SAC’06), Dijon, France, 2006.

[Meinel and Theobald, 1998] C. Meinel and T. Theobald.
Algorithms and Data Structures in VLSI Design. Springer,
1998.

[Møller et al., 2001] J. Møller, H. R. Andersen, and H. Hul-
gaard. Product conﬁguration over the Internet. In Proceed-
ings of the 6th INFORMS, 2001.

[Subbarayan et al., 2004] S. Subbarayan, R. M. Jensen,
T. Hadzic, H. R. Andersen, H. Hulgaard, and J. Møller.
Comparing two implementations of a complete and
backtrack-free interactive conﬁgurator. In CP’04 CSPIA
Workshop, pages 97–111, 2004.

[Thiébaux and Cordier, 2001] S. Thiébaux and M. O.
Cordier.
Supply restoration in power distribution
systems—a benchmark for planning under uncertainty.
In Pre-Proceedings of the 6th European Conference on
Planning (ECP-01), pages 85–96, 2001.

IJCAI-07

105

