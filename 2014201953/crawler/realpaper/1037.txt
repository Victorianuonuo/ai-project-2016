Property Persistence in the Situation Calculus

∗

Ryan F. Kelly and Adrian R. Pearce

NICTA Victoria Laboratory

Department of Computer Science and Software Engineering

The University of Melbourne

Victoria, 3010, Australia

{rfk,adrian}@csse.unimelb.edu.au

Abstract

We develop an algorithm for reducing universally
quantiﬁed situation calculus queries to a form
more amenable to automated reasoning. Universal
quantiﬁcation in the situation calculus requires a
second-order induction axiom, making automated
reasoning difﬁcult for such queries. We show how
to reduce queries about property persistence, a
common family of universally-quantiﬁed query, to
an equivalent form that does not quantify over sit-
uations. The algorithm for doing so utilizes only
ﬁrst-order reasoning. We give several examples
of important reasoning tasks that are facilitated by
our approach, including checking for goal impos-
sibility and reasoning about knowledge with par-
tial observability of actions.

1 Introduction
The situation calculus [Pirri and Reiter, 1999] has long been
one of the most popular formalisms for reasoning about dy-
namic worlds. It has more recently become a popular choice
for implementing systems situated in a dynamic world, as it
offers, among other advantages: a formalism based in ﬁrst-
order logic; an elegant monotonic solution to the frame prob-
lem; and an effective reasoning procedure for the projection
problem [Reiter, 1991]. Coupled with logic programming
languages such as Prolog, it has facilitated the implementa-
tion of a wide range of systems.

The foundational axioms of the situation calculus include
a second-order induction axiom deﬁning the set of all situa-
tions [Reiter, 1993]. Sentences that contain only existential
quantiﬁcation over situation terms can be proven without the
induction axiom and so are more amenable to automated rea-
soning [Pirri and Reiter, 1999]. It is therefore important for
systems built on a situation calculus theory of action to limit
queries to existential form. Much of the work on implement-
ing systems with the situation calculus has been on reducing
the number of axioms required to answer a given query, to
allow more efﬁcient reasoning.

∗This research was supported by a grant from the Australian Re-
search Councils (ARCs) Centre for Perceptive and Intelligent Ma-
chines in Complex Environments (PIMCE).

Unfortunately there are many reasoning tasks that require
universal quantiﬁcation over situations. For example, it is of-
ten desirable to show that no situation can satisfy a particu-
lar goal. In this paper we are interested in a subset of such
queries which we refer to as persistence queries: under a par-
ticular situation calculus theory D, and given some property
φ and situation s, determine whether φ will hold in all situa-
tions in the future of s:

D |= ∀s(cid:2) . s (cid:4) s(cid:2) → φ[s(cid:2)]

The need for second-order logic has traditionally limited au-
tomated reasoning about such queries. We introduce a new
approach that is similar in spirit to the regression operator of
[Reiter, 1991]: deﬁne an operator that transforms a formula φ
into a formula PD[φ], such that φ persists in s if and only if
PD[φ] holds in s. We term this the persistence condition of φ,
and show how to calculate it in a form suitable for effective
automated reasoning.

To determine PD[φ], we ﬁrst deﬁne an operator P 1

[φ] that
holds in s whenever φ holds in s and all its immediate succes-
sors. The persistence condition is shown to be a ﬁxed-point
of this operator, which can be sought using a straightforward
iterative algorithm. Since this requires only ﬁrst-order rea-
soning with a limited number of axioms, the result is an ef-
fective procedure with which to answer a family of queries
that universally quantify over situations.

D

The paper is organized as follows: Section 2 gives a brief
introduction to the situation calculus, formally deﬁnes the
persistence problem, discusses related work and gives several
examples of important persistence queries; Section 3 formally
deﬁnes the persistence condition, presents an algorithm that
calculates it, shows that the algorithm is correct and discusses
the conditions necessary for completeness; and Section 4 con-
cludes with a summary of our results.

2 Background
The situation calculus is a many-sorted language of ﬁrst-order
logic augmented with a second-order induction axiom. It has
the following sorts: Action terms are functions denoting in-
dividual instantaneous events that can cause the state of the
world to change; Situation terms are histories of the actions
that have occurred in the world, with the initial situation rep-
resented by S0 and successive situations built up using the
function do : Action × Situation → Situation; Object

IJCAI-07

1948

terms represent any other object in the domain.
It further
distinguishes Fluents as predicates or functions representing
properties of the world that may change from one situation to
another, and so take a situation term as their ﬁnal argument.
For a detailed description consult [Pirri and Reiter, 1999].

A basic action theory is a set D of situation calculus sen-
tences (with a speciﬁc syntactic form as speciﬁed in [Pirri
and Reiter, 1999]) that describes a particular dynamic world.
Queries about the behavior or evolution of the world are
posed as logical entailment queries relative to this theory. It
consists of the following disjoint sets: the foundational ax-
ioms of the situation calculus (Σ); successor state axioms de-
scribing how ﬂuents change between situations (Dss); pre-
condition axioms indicating when actions can be performed
(Dap); unique names axioms ensuring that action terms are
distinct (Duna); and axioms describing the value of ﬂuents in
the initial situation (DS0 ):

D = Σ ∪ Dss ∪ Dap ∪ Duna ∪ DS0

The foundational axiom of most import for this paper is
the induction axiom, which deﬁnes the set of all situations as
the least set containing S0 and closed under application of the
do function, as follows:

∀P . [P (S0) ∧ ∀s, a . (P (s) → P (do(a, s))) → ∀s . P (s)]

The fundamental importance of this axiom is described in
[Reiter, 1993]. Much research has focused on identifying
sentences of the situation calculus that can be proven with-
out this axiom, and thus require only ﬁrst-order logic. Our
work continues this tradition.

There is a distinguished predicate P oss(a, s) that indicates
when it is possible to perform an action in a given situation.
The set of action precondition axioms Dap contains one ax-
iom for each type of action A, of the general form:

∀s,

−→
x . [P oss(A(−→

x ), s) ≡ ΠA(−→

x , s)]

Here ΠA represents a uniform formula (see below) deﬁning
action possibility on a per-action basis.

It is often useful to introduce analogous predicates to de-
scribe different aspects of action performance. For example,
a predicate CantObs(agt, a, s) could indicate when an agent
will be unable to observe the occurrence of an action. Such
predicates are easily incorporated into a basic action theory
by axiomatizing them in Dap in the same manner as P oss.
We refer to these predicates in general as action description
predicates, and use the meta-variable α to represent an arbi-
trary such predicate.

The uniform formulae as deﬁned in [Pirri and Reiter, 1999]
can be thought of as properties of the state of the world.
They are basically logical combinations of ﬂuents referring
to a common situation term, which cannot mention action de-
scription predicates nor compare situation terms. We will use
the meta-variable φ to refer to an arbitrary uniform formula.
It is often useful to determine the truth of a property at
a given situation. The formula φ[s] represents the uniform
formula φ with all occurrences of its unique situation term
replaced by the situation s.

2.1 Ordering over Situations
Situations form a tree with S0 at the root and do construct-
ing child situations from parents. There is a basic ordering
relation (cid:2) deﬁned by the following foundational axioms:

∀s . ¬ (s (cid:2) S0)

∀s, s(cid:2), a . s (cid:2) do(a, s(cid:2)) ≡ s (cid:4) s(cid:2)

Where s (cid:4) s(cid:2) is the standard abbreviation of s (cid:2) s(cid:2) ∨ s = s(cid:2).
It is frequently useful to restrict the situations under consid-
eration to those possible in the real world, by deﬁning an or-
dering relation < over only these “executable” situations:

∀s . ¬ (s < S0)

∀s, s(cid:2), a . s < do(a, s(cid:2)) ≡ s ≤ s(cid:2) ∧ P oss(a, s(cid:2))

Many results of the situation calculus are derived relative to
the executable situations - for example, [Reiter, 1993] devel-
ops an induction principle for all situations where S0 ≤ s.
This notation is so useful that we propose a parametrization
of it: let α be an action description predicate specifying the
actions of interest, then deﬁne the “α-ordering” over situa-
tions as follows:

∀s . ¬ (s <α S0)

∀s, s(cid:2), a . s <α do(a, s(cid:2)) ≡ s ≤α s(cid:2) ∧ α(a, s(cid:2))

The standard ordering over executable situations is clearly
<P oss.
If s is thought of as the “current situation”, then
s <α s(cid:2) means that s(cid:2) is one potential future, and all actions
that will occur in that future satisfy α.

2.2 Effective Reasoning
Answering an arbitrary situation calculus query ψ involves, in
general, an entailment problem in second-order logic (SOL):

D |=SOL ψ

This can be problematic for efﬁcient automated reasoning.
Fortunately, there exist particular syntactic forms for which
some of the axioms in D are not required. In [Pirri and Re-
iter, 1999] the “∃s sentences” are deﬁned as those in which
every situation variable is in the scope of a positive existen-
tial quantiﬁer. They show that such sentences can always be
proven without the induction axiom (I) and hence are answer-
able by ﬁrst-order logical entailment (FOL):

D |=SOL ∃s ψ iﬀ D − {I} |=F OL ∃s ψ

Such queries can be approached with standard ﬁrst-order rea-
soning systems. To increase the efﬁciency of reasoning it is
desirable to eliminate further axioms from D, which [Pirri
and Reiter, 1999] show possible for several syntactic forms.
Axiom reduction is also the key idea behind the regression
operator, the principal tool for effective reasoning in the situ-
ation calculus [Reiter, 1991]. The regression operator RD is a
syntactic manipulation whose behavior can be summarized1

1The full behavior of RD is beyond the scope of this paper. Ex-
perienced readers please note that we use the single-step version of
the regression operator, as in [Lin and Reiter, 1994]. Since any for-
mula uniform in do(a, s) is by deﬁnition single-step regressable, the
development below omits the traditional qualiﬁcation that formulae
must be regressable.

IJCAI-07

1949

for our purposes as follows: given a formula φ uniform in
do(a, s), regression transforms it into a formula RD[φ] that
is uniform in s and is equivalent to φ under the theory of ac-
tion D:

D |= φ ≡ RD[φ]

Regression also replaces instances of the P oss predicate with
appropriate instantiations of the corresponding uniform for-
mula from the axioms in Dap, and other action description
predicates can easily be treated in the same way. In order to
regress such a predicate over an action variable one must as-
sume that there are only a ﬁnite number of action types, so
that it can be replaced with the disjunctive closure of its deﬁ-
nitional axioms. We assume this restriction throughout.

If φ refers to a situation that is rooted at S0, repeated appli-
cations of the regression operator (denoted by R∗
D) can trans-
form it into an equivalent formula uniform in the initial sit-
uation. The successor state and action precondition axioms
are “compiled into” the regressed formula, and so are not re-
quired for the reasoning task:

D |= φ iﬀ Duna ∪ DS0

|= R∗

D

[φ][S0]

The trade-off is that the length of R∗
[φ] may be exponen-
tial in the length of φ. In practice this is typically more than
compensated for by the reduction in the number of axioms re-
quired, and regression has proven a very effective technique.

D

2.3 Property Persistence

One important form of situation calculus query is to ask
whether a given property φ will hold in all future situations
of a given situation s, as well as at s itself:
D |= ∀s(cid:2) . s (cid:4) s(cid:2) → φ(s(cid:2))

More generally, one may wish to limit the futures considered
to those brought about by a certain class of actions α:

D |= ∀s(cid:2) . s ≤α s(cid:2) → φ[s(cid:2)]

In words this states “given that all subsequent actions satisfy
α, φ will remain true” or, more succinctly, “φ persists un-
der α”. We term queries of this form property persistence
queries, and they are involved in many useful reasoning tasks.
The following are a small selection:

Goal Impossibility: Given a goal G, establish that there is

no possible situation in which that goal is satisﬁed:

D |= ∀s . S0 ≤ s → ¬G(s)

Goal Futility: Given a goal G and situation s, establish
that the goal cannot be satisﬁed in any possible situation in
the future of s:

D |= ∀s(cid:2) . s ≤ s(cid:2) → ¬G(s(cid:2))

Note how this is different from goal impossibility: while the
agent may have initially been able to achieve its goal, the ac-
tions that have subsequently been performed have rendered
the goal unachievable. Agents would be well advised to avoid
such situations.

Checking State Constraints: This is a variant of goal im-

possibility - show that the constraint can never be violated.

Need for Cooperation: To establish that it is absolutely
necessary to cooperate with another agent, an agent must de-
termine persistence under actions performed by itself:

D |= ∀s(cid:2) . s ≤OwnAction s(cid:2) → ¬G[s(cid:2)]

Assuming that the action description predicate OwnAction
has been deﬁned to identify actions performed by the agent
in question, this states that no situation in the future of s in
which all actions were performed by that agent can satisfy G.
If this is the case, it will need to cooperate with another agent
in order to achieve its goal.

Knowledge under Partial Observability: In recent un-
published work we develop a new account of knowledge in
the situation calculus when not all actions are observable by
all agents. To facilitate reasoning in this formalism, agents
must be able to reason about what cannot be changed by ac-
tions that they cannot observe, a form of persistence query.

Due to the universal quantiﬁcation over situations, the
techniques for effective automated reasoning in Section 2.2
cannot be applied to persistence queries. This paper is de-
voted to developing of a complementary technique for han-
dling such queries.

2.4 Related Work
While there is a rich and diverse literature base for the sit-
uation calculus, there appears to have been little work deal-
ing with universally quantiﬁed queries. The work of [Reiter,
1993] shows how to handle such queries by hand using an ap-
propriate instantiation of the induction axiom, but makes no
mention of automating this reasoning.

Other work considering persistence focuses exclusively on
verifying state constraints. These are uniform formulae that
must hold in every possible situation, a highly specialized
form of persistence query. The work of [Lin and Reiter, 1994]
“compiles away” the induction axiom when verifying a state
constraint, by means of the following equivalence:

Σ ∪ Duna ∪ Dss |= φ[S0] → (∀s . S0 ≤ s → φ[s])

iﬀ

Duna |= ∀s, a . φ[s] ∧ RD[P oss(a, s)] → RD[φ[do(a, s)]]
Veriﬁcation of a state constraint can thus be reduced to rea-
soning about a universally quantiﬁed uniform formula using
only the unique names axioms, a comparatively straightfor-
ward reasoning task. This problem is also approached by
[Bertossi et al., 1996], who develop a system for automati-
cally verifying state constraints based on an induction theo-
rem prover.

However, there are many issues related to persistence that
are not addressed by such work, including: persistence at sit-
uations other than S0; action description predicates other than
P oss; how to combine notions of persistence and regression;
and determining what additional conditions may be necessary
to guarantee the persistence of φ. As our treatment of persis-
tence can provide a concrete basis for these considerations, it
is signiﬁcantly more general than existing work.

3 The Persistence Condition
For implementing persistence queries in practical systems,
we clearly need to transform the query into a form suitable

IJCAI-07

1950

for effective reasoning. Speciﬁcally, we will transform a per-
sistence query based at s into the evaluation of a uniform for-
mula at s, which can be done effectively using the regres-
sion operator. We need some transformation of a property
φ and action description predicate α into a uniform formula
PD[φ, α] that is true at precisely the situations in which φ per-
sists under α, given a particular action theory D. We call PD
the persistence condition of φ under α.
Deﬁnition 1. The persistence condition PD[φ, α] is a uni-
form formula that is the weakest precondition for the persis-
tence of φ under α, given a basic action theory D without the
initial situation axioms. That is:

|= ∀s . (PD[φ, α][s] ≡ ∀s(cid:2) . s ≤α s(cid:2) → φ[s(cid:2)])

D − DS0
Deﬁning PD to be independent of the initial world state
allows an agent to calculate it regardless of what (if anything)
is known about the actual state of the world. To see how PD
may be calculated, consider the weaker notion of a formula
persisting to depth n in a situation:

Deﬁnition 2. A uniform formula φ persists to depth 1 under
[φ, α] holds in s, as
α in situation s when the formula P 1
deﬁned by:

D

Proposition 2. For any basic action theory D, uniform for-
mula φ and action description predicate α:

D − DS0

|= ∀s . φ[s] → (∀s(cid:2) . s ≤α s(cid:2) → φ[s(cid:2)])

iﬀ

Duna |= ∀s, a . φ[s] ∧ RD[α(a, s)] → RD[φ[do(a, s)]]

Proof. A straightforward generalization of Lemma 5 in [Lin
and Reiter, 1994], utilizing Proposition 1.

Proposition 2 will be key in our algorithm for calculating
the persistence condition. It allows one to establish the result
“if φ holds in s, then φ persists in s” by checking entailment
of a uniform formula by the unique names axioms, a straight-
forward ﬁrst-order reasoning task.

Next we must formalize some basic relationships between

D, as follows:

PD and P n
Lemma 1. Given a basic action theory D, uniform formula
φ and action description predicate α, then for any n:

D − DS0

|= ∀s . [ ∀s(cid:2) . (s ≤α s(cid:2) → φ[s(cid:2)])

≡ ∀s(cid:2) . (s ≤α s(cid:2) → P n

D[φ, α][s(cid:2)]) ]

P 1

D

[φ, α][s] def= φ[s] ∧ ∀a . RD[α(a, s) → φ[do(a, s)]]

That is, φ persists under α iff P n

D

[φ, α] persists under α.

More generally, for any n ≥ 0, a uniform formula φ persists
[φ, α]
to depth n under α in situation s when the formula P n
holds in s, as deﬁned by:

D

Proof. By the deﬁnition of P n
D, any s(cid:2) that falsiﬁes the right-
hand side of this equivalence will also falsify the left-hand
side, and vice-versa.

P 0

D

[φ, α] def= φ

P n

D

[φ, α] def= P 1

D

[P n−1

D [φ, α], α]

Note that P 1

D is a literal encoding of the requirement “φ
holds in s and in all its direct successors”. Since α is an action
description predicate and φ is a uniform formula, the expres-
sion α(a, s) → φ[do(a, s)] can always be regressed and the
result will always be uniform in s. Successive applications of
P 1

D assert persistence to greater depths.
Intuitively, one would expect PD[φ, α] to be a ﬁxed-point
[φ, α], since PD[φ, α] implies persistence up to any
of P 1
depth. Such a ﬁxed-point can then be calculated using stan-
dard iterative approximation techniques. To show that this is
in fact the case we require a number of theoretical results,
presented below.

D

Lemma 2. Given a basic action theory D, uniform formula
φ and action description predicate α, then for any n:
[φ, α][s])

|= ∀s . (PD[φ, α][s] → P n

D − DS0

D

Proof. PD[φ, α] implies the persistence of φ by deﬁnition,
which implies P n

[φ, α] by Lemma 1.

D

D

[φ, α] implies P n+1

We are now equipped to prove the major theorem of this
[φ, α] is

[φ, α], then P n
paper: that if P n
D
equivalent to the persistence condition for φ under α.
Theorem 1. Given a basic action theory D, uniform formula
φ and action description predicate α, then for any n:
[φ, α][s]

[φ, α][s] → P n+1

Duna |= ∀s . P n

(1)

D

D

D

3.1 Formal Development
We begin by adapting two existing results involving induction
to operate with our generalized ≤α notation, and be based at
situations other than S0:

Proposition 1. For any action description predicate α, the
foundational axioms of the situation calculus entail the fol-
lowing induction principle:

∀W, s . W (s) ∧ [∀a, s(cid:2) . α(a, s(cid:2)) ∧ s ≤α s(cid:2)

∧W (s(cid:2)) → W (do(a, s(cid:2)))] → ∀s(cid:2) . s ≤α s(cid:2) → W (s(cid:2))

Proof. A trivial adaptation of theorem 1 in [Reiter, 1993].

D − Ds0

|= ∀s . P n

D

iﬀ
[φ, α][s] ≡ PD[φ, α][s]

(2)

Proof. For the if direction, we ﬁrst see by the deﬁnition of
P 1

D that equation (1) is equivalent to:

Duna |= ∀s, a . P n

D

[φ, α][s] ∧ RD[α(a, s)]

→ RD[P n

D

[φ, α][do(a, s)]]

which by Proposition 2 implies the persistence of P n
[φ, α]
under α. By Lemma 1 this implies the persistence of φ under
α, which in turn implies PD[φ, α], giving:

D

D − Ds0

|= ∀s . P n

D

[φ, α][s] → PD[φ, α][s]

IJCAI-07

1951

By Lemma 2 this implication is in fact an equivalence, yield-
ing equation (2) as required.

The only if direction is a straightforward reversal of this
reasoning: PD[φ, α] implies the persistence of φ, which im-
[φ, α], which implies (1) by Propo-
plies the persistence of P n
sition 2.

D

Since P n+1

D

[φ, α] → P n

[φ, α] as a ﬁxed-point of the P 1

[φ, α] by deﬁnition, equation (1)
D operator, as our

D

identiﬁes P n
initial intuition suggested.

D

3.2 Algorithm for the Persistence Condition
Since we can easily calculate P n
[φ, α] for any n, we have a
straightforward algorithm for determining PD[φ, α]: search
for an n such that

D

Duna |= ∀s .

[φ, α][s] → P n+1

D

(cid:2)
P n

D

(cid:3)
[φ, α][s]

[φ, α], we
Since we expect P n
should look for the smallest such n. Algorithm 1 presents an
iterative procedure for doing just that.

[φ, α] to be simpler than P n+1

D

D

Algorithm 1 Calculate PD[φ, α]

pn ⇐ φ
pn1 ⇐ P 1
while Duna (cid:14)|= ∀s . pn[s] → pn1[s] do

[pn, α]

D

pn ⇐ pn1
pn1 ⇐ P 1

[pn, α]

D

end while
return pn

Note that the calculation of P 1

[φ, α] is a straightforward
syntactic transformation and so requires no further treatment.

D

Correctness
If algorithm 1 terminates, it terminates returning a value of
pn for which equation (1) holds. By Theorem 1 this value of
pn is equivalent to the persistence condition for φ under α.
The algorithm therefore correctly calculates the persistence
condition.

Note that equation (1) holds when P n

[φ, α] is unsatisﬁable
for any situation, as it appears in the antecedent of the impli-
cation. The algorithm thus correctly returns an unsatisﬁable
condition (equivalent to f alse) when φ can never persist un-
der α.

D

Completeness
As Theorem 1 is an equivalence, the only source of incom-
pleteness will be failure to terminate. Algorithm 1 may fail to
terminate for two reasons: the loop condition may never be
satisﬁed, or the ﬁrst-order logical inference in the loop condi-
tion may be undecidable and fail to terminate.

The later indicates that the basic action theory D is unde-
cidable. While this is a concern, it affects more than just our
algorithm - any system implemented around such an action
theory will be incomplete. Thus, with respect to this source
of incompleteness, our algorithm is no more incomplete than
any larger system it would form a part of.

The former is of more direct consequence to our work, and
raises two questions: is the persistence condition guaranteed
to exist, and is it guaranteed to be reachable in a ﬁnite num-
ber of iterations? Since P 1
D is clearly monotone, the con-
structive proof of Tarski’s ﬁxed-point theorem [Cousot and
Cousot, 1979] guarantees the existence of a ﬁxed-point that
can be calculated via transﬁnite iteration, as performed by our
algorithm. Moreover, this will be the least ﬁxed-point greater
than φ, a satisfying conﬁrmation of correctness since the per-
sistence condition must be the weakest precondition for the
persistence of φ.

Unfortunately, there is no guarantee that this ﬁxed-point
can be reached via ﬁnite iteration, which is required for ter-
mination. Indeed, it is straightforward to construct a ﬂuent
for which the algorithm never terminates: consider a ﬂuent
F p(x, s) taking integers x, that is affected by a single action
that makes it false whenever F p(x + 1, s) is false. Letting α
be vacuously true, the sequence of iterations produced by our
algorithm would be:

P 1

D

[F p(x, s)] ≡ F p(x, s) ∧ F p(x + 1, s)

P 2

D

[F p(x, s)] ≡ F p(x, s) ∧ F p(x + 1, s) ∧ F p(x + 2, s)

P n

D

[F p(x, s)] ≡

...
i=n(cid:4)

i=0

F p(x + i, s)

P 1

The persistence condition in this case is PD[F p(x, s)] ≡
∀y . x ≤ y → F p(y, s), and while this is the limit of the iter-
ation it is clearly unachievable in any ﬁnite number of steps.
D operates over the set of equivalence classes of formulae
uniform in s, and the theory of ﬁxed-points requires that this
set be a well-founded partial order to guarantee termination
of an iterative approximation algorithm. There are certain
classes of basic action theory for which this well-foundedness
can be guaranteed. The most obvious is theories with ﬁnite
action and object domains, in which the set of equivalence
classes is ﬁnite. Another is the case where successor-state
axioms refer only to the direct arguments of their ﬂuents, in
which case repeated applications of P 1
D will pick out a subset
of the equivalence classes that refers to a ﬁnite number of
objects, giving the same guarantee.

In general, termination requires that repeated applications
of the successor-state axioms (via the regression operator) do
not construct inﬁnite chains. We are currently investigating
syntactic restrictions on successor state axioms that can en-
force this requirement, and have found it to be easily met
in practice. We are also investigating more advanced ﬁxed-
point algorithms that may give better efﬁciency and termina-
tion guarantees.

Effectiveness
Our algorithm replaces a single reasoning task based on the
full action theory D with a series of reasoning tasks based on
the unique names axioms Duna. Is this a worthwhile trade-
off in practice? The following points weigh strongly in favor
of our approach:

First and foremost, we avoid the need for the second-order
induction axiom. All the reasoning tasks can be performed

IJCAI-07

1952

using standard ﬁrst-order reasoning, for which there are many
high-quality automated provers. Second, the calculation of
PD only reasons based on the unique names axioms, which
as discussed is a comparatively straightforward task. Third,
PD[φ, α][s] is in a form amenable to regression, a standard
tool for effective reasoning in the situation calculus. Fourth,
the persistence condition for a given φ and α can be cached
and re-used for a series of related queries about different sit-
uations, a signiﬁcant gain in amortized efﬁciency. Finally, in
realistic domains we expect many properties to fail to persist
beyond a few situations into the future, meaning that our al-
gorithm will require few iterations in a large number of cases.
Of course, we also inherit the potential disadvantage of the
regression operator: the length of PD[φ, α] may be exponen-
tial in the length of φ. As with regression, our experience
thus far has been that this is more than compensated for by
the reduced number of axioms required for reasoning.

3.3 Applications
The persistence condition is readily applicable to the persis-
tence query problems given in Section 2.3. Since PD yields
a uniform formula, the techniques outlined in Section 2.2 can
be directly applied to the following transformed queries.

Goal Impossibility: Given a goal G, establish that there is

no possible situation in which that goal is satisﬁed:

D |= PD[¬G, P oss][S0]

The persistence condition of ¬G with respect to action possi-
bility allows goal impossibility to be checked easily.

Goal Futility: Given a goal G and situation s, establish
that the goal cannot be satisﬁed in any possible situation in
the future of s:

D |= PD[¬G, P oss][s]

Precisely the same formula is required for checking goal im-
possibility and goal futility. This highlights the advantage of
re-using the persistence condition at multiple situations. Our
approach makes it feasible for an agent to check for goal fu-
tility each time it considers performing an action, and avoid
situations that would make its goals unachievable.

Checking State Constraints: This can be handled as per

goal impossibility above. A state constraint φ must satisfy:

Duna |= φ ≡ PD[φ, P oss]

If this is not the case then PD[φ, P oss] indicates the addi-
tional conditions that are necessary to ensure that φ persists,
which may be useful in adjusting the action theory to accom-
modate the constraint.

Need for Cooperation: To establish that it is absolutely
necessary to cooperate with another agent, an agent must de-
termine persistence under actions performed by itself:

D |= PD[¬G, OwnAction][s]

Knowledge under Partial Observability: To know φ in
a world where actions may be unobservable, an agent must
know that φ will persist under any actions that it would be
unable to observe. This results in a regression rule for knowl-
edge of the form:

RD[Knows(φ, do(a, s))] =

Knows(RD[PD[φ, CantObs][do(a, s)]], s)

4 Conclusions

We have developed an algorithm that transforms persistence
queries, a very general and useful class of situation calculus
query, to a form that is amenable to standard techniques for
effective reasoning in the situation calculus. The algorithm is
based on iterative application of the standard regression oper-
ator, and uses only ﬁrst-order reasoning with a small number
of axioms. Our algorithm is shown to be correct, and com-
plete given some basic restrictions on the theory of action.

Our approach generalizes previous work on persistence in
several important ways. It can consider sequences of actions
satisfying a range of conditions, not just the standard ordering
over possibility, enabling us to treat problems such as need for
cooperation and knowledge under partial observability. It can
establish that properties persist in the future of an arbitrary
situation, not necessarily the initial situation, enabling us to
answer the question of goal futility. The results of calculating
the persistence condition can be cached, allowing for exam-
ple the goal futility question to be efﬁciently posed on a large
number of situations once the persistence condition has been
calculated. Finally, the fact that PD operates similarly to the
standard regression operator RD allows them to interact in
non-trivial ways, such as in the regression of knowledge for-
mulae under partial observability of actions.

As a result, we have signiﬁcantly increased the scope of
queries that can be effectively posed in practical systems built
on the situation calculus.

References
[Bertossi et al., 1996] Leopoldo E. Bertossi, Javier Pinto,
Pablo Saez, Deepak Kapur, and Mahadevan Subramaniam.
Automating proofs of integrity constraints in situation cal-
culus.
In International Syposium on Methodologies for
Intelligent Systems, pages 212–222, 1996.

[Cousot and Cousot, 1979] Patrick Cousot

and Radhia
Cousot. Constructive versions of Tarski’s ﬁxed point
theorems. Paciﬁc Journal of Maths., 82(1):43–57, 1979.

[Lin and Reiter, 1994] Fangzhen Lin and Ray Reiter. State
constraints revisited. Journal of Logic and Computation,
4(5):655–678, 1994.

[Pirri and Reiter, 1999] Fiora Pirri and Ray Reiter. Some
contributions to the metatheory of the situation calculus.
Journal of the ACM, 46(3):325–361, 1999.

[Reiter, 1991] Ray Reiter. The frame problem in situation
the calculus: a simple solution (sometimes) and a com-
pleteness result for goal regression. In Vladimir Lifschitz,
editor, Artiﬁcial intelligence and mathematical theory of
computation: papers in honor of John McCarthy, pages
359–380, San Diego, CA, USA, 1991. Academic Press
Professional, Inc.

[Reiter, 1993] Ray Reiter. Proving properties of states in
the situation calculus. Artiﬁcial Intelligence, 64:337–351,
1993.

IJCAI-07

1953

