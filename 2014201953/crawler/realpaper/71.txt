Proactive Algorithms for Scheduling with Probabilistic Durations(cid:3)

J. Christopher Beck

Department of Mechanical &

Industrial Engineering

University of Toronto, Canada

jcb@mie.utoronto.ca

Nic Wilson

Cork Constraint Computation Centre

Department of Computer Science
University College Cork, Ireland

n.wilson@4c.ucc.ie

Abstract

Proactive scheduling seeks to generate high quality
solutions despite execution time uncertainty. Build-
ing on work in [Beck and Wilson, 2004], we con-
duct an empirical study of a number of algorithms
for the job shop scheduling problem with proba-
bilistic durations. The main contributions of this
paper are:
the introduction and empirical analy-
sis of a novel constraint-based search technique
that can be applied beyond probabilistic scheduling
problems, the introduction and empirical analysis
of a number of deterministic (cid:2)ltering algorithms for
probabilistic job shop scheduling, and the identi(cid:2)-
cation of a number of problem characteristics that
contribute to algorithm performance.

1 Introduction
Classical models of scheduling assume all information is
known and static. When faced with uncertainty, proactive
scheduling techniques seek to incorporate models of the un-
certainty in the off-line problem solving and to build solu-
tions that can achieve a satisfactory level of performance at
execution time. [Beck and Wilson, 2004] addressed the prob-
lem of job shop scheduling with probabilistic durations with
two styles of algorithm both using Monte Carlo simulation to
evaluate the probabilistic makespan of solutions. This paper
builds on that work, making the following contributions: (i)
A novel constraint-based search technique is introduced that
performs a series of complete branch-and-bound searches on
highly constrained problem models. The models are gradu-
ally relaxed with the cost of the best solution model found in
the previous searches being used as an upper bound. Exper-
imental results show that the algorithm performs as well as
the existing branch-and-bound style of search on small prob-
lems and signi(cid:2)cantly out-performs it on larger problems. (ii)
A number of novel deterministic (cid:2)ltering algorithms are pre-
sented. On larger problems such algorithms out-perform the
other algorithms tested. Their performance is affected by the
following two factors: the quality of the deterministic solu-
tions found and the correlation between the deterministic and
(cid:3)This material is based upon works supported by the Science
Foundation Ireland under Grant No. 00/PI.1/C075 and by ILOG,
SA.

probabilistic makespan of solutions. (iii) It is demonstrated
that the method introduced by Beck & Wilson for the in-
corporation of uncertainty in deterministic problems can in-
crease the correlation between deterministic and probabilis-
tic makespan, providing an explanation for its strong perfor-
mance.

In the next section we brie(cid:3)y review previous work. The
six search algorithms investigated in this paper are de(cid:2)ned in
Section 3 and Section 4 presents our experiments and results.
In Section 5, we present our conclusions.

2 Background
The job shop scheduling problem (JSP) consists of a set A
of activities each with a positive integer-valued duration, di.
A is partitioned into jobs, and with each job is associated a
total ordering on that set of activities. Each activity speci-
(cid:2)es a resource on which it must execute without interruption.
No activities that require the same resource can overlap in
their execution. We represent this formally by a partition of
A into resource sets. A solution consists of a total ordering
on each resource set such that the union of the resource and
job orderings is an acyclic relation on A. The makespan of
a solution is the difference between the minimum start time
and the maximum end time of all activities. Finding a solu-
tion with minimum makespan is NP-hard [Garey and John-
son, 1979]. An independent probabilistic job shop schedul-
ing problem is a JSP where the duration di associated with
an activity Ai 2 A is a positive integer-valued random vari-
able. These random variables are fully independent. di has
expected value (cid:22)i = E[di] and variance (cid:27)2
i = Var[di].
The makespan make(s) of solution s is therefore also a ran-
dom variable. We (cid:2)x a degree of con(cid:2)dence p, e.g., we set
p = 0:95 in the experiments. The minimum probabilistic
makespan, D(s), of a solution s is the smallest value D such
that the probability that all jobs will (cid:2)nish before D is at least
p. That is, D(s) = minfD : Pr(make(s) (cid:20) D) (cid:21) pg. An
optimal probabilistic makespan is the minimum D(s) over all
solutions s.

Beck & Wilson introduce an analytical model and develop
two main results. First, it is demonstrated that Monte Carlo
simulation can be used to (cid:2)nd the probabilistic makespan
for a solution and to (cid:2)nd a lower bound on the probabilistic
makespan of a partial solution. Second, it is shown that a de-
terministic JSP instance can be constructed from a probabilis-

tic JSP instance by setting the duration di of each activity to
(cid:22)i+q(cid:27)i and that, for the appropriate choice of non-negative q,
the optimal makespan of the deterministic instance is a lower
bound on the optimal probabilistic makespan of the corre-
sponding probabilistic JSP. Three algorithms are de(cid:2)ned: a
branch-and-bound approach where Monte Carlo simulation is
used at each node to (cid:2)nd a lower bound (at internal nodes) or
an upper bound (at a leaf node) on the probabilistic makespan,
and two deterministic (cid:2)ltering algorithm consisting of using
either constraint-based search or tabu search to (cid:2)nd a series
of increasingly good deterministic solutions, each of which is
simulated. Empirical results indicated that the (cid:2)rst algorithm
was able to (cid:2)nd optimal solutions only for very small prob-
lems, that for medium-sized problems the constraint-based
(cid:2)ltering algorithm found the best solutions, and for the largest
problems the tabu-based (cid:2)ltering algorithm performed best.
Choosing q > 0 led to stronger performance of the (cid:2)lter-
ing algorithms. No empirically founded explanations were
provided to explain the differences in problem solving per-
formance.

3 Algorithms for Probabilistic JSP
In this section, we describe six algorithms for solving the
probabilistic job shop scheduling problem.

3.1 Approximately Complete Branch-and-Bound
We implemented a branch-and-bound algorithm identical to
that of Beck & Wilson except that we use stronger heuristics
that make decisions on the sequence of activities in each re-
source set (see Section 3.5). We refer to this algorithm as the
B&B-N as it performs Branch-and-Bound with simulation at
each Node.

Iterative Descending Bound Search

3.2
By setting activity durations based on a q value that ensures a
lower bound on the probabilistic makespan, we can use stan-
dard constraint propagation on the deterministic durations to
implicitly calculate a lower bound at each internal node. At
each leaf node, simulation is used as in B&B-N to (cid:2)nd the
probabilistic makespan. Rather than parameterize the algo-
rithm with a (cid:2)xed q value, we perform repeated tree searches
with a descending q value. Starting with a high q value,
we begin a tree search. When the (cid:2)rst leaf, e, is reached,
simulation is used to (cid:2)nd D(se).
It is likely that Dq(se),
the minimum makespan of se in the corresponding deter-
ministic problem, will be larger than D(se). Since we en-
force Dq(se) (cid:20) D(se), estimating D(se) through simulation
causes the search to backtrack to a interior node, i, very high
in the tree. At node i, Dq(Si) (cid:20) D(se): Si is the set of
solutions in the subtree below node i and Dq(Si) is a lower
bound on the deterministic makespan of those solutions based
on standard constraint propagation. With high q values, we
commonly observe that there are very few nodes that meet
this criterion and the search space is quickly exhausted. We
then decrement the q value (e.g., by 0.05) and start a new tree
search. Eventually, and often very quickly, we reach a q value
such that there exists a full solution where Dq(se) (cid:20) D(se).
The probabilistic makespan of the best solution that has been

B&B-DQ-L():
Returns the solution with lowest probabilistic makespan

1 (s(cid:3); D(cid:3))   (cid:2)ndFirstB&BSimLeaves(1; 0)
2 q   q0
3 while q (cid:21) 0 AND not timed-out do
4
5
6

(s, D)   (cid:2)ndOptB&BSimLeaves(D(cid:3); q)
if s 6= N IL then

s(cid:3)   s; D(cid:3)   D

end
q   q (cid:0) qdec

8 return s(cid:3)

7

end

Algorithm 1: B&B-DQ-L

found by any point in the overall search is used, as in B&B-N,
as an upper bound on subsequent search.

Algorithm 1 presents pseudocode for the basic algorithm.
We make use of two functions not de(cid:2)ned using pseu-
docode: (cid:2)ndFirstB&BSimLeaves(c, q) creates a JSP with
activity durations de(cid:2)ned based on the q value and con-
ducts a branch-and-bound search where Monte Carlo sim-
ulation is used for each leaf node and standard constraint
propagation is used at interior nodes. The (cid:2)rst solution
that is found whose probabilistic makespan is less than c
is returned. (cid:2)ndOptB&BSimLeaves(c, q) does the same as
(cid:2)ndFirstB&BSimLeaves(c, q) except the solution with lowest
probabilistic makespan is returned rather than the (cid:2)rst one.
If no solution is found, a NIL value is returned. Unless the
q value is low enough that the deterministic makespan is a
lower bound on the probabilistic makespan, this function does
not necessarily return the globally optimal solution. We (cid:2)nd a
starting solution with q = 0 to serve as an initial upper bound
on the probabilistic makespan. In practice, B&B-DQ-L is run
with a maximum CPU time. If q = 0 is reached within the
time limit, this algorithm is approximately complete.

We refer to this algorithm as B&B-DQ-L as it does a series
of Branch-and-Bound searches with Descending Q values and
with simulation is used at the Leaves of the tree.

3.3 Branch-and-Bound Filtering Algorithms
Preliminary experiments with the branch-and-bound (cid:2)ltering
algorithm presented by Beck & Wilson showed that a signi(cid:2)-
cant amount of simulation was being done early in the search
when the upper bound on the deterministic makespan was rel-
atively high. Such solutions would seem to have little chance
of being the optimal probabilistic solution as the deterministic
solution is very poor. We present two constraint-based (cid:2)lter-
ing algorithms that seek to avoid these wasted simulations.

Branch-and-Bound Timed Better Solution A simple
method is to spend a (cid:2)xed amount of CPU time, tinitial to (cid:2)nd
a solution, s(cid:3), with a low deterministic makespan Dinitial us-
ing a (cid:2)xed q value and constraint-based search. Then search
can be restarted using the same q value and using Dinitial as
an upper bound on the deterministic makespan. Whenever a
solution, s, is found such that Dq(s) (cid:20) Dinitial, a simulation
is run to evaluate the probabilistic makespan. The solution

B&B-TBS(q):
Returns the solution with lowest probabilistic makespan

B&B-I-BS(q):
Returns the solution with smallest probabilistic makespan

1 (s(cid:3); Dinitial)   (cid:2)ndOptB&B(1; q; tinitial)
2 D(cid:3)   1
3 while termination criteria unmet AND not timed-out do
4
5
6
7

(s; D)   (cid:2)ndNextB&B(Dinitial; q; tremaining)
D0   simulate(s)
if D0 < D(cid:3) then

s(cid:3)   s; D(cid:3)   D0

end

end

8 return s(cid:3)

Algorithm 2: B&B-TBS

7
8
9

10

with the lowest probabilistic makespan is returned when ei-
ther the entire tree has been searched or when the maximum
allowed CPU time has expired. Algorithm 2 contains pseu-
docode for this approach.

As above, we make use of a number of functions not de-
(cid:2)ned with pseudocode: (cid:2)ndOptB&B(c, q, t) creates a JSP
with activity durations de(cid:2)ned based on q and conducts a de-
terministic branch-and-bound search for up to t CPU seconds
using c as an upper bound on the makespan. When the search
tree is exhausted or the time-limit is reached, the best solution
found, together with its makespan, are returned. No simula-
tion is done. (cid:2)ndNextB&B(c, q, t) produces a sequence of
solutions (one solution each time it is called) whose deter-
ministic makespan is less than or equal to c. The problem is
de(cid:2)ned using the q value and t is the CPU time limit. The
solutions produced are the leaves of the B&B search tree in
the order encountered by the algorithm. The c value does not
change. Given enough CPU time, the algorithm will evalu-
ate the probabilistic makespan of all solutions whose deter-
ministic makespan is less than or equal to Dinitial. Finally,
simulate(s) runs Monte Carlo simulation on solution s and
the probabilistic makespan is returned.

The algorithm is called B&B-TBS for Branch-and-Bound
Timed Better Solution. The algorithm is not complete, as
there is no guarantee that the optimal probabilistic solution
will have a deterministic makespan less than Dinitial.

Branch-and-Bound Iterative Best Solution A more ex-
treme (cid:2)ltering algorithm (cid:2)rst (cid:2)nds an optimal deterministic
solution and uses it as a (cid:2)lter for choosing the solutions to
simulate. Using a (cid:2)xed q value, a solution with an optimal
deterministic makespan, D(cid:3)
q , is found and simulated. Then
we execute a series of iterations beginning with i = 0. For
each iteration, all solutions, se, with deterministic makespan
q (cid:2) (1 + i=100) are simulated and the one with
Dq(se) (cid:20) D(cid:3)
the lowest probabilistic makespan is returned.
If an opti-
mal deterministic solution cannot be found within the CPU
time limit, the best deterministic solution found is simulated
and returned (i.e., only one simulation is done). Algorithm 3
presents the pseudocode.

The algorithm is theoretically complete. When i is large
enough that the cost bound is greater than the deterministic
makespan of all activity permutations, they will all be sim-

1 (s(cid:3); Dinitial)   (cid:2)ndOptB&B(1; q; t0 (cid:0) 1)
2 D(cid:3)   simulate(s(cid:3))
3 i   0
4 while not timed-out do
5
6

while termination criteria unmet do

(s; Dq)   (cid:2)ndNextB&B(
Dinitial (cid:2) (1 + i=100); q; tremaining)
D   simulate(s)
if D < D(cid:3) then

s(cid:3)   s; D(cid:3)   D

end

end
i   i + 1

end

11 return s(cid:3)

Algorithm 3: B&B-I-BS

ulated. However, i would have to grow unreasonably large
and therefore we treat this algorithm as, practically, incom-
plete. We refer to this algorithm as B&B-I-BS for Branch-
and-Bound-Iterative-Best Solution.
3.4 Local Search Filtering Algorithms
We also experiment with two local search (cid:2)ltering algorithms
analogous to the constraint-based algorithms above except
that tabu search is used in place of constraint-based search.

Tabu Timed Better Solution For a (cid:2)xed q and for a (cid:2)xed
CPU time, tinitial, a solution with the lowest determinis-
tic makespan, Dinitial, possible is sought. Search is then
restarted and whenever a solution, s, is found that has a de-
terministic makespan Dq(s) (cid:20) Dinitial, simulation is used
to evaluate the probabilistic makespan. The solution with
the lowest probabilistic makespan is returned. The pseu-
docode for Tabu-TBS is the same as that for B&B-TBS
(Algorithm 2) with the following changes. The function
(cid:2)ndNextTabu(c; q; t) replaces (cid:2)ndNextB&B(c; q; t); it pro-
duces a sequence of solutions whose deterministic makespan
is less than c. The (cid:2)ndBestTabu(c; q; t) function replaces
(cid:2)ndOptB&B(c; q; t); tabu search is run for up to t CPU sec-
onds and the solution with the lowest deterministic makespan
that is less than c is returned. We call this algorithm Tabu-TBS
for Tabu-Timed Better Solution.

Tabu Iterative Best Solution The core tabu search imple-
mentation does not necessarily use the entire CPU time. We
can therefore create an iterative tabu-based solver for the
probabilistic JSP similar to B&B-I-BS. In the (cid:2)rst phase,
using the overall time limit less one second, tabu search is
used to (cid:2)nd a good deterministic solution, based on a (cid:2)xed q
value. That solution is then simulated. Any remaining time
is spent generating solutions with a deterministic makespan
within a (cid:2)xed percentage of the initial solution’s determin-
istic makespan. As with B&B-I-BS, iterations are run with
increasing i value starting with i = 0. In each iteration, solu-
tions found by the tabu search whose deterministic makespan

are within 1 + i=100 of the initial deterministic makespan
are simulated. The solution with the lowest probabilistic
makespan is returned. The algorithm is termed Tabu-I-BS
for Tabu-Iterative-Best Search. The pseudocode for this al-
gorithm is the same as that for B&B-I-BS (Algorithm 3) with
the same substitutions that were made for Tabu-TBS.
3.5 Core Algorithm Details
The branch-and-bound algorithms described use texture-
based heuristics [Beck and Fox, 2000] to decide on the the
pair of activities to sequence and which sequence to try (cid:2)rst.
When constraint propagation is used (i.e., all B&B algorithms
except B&B-N), we use temporal propagation, timetables
[Le Pape et al., 1994], edge-(cid:2)nder [Nuijten, 1994], and the
balance constraint [Laborie, 2003].

The tabu search is the same one used by Beck & Wilson:

the TSAB algorithm of [Nowicki and Smutnicki, 1996].

4 Empirical Investigations
Our empirical investigations aim to evaluate and investigate
the performance of the algorithms. In particular, we are inter-
ested in algorithm scaling with problem size and uncertainty
level and with the usefulness of representing uncertainty in-
formation using q values.
4.1 Experimental Details
We use four sets of probabilistic JSPs of size f4(cid:2)4; 6(cid:2)6; 10(cid:2)
10; 20 (cid:2) 20g with three uncertainty levels uj 2 f0:1; 0:5; 1g.
A deterministic problem is generated using an existing gen-
erator [Watson et al., 2002] with integer durations drawn uni-
formly from the interval [1, 99]. Three probabilistic instances
are then produced by setting the mean durations (cid:22)i to be the
deterministic durations and by uniformly drawing the stan-
dard deviation (cid:27)i from the interval [0; uj(cid:22)i]. The distribution
of each duration is approximately normal. For each problem
size, we generate 10 deterministic problems which are trans-
formed into 30 probabilistic instances.

Given the stochastic nature of the simulation and the tabu
search algorithm, each algorithm is run 10 times on each
problem instance with different random seeds. Each run has a
time limit of 600 CPU seconds. Each Monte Carlo simulation
uses 1000 trials. For B&B-TBS and Tabu-TBS, tinitial is 60
CPU seconds.

For the heuristic techniques, a deterministic duration is as-
signed to each of the activities based on the q value. We ex-
periment with the same four q values used by Beck & Wilson
as displayed in Table 1. The B&B-DQ-L algorithm requires
an initial value of q, q0, and a decrement, qdec. For all except
the largest problems, we used q0 = 1:25 and qdec = 0:05.
Preliminary experiments with the 20 (cid:2) 20 problems indicated
that q0 = 1:25 resulted in long runs with no solutions due to
a large search space with few if any solutions. To avoid such
runs, we used q0 = 0:9, for which solutions could be found.
The probabilistic makespans are based on con(cid:2)dence level
p = 0:95. Our primary evaluation criterion is the mean
normalized probabilistic makespan (MNPM) that each algo-
rithm achieves: MNPM(a; L) = 1
Dlb(l) . L is a
set of problem instances, D(a; l) is the mean probabilistic

jLj Pl2L

D(a;l)

q0

q1

q2

q3

0

Bp2n

q1 +q3

2

Bpn

pAverageAi 2(cid:25) (cid:27)2
AverageAi 2(cid:25)

(cid:27)i

i

Table 1: The q-values used, following Beck & Wilson. n is
the number of jobs and B = 1:645.

makespan found by algorithm a on l over 10 runs, Dlb(l) is
the lower bound on the probabilistic makespan for l. For all
problems except 20 (cid:2) 20, the Dlb is found by solving the de-
terministic problems to optimality using the q1 durations (see
Section 3 of [Beck and Wilson, 2004]). For the 20 (cid:2) 20 prob-
lems, the optimal solutions could not be found and so the Dlb
values represent the best deterministic solutions found. These
values, therefore, are not a true lower bound.

The hardware used for the experiments is a 1.8GHz Pen-
tium 4 with 512 M of main memory running Linux RedHat 9.
All algorithms were implemented using ILOG Scheduler 5.3.

4.2 Results
Table 2 presents the results of our experiment. Each cell is
the mean over 10 independent runs of 10 problems. The ob-
served mean standard deviations for each cell are small: the
maximum over all cells is less than 10.3% of the correspond-
ing mean makespan, while the mean over all cells is less than
0.8%. We did not observe a large difference among the q val-
ues provided q > 0 and therefore present the results for q2.

Problem

Size

4 (cid:2) 4

6 (cid:2) 6

10 (cid:2) 10

20 (cid:2) 20y

Unc.
Level
0.1
0.5
1
0.1
0.5
1
0.1
0.5
1
0.1
0.5
1

B&B Complete
DQ-L
N
1.023*
1.049*
1.129
1.021
1.073
1.170
1.028
1.115
1.234
1.142
1.233
1.388

1.027*
1.060*
1.151*
1.034
1.113
1.226
1.185
1.241
1.346
1.256
1.326
1.482

Algorithms
B&B Heuristic
I-BS
TBS
1.026
1.026
1.059
1.064
1.149
1.154
1.022
1.022
1.083
1.077
1.174
1.178
1.024
1.024
1.101
1.101
1.215
1.215
1.071
1.077
1.177
1.181
1.338
1.334

tabu

I-BS
1.023
1.046
1.128
1.023
1.074
1.168
1.028
1.112
1.223
1.027
1.137
1.307

TBS
1.027
1.061
1.150
1.025
1.089
1.182
1.035
1.121
1.244
1.029
1.136
1.297

Table 2: The mean normalized probabilistic makespans for
each algorithm. ‘*’ indicates a set of runs for which we have,
with high con(cid:2)dence, found close-to-optimal makespans. ‘y’
indicates problem sets for which normalization was done with
approximate lower bounds. The lowest MNPM found for
each problem set are shown in bold.

For the 4 (cid:2) 4 problems, a number of algorithms (cid:2)nd lower
mean probabilistic makespans than B&B-N despite the fact
that B&B-N terminates before the limit on CPU time and
therefore (cid:2)nds approximately optimal solutions. This is an
artifact resulting from algorithms that simulate the same so-
lution multiple times.
In B&B-N, a particular solution is
only simulated once. In other algorithms, the same solution
may be simulated multiple times leading to a bias to lower
probabilistic makespan values. Based on the theoretic model
of Beck & Wilson, these values still correspond to approxi-
mately optimal solutions.

4.3 Analysis
Overall the empirical results agree with those presented by
Beck & Wilson. Here, we will focus on investigations of
B&B-DQ-L and of the behavior of the heuristic algorithms.
Branch-and-Bound Descending-Q Leaves
B&B-DQ-L out-performs B&B-N across all problem sets
even when it is not able to reach q = 0. As an indication of
the number of iterations, the mean minimum values q for each
problem size are: 4 (cid:2) 4 : 0:007, 6 (cid:2) 6 : 0:56, 10 (cid:2) 10 : 1:00,
20 (cid:2) 20 : 0:9.

For B&B-DQ-L, the deterministic durations de(cid:2)ned by the
q value serve to guide and prune the search for each iteration
and, therefore, as with the heuristic algorithms (see below),
the search is heuristically guided to the extent that solutions
with low deterministic makespans also have low probabilis-
tic makespans. However, the characteristics of the solutions
found by the search are unclear. Ideally, we would like the
search with high q to (cid:2)nd solutions with very good probabilis-
tic makespans both because we wish to (cid:2)nd good solutions
quickly and because the probabilistic makespan values are
used to prune subsequent search. Analysis indicates that the
(cid:2)rst solution found by B&B-DQ-L is consistently better than
the (cid:2)rst solution found by B&B-N and for the larger problems
(10 (cid:2) 10 and 20 (cid:2) 20) the relative increase in solution quality
over subsequent iterations is greater for B&B-DQ-L.
Heuristic Algorithms
To investigate the performance of the heuristic algorithms,
we look at the performance differences coming from using
the q values, and the extent to which the performance of the
heuristic algorithms depends on two factors: their ability to
(cid:2)nd good deterministic solutions and the underlying correla-
tion between deterministic and probabilistic makespans in the
experimental problems.

The Effect of the q Values Using a non-zero q value almost
always results in better performance. This appears to be par-
ticularly true when either the uncertainty or the problem size
increases. Table 3 shows the difference between mean nor-
malized probabilistic makespan when using q0 and q2. On a
few problem sets, negative values indicate that the runs with
q0 deliver a better mean solution. However, by far the ma-
jority of the values are greater than 0 and their magnitude
increases with both uncertainty and problem size, indicating
increasingly good relative performance on the q2 problems.
We show below that one explanation for this performance is
that problem instances with q > 0 have a greater correlation
between deterministic and probabilistic makespans.

Finding Good Deterministic Makespans We hypothesize
that the performance of the heuristic techniques (and B&B-
DQ-L) is partially dependent upon the ability to (cid:2)nd solu-
tions with low deterministic makespans. We looked at two
measures of the performance of B&B-I-BS and Tabu-I-BS:
the quality of the best deterministic solutions found and the
number of iterations. Because B&B-I-BS performs system-
atic search of all deterministic solutions with makespan below
a given threshold, we hypothesize that on problem sets where

Problem

Size

4 (cid:2) 4

6 (cid:2) 6

10 (cid:2) 10

20 (cid:2) 20y

Unc.
Level
0.1
0.5
1
0.1
0.5
1
0.1
0.5
1
0.1
0.5
1

B&B

Tabu

TBS

0

0.001
0.021
0.001
0.005
0.041
-0.001
0.006
0.017
0.011
0.012
0.029

I-BS

0

0.001
0.017
0.001
0.004
0.009
0.002
0.002
0.009
0.015
0.028
0.032

TBS
0.001

0

0.02
0.002
-0.002
0.027

0

0.004
0.015
0.009
0.010
0.025

I-BS

0

0.001
-0.001

0
0

0.001

0

0.004
0.016
0.010
0.005
0.030

Table 3: The difference between the mean normalized proba-
bilistic makespans for runs using q0 and using q2. The higher
the value, the more the q2 runs out-performed the q0 runs.

it outperforms Tabu-I-BS, it will also have found better de-
terministic solutions and/or be able to systematically search
solutions up to a higher threshold. In contrast, for problem
sets where Tabu-I-BS outperforms B&B-I-BS, it will be due
to (cid:2)nding better deterministic solutions.

Dq (a;l)

jLj Pl2L

Table 4 presents data using q = q2. The mean normalized
deterministic makespan (MNDM) is the calculated as follows:
MNDM(a; L) = 1
Dq;min(l;B&B(cid:0)I(cid:0)BS). The nota-
tion is as above with the addition of Dq;min(l; B&B-I-BS),
the lowest deterministic makespan found by the B&B-I-BS
algorithm over all runs on problem l. MNDM, therefore, pro-
vides a relative measure of the mean deterministic makespans
from the two algorithms: the higher the value, the worse is the
average makespan found relative to B&B-I-BS. The second
measure (Iters) is the mean number of iterations performed
by each algorithm.

Problem

Size

4 (cid:2) 4

6 (cid:2) 6

10 (cid:2) 10

20 (cid:2) 20

Tabu-I-BS

B&B-I-BS

Unc.
Level MNDM Iters MNDM Iters
0.1
76
78
0.5
83
1
24
0.1
31
0.5
1
21
5
0.1
5
0.5
5
1
0.1
0
0
0.5
1
0

1.000
1.000
1.007
1.000
1.001
1.000
1.002
1.004
1.004
1.002
0.998
1.002

1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.045
1.041
1.037

100
100
100
10
10
11
1
1
1
0
0
0

Table 4: The mean normalized deterministic makespan
(MNDM) and number of iterations (Iters) for B&B-I-BS and
Tabu-I-BS.

Table 4 is consistent with our hypotheses. For those prob-
lems sets with large performance differences (i.e., 10 (cid:2) 10
and 20 (cid:2) 20) in probabilistic makespan, the better performing
algorithm does (cid:2)nd better deterministic makespans.

The Correlation Between Deterministic and Probabilistic
Makespan The explanatory power of an algorithm’s ability
to (cid:2)nd good deterministic makespans is, by itself, insuf(cid:2)cient
unless there is a correlation between the good deterministic
and good probabilistic makespans. It is reasonable to expect
that the level of uncertainty has an impact on any correlation:
at low uncertainty, the variations in duration are small, so we
can expect the probabilistic makespan to be relatively close
to the deterministic makespan. When the uncertainty level is
high, the distribution of probabilistic makespans for a single
solution will be wider, resulting in a lower correlation. We
hypothesize that this impact of uncertainty level contributes
to the observed performance degradation (see Table 2) of the
heuristic techniques with higher uncertainty levels.

We generated 100 new 10 (cid:2) 10 deterministic JSP problem
instances with the same generator and parameters used above.
The standard deviation for the duration of each activity in the
100 instances were generated independently for each of (cid:2)ve
uncertainty levels uj 2 f0:1; 0:5; 1; 2; 3g resulting in a total
of 500 problem instances. For each instance and each of the
four q values above, we randomly generated and simulated
100 deterministic solutions. Using R [R Development Core
Team, 2004], we measured the correlation coef(cid:2)cient, r, for
each problem set.

Unc. Level

0.1
0.5
1
2
3

q0

0.9990
0.9767
0.9176
0.8240
0.7381

q1

0.9996
0.9912
0.9740
0.9451
0.9362

q2

0.9996
0.9917
0.9751
0.9507
0.9418

q3

0.9995
0.9909
0.9736
0.9517
0.9423

Table 5: The correlation coef(cid:2)cient comparing deterministic
and probabilistic makespans for a set of 10 (cid:2) 10 probabilis-
tic JSPs. Each cell represents the correlation coef(cid:2)cient for
10000 deterministic, probabilistic pairs.

Table 5 supports our hypothesis. As the uncertainty level
increases, the correlation between the deterministic makespan
and corresponding probabilistic makespan lessens.
The
strength of the correlation is somewhat surprising: even for
the highest uncertainty level, r is more than 0:94 for q2 and
q3. This suggests that the heuristic algorithms can be suc-
cessfully applied to problem with higher uncertainty levels
provided the appropriate q value can be found.

The correlation results in Table 5 also provide an explana-
tion for the effect of the q values: they increase the correlation
between deterministic and probabilistic makespans.

5 Conclusion
In this paper, we presented and conducted empirical analy-
sis of a number of algorithms to proactively solve the job
shop scheduling problem with probabilistic durations. Our
empirical studies have demonstrated that a novel algorithm,
B&B-DQ-L, based on iteratively reducing a parameter that
determines the validity of the lower bound results in equal
performance on small problems and much better performance
on larger problems when compared to the previous branch-
and-bound technique. However, highest performance was ob-

served in heuristic algorithms based on using the determin-
istic makespan to (cid:2)lter the solutions which are to be simu-
lated. It was argued, using detailed analysis of the experi-
mental data and results from an ancillary experiment, that the
performance of these algorithms is affected by their ability to
(cid:2)nd good deterministic makespans and the correlation in the
problems between the quality of deterministic and probabilis-
tic makespans. The correlation data on problems with higher
uncertainty suggest that such algorithms may scale well to
such problems. Central to the success of the heuristic al-
gorithms was the use of a q value that governs the extent
to which uncertainty (i.e., the variance) was represented in
the durations of activities in deterministic problems. It was
shown that such an incorporation of uncertainty data leads to
a stronger correlation between deterministic and probabilis-
tic makespans, and suggests a corresponding ability to (cid:2)nd
better probabilistic makespans.

References
[Beck and Fox, 2000] J. C. Beck and M. S. Fox. Dy-
namic problem structure analysis as a basis for constraint-
directed scheduling heuristics.
Arti(cid:2)cial Intelligence,
117(1):31(cid:150)81, 2000.

[Beck and Wilson, 2004] J.C. Beck and N. Wilson. Job shop
scheduling with probabilistic durations.
In Proceedings
of the Sixteenth European Conference on Arti(cid:2)cial Intelli-
gence (ECAI04), pages 652(cid:150)656, 2004.

[Garey and Johnson, 1979] M. R. Garey and D. S. Johnson.
Computers and Intractability: A Guide to the Theory of
NP-Completeness. W.H. Freeman and Company, New
York, 1979.

[Laborie, 2003] P. Laborie. Algorithms for propagating re-
source constraints in AI planning and scheduling: Exist-
ing approaches and new results. Arti(cid:2)cial Intelligence,
143:151(cid:150)188, January 2003.
Le

Couronn·e,
D. Vergamini, and V. Gosselin. Time-versus-capacity
compromises in project scheduling. In Proceedings of the
Thirteenth Workshop of the UK Planning Special Interest
Group, 1994.

[Le Pape et al., 1994] C.

Pape,

P.

[Nowicki and Smutnicki, 1996] E. Nowicki and C. Smut-
nicki. A fast taboo search algorithm for the job shop prob-
lem. Management Science, 42(6):797(cid:150)813, 1996.

[Nuijten, 1994] W. P. M. Nuijten. Time and resource con-
strained scheduling: a constraint satisfaction approach.
PhD thesis, Department of Mathematics and Computing
Science, Eindhoven University of Technology, 1994.

[R Development Core Team, 2004] R Development Core
Team. R: A language and environment for statistical
computing.
R Foundation for Statistical Computing,
Vienna, Austria, 2004. ISBN 3-900051-07-0.

[Watson et al., 2002] J.-P. Watson, L. Barbulescu, L.D.
Whitley, and A.E. Howe. Contrasting structured and ran-
dom permutation (cid:3)ow-shop scheduling problems: search-
space topology and algorithm performance.
INFORMS
Journal on Computing, 14(1), 2002.

