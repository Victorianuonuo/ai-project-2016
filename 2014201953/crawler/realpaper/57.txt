Parameterized Compilability

Hubie Chen

Departament de Tecnologia
Universitat Pompeu Fabra

Barcelona, Spain

hubie.chen@upf.edu

Abstract

Compilability is a measure of how effectively com-
pilation (or preprocessing) can be applied to knowl-
edge bases speciﬁed in a particular knowledge rep-
resentation formalism; the aim of compilation is
to allow for efﬁcient, on-line query processing. A
theory of compilability has been established for or-
ganizing knowledge representation formalisms ac-
cording to a scheme of “compilability classes”,
and bears strong analogies to the classical theory
of complexity, which permits the organization of
computational problems according to complexity
classes. We develop a novel theory of compilabil-
ity, called parameterized compilability, which in-
corporates the notion of parameterization as used in
parameterized complexity and permits for reﬁned
analysis of compilability.

1 Introduction
Compilability. Many computational reasoning problems
involve deciding whether or not a query is entailed by a
knowledge base (or database). Such reasoning problems are
often computationally intractable. A methodology for cop-
ing with this intractability is compilation (also called prepro-
cessing), which involves translating a knowledge base into a
form that allows for more efﬁcient query processing. Compi-
lation is appropriate for knowledge bases that remain stable
over time and will be queried numerous times, even if the
compilation itself cannot be performed efﬁciently, since the
cost of the compilation will be amortized by the speed-up in
query processing. Although recent years have seen many in-
teresting results on compilation, the basic idea of simplifying
a sequence of computations by preprocessing a set of useful
values is as old as mathematics, as discussed in [Cadoli et al.,
2002].

A systematic theory. A number of results in the nineties
demonstrated non-compilability results, which show, for in-
stance, that the knowledge bases of a particular knowledge
representation formalism are not compilable to those of an-
other formalism in which query processing can be performed
in polynomial time. The initial results of this type, including

[Cadoli et al., 1996; 1997; 1999; Gogic et al., 1995], were
based on ad hoc proofs that did not explicitly use a uniﬁed
proof technique.

In [Cadoli et al., 2002], a robust theory of compilability
was developed that made it possible to systematically orga-
nize knowledge representation formalisms according to their
compilability, much in the way that classical complexity the-
ory made it possible to systematically organize languages
according to their (in)tractability.
In particular, the theory
of compilability provides a way to deﬁne, for every clas-
sical complexity class C, an analogous compilability class
comp-C; the theory also provides a notion of reduction for
use with the compilability classes comp-C. The compilabil-
ity class comp-P, which is the analog of P (those languages
decidable in polynomial time), contains those formalisms that
are compilable to a second formalism in which query pro-
cessing can be performed in polynomial time. In saying that
a formalism is compilable to a second formalism, we mean
(roughly) that for every knowledge base x of the ﬁrst formal-
ism, there is a knowledge base f (x) in the second formal-
ism having the same answers to queries as x and such that
the size of f (x) is always polynomial in the size of x. This
“polynomial size” requirement models the intuition that com-
pilation is only useful if it does not greatly increase the size
of a knowledge base.

Demonstration that a formalism is in comp-P is a pos-
itive compilation result, analogous to demonstration that a
language is in P, a positive tractability result. Likewise,
demonstration that a formalism is comp-NP-hard is a neg-
ative compilation result and implies that the formalism is
not in comp-P (under a complexity-theoretic assumption),
just as demonstration that a language is NP-hard implies that
the language is not in P (under the standard assumption that
P 6= NP).

First in [Cadoli et al., 2002; 2000] and later in other papers
including [Liberatore, 1997; Liberatore and Schaerf, 2000;
Liberatore, 2000; 2001],
the theory of compilability pre-
sented in [Cadoli et al., 2002] was applied successfully to
classify knowledge representation formalisms that have ap-
peared in the artiﬁcial intelligence literature. In particular, a
multitude of formalisms, including propositional logic, cir-
cumscription, and default logic, have been demonstrated to
be contained in comp-P or complete for the analog comp-C
of a standard complexity class C. The downside of these

classiﬁcation results is that many of them are negative, show-
ing that a formalism is complete for the compilability ver-
sion of an intractable complexity class, such as comp-NP or
comp-co-NP.

Parameterized complexity. The abundance of negative
compilability results mirrors a state of affairs in complexity
theory: although many problems of interest can be classiﬁed
according to the developed scheme of complexity classes (P,
NP, co-NP, etc.), there is an abundance of negative results
that show completeness or hardness for classes believed to
be strictly larger than P. Because such generally intractable
problems do need to be dealt with in practice, a number of
theoretical frameworks have been developed to provide a ﬁner
analysis of hard problems than that offered by standard com-
plexity theory. Examples of such frameworks include the the-
ory of approximation algorithms and average-case analysis.
A relatively recent alternative framework is parameterized
complexity [Downey and Fellows, 1999b].

Parameterized complexity is a theory that, as with classical
complexity theory and compilability theory, provides classes
and a notion of reduction for categorizing objects. In the case
of parameterized complexity, the objects categorized are pa-
rameterized languages: languages with instances consisting
of two parts, a main part and a parameter. Many languages
that have been classically studied can be viewed naturally as
parameterized languages. For example, each instance of the
VERTEX COVER problem can be viewed as consisting of a
graph G as the main part, and a natural number k as the pa-
rameter; the question is to decide whether or not the graph
G has a vertex cover of size at most k. Similarly, the INDE-
PENDENT SET problem may be viewed as a parameterized
language: an instance is again a graph G paired with a natu-
ral number k, and the question is to decide whether or not the
graph G has an independent set of size at least k.

The parameterized ﬂavor of tractability is called ﬁxed-
parameter tractability; formally, a parameterized language is
ﬁxed-parameter tractable (or, in the class FPT) if there exists
a constant c such that for every k, instances with main part of
size n and parameter k can be solved in time O(nc). As an ex-
ample, VERTEX COVER can be solved in time O(rk k2 +kn),
where r is a constant, k is the parameter, and n is the size
of the main part; consequently, for any ﬁxed k, instances
of VERTEX COVER with main part of size n and parame-
ter k can be solved in time O(n), and so VERTEX COVER
is considered to be ﬁxed-parameter tractable. Because the
running time of ﬁxed-parameter tractable languages exhibits
a restricted form of dependence on the parameter, such lan-
guages are often solvable in practice when the parameter falls
into a limited range. (In fact, one can see from the given time
bound for VERTEX COVER that this problem can be solved in
polynomial time when the parameter k is O(log n).) On the
other hand, INDEPENDENT SET is believed to require time
where the main part exhibits an exponential dependence on
the parameter – that is, a time of form similar to (cid:10)(nk). In-
deed, INDEPENDENT SET is complete for a parameterized
complexity class believed to properly contain FPT, and ac-
cordingly is believed to be outside of FPT.

Viewed classically, these two example languages are both
NP-complete, and hence demonstrate that parameterized
complexity is somewhat orthogonal to classical complexity;
moreover, the example of VERTEX COVER indicates that pa-
rameterized complexity can provide tractability results where
classical complexity does not.
Indeed, the allowance of a
non-polynomial dependence on the parameter of an input in-
stance in ﬁxed-parameter tractability permits the use of al-
gorithmic ideas not utilized in proving standard polynomial-
time tractability results, and the ﬁeld of parameterized com-
plexity has developed a rich and mathematically deep suite of
algorithmic techniques.

Parameterized compilability. The contribution of this pa-
per is parameterized compilability, a new theory of compil-
ability incorporating the notion of parameterization as used
in parameterized complexity. Our theory provides a novel
set of concepts for proving compilability results, allowing
the use of the sophisticated toolkit that has been developed
for proving ﬁxed-parameter tractability and intractability re-
sults, and provides an avenue for reﬁning the many negative
non-compilability results that have been proved using the es-
tablished theory of compilability. As articulated in [Downey
et al., 1999], one beneﬁt of using a parameterized notion of
computational tractability is that it becomes possible to en-
gage in an extended dialogue with a single problem, by the
investigation of a variety of parameters. We thus provide a
theoretical framework in which we anticipate that the formu-
lation and exploration of interesting parameters in the context
of parameterized compilability will lead to reﬁned analysis of
compilability results.

The results in this paper are as follows. For every parame-
terized complexity class C, we deﬁne a compilability variant
par-comp-C. We also deﬁne a notion of reduction for use
with the par-comp-C classes, and demonstrate its robustness
– in particular, that it is transitive and compatible (in a formal
sense) with the classes par-comp-C. We also develop a gen-
eral method for demonstrating hardness of a formalism for
a class par-comp-C, and study the structure of the classes
par-comp-C, relating this structure directly to the structure
of non-uniform versions of parameterized complexity classes
C.

2 Preliminaries
While we have attempted to make this paper as self-contained
as possible, some familiarity with the basic notions of com-
plexity theory (including non-uniform complexity classes),
parameterized complexity, and compilability theory will be
helpful; we name [Balc´azar et al., 1995], [Downey and Fel-
lows, 1999b], and [Cadoli et al., 2002] as references for
these topics, respectively. We also recommend the surveys
[Downey and Fellows, 1999a; Downey et al., 1999] on pa-
rameterized complexity.

2.1 Deﬁnitions and Notation
Strings. We assume (cid:6) to be a ﬁxed ﬁnite alphabet that is
used to form strings. The length of a string x is denoted
by jxj. We will at times assume that pairs of strings (that

is, elements of (cid:6)(cid:3) (cid:2) (cid:6)(cid:3)) are represented as strings (that is,
elements of (cid:6)(cid:3)) via a pairing function h(cid:1); (cid:1)i. We make stan-
dard assumptions about this pairing function, namely, that the
length of hx; yi is linear in jxj + jyj; hx; yi can be computed
in time polynomial in jxj + jyj; there are polynomial-time
computable projection functions (cid:25)1; (cid:25)2 : (cid:6)(cid:3) ! (cid:6)(cid:3) such
that (cid:25)1(hx; yi) = x and (cid:25)2(hx; yi) = y; and h(cid:1); (cid:1)i is length-
monotone, that is, if jyj (cid:20) jzj then jhx; yij (cid:20) jhx; zij and
jhy; xij (cid:20) jhz; xij. We also assume that there is a tripling
function h(cid:1); (cid:1); (cid:1)i for representing triples of strings as single
strings, for which similar assumptions hold.

Functions. As usual, we consider a function p : N ! N
to be a polynomial if there exists a constant c 2 N such that
p(n) is O(nc). A function p : N (cid:2) (cid:6)(cid:3) ! N is a param-
eterized polynomial if there exists a constant c 2 N and a
function h : (cid:6)(cid:3) ! N such that for all (n; k) 2 N (cid:2) (cid:6)(cid:3),
p(n; k) (cid:20) h(k)(n + 1)c. In other words, p : N (cid:2) (cid:6)(cid:3) ! N is
a parameterized polynomial if there exists a constant c 2 N
such that for each k 2 (cid:6)(cid:3), the function pk : N ! N deﬁned
by pk(n) = p(n; k) is O(nc).

A function f : (cid:6)(cid:3) ! (cid:6)(cid:3) is polynomial-size if there ex-
ists a polynomial p : N ! N such that for all x 2 (cid:6)(cid:3),
jf (x)j (cid:20) p(jxj). Similarly, a function f : (cid:6)(cid:3) (cid:2) (cid:6)(cid:3) ! (cid:6)(cid:3)
is parameterized polynomial-size if there exists a parame-
terized polynomial p : N (cid:2) (cid:6)(cid:3) ! N such that for all
(x; k) 2 (cid:6)(cid:3) (cid:2) (cid:6)(cid:3), jf (x; k)j (cid:20) p(jxj; k).

A function g : (cid:6)(cid:3) ! (cid:6)(cid:3) is polynomial-time computable
if there exist a polynomial p : N ! N and a Turing machine
M such that for all x 2 (cid:6)(cid:3), the Turing machine M, on input
x, produces output g(x) in time less than p(jxj). Similarly, a
function g : (cid:6)(cid:3)(cid:2)(cid:6)(cid:3) ! (cid:6)(cid:3) is parameterized polynomial-time
computable if there exist a parameterized polynomial p : N (cid:2)
(cid:6)(cid:3) ! N and a Turing machine M such that for all (x; k) 2
(cid:6)(cid:3) (cid:2) (cid:6)(cid:3), the Turing machine M, on input hx; ki, produces
output g(x; k) in time less than p(jxj; k).

A function h : (cid:6)(cid:3) ! (cid:6)(cid:3) is recursively computable if there
exists a Turing machine M such that for all x 2 (cid:6)(cid:3), the
Turing machine M, on input x, produces output h(x).

Languages and Complexity Classes. A language is a sub-
set of (cid:6)(cid:3), that is, a set of strings. A parameterized language
is a subset of (cid:6)(cid:3) (cid:2) (cid:6)(cid:3), that is, a set of pairs of strings. A
(parameterized) complexity class is a set of (parameterized)
languages. When C is a (parameterized) complexity class and
(cid:20) is a reduction, we say that C is compatible with (cid:20) if for
all (parameterized) languages A and B, A (cid:20) B and B 2 C
imply that A 2 C. Also, when C is a (parameterized) com-
plexity class and (cid:20) is a reduction, we say that B is hard for C
(alternatively, is C-hard) under (cid:20) reductions if for all A 2 C,
A (cid:20) B; and, we say that B is complete for C (alternatively, is
C-complete) under (cid:20) reductions if B 2 C and B is C-hard.
When C is a complexity class, the non-uniform version (or
“advice” version) of C, denoted by C/poly, contains those
languages A such that there exists a polynomial-size func-
tion f : 1(cid:3) ! (cid:6)(cid:3) and a language B in C such that for all
x 2 (cid:6)(cid:3), x 2 A if and only if hf (1jxj); xi 2 B. When C
is a parameterized complexity class, the non-uniform version

of C, denoted by C/ppoly, contains those parameterized lan-
guages A such that there exists a parameterized polynomial-
size function f : 1(cid:3) (cid:2) (cid:6)(cid:3) ! (cid:6)(cid:3) and a language B in C
such that for all (x; k) 2 (cid:6)(cid:3) (cid:2) (cid:6)(cid:3), (x; k) 2 A if and only if
(hf (1jxj; k); xi; k) 2 B.

When L is a parameterized language, deﬁne (cid:15)L to be the

set f((cid:15); y; k) : (y; k) 2 Lg.

Knowledge Representation Formalisms. A knowledge
representation formalism (KRF) is a subset of (cid:6)(cid:3) (cid:2) (cid:6)(cid:3). A
parameterized knowledge representation formalism (PKRF)
is a subset of (cid:6)(cid:3) (cid:2) (cid:6)(cid:3) (cid:2) (cid:6)(cid:3).

Conventions. We view a ternary function f : (cid:6)(cid:3) (cid:2) (cid:6)(cid:3) (cid:2)
(cid:6)(cid:3) ! (cid:6)(cid:3) as a binary function g : (cid:6)(cid:3) (cid:2) (cid:6)(cid:3) ! (cid:6)(cid:3) by pair-
ing together the ﬁrst two arguments, that is, g(hx; yi; z) =
f (x; y; z). For example, a ternary function f : (cid:6)(cid:3) (cid:2) (cid:6)(cid:3) (cid:2)
(cid:6)(cid:3) ! (cid:6)(cid:3) is considered to be parameterized polynomial-size
if there exists a parameterized polynomial p : N (cid:2) (cid:6)(cid:3) ! N
such that for all (x; y; k) 2 (cid:6)(cid:3) (cid:2) (cid:6)(cid:3) (cid:2) (cid:6)(cid:3), jf (x; y; k)j (cid:20)
p(jhx; yij; k). Similarly, a PKRF F is viewed as a parameter-
ized language by pairing together the ﬁrst two strings of each
triple, and so is considered to belong to a parameterized com-
plexity class C if the language L = f(hx; yi; k) : (x; y; k) 2
F g belongs to C.

For readability, we at times use a natural number m 2 N in

place of its unary representation 1m.

2.2 Compilability
In this subsection, we review the theory of compilability;
the deﬁnitions and theorems of this subsection are all from
[Cadoli et al., 2002], on which our presentation is based.
Throughout this subsection, the following two assumptions
concerning complexity classes and languages are in effect,
just as in [Cadoli et al., 2002].
Assumption 1 Every complexity class C is compatible with
and has complete problems under the polynomial-time many-
one reduction (cid:20)p
m.
Assumption 2 In languages, sufﬁxed blanks are considered
to be irrelevant, that is, a string x(cid:3) is considered to be in a
language A if x is in A.

For a KRF F , we will refer to each x 2 (cid:25)1(F ) as a knowl-
edge base; a knowledge base x is considered to represent the
knowledge fy 2 (cid:6)(cid:3) : (x; y) 2 F g. Roughly speaking, a
KRF is considered to be compilable to a complexity class C
if following a preprocessing of each knowledge base x, pos-
ing a query y to the knowledge base x – that is, deciding if
(x; y) 2 F – can be performed in C. The formal deﬁnition of
those KRFs compilable to a complexity class C includes two
ingredients. The ﬁrst is a preprocessing function f; because
preprocessing of a knowledge base is not useful if it greatly
increases the size of the knowledge base, f is required to be of
polynomial size. The second is a “target” KRF F 0, mandated
to be inside the class C, to which the KRF F is translated via
the function f.
Deﬁnition 3 (comp-C) Let C be a complexity class. A KRF
F belongs to comp-C if there exist

(cid:15) a binary polynomial-size function f : (cid:6)(cid:3) (cid:2) 1(cid:3) ! (cid:6)(cid:3),

and

(cid:15) a KRF F 0 in C

such that for all pairs (x; y) 2 (cid:6)(cid:3) (cid:2) (cid:6)(cid:3),

(x; y) 2 F if and only if (f (x; jyj); y) 2 F 0.

One can obtain a compilability class comp-C from any
complexity class C. Hence, the comp-C classes offer a rich
scheme by which one can classify KRFs, just as conventional
complexity classes offer a rich scheme by which one can clas-
sify computational problems. Upon a ﬁrst reading of Deﬁ-
nition 3, it may be conceptually easiest for one to take the
complexity class C to be equal to P (polynomial-time). In
this case, the requirement that F 0 is in C means that queries
(x; y) posed to F 0 can be processed efﬁciently, so f trans-
lates each F -knowledge base x – which is not necessarily in
a form that allows for efﬁcient resolution of queries (x; y)
– into a F 0-knowledge base f (x) – which is in a form that
allows for efﬁcient resolution of queries (x; y).1

The following notion of reduction, associated with the
comp-C classes, allows one to compare the compilability of
different KRFs.
Deﬁnition 4 (comp reducibility) A KRF F is comp reducible
to a KRF F 0 (denoted by F (cid:20)comp F 0) if there exist

(cid:15) binary polynomial-size functions f1; f2 : (cid:6)(cid:3) (cid:2) 1(cid:3) ! (cid:6)(cid:3)

and

(cid:15) a binary polynomial-time computable function g : (cid:6)(cid:3) (cid:2)

(cid:6)(cid:3) ! (cid:6)(cid:3)

such that for all pairs (x; y) 2 (cid:6)(cid:3) (cid:2) (cid:6)(cid:3),
(x; y) 2 F if and only if (f1(x; jyj); g(f2(x; jyj); y)) 2 F 0:
Theorem 5 For every complexity class C, the comp reduc-
tion is transitive and is compatible with the class comp-C.

The structure of the compilability classes comp-C can
be directly related to the structure of the complexity classes
C/poly.
Theorem 6 Let C and C 0 be complexity classes. The con-
tainment comp-C (cid:18) comp-C 0 holds if and only if the con-
tainment C/poly (cid:18) C 0/poly holds.

When C and C 0 are complexity classes that obey the
proper containment C ( C 0, Theorem 6 gives strong evi-
dence that the corresponding compilability classes comp-C
and comp-C 0 obey a similar proper containment: comp-C (
comp-C 0. Note that in making this observation, we appeal to
the widely held belief that relationships between “standard”
complexity classes C, C 0 are not affected by non-uniformity,

1This deﬁnition of comp-C is “non-uniform”in that the prepro-
cessing or translation function f not only takes the knowledge base
x as input, but in addition is given the length of the query y. A “uni-
form”version of the classes comp-C where the translation function
f is only given the knowledge base x is studied and compared to the
comp-C classes in [Cadoli et al., 2002]. In this paper, we present a
non-uniform theory of parameterized compilability, and do not fur-
ther discuss the uniform comp-C classes. One can use the ideas
and concepts we present in this paper to develop a corresponding
uniform theory.

that is, C is properly contained in C 0 if and only if C/poly is
properly contained in C 0/poly.2

2.3 Parameterized Complexity
Parameterized complexity is a theory for the classiﬁcation
of parameterized languages – languages whose constituents
have two components.
In classical complexity theory, the
base complexity class modeling feasible computation is P,
which is deﬁned using the notion of polynomial-time; in pa-
rameterized complexity theory the base complexity class is
FPT (“ﬁxed-parameter tractable”), which is deﬁnable using
the notion of parameterized polynomial-time.
Deﬁnition 7 (FPT) A parameterized language L belongs to
the parameterized complexity class FPT if there exists a pa-
rameterized polynomial-time computable function g : (cid:6)(cid:3) (cid:2)
(cid:6)(cid:3) ! f0; 1g such that for all pairs (x; k) 2 (cid:6)(cid:3) (cid:2) (cid:6)(cid:3),

(x; k) 2 L if and only if g(x; k) = 1:

Roughly speaking, a parameterized language L is in the
class FPT if there exists a constant c 2 N such that each
def
“k-slice” Lk
= fx : (x; k) 2 Lg of L is computable in poly-
nomial time via a polynomial of degree c. The degree of the
polynomials bounding the time for Lk must be a “universal”
constant c and cannot depend on k; on the other hand, the
coefﬁcients of these polynomials may have arbitrary depen-
dence on k.

The following notion of reducibility may be used to com-

pare the complexity of parameterized languages.

Deﬁnition 8 (parameterized reducibility) A parameterized
language L is parameterized reducible to a parameterized
language L0 (denoted by L (cid:20)par L0) if there exist

(cid:15) a parameterized polynomial-time computable function

f : (cid:6)(cid:3) (cid:2) (cid:6)(cid:3) ! (cid:6)(cid:3), and

(cid:15) a recursively computable function h : (cid:6)(cid:3) ! (cid:6)(cid:3)

such that for all pairs (x; k) 2 (cid:6)(cid:3) (cid:2) (cid:6)(cid:3),

(x; k) 2 L if and only if (f (x; k); h(k)) 2 L0:

We now deﬁne two parameterized complexity classes. In
contrast to the class FPT, each of these two classes is deﬁned
directly as those languages reducible to a particular language.

Deﬁnition 9 We deﬁne the following parameterized lan-
guages; the weight of a truth assignment is deﬁned to be the
number of variables it maps to true.

(cid:15) WEIGHTED FORMULA SATISFIABILITY

Input: A boolean formula F .
Question: Does F have a satisfying assignment of
weight at most k?

(cid:15) WEIGHTED CIRCUIT SATISFIABILITY

Input: A boolean circuit C.
Question: Does C have a satisfying assignment of
weight at most k?

2Note that the term “non-uniformity”is intended here to take
on the usual complexity-theoretic sense, as opposed to the slightly
different sense in which comp-C was called non-uniform.

Deﬁnition 10 We deﬁne the following parameterized com-
plexity classes.

(cid:15) W[SAT] is the class of all parameterized languages that
are parameterized reducible to WEIGHTED FORMULA
SATISFIABILITY .

(cid:15) W[P] is the class of all parameterized languages that are
parameterized reducible to WEIGHTED CIRCUIT SAT-
ISFIABILITY .

It is straightforward to verify that the parameterized com-
plexity classes deﬁned here (FPT, W[SAT], and W[P]) are
compatible with the parameterized reduction. Throughout
this paper, we will assume that all discussed parameterized
complexity classes have this property, and also that they have
complete problems.
Assumption 11 Every parameterized complexity class C is
compatible with and has complete problems under the pa-
rameterized reduction (cid:20)par.

3 Parameterized Compilability
3.1 Classes and reductions
As with the theory of compilability, the starting point for
the theory of parameterized compilability is the deﬁnition
of compilability classes. Whereas a compilability version of
each non-parameterized complexity class was deﬁned (Deﬁ-
nition 3), here we deﬁne a compilability version par-comp-C
of each parameterized complexity class C.
As with the deﬁnition of comp-C,

the deﬁnition of
par-comp-C includes a translation function f with a space
bound, as well as a “target” PKRF F 0, which is required to be
inside C.
Deﬁnition 12 Let C be a parameterized complexity class. A
PKRF F belongs to par-comp-C if there exist

(cid:15) a parameterized polynomial-size function f : (cid:6)(cid:3) (cid:2) 1(cid:3) (cid:2)

(cid:6)(cid:3) ! (cid:6)(cid:3), and

(cid:15) a PKRF F 0 in C

such that for all triples (x; y; k) 2 (cid:6)(cid:3) (cid:2) (cid:6)(cid:3) (cid:2) (cid:6)(cid:3) and natural
numbers m (cid:21) jyj,

(x; y; k) 2 F if and only if (f (x; m; k); y; k) 2 F 0:

An implication of the containment of a PKRF F inside
par-comp-C via the function f and the PKRF F 0 is the fol-
lowing. Deﬁne, for each k 2 (cid:6)(cid:3), the “k-slice” of a PKRF
def= f(x; y) : (x; y; k) 2 Gg. Moreover, deﬁne
G to be Gk
fk : (cid:6)(cid:3) (cid:2)1(cid:3) ! (cid:6)(cid:3) to be the function fk(x; m) = f (x; m; k).
Notice that for each k 2 (cid:6)(cid:3), the KRFs Fk, F 0
k and the binary
function fk satisfy the condition of Deﬁnition 3. That is, each
k-slice Fk of F is compilable to the corresponding k-slice F 0
k
of F 0 by the function fk. Because the size of f is bounded
by a parameterized polynomial, for k falling into a limited
range, the functions fk will behave polynomially; likewise,
when F 0 2 FPT, for k falling into a limited range, the KRF
slices F 0
k will have time complexity behaving polynomially.
Upon initial acquaintance, Deﬁnition 12 may appear to be
complex. However, we believe that the classes par-comp-C
unify the classes comp-C with parameterized complexity

classes in a natural way. We substantiate this claim by con-
sidering two special cases of Deﬁnition 12, which may lend
some intuition to the reader.

First, consider the case where the preprocessing function f
simply returns as output its ﬁrst argument, that is, f is equal
to the projection (cid:25)1. It follows that F must equal F 0; conse-
quently, a PKRF F is contained in par-comp-C via such an f
if and only if F is contained in C itself. Intuitively, the func-
tion f does not perform any preprocessing, so the compilabil-
ity class par-comp-C simpliﬁes out to the original class C.
Next, consider the case where the PKRF F has the property
that for all strings x; y; k; k0 2 (cid:6)(cid:3), it holds that (x; y; k) 2 F
if and only if (x; y; k0) 2 F ; that is, F “ignores” the third
component (the “parameter”) of its strings. In this case, the
PKRF F naturally induces a KRF ~F , deﬁned to be

f(x; y) : 9k:(x; y; k) 2 F g = f(x; y) : 8k:(x; y; k) 2 F g:
Such a PKRF F is contained in par-comp-FPT if and only
if the induced KRF ~F is contained in comp-P.3 In “ignor-
ing” the parameter of the PKRF F , the compilability class
par-comp-FPT simpliﬁes out to its non-parameterized vari-
ant, namely, comp-P. We mention that by imposing the re-
strictions discussed in the two cases simultaneously, we ef-
fectively obtain the class P. Thus, one can think of FPT
and comp-P as two different generalizations of P which are
uniﬁed together in and can be obtained as specializations of
par-comp-FPT.

We have the following notion of reducibility for comparing

the compilability of PKRFs.
Deﬁnition 13 (par-comp reducibility) A PKRF F is par-
comp-reducible to a PKRF F 0 (denoted by F (cid:20)par
comp F 0) if
there exist

(cid:15) parameterized polynomial-size functions f1; f2 : (cid:6)(cid:3) (cid:2)

1(cid:3) (cid:2) (cid:6)(cid:3) ! (cid:6)(cid:3),

(cid:15) a parameterized polynomial-time function g : (cid:6)(cid:3) (cid:2)(cid:6)(cid:3)(cid:2)

(cid:6)(cid:3) ! (cid:6)(cid:3), and

(cid:15) a recursively computable function h : (cid:6)(cid:3) ! (cid:6)(cid:3)

such that for all triples (x; y; k) 2 (cid:6)(cid:3) (cid:2) (cid:6)(cid:3) (cid:2) (cid:6)(cid:3) and natural
numbers m (cid:21) jyj,

(x; y; k) 2 F if and only if

(f1(x; m; k); g(f2(x; m; k); y; k); h(k)) 2 F 0.

We note that our deﬁnition of par-comp reducibility is not a
direct analog of the deﬁnition of comp-reducibility; in Deﬁni-
tion 13 the “preprocessing phase” f is given an upper bound
m on the size of the query y, as opposed to the length of the
query jyj, as in Deﬁnition 4. We believe that our notion of re-
duction is preferable because an assumption like Assumption
2 is not necessary to establish transitivity, and also because it
allows for a simpler proof of transitivity. Our proof of transi-
tivity can be specialized to a proof of transitivity for an “upper
bound” variant of Deﬁnition 4 by removing the parameter k.

3Sketch of one direction of this claim: suppose that the PKRF
F is of the described form and in par-comp-FPT. Fix an arbitrary
s 2 (cid:6)(cid:3), deﬁne the function ~f : (cid:6)(cid:3) (cid:2) 1(cid:3) ! (cid:6)(cid:3) by ~f (x; m) =
f (x; m; s), and deﬁne the KRF ~F 0 as f(x; y) : (x; y; s) 2 F 0g. It
can be veriﬁed that ~F is contained in comp-P via ~f and ~F 0.

Theorem 14 The par-comp reduction is transitive.
Theorem 15 For every parameterized complexity class C,
the par-comp reduction is compatible with the class
par-comp-C.

3.2 Completeness and Structure
We now study the notion of completeness for the classes
par-comp-C, as well as the structure of
the classes
par-comp-C. First, we make a simple observation about the
relationship between C/ppoly and par-comp-C which will
aid us in our study.
Proposition 16 Let C be a parameterized complexity class.
If the parameterized language A is in C/ppoly, then (cid:15)A is in
par-comp-C.

The following theorem, which will be of help in proving
hardness of PKRFs, demonstrates that we can easily obtain
complete languages for the class par-comp-C from complete
languages for the underlying class C.
Theorem 17 Let C be a parameterized complexity class. If
the parameterized language B is complete for C (under (cid:20)par
reductions), then (cid:15)B is complete for par-comp-C (under
(cid:20)par

comp reductions).
The next theorem is an analog of Theorem 6, and corre-
spondingly provides strong evidence that the structure of the
compilability classes par-comp-C reﬂects the structure of
the parameterized complexity classes C.
Theorem 18 Let C and C 0 be parameterized complexity
classes. The containment par-comp-C (cid:18) par-comp-C 0
holds if and only if the containment C/ppoly (cid:18) C 0/ppoly
holds.

References
[Balc´azar et al., 1995] J. L. Balc´azar, J. D´ıaz, and J. Gabarr´o.
Structural Complexity I. Texts in Theoretical Computer
Science – An EATCS series. Springer-Verlag, Berlin, 2nd
edition, 1995.

[Downey and Fellows, 1999a] R. Downey and M. Fellows.
Parameterized complexity after (almost) 10 years: Review
and open questions. In Combinatorics, Computation and
Logic, DMTCS’99 and CATS’99, pages 1–33. Springer-
Verlag, 1999.

[Downey and Fellows, 1999b] R.G. Downey and M.R. Fel-
lows. Parameterized Complexity. Springer-Verlag, 1999.
[Downey et al., 1999] R. Downey, M. Fellows, and U. Stege.
Parameterized complexity: A framework for systemati-
cally confronting computational intractability.
In Con-
temporary Trends in Discrete Mathematics, (R. Graham,
J. Kratochvil, J. Nesetril and F. Roberts, eds.), Proc.
DIMACS-DIMATIA Workshop, Prague 1997, volume 49
of AMS-DIMACS Series in Discrete Mathematics and The-
oretical Computer Science, pages 49–99, 1999.

[Gogic et al., 1995] Goran Gogic, Henry A. Kautz, Christos
Papidimitriou, and Bart Selman. The comparative linguis-
tics of knowledge representation.
In Proceedings of the
Fourteenth International Joint Conference on Artiﬁcial In-
telligence, pages 862–869, 1995.

[Liberatore and Schaerf, 2000] Paolo Liberatore and Marco
Schaerf. Compilability of abduction. In Proceedings of the
Seventeenth National Conference on Artiﬁcial Intelligence
(AAAI 2000), 2000.

[Liberatore, 1997] Paolo Liberatore. Compilability of do-
main descriptions in the language A. Electronic Trans-
actions on Artiﬁcial Intelligence, 1(4):129–132, 1997.

[Liberatore, 2000] Paolo Liberatore. Compilability and com-
pact representations of revision of horn knowledge bases.
ACM Transactions on Computational Logic, 1(1):131–
161, 2000.

[Liberatore, 2001] Paolo Liberatore. Monotonic reductions,
representative equivalence, and compilation of intractable
problems. Journal of the ACM, 48(6):1091–1125, 2001.

F.M. Donini,

[Cadoli et al., 1996] M. Cadoli,

and
M. Schaerf. Is intractability of non-monotonic reasoning a
real drawback? Artiﬁcial Intelligence, 88:215–251, 1996.
[Cadoli et al., 1997] M. Cadoli, F. M. Donini, M. Schaerf,
and R. Silvestri. On compact representations of propo-
sitional circumscription. Theoretical Computer Science,
182:183–202, 1997.

[Cadoli et al., 1999] Marco Cadoli, Francesco M. Donini,
Paolo Liberatore, and Marco Schaerf. The size of a re-
vised knowledge base. Artiﬁcial Intelligence, 115(1):25–
64, 1999.

[Cadoli et al., 2000] Marco Cadoli, Francesco M. Donini,
Paolo Liberatore, and Marco Schaerf. Space efﬁciency of
propositional knowledge representation formalisms. Jour-
nal of Artiﬁcial Intelligence Research, 13:1–31, 2000.

[Cadoli et al., 2002] Marco Cadoli, Francesco M. Donini,
Preprocessing
Information and Computation,

Paolo Liberatore, and Marco Schaerf.
of intractable problems.
176(2):89–120, 2002.

