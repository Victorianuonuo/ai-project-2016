On the Equivalence between Answer Sets and Models of Completion for Nested 

Logic Programs 

Jia-Huai You  and  Li-Yan Yuan 
Department of Computing Science 
University of Alberta, Canada 

Abstract 

We  present  a  sufficient  as  well  as  a  necessary 
condition for the equivalence between  answer sets 
and  models of completion  for logic  programs with 
nested expressions in the bodies of rules. This con(cid:173)
dition is the weakest among all that we are aware of 
even for normal logic programs.  To obtain this re(cid:173)
sult,  we present a polynomial time reduction from 
this class of nested logic programs to extended pro(cid:173)
grams.  Consequently, answer sets for these nested 
programs can be computed by an  answer set gen(cid:173)
erator for extended programs on the one hand, and 
characterized in  terms of models of completion on 
the other. 

Introduction 

1 
We  consider  logic  programs  with  nested  expressions  in  the 
bodies  of rules  ,  called  nested logic programs  in  this  paper. 
Nested  expressions  arc  formulas  built  from  literals  (atoms 
with or without classic negation), connectives such as nega(cid:173)
tion as failure not, disjunction ";", and conjunction ",".  This 
is a proper subset of the class of programs considered in iLif-
schitz et al,  1999],  where the head of a rule can  also be an 
arbitrary formula.  Lloyd and Topor [Lloyd and Topor,  1984] 
defined  nested  logic  programs  without  negation  as  failure, 
and  argued  for the  higher expressive power of the  extended 
language,  while  Lifschitz  et  al.  further  showed  the  role  of 
negation as failure in nested logic programs. 

Our goal  in  this  paper  is  to  provide  a  characterization  of 
answer  sets  for nested  logic  programs  in  terms  of tightness 
on  the  one  hand,  and  to  use  an  answer set  generator,  such 
as Smodels or DLV  to compute answer sets for nested logic 
programs  on  the  other.  The  studies  on  characterizations  of 
answer sets have proved useful in relating the completion se(cid:173)
mantics  iClark,  1978]  with  the  answer  set  semantics  [Gel-
fond  and  Lifschitz,  1988].  Fages  [Fages,  1994]  defined  a 
syntactic condition on  logic  programs, called positive-order-
consistent,  which  guarantees the  equivalence of the  two  se(cid:173)
mantics. Positive-order-consistent requires a program to have 
no positive loops.  For example, the program 
is not 
positive-order-consistent.  Babovich  et  al.  [Babovich  et  al, 
2000] on the other hand formalized the notion, tight on a set, 
which says that an extended logic program II is tight on X  if 

Mingyi Zhang 

Guizhou Academy of Sciences 

RR. China 

there exists a level mapping 
for any rule 

from A" to ordinals, such that 

Erdem  and  Lifschitz  lErdem  and  Lifschitz,  to  appear]  ex(cid:173)
tended the work to nested logic programs, and weakened the 
condition  so  that  the  positive  literals  are  required  to  be  or(cid:173)
dered by  only for applicable rules  w.r.t.  A\ 

As shown  in  [Babovich et al,  2000; Erdem and Lifschitz, 
to appear],  that a program  is  tight  on  S  is  a  sufficient con(cid:173)
dition  for  the  equivalence  of S  being  an  answer  set  and  S 
satisfying the completion of the program.  However, there are 
simple programs that are not tight even on their answer sets. 
For example,  suppose  we  want  to  express  that  two  or more 
propositions are equivalent, and they are true if certain condi(cid:173)
tions are satisfied.  For instance, consider 

Clearly, 
level mapping 
integers will  have to  satisfy 

is  not tight on  its  unique  answer set  {a, b}.  Any 
that maps the domain {a, b} to non-negative 

as well as  

(a), which is impossible. 
Even for logic programs without negation as failure, tight(cid:173)
II  is 

ness may fail to apply, e.g., with II  = 
not tight on  its unique answer set  {a}. 

In this paper, we define the notion of weak tightness, which 
is a sufficient as well as a necessary condition for a model of 
completion to be an answer set.  Consequently, an answer set 
is characterized by three independent properties:  weak tight(cid:173)
ness, supportedness, and closedness. This characterization of 
answer sets can be generalized to nested programs via a lin(cid:173)
ear time transformation to extended programs.  This yields a 
new characterization of answer sets for nested programs.  Al(cid:173)
though the transformation uses a linear number of extra vari(cid:173)
ables,  we will  see that these extra variables are non-split,  in 
the sense that in  a Davis-Putnam procedure [Davis and Put(cid:173)
nam,  1960], they need not create choice points during search 
for  answer  sets,  and  thus  they  need  not  enlarge  the  search 
space. 

Our  results  have  some  practical  implications. 

First, 
they  widen  the  application  range  of  systems  like  Cmodels 

NONMONOTONIC REASONING 

859 

[Babovich,  2002],  a  system  implemented  for  the  computa(cid:173)
tion  of answer  sets  for  tight  logic  programs.  Secondly,  the 
transformation  from  nested  programs to  extended  programs 
allows answer sets for nested programs to be computed by an 
answer set generator for extended programs, or indirectly via 
the models of their completed programs. 

The next section introduces logic programs with nested ex(cid:173)
pressions.  In  Section  3  we define weak  tightness and show 
that answer sets are characterized by this condition along with 
models of completion.  In Section 4 we present a polynomial 
time  transformation  from  nested  programs to  extended  pro(cid:173)
grams. Section 5 remarks on related work. 

2  Nested Logic Programs 
We  consider  a  propositional  language  L.  A  literal  is  an 
in  front, called the classi(cid:173)
atom, or an atom with the sign 
cal negation.  Elementary formulas are  literals  and constants 
.  Formulas are built from elemen(cid:173)
tary formulas using the unary connective not  and the  binary 
connectives, (conjunction) and ; (disjunction). A nested logic 
program (or, just program if not otherwise specified) is a set 
of rules of the  form 

where H  is a literal or 
head of the  rule  and G the  body.  If G  = 
from the body; rules with the body 

, and G is a formula. H is called the 
, we will drop it 

are  called  facts. 

Here are some special cases.  A formula of the form  not 

t 
is a literal, is called a default negation. When G is a 
where 
conjunction of literals and default negations, the rule is called 
an extended rule.  In an extended rule, the literals that do not 
appear  in  the  scope  of not  are  called positive  literals.  The 
programs  that  consist  of only  extended  rules  are  called  ex(cid:173)
tended programs; and extended logic programs without clas(cid:173)
sic  negation arc called normal programs. 

An extended rule may be denoted by 

where 
is  the  set  of positive  literals  and  B-  the  set  of default 

negations. 

We  denote  by 

the  set  of  literals  occurring  in   
is any syntactic entity, such as a formula or a pro(cid:173)
where 
denotes the  subset of 
gram.  Let A"  be a set of literals. 
Ar, restricted to the literals in V, i.e., 
.  A set of 
elementary formulas A'  is consistent if i.  tf  X  and it contains 
no complementary literals / and  

That  a  consistent  set  of  literals  X  satisfies  a  formula  F, 

denoted 

, is defined recursively as follows: 

for elementary  formula   

A consistent set Ar  of literals is closed under a program II  if, 
for every rule  H 
H  X  whenever  X  G.  X  is 
supported by 
G  such 
that  X 
G. 

X  there is a rule / 

if,  for any / 

G in 

We now define answer sets for a program.  For a program 
without negation as failure, a consistent set of literals X is 
an  answer  set  for  II  if and  only  if X  is  minimal  among  the 
consistent sets of literals closed under I I. 

A  consistent set  of literals  A'  is  an  answer set  of program 
if and  only  if A"  is  minimal  among  the  consistent  sets  of 
is  obtained 
by  replacing every maximal occurrence of a formula 

,  where the  reduct 

literals  closed  under 
from 
not  F  by 

if  X 

F  and 

otherwise. 

We define the completion semantics  for  finite  nested pro(cid:173)
grams without the classic negation. Let II be such a program. 
The completion  of 
, is the following set 
of propositional formulas:  for each atom  which is either an 
atom in L, or 

, denoted Comp\ 

, 

• 

if  does not appear as the head of any rule  in IT,  then 

•  otherwise, 

(with 
each default negation  not  ^ replaced by negative literal 

,  if there are exactly n  rules 

as the head. 

Finally, given a nested program  without negation as fail(cid:173)
ure, to construct the unique minimal set among the consistent 
sets of literals closed under I I, we define the  familiar 
op(cid:173)
erator as 

It  is  clear  that 
literals. The least  fixpoint  can then be computed by 

is  monotonic  over  the  domain  of sets  of 

The following proposition is needed later in this paper. 
Proposition 2.1  Let  be a program without negation as fail(cid:173)
ure.  Then,  X  is an answer set  for 
iff X  is  consistent  and 

3  Weakly Tight Logic Programs 
Let 
literal  in A".  We define the set of applicable rules  of 
respect to h and A\ as follows; 

be an extended program, A'  a set of literals,  and h a 
, with 

A level mapping A is a partial function from literals to nat(cid:173)
ural numbers such that the set A/* of natural numbers mapped 
from literals forms a partial order   
Definition 3.1  Let X  be  a  set of literals  and 
program. 
ists  a  level  mapping 
any nonempty 
Body* 
\Body~ 

an extended 
is  said  to  be  weakly  tight  on  X  if there  ex(cid:173)
such  that for 

with  the  domain 
where 

[h,X)  such  that for  each 

there is a  rule   

Body*, 

in 

.}. Then, 

Example 3.2  Let  program   
is the only answer set 
c,  not d. 
for 
is  not tight  on  S,  n  is  weakly  tight on  S. 
For example, a level mapping A satisfying the weak tightness 
condition can be:  

Though 

'By a partial order, we mean a relation that is transitive and ir-

reflexive. 

860 

NONMONOTONIC  REASONING 

Then 

, S — 

is weakly tight on S. 

Lemma 3.3  Let  be an extended program, and S an answer 
set for 
Proof.  Since S is an answer set for 
It can 
be seen that the following mapping  exists: for each literal q 
such that 
Clearly,  satisfies the condition for weak tightness.  
Theorem 3.4  For any extended program 
tent set of literals S,  S is an answer set  for 
tight on S,  and S is closed under and supported by II. 
Proof 
5.  It's  obvious  that  S  is  closed  under and  supported  by  IT 
From Lemma 3.3 we know that TI is also weakly tight on S. 

and any consis(cid:173)
is weakly 

Let S be an answer set for 

. Then !  

iff 

Assume 

is  weakly tight on  S,  and  S is closed  under 

Mm 

The condition that S  is closed  implies 
S.  We are done if M  -  S.  Otherwise we have  M  S. 
Since  S  is  supported  by  I I,  there  is  a  rule 
 

and supported by I I.  We show that S is an answer set for 
Let 
M 
Let q 
r  : 
and  Body 
Thus, the same rule r  is in II (q, S), which 
is  nonempty.  As  II  is  weakly  tight on  5,  there  is a mapping 

such that 

Body 

in 

and 

and a rule q  ,  Body 

,  Body  '  in 
Body 
- 
M  is  also closed,  there is  " 
Then, from the definition of ', there is a literal 
that 
assumption that M  is the  least fixpoint of the operator  

for each 
Body  such that 

I is minimal, hence 

~ " such 
. This contradicts the 

such that  

.  Since 

a level mapping to be applied to a rule with a body literal that 
does not appear in the head of any rule. 

4  Transformation 
When a program II is translated to another program II 7, new 
propositional symbols may  be  used.  Thus, the  language for 
is enlarged.  Below, we define a notion of equivalence be(cid:173)
tween a program and its translation. Throughout this section, 
a program means a finite nested program. 
Definition 4.1  Let 
the  language  V  for 
to 
statements hold. 

be a program in language L.  Suppose 
'  is equivalent 
is  a  superset  of L. 
,  if and  only  if both  of the following 

, denoted 

•  For any answer set S  for 

, there is exactly one answer 

set S'  for 

such that  

•  For any answer set S'  for 

is an answer set for 

Lemma 4.2  The  relation 

is  reflexive and transitive. 

Our transformation  makes  use of some transformations in 
[Lifschitz et ai,  19991 that preserve strong equivalence. Two 
are  said to  be strongly equivalent if for 
programs 
any  program 
have  the  same  set  of 
answer sets.  Strong equivalence entails our notion of equiva(cid:173)
lence. 
Proposition 4.3  If  two  programs 
equivalent,  then they are equivalent to each other, i.e.,  

are  strongly 

and 

and 

Note that neither supportcdness nor closedness can  be re(cid:173)
moved from the theorem for it still to hold.  E.g.  the program 
is  tight  as  well  as  weakly  tight  on  {a,/;}, 
which  is  not  supported  by 
For closedness,  we  note that 
any program is tight as well as weakly tight on the empty set. 
be a finite normal program and S a set 
Corollary 3.5  Let 
of atoms  satisfying  Comp 
is weakly tight on  S 
ifj'S is an answer set for  

. Then, 

To compare two conditions that guarantee a model of com(cid:173)
pletion to be an answer set, we have the following definition. 
Deiinilion  3.6  Let  Cond\  (A\  Y)  and Cond'2(X,Y)  be  con(cid:173)
ditions where X ranges over the set of all extended programs 
and Y over the set of all sets of literals. Cond\(X, Y) is said 
to  be  weaker than  Cond2(X,  Y)  if 

•  for  all  X  and  Y,  Cond2(X,  Y) 

and 

implies  Comll(X,  Y), 

•  there exist some X  and Y such that Condi (Ar, V)  does 

not  imply  Cond2{X,  Y). 

Proposition 3.7  For any extended program 
erals  X, 
the converse is not true. 

and set  of lit(cid:173)
is  tight on  X  then  it is  weakly  tight on  X.  But 

if 

In Section 5, we will see that weak tightness is also weaker 
than other conditions used to characterize answer sets  in the 
literature.  Then,  the  question  arises  as  whether  the  weak 
tightness  condition  is  the  weakest.  Technically,  the  answer 
is no, since the weak tightness condition can be made weaker 
in trivial ways, e.g., one can make it weaker by not requiring 

4.1  Transformation 
In  the  following,  we  say  that  a  formula is  basic  if it is  built 
from  l Y\  47\  literals,  constants,  and  not  L  and  not  not  L 
where L is a literal or constant. A program is said to be basic 
if it consists of rules whose body formulas are basic.  A rule 

is  said  to  be  fiat  if every G\  is  a conjunction  of literals  and 
default negations.  A  program \sflat if every rule in  it is  flat. 
Let II be a nested program. Our transformation consists of 

three steps, briefly described below. 

•  II is transformed to a basic program I I' by some simpli(cid:173)

fication  rules. 

•  IT is transformed to a flat program I I" by transformation 

rules that name some subexpressions by new atoms. 

•  I I"  is then transformed to  

f by splitting each flat rule 
with  disjunctive  body  into  several  extended  rules  with 
the same head. 

We now give the details. Below, 

rule. 

Step 1. Simplification 

Jenotes a rewrite 

NONMONOTONIC  REASONING 

861 

s called an 

A  program 
duced  further  by  transformation  rules  in  Step  where 
[1..3]. In addition, we denote by 

normal form 

if 

cannot be re(cid:173)

where Rule 3 has higher priority to be applied than Rules  1 
and 2.  

a rewrite sequence generated only by the transformation rules 
in Step  

The simplification rules given here are essentially their cor(cid:173)
responding equivalences given in [Lifschitz^/a/.,  1999]. The 
only  difference  is  that,  for  the  purpose  of  termination,  we 
cannot directly adopt an equivalence for symmetry,  such  as 
as a rewrite rule.  We therefore have to repre(cid:173)

sent the symmetric cases by rules. 

The  simplification  rules  are  similar  to  the  ones  found  in 
propositional  logic, except perhaps Rule  3,  which simplifies 
negation  as  failure only when  it  is  nested at  least three  lev(cid:173)
els  deep.  Among these  rules,  only  1-3  are essential  for the 
purpose of producing a basic program.  The rest are used to 
simplify  basic formulas further. 

That a rule has a higher priority to be applied than another 
rule  means  that  when  both  rules  are  applicable,  the  former 
should be applied and the latter should not. The only intention 
here for Rule 3 over Rules  1  and 2 is to prevent transforming 
an expression of the form 

where 
result in higher complexity). 

by distributing each not over F  (which  would 

Step 2.  Naming subexpressions 

Step 3.  Splitting 

A flat rule of form 

t is replaced by rules 

The set of all transformation rules in Steps  1, 2 and 3 de(cid:173)
fine a binary relation over programs. We will use 
to 
denote a single  transformation step that transforms program 
n  to program 
by an application of a transformation rule in 
Step i where 
By a rewrite sequence, we mean a se(cid:173)
quence of zero or more rewrite steps which takes the general 
form 

2Apparently,  in  this  case  all  the occurrences  of {G\ H)  in  the 

given program can be replaced by  simultaneously. 

Lemma 4.5  There is no infinite sequence 

Lemma 4.6  Let n be the size of the  program 
below. 

mentioned 

We can show that every transformation in Step 2 preserves 

equivalence. 
Lemma 4.7   

For any program I I, Lemmas 4.5 and  4.6 together guaran(cid:173)

tee the existence of a finite rewrite sequence 

is an 

where 
and 
transformation  of 

is an extended program.  Let us call such a 

is an u>2-normal form, 
the 

-normal form, 

denoted by 

We are ready to show the main theorem of this section. 

3Although transformation rules can be applied nondcterministi-

cally, it is easy to show that the rewrite relation 
is confluent [Dershowitz and Jouannaud, 1990J so that the final ex(cid:173)
tended program is unique, up to atom renaming. 

for any 

862 

NONMONOTONIC  REASONING 

Corollary 4.9  For any programs II  and P, 

The level mapping in Fages' definition depends on the sup-
portedness: one needs to find a rule that supports an atom, and 
then determines if a  level  mapping applies to the same rule. 
The two conditions in our case are independent. 

The claim in 1 above is considered by some authors as a form 
of strong equivalence within the same language. 

It follows from Lemma 4.6 that 
Theorem 4.10  For any program 
duction  of 
sets for 

there is a linear time re(cid:173)
to an extended program 11' so that the answer 

can he identified in linear time from those for  

We remark that the extra atoms introduced in our transfor(cid:173)
mation are non-split.  They are just "connecting atoms" serv(cid:173)
ing  the  purpose  of propagating values  from  subexpressions. 
Their values can be determined solely by constraint propaga(cid:173)
tion from the values of the original atoms. 

Non-split variables can be accommodated easily in systems 
like Smodels by applying the procedure Heuristic only to the 
set  of original  variables,  so  that non-split variables  will  not 
be picked up for guessing a value. In this way, non-split vari(cid:173)
ables do not create choice points during the search for answer 
sets. 

4.2  Weakly  tight  nested  logic  programs 
We  give  a  characterization  of  answer  sets  for  nested  pro(cid:173)
grams, in terms of their transformations, and show the coun(cid:173)
terpart of Theorem 3.4 for nested programs. 

be a nested program,  and X a consis(cid:173)
is weakly 

Theorem 4.12  Let 
tent set of literals.  X  is  an  answer set for  II  iff 
tight on  X,  and X  is closed under and supported by II. 
Corollary 4.13  Let 
be a finite nested program without the 
classic  negation  and  S  a  set  of atoms  satisfying  Co7np(U). 
Then, U is weakly tight on SiffS is an answer set for II. 

5  Related Work 
Well-Supported  Model 
Definition 5.1  [Fages,  1991] Let 
be a normal program.  A 
set of atoms S  is well-supported iff there exists a level map(cid:173)
ping  with  S  as  the domain  such  that for any atom  a 
there exists a rule 
v 
cable w.r.t. S, and for each  

.  which is appli(cid:173)

, 

„ 

.. 

To  summarize  the  relationships  among  tightness,  weak 
tightness  and  well-supportedness  for  normal  programs,  we 
have, for any normal program 

and set of atoms 5, 

•  If 5  is  well-supported, then 

is weakly tight on  5; but 

the converse is not true. 
If 
is tight on  5, then 
converse is not true. 

• 

is  weakly  tight on  5;  but the 

•  That 

is  tight on  S  is  not a sufficient condition  for S 
to be  well-supported;  that S  is  well-supported is  not a 
sufficient condition  for 

to be tight on S. 

Therefore, the weak tightness is the weakest among all three, 
bridging the gap between tightness and well-supportedness. 

Strong  Compatibility  of Logic  Programs 

In [Zhang,  1992], Zhang showed a characterization of de(cid:173)
fault extensions.  Here, we re-formulate it for logic programs. 

For an extended logic program 

let us define 

/ 
C  

The  characterization  of  default  extensions  as  given  in 
[Zhang, 1992], when applied to logic programs, can be stated 
as follows. 
Theorem 5.4  Let U be an extended logic program.  U has an 
answer set iff there is a subprogram I I' C 17 such that 

Ben-Eliyahu  and  Dechter's  characterization  [Ben-Eliyahu 
and Dechter,  1994] of answer sets for head cycle-free disjunc(cid:173)
tive programs reduces to that of Fages for normal programs. 
Theorem 5.2  [Fages,  1991] For any normal program II,  the 
well-supported models ofU are exactly the answer sets for II. 

A subprogram 

it is compatible and 
relationship. 
Proposition 5.5  Let 

is said to be strongly compatible if 
We can show the following 

be  an  extended program.  For  any 

NONMONOTONIC  REASONING 

863 

I. 

is  strongly  compatible,  then 

if 
Con(n'); 

is  weakly  tight  on 

al,  2002],  can  be extended in  order to  be  able to handle all 
nested programs. 

Since no proper subset of 

corresponds to the 
satisfaction of completion, to see whether a model of comple(cid:173)
tion is also an answer set one needs all three conditions.  The 
key lies in condition P2 which embodies both supportedness 
and  an  order  of derivation.  Thus,  Zhang's  characterization 
does not provide a nontrivial condition  for a model  of com(cid:173)
pletion to be an answer set. 

ASSAT 

In  the system ASSAT iLin  and Zhou, 2002],  the comple(cid:173)
tion of a normal program is executed by a SAT solver, pos(cid:173)
sibly  repeatedly.  When  a  model  M  of the  completion  from 
then M is not an answer 
program II is generated,  if 
f  to compute loop for(cid:173)
set  for I I.  ASSAT relies on  
mulas which say that the atoms in 
that are involved 
in a (maximal) loop should be false if they cannot be derived 
otherwise.  However, 
does not provide a complete 
picture of the loops involved. There could be loops whose in(cid:173)
terpretation in M  is faked due to the loops on  A7  - I I M / . For 
example, let  II   
and let the computed model of completion be 
Though the loop on a is captured 
this case, 
correctly,  the  loop  on  c  is  captured  incorrectly.  It  remains 
to be seen whether stronger loop formulas can be computed, 
based on the idea of level mapping. 

Transformations of Nested  Programs 

The  transformation  given  in  [Lifschitz  et al,  19991  deals 
with  arbitrary  nested  programs  where  rules  may  have  arbi(cid:173)
trary  formulas  in  the  heads.  The  transformation  preserves 
strong equivalence but is not polynomial. 

Independently in [Pearce et al., 2002], arbitrary nested pro(cid:173)
grams are translated to disjunctive programs where extra vari(cid:173)
ables arc used to avoid an exponential blow-up, an idea simi(cid:173)
lar to the one adopted in this paper.  Our transformation how(cid:173)
ever  departs  from  that  of  [Lifschitz  et  al,  1999]  in  a  mini(cid:173)
mal way.  By partitioning the transformation into three stages 
(cf.  Theorem 4.8), we are able to identify exactly where ex(cid:173)
tra  variables  are  required.  This  is  only  when  dealing  with 
a  disjunction  or  an  expression  like  not  not  L  where  L  is  a 
In  [Pearce  et  al.,  2002],  other  forms  of subformu-
literal. 
las, such as the whole body of a rule and a conjunction, can 
also be labeled by extra variables. Our transformation is thus 
simpler  and  more compact.  While  our transformation takes 
linear  time,  the  one  in  [Pearce  et al,  2002]  is  only  claimed 
to be polynomial time. Finally, the extra variables introduced 
in our case  are non-split.  It is  not clear whether this  is pos(cid:173)
sible for the class of all  nested programs where the heads of 
rules are arbitrary formulas.  It  is  interesting to see  whether 
our approach, combined with some of the ideas in [Pearce et 

References 
[Babovich et al., 20001  Y.  Babovich, E. Erdem, and V. Lif-
schitz.  Fages'  theorem and  answer set programming.  In 
Proc.  8th International  Workshop on  Non-Monotonic Rea-
soning, 2000. 

[Babovich, 2002]  Y.  Babovich.  Cmodels  home  papge  at 

iBen-Eliyahu and Dechter,  1994]  R. 

www.cs.utexas.edu/users/tag/cmodcls.html.  2002. 
Ben-Eliyahu 

and 
R.  Dechter.  Propositional  semantics for disjunctive logic 
programs.  Annals  of  Math,  and  Artificial  Intelligence, 
14:53-87, 1994. 

[Clark,  1978]  K.L. Clark.  Negation as failure.  In H. Gallaire 
and J. Minker, editors, Logic and Data Bases, pages 293-
322. Plenum Press, 1978. 

[Davis and Putnam,  1960]  M.  Davis  and  H.  Putnam.  A 
computing  procedure  for  quantification  theory.  J  ACM, 
7(3):201-215, 1960. 

[Dershowitz and Jouannaud,  19901  N.  Dershowitz 

and 
In  Handbook  of Theo(cid:173)
P  Jouannaud.  Rewrite  systems. 
retical  Computer  Science,  Vol  B:  Formal  Methods  and 
Semantics, pages 243-320. North-Holland, 1990. 

[Erdem and Lifschitz, to appear]  E. Erdem and V.  Lifschitz. 
Tight  logic  programs.  Theory  and Practice  of Logic  Pro(cid:173)
gramming,  to  appear. 

[Fages,  1991]  F.  Fages.  A  fixpoint  semantics  for  general 
logic programs compared with the well-supported and sta(cid:173)
ble model semantics.  New Generation Computing, 9:425-
443,1991. 

[Fages,  1994]  F.  Fages.  Consistency  of Clark's completion 
and  existence  of  stable  models.  Journal  of Methods  of 
U)gic In  Computer Science,  1:51-60,  1994. 

[Gelfond and Lifschitz,  1988]  M.  Gclfond  and  V.  Lifschitz. 
In 

The  stable  model  semantics  for  logic  programming. 
Proc. 5th ICLP, pages  1070-1080. MIT Press,  1988. 

[Lifschitz etal,  1999]  V.  Lifschitz,  L.  Tang,  and  H.  Turner. 
Nested  expressions  in  logic  programs.  Annals of Mathe(cid:173)
matics  and Artificial  Intelligence,  25:369-389,  1999. 

[Lin and Zhou, 20021  F. Lin and Y. Zhou.  ASSAT, comput(cid:173)
ing answer set of a logic program by SAT solvers.  In Proc. 
AAAI  V2, pages  112-118, 2002. 

[Lloyd and Topor, 1984]  J Lloyd and R. Topor. Making Pro(cid:173)
log  more  expressive.  J.  Logic  Programming,  1(3):225-
240, 1984. 

[Pearce etal., 20021  D.  Pearce,  V.  Sarsakov,  T.  Schaub, 
H.  Tompits,  and  S.  Woltran.  A  polynomial  translation 
of logic programs with nested expressions into disjunctive 
logic  programs (preliminary report).  In  Proc.  19th ICLP, 
2002. 

[Zhang,  1992]  M.  Zhang.  A  characterization  of extensions 
of general  default theories.  In Proc.9th  Canadian Artificial 
Intelligence Conference, pages  134-139,  1992. 

864 

NONMONOTONIC REASONING 

