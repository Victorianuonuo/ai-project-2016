Qualitative Spatial and Temporal Reasoning: Efﬁcient Algorithms for Everyone

Research School of Information Sciences and Engineering

Jochen Renz

The Australian National University

Canberra, ACT 0200, Australia

Abstract

In the past years a lot of research effort has been
put into ﬁnding tractable subsets of spatial and tem-
poral calculi.
It has been shown empirically that
large tractable subsets of these calculi not only pro-
vide efﬁcient algorithms for reasoning problems
that can be expressed with relations contained in the
tractable subsets, but also surprisingly efﬁcient so-
lutions to the general, NP-hard reasoning problems
of the full calculi. An important step in this direc-
tion was the reﬁnement algorithm which provides
a heuristic for proving tractability of given subsets
of relations. In this paper we extend the reﬁnement
algorithm and present a procedure which identiﬁes
large tractable subsets of spatial and temporal cal-
culi automatically without any manual intervention
and without the need for additional NP-hardness
proofs. While we can only guarantee tractability
of the resulting sets, our experiments show that for
RCC8 and the Interval Algebra, our procedure au-
tomatically identiﬁes all maximal tractable subsets.
Using our procedure, other researchers and practi-
tioners can automatically develop efﬁcient reason-
ing algorithms for their spatial or temporal calculi
without any theoretical knowledge about how to
formally analyse these calculi.

1 Introduction
Dealing with spatial and temporal information is an essential
part of any intelligent system and of our everyday lives. In
the area of qualitative spatial and temporal representation and
reasoning, information is represented in terms of qualitative
relationships between spatial or temporal entities, such as “A
is left of B” or “C occurs during D”. It is distinguished be-
tween different aspects of space and time, such as direction,
topology, distance, size/duration, or shape. For all these as-
pects, qualitative relationships can then be deﬁned on a level
of granularity that suits a given application.

When developing a qualitative spatial or temporal calcu-
lus, one has to select the domain of entities that are being
described. This could be points in a d-dimensional space, in-
tervals or line segments, or extended spatial regions. The set
of spatial or temporal entities is usually inﬁnite. The next

step is to deﬁne a pairwise disjoint and jointly exhaustive set
of base relations B (we assume in the following binary rela-
tions), i.e., between any two entities of our domain, exactly
one of the base relations holds. The best known calculi are
the RCC8 calculus [Randell et al., 1992] which consists of
eight topological base relations for extended spatial regions
and the Interval Algebra [Allen, 1983] which consists of 13
base relations for intervals. Many other calculi are deﬁned in
the literature for different entities, aspects and granularities.

Knowledge about the relationships between given entities
can be represented in the form of constraints xRy where x
and y are variables over the domain of entities and R is a
relation of the full set of relations 2B
. The powerset of the
base relations is used in order to be able to express indeﬁ-
nite information in cases where the exact relationship is un-
known. Given a set of such constraints we can then formulate
different reasoning problems such as deriving unknown re-
lations, eliminating impossible base relations from indeﬁnite
relations, computing the minimal representation, or checking
the consistency of the given set of constraints. Since most
reasoning problems can be polynomially reduced to the con-
sistency problem, this is considered to be the most important
reasoning problem. The theoretical properties of the consis-
tency problem depend on the chosen set of relations and the
chosen domain. While the consistency problem is usually
NP-hard if all relations of 2B
are permitted, for many calculi
it is tractable when only the base relations B are used. These
two extremes in the complexity of deciding consistency have
led to a considerable research effort in the past 20 years to
identify larger tractable subsets of a given set of relations 2B
or even maximal tractable subsets which mark the boundary
between tractable and NP-hard subsets of 2B

.

The signiﬁcance of having large tractable subsets is enour-
mous as it not only allows tractable reasoning in cases where
the given information is restricted to relations of a tractable
subset, but mainly because it considerably speeds up the time
for deciding NP-hard instances of the consistency problem.
In emprirical studies [Renz and Nebel, 2001] it has been
shown that almost all instances of the NP-hard consistency
problem for RCC8, even those instances in the phase tran-
sition, which are commonly considered to be the hardest in-
stances, could be solved surprisingly fast by combining dif-
ferent heuristics based on the maximal tractable subsets of
RCC8. Similar results were found for the Interval Algebra

IJCAI-07

526

[Nebel, 1997]. The reasoning algorithms of these studies can
be used for any spatial or temporal calculus provided that
tractable subsets are known which contain all base relations.
Therefore, tractable subsets are essential for efﬁcient solu-
tions to the spatial and temporal reasoning problems, which
in turn is a requirement for applications of these calculi.

|B|

Identifying tractable subsets is a very hard problem, in par-
ticular when spatial entities like extended spatial regions are
involved which cannot be easily represented. However, due
to the similar structure of the consistency problem over spa-
tial and temporal relations–they are all based on a set of base
relations and the same set of operators–it was possible to de-
velop a general method that can be applied to all sets of rela-
tions and which allows to prove tractability of a given subset
simply by running an algorithm [Renz, 1999]. The so-called
reﬁnement method requires as input two sets of relations S
and T , S is the set that is being tested for tractability and T is
a set for which it is known that a-closure decides consistency.
The reﬁnement method further needs a reﬁnement strategy,
which is a mapping of relations S ∈ S to relations T ∈ T
for which T is a reﬁnement of S, i.e, T ⊆ S. Since there
different subsets for a given set of base relations B,
are 22
we cannot apply the reﬁnement method to all subsets, but can
only run it for a small number of candidate sets. One way of
identifying these candidate sets is to make a number of NP-
hardness proofs in order to identify relations that make the
consistency problem NP-hard. These relations can be used
to restrict the number of candidate sets for tractable subsets.
Further, we have to ﬁnd a reﬁnement strategy for each can-
didate set to a corresponding set T . Due to the large amount
of existing theoretical analysis on RCC8 and the Interval Al-
gebra, e.g., a large number of NP-hard relations was known,
it was possible to apply the reﬁnement method to these two
calculi and to identify large tractable subsets. But what if we
have a calculus where no theoretical results are yet available?
In this paper, we extend the reﬁnement method and present
a general procedure by which large tractable subsets of arbi-
trary spatial and temporal calculi can be identiﬁed fully auto-
matically without the need for any manual interaction. This
procedure will return one or more tractable subsets of a given
spatial or temporal calculus. While we cannot guarantee max-
imality of the resulting tractable subsets, the procedure iden-
tiﬁes all maximal tractable subsets of RCC8 and the Interval
Algebra. But even if the resulting tractable subsets are not
maximal, they can still give us efﬁcient solutions to the NP-
hard consistency problem if they are used as split sets in Renz
and Nebel’s [2001] reasoning algorithms.

The paper is structured as follows. In section 2 we give
an introduction to spatial and temporal reasoning and to the
reﬁnement method. In section 3 we describe our procedure,
in section 4 we apply it to RCC8 and the Interval Algebra and
compare the output of the procedure to the known results.
Finally, in section 5 we discuss our results.

2 Background

2.1 Qualitative spatial and temporal reasoning
A qualitative spatial or temporal calculus [Ligozat and Renz,
2004] consists of a domain D of spatial or temporal entities

which is usually inﬁnite and a set of base relations B which
partitions D × D into jointly exhaustive and pairwise disjoint
relations, i.e., between any two entities of D exactly one base
relation holds. Since the domains are inﬁnite, we do not work
on the tuples contained in the relations but only manipulate
the relation symbols. We have different operators for doing
so, union (∪), intersection (∩), converse ((cid:2)), composition (◦)
and weak composition ((cid:7)) of relations. Composition is de-
ﬁned as R ◦ S = {(a, c)|∃b.(a, b) ∈ R and (b, c) ∈ S}. Since
we cannot deal with the tuples contained in the relations, we
can in many cases only use weak composition which is de-
ﬁned as R (cid:7) S = {T |T ∈ B : T ∩ (R ◦ S) (cid:9)= ∅}. The relations
used by a spatial and temporal calculus are those contained in
the powerset 2B
of the base relations. The consistency prob-
lem CSPSAT(S) for spatial and temporal calculi, where S is
a subset of 2B
Instance: A set V of n variables over a domain D and a set
and x, y ∈ V.
Question: Is there an instantiation of all n variables in Θ
with values from D which satisﬁes all constraints in Θ?

Θ of constraints xRy where R ∈ S ⊆ 2B

is deﬁned as follows:

The consistency problem is in general an NP-hard problem,
but if a subset T of 2B
is known for which the consis-
tency problem can be solved in polynomial time, a so-called
tractable subset, then the consistency problem can be solved
by splitting Θ into sets of constraints Θ(cid:2)
such that for every
constraint xRy ∈ Θ there is a constraint xR(cid:2)y ∈ Θ(cid:2)
where
R(cid:2)
is a reﬁnement of R, i.e., R(cid:2) ⊆ R, and by backtracking
over all possible sets Θ(cid:2) [Nebel, 1997].

A local consistency algorithm for approximating the con-
sistency problem is the algebraic closure algorithm, or a-
closure algorithm [Renz and Ligozat, 2005].
It succes-
sively makes every triple (cid:11)x, y, z(cid:12) of variables in Θ a-closed
by applying the following operation until a ﬁxpoint occurs:
xRy := xRy ∩ (xS (cid:7) T y) where xSz and zT y ∈ Θ.
If a ﬁxpoint occurs, Θ is called algebraically closed or a-
closed. If the empty relation occurs during this process, Θ
is inconsistent. In many cases a-closure decides consistency
of CSPSAT(B). This will be a requirement for applying
our methods.
In the following we say that a set of rela-
tions S is tractable/NP-hard if CSPSAT(S) is tractable/NP-
hard. Similar, a relation R is said to be tractable/NP-hard, if
CSPSAT(B ∪ {R}) is tractable/NP-hard.

2.2 The reﬁnement method

The reﬁnement method [Renz, 1999] is a general method for
proving tractability of CSPSAT(S) for given sets S ⊆ 2B
.
It requires a subset T of 2B
for which a-closure is already
known to decide CSPSAT(T ). Then the method checks
whether it is possible to reﬁne every constraint involving a
relation in S according to a given reﬁnement strategy to a
constraint involving a relation in T without changing consis-
tency. It is based on the following deﬁnition.

Deﬁnition 1 (Reduction by Reﬁnement)
Let S, T ⊆ 2B
two conditions are satisﬁed:

. S can be reduced by reﬁnement to T , if the

1. for every S ∈ S there is a TS ∈ T with TS ⊆ S,

IJCAI-07

527

oldM ← M
for every algebraically closed triple
T = (R12, R23, R13) of relations over S do
, R(cid:2)
] = oldM [R23][R(cid:2)

Algorithm: CHECK-REFINEMENTS
Input: A set S and a reﬁnement matrix M of S.
Output: fail if reﬁnements in M can make a-closed triples
of constraints over S inconsistent; succeed otherwise.
1. changes ← true
2. while changes do
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15. return succeed

T (cid:2)(cid:2) ← ALGEBRAIC-CLOSURE(T (cid:2))
if T (cid:2)(cid:2) = (R(cid:2)(cid:2)
relation then return fail
else do M [R12][R(cid:2)(cid:2)

for every reﬁnement T (cid:2) = (R(cid:2)
with oldM [R12][R(cid:2)
oldM [R13][R(cid:2)

if M = oldM then changes ← false

] ← true, M [R13][R(cid:2)(cid:2)

) contains the empty

] = true do

M [R23][R(cid:2)(cid:2)

] ← true,

) of T
] =

] ← true

, R(cid:2)(cid:2)

, R(cid:2)

, R(cid:2)(cid:2)

13

23

13

12

23

12

23

13

12

12

23

13

Figure 1: Algorithm CHECK-REFINEMENTS [Renz, 1999]
2. every a-closed set Θ of constraints over S can be reﬁned
of constraints over T by replacing xiSxj ∈
for i < j, such that enforcing a-

to a set Θ(cid:2)
Θ with xiTSxj ∈ Θ(cid:2)
closure to Θ(cid:2)

does not result in the empty relation.

It is clear that if a-closure decides CSPSAT(T ) for a set
T ⊆ 2B
, and S can be reduced by reﬁnement to T , then
a-closure decides CSPSAT(S). Therefore, it is sufﬁcient for
proving tractability of CSPSAT(S) to show that S can be re-
duced by reﬁnement to a set T for which a-closure decides
CSPSAT(T ). This can be shown by the reﬁnement algorithm
[Renz, 1999] which uses a reﬁnement matrix that manages the
different reﬁnements and which initially contains the reﬁne-
ment strategy for every relation S ∈ S to a relation T ∈ T .
Deﬁnition 2 (reﬁnement matrix)
A reﬁnement matrix M of S has |S| × 2|B|
such that for S ∈ S, R ∈ 2B

Boolean entries
, M [S][R] = true only if R ⊆ S.
The algorithm CHECK-REFINEMENTS (see Figure 1) takes
as input a set of relations S and a reﬁnement matrix M of
S. This algorithm computes all possible a-closed triples of
relations R12, R23, R13 of S (line 4) and enforces a-closure
to every reﬁnement R(cid:2)
ij ]
= true for all i, j ∈ {1, 2, 3}, i < j (lines 6-9).
If one
of these reﬁnements results in the empty relation, the al-
gorithm returns fail. Otherwise, the resulting relations
R(cid:2)(cid:2)
ij ] =
true for all i, j ∈ {1, 2, 3}, i < j (lines 10-13). This is
repeated until M has reached a ﬁxpoint, i.e., enforcing a-
closure on any possible reﬁnement does not result in new re-
lations anymore. If no inconsistency is detected in this pro-
cess, the algorithm returns succeed. A similar algorithm,
GET-REFINEMENTS, returns the revised reﬁnement matrix
M (cid:2)
if CHECK-REFINEMENTS returns succeed. If CHECK-
REFINEMENTS returns succeed, we have pre-computed all
possible reﬁnements of every a-closed triple of variables as
given in the reﬁnement matrix M (cid:2)
. Thus, applying these re-
ﬁnements to an a-closed set of constraints can never result in
an inconsistency when enforcing a-closure.

13 are added to M by setting M [Rij][R(cid:2)(cid:2)

13 for which M [Rij][R(cid:2)

, R(cid:2)(cid:2)

, R(cid:2)(cid:2)

, R(cid:2)

, R(cid:2)

12

23

12

23

So if a suitable reﬁnement strategy can be found, then
CHECK-REFINEMENTS can be used to immediately verify
that reasoning over a given set of relations is tractable.
Corollary 3 ([Renz, 1999]) Let S, T ⊆ 2B
be two sets such
that a-closure decides CSPSAT(T ), and let M be a reﬁne-
ment matrix of S. Suppose GET-REFINEMENTS(S, M ) re-
turns M (cid:2)
If for every S ∈ S there is a TS ∈ T with
M (cid:2)[S][TS] = true, then a-closure decides CSPSAT(S).

.

3 A general procedure for identifying

tractable subsets

In this section we present a procedure for automatically iden-
tifying large tractable subsets of a spatial or temporal calcu-
lus. We assume that (1) we are given a set of base relations B,
that (2) the weak compositions and the converses of the base
relations are known, and also that (3) a-closure decides con-
sistency for CSPSAT(B). A consequence of condition (3) is
that the closure (cid:2)S of a set S ⊆ 2B
under intersection, con-
verse and weak composition has the same complexity as S
[Renz and Ligozat, 2005]. In particular, it follows that (cid:2)B is

tractable. We further need the following lemma:
Lemma 4 Let S ⊆ 2B
. If a-closure decides CSPSAT(S),
then a-closure also decides CSPSAT( (cid:2)S).
Proof Sketch. Each constraint xRy of Θ over (cid:2)S is replaced
with an equivalent set of constraints Θxy over S. Θ(cid:2)
over S
is the union of all Θxy and is equivalent to Θ. Applying a-
closure to Θxy leads to xRy, hence applying a-closure to Θ(cid:2)
leads to the same result as applying it to Θ.
Note that condition (3) is not actually a strict condition. Our
procedure can also be applied if this is not yet known. How-
ever, the results of our procedure, i.e., tractability of the re-
sulting sets, is only guaranteed if condition (3) is satisﬁed.

3.1

Identifying tractable relations

Our procedure consists of three different steps which we
will describe separately. The ﬁrst step is to identify single
tractable relations, i.e., relations which give a tractable sub-
set of 2B
when combined with the base relations. During this
step we will also obtain relations which are potentially NP-
hard, i.e., single relations that might lead to an NP-hard set of
relations when combined with the base relations.

For this we will test every single relation which is not con-

tained in (cid:2)B and see whether it can be reﬁned to relations of
(cid:2)B. For every relation R (cid:9)∈ (cid:2)B, we ﬁrst compute the closure of
B ∪ {R} and apply the reﬁnement algorithm to every possi-
ble reﬁnement of R which is contained in (cid:2)B. The algorithm is

given in Figure 2 and consists of two parts, CHECK-SINGLE-
REFINEMENT (C-S-R) which checks all reﬁnements for a
single relation R that is added to an existing set of relations
T , and FIND-TRACTABLE-SINGLES (F-T-S) which calls C-
S-R for all relations not contained in (cid:2)B. Even though the clo-
sure of R and (cid:2)B will likely contain more relations, we only
initialise the reﬁnement matrix in C-S-R with a reﬁnement
for R. This reﬁnement will propagate to the other relations as
they can all be decomposed into relations of (cid:2)B ∪{R}.

IJCAI-07

528

Algorithm C-S-R has three different outcomes for a re-
lation R and a set T , succeed, fail, and unknown.
succeed means that there is an initial reﬁnement of R to
R(cid:2) ∈ T such that CHECK-REFINEMENTS computes an up-
dated reﬁnement matrix by which all relations of the clo-
sure of T ∪ {R} can be reﬁned to a relation of T without
changing consistency. If this is the case, and a-closure de-
cides CSPSAT(T ), then a-closure also decides consistency
for the closure of T ∪ {R}. This is an immediate conse-
If all possible reﬁnements of R to
quence of Corollary 3.
relations of T fail, C-S-R returns fail. In this case the clo-
sure of T ∪ {R} cannot be reﬁned to T and all attempts to
reﬁne R lead to an inconsistency. This does not say anything
about whether adding R to T leads to an NP-hard set or not.
But it means that tractability for this set cannot be proven us-
ing the reﬁnement method and that there is some likelihood
that the resulting set is NP-hard. A third possible outcome of
C-S-R is unknown, which means that there is a reﬁnement
of R to R(cid:2) ∈ T which does not result in an inconsistency, but
which also does not lead to the reﬁnement of all relations of
the closure of T ∪ {R} to relations of T . Increasing T by
some relations might lead to a successful reﬁnement of R, so
we cannot yet conclude if R leads to a tractable set or not.
in (cid:2)B while keeping track of their outcome. If a relation R
returns succeed and therefore leads to a tractable subset,
then all relations in the closure of B ∪ {R} also lead to a
tractable subset and don’t have to be tested using C-S-R. We
conclude this step with the following lemma.
Lemma 5 Let T and H be the result of F-T-S(B).
If a-closure decides CSPSAT(B),
then it also decides
CSPSAT(B ∪ {T }) for all T ∈ T .

F-T-S calls C-S-R for the different relations not contained

3.2

Identifying candidates for tractable subsets

Using the algorithm speciﬁed in the previous section, we can
identify tractable relations, but we don’t know yet how they
can be combined to form large tractable subsets. It could be
that the whole set T forms a tractable subset, but it could
also be that some of the relations in T lead to NP-hardness
when combined with each other. One possibility to ﬁnd large
tractable subsets would be to test all subsets of T using the
reﬁnement method, but there are obviously too many such
sets and we do not know which reﬁnement strategy might
work. Our next step will therefore be to ﬁnd out which re-
lations might lead to intractability when combined with each
other. For this purpose we assume that any of the relations of
the set H returned by F-T-S(B) leads to intractability when
combined with B. Under this assumption, it is clear that any
pair of relations of T that contains a relation of H in its clo-
sure cannot be contained in the same tractable subset and is
therefore incompatible. This is done in lines 2-3 of FIND-
TRACTABILITY-CANDIDATES (F-T-C) in Figure 3.

F-T-C computes all candidates for tractable subsets start-
ing from the closure of the base relations and successively
adding new tractable relations. Each new relation is ﬁrst
tested if it is incompatible with any of the relations already
contained in the candidate (line 9). If it is not incompatible,
then the closure with the current candidate is computed and

, a tractable set T ⊂ 2B

for

Algorithm: CHECK-SINGLE-REFINEMENT (C-S-R)
Input: A single relation R ∈ 2B
which T ≡ closure({T }) and a reﬁnement matrix M .
Output: succeed if the closure of {R} ∪ T can be reﬁned
to T , fail if any reﬁnement of R to R(cid:2) ∈ T leads to an
inconsistency, and unknown otherwise.
1. S ← closure({R} ∪ T ); good ← false
2. for every reﬁnement R(cid:2)
3.
4.
5.
6.
7.
8.
9. if good = true return unknown else return fail

newM ← M ; newM [R][R(cid:2)] ← true
if CHECK-REFINEMENTS(newM, S) = succeed

then M (cid:2) ← GET-REFINEMENTS(newM, S)
if ∀i ∈ S there is a j ∈ T s.t. M (cid:2)[i][j] = true

of R with R(cid:2) ∈ T do

then return succeed

else good ← true

of tractable relations and a set H ⊆ 2B

Algorithm: FIND-TRACTABLE-SINGLES (F-T-S)
Input: A set of base relations B
Output: A set T ⊆ 2B
of potentially NP-hard relations.
1. T ← closure(B); H = ∅
2. ∀i, j ∈ 2B
3. for every relation R (cid:9)∈ T do
result ← C-S-R(R,(cid:2)B, M )
4.
if result = succeed then T ← T ∪ closure({R} ∪ B)
5.
if result = fail then H ← (H ∪ {R})
6.
7. return T and H

: M [i][j] ← true if i = j and false if i (cid:9)= j

Figure 2: Algorithms CHECK-SINGLE-REFINEMENT and
FIND-TRACTABLE-SINGLES

tested whether the resulting set can be reﬁned to the current
candidate using the C-S-R algorithm (line 14). If it doesn’t
return fail, then the new relation is added to the current can-
didate. The algorithm keeps track of all relations that cannot
be added to the current candidate (lines 10,13,16). If any of
these relations is not yet contained in one of the candidates,
then a new candidate must be generated which does contain
this relation (line 20). The new candidate will be tested in
the next while loop of the algorithm. If all tractable relations
are contained in at least one candidate, then it is still possi-
ble that there are more candidates, namely, if there is a pair
of tractable relations which is not incompatible and which is
not yet contained together in any of the candidates. The al-
gorithm tests each pair of relations which is not yet contained
in a candidate set (line 22,23) and tests whether the closure
of both these relations with the base relations can be reﬁned
to the closure of one of the relations with the base relations
(line 26). If this is not possible and C-S-R returns fail,
then this pair is added to the list of incompatible pairs (line
27). If a pair is found which can be reﬁned, then a new can-
didate is formed which contains the pair (line 28) and tested
in the next loop of the algorithm. If all pairs are tested, then
the algorithm returns all candidates for tractable subsets. All
these candidates have in common that they do not contain any
incompatible pair, they do not contain a potentially NP-hard
relation, and single reﬁnements can be made without result-
ing in an inconsistency. What we do not know yet, is whether
the whole candidate can be reﬁned to a known tractable set.

IJCAI-07

529

if cl({{Ta}, {Tb}} ∪ B) ∩H (cid:9)= ∅ then L ← L ∪ (cid:11)Ta, Tb(cid:12)

(Note: cl = closure)

: M [r][s] ← true if r = s and false if r (cid:9)= s

newcand ← cl(cand ∪{Tj})
if newcand ∩H (cid:9)= ∅ then

nextrels ← ∅; newrel ← ∅; n++
for all Tj ∈ T with Tj (cid:9)∈ cand do

if there is an R ∈ cand such that (cid:11)Tj, R(cid:12) ∈ L
then nextrels ← nextrels ∪{Tj}; continue;

Algorithm: FIND-TRACTABILITY-CANDIDATES (F-T-C)
Input: A set of tractable relations T and a set of supposedly
NP-hard relations H.
Output: Candidates for tractable subsets CS i ⊆ 2B
1. L ← ∅ (set of incompatible pairs); n ← 0; max ← 1
2. for all Ta, Tb ∈ T do
3.
4. ∀r, s ∈ 2B
5. cand ←(cid:2)B; newcand ←(cid:2)B
6. while (true) do
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17.
18.
19.
20.
21. while max = n do
22.
23.
24.
25.
26.
27.
28.

if there is no such pair then return all CS i
cand ← cl(B ∪ {Tj}); newcand ← cl(cand ∪{Tk})
if C-S-R(Tk, cand, M ) = fail then

CS n ← cand
newrel is any relation in (nextrels \
if newrel (cid:9)= ∅ then

cand ← cl(B∪ newrel); newcand ← cand; max++

nextrels ← nextrels ∪{Tj}; continue;

if C-S-R(Tj, cand, M ) (cid:9)= fail then

Tk, Tj ∈ T is a pair s.t. (cid:11)Tk, Tj(cid:12) (cid:9)∈ L

and {Tk, Tj} is not contained in any CS i

L ← L ∪ (cid:11)Tk, Tj(cid:12); continue

cand ← newcand; max++

cand ← newcand

else nextrels ← nextrels ∪{Tj};

(cid:3)
i CS i)

: M [r][s] ← true if r = s and false if r (cid:9)= s

Algorithm: TEST-CANDIDATES
Input: Candidates for tractable subsets CS i of 2B
Output: Tractable subsets T S i of 2B
1. for all CS i do
queue ← ∅;
2.
∀r, s ∈ 2B
3.
for each R ∈ CS i\(cid:2)B do queue ← queue ∪(cid:11)R, 0(cid:12);
4.
tractable ←(cid:2)B;
5.
loop ← 0; changes ← false ;
6.
7. while queue (cid:9)= ∅ do
8.
9.
10.
11.
12.
13.
14.
15.
16. T S i ← tractable;
17. return T S i for all i;

take and delete the ﬁrst pair (cid:11)R,num(cid:12) from queue;
if (num > loop and changes = false) then break;
if (num > loop) then loop ← num; changes ← false;
if C-S-R(R, tractable, M) = succeed then

tractable ← closure(tractable ∪{R});
delete all (cid:11)S, n(cid:12) from queue where S ∈ tractable;
changes ← true;

else add (cid:11)R,num+1(cid:12) to the end of the queue;

Figure 4: Algorithm TEST-CANDIDATES

each relation contained in the candidate whether a reﬁnement
to the already known tractable subset is possible. If this is not
possible for a relation, the same relation will be tested again
at a later stage. In order to prove that this recursive computa-
tion indeed proves tractability, we introduce a new notion.
Deﬁnition 6 Given a set S ⊆ 2B
C(S; R1, . . . , Rn) is a recursively deﬁned subset of 2B

. The closure sequence

:

1. C(S; R) = closure(S ∪ {R})
2. C(S; R1, .., Rn) = closure(C(S; R1, .., Rn−1) ∪ {Rn})
Lemma 7 Let T ⊆ 2B
. Suppose T ≡ C(B; R1, . . . , Rn)
and M is a reﬁnement matrix where only the diagonal is true.
If C-S-R(Ri, C(B; R1, . . . , Ri−1), M ) returns succeed for
all 1 ≤ i ≤ n, then CSPSAT(T ) is tractable.
returns
Proof.
succeed, then Si = C(B; R1, . . . , Ri) can be reduced
by reﬁnement to Si−1 = C(B; R1, . . . , Ri−1) and, hence,
CSPSAT(Si) is tractable if CSPSAT(Si−1) is tractable.
Since we know that CSPSAT( (cid:2)B) can be decided by a-closure,
tractability of CSPSAT(T ) follows by successively applying
C-S-R to the corresponding closure sequence.

If C-S-R(Ri, C(B; R1, . . . , Ri−1), M )

The whole procedure is then a sequence of the three steps
(1) F-T-S, (2) F-T-C, and (3) TEST-CANDIDATES. The input
is a set of base relations together with its weak compositions,
and the output is one or more tractable subsets. As a conse-
quence of the previous lemmata, we obtain the main results.
Theorem 8 Given a set of base relations B such that a-
closure decides CSPSAT(B). For each T S i ⊆ 2B
returned
by our procedure, CSPSAT(T S i) is tractable.

Instead of using B as an input to our procedure, we can use

any other set for which a-closure decides consistency.
Theorem 9 If a-closure decides CSPSAT(S), then any set
obtained by applying our procedure to S can be reduced by
reﬁnement to S and is therefore tractable.

Figure 3: Algorithm FIND-TRACTABILITY-CANDIDATES

3.3 Testing the candidates

In this step we will prove tractability of the candidates we
found in the previous section or identify tractable subsets of
the candidates in case they are not tractable. We know that

CSPSAT( (cid:2)B) is tractable and that a candidate set is tractable
if it can be reduced by reﬁnement to CSPSAT( (cid:2)B). But which
of CSPSAT( (cid:2)B) to a larger set by adding one of the tractable

reﬁnement strategy can we use? We can extend tractability

relations and computing its closure. For the next relation to
be added, it is sufﬁcient to reﬁne it to the larger tractable sub-
set we obtained in the step before. If a new relation cannot
be reﬁned, i.e., if C-S-R returns fail we know that we can-
not add it to the current tractable subset. If C-S-R returns
unknown, we will try to add a different relation instead and
test this relation again at a later stage.

This is very similar to what has been done in the algorithm
F-T-C except for the special treatment of the relations for
which the interleaved C-S-R calls return unknown. If none
of these calls (lines 14 and 26 in F-T-C) returned unknown
for any of the relations that have been added to a candidate,
then this candidate must be tractable and no further process-
ing is required. If unknown occured while computing a can-
didate set, we have to use algorithm TEST-CANDIDATES of
Figure 4 which takes a candidate and successively tests for

IJCAI-07

530

3.4 Applying the new procedure

We implemented the procedure in C and used several optimi-
sations such as identifying relations that have the same clo-
sure, or more space efﬁcient data structures such as reﬁne-
ment arrays instead of reﬁnement matrices [Renz, 1999]. As
a general heuristic for determining the order in which rela-
tions are processed we used the size of the closure. We ap-
plied the procedure to different spatial and temporal calculi
with known maximal tractable subsets in order to test how
close the outcome of our procedure is to the actual result.

For RCC5 [Randell et al., 1992],

the known maximal
tractable subset was found instantly. For RCC8, F-T-S re-
sulted in 76 relations for H and 179 relations for T . Remark-
ably, the relations of H correspond exactly to those relations
that are known to be NP-hard [Renz, 1999]. For some rela-
tions C-S-R returned unknown, but all these relations were
added to T as part of computing the closure of other rela-
tions for which C-S-R returned succeed. The second step,
F-T-C returned three candidates for tractable subsets which
actually correspond to the three maximal tractable subsets of
RCC8 identiﬁed in [Renz, 1999]. Tractability of all three
candidates could be shown using TEST-CANDIDATES. The
whole procedure ran in less than ten minutes on a Pentium-
Duo 1.83 GHz CPU with 512MB RAM.

For the Interval Algebra, F-T-S(B) resulted in only 174 re-
lations for T and a few relations for which C-S-R returned
unknown.
If we add any one of the unknown relations
to B and use it as input to our procedure, then we obtain
the known maximal tractable subset ORD-Horn [Nebel and
B¨urckert, 1995], but this does not prove tractability of ORD-
Horn. However, we also obtain ORD-Horn if we use the
pointisable subset P as input to our procedure. Tractability
of P follows immediately from tractability of the Point Alge-
bra and a-closure decides CSPSAT(P) [Ladkin and Maddux,
1988], so this does give us a proof of tractability of ORD-
Horn. This shows us that ORD-Horn cannot be reduced by
reﬁnement to the base relations but only to a subset of P.
In all cases, our procedure terminated in less than one hour,
which is quite remarkable given the size of the Interval Alge-
bra. This could be because the Interval Algebra seems to have
a fairly simple structure: 4885 relations give 2B
when closed
with the base relations, 60 relations give ORD-Horn, and for
all 8192 relations there are only 248 different closures.

4 Discussion & Conclusions

We developed a general procedure which automatically iden-
tiﬁes large tractable subsets of a spatial or temporal calculus
given only the base relations B and their weak compositions.
The only requirement is that a-closure decides consistency for
B. We tested our procedure on RCC8 and the Interval Alge-
bra and obtained all the known maximal tractable subsets in
less than one hour. While the resulting sets are tractable, we
cannot guarantee maximality in the general case as only sets
are found which can be reduced by reﬁnement to the input set.
As seen in the case of the Interval Algebra, it can be better to
identify tractable subsets of smaller calculi ﬁrst and then use
the results for determining input sets for larger calculi. In any
case, the resulting tractable subsets should be enough to give

a considerable speed up when solving instances of the NP-
hard consistency problem. If it is unknown whether a-closure
decides consistency for B, our procedure can still be applied
and the resulting sets can still be used for obtaining consider-
ably more efﬁcient reasoning algorithms. If it turns out that
the reasoning algorithms give a wrong result for at least one
instance, then a-closure does not decide consistency for B.

An interesting consequence of our results is that for all cal-
culi which have the same weak compositions we obtain the
same resulting sets, independent of their domain. Further
analysis of our procedure is necessary in order to get a clear
understanding of the effect of the relations for which C-S-R
returns unknown. By applying our procedure to other calculi
we hope to be able to identify general criteria or heuristics of
when relations can be reduced by reﬁnement and when this is
not possible. This might give us a measure of how close the
resulting sets are to the actual maximal tractable subsets.

One point worth discussing are the consequences of hav-
ing such a procedure which automatically makes a theoretical
analysis of a problem and automatically identiﬁes efﬁcient al-
gorithms. It is certainly very desirable for people working in
applications of spatial and temporal information. They only
have to run our procedure and don’t have to wait for years for
some experts to make an analysis. On the other hand what
happens to all the experts for doing a theoretical analysis, are
they not needed anymore? Will it not be worth a publica-
tion anymore to identify tractable subsets analytically if they
can just as well be identiﬁed using our procedure? Even with
our procedure, it is still necessary to show that a-closure de-
cides consistency for the base relations. Showing this is a
very hard problem as it is necessary to relate the relations to
their semantics and to their domains. A heuristic for how to
show this is given in [Renz and Ligozat, 2005]. Also, our
procedure does not guarantee maximality. So an accompany-
ing theoretical analysis is still very useful and can give insight
into why a problem is hard.

References
[Allen, 1983] J. F. Allen. Maintaining knowledge about temporal

intervals. Comm. ACM, 26(11):832–843, Nov 1983.

[Ladkin and Maddux, 1988] P. Ladkin and R. Maddux. On binary

constraint networks. Technical Report, Kestrel Institute, 1988.

[Ligozat and Renz, 2004] G. Ligozat and J. Renz. What is a qualita-
tive calculus? a general framework. In PRICAI’04, 53–64, 2004.
[Nebel and B¨urckert, 1995] B. Nebel and H-J. B¨urckert. Reason-
ing about temporal relations: A maximal tractable subclass of
Allen’s interval algebra. J.ACM, 42(1):43–66, Jan 1995.

[Nebel, 1997] B. Nebel. Solving hard qualitative temporal reason-
ing problems: Evaluating the efﬁciency of using the ORD-Horn
class. CONSTRAINTS, 3(1):175–190, 1997.

[Randell et al., 1992] D. Randell, Z. Cui, and A. Cohn. A spatial
logic based on regions and connection. In KR’92, 165–176, 1992.
[Renz and Ligozat, 2005] J. Renz and G. Ligozat. Weak com-
In

position for qualitative spatial and temporal reasoning.
Proc. CP’05, 534–548, 2005.

[Renz and Nebel, 2001] J. Renz and B. Nebel. Efﬁcient methods

for qualitative spatial reasoning. JAIR, 15:289–318, 2001.

[Renz, 1999] J. Renz. Maximal tractable fragments of the Region
Connection Calculus: A complete analysis. In Proc. IJCAI’99,
448–454, 1999.

IJCAI-07

531

