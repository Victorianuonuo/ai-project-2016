POPS:  AN  APPLICATION  OF  HEURISTIC  SEARCH  METHODS  TO  THE  PROCESSINC 

OF  A  NONDETERMINISTIC  PROGRAMMING  LANGUAGE 

Session  22  General  Problem  Solving 

by 

Gregory  Dean  Gibbons 
Naval  Postgraduate  School 

Monterey,  California 

Abstract 

POPS  ts  a  processor  for  a  simple  nondeterministic 
programming  language,  PSL.  POPS  accepts  a  problem 
stated  in  PSL  and  attempts  to  solve  it  by  finding  a  suc(cid:173)
cessful  execution  of  the  PSL  program,  POPS  operates  by 
identifying  elements  of  the  input  program  with  elements 
of  the  heuristic  search  paradigm,  analyzing  the  input 
program  to  obtain  information  about  the  problem  opera(cid:173)
t o r s,  and  applying  methods  borrowed  from  GPS  to  solve 
the  problem. 
based  on  GPS,  POPS  contains  the  methods  developed  by 
Fikes  in  his  program  REF-ARF. 

In  addition  to  the  goal-directed  methods 

Key  words:  Problem  solving.  Heuristic  search, 

Nondetermlnistic  programming  language. 

Background 

Nondetermlnistic  Algorithms 

Robert  Floyd  (Floyd,  1967)  suggested  that  a  com(cid:173)

piler  for  a  nondetermlnistic  programming  language  (NDPI.) 
could  be  used  as  a  problem  solver.  His  NDPL  was  o b(cid:173)
tained  by  adding  to  Algol  the  function  CHOICE (N)  and 
two  special  labels  for  e x i t s,  SUCCESS  and  FAILURE. 
The  value  of  CHOICE(N)  is  an  unspecified  Integer  b e(cid:173)
tween  1  and  N.  Only  executions  that  terminate  with  a 
SUCCESS  exit  are  considered  to  be  computations  of  the 
algorithm.  The  programmer  may  impose  constraints  on 
the  values  of  the  program  variables  by  inserting,  for 
example, 
IF  statements  that  direct  the  flow  of  control 
to  a  FAILURE  exit  unless  the  constraints  are  satisfied. 
In  this  way  the  programmer  specifies  what  constitutes  a 
solution  to  his  problem. 

The  proposed  problem  solver  would  operate  as  a 

compiler  by  translating  a  nondetermlnistic  program  into 
a  deterministic  one  and  executing  the  resulting  program. 
The  deterministic  program  is  so  constructed  as  to  simu(cid:173)
late  the  input  program  by  enumerating  the  possible  com(cid:173)
binations  of  values  of  the  CHOICE  f u n c t i o n. 

Floyd  illustrated  his  proposal  with  a  complete 

statement,  translation,  and  solution  of  a  sophisticated 
representation  of  the  Eight  Queens  problem.  This  e x(cid:173)
ample  shows  clearly  that  programming  a  problem  in  his 
nondetermlnistic  language  is  much  easier  than  program(cid:173)
ming 
language.  However, 
it  is  also  clear  that  the  solution  is 
obtained  by  a  blind  generate  and  test  search.  Thus,  u n(cid:173)
sophisticated  representations  of  problems  having  large 
search  sp.aces  would  result  In  unacceptably  long 

corresponding  search  in  a  conventional 

the 

389 

execution  times. 

Interpretation  of  Nondetermlnistic  Programs 

Nondetermlnistic  programs  are  convenient  for  stat(cid:173)

ing  problems  because  they  leave  unspecified  the  order  in 
which  some  alternatives  are  to  be  considered.  Conse(cid:173)
quently,  the  process  that  interprets  a  nondeterministic 
program  must  determine  for  itself  which  alternative  to 
consider  at  a  given  t i m e. 

A  processor  for  a  language  containing  a  CHOICE 

If  the 

function  must  select  values  for  the  function. 
language  contains  a  nondeterministic  branch  instruc(cid:173)
t i o n,  or  if  the  particular  program's  flow  of  control  d e(cid:173)
pends  on  the  value  of  a  CHOICE  function,  the  proces(cid:173)
sor  must  select  possible  control  paths  as  w e l l.  A 
problem  represented  by  a  nondeterministic  program  i s, 
therefore,  a  search  problem  In  the  space  of  possible 
combinations  of  values  of  the  CHOICE  function  and  pos(cid:173)
sible  control  paths  through  the  program. 

In  the  former  case,  the  pro(cid:173)

Nondeterministic  programs  f a ll  into  two  categories: 
those  in  which  the  flow  of  control  is  deterministic,  and 
those  in  which  it  is  not. 
cessor  may  be  required  to  select  values  for  the  program 
variables  so  that  certain  constraints  are  s a t i s f i e d. 
this  selection  is  made  symbolically,  the  processor  can 
execute  the  program  until  and  END  statement  ts  e n(cid:173)
countered,  at  which  time  the  symbolic  selections  must 
be  replaced  by  actual  values.  Such  problems  are  refer(cid:173)
red  to  as  constraint  satisfaction  problems.  Fikes's  pro(cid:173)
gram  REr-ARF  solves  a  class  of  constraint  satisfaction 
problems  of  considerable  d i f f i c u l t y. 

If 

To  execute  a  program  having  nondetermlnistic  con-

f l o w,  a  processor  must  select  the  control  path  it  w i ll 
f o l l o w,  as  w e ll  as  the  values  for  the  program  variables. 
The  problems  represented  by  programs  inthe  second  c a t e(cid:173)
gory  are  heuristic  search  (HS)  problems. 

REF-ARF 

Richard  Fikes  (Ftkes,  1968,  1970)  implemented  a 

problem  solving  system,  REF-ARF,  based  on  Floyd's 
suggestion,  but  containing  much  improved"  solution 
methods.  Tikes  represents  nondeterministic  values  sym(cid:173)
bolically  by  creating  internal  variables.  Constraints  are 
represented  as  formulas  involving  these  variables.  This 
representation  allows  the  use  of  algebraic  simplification 
methods  to  reduce  the  size  of  the  space  to  be  searched. 
Fikes's  most  powerful  solution  method  consists  of  a l(cid:173)
ternating  value  instantiation  and  algebraic  s i m p l i f i c a(cid:173)
t i o n,  effectively  reducing  large  spaces  to  anything  from 
a  few  to  a  few  hundred  nodes.  This  method  enables 
REF-ARF  to  solve  some  constraint  satisfaction  problems 
that  would  not  only  swamp  a  system  designed  along  the 

lines  suggested  by  Floyd,  but  would  prove  very  difficult 
for  humans  to  solve  as  w e l l. 

P.EF-ARF  w i ll  accept  HS  problems,  but  is  e s s e n t i a l(cid:173)
ly  limited  to  a  generate  and  test  algorithm  in  its  search 
for  an  executable  path  through  the  program.  HS  prob(cid:173)
lems  can  induce  REF-ARF  to  expend  thousands  of  times 
more  effort  than  is  Intrinsically  required  by  the  problem. 
For  example,  tf  the  Missionaries  and  Cannibals  pro(cid:173)
blem  Is  represented  by  a  program  w i th  a  single  loop  rep(cid:173)
resenting  a  crossing  of  the  river,  and  the  loading  of  the 
boat  is  selected  nondetermintstically,  then  each  path 
through  the  program  w i ll  represent  a  constraint  s a t i s(cid:173)
faction  problem  having  two  selections  for  each  crossing 
of  the  river.  Ref2 ,  an  early  version  of  POPS  which  used 
the  same  search  mechanism  as  REF-ABF,  was  presented 
w i th  such  a  program.  Calculation  showed  that  the  s o l u(cid:173)
tion  would  have  required  over  32  hours  of  360/67  t i m e. 

POPS 

POPS  (Procedure  Oriented  Problem  Solver)  extends 

Fikes's  work  by  including  the  successful  methods  of 
REF-ARF  in  a  system  designed  to  solve  heuristic  search 
problems.  POPS  was  written  in  Lisp  1.5  and  run  on  the 
360/67  computer  at  the  Naval  Postgraduate  School  using 
the  Waterloo  Lisp  Interpreter  (Bolce,  1967). 

The  Problem  Statement  Language.  PSL 

PSL  is  a  simple  algebraic  language,  similar  to 

Fikes's  language,  REF.  PSL  contains  a  nondetermin-
istic  choice  function  SELECT(A),  whose  value  is  some 
element  of  the  named  range  A.  The  user  may  impose 
constraints  on  the  values  of  the  program  variables  by 
using  the  statement  cONDTCION(B),  which  means  that  at 
the  time  the  statement  is  executed  the  boolean  expres(cid:173)
sion  B  must  be  s a t i s f i e d.  PSL  also  contains  a  nonde-
termintstic  branch  Instruction,  GOTOL  (LI,1,2 
. ..  Ln). 
GOTOL  is  essentially  a  computed  GO  TO  w i th  the  index 
unspecified. 

An  Approach  to  Heuristic  Search  Problems:  GPS 

REF-APF's  considerable  success  with  constraint 

satisfaction  problems  is  due  largely  to  algebraic  s i m p l i(cid:173)
fication  methods  which  allow  it  to  reduce  its  search 
space  without  eliminating  valid  solutions.  Unfortunate(cid:173)
l y,  there  is  no  similar  way  of  reducing  the  space  of  pos(cid:173)
sible  execution  paths  when  a  program's  flow  of  control 
is  nondeterministic.  The  alternative  is  to  provide  some 
mechanism  whereby  the  processor  can  make  informed 
decisions  in  its  search  for  a  successful  control  path. 
The  GPS  work  of  Newell  and  others  (Newell,  Simon,  and 
Shaw,  1963;  Ernst  and  N e w e l l,  1969)  provides  such  a 
mechanism,  namely,  the  selection  of  operators  on  the 
basis  of  their  apparent  usefulness  ln  the  current 
situation. 

A  problem  statement  for  GPS  contains  a  set  of  o b(cid:173)
jects  which  are  transformable  by  a  given  set  of  opera(cid:173)
t o r s.  A  problem  takes  the  form:  given  an  Initial  object 
X .,  find  a  sequence  of  operators  q  such  that  the  p r e d i(cid:173)
cate  P  is  true  of  the  object  q ( X J.  GPS  attempts  to  t r a n s(cid:173)
form  the  i n i t i al  object  into  a  desired  object  by  matching 
the  i n i t i al  object  to  the  desired  object  (or  to  the  p r o(cid:173)
perties  of  a  desired  object)  in  order  to  obtain  a  d i f(cid:173)
ference;  GPS  then  attempts  to  reduce  the  difference  by 

590 

applying an  operator  to  the  object.  The  operator  is  selec(cid:173)
ted  by  means  of  a  table  of  connections  which  indicates 
the  relevance  of  the  operators  to  the  various  differences. 

The  POPS  Program 

POPS  solves  heuristic  search  problems  by  applying 
GPS  techniques  to  the  interpretation  of  PSL.  L ke  GPS, 
POPS  operates  by  transforming  an  i n i t i al  object  into  a 
desired  object  by  the  application  of  operators. 

The  task  environment  of  POPS. 

In  the  task  environ(cid:173)
ment  of  POPS,  an  object  is  a  path  from  the  beginning  to 
the  end  of  a  PSL  program. 
If  the  entry  and  exit  points  of 
the  program  are  given  l a b e l s,  and  tf  every  point  in  the 
program  at  which  control  paths  join  is  l a b e l l e d,  then 
every  execution  path  corresponds  to  a  string  of  l a b e l s. 
The  set  of  such  strings  of  labels  can  be  given  by  a 
grammar. 

POPS  obtains  a  suitable  grammar  by  identifying  a ll 
simple  closed  paths  in  the  program  and  all  simple  paths 
from  the  beginning  to  the  end  of  the  program.  For  e x(cid:173)
ample,  the  program  whose  flowchart  appears  in  Figure  1 
has  possible  execution  paths  given  by  the  following 
grammar: 

S  -  BEGIN  A  EXIT 

A -A  M l fl 

|  A M2  A 

| 

. .. 

)A  Mn  A 

Thus,  solving  a  problem  stated  as  a  PSL  program  can  be 
considered  as  searching  in  the  space  of  strings  of  l a b e l s. 
The  i n i t i al  object  is  (BEGIN  A  EXIT),  and  each  subse(cid:173)
quent  object  results  from  applying  one  of  the  rules  of  the 
grammar  for  the  program  to  a  previously  generated  object. 

The  final  object  is  a  string  of  labels  representing  a 

path  through  the  program  such  that  If  the  path  were  e x(cid:173)
ecuted,  a ll  the  constraints  would  be  satlsfiable.  Clear(cid:173)
ly  not  a ll  grammatically  legal  paths  have  this  property. 
Thus,  the  search  process  must  select  the  rules  to  apply 
at  each  point,  and  verify  that  at  each  point  in  the  path 
the  current  constraints  can  be  s a t i s f i e d.  Such  a  path 
w i ll  be  referred  to  as  a  legal  path. 

Because  applying  a  rule  of  the  grammar  to  a  string 
can  result  ln  an  i l l e g al  path,  the  process  of  applying  an 
operator  in  the  original  problem  is  represented  by  apply(cid:173)
ing  a  rule  of  grammar  and  then  executing  the  PSL  program 
along  the  control  path  represented  by  the  resulting 
s t r i n g. 
unsatlsfiable  constraint,  then  the  operator  represented 
by  rule  does  not  apply  to  the  object  represented  by  the 
previous  string  of  l a b e l s. 

If  this  execution  results  in  the  creation  of  an 

Description  of  operators.  POPS  uses  a  technique 

similar  to  that  of  GPS  to  make  rational  selections  of 
operators. 
In  place  of  a  table  of  connections,  POPS 
uses  a  description  of  the  effects  of  the  problem  opera(cid:173)
t o r s.  To  obtain  these  descriptions,  POPS  executes  each 
operator  in  i s o l a t i o n, 
the  effects  of  any  prior  operators.  By  examining  the 
assignments  and  the  constraints  so  generated,  POPS 
constructs  a  simple  description  of  the  operator's  e f f e c t s. 
Presently,  this  description  consists  of  1)  a  l i st  of  the 
program  variables  that  are  used  before  they  are  assigned, 
2)  a  l i st  of  program  variables  that  are  changed,  3)  the 

i . e .,  with  no  assumptions  about 

set  of  constraints  that  must  be  satisfied  before  the 
operator  may  be  applied,  and  4)  the  size  of  the  operator, 
as  measured  by  the  number  of  symbols  in  the  data  struc(cid:173)
ture  generated  by  the  t r i al  execution  of  the  operator. 
While  the  current  set  of  descriptors  is  minimal.  it  ls 
sufficient  to  guide  POPS  directly  to  the  solutions  of 
several  simple  heuristic  search  problems,  as  w i ll  be 
seen.  More  sophisticated  analysis  of  operators  would 
facilitate  more  intelligent  selection  of  operators  by  the 
problem  solver,  and  should  enable  it  to  solve  more  sub(cid:173)
stantial  problems. 

Differences.  Since  any  complete  executable  path 

is  an  acceptable  final  object,  the  match  is  accomplished 
by  attempting  to  execute  the  path  represented  by  the  o b(cid:173)
j e c t. 
If  a  path  is  not  executable,  it  is  because  at  some 
point  in  the  execution  of  the  path,  the  processor  e n(cid:173)
counters  a  constraint  that  cannot  be  satisfied.  The  pro(cid:173)
cessor then  returns  a  triple  (L,  R,  D),  where  L  is  the 
portion  of  the  path  that  can  be  executed,  R  is  the  r e(cid:173)
mainder  of  the  path,  and  D  is  the  unsatisfiable  c o n(cid:173)
straint,  together  with  a  description  of  what  changes  to 
the  program  variables  must  be  made  in  order  to  satisfy 
the  constraint.  This  description  is  the  POPS  version  of 
the  GPS  difference. 

Selection  of  operators.  To  select  an  operator, 

POPS  compares  the  difference  with  the  descriptions  of 
the  available  operators,  and  selects  the  operator  that 
appears  most  promising.  Currently,  POPS  selects  the 
operator  that  changes  the  most  program  variables  need(cid:173)
ing  change. 
In  case  of  a  t i e,  it  selects  the  operator 
that  changes  the  fewest  variables  having  acceptable 
values.  Finally, 
if  there  is  s t t ll  more  than  one  c a n d i(cid:173)
date  operator,  POPS  selects  the  smallest  one. 

Example.  Consider,  for  example,  the  Msnkey  pro(cid:173)
blem ,  given  in  Figure  2.  The  grammar  for  the  PSL  pro(cid:173)
gram  i s: 

-  BEGIN  A  GET_BANANAS 
S 
A  -  A  WALK A  (  A  CARRY  A 

I  A  CLIMB  A 

If  this 

The  i n i t i al  object  is  (BEGIN  A  GET_BANANAS). 
path  is  executed,  a  contradiction  w i ll  be  found  after 
passing  A,  because  the  necessary  conditions  for  e x i t(cid:173)
ing the  program  have  not  been  met  —  the  monkey  doesn't 
have  the  bananas.  The  goal  then  becomes  that  of  mak(cid:173)
ing  the  offending  constraint  TRUE.  This  requires 
changing  the  values  of  M ( l ),  M(2)  and  B ( l ).  Since 
WALK  changes  M { 1 ),  CARRY  changes  M ( l)  and  B ( l ), 
and  CLIMB  changes  M ( 2 ), 
it  is  reasonable  to  guess 
that  rule  A  -  A  CARRY  A  should  be  applied.  The  pro(cid:173)
posed  path  then  becomes: 

(BEGIN  A  CARRY  A  GET_BANANAS). 

When  execution  of  this  path  is  attempted,  however,  a 
contradiction  is  encountered  at  CARRY: 
cannot  carry  the  box  unless  he  is  located  where  the  box 
i s,  i . e .,  M ( l)  =  B ( l ).  The  subgoal  then  becomes: 
make  M ( l)  =  B(l)  true.  Both  WALK  and  CARRY  change 
M ( l ),  but  CARRY  does  other  things  as  w e l l,  so 
A  -  A  WALK  A  is  the  move  to  t r y.  The  proposed  path  is 
then: 

the  monkey 

(BEGIN  A  WALK A  CARRY  A  GET_BANANAS). 

Execution  of  this  path  proceeds  into  GET_BANANAS 

591 

before  finding  a  false  constraint.  This  one  is:  M(2)=box, 
representing  that  the  monkey  must  be  on  the  box.  The 
correct  move  is  A  -  A  CLIMB  A.  The  path  becomes: 

(BEGIN  A WALK  A  CARRY  A  CLIMB  A  GET_BANANAS). 

Since  this  path  can  be  successfully  executed,  the  s o l u(cid:173)
tion  has  been  found. 

Redundancy  Tests 

POPS  employs  tests  to  prevent  two  types  of  redun(cid:173)
dancy  in  its  search  for  a  complete  executable  path.  A 
newly  generated  path  is  redundant  if  it  is  either  i d e n t i(cid:173)
cal  with  or  equivalent  to  a  previously  generated  path. 
Equivalent  paths  can  be  generated,  for  instance,  if  there 
are  two  operators  q1  and  q2  such  that  cTJd^  an(^  q2 9] 
achieve  the  same  effect. 
ated  as  follows: 

Identical  paths  can  be  g e n-

( AC  A ) - ^^ 

Here  the  two  operators  A  -•  A  B  A  and  A  -•  A  C  A  have 
been  used  to  expand  (A)  to  generate  ( A B A C A)  in  two 
different  w a y s. 

POPS  tests  newly  generated  paths  for  equivalence 
to  previous  paths  by  comparing  the  state  of  the  program 
variables  resulting  from  the  execution  of  the  new  path 
with  the  results  of  executing  previously  generated  paths. 
This  comparison  can  be  rather  expensive  if  the  variable 
values  are  formulas;  however,  the  comparison  is  e s s e n(cid:173)
t i al  to  limit  search. 

POPS  automatically  avoids  the  generation  of  i d e n t i(cid:173)

| Q J.  The 

cal  paths  by  restricting  the  selection  of  operators  a c(cid:173)
cording  to  a  rule  known  as  the  O-size  r u l e.  Each  opera(cid:173)
tor  Q  Is  assigned  a  unique  size,  denoted 
O - s i ze  rule  provides  that  an  operator  Q  may  be  consider(cid:173)
ed  for  application  to  a  path  P  =  (L,  R,  G)  only  if 
|0  |  <  QR  and 
\Q  \  <  Q L,  where  QL  is  the  size  of 
the last  operator  used  to  generate  L  and  OR  is  the  size 
of  the  next  operator  in  R. 
I n t u i t i v e l y,  one  may  consider 
the  size  of  an  operator  to  be  its  d i f f i c u l t y.  The  Q-size 
rule  then  predicates  that  POPS  w i ll  consider  applying 
an  operator  to  an  object  only  if  the  operator  is  easier 
than  its  immediate  supergoal  and  no  more  difficult  than 
the  previous  g o a l. 

The  Importance  of  the  Q-size  rule  is  that  it  prevents 

the  catastrophic  proliferation  of  identical  nodes  in  the 
program's  search  space.  Without  such  a  test,  the  num(cid:173)
ber  of  redundant  nodes  can  grow  as  fast  as  N!  ,  where 
N  is  the  number  of  operators  applied  to  generate  a  single 
node.  The  redundancy  could  be  eliminated  by  means  of 
a  direct  comparison  with  previous  nodes;  indeed,  this 
ls  the  usual  practice.  However,  the  number  of  compari(cid:173)
sons  required  grows  exponentially  with  N. 
In  contrast, 
the  cost  of  the  Q-slze  rule  is  only  two  comparisons  per 
node  generated.  These  assertions  about  the  Q-size 
rule  are  proved  elsewhere  (Gibbons,  1972). 

POPS  flowcharts.  The  flowcharts  for  the  major  prob(cid:173)

lem  solving  processes  in  POPS  are  given  in  Figure  3. 
POPS  itself  is  an  executive  routine  that  analyzes  the  PSL 
program  to  obtain  the  grammar  and  operator  descriptions, 
and  then  enumerates  the  simple  paths  through  the  PSL 

program  until  one  is  found  that  can  be  converted  into  a 
legal  path.  The  other  programs,  TRANSFORM,  FIXPATH 
and  APPLY  are  similar  to  the  GPS  methods  TRANSFORM  , 
REDUCE,  and  APPLY,  respectively,  as  given  in  Newell 
and  Simon  (1963). 
In  FIXPATH,  the  l i st  of  operators  is 
filtered  by  the  Q-size  Pule  before  an  operator  is  selec(cid:173)
t e d.  The  operation  "assign  If  appropriate"  selects 
actual  values  for  nondeterministic  expressions  under 
certain  circumstances. 
ment  w i ll  be  discussed  in  the  following  section. 

Issues  surrounding  this  a s s i g n(cid:173)

Performance  of  Pops 

The  performance  of  POPS  can  be  easily  evaluated 
by  means  of  a  comparison  with  the  performance  of  Ref2 
on  the  same  problem.  Ref2  is  the  immediate  predeces(cid:173)
sor  of  POPS,  and  contains  the  same  basic  machinery  i n(cid:173)
cluding  formula  manipulation  processes,  data  repre(cid:173)
sentation,  and  constraint  satisfaction  methods.  The 
design  of  Ref2  is  sufficiently  similar  to  that  of  REF-ART, 
except  in  its  data  representation,  that  comments  about 
the  performance  of  Ref2  apply  equally  w e ll  to  REF-ARr. 
The  performances  of  Ref2  and  POPS  on  the  problems  d i s(cid:173)
cussed  are  summarized  in  Figure  9. 

The  GPS-like  control  structure  of  POPS  and  the 

basic  control  of  search  provided  by  the  Q-size  rule  and 
the  redundancy  t e s t,  provide  a  skeleton  of  a  problem-
solver.  The  sources  of  problem  solving  power  in  POPS 
are  the  processes  that  analyze  the  PSL  program  to  get 
a  description  of  the  operators,  select  the  operator  to 
apply  during  FIXPATH,  and  decide  whether  to  assign 
values  to  variables  during  FIXPATH,  and  if  so,  what 
values  to  a s s i g n.  The  performance  of  POPS  depends 
directly  on  the  adequacy  of  these  description  and  com(cid:173)
parison  processes.  These  processes  are  rather  r u d i(cid:173)
mentary  at  present,  yet  they  suffice  to  guide  POPS  to 
the  solution  of  some  simple  US  problems  that  REF-ARF 
and  Ref2  were  unable  to  solve  w i th  reasonable  effort. 

The  Missionaries  and  Cannibals  Problem 

is  unable  to  solve 

the  Missionaries  and  C a n(cid:173)

Ref2 

nibals  problem  as  stated  in  Figure  4.  The  problem 
statement  contains  only  one  operator.  Executing  the 
operator  requires  that  two  selections  be  made  from  a 
range  of  three  possible  values.  Ref2  approaches  this 
program  by  executing  directly  to  the  end,  where  it  e n(cid:173)
counters  a  constraint  satisfaction  problem. 
If  it  finds 
no  solution  to  the  constraint  satisfaction  problem, 
Ref2  attempts  an  alternate  path  to  the  e n d.  Since  the 
solution  of  the  problem  requires  eleven  crossings  of 
the  river,  and  each  crossing  is  accomplished  by  one 
execution  of  the  loop  in  the  program,  the  first  ten  c o n(cid:173)
straint  satisfaction  problems  w i ll  have  no  solution. 
Since  each  crossing  of  the  river  generates  two  a d d i(cid:173)
tional  variables,  we  may  estimate  the  size  of  the  nth 
constraint  satisfaction  problem  to  be  Kn,  where  K  is 
the  average  number  of  possible  selections  generated 
by  one  crossing  of  the  river. 

On  being  given  this  program,  Ref2  ran  out  of  time 
at  eight  minutes,  having  f a i l ed  to  complete  the  search 
on  the  f i f th  constraint  satisfaction  problem. 
If  we  a s(cid:173)
sume  K  =  3,  then  the  total  space  Ref2  would  search 
through  the  f i f th  constraint  problem  would  contain  about 
540  nodes,  so  that  the  search  rate  established  by  Ref2 

592 

is  roughly  540  nodes  per  eight  minutes.  Under  these 
assumptions,  the  total  space  to  be  searched  by  Ref2  up 
through  the  tenth  crossing  of  the  river  is  roughly 
133,000  nodes. 
crossing  of  the  river  after  computing  for  something  in 
excess  of  32  hours  on  the  problem. 

In  short,  Kef2  would  start  on  the  final 

Whether  the  above  estimate  is  accurate  is  immateri(cid:173)

a l;  the  point  of  consequence  here  is  that  delaying  the 
determination  of  actual  values  for  the  nondeterministic 
selections  causes  Ref2  to  expend  a  tremendous  amount 
of  time  on  redundant  search.  The  space  of  the  M i s s i o n(cid:173)
ary  problem  is  actually  remarkably  small  -  only  sixteen 
distinct  legal  configurations  can  be  reached  from  the 
i n i t i al  node. 

In  contrast  to  Ref2's  estimated  time  of  32  hours, 

POPS  solves  the  Missionary  problem  in  somewhat  less 
than  six  minutes.  The  search  conducted  by  POPS  is 
shown  in  Figure  5.  This  success  is  based  on  a  method 
of  assigning  actual  values  to  nondeterministic  selec(cid:173)
tions  before  the  end  of  the  program  has  been  reached. 

When  to  assign  actual  values.  An  assignment  is 

If  the  range  A  contains 

made  only  if  failing  to  do  so  would  deepen  the  space  of 
the  constraint  satisfaction  problem  at  the  end  of  the 
program.  For  instance,  if  an  operator  contains  an  a s(cid:173)
signment  such  as  X  =  X  +  SELECT  (A),  and  the  current 
value  of  X  is  already  SELECT  (A),  then  the  eventual  c o n(cid:173)
straint  satisfaction  problem  would  contain  variables 
representing  both  selections. 
N  elements,  the  number  of  possible  selections  would  be 
N ^,  but  the  number  of  distinct  values  of  X  could  be  as 
small  as  2 N.  Before  applying  the  operator  in  such  a 
case,  POPS  chooses  an  actual  value  for  the  first  selec(cid:173)
t i o n.  Then  after  the  operator  is  applied,  the  value  of  X 
s t i ll  depends  on  only  one  SELECT  operator.  Conse(cid:173)
quently,  In  the  Missionary  problem,  each  of  the  c o n(cid:173)
straint  satisfaction  problems  encountered  at  the  end  of 
the  program  has  only  two  variables,  and  the  constraint 
satisfaction  problem  space  searched  by  POPS  in  the 
first  ten  crossings  contains  roughly  30  nodes. 

Selection  of  actual  values  to  assign. 

In  choosing 
an  actual  value,  POPS  attempts  to  find  the  value  that  is 
most  likely  to  be  helpful  in  solving  the  problem.  For 
example,  in  the  Missionary  Problem,  where  the  selec(cid:173)
tions  determine  the  number  of  missionaries  and  the  num(cid:173)
ber  of  cannibals  to  place  in  the  boat  for  a  crossing  of 
the  river,  POPS  makes  selections  that  maximize  the 
number  of  persons  being  transported  to  the  right  side  of 
river  and  minimize  the  number  being  transported  to  the 
left  side  of  the  river.  The  sense  of  direction  this  gives 
the  search  can  be  seen  in  Figure  5. 

When  POPS  selects  an  operator, 

it  is  attempting  to 
find  one  that  w i ll  modify  the  current  state  of  the  program 
in  a  direction  that  w i ll  tend  to  satisfy  some  currently 
unsatisfied  constraint.  This  constraint  is  also  used  to 
guide  the  selection  of  actual  values.  For  example, 
in 
the  Missionary  problem,  the  constraint  on  the  exit 
branch  of  the  program  says,  among  other  t h i n g s,  that 
the  number  of  missionaries  on  the  right  side  of  the  river, 
MR,  should  be  3.  Suppose  the  current  value  of  MR  is 
SELECT  (A),  where  A  =  {0,  1,  2}.  Then  the  first  choice 
POPS  w i ll  make  for  the  value  of  t h is  selection  is  2, 
since  that  choice  minimizes  the  difference  between  the 

current  and  desired  values  of  MR. 
If  the  current  value 
of  MR  were  -SELECT(A),  then  the  first  choice  would  be 
0,  for  the  same  reason. 

The  Monkey  Problem 

The  Monkey  problem  has  been  formulated  in  three 

different  w a y s.  The  performance  of  POPS  on  these  three 
problem  statements  illustrates  its  dependence  on  the  i n(cid:173)
formation  it  can  derive  from  the  PSL  program.  Briefly, 
one  version  contains  sufficient  information  that  POPS 
makes  no  wrong  decisions  in  the  solution  process.  The 
other  two  formulations  require  some  search.  Flow(cid:173)
charts  for  these  formulations  are  shown  in  Figure  6. 

MB4  .and  MB2.  The  first  version  of  the  Monkey 
problem  w i ll  be  referred  to  as  MB4,  because  the  c o n(cid:173)
straint  on  the  exit  branch  of  the  program  specifies  what 
the  values  of  each  of  the  four  variables  in  the  program 
must  be.  The  second  version  w i ll  be  called  MB2,  b e(cid:173)
cause  it  is  identical  to  MB4  except  that  the  constraint 
on  the  exit  branch  of  the  program  specifies  the  values 
of  only  two  variables.  MB4  requires  the  monkey  to  be 
on  the  box  under  the  bananas  end  the  box  to  be  on  the 
floor  under  the  bananas.  MB2  requires  only  that  the 
monkey  be  on  the  box  under  the  bananas,  and  says 
nothing  about  the  box.  Of  course,  because  of  the  struc(cid:173)
ture  of  the  problem,  the  box  must  be  under  the  bananas 
and  on  the  floor  in  order  for  the  monkey  to  be  on  the  box 
under  the  bananas,  so  that  any  solution of  MB2  is  a 
solution  of  MB4. 

POPS  does  not  recognize  the  necessity  of  moving 
the  box  in  MB2  until  it  fails  to  solve  the  problem  w i t h(cid:173)
out  moving  the  box.  Thus,  POPS  obtains  less  guidance 
from  the  constraints  in  MB2  than  it  does  from  the  con(cid:173)
straints  in  MB4;  as  a  result,  while  POPS  goes  directly 
to  a  solution  in  MB4,  it  is  forced  to  perform  some  search 
in  MB2.  The  executions  of  MB4  and  MB2  by  POPS  are 
shown  in  Figure  7. 

Because  M B4  and  MB2  are  identical  except  for  the 

constraint  on  the  exit  branch,  and  because  Ref2  gets 
no  direction  from  the  constraints,  Ref2  carries  out  the 
same  search  on  MB4  as  it  does  on  MB2.  Thus,  be(cid:173)
cause  of  its  ability  to  use  constraints  to  guide  the 
selection  of  operators,  POPS  not  only  searches  a  smal(cid:173)
ler  space  than  Ref2  on  MB2,  but  is  also  able  to  make 
use  of  the  additional  Information  in  MB4  to  reduce  the 
search  further. 

MBF.  The  third  version  of  the  Monkey  problem  that 

POPS  has  r u n,  called  MBF,  is  a  translation  of  Fikes's 
statement  of  the  problem  for  BEF-ARF.  MBT  was  c o n(cid:173)
sidered  in  order  to  get  a  direct  comparison  of  Ref2  and 
POPS  w i th  REF-ARF,  since  Fikes  does  not  report  running 
problems  stated  like  MB2  and  MB4.  The  search  carried 
out  by  REF-ARF  on  MBF  generated  28  nodes. 

The  chief  difference  between  MBF  and  MB4  is  that 
the  control  structure  in  MBF  carries  some  information  of 
potential  value  to  the  problem  solver,  whereas  MB4  is 

in  strictly  HS  form.  Ref2  performs  considerably  better 
on  MBF  than  on  MB4.  POPS,  however,  finds  a  solution 
for  MBF  after  applying  only  one  operator,  generating  a 
space  of  only  two  nodes. 

Robot  and  Two  Boxes  Tasks* 

This  is  a  sequence  of  simple  robot  tasks  with  a 

single  i n i t i al  situation. 
In  the  i n i t i al  s i t u a t i o n,  there 
is  a  room,  and  A,  B,  O,  and  D  are  locations  within  i t. 
The  robot  is  at  location  A,  and  two  boxes,  B1  and  B2, 
are  at  location  B.  The  following  actions  are  available 
to  the  robot: 
it  can  walk  to  any  location  in  the  room;  if 
the  robot  and  box  B2  are  at  the  same  location  as  box  B l, 
the  robot  can  stack  B2  on  top  of  B l;  and  if  the  robot  is 
at  the  same  location  as  Bl  ,  the  robot  can  push  Bl  to  any 
location  in  the  room.  Thus,  the  only  way  the  robot  can 
move  B2  to  another  location  is  by  stacking  it  on  Bl  and 
pushing  B1.  Also,  the  robot  must  know  whether  B2  has 
been  moved  or  not. 

There  are  five  tasks  in  the  sequence.  They  are; 

1:  The  null  task 
2:  Move  the  robot  to  location  C 
3:  Move  Box  Bl  to  location  C 
4:  Move  Box  B2  to  location  C 
5:  Move  Box  82  to  location  C  and  Box  Bl  to 

location  B 

These  tasks  were  intended  to  be  of  gradually  increasing 
complexity  so  that  some  indication  of  the  effect  of  in-
creasing  complexity  on  the  performance  of  POPS  could  be 
obtained.  This  sequence  of  problems  was  also  given  to 
Ref2  for  comparison  purposes. 

POPS  executions  of  the  robot  problems.  The  null 
t a s k,  p r o b l e m 1,  is  included  in  order  to  determine  the 
cost  of  i n i t i a l i z a t i o n;  POPS  spends  9.9  seconds  solving 
this  problem.  There  is  no  search.  The  second  task  r e(cid:173)
quires  one  operator,  WALK.  POPS finds  and  a p p l l e s t b is 
operator  in  2,5  seconds.  Problem  3,  move  box  Bl  to  C, 
is  also  simple,  because  the  robot  can  push  the  box. 
The  solution  requires  two  steps,  however-  POPS  first 
attempts  to  apply  the  operator  that  pushes  B1.  Before 
that  operator  can  be  applied,  however, 
it  is  necessary 
to  apply  WALK,  to  get  the  robot  to  the  same  location  as 
B l.  POPS  selects  and  applies  these  two  operators  in 
6.9  seconds,  or  3.45  seconds  per  subgoal.  To  move 
Box  B2  to  C  {problem  3),  it  is  necessary  to  push  Bl  over 
to  B2,  stack  B2  on  B l,  and  then  push  them  both  to  C, 
requiring  a  total  of  four  operators  and  taking  POPS  17,8 
seconds  plus  i n i t i a l i z a t i o n,  or  4.45  seconds  per  subgoal. 
In  the  fifth  problem,  POPS  must  move  B2  to  O  as  in  pro(cid:173)
blem  4  and  then  unstack  B2  from  Bl  and  push  Bl  to  l o c a(cid:173)
tion  B.  After  stacking  B2  on  Bl  and  pushing  them  to 
location  C,  POPS  erroneously  selects  WALK  Instead  of 
attempting  to  push  B1,  thereby  generating  seven  sub-
goals  Instead  of  the  necessary  s i x,  for  a  cost  of  35.1 
seconds,  or  5  seconds  per  subgoal. 

Figure  8  shows  the  search  POPS  conducted  on  these 

problems.  The  performance  of  POPS  on  these  problems 

*In  f a c t,  Ref2  runs  one  second  faster  on  MB2  than 

on  MB4;  the  reason  is  that  the  shorter  constraint  in 
MB2  takes  less  time  to  evaluate. 

*These  problems  were  suggested  by  a  similar  set  of 

tasks  given  by  Raphael  (1971).  Raphael  uses  these 
tasks  to  illustrate  the  frame  problem. 

593 

is  summarized  in  Figure  9. 

Ref2  executions  of  the  robot  problems.  Because 
Ref2  performs  essentially  no  preliminary  analysis  of  a 
PSL  program,  it  can  do  the  n u ll  robot  task  faster  than 
POPS.  On  the  more  complex  t a s k,  however,  Ref2  b e(cid:173)
comes  less  effective  than  POPS.  This  is  to  be  expected 
in  problems  where  POPS  is  able  to  derive  some  guidance 
from  the  problem  statement.  See  Figure  9. 

Conclusion 

The  mafor  accomplishment  of  POPS  is  the  a p p l i c a(cid:173)

tion  of  goal  directed  methods  to  the  execution  of  n o n-
deterministic  programs.  The  analysis  of  the  effects  of 
operators  and  the  selection  of  operators  on  the  basis  of. 
a  match  between  the  current  situation  and  the  desired 
situation  allows  POPS  to  display  a  sense  of  direction 
in  its  search,  and not  rely  merely  on  generate  and  test 
search,  as  other  processors  for  nondeterministic  l a n(cid:173)
guages  d o.  POPS  contains  discrete  processes  for  d e(cid:173)
scribing  operators,  describing  goals,  selecting  opera(cid:173)
t o r s,  and  selecting  values  to  a s s i g n.  These  processes 
may  be  improved  almost  independently  of  each  other, 
and  without  modification  of  the  basic  system.  C o n(cid:173)
sequently,  the  design  w i ll  support  substantial  improve(cid:173)
ment  in  problem  solving  a b i l i t y. 

Bibliography 

1.  Bolce,  J . F ., 

"LISP/360,  A  Description  of  the  Uni-
versity  of  Waterloo  LISP  1.  5  Interpreter  for  the 
IBM  System/360,"  Computing  Centre  University 
of  Waterloo,  Waterloo,  Ontario,  Canada,  1967. 

2.  Ernst,  George  W.  and  N e w e l l,  Allen,  GPS:  A  Case 
Study  in  Generality  and  Problem  Solving,  Academ(cid:173)
ic  Press,  N.  Y .,  1969. 

3.  Feigenbaum,  E.  and  I.  Feldman  ( e d s . ),  Computers 

and  Thought,  M c G r a w - H i l l,  1963. 

4.  Fikes,  Richard  Earl,  A  Heuristic  Program  for  Solying 
Problems  Stated  as,Nondeterministic  Procedures, 
Doctoral  t h e s i s,  Carnegie-Mellon  U n i v e r s i t y, 
1968. 

5.  Fikes,  Richard  Earl,  REF-ARF:  A  System  for  Solving 

Problems  Stated  as  Procedures,  J.  Art.  I n t e l. 
1  (1)  1970. 

6.  Floyd,  Robert,  "Nondeterministic  Algorithms,  " 

J.  ACM  14  (4)  1967. 

7.  Gibbons,  G,  D .,  Beyond  REF-ARF:  Toward  an  I n(cid:173)
telligent  Processor  for  a  Nondeterministic  Pro(cid:173)
gramming  Language,  Doctoral  Thesis,  Carnegie-
M e l l on  University,  1972. 

8.  N e w e l l,  A.  and  Simon,  H.  A . , " G P S,  A  Program  that 

Simulates  Human  Thought,"  in  Feigenbaum  and 
Feldman,  1963. 

9.  Raphael,  B .,  "The  Frame  Problem  in  Problem-Solving 

Systems,"  in  A r t i f i c i al  Intelligence  and  Heuristic 
Programming,,  Edinburgh  University  Press,  1 9 7 ]. 

594 

595 

596 

597 

598 

599 

