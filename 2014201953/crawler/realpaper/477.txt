Incremental Utility Elicitation with 

Minimax Regret Decision Criterion 

Tianhan Wang 

Department of Computer Science 

University of Toronto 

Toronto, ON, M5S 3H5, CANADA 

tianhan@cs.toronto.edu 

Craig Boutilier 

Department of Computer Science 

University of Toronto 

Toronto, ON, M5S 3H5, CANADA 

cebly@cs.toronto.edu 

Abstract 

Utility  elicitation  is  a  critical  function  of any  au(cid:173)
tomated decision aid, allowing decisions to be tai(cid:173)
lored  to  the  preferences  of a  specific  user.  How(cid:173)
ever,  the  size  and  complexity  of utility  functions 
often  precludes  full  elicitation,  requiring  that  de(cid:173)
cisions  be  made  without  full  utility  information. 
Adopting the  minimax regret criterion  for decision 
making with incomplete utility information, we de(cid:173)
scribe  and  empirically  compare  several  new  pro(cid:173)
cedures  for  incremental  elicitation  of utility  func(cid:173)
tions that attempt to reduce minimax regret with as 
few  questions  as possible.  Specifically,  using the 
(continuous) space of standard gamble queries, we 
show that myopically optimal queries can be com(cid:173)
puted  effectively  (in  polynomial  time)  for  several 
different improvement criteria.  One such criterion, 
in particular, empirically outperforms the others we 
examine  considerably,  and  has  provable  improve(cid:173)
ment guarantees. 

Introduction 

1 
As  software for decision  making under uncertainty becomes 
increasingly  common,  the  process  of utility  elicitation takes 
on  added importance.  Tailoring decisions to  a  specific  user 
requires knowledge of the user's utility function, information 
that  generally  cannot  be  built  into  software  in  advance. 
In 
domains as varied as travel planning, product configuration, 
and resource allocation, to name but a few, assessing a user's 
utility function is an integral part of interactive decision mak(cid:173)
ing.  Unfortunately,  as  is  well-known  among decision  ana(cid:173)
lysts,  utility  functions  are  unwieldy,  complex,  and  difficult 
for users to articulate [5].  To mitigate these difficulties, ana(cid:173)
lysts have developed many techniques for easing the burden 
of elicitation.  For example,  structuring of multiattribute util(cid:173)
ity functions reduces the number of parameters that need to be 
assessed [6]; and the use of standard gamble queries and sen(cid:173)
sitivity analysis allows users to calibrate utilities more easily 
[5]. 

More recently, emphasis has been placed on decision mak(cid:173)
ing  with  incomplete  utility  information.  The  principle  of 
maximum  expected  utility  (MEU)  cannot  be  used  directly 
in  such  cases,  since  the  utility  function  is  unknown;  thus 

new  decision  criteria  are  needed. 
In  addition,  methods 
for  the  automatic  generation  of  queries  have  been  devel(cid:173)
oped  that  reduce  uncertainty  or  incompleteness  in  the  util(cid:173)
ity  function  with  minimal  effort.  Within  A l,  probabilistic 
models  of  utility  function  uncertainty  have  been  used  [4; 
2].  By  assuming  a  density  over  possible  utility  functions, 
expectations over this density  can be taken to determine the 
value  of a  decision;  and  standard  Bayesian  updating  tech(cid:173)
niques can  be  used  to  account for the  responses  to  queries. 
A different perspective is taken in work on imprecisely spec(cid:173)
ified  multiattribute  utility theory  (ISMAUT)  [8;  7]  in  which 
linear  constraints  on  multiattribute  utility  functions  are  re(cid:173)
fined, allowing the set of Pareto optimal decisions to be iden(cid:173)
tified; these constraints arc often refined until one action can 
be proven optimal.  Boutilier, Bacchus and Brafman [3] and 
Blythe [1] adopt a somewhat related perspective, also reason(cid:173)
ing with linear constraints on utility functions. 

In  this  work,  we  adopt  a  distribution-free  model,  work(cid:173)
ing  with  linear  constraints  on  utility  functions,  much  like 
ISMAUT.  Unlike  ISMAUT,  we  allow  for  decisions  to  be 
made  (or  recommended)  even  when  the  incompleteness  in 
utility knowledge prevents us from proving a decision is op(cid:173)
timal.  In  such  circumstances,  we  adopt the  minimax regret 
decision  criterion.  We  also  propose  and  examine  several 
methods  for  generating  queries  that  reduce  regret  quickly, 
in  contrast  to  work  on  ISMAUT  (where  query  generation 
strategies  have  not  been  studied  in  depth). 
In  this  sense, 
our  model  more  closely  resembles  probabilistic  models  [4; 
2],  which  rely  on  the  fact  that  decisions  of good  expected 
quality can be made with uncertain utility information. Using 
the  minimax  regret  criterion,  we  generate  decisions  whose 
quality (difference from optimal) can be bounded in the face 
of incomplete utility information. These bounds can be traded 
off  against  query  cost  or  minimum  error  requirements  to 
guide the query process. 

The  paper  is  organized  as  follows.  We  outline  relevant 
background in Section 2 and define the minimax regret crite(cid:173)
rion for decision making with incomplete utility information. 
We  show how decisions of minimax regret can be computed 
using  simple  linear programs  (LPs)  if utility  constraints  are 
linear.  We also  discuss incremental elicitation,  focusing on 
standard gamble queries (SGQs)  [5], the responses to which 
impose one-dimensional, linear utility constraints that can be 
easily handled using LPs.  Our key contribution is described 

DECISION THEORY 

309 

in  Section  3,  where  we  develop  several  myopic  elicitation 
strategies.  Assuming linear constraints in each utility dimen(cid:173)
sion  (an  assumption  consistent  with  the  use  of SGQs),  we 
show  that  the  minimax  regret  improvement  offered  by  any 
response to a SGQ,  as  a function of the (continuous) query 
parameter, is piecewise linear (PWL) and weakly monotonic 
(decreasing or increasing, depending on the response).  This 
fact  allows  optimal  queries  under each  query  strategy to  be 
computed  efficiently,  in  time  linear in  the  number of utility 
attributes, despite the fact that query space is continuous. We 
present empirical results comparing the different strategies in 
Section  4,  demonstrating the  effectiveness,  in  particular,  of 
the maximum expected improvement strategy. 

2  Minimax Regret with Incomplete Utility 

Information 

We assume a system charged with making a decision on be-
half of a  user in  a  specific decision scenario.  By a decision 
scenario, we refer to a setting in which a fixed set of choices 
(e.g., actions, policies, recommendations) are available to the 
system, and the (possibly stochastic) effects of these choices 
are known.  For example, the decisions could be courses of 
medical treatment with  known  probabilities for specific  out(cid:173)
comes [4].  The system's task is to take the optimal decision 
with  respect to the  user's  utility  function  over outcomes,  or 
some approximation thereof.  The system may have little in(cid:173)
formation about the user's utility function, so to achieve this, 
it must find out enough information about this utility function 
to enable a good decision to be made.  We assume that The 
system has available to it a set of queries it can ask of the user 
that provide such information. We make these concepts more 
precise below. 

The M i n i m ax  Criterion 

2.1 
Formally, a decision scenario consists of a finite set of possi(cid:173)
ble decisions D, a finite set of n possible outcomes (or states) 
5, and a distribution function  Prd  e  A(S), for each d  6  D1 
The  term  Prd(s)  denotes  the  probability  of outcome  s  be(cid:173)
ing realized if the system takes decision d.  A utility function 
u  :  S  â€”>  [0,1]  associates  utility  u(s)  with  each  outcome 
s.  We  often  view u  as  a  n-dimensional  vector u  whose  ith 
component Ui  is  simply  u(s{).  We  assume  that  utilities  are 
normalized in the range [0,1] for convenience.  The expected 
utility of decision d with respect to  utility function u  is: 

Note  that  EU(d,u)  is  linear  in  u.  The  optimal  decision  d* 
w.r.t.  u  is that with maximum expected utility (MEU). 

In general the utility function u will not be known with cer(cid:173)
tainty at the start of the elicitation process, nor at its end.  As 
in ISMAUT [8; 7], we model this uncertainty by assuming a 
set of linear constraints C over the set of possibly utility func(cid:173)
tions U =  [0, l ]n.  More precisely, we assume that constraints 

'The extension  of our elicitation methods to a set of possible 

decision scenarios is straightforward. 

over unknown utility values  ui  are linear.  We use  C  U  to 
denote the subspace of U satisfying C. 

If a  system  makes  a decision  d  under  such  conditions  of 
incomplete  utility  information,  some  new  decision  criterion 
must be adopted to rank decisions.  Following [3], we adopt 
the  minimax  regret  decision  criterion.2  Define  the  optimal 
decision d*u  with respect to utility vector u to be 

If the  utility  function were known,  du  would be the  correct 
decision.  The regret of decision di  with respect to u is 

i.e.,  the  loss  associated  with  executing  di  instead  of acting 
optimally.  Let C  C  U be the feasible  utility set.  Define the 
maximum regret of decision di  with respect to C to be 

and the decision d*c  with minimax regret with respect to C: 

The  (minimax) regret level of feasible utility set  C  is 

If the only information we have about a user's utility function 
is that it lies  in the set C,  then  d*c  is a reasonable decision. 
Specifically,  without  distributional  information  over  the  set 
of possible utility functions, choosing (or recommending) d*r 
minimizes the worst case  loss with  respect to possible  real(cid:173)
izations of the utility function (e.g., if the true u were chosen 
by an adversary). 

If C  is  defined  by  a  set  C  of linear  constraints,  then  d*c 
as  well  as  MMR(C)  can  be  computed  using  a  set  of linear 
programs [3].  We can compute the pairwise max regret,  for 
any pair of decisions  di  and  dj, 

using  an  LP  (i.e.,  maximizing  a  linear  function  of the  un(cid:173)
known outcome utilities  subject to C).  Solving  0(\D\2)  such 
LPs, one for each ordered pair of actions, allows us to iden(cid:173)
tify the decision d*c  that achieves minimax regret and to de(cid:173)
termine  the  minimax  regret  level  MMR(C). 

Incremental  Elicitation 

2.2 
Given partial  knowledge of a  utility  function in  the  form  of 
constraint set C, the optimal decision d*c may have an unac(cid:173)
ceptable level in regret. In such a case, a user could be queried 
in order to reduce this level of uncertainty, thus generally im(cid:173)
proving decision quality.3 

310 

DECISION THEORY 

soning, myopic approximations tend to be used frequently in 
practice [5; 4]. 

3  Myopic Elicitation Strategies 
In this section we describe three myopic strategies for query 
selection under the minimax regret criterion.  Throughout this 
section we make the following assumptions: 
(a)  The  initial  constraints have the  form of upper and lower 
bounds  in  each  utility  dimension  (these  may  be  trivial 
bounds, 0, 1). 

(b)  SGQs are asked,  assuming some known best and worst 
outcome. These ensure that each constraint set (after any 
query) has the same form as the initial set (i.e., a hyper-
rectangle).  We denote by  uhl  and  lbi  the current bounds 
on  the  utility  Ui  of outcome  it. 

(c)  For simplicity, we assume a threshold r is used to imple(cid:173)
ment termination;  that  is,  when  the  predicted  improve(cid:173)
ment of a query falls below T, we terminate the process. 

We discuss the impact of relaxing these assumptions later. 

3.1  Characterization  of Regret  Reduction 
Query  selection  is  complicated  by  the  fact  that,  in  general, 
there  are  n  types  of SGQs  that  can  be  askedâ€”one  per out(cid:173)
come  sxâ€”and a  continuous set of instances of each type iâ€” 

A  common type  of query  is  a  standard gamble  w.r.t.  out(cid:173)
come .si, where the user is asked if she prefers Si to a gam(cid:173)
ble  in  which  the  best  outcome  sT  occurs  with  probability  / 
and the worst sÂ±  occurs with  probability  1  -  /  [6].  We  will 
designate  this  query  qi(l)  and  focus  our  attention  on  such 
standard gamble  queries  or  SGQs.4  Given  a  response  yes 
to  query  qi(/),  the  constraint ut  >  I  can  be  imposed on  the 
user's  utility  function,  thus  (in  general) refining  our knowl(cid:173)
edge;  similarly,  a  no response corresponds to the constraint 
ui  <  I.  A  response  to  any  standard  gamble query  imposes 
a one-dimensional (i.e., axis parallel) linear constraint on the 
utility set. Thus if our initial constraint set C is linear, comput(cid:173)
ing the minimax  optimal  decision  after a  sequence of SGQs 
can be  accomplished  using the  LP  method above.  Further(cid:173)
more, if C consists of a set of bounds on utility values in each 
dimensionâ€”i.e., C forms a hyper-rectangle within  [0, l ]nâ€” 
then  after any  sequence  of SGQs,  the  feasible  utility  set  re(cid:173)
tains this form. 

The interactive decision making context we consider is one 
in  which queries are asked  repeatedly until  the minimax re(cid:173)
gret  level  falls  to  some  acceptable  value.  At  that  point  the 
"optimal" decision,  that with  minimax  regret given  the  cur(cid:173)
rent constraints, is recommended.  Termination can be based 
on  simple  thresholding,  or can take  into account the cost of 
a  query  (which  can  be  weighed  against  the  predicted  im(cid:173)
provement  in  decision  quality).5  Generally,  queries  will  be 
asked that offer the greatest predicted  improvement in  deci(cid:173)
sion quality. 

Both query selection and termination rely critically on the 
way  in  which  "predicted  improvement  in  decision  quality" 
is  defined  for a  query.  For example,  when  asking  a  query 
qi{l)  with respect to current constraint set C,  we  obtain two 
constraint  sets  Cno  and  Cyes.,respectively,  given  responses, 
no  and  yes.  We  might  then  define  the  improvement in  de(cid:173)
cision quality associated with the query as some function of 
MMR(Cno)  and  MMR(Cyes).  Such  a  method  of evaluating 
queries is myopic:  the query is evaluated in isolation, without 
consideration  of its  impact  on  the  value  or  choice  of future 
queries. 

It  is  important to  note  that  optimal  query  choice  is  inher(cid:173)
ently  nonmyopicâ€”in general,  a  sequence of several  queries 
may offer much more value than the aggregate myopic values 
of the  component queries.  Unfortunately, nonmyopic meth(cid:173)
ods require some form of lookahead, and thus often  impose 
severe  computational  costs  on  the  process  of query  selec(cid:173)
tion.  For this reason, we focus on the development of several 
myopic  query  selection  strategies  in  the  next  section.  This 
is  analogous  to  the  use  of myopic  methods  for the  approx(cid:173)
imation  of value  of information  in  cases  where  uncertainty 
is quantified probabilistically;  while the  computation of true 
value  of information  requires  some  form  of sequential  rea-

4Other types of queries could be considered, though we rely on 
the special nature of SGQs in some of our results.  SGQs are used 
widely in decision analysis [5], and have been the main query type 
studied in recent Bayesian elicitation schemes [4; 2]. 

5Of course, elicitation can continue until a zero-regret (i.e., opti(cid:173)
mal) decision is identified: this occurs whenever C C  Rd  for some 
decision d, the region of utility space for which d is optimal.  The 
regions Rd are convex polytopes within U. 

DECISION THEORY 

311 

Figure  1:  Structure of various  functions  in dimension  i,  as a function of/:  (a) The PMR  for d\  (w.r.t.  d1,  d2,  d3)  are shown;  as is 
MR(d,C,,i,l) the max (thin solid line0of pairwise max regret functions.  MRno (thick solid upper line) is obtained by replacing the PMR 
line d2 â€” d\ (with negative slope) by the constant line, and again taking the max. (b) MMRnâ€ž (dashed line) is the min of the MRno functions 
for each decision; (c) Intersection of MMRno and MMRyes gives maximin improvement in MMR. 

to  max  regret  in  dimensions  other  than  i  is  constant,  while 
the contribution to regret in dimension i given  Ui  â€”  I is lin(cid:173)
It  follows  that 
ear in /,  with  coefficient 
is a PWL convex 
function of/, since it is the max of these pairwise regret func(cid:173)
tions (see Figure 1(a)). 

. 

_ 

Now define 

(Note that this differs from 

the 
max regret of d after obtaining a negative response to  query 
which is de(cid:173)
fined  by assuming 
is 
â€ž 
also  a  PWL  convex  function,  obtained  from  the  set  of lin(cid:173)
ear  PMR-functions  that  make up 
as follows: 
we replace any linear components with negative slope by the 
constant  line 
Intuitively,  if the  regret  of d 
w.r.t.  d'  after learning  Ui  =  I  decreases  with  /,  then  simply 
learning that 
cannot reduce pairwise max regret, since 
this weaker constraint does not rule out the maximum regret 
(see  Figure  1(a)  for this  intuitive  flattening  of the 
at 
regret line for  d2  -  d1).  This ensures that 
is 
also nondecreasing in /, as illustrated in Figure  1(a). 

Finally,  note  that,  by  definition  of  minimax  regret, 
The  minimum  of 
a collection of PWL, convex, nondecreasing functions is also 
PWL and nondecreasing (though not necessarily convex) (see 
Figure  1(b)). 
Note  that  this  proof sketch  shows  how  to  construct  a  finite 
representation of the function 
as a finite col(cid:173)
lection  of linear functions and  inflection  points.  By  entirely 
analogous reasoning, we also have: 

At each  stage,  the query qi(l)  is asked  whose  minimum  im(cid:173)
provement with respect to  the  current constraint set is  max(cid:173)
imum.  The process stops when no query has minimum im(cid:173)
provement greater than  threshold r. 

To  compute  the  optimal  M MI  query  point,  we  find  the 
optimal  query  point in  each  dimension  i,  and  ask  the  SGQ 
corresponding  to  the  dimension  with  greatest  MMI.  The 
PWL  representation  of  the  functions  MMRyesi(C,i,l)  and 
MMRno(C,i, 
I)  described above allows the optimal point in 
each dimension to be computed readily.  The point / that of(cid:173)
fers MMI in dimension i can be determined by computing the 
intersection  of the  two  functions:  since  one  is  nondecreas(cid:173)
ing  and  the  other nonincreasing,  the  maximum point of the 
function 
must  lie  at the  intersec(cid:173)
tion.  Note that the intersection must exist since each has the 
same  maximum  value  MMR(C)  (see  Figure  1(c)).6  Finally, 
the  value  of the  improvement in  regret  is  the  difference be(cid:173)
tween the original minimax regret level and this value. 

Computation  of  the  intersection  of  these  functions  is 
straightforward, requiring only the  computation of the  inter(cid:173)
section  of the  linear  segments  whose  bounds  overlap.  As 
such, this can be accomplished in linear time in the maximum 
number of segments  in  either function.  The  number of seg(cid:173)
ments in these functions is (very loosely) bounded by 
? 
Since  we  must  compute  the  optimizing point  for  each  util(cid:173)
ity dimension, the complexity of this algorithm is 
The algorithm thus scales linearly in the number of outcomes 
and quadratically with the number of decisions. 

3.2  M a x i m in  Improvement 
One goal of any query strategy is to determine utility informa(cid:173)
tion that reduces regret as quickly as possible. Unfortunately, 
for any  given 
the  exact reduction  in  regret can(cid:173)
not typically be predicted in advance, since it differs depend(cid:173)
ing on whether a yes  or no response is obtained.  The max-
imin  improvement  (MMl)  query  strategy  myopically  selects 
queries  with  the best  worst-case  response.  More precisely, 
let C be our current constraint set.  We define the minimum 

3.3  Average  and  Expected  Improvement 
One  difficulty  with  the  M MI  criterion  for query  selection  is 
that, due to its worst-case nature, we can often find situations 
in  which  no  query  offers  positive  (minimum)  improvement 
(we will see evidence of this in the next section), despite the 
6If the intersection occurs where both functions are "flat," any 

query point in the intersection can be used. 

7In practice, the number of segments appears to grow sublinearly 

in the number of decisions \D\. 

312 

DECISION THEORY 

fact that the current regret level is positive. This occurs when 
at  least  one  of the  responses  for  every  query  offers  no  im(cid:173)
provement,  thus  stalling  the  query process.  Intuitively, just 
because one response to a query ql(l)  offers no improvement 
is no reason not to ask the query:  the opposite response may 
still offer immediate improvement.8 This suggests an alterna(cid:173)
tive  criterion  called  maximum  average  improvement  (MAI): 
SGQs are ranked according to the average  improvement of(cid:173)
fered by both positive and negative responses. 

Computing the optimal query point according to MAI can 

also exploit the PWL nature of the functions 
and  MMRno(C, i, /).  As with M M I, we compute the optimal 
query point I in each dimension i independently. It is not hard 
to see that the point of maximum average improvement must 
occur at an inflection point of one of the two functions. Thus, 
each dimension can be optimized in time linear in the number 
of segments in the two functions. 

The MAI criterion is not subject to stalling in the sense that 
MMI  is:  if MMR(C)  is positive, then there exists some query 
with  positive  M AI  (this  will  follow  from  a  result  discussed 
below).  However, it is subject to a different form of stalling: 
it may well be the case that the query  qi(l)  with MAI occurs 
at one of the boundary points 
.  In such a case, only 
one (consistent) response is possible, imposing no additional 
constraints  on  the  utility  function.  As  such,  the  constraint 
set C  will  remain  unchanged,  meaning that  the  same  query 
remains MAl-optimal at the next stage. 

This  second  type  of stalling  can  be  prevented.  Suppose 
that a query  qi(l)  is  optimal,  where 
We know that 
(i.e., a  yes offers 
greater  improvement  at  the  point  ubl)\  but  since 
cannot 
exceed  ubi,  the  probability  of receiving  a  yes  response  is 
zero, so the yes-improvement cannot be realized. We can thus 
make the query  qi(l)  appear to be less desirable by accounting 
for the odds of receiving a  specific response.  The maximum 
expected improvement (MEI) criterion does just this.  We de(cid:173)
fine the expected improvement of a query: 

At each stage, we ask the query with maximum El. 

Computation of expected improvement requires some dis(cid:173)
tribution  over responses.  For simplicity,  we  assume  a  uni(cid:173)
form  distribution  over  utility  functions  and  noise-free  re(cid:173)
sponses: thus, 
(with 
the  negative probability defined similarly).  This assumption 
also  allows  for  the  ready  computation  of the  MEl-optimal 
query.  Again, we optimize each dimension separately.  The 
optimization  in  dimension  i  can  be  effected  by  doing  sep(cid:173)
arate  optimizations  in  the  regions  defined  by  the  union  of 
the  inflection  points  in  the  functions 
and 
We defer the details, but note that the func(cid:173)
tion being optimized within each region is a simple quadratic 
function of/ that can be solved analytically. Thus the compu(cid:173)
tational complexity of this criterion is similar to that of M MI 
and MAI. Fortunately, MEI is not subject to stalling: 

8Note that, since MMI is myopic, even a nonimproving response 

may offer information that can be exploited in the future. 

Predicted MMR by MEI 
Actual MMR by MEI 
True Regret by MEI 

Actual MMR by Random Queries 
True Regret by Random Queries 

Figure 2: Performance of MEI on three-good problems (40 runs). 

Proposition 1 If MMR{C) > 0, then there exists some query1 
qt(l)  with  positive  expected  improvement;  and  at  least  one 
response to the MEl-optimal query reduces minimax regret. 

The  MEI  criterion  could  be  adopted  using  other  distri(cid:173)
butional  assumptions,  though  the  optimization  required  by 
query selection could become more complicated.  It is worth 
noting  that  the  manner  in  which  we  use  distributional  in(cid:173)
formation  is  consistent  with  the  worst-case  perspective  im(cid:173)
posed  by  the  minimax  criterion.  With  some  distribution 
over utility  functions,  we  could  adopt  the  perspective  of [4; 
2],  and  make decisions  by  taking  expectations with  respect 
to this distribution.  However, even in this case, minimax re(cid:173)
gret allows one to offer guarantees on decision quality that a 
Bayesian approach does not address.  The MEI criterion ex(cid:173)
ploits  distributional  information  only  to  guide  the  querying 
process, hoping to reach a point more quickly where accept(cid:173)
able guarantees can be provided; the distribution is not used 
to evaluate decisions per se. 

While other prior distributions will generally require a dif(cid:173)
ferent approach to the optimization problem for query selec(cid:173)
tion, it is interesting to observe that queries associated with a 
mixture of uniform distributions can be determined in exactly 
the same manner.  The derivation of the optimal  query given 
such a mixture is straightforward, and these models have the 
desirable property  (like  uniform priors)  that  they  are  closed 
under update  by  query  responses.  Thus,  if our prior beliefs 
can be  approximated well  using a  mixture of uniforms with 
a  small  number of components,  MEI-querying can  be  used 
directly as described here, without distribution-specific opti(cid:173)
mization.  It  is  important to note,  however,  that,  even  if the 
approximate priors are used, the decision quality of the MEI 
strategy  is  unaffectedâ€”only the  number of queries  required 
may be adversely impacted. 

DECISION THEORY 

313 

We  evaluated  the  MM1,  M A I,  and  ME1  query  criteria  on 
a  number  of elicitation  problems  in  two  different  domains. 
With the MEI criterion, we have also tested its robustness to 
different assumptions about the prior over utility functions. 
We  first  tested  our  methods  in  two  bidding  scenarios  in(cid:173)
volving simultaneous auctions and combinatorial preferences 
[2].  In the first scenario, a bidding agent must offer bids for 
four different goods auctioned  simultaneously  in  four differ(cid:173)
ent markets. To discretize the decision space, we assume that 
the  agent  can  offer  three  distinct  bidsâ€”low,  medium,  and 
highâ€”for each  good.  Each  of these  bid  levels  corresponds 
to a precise cost:  should the bid win, the user pays the price 
associated  with  each  bid  (with,  of course,  higher prices  as(cid:173)
sociated  with  higher  bid  levels).  To  suppress  the  need  for 
strategic reasoning, the agent has a  fixed,  known probability 
of winning a good associated with each  of the three bid  lev(cid:173)
els.  The probabilities of winning each good are independent, 
and  increasing  in  the  bid  level.  With  four goods  and three 
bid  levels,  there  are  81  possible  decisions  (mappings  from 
markets to bids) and  16 outcomes (subsets of goods the user 
might obtain).  The  user's utility  function need not be addi(cid:173)
tive with respect to the goods obtained. For instance, the user 
might value goods g\  and g2  in conjunction,  but may  value 
neither  individually.  Thus  utility  is  associated  with  each  of 
the  16 outcomes.  We assume that the overall utility function 
(accounting for price paid)  is quasi-linear;  so  the price paid 
is subtracted from the utility of the subset of goods obtained. 
A smaller scenario with three goods was also run: this has 27 
decisions and 8 outcomes. 

We  first  discuss  the  smaller (3-good)  scenario.  For each 
query criterion,  we run elicitation using that criterion for 40 
steps  (or  until  no  query  has  positive  value).  For  each  cri(cid:173)
terion,  40  trials  using  random  utility  functions  drawn  from 
[0, l ]n  were  run,  with  elicitation simulated  using responses 
based on that function.  For each query in a run, we record: 
(a) predicted MMRâ€”the MMR level that is predicted to hold 
after asking the  optimal  query;9  (b) actual MMRâ€”the  MMR 
level realized once the actual query response is obtained; and 
(c) the true regretâ€”the difference in utility between the mini-
max decision and the true optimal decision for the underlying 
utility  function.  While  our algorithms don't have  access  to 
true regret, this measure gives an  indication of true decision 
quality, not just the quality guarantees the algorithms provide. 
Figure 2 shows the performance of the MEI criterion (std. 
error bars are shown on actual MMR and true regret, but are 
excluded  from  predicted  MMR  for  legibility).  We  see  that 
the  algorithm  quickly  converges to  a point where  the  mini-
max regret guarantees are quite tight:  within 20 queries, the 
average regret guarantee falls below 0.1 (less than  10%); and 
within forty queries, decision quality is guaranteed to be with 
4%  of optimal.  More  interesting,  we  see  that  true  regret 
falls to under 10% with 5 queries, and to near zero within 20 
queries.  Thus the actual decision quality associated with act(cid:173)
ing according the decision with MMR is generally far better 
than the MMR guarantee.  The MEI criterion seems to select 

9For example,  MMI predicts the maximum regret over all re(cid:173)

sponses, while MEI predicts the expected regret. 

Figure 3: Performance of MAI on three-good problems (40 runs). 

suitable queries,  allowing optimal  decisions and tight regret 
guarantees to  be  identified  with  few  interactions.  For refer(cid:173)
ence,  we  also  include the performance of randomly  selected 
queries (where both dimension i and query point / are chosen 
uniformly at random from the  feasible region).  Because the 
problem  is  of relatively  low  dimension,  random queries per(cid:173)
form  reasonably well,  though  they  have  difficulty  reducing 
regret to zero, and do not compete with MEI queries. 

Figure 3 shows the same measurements for the MAI crite(cid:173)
rion.  We note that this query strategy does not reduce regret 
bounds nearly as quickly as the MEI strategy, reaching only 
an average regret guarantee of 0.18 after 40 queries.  True re(cid:173)
gret is generally much better, but still does not approach the 
performance of MEI (or even random queries).  We note that 
the MAI criterion often stalls:  in such a case, we complete the 
data with  the  last minimax regret value.  Finally,  it  is  worth 
noting that the M MI criterion performs extremely badly.  We 
don't plot its performance,  but  note that  in  all  runs,  it  stalls 
after a maximum of five queries;  its  average minimax regret 
bound is 0.8, and average true regret level is 0.3 when it stalls. 
The  MEI  criterion  appears  to  offer  much  better  perfor(cid:173)
mance than MAI, M M I, or random querying. Figure 4 shows 
the performance of MEI,  M AI  and  random querying  strate(cid:173)
gies on the larger four-good (16-outcome,  81-decision) sce(cid:173)
nario.  Again we see that MEI converges quickly and outper(cid:173)
forms the other strategies.  With the increase in dimensional(cid:173)
ity, random queries fare worse than MAI-optimal queries. We 
note that in all experiments, the optimal query (regardless of 
criterion) can be computed very quickly. 

We  have  also  tested  the  MEI  criterion  on  a  travel  plan(cid:173)
ning domain (as  in the previous tests,  MEI  seems to  domi(cid:173)
nate  the  other criteria,  so  we  focus  on  it).  In  this  domain, 
an  agent  must  choose  a  collection  of  flight  segments  from 
a  flight  database  to  take  a user  from  a  source to  a  destina(cid:173)
tion city [1].  To make the elicitation problem interesting, we 
added the following information to the DB: the probability of 
any  flight  arrival  being  delayed by  specific  amount  of time; 

314 

DECISION THEORY 

Figure 4: Performance on four-good problems (40 runs). 

Figure 5:  Performance on YYZ-SFO, with utility functions drawn 
from uniform (40 runs). 

the probability of missing a connecting flight as a function of 
connection time and airport; a distribution over ground travel 
times to a hotel in the destination city as a function of arrival 
time (reflecting, e.g., arrival in rush hour or off-peak); and the 
probability of losing a hotel room as a function of arrival time 
at the hotel.  As a result,  for any  specific flight combination 
(decision), a joint distribution over these variables (outcome) 
is  obtained.  A  user's  utility  function  is  quasi-linear,  given 
by her utility for a specific outcome over these four attributes 
less the flight price. The specific formulation discretizes these 
attributes,  so the outcome space  is of size 64.  In our exper(cid:173)
iments,  the  flight  DB  was designed to allow 20  flights  (both 
direct and indirect) between pairs of cities. 

We tested the ME1 strategy using a uniform prior over util(cid:173)
ity  space  to  select queries,  with  user utility  functions drawn 
from the same uniform distribution. The results for a specific 
source-destination pair (Toronto-San Francisco) are shown in 
Figure 5.  As before, we see that the ME1 strategy easily out(cid:173)
performs random querying, both  in terms of the  regret guar(cid:173)
antees,  and  the  true  regret  of the  decisions  it  would recom(cid:173)
mend at each stage.  These results are representative of those 
obtained in other decision scenarios. 

We  also  explored  the  use  of  strong  prior  knowledge  to 
guide the querying process. We repeated the test above, draw(cid:173)
ing user utility  functions from a strongly peaked (truncated) 
Gaussian distribution over utility space (with diagonal covari-
ance matrix, and variance 0.03 in each dimension). We tested 
the MEI-criterion using a (hand-chosen) mixture of three uni(cid:173)
form  distributions  over  subregions  of utility  space  that  very 
roughly approximated the Gaussian.10  To test the robustness 
of MEI to inaccurate priors, we also used MEI using a single 
uniform  prior  over all  of utility  space  (despite  the  fact  that 
the true utility function is drawn from the Gaussian).  The re(cid:173)
sults illustrated in Figure 6 demonstrate that MEI can benefit 

10In principle, this mixture could have been fit to the actual pnor 

using, say, EM; but our goal is not accurate modeling of the prior. 

considerably from strong prior information. Indeed, minimax 
regret is reduced very quickly when a reasonable prior is used 
to select queries;  and true regret is reduced to zero in every 
instance of this scenario within four queries.  Random query(cid:173)
ing does very poorly, indicating that this problem is not easy 
to solve without sufficient utility information. The robustness 
of MEI to inaccurate priors is also in evidence.  We  see that 
minimax regret and true regret are also reduced very quickly 
when an uniformative uniform prior is used to guide the MEI-
querying process. 

5  Concluding Remarks 
We have presented a new procedure for decision making with 
incomplete utility  information which  recommends decisions 
that minimize maximum regret.  We defined several different 
myopic query selection criteria, and showed that myopically 
optimal queries under each criterion can be computed effec(cid:173)
tively, in polynomial time.  The empirical performance of one 
such  criterion,  maximum  expected  improvement, proved to 
be rather attractive:  not only did it provide strong guarantees 
after few queries, but true decision quality tended to exceed 
these guarantees significantly. 

Our  work  differs  from  existing  approaches  to  preference 
elicitation  in  several  important ways.  Like  recent Bayesian 
approaches [4; 2], our approach identifies a concrete decision 
in the face of utility function uncertainty.  Unlike these meth(cid:173)
ods,  for the  purposes  of decision  making,  we  assume  only 
constraints on possible utility functions, not distributions.  As 
a result,  the minimax regret criterion  is used to  identify de(cid:173)
cisions with  guaranteed error bounds on quality.  Our use of 
constraints on utility functions is more closely related to work 
on  ISMAUT  [8;  7].  However,  the  focus  in  ISMAUT is  the 
identification of Pareto optimal decisions in the face of utility 
function uncertainty, as opposed to the choice of a specific de(cid:173)
cision that maximizes some decision criterion.  Furthermore, 

DECISION THEORY 

315 

National  Conference  on  Artificial  Intelligence,  pages 
239-246, Edmonton, 2002. 

[3]  Craig  Boutilier,  Fahiem  Bacchus,  and  Ronen  I.  Braf-
man.  UCP-Networks:  A  directed  graphical  representa(cid:173)
tion  of conditional  utilities. 
In  Proceedings  of the  Sev-
enteenth  Conference  on  Uncertainty  in  Artificial  Intelli(cid:173)
gence, pages 56-64, Seattle, 2001. 

[4]  Urszula  Chajewska,  Daphne  Koller,  and  Ronald  Parr. 
Making  rational  decisions  using  adaptive  utility  elicita(cid:173)
tion. 
In  Proceedings  of the  Seventeenth  National  Con-
ference on Artificial Intelligence, pages  363-369,  Austin, 
TX, 2000. 

[5]  Simon  French.  Decision  Theory.  Halsted  Press,  New 

York, 1986. 

[6]  Ralph  L.  Keeney  and  Howard  Raiffa.  Decisions  with 
Multiple  Objectives:  Preferences  and  Value  Trade-offs. 
Wiley, New York,  1976. 

[7]  Edward A.  Sykes  and  Chelsea  C.  White,  III.  Multiob-
jective  intelligent  computer-aided  design. 
IEEE  Trans(cid:173)
actions on Systems,  Man and Cvbemetics,  21(6): 1498â€” 
1511,1991. 

[8]  Chelsea  C.  White,  III,  Andrew  P.  Sage,  and  Shigeru 
Dozono. 
A  model  of  multiattribute  decisionmaking 
and  trade-off  weight  determination  under  uncertainty. 
IEEE  Transactions  on  Systems,  Man  and  Cvbemetics, 
14(2):223-229,1984. 

Figure 6:  Performance on YYZ-SFO, with utility functions drawn 
from a strongly peaked Gaussian.  MEI querying using both a uni(cid:173)
form prior and a 3-component mixture are shown (40 runs). 

little attention has been paid to query strategies in  ISMAUT, 
which, in contrast, is our main focus. 

There  are  a  number of directions  in  which  this  work  can 
be  extended.  Obviously,  scaling  issues  are  of paramount 
importance.  We  are  currently exploring pruning techniques 
for removing decisions from consideration that can never be 
minimax  optimal,  thus  reducing  the  quadratic  dependence 
on  the  number  of decisions.  We  are  also  exploring  meth(cid:173)
ods  for  dealing  with  more  general  linear  constraints  (apart 
from  one-dimensional bounds),  as  well  as  more  expressive 
query  types.  Also  of interest  are  methods  for  dealing  with 
noisy/inconsistent  query  responses,  and  visualization  tech(cid:173)
niques.  Finally,  we  are  developing heuristics  that  simulate 
some  of the  effects of nonmyopic elicitation  without explicit 
lookahead. One such technique involves enumerating the ver(cid:173)
tices of the regions Rd of utility space in which each decision 
d  is optimal  (the  regions are  convex polytopes).  Queries at 
those points can quickly help rule out suboptimal actions. We 
hope to combine the computationally attractive methods de(cid:173)
vised in this paper with more intensive techniques like this to 
help reduce the number of required queries even further. 

Acknowledgements 
This research was supported by the Natural Sciences and En(cid:173)
gineering  Research  Council  (NSERC)  and  the  Institute  for 
Robotics and Intelligent Systems (IRIS). 

References 
[1]  Jim  Blythe.  Visual  exploration  and  incremental  utility 
elicitation. 
In  Proceedings  of the  Eighteenth  National 
Conference on Artificial Intelligence, pages 526-532, Ed(cid:173)
monton, 2002. 

[2]  Craig  Boutilier.  A  POMDP  formulation  of preference 
In  Proceedings  of the  Eighteenth 

elicitation  problems. 

316 

DECISION THEORY 

