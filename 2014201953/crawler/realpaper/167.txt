A Uniform Integration of Higher-Order Reasoning and

External Evaluations in Answer-Set Programming(cid:3)

Thomas Eiter, Giovambattista Ianni, Roman Schindlauer, and Hans Tompits

Institut f¤ur Informationssysteme, Technische Universit¤at Wien,

Favoritenstra(cid:223)e 9(cid:150)11, A-1040 Vienna, Austria
feiter, ianni, roman, tompitsg@kr.tuwien.ac.at

Abstract

We introduce HEX programs, which are nonmono-
tonic logic programs admitting higher-order atoms
as well as external atoms, and we extend the well-
known answer-set semantics to this class of pro-
grams. Higher-order features are widely acknowl-
edged as useful for performing meta-reasoning,
among other tasks. Furthermore, the possibility
to exchange knowledge with external sources in
a fully declarative framework such as Answer-Set
Programming (ASP) is nowadays important, in par-
ticular in view of applications in the Semantic Web
area. Through external atoms, HEX programs can
model some important extensions to ASP, and are a
useful KR tool for expressing various applications.
Finally, complexity and implementation issues for
a preliminary prototype are discussed.

Introduction

1
Answer-Set Programming (ASP) [Gelfond and Lifschitz,
1991] has recently attracted increasing interest as a declar-
ative problem solving paradigm.
In this approach, a prob-
lem is encoded in terms of a nonmonotonic logic program
such that the solutions of the former can be extracted from
the answer sets of the latter. Due to the availability of ef(cid:2)-
cient answer-set solvers, like Smodels [Simons et al., 2002]
or DLV [Leone et al., 2005], and various extensions of the
basic language with features such as classical negation, weak
constraints, or aggregates, ASP has become an important KR
formalism for declaratively solving AI problems in areas in-
cluding planning, diagnosis, information integration, and rea-
soning about inheritance. For the challenging area of Seman-
tic Web reasoning, extensions of ASP have been proposed,
facilitating interoperability with Description Logic reasoners
[Rosati, 1999; Eiter et al., 2004] or aiming at handling in(cid:2)-
nite, tree-structured models [Heymans and Vermeir, 2003].

(cid:3)This work was partially supported by the Austrian Science
Fund (FWF) under grant P17212-N04, and by the European Com-
mission through the IST Networks of Excellence REWERSE (IST-
2003-506779) and CologNeT (IST-2001-33123), and the IST Work-
ing Group in Answer Set Programming (IST-2001-37004 WASP).

However, for important issues such as meta-reasoning in
the context of the Semantic Web, no adequate support is avail-
able in ASP to date. Motivated by this fact and the observa-
tion that interoperability with other software is (not only in
this context) an important issue, we extend in this paper the
answer-set semantics to HEX programs, that is, higher-order
logic programs (which accommodate meta-reasoning through
higher-order atoms) with external atoms for software interop-
erability. Intuitively, a higher-order atom allows to quantify
values over predicate names, and to freely exchange predicate
symbols with constant symbols, like in the rule

C(X)   subClassOf (D; C); D(X):

An external atom facilitates to determine the truth value of
an atom through an external source of computation. For in-
stance, the rule

reached (X)   #reach[edge; a](X)

computes the predicate reached taking values from the pred-
icate #reach, which computes via #reach[edge; a] all the
reachable nodes in the graph edge from node a, delegating
this task to an external computational source (e.g., an exter-
nal deduction system, an execution library, etc.).

Our main contributions are summarized as follows.
(1) We de(cid:2)ne the syntax and answer-set semantics of
HEX programs, extending ASP with higher-order features
and powerful interfacing of external computation sources.
While answer-set semantics for higher-order logic programs
has been proposed earlier by Ross [1994], further extension
of that proposal to accommodate external atoms is technically
dif(cid:2)cult since the approach of Ross is based on the notion of
unfounded set, which cannot be easily generalized to this set-
ting. Our approach, instead, is based on a recent notion of
program reduct, due to Faber et al. [2004], which admits a
natural de(cid:2)nition of answer-set semantics.

(2) External atoms are a useful abstraction of several exten-
sions to ASP including, among others, aggregates, descrip-
tion logic atoms, or agent programs. External atoms thus fa-
cilitate investigating common properties of such extensions,
and can serve as a uniform framework for de(cid:2)ning seman-
tics of further similar extensions of ASP. Moreover, HEX pro-
grams are a basis for the ef(cid:2)cient design of generic evaluation
algorithms for such extensions in this framework.

(3) By means of HEX programs, powerful meta-reasoning
becomes available in a decidable context, e.g., for Seman-
tic Web applications, for meta-interpretation in ASP itself,
or for de(cid:2)ning policy languages. For example, advanced
closed world reasoning or the de(cid:2)nition of constructs for an
extended ontology language (e.g., of RDF-Schema) is well-
supported. Due to the higher-order features, the representa-
tion is succinct.

(4) A simple prototype implementation of the language is

available, based on a reduction to ordinary ASP.

Note that other logic-based formalisms, like TRIPLE [Sin-
tek and Decker, 2002] or F-Logic [Kifer et al., 1995], feature
also higher-order predicates for meta-reasoning in Semantic
Web applications. However, TRIPLE is low-level oriented
and lack precise semantics, while F-Logic in its implemen-
tations (Flora, Florid, Ontoweb) restricts its expressiveness
to well-founded semantics for negation, in order to gain ef(cid:2)-
ciency. Our formalism, instead, is fully declarative and offers
the possibility of nondeterministic predicate de(cid:2)nition with
higher complexity. This proved already useful and reason-
ably ef(cid:2)cient for a range of applications with inherent non-
determinism, such as diagnosis, planning, or con(cid:2)guration,
and thus provides a rich basis for integrating these areas with
meta-reasoning.

2 HEX Programs
2.1 Syntax
Let C, X , and G be mutually disjoint sets whose elements are
called constant names, variable names, and external pred-
icate names, respectively. Unless explicitly speci(cid:2)ed, ele-
ments from X (resp., C) are denoted with (cid:2)rst letter in upper
case (resp., lower case), while elements from G are pre(cid:2)xed
with (cid:147) # (cid:148). We note that constant names serve both as individ-
ual and predicate names.

Elements from C [ X are called terms. A higher-order
atom (or atom) is a tuple (Y0; Y1; : : : ; Yn), where Y0; : : : ; Yn
are terms; n (cid:21) 0 is the arity of the atom. Intuitively, Y0 is
the predicate name, and we thus also use the more familiar
notation Y0(Y1; : : : ; Yn). The atom is ordinary, if Y0 is a
constant.

For example, (x; rdf :type; c), node(X), and D(a; b), are

atoms; the (cid:2)rst two are ordinary atoms.

An external atom is of the form

A rule r is of the form

(cid:11)1 _ (cid:1) (cid:1) (cid:1) _ (cid:11)k   (cid:12)1; : : : ; (cid:12)n; not (cid:12)n+1; : : : ; not (cid:12)m;

(2)

where m; k (cid:21) 0, (cid:11)1; : : : ; (cid:11)k are atoms, and (cid:12)1; : : : ; (cid:12)m are
either atoms or external atoms. We de(cid:2)ne H(r) = f(cid:11)1; : : : ;
(cid:11)kg and B(r) = B+(r) [B(cid:0)(r), where B+(r) = f(cid:12)1; : : : ;
(cid:12)ng and B(cid:0)(r) = f(cid:12)n+1; : : : ; (cid:12)mg. If H(r) = ; and B(r) 6=
;, then r is a constraint, and if B(r) = ; and H(r) 6= ;, then
r is a fact; r is ordinary, if it contains only ordinary atoms.

A HEX program is a (cid:2)nite set P of rules. It is ordinary, if

all rules are ordinary.
2.2 Semantics
We de(cid:2)ne the semantics of HEX programs by generalizing the
answer-set semantics [Gelfond and Lifschitz, 1991]. To this
end, we use the recent notion of a reduct as de(cid:2)ned by Faber
et al. [2004] (referred to as FLP-reduct henceforth) instead
of to the traditional reduct by Gelfond and Lifschitz [1991].
The FLP-reduct admits an elegant and natural de(cid:2)nition of
answer sets for programs with aggregate atoms, since it en-
sures answer-set minimality, while the de(cid:2)nition based on the
traditional reduct lacks this important feature.

In the sequel, let P be a HEX program. The Herbrand base
of P , denoted HB P , is the set of all possible ground versions
of atoms and external atoms occurring in P obtained by re-
placing variables with constants from C. The grounding of a
rule r, grnd (r), is de(cid:2)ned accordingly, and the grounding of
program P is given by grnd (P ) = Sr2P grnd (r). Unless
speci(cid:2)ed otherwise, C, X , and G are implicitly given by P .

Example 2 Given C = fedge; arc; a; bg, ground instances of
E(X; b) are edge(a; b), arc(a; b), and arc(arc; b); ground in-
stances of #reach[edge; N ](X) are #reach[edge; edge](a),
#reach[edge; arc](b), and #reach[edge; edge](edge), etc.2

An interpretation relative to P is any subset I (cid:18) HB P
containing only atoms. We say that I is a model of atom
a 2 HB P , denoted I j= a, if a 2 I.

With every external predicate name #g 2 G, we associate
an (n+m+1)-ary Boolean function f#g assigning each tuple
(I; y1 : : : ; yn; x1; : : : ; xm) either 0 or 1, where n = in(#g),
m = out(#g), I (cid:18) HB P , and xi; yj 2 C.

We say that I (cid:18) HB P is a model of a ground external atom
a = #g[y1; : : : ; yn](x1; : : : ; xm), denoted I j= a, if and only
if f#g(I; y1 : : :, yn, x1; : : : ; xm) = 1.

#g[Y1; : : : ; Yn](X1; : : : ; Xm);

(1)
where Y1; : : : ; Yn and X1; : : : ; Xm are two lists of terms
(called input and output lists, respectively), and #g 2 G is
an external predicate name. We assume that #g has (cid:2)xed
lengths in(#g) = n and out(#g) = m for input and out-
put lists, respectively. Intuitively, an external atom provides a
way for deciding the truth value of an output tuple depending
on the extension of a set of input predicates.

Example 1 The external atom #reach[edge; a](X) may be
devised for computing the nodes which are reachable in
the graph edge from the node a. Here, we have that
in(#reach) = 2 and out(#reach) = 1.
2

Example 3 Let us associate with #reach a function f#reach
such that f#reach (I; E; A; B) = 1 iff B is reachable in the
graph E from A. Let I = fe(b; c); e(c; d)g. Then, I is a
model of #reach[e; b](d) since f#reach (I; e; b; d) = 1.
2

Let r be a ground rule. We de(cid:2)ne (i) I j= H(r) iff
there is some a 2 H(r) such that I j= a, (ii) I j= B(r) iff
I j= a for all a 2 B+(r) and I 6j= a for all a 2 B(cid:0)(r), and
(iii) I j= r iff I j=H(r) whenever I j= B(r). We say that I
is a model of a HEX program P , denoted I j= P , iff I j= r for
all r 2 grnd (P ). We call P satis(cid:2)able, if it has some model.
Given a HEX program P , the FLP-reduct of P with respect
to I (cid:18) HB P , denoted fP I, is the set of all r 2 grnd (P ) such

that I j= B(r). I (cid:18) HB P is an answer set of P iff I is a
minimal model of fP I.

We next give an illustrative example.

Example 4 Consider the following HEX program P :

subRelation(brotherOf ; relativeOf )   ;
brotherOf (john; al )   ;
relativeOf (john; joe)   ;
brotherOf (al ; mick )   ;

invites(john; X) _ skip(X)   X <> john;

#reach[relativeOf ; john](X);

R(X ; Y )   subRelation(P; R); P (X; Y );

  #degs[invites](Min; Max ); Min < 1;
  #degs[invites](Min; Max ); Max > 2:

Informally, this program randomly selects a certain num-
ber of John’s relatives for invitation. The (cid:2)rst line states that
brotherOf is a subrelation of relativeOf , and the next two
lines give concrete facts. The disjunctive rule chooses rela-
tives, employing the external predicate #reach from Exam-
ple 3. The next rule declares a generic subrelation inclusion
exploiting higher-order atoms.

The constraints ensure that the number of invitees is be-
tween 1 and 2, using (for illustration) an external predicate
#degs from a graph library, where f#degs (I; E; Min; Max )
is 1 iff Min and Max is the minimum and maximum ver-
tex degree of the graph induced by the edges E, respec-
tively. As John’s relatives are determined to be Al, Joe, and
Mick, P has six answer sets, each of which contains one
or two of the facts invites(john; al ), invites(john; joe), and
invites(john; mick ).
2

We now state some basic properties of the semantics.

Theorem 1 The answer-set semantics of HEX programs ex-
tends the answer-set semantics of ordinary programs as de-
(cid:2)ned by Gelfond and Lifschitz [1991], as well as the answer-
set semantics of HiLog programs as de(cid:2)ned by Ross [1994].
The next property, which is easily proved, expresses that

answer sets adhere to the principle of minimality.

Theorem 2 Every answer set of a HEX program P is a min-
imal model of P .

A ground external atom a is called monotonic relative to P
iff I (cid:18) I 0 (cid:18) HB P and I j= a imply I 0 j= a. For instance, the
ground versions of #reach[edge; a](X) are all monotonic.

Theorem 3 Let P be a HEX program without (cid:147)not(cid:148) and
constraints. If all external atoms in grnd (P ) are monotonic
relative to P , then P has some answer set. Moreover, if P is
disjunction-free, it has a single answer set.

Notice that this property fails if external atoms can be non-
monotonic.
Indeed, we can easily model default negation
not p(a) by an external atom #not[p](a); the HEX program
p(a)   #not[p](a) amounts then to the ordinary program
p(a)   not p(a), which has no answer set.

3 Modeling ASP Extensions by External

Atoms

By means of external atoms, different important extensions
of ASP can be expressed in terms of HEX programs.
3.1 Programs with aggregates
Extending ASP with special aggregate atoms, through which
the sum, maximum, etc. of a set of numbers can be refer-
enced, is an important issue which has been considered in
several recent works (cf., e.g., [Faber et al., 2004]). A non-
trivial and challenging problem in this context is giving a nat-
ural semantics for aggregates involving recursion. The recent
proposal of a semantics by Faber et al. [2004] is an elegant
solution of this problem. We show here how it can be easily
captured by HEX programs.

An aggregate atom a(Y; T ) has the form f fSg (cid:30) T ,
where f is an aggregate function (sum, count, max, etc.),
(cid:30) 2 f=; <; (cid:20); >; (cid:21)g, T is a term, and S is an expression
X: ~E( ~X; ~Y ; ~Z), where ~X and ~Y are lists of local variables,
~Z is a list of global variables, and ~E is a list of atoms whose
variables are among ~X; ~Y ; ~Z.

For example, #countfX : r(X; Z); s(Z; Y )g (cid:21) T is an
aggregate atom which is intuitively true if, for given Y and T ,
at least T different values for X are such that the conjunction
r(X; Z); s(Z; Y ) holds.

Given a(Y; T ) = f fSg (cid:30) T as above, an interpretation
I, and values y for Y and t for T , f is applied to the set
S(I; y) of all values x for X such that I j= E(x; y; z) for
some value z for Z. We then have I j= a(y; t) (i.e., I j=
f fX:E(X; y; Z)g (cid:30) t) iff f (S(I; y)) (cid:30) t.

Using the above notion of truthhood for a(y; t), Faber et
[2004] de(cid:2)ne answer sets of an ordinary program plus

al.
aggregates using the reduct fP I.

We can model an aggregate atom a(Y; T ) by an external
atom #a[Y ](T ) such that for any interpretation I and ground
version #a[y](t) of it, f#a(I; y; t) = 1 iff I j= a(y; t). Note
that writing code for evaluating f#a(I; y; t) is easy.

For any ordinary program P with aggregates, let #agg(P )
be the HEX program which results from P by replacing each
aggregate atom a(Y; T ) with the respective external atom
#a[Y ](T ). The following result can then be shown:

Theorem 4 For any ordinary program P with aggregates,
the answer sets of P and #agg(P ) coincide.
3.2 Description logic programs
The aim of description logic programs (or dl-programs), due
to Eiter et al. [2004], is to combine a rule language under
the answer-set semantics with description logics. Informally,
a dl-program consists of a description logic (DL) knowledge
base L and a generalized normal program P which may con-
tain queries to L, realized by means of special atoms, called
dl-atoms, appearing in the body of rules. A dl-atom allows
for specifying an input from P to L, and thus for a bidirec-
tional (cid:3)ow of information between P to L, and for querying
whether a certain DL axiom or its negation logically follows
from L. The DL knowledge bases in dl-programs are theo-
ries in the description logics SHIF(D) and SHOIN (D),

which represent the logical underpinnings of the Web ontol-
ogy languages OWL Lite and OWL DL, respectively [Bech-
hofer et al., 2004].

Formally, a dl-atom is an expression dl (X) of form

DL[S1 op1 p1; : : : ; Sm opm pm; Q](X) ;

m (cid:21) 0;

where each Si is a DL concept or role name, opi a change
operator, pi a unary resp. binary predicate symbol, Q a unary
resp. binary predicate, and X a list of terms matching the arity
of Q. For space reasons, we con(cid:2)ne here to opi = ] and Q
being a possibly negated unary predicate name, for which X
is a single term. Intuitively, Si ] pi increases Si in L by the
extension of pi. For example, the dl-atom

DL[hasColor ] color ; whiteWine](W )

queries a wine ontology if W is known to be a white wine,
after augmenting the ontology about wine color (hasColor)
with facts about color from a program P .

An interpretation I of P is a model of a ground instance
dl (c) of dl-atom dl (X) with respect to DL knowledge base L,
denoted I j=L dl (c), if L [ Sm
i=1fSi(b) j pi(b) 2 Ig j= Q(c),
where j= is the entailment operator of the given description
logic. That is, I j=L dl (c) iff c belongs to concept Q after
augmenting L.

Eiter et al. [2004] de(cid:2)ne answer sets of an ordinary non-
disjunctive program P relative to a DL knowledge base L
L, which extends the traditional reduct of
through a reduct sP I
Gelfond and Lifschitz [1991]. Assuming that each ground dl-
atom dl (c) is monotonic (i.e., I j= dl (c) implies I 0 j= dl (c),
L treats
for I (cid:18) I 0;
negated dl-atoms like negated ordinary atoms. The resulting
L). Then, I
L has a least model, LM (sP I
ground program sP I
is a strong answer set of (L; P ) iff I = LM (sP I
L) holds.

this is the predominant setting), sP I

We can simulate dl-atoms by external atoms in several
ways. A simple one is to use external atoms #dl[ ](X) where
f#dl(I; c) = 1 iff I j= Ldl (c). Let #dl L(P ) be the HEX pro-
gram obtained from a dl-program (L; P ) by replacing each
dl-atom dl (X) with #dl[ ](X). We can then show:

Theorem 5 Let (L; P ) be any dl-program for which all
ground dl-atoms are monotonic. Then, the strong answer sets
of (L; P ) and #dl L(P ) coincide.

Note that we can extend the strong answer-set semantics to
disjunctive dl-programs by simply extending the embedding
#dl L(P ) to disjunctive programs. This illustrates the use of
HEX programs as a framework for de(cid:2)ning semantics.
3.3 Programs with monotone cardinality atoms
Marek et al. [2004] present an extension of ASP by monotone
cardinality atoms (mc-atoms) k X, where X is a (cid:2)nite set of
ground atoms and k (cid:21) 0. Such an atom is true in an interpre-
tation I, if k (cid:21) jX \ Ij holds. Note that an ordinary atom A
amounts to 1fAg. An mca-program is a set of rules

H   B1; : : : ; Bm; not Bm+1; : : : ; not Bn

(3)

where H and the Bi’s are mc-atoms. Answer sets (stable
models) for an mca-program P are interpretations I which

are derivable models of an extended reduct P I (in the sense
of Gelfond and Lifschitz [1991]), which treats negated mc-
atoms like negated ordinary atoms. Informally, a model of
P I is derivable, if it can be created from the empty set by
iterative rule applications in which the heads of (cid:2)ring rules
are nondeterministically satis(cid:2)ed.

We can embed any mca-program P into a HEX program
#mc(P ) as follows. Each mc-atom k X is modeled by an
external atom e(k X) = #k X[ ](), where f#k X (I) = 1 iff
k (cid:21) jX \ Ij. In each rule of form (3), we replace H with a
new atom tH and all Bi with e(Bi), and add the following
rules (for H = k fA1; : : : ; Amg):

Ai _ n Ai   tH ;

1 (cid:20) i (cid:20) m;

  not e(H); tH ;

where, globally, n A is a new atom for each atom A. Infor-
mally, these rules simulate the occurrence of the mc-atom in
the head. Then, the following correspondence holds.

Theorem 6 For any (cid:2)nite mca-program P over atoms At,
the answer sets of P and #mc(P ) projected to At coincide.
As shown by Marek et al. [2004], ASP extensions similar
to mca-programs can be modeled as mca-programs. Hence,
these extensions can be similarly embedded into HEX pro-
grams.
3.4 Agent programs
Eiter et al. [1999] describe logic-based agent programs, con-
sisting of rules of the form

Op0(cid:11)0   (cid:31); [:] Op1(cid:11)1; : : : ; [:] Opm(cid:11)m;

governing an agent’s behavior. The Opi are deontic modali-
ties, the (cid:11)i are action atoms, and (cid:31) is a code-call condition.
The latter is a conjunction of (i) code-call atoms of the form
in(X; f (Y )) resp. notin(X; f (Y )), which access the data
structures of the internal agent state through API functions
f (Y ) and test whether X is in the result, and (ii) constraint
atoms. For example, the rule

Do dial (N )   in(N; phone(P )); O call (P )

intuitively says that the agent should dial phone number N if
she is obliged to call P .

A semantics of agent programs in terms of (cid:147)reasonable sta-
tus sets(cid:148), which are certain sets of ground formulas Op (cid:11), is
de(cid:2)ned by Eiter et al. [1999]. They show that the answer sets
of a disjunction-free logic program P correspond naturally to
the reasonable status sets of a straightforward agent program
AG(P ). Conversely, code-call atoms as above can be mod-
eled by external atoms #in f [Y ](X) resp. #notin f [Y ](X),
and deontic modalities by different propositions and suitable
rules. In this way, a class of agent programs can be embedded
into HEX programs as a host for evaluation.

4 Applications
In this section, we show the usage of HEX programs for dif-
ferent purposes, in which the joint availability of higher-order
and external atoms is bene(cid:2)cial. For space reasons, the expo-
sition is necessarily super(cid:2)cial and details will be omitted.

4.1 Semantic Web applications
HEX programs are well-suited as a convenient tool for a
variety of tasks related to ontology languages and for Se-
mantic-Web applications in general, since,
in contrast to
other approaches, they keep decidability but do not lack the
possibility of exploiting nondeterminism, performing meta-
reasoning, or encoding aggregates and sophisticated con-
structs through external atoms.

An interesting application scenario where several features
of HEX programs come into play is ontology alignment.
Merging knowledge from different sources in the context of
the Semantic Web is a very important task [Calvanese et al.,
2001]. To avoid inconsistencies which arise in merging, it is
important to diagnose the source of such inconsistencies and
to propose a (cid:147)repaired(cid:148) version of the merged ontology. In
general, given an entailment operator j= and two theories T1
and T2, we want to (cid:2)nd some theory rep(T1 [ T2) which,
if possible, is consistent (with respect to j= ). Usually, rep
is de(cid:2)ned according to some customized criterion, so that to
save as much knowledge as possible from T1 and T2. Also,
rep can be nondeterministic and admit more than one possi-
ble solution.

HEX programs allow to de(cid:2)ne j= according to a range of
possibilities; in the same way, HEX programs are a useful tool
for modeling and customizing the rep operator. In order to
perform ontology alignment, HEX programs must be able to
express tasks such as the following ones:
Importing external theories. This can be achieved, e.g., in

the following way:

triple(X; Y; Z)   #RDF [uri ](X; Y; Z);
triple(X; Y; Z)   #RDF [uri2 ](X; Y; Z);
proposition(P )   triple(P; rdf :type;

rdf :Statement):

We assume here to deal with RDF theories.1 We take
advantage of an external predicate #RDF intended to
extract knowledge from a given URI (Uniform Resource
Identi(cid:2)er), in form of a set of (cid:147)rei(cid:2)ed(cid:148) ternary assertions.
Searching in the space of assertions. This task is required
in order to choose nondeterministically which proposi-
tions have to be included in the merged theory and which
not, with statements like

Filtering propositions. This way, it is possible to customize
criteria for selecting which propositions can be dropped
and which cannot. For instance, a proposition cannot be
dropped if it is an RDFS axiomatic triple:2

pick (P )   axiomatic(P ):

De(cid:2)ning ontology semantics. The operator j= can be de-
(cid:2)ned in terms of entailment rules and constraints ex-
pressed in the language itself, like in:

D(X)   (C; rdf :subClassOf ; D); C(X);

  owl:maxCardinality(C; R; N ); C(X);

#countr [R; X](M ); M > N;

where the external atom #countr [R; X](M ) expresses
the aggregate atom #countfY : R(X; Y )g = M. Also,
semantics can be de(cid:2)ned by means of external reasoners,
using constraints like

  #inconsistent[pick];

where the external predicate #inconsistent takes for in-
put a set of assertions and establishes through an external
reasoner whether the underlying theory is inconsistent.

4.2 Closed world and default reasoning
Reiter’s well-known closed-world assumption (CWA)3 is ac-
knowledged as an important reasoning principle for inferring
negative information from a logical knowledge base KB: For
a ground atom p(c), conclude :p(c) if KB 6j= p(c). Descrip-
tion logic knowledge bases lack this possibility.

Using HEX programs, the CWA may be easily expressed on
top of an external KB which can be queried through suitable
external atoms. We show this here for a description logic
knowledge base L. Assuming that a generic external atom
#dl 0[C](X) for modeling a dl-atom DL[C](X) is available,
the CWA principle can be stated as follows:

C 0(X)   not #dl 0[C](X); concept(C);

cwa(C; C 0); o(X);

where concept(C) is a predicate which holds for all concepts,
cwa(C; C 0) states that C 0 is the complement of C under the
CWA, and o(X) is a predicate that holds for all individuals
occurring in L. For example, given that

pick (P ) _ drop(P )   proposition(P ):

L = f man v person; person(lee) g

Translating and manipulating rei(cid:2)ed assertions. E.g., for
choosing how to put RDF triples (possibly including
OWL assertions) in an easier manipulatable and read-
able format, and for making selected propositions true,
the following rules can be employed:

(X; Y; Z)   pick (P ); triple(P; rdf :subject ; X);

triple(P; rdf :predicate; Y );
triple(P; rdf :object ; Z);

C(X)   (X; rdf :type; C):

1See http://www.w3.org/tr/rdf-mt/ for information

about RDF.

for concepts man and person, the CWA infers :man(lee).
As well known, the CWA can become inconsistent. If in

the above example, L contains a further axiom

person = man t woman;

with the concept woman, then the CWA infers :man(lee)
and :woman(lee); this is inconsistent with L.

2In a language enriched with weak constraints, we could max-
imize the set of selected propositions using a constraint of form
:(cid:24)drop(P ).

3Throughout this section, we refer to (cid:6)ukaszewicz [1990] for

references to closed-world reasoning and circumscription.

We can check inconsistency of the CWA with further rules,

though:

set false(C; X)   cwa(C; C 0); C 0(X);

inconsistent   #dl 1[set false; ?](b);

where #dl 1[N; C](X) effects a check whether L, augmented
with all negated facts :c(a) such that N (c; a) holds, entails
C(X), and ? is the empty concept (entailment of ?(b), for
any constant b, is tantamount to inconsistency).

Minimal-model reasoning, as under circumscription and
the extended closed-world assumption (ECWA), for instance,
avoids the problem of CWA inconsistency. We can foster the
minimal Herbrand models of L with respect to all concepts
and individuals in L elegantly with the following HEX rules:

set false(C; X)   concept(C); o(X); not C(X);

C(X)   #dl 1[set false; C](X):

Here, the (cid:2)rst rule intuitively expresses that if C(X) is not
included in an answer set M of P , then it should be set to
false. The second rule states that C(X) is in M, if C(X) can
be proved in L after setting all atoms in L to false according
to M. By the minimality of answer sets, C(X) can only then
be in M. Thus, in L no C(X) can be switched to :C(X)
without raising inconsistency. Hence, M corresponds to a
minimal model of L. Applied to our example, we obtain two
answer sets (showing here only the interesting atoms):

M1 = fperson(lee); woman(lee);
set false(man; lee); : : :g;

M2 = fperson(lee); man(lee);

set false(woman; lee); : : :g;

corresponding to the minimal models of L.

Roles in L may be handled similarly. Furthermore, one can
easily restrict minimization to a subset of concepts and roles,
and accommodate the general setting of ECWA and circum-
scription, dividing the predicates into minimized, (cid:2)xed, and
varying predicates P , Q, and Z, respectively. On top of min-
imal models, e.g., reasoning tasks may then be performed.

By maximizing rather than minimizing extensions, default
reasoning, as in the approach by Poole [1988], on top of a DL
knowledge base L may be supported. For example, the rules

white(W )   #dl 1[null ; sparklingWine](W );

not n white(W );

n white(W )   #dl 2[sparklingWine; white;

whiteWine](W )

on top of a wine ontology L, express that sparkling wines are
white by default, where #dl 2[C; U; Q](X) checks whether
L,
together with all facts C(a) such that a 2 U, entails
:Q(X). Given

L = fsparklingWine(veuveCliquot);

lambrusco v (sparklingWine u :whiteWine)g;

we then can conclude white(veuveCliquot).

5 Computational Aspects
5.1 Complexity
It appears that higher-order atoms do not add complexity
compared to ordinary atoms. Indeed, for (cid:2)nite C, the ground-
ing of an arbitrary HEX program P is, like for an ordinary
program, at most exponential in the size of P and C. Since
HEX programs with higher-order atoms subsume ordinary
programs, we obtain by well-known complexity results for
ordinary programs [Dantsin et al., 2001] the following result.
Recall that NEXP denotes nondeterministic exponential time,
and that for complexity classes C and D, C D denotes com-
plexity in C with an oracle for a problem in D.

Theorem 7 Deciding whether a given HEX program P with-
out external atoms has some answer set is NEXPNP -complete
in general, and NEXP-complete if P is disjunction-free.

Classes of programs with lower complexity can be iden-
ti(cid:2)ed under syntactic restrictions, e.g., on predicate arities.
Furthermore, if from the customary ASP perspective, P is
(cid:2)xed except for ground facts representing ad-hoc input, the
complexity exponentially drops to NP NP resp. NP.

On the other hand, external atoms clearly may be a source
of complexity, and without further assumptions even incur
undecidability. Viewing the function f#g associated with an
external predicate #g 2 G as an oracle with complexity in C,
we have the following result:

Theorem 8 Let P be a HEX program, and suppose that for
every #g 2 G the function f#g has complexity in C. Then,
deciding whether P has some answer set is in NEXPNP C ,
and is in NEXPC if P is disjunction-free.

However, there is no complexity increase by external atoms

under the following condition on the cardinality of C:

Theorem 9 Let P be a HEX program. Suppose that for ev-
ery #g 2 G, the function f#g is decidable in exponential
time in jCj. Then, deciding whether P has some answer set is
NEXP NP -complete, and NEXP-complete if P is disjunction-
free.

Informally, the reason is that a possibly exponential-size
grounding compensates the exponentiality of external atoms,
whose evaluation then becomes polynomial in the size of
grnd (P ). The hypothesis of Theorem 9 applies to external
atoms modeling aggregate atoms and, under small adjust-
ments, to dl-atoms, if j= is decidable in exponential time.
Some complexity results by Faber et al. [2004] on ASP with
aggregates and by Eiter et al. [2004] on interfacing logic pro-
grams with the description logic SHIF(D) therefore follow
easily from Theorems 4, 5, and 9.
5.2
An experimental working prototype for evaluating HEX pro-
grams is available. Several technical issues in an implemen-
tation arise, and we can only brie(cid:3)y address them here. In
particular, higher-order and external atoms must be handled.

Implementation

As for higher-order atoms, a polynomial reduction (cid:3) from
HEX programs P to ordinary programs (cid:3)(P ) is possible if
P has no external atoms.
Indeed, each higher-order atom
Y0(Y1; : : : ; Yn) in P can be substituted with an ordinary atom
an(Y0; Y1; : : : ; Yn). Since HEX programs conservatively ex-
tend ordinary programs (cf. Theorem 1), the answer sets of
any HEX program P without external atoms then correspond
one-to-one with the answer sets of (cid:3)(P ). Thus, HEX pro-
grams without external atoms can be ef(cid:2)ciently evaluated by
using an existing ASP solver.

The presence of external atoms makes matters more com-
plex. (cid:3) can still be applied to eliminate higher-order atoms
from a HEX program P , and a similar correspondence holds.
We may further replace external atoms #g[ ~X](~Y ) in (cid:3)(P )
by ordinary atoms p#g( ~X; ~Y ). In the absence of negation as
failure and for monotone external atoms, the answer sets of
(cid:3)(P ) can be computed by a bottom-up (cid:2)xpoint computation
(which in case of disjunction is nondeterministic), in which
ground atoms p#g(~a;~b) are evaluated with the external func-
tion f#g.

In the presence of negation as failure, a notion of e-stra-
ti(cid:2)cation, which generalizes the usual notion of strati(cid:2)cation
and exploits further dependency information supplied for ex-
ternal atoms, can be used to identify a substantial fragment of
HEX programs evaluable on the basis of a suitable operational
semantics. In the unstrati(cid:2)ed case, guessing clauses

p#g( ~X; ~Y ) _ not p#g( ~X; ~Y )  

may be added for generating candidate answer sets of P . For
monotone external atoms, the candidates can be veri(cid:2)ed by a
(cid:2)xpoint computation. For the general case, however, ef(cid:2)cient
checking methods are needed.

6 Conclusion and Further Work
HEX programs are a natural and powerful evolution of An-
swer-Set Programming (ASP), which ful(cid:2)lls interoperability
needs with other software and supports at the same time ab-
stract problem modeling by higher-order features. These fea-
tures are needed for a wide range of applications but missing
in ASP systems today. In particular, user-de(cid:2)ned libraries can
be integrated, and thus customization to speci(cid:2)c applications
is enabled. Our further and ongoing work includes implemen-
tation beyond the working prototype, for which suitable algo-
rithms and techniques are currently under development. This
and the prototype will be discussed in detail elsewhere. Fur-
thermore, an application in the context of an ongoing project
for a personalized Web information system is targeted.

References
[Bechhofer et al., 2004] S. Bechhofer, F. van Harmelen,
J. Hendler, et al. OWL web ontology language reference.
http://www.w3.org/tr/owl-ref/.

[Calvanese et al., 2001] D. Calvanese, G. De Giacomo, and
M. Lenzerini. A framework for ontology integration. In
Proc. SWWS-2001, pp. 303(cid:150)316, 2001.

[Dantsin et al., 2001] E. Dantsin, T. Eiter, G. Gottlob, and
A. Voronkov. Complexity and expressive power of logic
programming. ACM Comp. Surveys, 33:374-425, 2001.

[Eiter et al., 1999] T. Eiter, V.S. Subrahmanian, and G. Pick.
Heterogeneous active agents, I: Semantics. Arti(cid:2)cial Intel-
ligence, 108(1-2):179(cid:150)255, 1999.

[Eiter et al., 2004] T. Eiter, T. Lukasiewicz, R. Schindlauer,
and H. Tompits. Combining Answer Set Programming
with description logics for the Semantic Web.
In Proc.
KR-2004, pp. 141(cid:150)151, 2004.

[Faber et al., 2004] W. Faber, N. Leone, and G. Pfeifer. Re-
cursive aggregates in disjunctive logic programs: Seman-
tics and complexity. In Proc. JELIA-2004, pp. 200(cid:150)212,
2004.

[Gelfond and Lifschitz, 1991] M. Gelfond and V. Lifschitz.
Classical negation in logic programs and disjunctive
databases. New Generation Computing, 9:365(cid:150)385, 1991.
[Heymans and Vermeir, 2003] S. Heymans and D. Vermeir.
Integrating Semantic Web reasoning and Answer Set Pro-
gramming. In Proc. ASP-2003, pp. 194(cid:150)208, 2003.

[Kifer et al., 1995] M. Kifer, G. Lausen, and J. Wu. Logical
foundations of object-oriented and frame-based languages.
J. ACM, 42(4):741(cid:150)843, 1995.

[Leone et al., 2005] N. Leone, G. Pfeifer, W. Faber, T. Eiter,
G. Gottlob, S. Perri, and F. Scarcello. The DLV system for
knowledge representation and reasoning. ACM Transac-
tions on Computational Logic, 2005. To appear.

[(cid:6)ukaszewicz, 1990] W. (cid:6)ukaszewicz. Non-monotonic Rea-
soning: Formalizations of Commonsense Reasoning. Ellis
Horwood, 1990.

[Marek et al., 2004] V. Marek, I. Niemel¤a, and M. Trusz-
Logic programs with monotone cardinality

czy·nski.
atoms. In Proc. LPNMR-2004, pp. 154(cid:150)166, 2004.

[Poole, 1988] D. Poole. A logical framework for default rea-

soning. Arti(cid:2)cial Intelligence, 36:27(cid:150)47, 1988.

[Rosati, 1999] R. Rosati. Towards expressive KR systems
integrating datalog and description logics: Preliminary re-
port. In Proc. DL-1999, pp. 160(cid:150)164, 1999.

[Ross, 1994] K. A. Ross. On negation in HiLog. Journal of

Logic Programming, 18(1):27(cid:150)53, 1994.

[Simons et al., 2002] P. Simons, I. Niemel¤a, and T. Soininen.
Extending and implementing the stable model semantics.
Arti(cid:2)cial Intelligence, 138:181(cid:150)234, 2002.

[Sintek and Decker, 2002] M. Sintek

and S. Decker.
TRIPLE - A query, inference, and transformation lan-
guage for the Semantic Web.
In Proc. ISWC-2002, pp.
364(cid:150)378, 2002.

