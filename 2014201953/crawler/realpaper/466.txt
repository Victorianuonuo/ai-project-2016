In the quest of the best form of local consistency for Weighted CSP 

Javier  Larrosa 

Department  of Software 

Universitat Politecnica de Catalunya 

Barcelona, Spain 

larrosa@lsi.upc.es 

Thomas Schiex 

Dept. de Biometrie et Intelligence Artificielle 
Institut National de Recherche Agronomique 

Toulouse, France 

Thomas.Schiex@toulouse.inra.fr 

Abstract 

The  weighted  CSP  (WCSP)  framework  is  a  soft 
constraint  framework  with  a  wide  range  of appli(cid:173)
cations. 
In  this  paper,  we  consider  the  problem 
of maintaining  local  consistency  during  search  for 
solving WCSP. We first refine the notions of direc(cid:173)
tional  arc  consistency  (DAC)  and full  directional 
arc  consistency  (FDAC)  introduced  in  [Cooper, 
2003]  for binary WCSP, define algorithms that en(cid:173)
force these properties and study their complexities. 
We  then  consider  algorithms  that  maintain  either 
arc consistency (AC), DAC or FDAC during search. 
The  efficiency  of these  algorithms  is  empirically 
studied. 
It  appears  that  despite  its  high  theoreti(cid:173)
cal  cost,  the  strongest  FDAC  property  is  the  best 
choice. 

Introduction 

1 
It  is  well  known  that  arc  consistency  (AC)  plays  a  preemi(cid:173)
nent role in efficient constraint solving.  In the last few years, 
the CSP framework has been augmented with so-called soft 
constraints  with  which  it  is  possible  to  express  preferences 
among  solutions  [Schiex  et ai,  1995;  Bistarelli  et ai,  1997]. 
Soft constraint frameworks associate  costs  to tuples  and the 
goal  is  to  find  a  complete  assignment  with  minimum  com(cid:173)
bined  cost.  Costs  from  different  constraints  are  combined 
with a domain dependent  operator 
Extending the  notion 
of AC to soft constraint  frameworks has been a  challenge  in 
,From previous  works  we  can  conclude 
the  last  few years. 
that the extension is direct as long as the operator 
is idem-
potent.  Then,  [Schiex,  2000]  proposed  an  extension  of AC 
which can deal with  non-idempotent 
This definition has 
three  nice  properties:  (i)  it  can  be  enforced  in  polynomial 
time,  (ii)  the process of enforcing AC reveals  infeasible val(cid:173)
ues that can be pruned and  (iii)  it reduces to existing defini(cid:173)
tions in the idempotent operator case.  [Cooper, 2003]  further 
introduced  directional  arc  consistency  (DAC)  and full  direc-
tional arc consistency for strictly  monotonic 

Weighted  constraint  satisfaction  problems  (WCSP)  is  a 
well known soft-constraint framework with a non-idempotent 
operator 
It provides a very general model with several ap(cid:173)
plications  in  domains such  as resource allocation  [Cabon et 

ai,  1999],  combinatorial  auctions  [Sandholm,  1999],  bioin-
formatics and probabilistic reasoning [Pearl,  1988].  [Larrosa, 
2002]  introduced  AC*,  a  refinement of the  AC definition  for 
WCSP. This definition provides a stronger yet simple and el(cid:173)
egant property to be maintained during search. 

In this paper,  we take  the  definitions  of DAC  and  FDAC, 
strengthen  and  extend  them  to  binary  WCSP,  defining  the 
DAC*  and  FDAC*  properties.  We  then  define  correspond(cid:173)
ing enforcing algorithms.  As  in  the  classical  CSP case,  we 
then  consider  the  problem  of maintaining  AC*,  DAC*  and 
FDAC*  during  search  and  empirically  compare  these  algo(cid:173)
rithms.  These  algorithms have  a wide  range  of applications 
and allow a nice  integration of hard and soft constraints in a 
common algorithmic  framework. 

2  Preliminaries 
2.1  CSP 
A  binary  constraint  satisfaction  problem  (CSP)  is  a  triple 
is a set of variables.  Each 
variable 
has a  finite  d o m a i n of  values  that 
can be assigned to it.  (i,a)  denotes  the assignment of value 
to variable  i.  A tuple  t  is  an assignment to a set of 
variables.  Actually,  t  is an ordered set of values assigned to 
(namely,  the  k-th  ele(cid:173)
the  ordered  set  of variables 
ment off is the value assigned to the k-th element  of 
i  For 
the projection of t over B is  n o t e d is 
a subset 
a set of unary and binary constraints.  A unary constraint 
is 
a subset  of 
containing the permitted assignments to vari(cid:173)
able i.  A binary  constraint 
containing  the  permitted  simultaneous  assignments  to  i  and 
j.  The  set  of variables  affected  by  a  constraint  is  called  its 
scope.  A  tuple  t  is  consistent  if it  satisfies  all  constraints 
whose  scope  is  included  in 
^.  A  solution  is  a  consistent 
complete assignment.  Finding a solution in a CSP is an NP-
complete problem.  The task of searching  for a solution can 
be simplified by enforcing arc consistency, which may prune 
values that cannot participate to a solution. 

is a set of pairs from 

x 

2.2  Weighted  CSPs 
Valued  CSP  (as  well  as  semi-ring  CSP)  extend  the  CSP 
framework by associating costs to tuples [Schiex et  al,  1995; 
Bistarelli  et  ai,  1997]. 
In  general,  costs  are  specified  by 
means  of a  so-called  valuation  structure  defined  as  a  triple 

CONSTRAINTS 

239 

Figure  1:  Six equivalent WCSPs (for A: = 4). 

strictly monotonic valuation structure where  finite  costs can(cid:173)
not  lead  to  deletion. 
In  practice,  most  branch  and bound-
based solvers maintain an upper bound ub, the maximum ac(cid:173)
ceptable cost so-far, and a lower bound lb on the optimal ex(cid:173)
tension  of the  current assignment.  Value pruning  occurs  as 
soon 
The WCSP framework makes these two ele(cid:173)
ments explicit:  a solver uses the valuation structure S(ub)  at 
every subproblem and 

provides the lower bound. 

as 

3  Some local consistencies in WCSP 
In this Section we define node, arc, directed arc and full  di(cid:173)
rected arc consistencies.  For node and arc consistencies, our 
definitions  arc  equivalent  to  the  NC*  and  AC*  definitions 
in  [Larrosa, 2002]. For DAC, and FDAC, the starred (*) def(cid:173)
initions refine the definitions in [Cooper, 2003] to the WCSP 
case,  using node consistency and  C0.  In the sequel, we as(cid:173)
sume that the set of variables ,V is totally ordered by  >. 

Tuple /  is consistent  if 

The usual  task  of inter(cid:173)
est is to find a complete consistent assignment with minimum 
cost,  which  is  NP-hard.  Observe  that  WCSP  with  k  =  1 
reduces to  classical  CSP.  In  addition,  S(k)  is  idempotent iff 
k  =  1  and strictly monotonic  iff 
Two WCSP defined 
over the same variables are said to be equivalent if they define 
the same cost distribution on complete assignments. 

For simplicity in our exposition, we assume that every con(cid:173)
straint has a different scope.  For the moment, we also assume 
that constraints are implemented as tables and that it is pos(cid:173)
sible to consult and modify entries.  This is done without loss 
of generality  (see the proof of Theorem  3). 
Example  1  Figure  La shows a  WCSP with  valuation struc(cid:173)
ture  S(4)  (the  set  of costs  is  [ 0 , . . ., 4],  with 
and 
T  = 4).  It has three variables 
with values a, b. 
There  are  2  binary  constraints  Cxz, Cyz  and two  non  trivial 
unary  constraints  Cx  and Cz.  Unary  costs  are  depicted in-
side their domain value.  Binary costs are depicted as labelled 
edges  connecting  the  corresponding pair  of values  (default 
cost of J).  Zero costs are not shown.  One optimal solution is 
eg.  x  =  y = z  =  b, with cost 2. 

Our definition of WCSP is the same as in [Larrosa, 2002]. 
It differs from usual definitions [Schiex etal.,  1995; Bistarelli 
case, a 
et  al.,  1997]  which  restrict  WCSP  to  the 

240 

CONSTRAINTS 

There is  a strong relation  between directional  arc  consis­
tency  and  mini-buckets  [Dechter,  1997J. 
It  can  easily  be 
shown  that  given  a WCSP defined  over the  valuation  struc­
ture 5(oo) and a variable ordering, the lower bound induced 
by mini-buckets involving at most 2 variables is the same as 
the  lower  bound  induced  by  CΦ  after  the  problem  is  made 
directional  arc  consistent.  However,  the  mini-bucket  com­
putation  provides  only  a  lower bound  while  DAC  enforcing 
provides both a lower bound and a directional arc consistent 
equivalent problem.  All the work done to compute the lower 
bound  is captured in this problem  which offers  the opportu­
nity to perform incremental  updates of the lower bound. 

4  Enforcing Arc Consistencies 
The previous node and arc consistency properties can be en­
forced  by  applying  basic  operations  until  the  correspond­
ing  property  is  satisfied:  pruning  node-inconsistent  values, 
forcing supports to variables (NC*),  forcing (full) support to 
node-consistent values (AC). As pointed out in [Schiex, 2000; 
Larrosa, 2002], value (resp.  variable) supports can be forced 
by  sending  costs  from  binary  (resp.  unary)  constraints  to 
unary constraints (resp.  CΦ).  Full  support can be forced by 
first sending costs from a unary constraint  Cj  to  CiJ  and then 
sending the cost from 
. Let us review 
these concepts before introducing basic algorithms. 

the subtraction of b from a, defined as, 

be two costs such that 

is 

The projection of a cost units from  Ci,j  E  C over value  (i, a) 
is a flow of a cost units from the binary constraint to the unary 
cost Ci(a).  It is embodied in the Procedure 

1The  stronger local  property that  would require a full  support 
on both sides suffers from the fact that most WCSP don't have an 
equivalent WCSP that satisfies this property. 

CONSTRAINTS 

241 

Procedure DAC*() has been designed to be used alone to en(cid:173)
force DAC* or in conjunction with AC*() to enforce FDAC*. 
Therefore, whenever a value is pruned, DAC*() inserts its vari(cid:173)
able  in Q to  inform AC*()  of the deletion.  DAC*  further uses 
a priority queue  R  that  contains  those  variables  such  that  a 
unary  cost  has  been  increased  from  _L:  in  this  case,  some 
values in lower variables may have lost full  support and new 
supports need to be found.  The main loop iterates while R is 
not empty.  At each iteration, the highest variable j  is fetched 
from  R.  Node  inconsistent  values  (due  to  unary  cost  and 
lower bound  increments)  are removed  using  PruneVar()  and 
pruned variables  are  inserted  in  Q.  Then  new  full  supports 
are  sought  for  every  lower  variable  connected  to j.  Finally, 
all variables are processed to enforce NC* which can be lost 
during the process,  due to  lower bound  increments.  Pruned 
variables  are  inserted  in  Q.  FDAC*()  simply  enforces  AC* 
and DAC*  simultaneously:  the enforcement of AC*  empties 
Q but may add variables to R, and the enforcement of DAC* 
empties  R but  may add  variables to  Q.  FDAC*  is  achieved 
when both R. and Q are simultaneously empty.  Correction of 
both algorithms follows from theorem 2. 

The new basic operation needed to enforce {F}DAC* con(cid:173)
sists  in  forcing full supports  for the  values  of a  variable  i  on 
one side of a constraint  Cij.  As shown in the example,  this 
can  be  done  by  extending  unary  costs  from  Cj  to  Cij  and 
then projecting  Cij  onto variable  Ci.  However, extending all 
unary costs may destroy supports  for j  on  Cij.  Consider the 
AC*  Problem  l.d. 
If we  extend  2  cost  units  from  (z,a)  to 
Cyz  instead  of 1  as  in  the  example  and  then  project  on  Cy, 
we  get  Problem  l.f where  (2,a)  has  lost  all  supports  on  y. 
In  order to  smoothly  integrate  DAC*  and  AC*  enforcing to 
obtain  FDAC*  enforcing,  we  must  obtain  full  supports  for 
variable  i  on  Cij  while preserving supports  for all  values of 
j on  Cij.  This is obtained by extending the minimum cost of 
Cj  required  for the  subsequent projection onto  Ci.  The  cor(cid:173)
rectness of our algorithms is based on the following theorem, 

242 

CONSTRAINTS 

5  Experimental results 
In this Section we perform an empirical evaluation of the ef(cid:173)
fect  of maintaining  various  forms  of arc  consistency  during 
search.  We consider a depth-first search  maintaining  either 
NC*,  AC*,  DAC*  or  FDAC*  which  yields  the  algorithms 
MNC*,  MAC*,  MDAC*  and  MFDAC*.  For  comparison, 
we  include results obtained with  PFC-RDAC  [Larrosa et al., 
1999], which is normally considered as a reference algorithm. 
For variable selection we use the dom/deg heuristic which 
for  each  variable  computes  the  ratio  of the  domain-size  di(cid:173)
vided  by  the  future  degree  (i.e.,  degree  considering  future 
variables  only)  and  selects  the  variable  with  the  smallest 
value.  For value  selection  we  consider values  in  increasing 
order of unary cost  Ci.  The variable ordering used for direc(cid:173)
tional arc consistencies is lexicographic. 

We  consider  the  Max-CSP  problem,  where  the  goal  is 
to  find  a  complete  assignment  with  a  maximum  number 
of  satisfied  constraints  in  an  overconstrained  CSR  It  can 
easily  be  formulated  as  a  WCSR  We  experiment  with  bi(cid:173)
nary random problems using the well-known four-parameters 
model  [Smith,  1994].  A  random  CSP  class  is  defined  by 
(n,d,e, t)  where  n  is  the  number  of variables,  d  is  the  do(cid:173)
main  size,  e  is  the  number of binary  constraints  (i.e,  graph 
connectivity),  and  t  the  number  of forbidden  tuples  in  each 
constraint (i.e, tightness).  Pairs of constrained variables and 
their forbidden tuples are randomly selected using a uniform 
distribution.  Samples have 50 instances and we report aver(cid:173)
age values.  The experiments were performed on a 800 MHz 
Pentium III computer. 

For  fixed  values  of  n,  d  and  c  and  increasing tightness  t, 
most problems are solved almost instantly until the cross-over 
point  is  reached.  Then,  problems  become  overconstrained 
and much harder to solve.  We denote t° the lowest tightness 
where every instance in our sample is overconstrained.  Based 
on this, we define different categories of problems: 

priority queue, when a variable j  is extracted from R, all the 
variables  before j  in  R  have  already  been  processed.  Since 
FindFullSupportAC*() can only increase non zero unary costs 
of variables strictly  lower than j, j  will  never be reintroduced 
in R and therefore each variable j  is added to the queue R at 
most once. The queue is implemented as an array of booleans 
and  a  pointer to  the  highest  true  element.  Adding  new  el(cid:173)
ements  to  R  means  updating  the  pointer,  the pop  operation 
consists  on  returning  the  value  of the  pointer and  searching 

Proof:  Regarding space, there  is no difference with  DAC*() 
and  the  same  proof applies.  Regarding  time,  a  variable  j 
enters  Q  only  if a  value  has  been  deleted.  Therefore,  each 
variable j is added to Q at most d  +  1  times (once at initial(cid:173)
ization and then upon value deletion at lines 5, 6 or 4). There-

Combining the different types, we obtain 4 different classes, 
each  being  denoted  by  a  pair  of characters  (SL,ST,DL  and 
DT). In each class, the domain size is set to 10 and the num(cid:173)
ber of variables  n  is  used  as a  varying parameter.  Figure 2 
shows  the average  cpu  time  used  with  SL,  ST,  DL  and DT 
from left to right.  In each plot, the five algorithms are listed 
in  increasing  order of efficiency,  from  top  to  bottom.  In  all 
cases, the search effort seems to grow exponentially with n. 

CONSTRAINTS 

243 

Figure 2: Cpu-time in seconds for an increasing number of variable on our 4 classes of problems. In each case, the 4 algorithms 
arc listed in increasing order of efficiency from top to bottom. 

For all classes except the DL class,  MFDAC*  is the most 
efficient algorithm, with only minor differences with MDAC* 
(sometimes they are so closed that the two  lines can hardly 
be distinguished).  The best performance of MFDAC*  is ob(cid:173)
tained in the ST problems, where it is up to 5 times faster than 
PFC-RDAC, 20 times faster than MAC* and 50 times faster 
than  MNC*.  For the DL class,  however,  MNC*  is the most 
efficient  algorithm,  followed  by  PFC-RDAC,  MAC*,  MF(cid:173)
DAC* and MDAC*.  The differences between the algorithms 
are however more limited than in previous classes (MNC* is 
twice faster than MFDAC*). 

The  ability  of directional  arc  consistency  to  collect  costs 
along  the  constraints  in  order to  bring  them  together  in  the 
same variable allows to build stronger lower bounds.  This is 
confirmed  by the  analysis  of the  number of nodes  expanded 
by each algorithm (not reported here for lack of space) where 
MDAC*  and MFDAC*  always expand less nodes that PFC-
RDAC, MNC* or MAC*, with a ratio that can reach 300 be(cid:173)
tween the extreme algorithms on eg.  ST problems.  On the 
DL problems however, this ratio is much more limited, typi(cid:173)
cally bounded by 4.  With loose constraints, the upper bound 
reaches low values early in the search which allows pruning 
at high levels of the search tree and makes sophisticated lower 
bounds less significant. 

It is worth to mention at this point that PFC-RDAC heuris-
tically  assigns  a  direction  to  every  constraint  in  each  sub-
problem and this has a strong influence on the efficiency on 
random  Max-CSP.  Similarly,  the  behavior of AC,  DAC  and 
FDAC based algorithms depends on the order in which vari(cid:173)
ables are fetched from Q  and  R (i.e.,  on the variable order(cid:173)
ing  used  to  define  DAC)  and  on  the  order  in  which  values 
are considered for projection.  In our current implementation, 
Q  is  implemented as a stack,  values are  considered  in lexi(cid:173)
cographic ordering and the DAC variable ordering is lexico(cid:173)
graphic.  This leaves room for further improvement. 

6  Conclusion and Future Work 
In this paper we have refined two local consistency properties 
and  adapted  them  to  WCSP.  We  have  developed  enforcing 
algorithms and have studied their complexity. 

As in classical CSP, we observe that the choice of the right 
level of local consistency to maintain during search is impor(cid:173)
tant.  Despite  its theoretical  cost,  the strongest local  consis(cid:173)
tency we considered (FDAC*) appears to be the best level for 
solving WCSP.  In the future, we want to extend these algo(cid:173)
rithms to  non  binary  constraints,  apply  them  to  other prob(cid:173)

lems  and  take  into  account  heuristics  for  the  variable  and 
value ordering used in AC, DAC and FDAC enforcing. 

References 
[Bessiere and Regin, 2001]  C. Bessiere and J-C. Regin.  Re(cid:173)
fining the basic constraint propagation algorithm.  In Proc. 
of the 14th IJCAI, pages 309-315, 2001. 

[Bistarelli etal,  1997]  S.  Bistarelli,  U.  Montanari,  and 
F. Rossi.  Semiring based constraint solving and optimiza(cid:173)
tion.  Journal of the ACM, 44(2):201-236,  1997. 

[Cdbon et  al,  1999]  B.  Cabon,  S.  de  Givry,  L.  Lobjois, 
T  Schiex, and J.P. Warners.  Radio link frequency assign(cid:173)
ment.  Constraints Journal, 4:79-89,  1999. 

[Cooper, 2003]  Martin  C.  Cooper.  Reduction operations  in 
fuzzy or valued constraint satisfaction. Fuzzy Sets and Sys(cid:173)
tems, 134(3), 2003. 

[Dechter,  1997]  R.  Dechter.  Mini-buckets:  A  general 
scheme  for generating  approximations  in  automated  rea(cid:173)
soning. In Proc. of IJCAI'97, Nagoya, Japan, 1997. 

[Larrosa et al., 1999]  J. Larrosa, P. Meseguer, and T. Schiex. 
Maintaining  reversible  DAC  for  Max-CSP.  Artificial  In-
telligence,  107(1):149-163,  1999. 

[Larrosa, 2002]  Javier Larrosa.  On arc and node consistency 

in weighted CSP.  In Proc.  AAAI'02, 2002. 

[Pearl,  1988]  Judea Pearl.  Probabilistic Reasoning in  Intel(cid:173)
ligent  Systems,  Networks  of  Plausible  Inference.  Morgan 
Kaufmann, Palo Alto, 1988. 

[Sandholm,  1999]  T.  Sandholm.  An  algorithm  for optimal 
winner determination  in combinatorial auctions.  In Proc. 
of  IJCAI'99,  pages  542-547,  1999. 

[Schiex et al,  1995]  T.  Schiex,  H.  Fargier,  and  G.  Verfail-
lie. Valued constraint satisfaction problems: hard and easy 
problems.  In  Proc.  of  IJCAI'95,  pages  631-637,  1995. 

[Schiex, 2000]  T.  Schiex.  Arc  consistency  for  soft  con(cid:173)
straints.  In  CP'2000,  volume  1894 of LNCS, pages 411-
424, 2000. 

[Smith,  1994]  B.  Smith.  Phase transition and the mushy re(cid:173)
gion  in  constraint  satisfaction.  In  Proc.  of  the  11st  ECAI, 
pages 100-104, 1994. 

244 

CONSTRAINTS 

