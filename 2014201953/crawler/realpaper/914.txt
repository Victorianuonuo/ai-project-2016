On the Logic of Normative Systems

Thomas ˚Agotnes1, Wiebe van der Hoek2,

Juan A. Rodr´ıguez-Aguilar3,

Carles Sierra3, Michael Wooldridge2

1Bergen University College
Norway

2University of Liverpool
United Kingdom

3CSIC-IIIA
Catalonia, Spain

tag@hib.no

wiebe,mjw@csc.liv.ac.uk

jar,carles@iiia.csic.es

Abstract

We introduce Normative Temporal Logic (NTL), a
logic for reasoning about normative systems. NTL
is a generalisation of the well-known branching-
time temporal logic CTL, in which the path quan-
tiﬁers A (“on all paths. . . ”)
and E (“on some
path. . . ”)
are replaced by the indexed deontic
operators Oη and Pη, where for example Oηϕ
means “ϕ is obligatory in the context of norma-
tive system η”. After deﬁning the logic, we give
a sound and complete axiomatisation, and discuss
the logic’s relationship to standard deontic logics.
We present a symbolic representation language for
models and normative systems, and identify four
different model checking problems, corresponding
to whether or not a model is represented symboli-
cally or explicitly, and whether or not we are given
an interpretation for the normative systems named
in formulae to be checked. We show that the com-
plexity of model checking varies from P-complete
up to EXPTIME-hard for these variations.

1 Introduction
Normative systems, or social laws, have been widely pro-
moted as an approach to coordinating multi-agent sys-
tems [Shoham and Tennenholtz, 1996]. Crudely, a norma-
tive system deﬁnes a set of constraints on the behaviour of
agents, corresponding to obligations, which may or may not
be observed by agents. A number of formalisms have been
proposed for reasoning about normative behaviour in multi-
agent systems, typically based on deontic logic [Meyer and
Wieringa, 1993]. However the computational properties of
such formalisms – in particular, their use in the practical de-
sign and synthesis of normative systems and the complexity
of reasoning with them – has received little attention. In this
paper, we rectify this omission. We present Normative Tem-
poral Logic (NTL), a logic for reasoning about normative sys-
tems, which is closely related to the well-known and widely-
used branching time logic CTL [Emerson, 1990]. In NTL, the
universal and existential path quantiﬁers of CTL are replaced
by indexed deontic operators Oη and Pη, where Oηϕ means
that “ϕ is obligatory in the context of the normative system
η”, and Pηϕ means “ϕ is permissible in the context of the

g, ♦,

normative system η”. Here, ϕ is a temporal logic expres-
sion over the usual CTL temporal operators
, and
U (every temporal operator must be preceded by a deontic
operator, cf. CTL syntax), and η denotes a normative system.
In NTL, obligations and permissions are thus, ﬁrst, contextu-
alised to a normative system η and, second, have a temporal
dimension. It has been argued that the latter can help avoid
some of the paradoxes of classical deontic logic. NTL gener-
alises CTL because by letting η∅ denote the empty normative
system, the universal path quantiﬁer A can be interpreted as
Oη∅ ; much of the technical machinery developed for reason-
ing with CTL can thus be adapted for NTL [Emerson, 1990;
Clarke et al., 2000]. NTL is in fact a descendent of the Norma-
tive ATL (NATL) logic introduced in [Wooldridge and van der
Hoek, 2005]: however, NTL is much simpler (and we believe
more intuitive) than NATL, and we are able to present many
more technical results for the logic: we ﬁrst give a sound and
complete axiomatisation, and then discuss the logic’s rela-
tionship to standard deontic logics. We introduce a symbolic
representation language for normative systems, and investi-
gate the complexity of model checking for NTL, showing that
it varies from P-complete in the simplest case up to EXPTIME-
hard in the worst. We present an example to illustrate the
approach, and present some brief conclusions.

2 Normative Temporal Logic
Kripke Structures: Let Φ = {p, q, . . .} be a ﬁnite set of
atomic propositional variables. A Kripke structure (over Φ)
is a quad K = (cid:3)S, S0, R, V(cid:4), where: S is a ﬁnite, non-empty
set of states, with S0 ⊆ S (S0 (cid:6)= ∅) being the initial states;
R ⊆ S × S is a total binary relation on S, which we refer to
as the transition relation1; and V : S → 2Φ labels each state
with the set of propositional variables true in that state. A
path over R is an inﬁnite sequence of states π = s0, s1, . . .
which must satisfy the property that ∀u ∈ N: (su, su+1) ∈ R.
If u ∈ N, then we denote by π[u] the component indexed by u
in π (thus π[0] denotes the ﬁrst element, π[1] the second, and
so on). A path π such that π[0] = s is an s-path.

Normative Systems:
In this paper, a normative system is
a set of constraints on the behaviour of agents in a system.

1A relation R ⊆ S × S is total iff ∀s ∃s

(cid:2) : (s, s

(cid:2)) ∈ R.

IJCAI-07

1175

More precisely, a normative system deﬁnes, for every possi-
ble system transition, whether or not that transition is con-
sidered to be legal or not. Different normative systems may
differ on whether or not a transition is legal. Formally, a nor-
mative system η (w.r.t. a Kripke structure K = (cid:3)S, S0, R, V(cid:4))
is simply a subset of R, such that R \ η is a total relation. The
requirement that R\η is total is a reasonableness constraint: it
prevents normative systems which lead to states with no suc-
cessor. Let N(R) = {η | (η ⊆ R) & (R \ η is total)} be the
set of normative systems over R. The intended interpretation
of a normative system η is that (s, s(cid:3)) ∈ η means transition
(cid:3)) is forbidden in the context of η; hence R \ η denotes the
(s, s
legal transitions of η. Since it is assumed η is reasonable, we
are guaranteed that a legal outward transition exists for every
state. If π is a path over R and η is a normative system over
R, then π is η-conformant if ∀u ∈ N, (π[u], π[u + 1]) (cid:6)∈ η.
Let Cη(s) be the set of η-conformant s-paths (w.r.t. some R).
Since normative systems are just sets (of disallowed tran-
sitions), we can compare them, to determine, for example,
whether one is more liberal (less restrictive) than another: if
η ⊂ η(cid:3), then η places fewer constraints on a system than η(cid:3),
hence η is more liberal. Notice that, assuming an explicit rep-
resentation of normative systems, (i.e., representing a norma-
tive system η directly as a subset of R), checking such prop-
erties can be done in polynomial time. We can also operate
on them with the standard set theoretic operations of union,
intersection, etc. Taking the union of two normative systems
η1 and η2 may yield (depending on whether R \ (η1 ∪ η2) is
total) a normative system that is more restrictive (less liberal)
than either of its parent systems, while taking the intersection
of two normative systems yields a normative system which is
less restrictive (more liberal). Care must be taken when oper-
ating on normative systems in this way to ensure the resulting
system is reasonable.

Syntax of NTL: The language of NTL is a generalisation of
CTL: the only issue that may cause confusion is that, within
this language, we refer explicitly to normative systems, which
are semantic objects. We will therefore assume a stock of
syntactic elements Ση which will denote normative systems.
To avoid a proliferation of notation, we will use the symbol η
both as a syntactic element for normative systems in the lan-
guage, and the same symbol to denote the corresponding se-
mantic object. An interpretation for symbols Ση with respect
to a transition relation R is a function I : Ση → N(R). When
R is a transition relation of Kripke structure K we say that I
is an interpretation over K. We will assume that the symbol
η∅ always denotes the emptyset normative system, i.e., the
normative system which forbids no transitions. Note that this
normative system will be reasonable for any Kripke structure.
Thus, we require that for all I: I(η∅) = ∅. The syntax of NTL
is deﬁned by the following grammar:
ϕ ::= (cid:6) | p | ¬ϕ | ϕ∨ϕ | Pη
where p ∈ Φ and η ∈ Ση. Sometimes we call α occurring
in an expression Oηα or Pηα a temporal formula (although
such an α is not a well-formed formula).

fϕ | Pη(ϕ U ϕ) | Oη

fϕ | Oη(ϕ U ϕ)

K is a Kripke structure, s is a state in K, I an interpretation
over K, and ϕ a formulae of the language, as follows:

(where p ∈ Φ);

K, s |=I (cid:6);
K, s |=I p iff p ∈ V(s)
K, s |=I ¬ϕ iff not K, s |=I ϕ;
K, s |=I ϕ ∨ ψ iff K, s |=I ϕ or K, s |=I ψ;
K, s |=I Oη
K, s |=I Pη
K, s |=I Oη(ϕ U ψ) iff ∀π ∈ C
ψ and ∀v, (0 ≤ v < u) : K, π[v] |=I ϕ
K, s |=I Pη(ϕ U ψ) iff ∃π ∈ C
ψ and ∀v, (0 ≤ v < u) : K, π[v] |=I ϕ

fϕ iff ∀π ∈ C
fϕ iff ∃π ∈ C

I(η)(s) : K, π[1] |=I ϕ;
I(η)(s) : K, π[1] |=I ϕ;

I(η)(s), ∃u ∈ N, s.t. K, π[u] |=I

I(η)(s), ∃u ∈ N, s.t. K, π[u] |=I

The remaining classical logic connectives (“∧”, “→”, “↔”)
are assumed to be deﬁned as abbreviations in terms of ¬, ∨,
in the conventional manner. We write K |=I ϕ if K, s0 |=I ϕ
for all s0 ∈ S0, K |= ϕ if K |=I ϕ for all I, and |= ϕ if K |= ϕ
for all K. The remaining CTL temporal operators are deﬁned:

Oη♦ϕ ≡ Oη((cid:17) U ϕ)
Oη ϕ ≡ ¬Pη♦¬ϕ

Pη♦ϕ ≡ Pη((cid:17) U ϕ)
Pη ϕ ≡ ¬Oη♦¬ϕ

Recalling that η∅ denotes the empty normative system, we
obtain the conventional path quantiﬁers of CTL as follows:
Aα ≡ Oη∅

α, Eα ≡ Pη∅

α.

Properties and Axiomatisation: The following Proposi-
tion makes precise the expected property that a less liberal
system has more obligations (and less permissions) than a
more liberal system.
Proposition 1 Let K be a Kripke structure, I be an interpre-
tation over K, and η1, η2 ∈ Ση: If I(η1) ⊆ I(η2) then K |=I
Oη1

ϕ and K |=I Pη2

ϕ → Oη2

ϕ → Pη1

ϕ.

We now present a sound and complete axiomatisation for NTL
− be NTL without
and some of its variants. First, let NTL
− is deﬁned
the empty normative system η∅. Formally, NTL
exactly as NTL, except for the requirement that Ση contains
the η∅ symbol and the corresponding restriction on interpre-
−, denoted (cid:18)−, is deﬁned
tations. An axiom system for NTL
− can be
by axioms and rules (Ax1)–(R2) in Figure 1. NTL
seen as a multi-dimensional variant of CTL, where there are
several indexed versions of each path quantiﬁer.

Going on to NTL, we add axioms (Obl) and (Perm) (Fig-
ure 1); the corresponding inference system is denoted (cid:18). We
then, have the following chain of implications in NTL (the
second element in the chain is a variant of the deontic ax-
iom discussed below). If something is naturally, or physically
inevitable, then it is obligatory in any normative system; if
something is an obligation within a given normative system
η, then it is permissible in η; and if something is permissible
in a given normative system, then it is naturally (physically)
possible:
(cid:18) (Aϕ → Oηϕ)

(cid:18) (Oηϕ → Pηϕ)

(cid:18) (Pηϕ → Eϕ)

Semantic Rules: The semantics of NTL are given with re-
spect to the satisfaction relation “|=”. K, s |=I ϕ holds when

Finally, let NTL

+ be the extension of NTL obtained by ex-
tending the logical language with propositions on the form

IJCAI-07

1176

(Ax1) All validities of propositional logic
(Ax2) Pη♦ϕ ↔ Pη((cid:6) U ϕ)
(Ax2b) Oη ϕ ↔ ¬Pη♦¬ϕ
(Ax3) Oη♦ϕ ↔ Oη((cid:6) U ϕ)
(Ax3b) Pη ϕ ↔ ¬Oη♦¬ϕ
(Ax4) Pη

fϕ ∨ Pη

f(ϕ ∨ ψ) ↔ (Pη
f¬ϕ
fϕ ↔ ¬Pη

(Ax5) Oη
(Ax6) Pη(ϕ U ψ) ↔ (ψ ∨ (ϕ ∧ Pη
(Ax7) Oη(ϕ U ψ) ↔ (ψ ∨ (ϕ ∧ Oη
(Ax8) Pη

f(cid:6) ∧ Oη

f(cid:6)

fψ)

fPη(ϕ U ψ)))
fOη(ϕ U ψ)))

(Ax9) Oη

(Ax9b) Oη

(Ax10) Oη

(ϕ → (¬ψ ∧ Pη
(ϕ → (¬ψ ∧ Pη
(ϕ → (¬ψ ∧ (γ → Oη

fϕ)) → (ϕ → ¬Oη(γ U ψ))
fϕ)) → (ϕ → ¬Oη♦ψ)

fϕ))) → (ϕ →

¬Pη(γ U ψ))

fψ)

(Ax10b) Oη

(ϕ → (¬ψ ∧ Oη
(ϕ → ψ) → (Pη

fϕ)) → (ϕ → ¬Pη♦ψ)
fϕ → Pη
(Ax11) Oη
(R1) If (cid:12) ϕ then (cid:12) Oη ϕ (generalization)
(R2) If (cid:12) ϕ and (cid:12) ϕ → ψ then (cid:12) ψ (modus ponens)
α → Oηα
(Obl) Oη∅
(Perm) Pηα → Pη∅
α
(Obl+) η (cid:13) η(cid:2) → (Oηα → Oη(cid:3) α)
(Perm+) η (cid:13) η(cid:2) → (Pη(cid:3) α → Pηα)

− ((Ax1)–(R2), derived from
Figure 1: The three systems NTL
an axiomatisation of CTL); NTL ((Ax1)–(R2),(Obl),(Perm));
+ ((Ax1)–(R2),(Obl+),(Perm+)). α stands for a temporal
NTL
formula.

η ≡ η(cid:3) and η (cid:2) η(cid:3) ((cid:19) can then be deﬁned), interpreted in
the obvious way (e.g., K, s |=I η (cid:2) η(cid:3) iff I(η) ⊂ I(η(cid:3))). An
+, denoted (cid:18)+, is obtained from (cid:18)− by
axiom system for NTL
adding the schemes (Obl+) and (Perm+) (Figure 1).

Theorem 1 (Soundness and Completeness) The inference
mechanism (cid:18)− is sound and complete with respect to validity
− formulas, i.e., for every formula ϕ in the language
of NTL
−, we have |= ϕ iff (cid:18)− ϕ. The same holds for (cid:18) with
of NTL
respect to formulas from NTL and (cid:18)+ with respect to NTL
+.
Proof: All three cases are proven by adjusting the tech-
− case,
nique presented in [Emerson, 1990]. For the NTL
the tableau-based construction of [Emerson, 1990] immedi-
ately carries through: we will encounter, for every generated
state, successors of different dimensions. For the case of NTL,
which includes the symbol η∅, we have to add clauses corre-
sponding to (Obl) and (Perm) to the construction of the clo-
sure cl(ϕ) of a formula ϕ: if Oη∅
α (respectively, Pηα) is in
α) should be in cl(ϕ).
cl(ϕ) then also Oηα (respectively, Pη∅
+, we have to close off cl(ϕ) under the
In the case of NTL
implications of axioms (Obl+) and (Perm+).

2

Going beyond NTL

+, we can impose further structure on
Ση and its interpretations. For example, we can add unions
and intersections of normative systems by requiring Ση to in-
clude symbols η (cid:20) η(cid:3), η (cid:21) η(cid:3) whenever it includes η and η(cid:3),

and require interpretations to interpret (cid:20) as set union and (cid:21)
as set intersection. As discussed above, we must then further
restrict interpretations such that R \ (I(η1) ∪ I(η2)) always is
total. This would give us a kind of calculus of normative sys-
tems. Let K be a Kripke structure and I be an interpretation
with the mentioned properties:

K |=I Pη(cid:4)η(cid:3) ϕ → Pηϕ
K |=I Oηϕ → Oη(cid:4)η(cid:3) ϕ

K |=I Pηϕ → Pη(cid:5)η(cid:3) ϕ
K |=I Oη(cid:5)η(cid:3) ϕ → Oηϕ

(all of which follow from Proposition 1). Having such a cal-
culus allows one to reason about the composition of norma-
tive systems.

Relationship with Deontic Logic: The two main differ-
ences between the language of NTL and the language of
conventional deontic logic (henceforth “deontic logic”) are,
ﬁrst, contextual deontic operators allowing a formula to refer
to several different normative systems, and, second, tempo-
ral operators. All deontic expressions in NTL refer to time:
gϕ (“it is permissible in the context of η that ϕ is true at
Pη
the next time point”); Oη ϕ (“it is obligatory in the context
of η that ϕ always will be true”); etc. Deontic logic contains
no notion of time. In order to compare our temporal deon-
tic statements with those of deontic logic we must take the
temporal dimension to be implicit in the latter. Two of the
perhaps most natural ways of doing that is to take “obliga-
tory” (Oϕ) to mean “always obligatory” (Oη ϕ), or “oblig-
gϕ), respectively, and
atory at the next point in time” (Oη
similarly for permission.
In either case, all the principles
of Standard Deontic Logic (SDL) hold also for NDL, viz.,
O(ϕ → ψ) → (Oϕ → Oψ) (K); ¬O⊥ (D); and from ϕ
infer Oϕ (N). The two mentioned temporal interpretations of
the (crucial) deontic axiom D are (both NTL validities):

¬Oη ⊥ and ¬Oη

g⊥

With these translations, all of the most commonly discussed
so-called paradoxes of deontic logic also holds in NTL. How-
ever, it has been argued (cf., e.g., [Meyer and Wieringa,
1993]) that one of the causes behind some of the instances of
the paradoxes (particularly those involving contrary-to-duty
obligations) is that the language of conventional deontic logic
is too weak, and that by incorporating temporal operators
some instances of the paradoxes can be avoided.

3 Symbolic Representations
In practice, explicit state representations of Kripke structures
are rarely if ever used when reasoning about systems, be-
cause of the state explosion problem: given a system with
n Boolean variables, the system will typically have 2n states.
Instead, practical reasoning tools provide succinct, symbolic
representation languages for deﬁning Kripke structures. We
present such a language for deﬁning models, and also intro-
duce an associated symbolic language for deﬁning normative
systems.

A Symbolic Language for Models: We present the SIM-
PLE REACTIVE MODULES LANGUAGE (SRML), a “stripped
down” version of Alur and Henzinger’s REACTIVE MODULES

IJCAI-07

1177

LANGUAGE (RML) [Alur and Henzinger, 1999], which was
introduced in [Hoek et al., 2006]. SRML represents the core
of RML, with some “syntactic sugar” removed to simplify the
presentation and semantics. The basic idea is to present a
Kripke structure K by means of a number of symbolically
represented agents, where the choices available to every agent
are deﬁned by a number of rules, deﬁning which actions are
available to the agent in every state; a transition (s, s(cid:3)) in K
corresponds to a tuple of actions, one for each agent in the
system. Here is an example of an agent deﬁnition in SRML
(agents are referred to as “modules” in (S)RML):

module toggle controls x

init
(cid:8)1 : (cid:6) ; x
(cid:8)2 : (cid:6) ; x
update
(cid:8)3 : x ; x
(cid:8)4 : (¬x) ; x

(cid:2) := (cid:6)
(cid:2) := ⊥

(cid:2) := ⊥

(cid:2) := (cid:6)

This module, named toggle, controls a single Boolean vari-
able, x. The choices available to the agent are deﬁned by
the init and update rules2. The init rules deﬁne the
choices available to the agent with respect to the initialisation
of its variables, while the update rules deﬁne the agent’s
choices subsequently. In this example, there are two init
rules and two update rules. The init rules deﬁne two
choices for the initialisation of variable x: assign it the value
(cid:17) or the value ⊥. Both of these rules can ﬁre initially, as
their conditions ((cid:17)) are always satisﬁed; in fact, only one
of the available rules will ever actually ﬁre, corresponding
to the “choice made” by the agent on that decision round.
The effect of ﬁring a rule is to execute the assignment state-
ments on the r.h.s. of the rule, which modify the agent’s con-
trolled variables. (The “prime” notation for variables, e.g.,
(cid:3), means “the value of x afterwards”.) Rules are identiﬁed
x
by labels ((cid:7)i); these labels do not form part of the original
RML language, and in fact play no part in the semantics of
SRML – they are used to identify rules in normative systems,
as we shall see below. We assume a distinguished label “[]”
for rules, which is used to identify rules that should never
be made illegal by any normative system. With respect to
update rules, the ﬁrst rule says that if x has the value (cid:17),
then the corresponding action is to assign it the value ⊥, while
the second rule says that if x has the value ⊥, then it can sub-
sequently be assigned the value (cid:17). In sum, the module non-
deterministically chooses a value for x initially, and then on
subsequent rounds toggles this value.
In this example, the
init rules are non-deterministic, while the update rules
are deterministic. An SRML system, ρ, is a set of such mod-
ules, where the controlled variables of modules are mutually
disjoint.

The Kripke structure Kρ = (cid:3)Sρ, S0

, Rρ, Vρ(cid:4) corresponding
to SRML system ρ is given as follows: the state set Sρ and val-
uation function Vρ corresponds to states (valuations of vari-
ables) that could be reached by ρ, with initial states S0
ρ being
states that could be generated by init rules; the transition
relation Rρ is deﬁned by (s, s(cid:3)) ∈ Rρ iff there exists a tuple of
update rules, one for each module in the system, such that

ρ

each rule is enabled in s and s(cid:3) is obtained from executing this
collection of rules on s.

A Symbolic Language for Normative Systems: We now
introduce the SRML Norm Language (SNL) for representing
normative systems, which corresponds to the SRML language
for models. The general form of an SNL normative system
deﬁnition is:

normative-system id

χ1 disables (cid:8)11

, . . . , (cid:8)1

k

· · ·

χm disables (cid:8)m1

, . . . , (cid:8)mk

Here, id ∈ Ση is the name of the normative system; these
names will be used to refer to normative systems in formulae
of NTL. The body of the normative system is deﬁned by a set
of constraint rules. A constraint rule

χ disables (cid:7)1, . . . , (cid:7)k

consists of a condition part χ, which is a propositional logic
formula over the variables of the system, and a set of rule
labels {(cid:7)1, . . . , (cid:7)k} (we require [] (cid:6)∈ {(cid:7)1, . . . , (cid:7)k}). If χi is
satisﬁed in a particular state, then any SRML rule with a label
that appears on the r.h.s. of the constraint rule will be illegal
in that state, according to this normative system. An SNL
interpretation is then simply a set of SNL normative systems,
each with a distinct name.

Given SNL normative systems η1 and η2, for some SRML
system ρ, we say: η1 is at least as liberal as η2 in system ρ if
for every state s ∈ Sρ, every rule that is legal according to η2
is legal according to η1; and they are equivalent if for every
state s ∈ Sρ, the set of rules legal according to η1 and η2 are
the same.

Theorem 2 The problem of testing whether SNL normative
system η1 is at least as liberal as SNL normative system η2 is
PSPACE-complete, as is the problem of testing equivalence of
such systems.

Proof: We do the proof for checking equivalence; the lib-
erality case is similar. For membership of PSPACE, consider
the complement problem: guess a state s, check that s ∈ Sρ,
(reachability of states in RML is in PSPACE [Alur and Hen-
zinger, ]) and check that there is some rule legal in s according
to η2 is not legal in s according to η1, or vice versa. Hence the
complement problem is in NPSPACE, and so the problem is
in PSPACE. For PSPACE-hardness, we reduce the problem of
propositional invariant checking over (S)RML modules [Alur
and Henzinger, ]. Given an SRML system ρ and propositional
formula ϕ, deﬁne normative systems η1 and η2 as follows
(where (cid:7) does not occur in ρ):

normative-system η1

¬ϕ disables (cid:8)

normative-system η2

⊥ disables (cid:8)

According to η2, (cid:7) is always enabled; thus η1 will be equiva-
lent to η2 iff ϕ holds across all reachable states of the system.

2To be more precise, the rules are guarded commands.

2

IJCAI-07

1178

4 Model Checking

Model checking is an important computational problem for
any modal or temporal logic [Clarke et al., 2000]. We con-
sider two versions of the model checking problem for NTL,
depending on whether the model is presented explicitly or
symbolically. For each of these cases, there are two fur-
ther possibilities, depending on whether we are given an in-
terpretation I for normative systems named in formulae or
not. If we are given an interpretation for the normative sys-
tems named in the formula, then NTL model checking essen-
tially amounts to a conventional veriﬁcation problem: show-
ing that, under the given interpretation, the model and asso-
ciated normative systems have certain properties. However,
the uninterpreted model checking problem corresponds to the
synthesis of normative systems: we ask whether there exist
normative systems that would have the desired properties.

Explicit State Model Checking: The interpreted explicit
state model checking problem for NTL is as follows.

0, R, V(cid:16), interpreta-
Given a Kripke structure K = (cid:15)S, S
tion I : Ση → N(R) and formula ϕ of NTL, is it the case
that K |=I ϕ?

The CTL model checking problem is P-complete [Schnoebe-
len, 2003]. The standard dynamic programming algorithm for
CTL model checking may be easily adapted for interpreted ex-
plicit state NTL model checking, and has the same worst case
time complexity. More interesting is the case where we are
not given an interpretation. The uninterpreted explicit state
model checking problem for NTL is as follows.

0, R, V(cid:16) and formula
Given a Kripke structure K = (cid:15)S, S
ϕ of NTL, does there exist an interpretation I : Ση →
N(R) such that K |=I ϕ?

Theorem 3 The uninterpreted explicit state model checking
problem for NTL is NP-complete.

Proof:
For membership in NP, simply guess an interpre-
tation I and verify that K |=I ϕ. Since interpretations are
polynomial in the size of the Kripke structure and formula,
guessing can be done in (nondeterministic) polynomial time,
and checking is the interpreted explicit state model checking
problem. Hence the problem is in NP. For NP-hardness, we
reduce SAT. Given SAT instance ϕ over variables x1, . . . , xk,
for each variable xi, create two variables t(xi) and f (xi), and
deﬁne a Kripke structure with 3k + 1 states, as illustrated in
Figure 2; state s0 is the initial state, and state s3k is a ﬁnal
state. Let ϕ∗ denote the NTL formula obtained from ϕ by
systematically replacing every variable xi with (Pη♦t(xi)).
Deﬁne the formula to be model checked as:

V

ϕ∗ ∧
V

1≤i≤k

(Pη♦(t(xi) ∨ f (xi))) ∧

1≤i≤k
(Pη♦t(xi) → ¬Pη♦f (xi))(Pη♦f (xi) → ¬Pη♦t(xi))

This formula is satisﬁed in the structure by some interpreta-
tion iff ϕ is satisﬁable.

2

s1

t(x1)

s0

s4

t(x2)

t(xk)

s(3k)

s3

s6

...

f(x1)

s2

f(x2)

s5

f(xk)

Figure 2: Reduction for Theorem 3.

Symbolic Model Checking: As we noted above, explicit
state model checking problems are perhaps of limited inter-
est, since such representations are exponentially large in the
number of propositional variables. Thus we now consider the
SRML model checking problem for NTL. Again, we have two
versions, depending on whether we are given an interpreta-
tion or not.

Theorem 4 The interpreted SRML model checking problem
for NTL is PSPACE-complete.

Proof:
PSPACE-hardness is by a reduction from the prob-
lem of propositional invariant veriﬁcation for SRML [Alur
and Henzinger, ]3. Given a propositional formula ϕ and an
(S)RML system ρ, let I = {η∅}, and simply check whether
Kρ |=I Oη∅
ϕ. Membership of PSPACE is by adapting the
CTL symbolic model checking algorithm of [Cheng, 1995]. 2

Theorem 5 The uninterpreted SRML model checking prob-
lem for NTL is EXPTIME-hard.

Proof:
By reduction from the problem of determin-
ing whether a given player has a winning strategy in the
two-player game PEEK-G4 [Stockmeyer and Chandra, 1979,
p.158]. An instance of PEEK-G4 is a quad (cid:3)X1, X2, X3, ϕ(cid:4)
where: X1 and X2 are disjoint, ﬁnite sets of Boolean variables
– variables X1 are under the control of agent 1, and X2 are
under the control of agent 2; X3 ⊆ (X1 ∪ X2) are the variables
true in the initial state of the game; and ϕ is a propositional
formula over X1 ∪ X2, representing the winning condition.
The agents take try to make ϕ true, by taking it in turns to
alter the value of at most one of their variables. The deci-
sion problem is to determine whether agent 2 has a winning
strategy in a given game. The idea of the proof is to deﬁne an
SRML system that such that the runs of the system correspond
to plays of the given game instance, and then to deﬁne an
NTL formula to be model checked, which names a normative
system η, such that the transitions legal according to η corre-
spond to a winning strategy for player 2. The construction of
the SRML system follows that of the EXPTIME-completeness
proof of ATL model checking in [Hoek et al., 2006], with
the difference that player 2’s update rules are given labels (so
that they may be disabled). The formula to model check then
deﬁnes three properties: (i) if it is agent 2’s turn, then accord-
ing to η at most one of its possible moves is legal; (ii) all of
agent 1’s moves are legal according to η (i.e, agent 2 must
win against all of these); and (iii) the legal paths according to
η must represent wins for agent 2.

2

3In fact, the result of [Alur and Henzinger, 1999] is stated for

RML, but the proof only makes use of features from SRML.

IJCAI-07

1179

5 Example: Trafﬁc Norms
Consider a circular road, with two parallel lanes. Vehicles cir-
culate on the two lanes clockwise. We consider two types of
vehicles: cars, and ambulances. The road is discretised in a ﬁ-
nite number of positions, each one represented as an instance
of a proposition at(lane-number, lane-position, vehicle-id).
Thus at(2, 5, car23) means agent car23 is on lane 2 at po-
sition 5 (lane 1 is the outer lane, lane 2 is the inner lane). We
also refer to lane 1 as the left lane and to lane 2 as the right
lane. At each time step, cars can either remain still or change
their position by one unit, moving either straight or changing
lane. Ambulances can remain still or change their position
by one or two units, either straight or changing lanes at will.
We are interested in normative systems that prevent crashes,
and that permit ambulances take priority over private cars. So
consider the following normative systems:

• η1: Ambulances have priority over all other vehicles

(i.e., cars stop to allow ambulances overtake them);

• η2: Cars cannot use the rightmost (priority) lane;
• η3: Vehicles have “right” priority (i.e., left lane has to
give way to any car running in parallel on the right lane).

We modelled this scenario using an RML-based model check-
ing system for ATL [Alur et al., 2002]. Each vehicle is mod-
elled as a module containing the rules that determine their
physically legal movements, and global trafﬁc control is mod-
elled as a set of norms that constrain the application of certain
rules. For example, here is the (somewhat simpliﬁed) deﬁni-
tion of a car (we abuse notation to facilitate comprehension:
for example addition and subtraction here are modulo-n op-
erations, where n is the number of road positions, and the
at(. . .) predicates are implemented as propositions):

module car-23 controls at(l,p,car-23)
init

[] // initialise ...

update

car-23-straight:

at(l,p,car-23) &
... & not(at(l,p+1,vehicle-n)) ->

not(at(l,p+1,car-1)) &

at(l,p+1,car-23)’ := T, at(l,p,car-23)’ := F;

car-23-right:

at(1,p,car-23) &
... & not(at(2,p+1,vehicle-n)) ->

not(at(2,p+1,car-1)) &

at(2,p+1,car-23)’ := T, at(1,p,car-23)’ := F;

car-23-left:

at(2,p,car-23) & not(at(1,p+1,car-1)) &
... & not(at(1,p+1,vehicle-n)) ->

at(1,p+1,car-23)’ := T, at(2,p,car-23)’ := F;

car-23-still:

T -> skip;

We can then deﬁne the norms described above using
SNL; (again, we abuse notation somewhat in the interests of
brevity; variables must be expanded out for each car and po-
sition, in the obvious way):

normative-system N1

at(1,p,car-i) and at(1,p-1,amb-j) disables

car-i-straight, car-i-left, car-i-right;

normative-system N2

at(2,p,car-i) disables

car-i-straight, car-i-still;

at(1,p,car-i) disables car-i-right;

normative-system N3

at(1,p,car-i) and at(2,p,car-j) disables

car-i-straight, car-i-right;

Using a model checker, we can then evaluate properties of
the system; e.g., if there is only one ambulance then we have
Oη1∪η2∪η3

¬crash.

6 Conclusions & Acknowledgments
Several issues present themselves for future work:
tight
bounds for complexity of uninterpreted symbolic model
checking, the complexity of satisﬁability, and a full imple-
mentation of a model checker encompassing the variations
discussed in section 4 are the most obvious.

We gratefully acknowledge support from the Spanish research
project Web(I)-2, TIC2003-08763-c02-00), the EU funded project
OpenKnowledge, FP6-027253), and the UK EPSRC project “Vir-
tual Organisations for E-Science”.

References
[Alur and Henzinger, ] R. Alur and T. A. Henzinger. Com-

puter aided veriﬁcation. In press.

[Alur and Henzinger, 1999] R. Alur and T. A. Henzinger.

Reactive modules. Form. Meth. Sys. Des., 15(11), 1999.

[Alur et al., 2002] R. Alur, T. A. Henzinger, and O. Kupfer-
man. Alternating-time temporal logic. JACM, 49(5):672–
713, 2002.

[Cheng, 1995] A. Cheng. Complexity results for model

checking. Tech. Rep. RS-95-18, Uni. Aarhus, 1995.

[Clarke et al., 2000] E. M. Clarke, O. Grumberg, and D. A.

Peled. Model Checking. MIT Press 2000.

[Emerson, 1990] E. A. Emerson. Temporal and modal logic.
In J. van Leeuwen, editor, Hand. of Theor. Comp. Sci. Vol.
B, pages 996–1072. Elsevier, 1990.

[Hoek et al., 2006] W. van der Hoek, A. Lomuscio, and
M. Wooldridge. On the complexity of practical ATL model
checking. In Proc. AAMAS-2006, 2006.

[Meyer and Wieringa, 1993] J.-J. Ch. Meyer and R.

J.
Wieringa, eds. Deontic Logic in Comp. Sci.. Wiley, 1993.
[Schnoebelen, 2003] P. Schnoebelen. The complexity of
temporal logic model checking. In Advances in Modal
Logic Vol 4, 2003.

[Shoham and Tennenholtz, 1996] Y. Shoham and M. Ten-
nenholtz. On social laws for artiﬁcial agent societies: Off-
line design. In Computational Theories of Interaction and
Agency. MIT Press, 1996.

[Stockmeyer and Chandra, 1979] L. J. Stockmeyer and A. K.
Chandra. Provably difﬁcult combinatorial games. SIAM
Jnl of Comp., 8(2):151–174, 1979.

[Wooldridge and van der Hoek, 2005] M. Wooldridge and
W. van der Hoek. On obligations and normative ability.
Jnl Appl. Logic, 4(3-4):396–420, 2005.

IJCAI-07

1180

